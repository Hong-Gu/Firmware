
build/main.elf-main:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c670  080001b0  080001b0  000081b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a90  0800c820  0800c820  00014820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000494  20000000  0800f2b0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ccmram       00000000  10000000  10000000  00018494  2**0
                  CONTENTS
  5 .bss          0000005c  20000494  20000494  00018494  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200004f0  200004f0  00018494  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  00018494  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000e389  00000000  00000000  000184c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000030cb  00000000  00000000  00026852  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001068  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f58  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000644f  00000000  00000000  0002b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005aa3  00000000  00000000  00031d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000003f  00000000  00000000  000377d2  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002ff0  00000000  00000000  00037814  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000256a  00000000  00000000  0003a804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080010a1 	stmdaeq	r0, {r0, r5, r7, ip}
 8000008:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800000c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000010:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000014:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000018:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
	...
 800002c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000030:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800003c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000040:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000044:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000048:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800004c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000050:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000054:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000058:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800005c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000060:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000064:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000068:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800006c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000070:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000074:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000078:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800007c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000080:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000084:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000088:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800008c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000090:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000094:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000098:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800009c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000a0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000a4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000a8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000ac:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000b0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000b4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000b8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000bc:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000c0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000c4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000c8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000cc:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000d0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000d4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000d8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000dc:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000e0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000e4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000e8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000ec:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000f0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000f4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000f8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80000fc:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000100:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000104:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000108:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800010c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000110:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000114:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000118:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800011c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000120:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000124:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000128:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800012c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000130:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000134:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000138:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800013c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000140:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000144:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000148:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800014c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000150:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000154:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000158:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800015c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000160:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000164:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000168:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800016c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000170:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000174:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000178:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800017c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000180:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000184:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000188:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800018c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000190:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000194:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 8000198:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 800019c:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80001a0:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80001a4:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}
 80001a8:	080010e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, ip}

Disassembly of section .text:

080001b0 <__aeabi_drsub-0x14>:
 80001b0:	0800f2b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, sp, lr, pc}
 80001b4:	20000000 	andcs	r0, r0, r0
 80001b8:	20000494 	mulcs	r0, r4, r4
 80001bc:	20000494 	mulcs	r0, r4, r4
 80001c0:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080001c4 <__aeabi_drsub>:
 80001c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__adddf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_dsub>:
 80001cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d0 <__adddf3>:
 80001d0:	b530      	push	{r4, r5, lr}
 80001d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001da:	ea94 0f05 	teq	r4, r5
 80001de:	bf08      	it	eq
 80001e0:	ea90 0f02 	teqeq	r0, r2
 80001e4:	bf1f      	itttt	ne
 80001e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001f6:	f000 80e2 	beq.w	80003be <__adddf3+0x1ee>
 80001fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000202:	bfb8      	it	lt
 8000204:	426d      	neglt	r5, r5
 8000206:	dd0c      	ble.n	8000222 <__adddf3+0x52>
 8000208:	442c      	add	r4, r5
 800020a:	ea80 0202 	eor.w	r2, r0, r2
 800020e:	ea81 0303 	eor.w	r3, r1, r3
 8000212:	ea82 0000 	eor.w	r0, r2, r0
 8000216:	ea83 0101 	eor.w	r1, r3, r1
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	2d36      	cmp	r5, #54	; 0x36
 8000224:	bf88      	it	hi
 8000226:	bd30      	pophi	{r4, r5, pc}
 8000228:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000230:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000234:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x70>
 800023a:	4240      	negs	r0, r0
 800023c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000240:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000244:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000248:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x84>
 800024e:	4252      	negs	r2, r2
 8000250:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000254:	ea94 0f05 	teq	r4, r5
 8000258:	f000 80a7 	beq.w	80003aa <__adddf3+0x1da>
 800025c:	f1a4 0401 	sub.w	r4, r4, #1
 8000260:	f1d5 0e20 	rsbs	lr, r5, #32
 8000264:	db0d      	blt.n	8000282 <__adddf3+0xb2>
 8000266:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026a:	fa22 f205 	lsr.w	r2, r2, r5
 800026e:	1880      	adds	r0, r0, r2
 8000270:	f141 0100 	adc.w	r1, r1, #0
 8000274:	fa03 f20e 	lsl.w	r2, r3, lr
 8000278:	1880      	adds	r0, r0, r2
 800027a:	fa43 f305 	asr.w	r3, r3, r5
 800027e:	4159      	adcs	r1, r3
 8000280:	e00e      	b.n	80002a0 <__adddf3+0xd0>
 8000282:	f1a5 0520 	sub.w	r5, r5, #32
 8000286:	f10e 0e20 	add.w	lr, lr, #32
 800028a:	2a01      	cmp	r2, #1
 800028c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000290:	bf28      	it	cs
 8000292:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a4:	d507      	bpl.n	80002b6 <__adddf3+0xe6>
 80002a6:	f04f 0e00 	mov.w	lr, #0
 80002aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ba:	d31b      	bcc.n	80002f4 <__adddf3+0x124>
 80002bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c0:	d30c      	bcc.n	80002dc <__adddf3+0x10c>
 80002c2:	0849      	lsrs	r1, r1, #1
 80002c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002cc:	f104 0401 	add.w	r4, r4, #1
 80002d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002d8:	f080 809a 	bcs.w	8000410 <__adddf3+0x240>
 80002dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e0:	bf08      	it	eq
 80002e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002e6:	f150 0000 	adcs.w	r0, r0, #0
 80002ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ee:	ea41 0105 	orr.w	r1, r1, r5
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002f8:	4140      	adcs	r0, r0
 80002fa:	eb41 0101 	adc.w	r1, r1, r1
 80002fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000302:	f1a4 0401 	sub.w	r4, r4, #1
 8000306:	d1e9      	bne.n	80002dc <__adddf3+0x10c>
 8000308:	f091 0f00 	teq	r1, #0
 800030c:	bf04      	itt	eq
 800030e:	4601      	moveq	r1, r0
 8000310:	2000      	moveq	r0, #0
 8000312:	fab1 f381 	clz	r3, r1
 8000316:	bf08      	it	eq
 8000318:	3320      	addeq	r3, #32
 800031a:	f1a3 030b 	sub.w	r3, r3, #11
 800031e:	f1b3 0220 	subs.w	r2, r3, #32
 8000322:	da0c      	bge.n	800033e <__adddf3+0x16e>
 8000324:	320c      	adds	r2, #12
 8000326:	dd08      	ble.n	800033a <__adddf3+0x16a>
 8000328:	f102 0c14 	add.w	ip, r2, #20
 800032c:	f1c2 020c 	rsb	r2, r2, #12
 8000330:	fa01 f00c 	lsl.w	r0, r1, ip
 8000334:	fa21 f102 	lsr.w	r1, r1, r2
 8000338:	e00c      	b.n	8000354 <__adddf3+0x184>
 800033a:	f102 0214 	add.w	r2, r2, #20
 800033e:	bfd8      	it	le
 8000340:	f1c2 0c20 	rsble	ip, r2, #32
 8000344:	fa01 f102 	lsl.w	r1, r1, r2
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	bfdc      	itt	le
 800034e:	ea41 010c 	orrle.w	r1, r1, ip
 8000352:	4090      	lslle	r0, r2
 8000354:	1ae4      	subs	r4, r4, r3
 8000356:	bfa2      	ittt	ge
 8000358:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800035c:	4329      	orrge	r1, r5
 800035e:	bd30      	popge	{r4, r5, pc}
 8000360:	ea6f 0404 	mvn.w	r4, r4
 8000364:	3c1f      	subs	r4, #31
 8000366:	da1c      	bge.n	80003a2 <__adddf3+0x1d2>
 8000368:	340c      	adds	r4, #12
 800036a:	dc0e      	bgt.n	800038a <__adddf3+0x1ba>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0220 	rsb	r2, r4, #32
 8000374:	fa20 f004 	lsr.w	r0, r0, r4
 8000378:	fa01 f302 	lsl.w	r3, r1, r2
 800037c:	ea40 0003 	orr.w	r0, r0, r3
 8000380:	fa21 f304 	lsr.w	r3, r1, r4
 8000384:	ea45 0103 	orr.w	r1, r5, r3
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f1c4 040c 	rsb	r4, r4, #12
 800038e:	f1c4 0220 	rsb	r2, r4, #32
 8000392:	fa20 f002 	lsr.w	r0, r0, r2
 8000396:	fa01 f304 	lsl.w	r3, r1, r4
 800039a:	ea40 0003 	orr.w	r0, r0, r3
 800039e:	4629      	mov	r1, r5
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	fa21 f004 	lsr.w	r0, r1, r4
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f094 0f00 	teq	r4, #0
 80003ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b2:	bf06      	itte	eq
 80003b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003b8:	3401      	addeq	r4, #1
 80003ba:	3d01      	subne	r5, #1
 80003bc:	e74e      	b.n	800025c <__adddf3+0x8c>
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf18      	it	ne
 80003c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c8:	d029      	beq.n	800041e <__adddf3+0x24e>
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	d005      	beq.n	80003e2 <__adddf3+0x212>
 80003d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003da:	bf04      	itt	eq
 80003dc:	4619      	moveq	r1, r3
 80003de:	4610      	moveq	r0, r2
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea91 0f03 	teq	r1, r3
 80003e6:	bf1e      	ittt	ne
 80003e8:	2100      	movne	r1, #0
 80003ea:	2000      	movne	r0, #0
 80003ec:	bd30      	popne	{r4, r5, pc}
 80003ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f2:	d105      	bne.n	8000400 <__adddf3+0x230>
 80003f4:	0040      	lsls	r0, r0, #1
 80003f6:	4149      	adcs	r1, r1
 80003f8:	bf28      	it	cs
 80003fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000404:	bf3c      	itt	cc
 8000406:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040a:	bd30      	popcc	{r4, r5, pc}
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf1a      	itte	ne
 8000424:	4619      	movne	r1, r3
 8000426:	4610      	movne	r0, r2
 8000428:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800042c:	bf1c      	itt	ne
 800042e:	460b      	movne	r3, r1
 8000430:	4602      	movne	r2, r0
 8000432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000436:	bf06      	itte	eq
 8000438:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800043c:	ea91 0f03 	teqeq	r1, r3
 8000440:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	bf00      	nop

08000448 <__aeabi_ui2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f04f 0500 	mov.w	r5, #0
 8000460:	f04f 0100 	mov.w	r1, #0
 8000464:	e750      	b.n	8000308 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_i2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000480:	bf48      	it	mi
 8000482:	4240      	negmi	r0, r0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e73e      	b.n	8000308 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_f2d>:
 800048c:	0042      	lsls	r2, r0, #1
 800048e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000492:	ea4f 0131 	mov.w	r1, r1, rrx
 8000496:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049a:	bf1f      	itttt	ne
 800049c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004a8:	4770      	bxne	lr
 80004aa:	f092 0f00 	teq	r2, #0
 80004ae:	bf14      	ite	ne
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	e720      	b.n	8000308 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_ul2d>:
 80004c8:	ea50 0201 	orrs.w	r2, r0, r1
 80004cc:	bf08      	it	eq
 80004ce:	4770      	bxeq	lr
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	f04f 0500 	mov.w	r5, #0
 80004d6:	e00a      	b.n	80004ee <__aeabi_l2d+0x16>

080004d8 <__aeabi_l2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004e6:	d502      	bpl.n	80004ee <__aeabi_l2d+0x16>
 80004e8:	4240      	negs	r0, r0
 80004ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fa:	f43f aedc 	beq.w	80002b6 <__adddf3+0xe6>
 80004fe:	f04f 0203 	mov.w	r2, #3
 8000502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000506:	bf18      	it	ne
 8000508:	3203      	addne	r2, #3
 800050a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050e:	bf18      	it	ne
 8000510:	3203      	addne	r2, #3
 8000512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000516:	f1c2 0320 	rsb	r3, r2, #32
 800051a:	fa00 fc03 	lsl.w	ip, r0, r3
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 fe03 	lsl.w	lr, r1, r3
 8000526:	ea40 000e 	orr.w	r0, r0, lr
 800052a:	fa21 f102 	lsr.w	r1, r1, r2
 800052e:	4414      	add	r4, r2
 8000530:	e6c1      	b.n	80002b6 <__adddf3+0xe6>
 8000532:	bf00      	nop

08000534 <__aeabi_dmul>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800053e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000542:	bf1d      	ittte	ne
 8000544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000548:	ea94 0f0c 	teqne	r4, ip
 800054c:	ea95 0f0c 	teqne	r5, ip
 8000550:	f000 f8de 	bleq	8000710 <__aeabi_dmul+0x1dc>
 8000554:	442c      	add	r4, r5
 8000556:	ea81 0603 	eor.w	r6, r1, r3
 800055a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800055e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000566:	bf18      	it	ne
 8000568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800056c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000574:	d038      	beq.n	80005e8 <__aeabi_dmul+0xb4>
 8000576:	fba0 ce02 	umull	ip, lr, r0, r2
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000586:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058a:	f04f 0600 	mov.w	r6, #0
 800058e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000592:	f09c 0f00 	teq	ip, #0
 8000596:	bf18      	it	ne
 8000598:	f04e 0e01 	orrne.w	lr, lr, #1
 800059c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005a8:	d204      	bcs.n	80005b4 <__aeabi_dmul+0x80>
 80005aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ae:	416d      	adcs	r5, r5
 80005b0:	eb46 0606 	adc.w	r6, r6, r6
 80005b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005cc:	bf88      	it	hi
 80005ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d2:	d81e      	bhi.n	8000612 <__aeabi_dmul+0xde>
 80005d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005d8:	bf08      	it	eq
 80005da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005de:	f150 0000 	adcs.w	r0, r0, #0
 80005e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ec:	ea46 0101 	orr.w	r1, r6, r1
 80005f0:	ea40 0002 	orr.w	r0, r0, r2
 80005f4:	ea81 0103 	eor.w	r1, r1, r3
 80005f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005fc:	bfc2      	ittt	gt
 80005fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000606:	bd70      	popgt	{r4, r5, r6, pc}
 8000608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800060c:	f04f 0e00 	mov.w	lr, #0
 8000610:	3c01      	subs	r4, #1
 8000612:	f300 80ab 	bgt.w	800076c <__aeabi_dmul+0x238>
 8000616:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061a:	bfde      	ittt	le
 800061c:	2000      	movle	r0, #0
 800061e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000622:	bd70      	pople	{r4, r5, r6, pc}
 8000624:	f1c4 0400 	rsb	r4, r4, #0
 8000628:	3c20      	subs	r4, #32
 800062a:	da35      	bge.n	8000698 <__aeabi_dmul+0x164>
 800062c:	340c      	adds	r4, #12
 800062e:	dc1b      	bgt.n	8000668 <__aeabi_dmul+0x134>
 8000630:	f104 0414 	add.w	r4, r4, #20
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f305 	lsl.w	r3, r0, r5
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f205 	lsl.w	r2, r1, r5
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800064c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	fa21 f604 	lsr.w	r6, r1, r4
 8000658:	eb42 0106 	adc.w	r1, r2, r6
 800065c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000660:	bf08      	it	eq
 8000662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f1c4 040c 	rsb	r4, r4, #12
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f304 	lsl.w	r3, r0, r4
 8000674:	fa20 f005 	lsr.w	r0, r0, r5
 8000678:	fa01 f204 	lsl.w	r2, r1, r4
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	f141 0100 	adc.w	r1, r1, #0
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f205 	lsl.w	r2, r0, r5
 80006a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a4:	fa20 f304 	lsr.w	r3, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea43 0302 	orr.w	r3, r3, r2
 80006b0:	fa21 f004 	lsr.w	r0, r1, r4
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	fa21 f204 	lsr.w	r2, r1, r4
 80006bc:	ea20 0002 	bic.w	r0, r0, r2
 80006c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f094 0f00 	teq	r4, #0
 80006d4:	d10f      	bne.n	80006f6 <__aeabi_dmul+0x1c2>
 80006d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006da:	0040      	lsls	r0, r0, #1
 80006dc:	eb41 0101 	adc.w	r1, r1, r1
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf08      	it	eq
 80006e6:	3c01      	subeq	r4, #1
 80006e8:	d0f7      	beq.n	80006da <__aeabi_dmul+0x1a6>
 80006ea:	ea41 0106 	orr.w	r1, r1, r6
 80006ee:	f095 0f00 	teq	r5, #0
 80006f2:	bf18      	it	ne
 80006f4:	4770      	bxne	lr
 80006f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	eb43 0303 	adc.w	r3, r3, r3
 8000700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3d01      	subeq	r5, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1c6>
 800070a:	ea43 0306 	orr.w	r3, r3, r6
 800070e:	4770      	bx	lr
 8000710:	ea94 0f0c 	teq	r4, ip
 8000714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000718:	bf18      	it	ne
 800071a:	ea95 0f0c 	teqne	r5, ip
 800071e:	d00c      	beq.n	800073a <__aeabi_dmul+0x206>
 8000720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000724:	bf18      	it	ne
 8000726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072a:	d1d1      	bne.n	80006d0 <__aeabi_dmul+0x19c>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073e:	bf06      	itte	eq
 8000740:	4610      	moveq	r0, r2
 8000742:	4619      	moveq	r1, r3
 8000744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000748:	d019      	beq.n	800077e <__aeabi_dmul+0x24a>
 800074a:	ea94 0f0c 	teq	r4, ip
 800074e:	d102      	bne.n	8000756 <__aeabi_dmul+0x222>
 8000750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000754:	d113      	bne.n	800077e <__aeabi_dmul+0x24a>
 8000756:	ea95 0f0c 	teq	r5, ip
 800075a:	d105      	bne.n	8000768 <__aeabi_dmul+0x234>
 800075c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000760:	bf1c      	itt	ne
 8000762:	4610      	movne	r0, r2
 8000764:	4619      	movne	r1, r3
 8000766:	d10a      	bne.n	800077e <__aeabi_dmul+0x24a>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000786:	bd70      	pop	{r4, r5, r6, pc}

08000788 <__aeabi_ddiv>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800078e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000796:	bf1d      	ittte	ne
 8000798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800079c:	ea94 0f0c 	teqne	r4, ip
 80007a0:	ea95 0f0c 	teqne	r5, ip
 80007a4:	f000 f8a7 	bleq	80008f6 <__aeabi_ddiv+0x16e>
 80007a8:	eba4 0405 	sub.w	r4, r4, r5
 80007ac:	ea81 0e03 	eor.w	lr, r1, r3
 80007b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007b8:	f000 8088 	beq.w	80008cc <__aeabi_ddiv+0x144>
 80007bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e0:	429d      	cmp	r5, r3
 80007e2:	bf08      	it	eq
 80007e4:	4296      	cmpeq	r6, r2
 80007e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ee:	d202      	bcs.n	80007f6 <__aeabi_ddiv+0x6e>
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	1ab6      	subs	r6, r6, r2
 80007f8:	eb65 0503 	sbc.w	r5, r5, r3
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 000c 	orrcs.w	r0, r0, ip
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000864:	ea55 0e06 	orrs.w	lr, r5, r6
 8000868:	d018      	beq.n	800089c <__aeabi_ddiv+0x114>
 800086a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800086e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000872:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800087e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000886:	d1c0      	bne.n	800080a <__aeabi_ddiv+0x82>
 8000888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800088c:	d10b      	bne.n	80008a6 <__aeabi_ddiv+0x11e>
 800088e:	ea41 0100 	orr.w	r1, r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089a:	e7b6      	b.n	800080a <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	bf04      	itt	eq
 80008a2:	4301      	orreq	r1, r0
 80008a4:	2000      	moveq	r0, #0
 80008a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008aa:	bf88      	it	hi
 80008ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b0:	f63f aeaf 	bhi.w	8000612 <__aeabi_dmul+0xde>
 80008b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008b8:	bf04      	itt	eq
 80008ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c2:	f150 0000 	adcs.w	r0, r0, #0
 80008c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008d8:	bfc2      	ittt	gt
 80008da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	popgt	{r4, r5, r6, pc}
 80008e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e8:	f04f 0e00 	mov.w	lr, #0
 80008ec:	3c01      	subs	r4, #1
 80008ee:	e690      	b.n	8000612 <__aeabi_dmul+0xde>
 80008f0:	ea45 0e06 	orr.w	lr, r5, r6
 80008f4:	e68d      	b.n	8000612 <__aeabi_dmul+0xde>
 80008f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fa:	ea94 0f0c 	teq	r4, ip
 80008fe:	bf08      	it	eq
 8000900:	ea95 0f0c 	teqeq	r5, ip
 8000904:	f43f af3b 	beq.w	800077e <__aeabi_dmul+0x24a>
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	d10a      	bne.n	8000924 <__aeabi_ddiv+0x19c>
 800090e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000912:	f47f af34 	bne.w	800077e <__aeabi_dmul+0x24a>
 8000916:	ea95 0f0c 	teq	r5, ip
 800091a:	f47f af25 	bne.w	8000768 <__aeabi_dmul+0x234>
 800091e:	4610      	mov	r0, r2
 8000920:	4619      	mov	r1, r3
 8000922:	e72c      	b.n	800077e <__aeabi_dmul+0x24a>
 8000924:	ea95 0f0c 	teq	r5, ip
 8000928:	d106      	bne.n	8000938 <__aeabi_ddiv+0x1b0>
 800092a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800092e:	f43f aefd 	beq.w	800072c <__aeabi_dmul+0x1f8>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e722      	b.n	800077e <__aeabi_dmul+0x24a>
 8000938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000942:	f47f aec5 	bne.w	80006d0 <__aeabi_dmul+0x19c>
 8000946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094a:	f47f af0d 	bne.w	8000768 <__aeabi_dmul+0x234>
 800094e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000952:	f47f aeeb 	bne.w	800072c <__aeabi_dmul+0x1f8>
 8000956:	e712      	b.n	800077e <__aeabi_dmul+0x24a>

08000958 <__gedf2>:
 8000958:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800095c:	e006      	b.n	800096c <__cmpdf2+0x4>
 800095e:	bf00      	nop

08000960 <__ledf2>:
 8000960:	f04f 0c01 	mov.w	ip, #1
 8000964:	e002      	b.n	800096c <__cmpdf2+0x4>
 8000966:	bf00      	nop

08000968 <__cmpdf2>:
 8000968:	f04f 0c01 	mov.w	ip, #1
 800096c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000982:	d01b      	beq.n	80009bc <__cmpdf2+0x54>
 8000984:	b001      	add	sp, #4
 8000986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098a:	bf0c      	ite	eq
 800098c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000990:	ea91 0f03 	teqne	r1, r3
 8000994:	bf02      	ittt	eq
 8000996:	ea90 0f02 	teqeq	r0, r2
 800099a:	2000      	moveq	r0, #0
 800099c:	4770      	bxeq	lr
 800099e:	f110 0f00 	cmn.w	r0, #0
 80009a2:	ea91 0f03 	teq	r1, r3
 80009a6:	bf58      	it	pl
 80009a8:	4299      	cmppl	r1, r3
 80009aa:	bf08      	it	eq
 80009ac:	4290      	cmpeq	r0, r2
 80009ae:	bf2c      	ite	cs
 80009b0:	17d8      	asrcs	r0, r3, #31
 80009b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009b6:	f040 0001 	orr.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	d102      	bne.n	80009cc <__cmpdf2+0x64>
 80009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ca:	d107      	bne.n	80009dc <__cmpdf2+0x74>
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d1d6      	bne.n	8000984 <__cmpdf2+0x1c>
 80009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009da:	d0d3      	beq.n	8000984 <__cmpdf2+0x1c>
 80009dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <__aeabi_cdrcmple>:
 80009e4:	4684      	mov	ip, r0
 80009e6:	4610      	mov	r0, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	468c      	mov	ip, r1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4663      	mov	r3, ip
 80009f0:	e000      	b.n	80009f4 <__aeabi_cdcmpeq>
 80009f2:	bf00      	nop

080009f4 <__aeabi_cdcmpeq>:
 80009f4:	b501      	push	{r0, lr}
 80009f6:	f7ff ffb7 	bl	8000968 <__cmpdf2>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	bf48      	it	mi
 80009fe:	f110 0f00 	cmnmi.w	r0, #0
 8000a02:	bd01      	pop	{r0, pc}

08000a04 <__aeabi_dcmpeq>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff fff4 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2001      	moveq	r0, #1
 8000a10:	2000      	movne	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmplt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffea 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmple>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffe0 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a34:	bf94      	ite	ls
 8000a36:	2001      	movls	r0, #1
 8000a38:	2000      	movhi	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpge>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffce 	bl	80009e4 <__aeabi_cdrcmple>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpgt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffc4 	bl	80009e4 <__aeabi_cdrcmple>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <main>:
#include "main.h"
#include "attitude.h"


int main()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

	float GyroData[3] = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	3304      	adds	r3, #4

	L3GD20_Configuration();
 8000b22:	f000 f811 	bl	8000b48 <L3GD20_Configuration>
	

	while(1)
	{

		L3GD20_ReadGyro(GyroData);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f831 	bl	8000b90 <L3GD20_ReadGyro>

		for(int i=0; i<100000; i++);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e002      	b.n	8000b3a <main+0x32>
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <main+0x3c>)
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	ddf8      	ble.n	8000b34 <main+0x2c>
	}
 8000b42:	e7f0      	b.n	8000b26 <main+0x1e>
 8000b44:	0001869f 	muleq	r1, pc, r6	; <UNPREDICTABLE>

08000b48 <L3GD20_Configuration>:
*/

#include"attitude.h"

void L3GD20_Configuration(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
	/* L3GD20 Configuration */
  	L3GD20_InitTypeDef L3GD20_InitStructure;
	L3GD20_FilterConfigTypeDef L3GD20_FilterStructure;
	
	/* Configure for L3GD20 */
  	L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	723b      	strb	r3, [r7, #8]
  	L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	727b      	strb	r3, [r7, #9]
 	L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8000b56:	2307      	movs	r3, #7
 8000b58:	72bb      	strb	r3, [r7, #10]
 	L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8000b5a:	2330      	movs	r3, #48	; 0x30
 8000b5c:	72fb      	strb	r3, [r7, #11]
  	L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	733b      	strb	r3, [r7, #12]
  L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8000b62:	2300      	movs	r3, #0
 8000b64:	737b      	strb	r3, [r7, #13]
  L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_250; 
 8000b66:	2300      	movs	r3, #0
 8000b68:	73bb      	strb	r3, [r7, #14]
  L3GD20_Init(&L3GD20_InitStructure);
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fc72 	bl	8007458 <L3GD20_Init>
  
  /* Configure High-Pass Filter for L3GD20 */
  L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8000b74:	2300      	movs	r3, #0
 8000b76:	713b      	strb	r3, [r7, #4]
  L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	717b      	strb	r3, [r7, #5]
  L3GD20_FilterConfig(&L3GD20_FilterStructure);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f006 fd40 	bl	8007604 <L3GD20_FilterConfig>

  /* Configure High-Pass Filter for L3GD20 */ 
  L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000b84:	2010      	movs	r0, #16
 8000b86:	f006 fd61 	bl	800764c <L3GD20_FilterCmd>
};
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <L3GD20_ReadGyro>:


void L3GD20_ReadGyro(float* pfData)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {1.0};
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	833b      	strh	r3, [r7, #24]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	753b      	strb	r3, [r7, #20]
  int16_t RawData[3] = {0};
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	823b      	strh	r3, [r7, #16]
  uint8_t tmpreg = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	72fb      	strb	r3, [r7, #11]
  int i =0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  
  /* read data from specific register */
  L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000bb4:	f107 030b 	add.w	r3, r7, #11
 8000bb8:	4618      	mov	r0, r3
 8000bba:	2123      	movs	r1, #35	; 0x23
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f006 fda3 	bl	8007708 <L3GD20_Read>
  L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	2128      	movs	r1, #40	; 0x28
 8000bca:	2206      	movs	r2, #6
 8000bcc:	f006 fd9c 	bl	8007708 <L3GD20_Read>


  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & 0x40))
 8000bd0:	7afb      	ldrb	r3, [r7, #11]
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d124      	bne.n	8000c24 <L3GD20_ReadGyro+0x94>
  {
    for(i=0; i<3; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e01d      	b.n	8000c1c <L3GD20_ReadGyro+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	3301      	adds	r3, #1
 8000be6:	f107 0120 	add.w	r1, r7, #32
 8000bea:	440b      	add	r3, r1
 8000bec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	f107 0120 	add.w	r1, r7, #32
 8000bfc:	440b      	add	r3, r1
 8000bfe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	f107 0120 	add.w	r1, r7, #32
 8000c10:	440b      	add	r3, r1
 8000c12:	f823 2c14 	strh.w	r2, [r3, #-20]


  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & 0x40))
  {
    for(i=0; i<3; i++)
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	ddde      	ble.n	8000be0 <L3GD20_ReadGyro+0x50>
 8000c22:	e023      	b.n	8000c6c <L3GD20_ReadGyro+0xdc>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	e01d      	b.n	8000c66 <L3GD20_ReadGyro+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	f107 0220 	add.w	r2, r7, #32
 8000c32:	4413      	add	r3, r2
 8000c34:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	3301      	adds	r3, #1
 8000c42:	f107 0120 	add.w	r1, r7, #32
 8000c46:	440b      	add	r3, r1
 8000c48:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f107 0120 	add.w	r1, r7, #32
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f823 2c14 	strh.w	r2, [r3, #-20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	ddde      	ble.n	8000c2a <L3GD20_ReadGyro+0x9a>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }

  /* divide by sensitivity in 250dps */
  for(i=0; i<3; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	e018      	b.n	8000ca4 <L3GD20_ReadGyro+0x114>
  {
    pfData[i] = (float)RawData[i] / 114.285f;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	441a      	add	r2, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	f107 0120 	add.w	r1, r7, #32
 8000c82:	440b      	add	r3, r1
 8000c84:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	ee07 3a90 	vmov	s15, r3
 8000c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c92:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000cb0 <L3GD20_ReadGyro+0x120>
 8000c96:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c9a:	edc2 7a00 	vstr	s15, [r2]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }

  /* divide by sensitivity in 250dps */
  for(i=0; i<3; i++)
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dde3      	ble.n	8000c72 <L3GD20_ReadGyro+0xe2>
  {
    pfData[i] = (float)RawData[i] / 114.285f;
  }
};
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	42e491ec 	rscmi	r9, r4, #236, 2	; 0x3b

08000cb4 <Eulerangle>:

void Eulerangle(float* AttiData)
{
 8000cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cb8:	b091      	sub	sp, #68	; 0x44
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  float GyroData[3] = {0};
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	3304      	adds	r3, #4
  float dt = 0.01f; 
 8000cd4:	4b4b      	ldr	r3, [pc, #300]	; (8000e04 <Eulerangle+0x150>)
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  float E[4] = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	3304      	adds	r3, #4
  float dE[4] = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	3304      	adds	r3, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	3304      	adds	r3, #4

  L3GD20_ReadGyro(GyroData);  
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff3b 	bl	8000b90 <L3GD20_ReadGyro>

  /* state euqation of Quaternions */
  dE[0] = 0.5 * ( -GyroData[0] * E[1] - GyroData[1] * E[2] - GyroData[2] * E[3] );
 8000d1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d1e:	eeb1 7a67 	vneg.f32	s14, s15
 8000d22:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d3a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000d3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	edc7 7a03 	vstr	s15, [r7, #12]
  dE[1] = 0.5 * (  GyroData[0] * E[0] + GyroData[2] * E[2] - GyroData[1] * E[3] );
 8000d56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000d66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d72:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000d76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d82:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8a:	edc7 7a04 	vstr	s15, [r7, #16]
  dE[2] = 0.5 * (  GyroData[1] * E[0] - GyroData[2] * E[1] + GyroData[0] * E[3] );
 8000d8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000d9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000daa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000dae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dba:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc2:	edc7 7a05 	vstr	s15, [r7, #20]
  dE[3] = 0.5 * (  GyroData[2] * E[0] + GyroData[1] * E[1] - GyroData[0] * E[2] );
 8000dc6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000dd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000de2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000de6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df2:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfa:	edc7 7a06 	vstr	s15, [r7, #24]

  /* the euler integration */
  for(int i = 0; i<3; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e02:	e022      	b.n	8000e4a <Eulerangle+0x196>
 8000e04:	3c23d70a 	stccc	7, cr13, [r3], #-40	; 0xffffffd8
  {
    E[i] = E[i] + dE[i] * dt;
 8000e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e10:	4413      	add	r3, r2
 8000e12:	3b24      	subs	r3, #36	; 0x24
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e20:	4413      	add	r3, r2
 8000e22:	3b34      	subs	r3, #52	; 0x34
 8000e24:	edd3 6a00 	vldr	s13, [r3]
 8000e28:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b24      	subs	r3, #36	; 0x24
 8000e40:	edc3 7a00 	vstr	s15, [r3]
  dE[1] = 0.5 * (  GyroData[0] * E[0] + GyroData[2] * E[2] - GyroData[1] * E[3] );
  dE[2] = 0.5 * (  GyroData[1] * E[0] - GyroData[2] * E[1] + GyroData[0] * E[3] );
  dE[3] = 0.5 * (  GyroData[2] * E[0] + GyroData[1] * E[1] - GyroData[0] * E[2] );

  /* the euler integration */
  for(int i = 0; i<3; i++)
 8000e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e46:	3301      	adds	r3, #1
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	dddb      	ble.n	8000e08 <Eulerangle+0x154>
  {
    E[i] = E[i] + dE[i] * dt;
  }

  /* converge the Quaternions to Euler angle */
  AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
 8000e50:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e54:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000e60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e70:	ee17 0a90 	vmov	r0, s15
 8000e74:	f7ff fb0a 	bl	800048c <__aeabi_f2d>
 8000e78:	4604      	mov	r4, r0
 8000e7a:	460d      	mov	r5, r1
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb04 	bl	800048c <__aeabi_f2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	f00a f94a 	bl	800b12c <pow>
 8000e98:	4680      	mov	r8, r0
 8000e9a:	4689      	mov	r9, r1
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faf4 	bl	800048c <__aeabi_f2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb4:	f00a f93a 	bl	800b12c <pow>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f984 	bl	80001cc <__aeabi_dsub>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4690      	mov	r8, r2
 8000eca:	4699      	mov	r9, r3
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fadc 	bl	800048c <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	f00a f922 	bl	800b12c <pow>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4640      	mov	r0, r8
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f96c 	bl	80001cc <__aeabi_dsub>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4690      	mov	r8, r2
 8000efa:	4699      	mov	r9, r3
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fac4 	bl	800048c <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f14:	f00a f90a 	bl	800b12c <pow>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	4649      	mov	r1, r9
 8000f20:	f7ff f956 	bl	80001d0 <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
  {
    E[i] = E[i] + dE[i] * dt;
  }

  /* converge the Quaternions to Euler angle */
  AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff fc2c 	bl	8000788 <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f009 feda 	bl	800acf0 <atan>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fd90 	bl	8000a68 <__aeabi_d2f>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
  AttiData[1] = atan( 2*( E[0]*E[3] + E[1]*E[2] ) / \
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	1d1e      	adds	r6, r3, #4
 8000f52:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5e:	edd7 6a08 	vldr	s13, [r7, #32]
 8000f62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fa89 	bl	800048c <__aeabi_f2d>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
			( pow( E[0], 2 ) + pow( E[1], 2 ) - pow(E[2],2) - pow(E[3],2) ) );
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa83 	bl	800048c <__aeabi_f2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f96:	f00a f8c9 	bl	800b12c <pow>
 8000f9a:	4680      	mov	r8, r0
 8000f9c:	4689      	mov	r9, r1
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa73 	bl	800048c <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	f00a f8b9 	bl	800b12c <pow>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	f7ff f905 	bl	80001d0 <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4690      	mov	r8, r2
 8000fcc:	4699      	mov	r9, r3
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa5b 	bl	800048c <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	f00a f8a1 	bl	800b12c <pow>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4640      	mov	r0, r8
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	f7ff f8eb 	bl	80001cc <__aeabi_dsub>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4690      	mov	r8, r2
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa43 	bl	800048c <__aeabi_f2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	f00a f889 	bl	800b12c <pow>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4640      	mov	r0, r8
 8001020:	4649      	mov	r1, r9
 8001022:	f7ff f8d3 	bl	80001cc <__aeabi_dsub>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
  }

  /* converge the Quaternions to Euler angle */
  AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
  AttiData[1] = atan( 2*( E[0]*E[3] + E[1]*E[2] ) / \
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff fbab 	bl	8000788 <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f009 fe59 	bl	800acf0 <atan>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd0f 	bl	8000a68 <__aeabi_d2f>
 800104a:	4603      	mov	r3, r0
 800104c:	6033      	str	r3, [r6, #0]
			( pow( E[0], 2 ) + pow( E[1], 2 ) - pow(E[2],2) - pow(E[3],2) ) );
  AttiData[2] = asin( 2*( E[0]*E[2] - E[3]*E[1] ) );
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0408 	add.w	r4, r3, #8
 8001054:	ed97 7a07 	vldr	s14, [r7, #28]
 8001058:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800105c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001060:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001064:	edd7 7a08 	vldr	s15, [r7, #32]
 8001068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001070:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001074:	ee17 0a90 	vmov	r0, s15
 8001078:	f7ff fa08 	bl	800048c <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f009 fffc 	bl	800b080 <asin>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fcea 	bl	8000a68 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	6023      	str	r3, [r4, #0]

};
 8001098:	3744      	adds	r7, #68	; 0x44
 800109a:	46bd      	mov	sp, r7
 800109c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010a0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010a2:	e003      	b.n	80010ac <LoopCopyDataInit>

080010a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 80010a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010aa:	3104      	adds	r1, #4

080010ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 80010b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b4:	d3f6      	bcc.n	80010a4 <CopyDataInit>
  ldr  r2, =_sbss
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 80010b8:	e002      	b.n	80010c0 <LoopFillZerobss>

080010ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010bc:	f842 3b04 	str.w	r3, [r2], #4

080010c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 80010c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c4:	d3f9      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c6:	f000 f80f 	bl	80010e8 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fd1d 	bl	8000b08 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80010d0:	0800f2b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, sp, lr, pc}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d4:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 80010d8:	20000494 	mulcs	r0, r4, r4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80010dc:	20000494 	mulcs	r0, r4, r4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e0:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <SystemInit+0x5c>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <SystemInit+0x5c>)
 80010f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80010f4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80010f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <SystemInit+0x60>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <SystemInit+0x60>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <SystemInit+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <SystemInit+0x60>)
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <SystemInit+0x60>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <SystemInit+0x60>)
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SystemInit+0x64>)
 8001122:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <SystemInit+0x60>)
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <SystemInit+0x60>)
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800112e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SystemInit+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001136:	f000 f887 	bl	8001248 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800113a:	4b02      	ldr	r3, [pc, #8]	; (8001144 <SystemInit+0x5c>)
 800113c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001140:	609a      	str	r2, [r3, #8]
#endif
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	e000ed00 	and	lr, r0, r0, lsl #26
 8001148:	40023800 	andmi	r3, r2, r0, lsl #16
 800114c:	24003010 	strcs	r3, [r0], #-16

08001150 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	2302      	movs	r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	2302      	movs	r3, #2
 8001168:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b04      	cmp	r3, #4
 8001178:	d007      	beq.n	800118a <SystemCoreClockUpdate+0x3a>
 800117a:	2b08      	cmp	r3, #8
 800117c:	d009      	beq.n	8001192 <SystemCoreClockUpdate+0x42>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13f      	bne.n	8001202 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <SystemCoreClockUpdate+0xec>)
 8001186:	601a      	str	r2, [r3, #0]
      break;
 8001188:	e03f      	b.n	800120a <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 800118c:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <SystemCoreClockUpdate+0xf0>)
 800118e:	601a      	str	r2, [r3, #0]
      break;
 8001190:	e03b      	b.n	800120a <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	0d9b      	lsrs	r3, r3, #22
 800119c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80011ae:	4a24      	ldr	r2, [pc, #144]	; (8001240 <SystemCoreClockUpdate+0xf0>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 80011b8:	6859      	ldr	r1, [r3, #4]
 80011ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011be:	400b      	ands	r3, r1
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	fb03 f302 	mul.w	r3, r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00c      	b.n	80011e4 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SystemCoreClockUpdate+0xec>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011da:	400b      	ands	r3, r1
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	fb03 f302 	mul.w	r3, r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	3301      	adds	r3, #1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 80011fe:	601a      	str	r2, [r3, #0]
      break;
 8001200:	e003      	b.n	800120a <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <SystemCoreClockUpdate+0xec>)
 8001206:	601a      	str	r2, [r3, #0]
      break;
 8001208:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SystemCoreClockUpdate+0xe4>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <SystemCoreClockUpdate+0xf4>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	40da      	lsrs	r2, r3
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SystemCoreClockUpdate+0xe8>)
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	andmi	r3, r2, r0, lsl #16
 8001238:	20000000 	andcs	r0, r0, r0
 800123c:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8001240:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8001244:	20000004 	andcs	r0, r0, r4

08001248 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <SetSysClock+0xe4>)
 8001258:	4a34      	ldr	r2, [pc, #208]	; (800132c <SetSysClock+0xe4>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001260:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <SetSysClock+0xe4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3301      	adds	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d103      	bne.n	8001280 <SetSysClock+0x38>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800127e:	d1f0      	bne.n	8001262 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <SetSysClock+0xe4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800128c:	2301      	movs	r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	e001      	b.n	8001296 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d142      	bne.n	8001322 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <SetSysClock+0xe4>)
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <SetSysClock+0xe4>)
 80012a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <SetSysClock+0xe8>)
 80012aa:	4a21      	ldr	r2, [pc, #132]	; (8001330 <SetSysClock+0xe8>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80012b2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <SetSysClock+0xe4>)
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <SetSysClock+0xe4>)
 80012b8:	6892      	ldr	r2, [r2, #8]
 80012ba:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <SetSysClock+0xe4>)
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <SetSysClock+0xe4>)
 80012c0:	6892      	ldr	r2, [r2, #8]
 80012c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c6:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <SetSysClock+0xe4>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <SetSysClock+0xe4>)
 80012cc:	6892      	ldr	r2, [r2, #8]
 80012ce:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80012d2:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <SetSysClock+0xe4>)
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <SetSysClock+0xec>)
 80012d8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <SetSysClock+0xe4>)
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <SetSysClock+0xe4>)
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012e4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012e6:	bf00      	nop
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <SetSysClock+0xe4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f9      	beq.n	80012e8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <SetSysClock+0xf0>)
 80012f6:	f240 6204 	movw	r2, #1540	; 0x604
 80012fa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <SetSysClock+0xe4>)
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <SetSysClock+0xe4>)
 8001300:	6892      	ldr	r2, [r2, #8]
 8001302:	f022 0203 	bic.w	r2, r2, #3
 8001306:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <SetSysClock+0xe4>)
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <SetSysClock+0xe4>)
 800130c:	6892      	ldr	r2, [r2, #8]
 800130e:	f042 0202 	orr.w	r2, r2, #2
 8001312:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001314:	bf00      	nop
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <SetSysClock+0xe4>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d1f9      	bne.n	8001316 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023800 	andmi	r3, r2, r0, lsl #16
 8001330:	40007000 	andmi	r7, r0, r0
 8001334:	07404b19 	smlaldeq	r4, r0, r9, fp
 8001338:	40023c00 	andmi	r3, r2, r0, lsl #24

0800133c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <NVIC_PriorityGroupConfig+0x20>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60d3      	str	r3, [r2, #12]
}
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	and	lr, r0, r0, lsl #26

08001360 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	2300      	movs	r3, #0
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	230f      	movs	r3, #15
 8001372:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d037      	beq.n	80013ec <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <NVIC_Init+0xb4>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f1c3 0304 	rsb	r3, r3, #4
 8001390:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001392:	7b7a      	ldrb	r2, [r7, #13]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	fa42 f303 	asr.w	r3, r2, r3
 800139a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	789a      	ldrb	r2, [r3, #2]
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	4013      	ands	r3, r2
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <NVIC_Init+0xb8>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <NVIC_Init+0xb8>)
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	0952      	lsrs	r2, r2, #5
 80013d6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	7809      	ldrb	r1, [r1, #0]
 80013dc:	f001 011f 	and.w	r1, r1, #31
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80013ea:	e00e      	b.n	800140a <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <NVIC_Init+0xb8>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	0952      	lsrs	r2, r2, #5
 80013f4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	7809      	ldrb	r1, [r1, #0]
 80013fa:	f001 011f 	and.w	r1, r1, #31
 80013fe:	2001      	movs	r0, #1
 8001400:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001404:	3220      	adds	r2, #32
 8001406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	and	lr, r0, r0, lsl #26
 8001418:	e000e100 	and	lr, r0, r0, lsl #2

0800141c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <NVIC_SetVectorTable+0x28>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800142e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	430b      	orrs	r3, r1
 8001436:	6093      	str	r3, [r2, #8]
}
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	and	lr, r0, r0, lsl #26

08001448 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	71fa      	strb	r2, [r7, #7]
 8001454:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <NVIC_SystemLPConfig+0x3c>)
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <NVIC_SystemLPConfig+0x3c>)
 8001460:	6911      	ldr	r1, [r2, #16]
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	430a      	orrs	r2, r1
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	e006      	b.n	8001478 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <NVIC_SystemLPConfig+0x3c>)
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <NVIC_SystemLPConfig+0x3c>)
 800146e:	6911      	ldr	r1, [r2, #16]
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	43d2      	mvns	r2, r2
 8001474:	400a      	ands	r2, r1
 8001476:	611a      	str	r2, [r3, #16]
  }
}
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	and	lr, r0, r0, lsl #26

08001488 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d106      	bne.n	80014a4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <SysTick_CLKSourceConfig+0x34>)
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <SysTick_CLKSourceConfig+0x34>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e005      	b.n	80014b0 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_CLKSourceConfig+0x34>)
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SysTick_CLKSourceConfig+0x34>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e010 	and	lr, r0, r0, lsl r0

080014c0 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <GPIO_DeInit+0x138>)
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d108      	bne.n	80014e2 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80014d0:	2001      	movs	r0, #1
 80014d2:	2101      	movs	r1, #1
 80014d4:	f000 feb6 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80014d8:	2001      	movs	r0, #1
 80014da:	2100      	movs	r1, #0
 80014dc:	f000 feb2 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 80014e0:	e086      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <GPIO_DeInit+0x13c>)
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d108      	bne.n	80014fc <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80014ea:	2002      	movs	r0, #2
 80014ec:	2101      	movs	r1, #1
 80014ee:	f000 fea9 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80014f2:	2002      	movs	r0, #2
 80014f4:	2100      	movs	r1, #0
 80014f6:	f000 fea5 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 80014fa:	e079      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4b40      	ldr	r3, [pc, #256]	; (8001600 <GPIO_DeInit+0x140>)
 8001500:	429a      	cmp	r2, r3
 8001502:	d108      	bne.n	8001516 <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001504:	2004      	movs	r0, #4
 8001506:	2101      	movs	r1, #1
 8001508:	f000 fe9c 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800150c:	2004      	movs	r0, #4
 800150e:	2100      	movs	r1, #0
 8001510:	f000 fe98 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 8001514:	e06c      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <GPIO_DeInit+0x144>)
 800151a:	429a      	cmp	r2, r3
 800151c:	d108      	bne.n	8001530 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800151e:	2008      	movs	r0, #8
 8001520:	2101      	movs	r1, #1
 8001522:	f000 fe8f 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001526:	2008      	movs	r0, #8
 8001528:	2100      	movs	r1, #0
 800152a:	f000 fe8b 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 800152e:	e05f      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <GPIO_DeInit+0x148>)
 8001534:	429a      	cmp	r2, r3
 8001536:	d108      	bne.n	800154a <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001538:	2010      	movs	r0, #16
 800153a:	2101      	movs	r1, #1
 800153c:	f000 fe82 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001540:	2010      	movs	r0, #16
 8001542:	2100      	movs	r1, #0
 8001544:	f000 fe7e 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 8001548:	e052      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <GPIO_DeInit+0x14c>)
 800154e:	429a      	cmp	r2, r3
 8001550:	d108      	bne.n	8001564 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001552:	2020      	movs	r0, #32
 8001554:	2101      	movs	r1, #1
 8001556:	f000 fe75 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800155a:	2020      	movs	r0, #32
 800155c:	2100      	movs	r1, #0
 800155e:	f000 fe71 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 8001562:	e045      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <GPIO_DeInit+0x150>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d108      	bne.n	800157e <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800156c:	2040      	movs	r0, #64	; 0x40
 800156e:	2101      	movs	r1, #1
 8001570:	f000 fe68 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001574:	2040      	movs	r0, #64	; 0x40
 8001576:	2100      	movs	r1, #0
 8001578:	f000 fe64 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 800157c:	e038      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <GPIO_DeInit+0x154>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d108      	bne.n	8001598 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001586:	2080      	movs	r0, #128	; 0x80
 8001588:	2101      	movs	r1, #1
 800158a:	f000 fe5b 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800158e:	2080      	movs	r0, #128	; 0x80
 8001590:	2100      	movs	r1, #0
 8001592:	f000 fe57 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 8001596:	e02b      	b.n	80015f0 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <GPIO_DeInit+0x158>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d10a      	bne.n	80015b6 <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80015a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015a4:	2101      	movs	r1, #1
 80015a6:	f000 fe4d 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80015aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ae:	2100      	movs	r1, #0
 80015b0:	f000 fe48 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 80015b4:	e01c      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <GPIO_DeInit+0x15c>)
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d10a      	bne.n	80015d4 <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 80015be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015c2:	2101      	movs	r1, #1
 80015c4:	f000 fe3e 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80015c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015cc:	2100      	movs	r1, #0
 80015ce:	f000 fe39 	bl	8002244 <RCC_AHB1PeriphResetCmd>
 80015d2:	e00d      	b.n	80015f0 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <GPIO_DeInit+0x160>)
 80015d8:	429a      	cmp	r2, r3
 80015da:	d109      	bne.n	80015f0 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 80015dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015e0:	2101      	movs	r1, #1
 80015e2:	f000 fe2f 	bl	8002244 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80015e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015ea:	2100      	movs	r1, #0
 80015ec:	f000 fe2a 	bl	8002244 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020000 	andmi	r0, r2, r0
 80015fc:	40020400 	andmi	r0, r2, r0, lsl #8
 8001600:	40020800 	andmi	r0, r2, r0, lsl #16
 8001604:	40020c00 	andmi	r0, r2, r0, lsl #24
 8001608:	40021000 	andmi	r1, r2, r0
 800160c:	40021400 	andmi	r1, r2, r0, lsl #8
 8001610:	40021800 	andmi	r1, r2, r0, lsl #16
 8001614:	40021c00 	andmi	r1, r2, r0, lsl #24
 8001618:	40022000 	andmi	r2, r2, r0
 800161c:	40022400 	andmi	r2, r2, r0, lsl #8
 8001620:	40022800 	andmi	r2, r2, r0, lsl #16

08001624 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e076      	b.n	800172e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2201      	movs	r2, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d165      	bne.n	8001728 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2103      	movs	r1, #3
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	791b      	ldrb	r3, [r3, #4]
 800167a:	4619      	mov	r1, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d003      	beq.n	800169a <GPIO_Init+0x76>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d12e      	bne.n	80016f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2103      	movs	r1, #3
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	795b      	ldrb	r3, [r3, #5]
 80016b8:	4619      	mov	r1, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	799b      	ldrb	r3, [r3, #6]
 80016e6:	4619      	mov	r1, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2103      	movs	r1, #3
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	79db      	ldrb	r3, [r3, #7]
 8001718:	4619      	mov	r1, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d985      	bls.n	8001640 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	71da      	strb	r2, [r3, #7]
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8001780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001784:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	60fb      	str	r3, [r7, #12]
}
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e001      	b.n	80017de <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	b29b      	uxth	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	b29b      	uxth	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	831a      	strh	r2, [r3, #24]
}
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	835a      	strh	r2, [r3, #26]
}
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	460a      	mov	r2, r1
 800189c:	807a      	strh	r2, [r7, #2]
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	831a      	strh	r2, [r3, #24]
 80018ac:	e002      	b.n	80018b4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	835a      	strh	r2, [r3, #26]
  }
}
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	615a      	str	r2, [r3, #20]
}
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	405a      	eors	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	615a      	str	r2, [r3, #20]
}
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	460a      	mov	r2, r1
 800190c:	807a      	strh	r2, [r7, #2]
 800190e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001918:	787a      	ldrb	r2, [r7, #1]
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	b29b      	uxth	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3108      	adds	r1, #8
 800193c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	200f      	movs	r0, #15
 800194a:	fa00 f303 	lsl.w	r3, r0, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	4019      	ands	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <RCC_DeInit+0x60>)
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <RCC_DeInit+0x60>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <RCC_DeInit+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <RCC_DeInit+0x60>)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <RCC_DeInit+0x60>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <RCC_DeInit+0x60>)
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <RCC_DeInit+0x64>)
 80019b6:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <RCC_DeInit+0x60>)
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <RCC_DeInit+0x68>)
 80019bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <RCC_DeInit+0x60>)
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <RCC_DeInit+0x6c>)
 80019c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <RCC_DeInit+0x60>)
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <RCC_DeInit+0x60>)
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <RCC_DeInit+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <RCC_DeInit+0x60>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	andmi	r3, r2, r0, lsl #16
 80019f0:	24003010 	strcs	r3, [r0], #-16
 80019f4:	20003000 	andcs	r3, r0, r0
 80019f8:	24003000 	strcs	r3, [r0], #-0

080019fc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <RCC_HSEConfig+0x20>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <RCC_HSEConfig+0x20>)
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023802 	andmi	r3, r2, r2, lsl #16

08001a20 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001a32:	2031      	movs	r0, #49	; 0x31
 8001a34:	f000 fd56 	bl	80024e4 <RCC_GetFlagStatus>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001a48:	d002      	beq.n	8001a50 <RCC_WaitForHSEStartUp+0x30>
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001a50:	2031      	movs	r0, #49	; 0x31
 8001a52:	f000 fd47 	bl	80024e4 <RCC_GetFlagStatus>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e001      	b.n	8001a66 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <RCC_AdjustHSICalibrationValue+0x38>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <RCC_AdjustHSICalibrationValue+0x38>)
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	andmi	r3, r2, r0, lsl #16

08001aac <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <RCC_HSICmd+0x1c>)
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	42470000 	submi	r0, r7, #0

08001acc <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <RCC_LSEConfig+0x3c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <RCC_LSEConfig+0x3c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d002      	beq.n	8001aee <RCC_LSEConfig+0x22>
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d004      	beq.n	8001af6 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8001aec:	e007      	b.n	8001afe <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <RCC_LSEConfig+0x3c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e003      	b.n	8001afe <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_LSEConfig+0x3c>)
 8001af8:	2205      	movs	r2, #5
 8001afa:	701a      	strb	r2, [r3, #0]
      break;
 8001afc:	bf00      	nop
    default:
      break;
  }
}
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40023870 	andmi	r3, r2, r0, ror r8

08001b0c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <RCC_LSICmd+0x1c>)
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	42470e80 	submi	r0, r7, #128, 28	; 0x800

08001b2c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <RCC_PLLConfig+0x38>)
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	0191      	lsls	r1, r2, #6
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4311      	orrs	r1, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0412      	lsls	r2, r2, #16
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40023800 	andmi	r3, r2, r0, lsl #16

08001b68 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <RCC_PLLCmd+0x1c>)
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	42470060 	submi	r0, r7, #96	; 0x60

08001b88 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <RCC_PLLI2SConfig+0x2c>)
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	0191      	lsls	r1, r2, #6
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	0612      	lsls	r2, r2, #24
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	0712      	lsls	r2, r2, #28
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40023800 	andmi	r3, r2, r0, lsl #16

08001bb8 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <RCC_PLLI2SCmd+0x1c>)
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	42470068 	submi	r0, r7, #104	; 0x68

08001bd8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <RCC_PLLSAIConfig+0x2c>)
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	0191      	lsls	r1, r2, #6
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	0612      	lsls	r2, r2, #24
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	0712      	lsls	r2, r2, #28
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40023800 	andmi	r3, r2, r0, lsl #16

08001c08 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <RCC_PLLSAICmd+0x1c>)
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	42470070 	submi	r0, r7, #112	; 0x70

08001c28 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <RCC_ClockSecuritySystemCmd+0x1c>)
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	4247004c 	submi	r0, r7, #76	; 0x4c

08001c48 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <RCC_MCO1Config+0x38>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <RCC_MCO1Config+0x38>)
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	609a      	str	r2, [r3, #8]
}
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40023800 	andmi	r3, r2, r0, lsl #16

08001c84 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <RCC_MCO2Config+0x38>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <RCC_MCO2Config+0x38>)
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	609a      	str	r2, [r3, #8]
}
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40023800 	andmi	r3, r2, r0, lsl #16

08001cc0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <RCC_SYSCLKConfig+0x34>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 0303 	bic.w	r3, r3, #3
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <RCC_SYSCLKConfig+0x34>)
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]
}
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	andmi	r3, r2, r0, lsl #16

08001cf8 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <RCC_GetSYSCLKSource+0x1c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	b2db      	uxtb	r3, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	andmi	r3, r2, r0, lsl #16

08001d18 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <RCC_HCLKConfig+0x34>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <RCC_HCLKConfig+0x34>)
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	609a      	str	r2, [r3, #8]
}
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	andmi	r3, r2, r0, lsl #16

08001d50 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <RCC_PCLK1Config+0x34>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <RCC_PCLK1Config+0x34>)
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]
}
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	andmi	r3, r2, r0, lsl #16

08001d88 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <RCC_PCLK2Config+0x34>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <RCC_PCLK2Config+0x34>)
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	609a      	str	r2, [r3, #8]
}
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40023800 	andmi	r3, r2, r0, lsl #16

08001dc0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d007      	beq.n	8001e00 <RCC_GetClocksFreq+0x40>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d009      	beq.n	8001e08 <RCC_GetClocksFreq+0x48>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d13f      	bne.n	8001e78 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <RCC_GetClocksFreq+0x148>)
 8001dfc:	601a      	str	r2, [r3, #0]
      break;
 8001dfe:	e03f      	b.n	8001e80 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <RCC_GetClocksFreq+0x14c>)
 8001e04:	601a      	str	r2, [r3, #0]
      break;
 8001e06:	e03b      	b.n	8001e80 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	0d9b      	lsrs	r3, r3, #22
 8001e12:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e1c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <RCC_GetClocksFreq+0x14c>)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e34:	400b      	ands	r3, r1
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	fb03 f302 	mul.w	r3, r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e00c      	b.n	8001e5a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e40:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <RCC_GetClocksFreq+0x148>)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e48:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e50:	400b      	ands	r3, r1
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	fb03 f302 	mul.w	r3, r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	3301      	adds	r3, #1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
      break;
 8001e76:	e003      	b.n	8001e80 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <RCC_GetClocksFreq+0x148>)
 8001e7c:	601a      	str	r2, [r3, #0]
      break;
 8001e7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <RCC_GetClocksFreq+0x150>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001eb0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	0a9b      	lsrs	r3, r3, #10
 8001eb6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <RCC_GetClocksFreq+0x150>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <RCC_GetClocksFreq+0x144>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ed8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	0b5b      	lsrs	r3, r3, #13
 8001ede:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <RCC_GetClocksFreq+0x150>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	40da      	lsrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
}
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	andmi	r3, r2, r0, lsl #16
 8001f08:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8001f0c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8001f10:	20000014 	andcs	r0, r0, r4, lsl r0

08001f14 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f2a:	d111      	bne.n	8001f50 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <RCC_RTCCLKConfig+0x58>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f38:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <RCC_RTCCLKConfig+0x58>)
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <RCC_RTCCLKConfig+0x58>)
 8001f52:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <RCC_RTCCLKConfig+0x58>)
 8001f54:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	andmi	r3, r2, r0, lsl #16

08001f70 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <RCC_RTCCLKCmd+0x1c>)
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

08001f90 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <RCC_BackupResetCmd+0x1c>)
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	42470e40 	submi	r0, r7, #64, 28	; 0x400

08001fb0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <RCC_I2SCLKConfig+0x18>)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	4247015c 	submi	r0, r7, #92, 2

08001fcc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 031f 	bic.w	r3, r3, #31
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40023800 	andmi	r3, r2, r0, lsl #16

08002008 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 8002016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	andmi	r3, r2, r0, lsl #16

08002048 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <RCC_SAIBlockACLKConfig+0x38>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <RCC_SAIBlockACLKConfig+0x38>)
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	andmi	r3, r2, r0, lsl #16

08002084 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_SAIBlockBCLKConfig+0x38>)
 8002092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002096:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <RCC_SAIBlockBCLKConfig+0x38>)
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	andmi	r3, r2, r0, lsl #16

080020c0 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <RCC_LTDCCLKDivConfig+0x38>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <RCC_LTDCCLKDivConfig+0x38>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	andmi	r3, r2, r0, lsl #16

080020fc <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <RCC_TIMCLKPresConfig+0x18>)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]
  
}
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	424711e0 	submi	r1, r7, #224, 2	; 0x38

08002118 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <RCC_AHB1PeriphClockCmd+0x38>)
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <RCC_AHB1PeriphClockCmd+0x38>)
 800212e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	430a      	orrs	r2, r1
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
 8002136:	e006      	b.n	8002146 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <RCC_AHB1PeriphClockCmd+0x38>)
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <RCC_AHB1PeriphClockCmd+0x38>)
 800213c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	43d2      	mvns	r2, r2
 8002142:	400a      	ands	r2, r1
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	andmi	r3, r2, r0, lsl #16

08002154 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <RCC_AHB2PeriphClockCmd+0x38>)
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <RCC_AHB2PeriphClockCmd+0x38>)
 800216a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	430a      	orrs	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
 8002172:	e006      	b.n	8002182 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <RCC_AHB2PeriphClockCmd+0x38>)
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <RCC_AHB2PeriphClockCmd+0x38>)
 8002178:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	43d2      	mvns	r2, r2
 800217e:	400a      	ands	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	andmi	r3, r2, r0, lsl #16

08002190 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80021a6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
 80021ae:	e006      	b.n	80021be <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80021b4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	43d2      	mvns	r2, r2
 80021ba:	400a      	ands	r2, r1
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40023800 	andmi	r3, r2, r0, lsl #16

080021cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <RCC_APB1PeriphClockCmd+0x38>)
 80021e0:	4a08      	ldr	r2, [pc, #32]	; (8002204 <RCC_APB1PeriphClockCmd+0x38>)
 80021e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ea:	e006      	b.n	80021fa <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <RCC_APB1PeriphClockCmd+0x38>)
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <RCC_APB1PeriphClockCmd+0x38>)
 80021f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	43d2      	mvns	r2, r2
 80021f6:	400a      	ands	r2, r1
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40023800 	andmi	r3, r2, r0, lsl #16

08002208 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <RCC_APB2PeriphClockCmd+0x38>)
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <RCC_APB2PeriphClockCmd+0x38>)
 800221e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	430a      	orrs	r2, r1
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
 8002226:	e006      	b.n	8002236 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <RCC_APB2PeriphClockCmd+0x38>)
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <RCC_APB2PeriphClockCmd+0x38>)
 800222c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	43d2      	mvns	r2, r2
 8002232:	400a      	ands	r2, r1
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40023800 	andmi	r3, r2, r0, lsl #16

08002244 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <RCC_AHB1PeriphResetCmd+0x38>)
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <RCC_AHB1PeriphResetCmd+0x38>)
 800225a:	6911      	ldr	r1, [r2, #16]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	e006      	b.n	8002272 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <RCC_AHB1PeriphResetCmd+0x38>)
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <RCC_AHB1PeriphResetCmd+0x38>)
 8002268:	6911      	ldr	r1, [r2, #16]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	43d2      	mvns	r2, r2
 800226e:	400a      	ands	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
  }
}
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40023800 	andmi	r3, r2, r0, lsl #16

08002280 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <RCC_AHB2PeriphResetCmd+0x38>)
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <RCC_AHB2PeriphResetCmd+0x38>)
 8002296:	6951      	ldr	r1, [r2, #20]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	e006      	b.n	80022ae <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <RCC_AHB2PeriphResetCmd+0x38>)
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <RCC_AHB2PeriphResetCmd+0x38>)
 80022a4:	6951      	ldr	r1, [r2, #20]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	400a      	ands	r2, r1
 80022ac:	615a      	str	r2, [r3, #20]
  }
}
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40023800 	andmi	r3, r2, r0, lsl #16

080022bc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <RCC_AHB3PeriphResetCmd+0x38>)
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <RCC_AHB3PeriphResetCmd+0x38>)
 80022d2:	6991      	ldr	r1, [r2, #24]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	619a      	str	r2, [r3, #24]
 80022da:	e006      	b.n	80022ea <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <RCC_AHB3PeriphResetCmd+0x38>)
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <RCC_AHB3PeriphResetCmd+0x38>)
 80022e0:	6991      	ldr	r1, [r2, #24]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	43d2      	mvns	r2, r2
 80022e6:	400a      	ands	r2, r1
 80022e8:	619a      	str	r2, [r3, #24]
  }
}
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40023800 	andmi	r3, r2, r0, lsl #16

080022f8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <RCC_APB1PeriphResetCmd+0x38>)
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <RCC_APB1PeriphResetCmd+0x38>)
 800230e:	6a11      	ldr	r1, [r2, #32]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	430a      	orrs	r2, r1
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	e006      	b.n	8002326 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <RCC_APB1PeriphResetCmd+0x38>)
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <RCC_APB1PeriphResetCmd+0x38>)
 800231c:	6a11      	ldr	r1, [r2, #32]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	43d2      	mvns	r2, r2
 8002322:	400a      	ands	r2, r1
 8002324:	621a      	str	r2, [r3, #32]
  }
}
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40023800 	andmi	r3, r2, r0, lsl #16

08002334 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <RCC_APB2PeriphResetCmd+0x38>)
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <RCC_APB2PeriphResetCmd+0x38>)
 800234a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	430a      	orrs	r2, r1
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
 8002352:	e006      	b.n	8002362 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <RCC_APB2PeriphResetCmd+0x38>)
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <RCC_APB2PeriphResetCmd+0x38>)
 8002358:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	43d2      	mvns	r2, r2
 800235e:	400a      	ands	r2, r1
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023800 	andmi	r3, r2, r0, lsl #16

08002370 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8002386:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	430a      	orrs	r2, r1
 800238c:	651a      	str	r2, [r3, #80]	; 0x50
 800238e:	e006      	b.n	800239e <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8002394:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	43d2      	mvns	r2, r2
 800239a:	400a      	ands	r2, r1
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40023800 	andmi	r3, r2, r0, lsl #16

080023ac <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80023c0:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80023c2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
 80023ca:	e006      	b.n	80023da <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80023d0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	400a      	ands	r2, r1
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023800 	andmi	r3, r2, r0, lsl #16

080023e8 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80023fc:	4a08      	ldr	r2, [pc, #32]	; (8002420 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80023fe:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	430a      	orrs	r2, r1
 8002404:	659a      	str	r2, [r3, #88]	; 0x58
 8002406:	e006      	b.n	8002416 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800240c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	43d2      	mvns	r2, r2
 8002412:	400a      	ands	r2, r1
 8002414:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40023800 	andmi	r3, r2, r0, lsl #16

08002424 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800243a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	430a      	orrs	r2, r1
 8002440:	661a      	str	r2, [r3, #96]	; 0x60
 8002442:	e006      	b.n	8002452 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002448:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	43d2      	mvns	r2, r2
 800244e:	400a      	ands	r2, r1
 8002450:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40023800 	andmi	r3, r2, r0, lsl #16

08002460 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8002476:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	430a      	orrs	r2, r1
 800247c:	665a      	str	r2, [r3, #100]	; 0x64
 800247e:	e006      	b.n	800248e <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8002484:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	43d2      	mvns	r2, r2
 800248a:	400a      	ands	r2, r1
 800248c:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40023800 	andmi	r3, r2, r0, lsl #16

0800249c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	71fa      	strb	r2, [r7, #7]
 80024a8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <RCC_ITConfig+0x44>)
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <RCC_ITConfig+0x44>)
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	b2d1      	uxtb	r1, r2
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e009      	b.n	80024d6 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <RCC_ITConfig+0x44>)
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <RCC_ITConfig+0x44>)
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	b2d1      	uxtb	r1, r2
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	43d2      	mvns	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	400a      	ands	r2, r1
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
  }
}
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	4002380d 	andmi	r3, r2, sp, lsl #16

080024e4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d103      	bne.n	8002510 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <RCC_GetFlagStatus+0x70>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e009      	b.n	8002524 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d103      	bne.n	800251e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <RCC_GetFlagStatus+0x70>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e002      	b.n	8002524 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <RCC_GetFlagStatus+0x70>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800253c:	2301      	movs	r3, #1
 800253e:	74fb      	strb	r3, [r7, #19]
 8002540:	e001      	b.n	8002546 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8002546:	7cfb      	ldrb	r3, [r7, #19]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40023800 	andmi	r3, r2, r0, lsl #16

08002558 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <RCC_ClearFlag+0x18>)
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <RCC_ClearFlag+0x18>)
 8002560:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002562:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002566:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40023800 	andmi	r3, r2, r0, lsl #16

08002574 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <RCC_GetITStatus+0x34>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e001      	b.n	8002598 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	andmi	r3, r2, r0, lsl #16

080025ac <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <RCC_ClearITPendingBit+0x1c>)
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	701a      	strb	r2, [r3, #0]
}
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	4002380e 	andmi	r3, r2, lr, lsl #16

080025cc <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <USART_DeInit+0xf4>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d108      	bne.n	80025ee <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80025dc:	2010      	movs	r0, #16
 80025de:	2101      	movs	r1, #1
 80025e0:	f7ff fea8 	bl	8002334 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80025e4:	2010      	movs	r0, #16
 80025e6:	2100      	movs	r1, #0
 80025e8:	f7ff fea4 	bl	8002334 <RCC_APB2PeriphResetCmd>
 80025ec:	e065      	b.n	80026ba <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <USART_DeInit+0xf8>)
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10a      	bne.n	800260c <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80025f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025fa:	2101      	movs	r1, #1
 80025fc:	f7ff fe7c 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002600:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002604:	2100      	movs	r1, #0
 8002606:	f7ff fe77 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 800260a:	e056      	b.n	80026ba <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <USART_DeInit+0xfc>)
 8002610:	429a      	cmp	r2, r3
 8002612:	d10a      	bne.n	800262a <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002614:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002618:	2101      	movs	r1, #1
 800261a:	f7ff fe6d 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800261e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002622:	2100      	movs	r1, #0
 8002624:	f7ff fe68 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 8002628:	e047      	b.n	80026ba <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <USART_DeInit+0x100>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d10a      	bne.n	8002648 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002632:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002636:	2101      	movs	r1, #1
 8002638:	f7ff fe5e 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800263c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002640:	2100      	movs	r1, #0
 8002642:	f7ff fe59 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 8002646:	e038      	b.n	80026ba <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <USART_DeInit+0x104>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d10a      	bne.n	8002666 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002654:	2101      	movs	r1, #1
 8002656:	f7ff fe4f 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800265a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800265e:	2100      	movs	r1, #0
 8002660:	f7ff fe4a 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 8002664:	e029      	b.n	80026ba <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <USART_DeInit+0x108>)
 800266a:	429a      	cmp	r2, r3
 800266c:	d108      	bne.n	8002680 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800266e:	2020      	movs	r0, #32
 8002670:	2101      	movs	r1, #1
 8002672:	f7ff fe5f 	bl	8002334 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002676:	2020      	movs	r0, #32
 8002678:	2100      	movs	r1, #0
 800267a:	f7ff fe5b 	bl	8002334 <RCC_APB2PeriphResetCmd>
 800267e:	e01c      	b.n	80026ba <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <USART_DeInit+0x10c>)
 8002684:	429a      	cmp	r2, r3
 8002686:	d10a      	bne.n	800269e <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8002688:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800268c:	2101      	movs	r1, #1
 800268e:	f7ff fe33 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8002692:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002696:	2100      	movs	r1, #0
 8002698:	f7ff fe2e 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 800269c:	e00d      	b.n	80026ba <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <USART_DeInit+0x110>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d109      	bne.n	80026ba <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 80026a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80026aa:	2101      	movs	r1, #1
 80026ac:	f7ff fe24 	bl	80022f8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 80026b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80026b4:	2100      	movs	r1, #0
 80026b6:	f7ff fe1f 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	andmi	r1, r1, r0
 80026c4:	40004400 	andmi	r4, r0, r0, lsl #8
 80026c8:	40004800 	andmi	r4, r0, r0, lsl #16
 80026cc:	40004c00 	andmi	r4, r0, r0, lsl #24
 80026d0:	40005000 	andmi	r5, r0, r0
 80026d4:	40011400 	andmi	r1, r1, r0, lsl #8
 80026d8:	40007800 	andmi	r7, r0, r0, lsl #16
 80026dc:	40007c00 	andmi	r7, r0, r0, lsl #24

080026e0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8a1b      	ldrh	r3, [r3, #16]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002708:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	88db      	ldrh	r3, [r3, #6]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	4313      	orrs	r3, r2
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	899b      	ldrh	r3, [r3, #12]
 8002720:	b29b      	uxth	r3, r3
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800272a:	f023 030c 	bic.w	r3, r3, #12
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	889a      	ldrh	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	891b      	ldrh	r3, [r3, #8]
 8002738:	4313      	orrs	r3, r2
 800273a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002740:	4313      	orrs	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4313      	orrs	r3, r2
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8a9b      	ldrh	r3, [r3, #20]
 8002756:	b29b      	uxth	r3, r3
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	899b      	ldrh	r3, [r3, #12]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4313      	orrs	r3, r2
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fb21 	bl	8001dc0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <USART_Init+0x168>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d003      	beq.n	800278e <USART_Init+0xae>
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <USART_Init+0x16c>)
 800278a:	429a      	cmp	r2, r3
 800278c:	d102      	bne.n	8002794 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	e001      	b.n	8002798 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	899b      	ldrh	r3, [r3, #12]
 800279c:	b29b      	uxth	r3, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0c      	bge.n	80027c0 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80027a6:	6a3a      	ldr	r2, [r7, #32]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e00b      	b.n	80027d8 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <USART_Init+0x170>)
 80027dc:	fba3 1302 	umull	r1, r3, r3, r2
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	2264      	movs	r2, #100	; 0x64
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	899b      	ldrh	r3, [r3, #12]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	da0d      	bge.n	8002820 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <USART_Init+0x170>)
 800280e:	fba3 1302 	umull	r1, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	4313      	orrs	r3, r2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e00c      	b.n	800283a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <USART_Init+0x170>)
 800282a:	fba3 1302 	umull	r1, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	4313      	orrs	r3, r2
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	b29a      	uxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	811a      	strh	r2, [r3, #8]
}
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40011000 	andmi	r1, r1, r0
 800284c:	40011400 	andmi	r1, r1, r0, lsl #8
 8002850:	51eb851f 	mvnpl	r8, pc, lsl r5

08002854 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002862:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	220c      	movs	r2, #12
 800287a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	819a      	strh	r2, [r3, #12]
}
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8a1b      	ldrh	r3, [r3, #16]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028a8:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	889b      	ldrh	r3, [r3, #4]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	88db      	ldrh	r3, [r3, #6]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	821a      	strh	r2, [r3, #16]
}
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	80da      	strh	r2, [r3, #6]
}
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	899b      	ldrh	r3, [r3, #12]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	819a      	strh	r2, [r3, #12]
 800292e:	e007      	b.n	8002940 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	899b      	ldrh	r3, [r3, #12]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	819a      	strh	r2, [r3, #12]
  }
}
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8b1b      	ldrh	r3, [r3, #24]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8b1b      	ldrh	r3, [r3, #24]
 800296c:	b29a      	uxth	r2, r3
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	b29b      	uxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	831a      	strh	r2, [r3, #24]
}
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	899b      	ldrh	r3, [r3, #12]
 800299a:	b29b      	uxth	r3, r3
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	819a      	strh	r2, [r3, #12]
 80029aa:	e007      	b.n	80029bc <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	899b      	ldrh	r3, [r3, #12]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	819a      	strh	r2, [r3, #12]
  }
}  
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8a9b      	ldrh	r3, [r3, #20]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	829a      	strh	r2, [r3, #20]
 80029ea:	e007      	b.n	80029fc <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8a9b      	ldrh	r3, [r3, #20]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	829a      	strh	r2, [r3, #20]
  }
}
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	809a      	strh	r2, [r3, #4]
}
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	889b      	ldrh	r3, [r3, #4]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3e:	b29b      	uxth	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8a1b      	ldrh	r3, [r3, #16]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f023 030f 	bic.w	r3, r3, #15
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8a1b      	ldrh	r3, [r3, #16]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	821a      	strh	r2, [r3, #16]
}
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	899b      	ldrh	r3, [r3, #12]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	819a      	strh	r2, [r3, #12]
 8002aa6:	e007      	b.n	8002ab8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	899b      	ldrh	r3, [r3, #12]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f023 0302 	bic.w	r3, r3, #2
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	819a      	strh	r2, [r3, #12]
  }
}
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	899b      	ldrh	r3, [r3, #12]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	899b      	ldrh	r3, [r3, #12]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	819a      	strh	r2, [r3, #12]
}
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8a1b      	ldrh	r3, [r3, #16]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f023 0320 	bic.w	r3, r3, #32
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8a1b      	ldrh	r3, [r3, #16]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	821a      	strh	r2, [r3, #16]
}
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8a1b      	ldrh	r3, [r3, #16]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	821a      	strh	r2, [r3, #16]
 8002b56:	e007      	b.n	8002b68 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8a1b      	ldrh	r3, [r3, #16]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	821a      	strh	r2, [r3, #16]
  }
}
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop

08002b74 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	899b      	ldrh	r3, [r3, #12]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	819a      	strh	r2, [r3, #12]
}
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8a9b      	ldrh	r3, [r3, #20]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	829a      	strh	r2, [r3, #20]
 8002bba:	e007      	b.n	8002bcc <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8a9b      	ldrh	r3, [r3, #20]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f023 0308 	bic.w	r3, r3, #8
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	829a      	strh	r2, [r3, #20]
  }
}
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8b1b      	ldrh	r3, [r3, #24]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8b1b      	ldrh	r3, [r3, #24]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	831a      	strh	r2, [r3, #24]
}
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8a9b      	ldrh	r3, [r3, #20]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f043 0320 	orr.w	r3, r3, #32
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	829a      	strh	r2, [r3, #20]
 8002c36:	e007      	b.n	8002c48 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8a9b      	ldrh	r3, [r3, #20]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f023 0320 	bic.w	r3, r3, #32
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	829a      	strh	r2, [r3, #20]
  }
}
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8a9b      	ldrh	r3, [r3, #20]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	829a      	strh	r2, [r3, #20]
 8002c76:	e007      	b.n	8002c88 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8a9b      	ldrh	r3, [r3, #20]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	829a      	strh	r2, [r3, #20]
  }
}
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8a9b      	ldrh	r3, [r3, #20]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8a9b      	ldrh	r3, [r3, #20]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	829a      	strh	r2, [r3, #20]
}
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8a9b      	ldrh	r3, [r3, #20]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	829a      	strh	r2, [r3, #20]
 8002cee:	e007      	b.n	8002d00 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8a9b      	ldrh	r3, [r3, #20]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f023 0302 	bic.w	r3, r3, #2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	829a      	strh	r2, [r3, #20]
  }
}
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	460a      	mov	r2, r1
 8002d18:	807a      	strh	r2, [r7, #2]
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8a9b      	ldrh	r3, [r3, #20]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	829a      	strh	r2, [r3, #20]
 8002d32:	e009      	b.n	8002d48 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8a9b      	ldrh	r3, [r3, #20]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	829a      	strh	r2, [r3, #20]
  }
}
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	460a      	mov	r2, r1
 8002d60:	807a      	strh	r2, [r7, #2]
 8002d62:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d103      	bne.n	8002da2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e009      	b.n	8002db6 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d103      	bne.n	8002db0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3310      	adds	r3, #16
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e002      	b.n	8002db6 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3314      	adds	r3, #20
 8002db4:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e006      	b.n	8002dd8 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	6811      	ldr	r1, [r2, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	43d2      	mvns	r2, r2
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
  }
}
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e001      	b.n	8002e0e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	801a      	strh	r2, [r3, #0]
}
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	899b      	ldrh	r3, [r3, #12]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e00f      	b.n	8002ea8 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d106      	bne.n	8002e9c <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8a1b      	ldrh	r3, [r3, #16]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e005      	b.n	8002ea8 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8a9b      	ldrh	r3, [r3, #20]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <USART_GetITStatus+0x9c>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	74fb      	strb	r3, [r7, #19]
 8002ed6:	e001      	b.n	8002edc <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	81fb      	strh	r3, [r7, #14]
 8002efc:	2300      	movs	r3, #0
 8002efe:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002f06:	89fb      	ldrh	r3, [r7, #14]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002f10:	89bb      	ldrh	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	801a      	strh	r2, [r3, #0]
}
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002f28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	f7ff fa01 	bl	8002334 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8002f32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f36:	2100      	movs	r1, #0
 8002f38:	f7ff f9fc 	bl	8002334 <RCC_APB2PeriphResetCmd>
}
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SYSCFG_MemoryRemapConfig+0x1c>)
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40013800 	andmi	r3, r1, r0, lsl #16

08002f60 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SYSCFG_MemorySwappingBank+0x1c>)
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	42270020 	eormi	r0, r7, #32

08002f80 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002f80:	b490      	push	{r4, r7}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	71fa      	strb	r2, [r7, #7]
 8002f8c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002f92:	79bb      	ldrb	r3, [r7, #6]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <SYSCFG_EXTILineConfig+0x78>)
 8002fa4:	79ba      	ldrb	r2, [r7, #6]
 8002fa6:	0892      	lsrs	r2, r2, #2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4913      	ldr	r1, [pc, #76]	; (8002ff8 <SYSCFG_EXTILineConfig+0x78>)
 8002fac:	79b8      	ldrb	r0, [r7, #6]
 8002fae:	0880      	lsrs	r0, r0, #2
 8002fb0:	b2c0      	uxtb	r0, r0
 8002fb2:	3002      	adds	r0, #2
 8002fb4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	43c9      	mvns	r1, r1
 8002fbc:	4001      	ands	r1, r0
 8002fbe:	3202      	adds	r2, #2
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <SYSCFG_EXTILineConfig+0x78>)
 8002fc6:	79ba      	ldrb	r2, [r7, #6]
 8002fc8:	0892      	lsrs	r2, r2, #2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <SYSCFG_EXTILineConfig+0x78>)
 8002fce:	79b8      	ldrb	r0, [r7, #6]
 8002fd0:	0880      	lsrs	r0, r0, #2
 8002fd2:	b2c0      	uxtb	r0, r0
 8002fd4:	3002      	adds	r0, #2
 8002fd6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002fda:	79fc      	ldrb	r4, [r7, #7]
 8002fdc:	79b9      	ldrb	r1, [r7, #6]
 8002fde:	f001 0103 	and.w	r1, r1, #3
 8002fe2:	0089      	lsls	r1, r1, #2
 8002fe4:	fa04 f101 	lsl.w	r1, r4, r1
 8002fe8:	4301      	orrs	r1, r0
 8002fea:	3202      	adds	r2, #2
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc90      	pop	{r4, r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40013800 	andmi	r3, r1, r0, lsl #16

08002ffc <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	422700dc 	eormi	r0, r7, #220	; 0xdc

08003018 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <SYSCFG_CompensationCellCmd+0x1c>)
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	601a      	str	r2, [r3, #0]
}
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	42270400 	eormi	r0, r7, #0, 8

08003038 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <SYSCFG_GetCompensationCellStatus+0x30>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	71fb      	strb	r3, [r7, #7]
 8003052:	e001      	b.n	8003058 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8003058:	79fb      	ldrb	r3, [r7, #7]
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40013800 	andmi	r3, r1, r0, lsl #16

0800306c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <I2C_DeInit+0x68>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d10a      	bne.n	8003092 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800307c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003080:	2101      	movs	r1, #1
 8003082:	f7ff f939 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8003086:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800308a:	2100      	movs	r1, #0
 800308c:	f7ff f934 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 8003090:	e01c      	b.n	80030cc <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <I2C_DeInit+0x6c>)
 8003096:	429a      	cmp	r2, r3
 8003098:	d10a      	bne.n	80030b0 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800309a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800309e:	2101      	movs	r1, #1
 80030a0:	f7ff f92a 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80030a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80030a8:	2100      	movs	r1, #0
 80030aa:	f7ff f925 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 80030ae:	e00d      	b.n	80030cc <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <I2C_DeInit+0x70>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d109      	bne.n	80030cc <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80030b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80030bc:	2101      	movs	r1, #1
 80030be:	f7ff f91b 	bl	80022f8 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80030c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80030c6:	2100      	movs	r1, #0
 80030c8:	f7ff f916 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40005400 	andmi	r5, r0, r0, lsl #8
 80030d8:	40005800 	andmi	r5, r0, r0, lsl #16
 80030dc:	40005c00 	andmi	r5, r0, r0, lsl #24

080030e0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030ee:	2300      	movs	r3, #0
 80030f0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80030f2:	2304      	movs	r3, #4
 80030f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <I2C_Init+0x174>)
 80030f8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	889b      	ldrh	r3, [r3, #4]
 80030fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003106:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fe57 	bl	8001dc0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <I2C_Init+0x178>)
 800311a:	fba3 1302 	umull	r1, r3, r3, r2
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003122:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003126:	4313      	orrs	r3, r2
 8003128:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800312e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <I2C_Init+0x17c>)
 800314a:	429a      	cmp	r2, r3
 800314c:	d815      	bhi.n	800317a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800315c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800315e:	2b03      	cmp	r3, #3
 8003160:	d801      	bhi.n	8003166 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003162:	2304      	movs	r3, #4
 8003164:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8003166:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800316a:	4313      	orrs	r3, r2
 800316c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800316e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003170:	3301      	adds	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	841a      	strh	r2, [r3, #32]
 8003178:	e040      	b.n	80031fc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	88da      	ldrh	r2, [r3, #6]
 800317e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003182:	429a      	cmp	r2, r3
 8003184:	d109      	bne.n	800319a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003198:	e00e      	b.n	80031b8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80031b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80031b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80031c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80031ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031da:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80031dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <I2C_Init+0x180>)
 80031e8:	fb82 1203 	smull	r1, r2, r2, r3
 80031ec:	1192      	asrs	r2, r2, #6
 80031ee:	17db      	asrs	r3, r3, #31
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003200:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800321a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800321e:	f023 0302 	bic.w	r3, r3, #2
 8003222:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	889a      	ldrh	r2, [r3, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	895b      	ldrh	r3, [r3, #10]
 800322c:	4313      	orrs	r3, r2
 800322e:	b29a      	uxth	r2, r3
 8003230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003232:	4313      	orrs	r3, r2
 8003234:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800323a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	899a      	ldrh	r2, [r3, #12]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	891b      	ldrh	r3, [r3, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	811a      	strh	r2, [r3, #8]
}
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8003258:	431bde83 	tstmi	fp, #2096	; 0x830
 800325c:	000186a0 	andeq	r8, r1, r0, lsr #13
 8003260:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08003264 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003280:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003294:	819a      	strh	r2, [r3, #12]
}
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	801a      	strh	r2, [r3, #0]
  }
}
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f023 0310 	bic.w	r3, r3, #16
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	849a      	strh	r2, [r3, #36]	; 0x24
 8003302:	e007      	b.n	8003314 <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003308:	b29b      	uxth	r3, r3
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003334:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	f023 030f 	bic.w	r3, r3, #15
 800333c:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	b29a      	uxth	r2, r3
 8003346:	89fb      	ldrh	r3, [r7, #14]
 8003348:	4313      	orrs	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	89fa      	ldrh	r2, [r7, #14]
 8003352:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	e007      	b.n	8003394 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	801a      	strh	r2, [r3, #0]
  }
}
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop

080033a0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	e007      	b.n	80033d4 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	801a      	strh	r2, [r3, #0]
  }
}
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	460a      	mov	r2, r1
 80033ec:	70fa      	strb	r2, [r7, #3]
 80033ee:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80033f0:	78bb      	ldrb	r3, [r7, #2]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	70fb      	strb	r3, [r7, #3]
 80033fe:	e003      	b.n	8003408 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	821a      	strh	r2, [r3, #16]
}
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	e007      	b.n	8003450 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	801a      	strh	r2, [r3, #0]
  }
}
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	899b      	ldrh	r3, [r3, #12]
 8003470:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8003472:	89fb      	ldrh	r3, [r7, #14]
 8003474:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003478:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003482:	b29a      	uxth	r2, r3
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	4313      	orrs	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	89fa      	ldrh	r2, [r7, #14]
 8003490:	819a      	strh	r2, [r3, #12]
}
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	899b      	ldrh	r3, [r3, #12]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	819a      	strh	r2, [r3, #12]
 80034be:	e007      	b.n	80034d0 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	899b      	ldrh	r3, [r3, #12]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	819a      	strh	r2, [r3, #12]
  }
}
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	801a      	strh	r2, [r3, #0]
  }
}
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	e007      	b.n	8003554 <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	801a      	strh	r2, [r3, #0]
  }
}
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	e007      	b.n	8003594 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	801a      	strh	r2, [r3, #0]
  }
}
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b2:	d008      	beq.n	80035c6 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8b9b      	ldrh	r3, [r3, #28]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	839a      	strh	r2, [r3, #28]
 80035c4:	e007      	b.n	80035d6 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8b9b      	ldrh	r3, [r3, #28]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	839a      	strh	r2, [r3, #28]
  }
}
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f2:	d108      	bne.n	8003606 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	801a      	strh	r2, [r3, #0]
  }
}
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d108      	bne.n	8003646 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	e007      	b.n	8003656 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	801a      	strh	r2, [r3, #0]
  }
}
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f043 0310 	orr.w	r3, r3, #16
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	e007      	b.n	8003694 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f023 0310 	bic.w	r3, r3, #16
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	801a      	strh	r2, [r3, #0]
  }
}
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	821a      	strh	r2, [r3, #16]
}
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8a1b      	ldrh	r3, [r3, #16]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	801a      	strh	r2, [r3, #0]
  }
}
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372e:	d108      	bne.n	8003742 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	801a      	strh	r2, [r3, #0]
 8003740:	e007      	b.n	8003752 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	801a      	strh	r2, [r3, #0]
  }
}
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f043 0320 	orr.w	r3, r3, #32
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	e007      	b.n	8003790 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f023 0320 	bic.w	r3, r3, #32
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	801a      	strh	r2, [r3, #0]
  }
}
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop

0800379c <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8b1b      	ldrh	r3, [r3, #24]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	889b      	ldrh	r3, [r3, #4]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	809a      	strh	r2, [r3, #4]
 80037de:	e007      	b.n	80037f0 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	889b      	ldrh	r3, [r3, #4]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	809a      	strh	r2, [r3, #4]
  }
}
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	889b      	ldrh	r3, [r3, #4]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	809a      	strh	r2, [r3, #4]
 800381e:	e007      	b.n	8003830 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	889b      	ldrh	r3, [r3, #4]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	809a      	strh	r2, [r3, #4]
  }
}
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop

0800386c <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	460a      	mov	r2, r1
 8003878:	807a      	strh	r2, [r7, #2]
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	889b      	ldrh	r3, [r3, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	4313      	orrs	r3, r2
 800388c:	b29a      	uxth	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	809a      	strh	r2, [r3, #4]
 8003892:	e009      	b.n	80038a8 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	889b      	ldrh	r3, [r3, #4]
 8003898:	b29a      	uxth	r2, r3
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	43db      	mvns	r3, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	809a      	strh	r2, [r3, #4]
  }
}
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8a9b      	ldrh	r3, [r3, #20]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8b1b      	ldrh	r3, [r3, #24]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038ee:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	401a      	ands	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d102      	bne.n	8003902 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
 8003900:	e001      	b.n	8003906 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8a9b      	ldrh	r3, [r3, #20]
 800392c:	b29b      	uxth	r3, r3
 800392e:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8b1b      	ldrh	r3, [r3, #24]
 8003934:	b29b      	uxth	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003948:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	0f1b      	lsrs	r3, r3, #28
 8003976:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800397e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3314      	adds	r3, #20
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e005      	b.n	800399a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3318      	adds	r3, #24
 8003998:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
 80039aa:	e001      	b.n	80039b0 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039d4:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	829a      	strh	r2, [r3, #20]
}
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003a04:	0c1a      	lsrs	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	889b      	ldrh	r3, [r3, #4]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a16:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8a9b      	ldrh	r3, [r3, #20]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <I2C_GetITStatus+0x48>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	e001      	b.n	8003a38 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	829a      	strh	r2, [r3, #20]
}
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 0201 	bic.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4b45      	ldr	r3, [pc, #276]	; (8003bc4 <DMA_DeInit+0x150>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d103      	bne.n	8003abc <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8003ab4:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <DMA_DeInit+0x154>)
 8003ab6:	223d      	movs	r2, #61	; 0x3d
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	e07e      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <DMA_DeInit+0x158>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <DMA_DeInit+0x154>)
 8003ac6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e075      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <DMA_DeInit+0x15c>)
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d104      	bne.n	8003ae0 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8003ad6:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <DMA_DeInit+0x154>)
 8003ad8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	e06c      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <DMA_DeInit+0x160>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d104      	bne.n	8003af2 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003ae8:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <DMA_DeInit+0x154>)
 8003aea:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e063      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <DMA_DeInit+0x164>)
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d103      	bne.n	8003b02 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <DMA_DeInit+0x154>)
 8003afc:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <DMA_DeInit+0x168>)
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	e05b      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <DMA_DeInit+0x16c>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d103      	bne.n	8003b12 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <DMA_DeInit+0x154>)
 8003b0c:	4a35      	ldr	r2, [pc, #212]	; (8003be4 <DMA_DeInit+0x170>)
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e053      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <DMA_DeInit+0x174>)
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d103      	bne.n	8003b22 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <DMA_DeInit+0x154>)
 8003b1c:	4a33      	ldr	r2, [pc, #204]	; (8003bec <DMA_DeInit+0x178>)
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e04b      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <DMA_DeInit+0x17c>)
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d104      	bne.n	8003b34 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003b2a:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <DMA_DeInit+0x154>)
 8003b2c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	e042      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <DMA_DeInit+0x180>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d103      	bne.n	8003b44 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b3e:	223d      	movs	r2, #61	; 0x3d
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	e03a      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <DMA_DeInit+0x188>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d104      	bne.n	8003b56 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b4e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e031      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <DMA_DeInit+0x18c>)
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d104      	bne.n	8003b68 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003b5e:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b60:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	e028      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <DMA_DeInit+0x190>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d104      	bne.n	8003b7a <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b72:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e01f      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <DMA_DeInit+0x194>)
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d103      	bne.n	8003b8a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <DMA_DeInit+0x168>)
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e017      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <DMA_DeInit+0x198>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d103      	bne.n	8003b9a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <DMA_DeInit+0x184>)
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <DMA_DeInit+0x170>)
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e00f      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <DMA_DeInit+0x19c>)
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d103      	bne.n	8003baa <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <DMA_DeInit+0x184>)
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <DMA_DeInit+0x178>)
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e007      	b.n	8003bba <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <DMA_DeInit+0x1a0>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d103      	bne.n	8003bba <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <DMA_DeInit+0x184>)
 8003bb4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003bb8:	60da      	str	r2, [r3, #12]
    }
  }
}
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40026010 	andmi	r6, r2, r0, lsl r0
 8003bc8:	40026000 	andmi	r6, r2, r0
 8003bcc:	40026028 	andmi	r6, r2, r8, lsr #32
 8003bd0:	40026040 	andmi	r6, r2, r0, asr #32
 8003bd4:	40026058 	andmi	r6, r2, r8, asr r0
 8003bd8:	40026070 	andmi	r6, r2, r0, ror r0
 8003bdc:	2000003d 	andcs	r0, r0, sp, lsr r0
 8003be0:	40026088 	andmi	r6, r2, r8, lsl #1
 8003be4:	20000f40 	andcs	r0, r0, r0, asr #30
 8003be8:	400260a0 	andmi	r6, r2, r0, lsr #1
 8003bec:	203d0000 	eorscs	r0, sp, r0
 8003bf0:	400260b8 	strhmi	r6, [r2], -r8
 8003bf4:	40026410 	andmi	r6, r2, r0, lsl r4
 8003bf8:	40026400 	andmi	r6, r2, r0, lsl #8
 8003bfc:	40026428 	andmi	r6, r2, r8, lsr #8
 8003c00:	40026440 	andmi	r6, r2, r0, asr #8
 8003c04:	40026458 	andmi	r6, r2, r8, asr r4
 8003c08:	40026470 	andmi	r6, r2, r0, ror r4
 8003c0c:	40026488 	andmi	r6, r2, r8, lsl #9
 8003c10:	400264a0 	andmi	r6, r2, r0, lsr #9
 8003c14:	400264b8 			; <UNDEFINED> instruction: 0x400264b8

08003c18 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <DMA_Init+0xa8>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003c42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003c4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003c5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003c66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0307 	bic.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4313      	orrs	r3, r2
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
}
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	f01c803f 			; <UNDEFINED> instruction: 0xf01c803f

08003cc4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e005      	b.n	8003d5c <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0201 	bic.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
  }
}
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop

08003d68 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e005      	b.n	8003d92 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
  }
}
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e005      	b.n	8003dc6 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0220 	bic.w	r2, r3, #32
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
  }
}
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	605a      	str	r2, [r3, #4]
}
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b29b      	uxth	r3, r3
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop

08003e08 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e005      	b.n	8003e34 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	611a      	str	r2, [r3, #16]
}
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e005      	b.n	8003e70 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
  }
}
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	611a      	str	r2, [r3, #16]
 8003e94:	e002      	b.n	8003e9c <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
  }
}
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e001      	b.n	8003eca <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e001      	b.n	8003efa <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1c:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <DMA_GetFlagStatus+0x6c>)
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d802      	bhi.n	8003f4c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <DMA_GetFlagStatus+0x70>)
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e001      	b.n	8003f50 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <DMA_GetFlagStatus+0x74>)
 8003f4e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e002      	b.n	8003f68 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003f6e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
 8003f82:	e001      	b.n	8003f88 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	4002640f 	andmi	r6, r2, pc, lsl #8
 8003f9c:	40026000 	andmi	r6, r2, r0
 8003fa0:	40026400 	andmi	r6, r2, r0, lsl #8

08003fa4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <DMA_ClearFlag+0x50>)
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d802      	bhi.n	8003fbc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <DMA_ClearFlag+0x54>)
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e001      	b.n	8003fc0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <DMA_ClearFlag+0x58>)
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003fd0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	60d3      	str	r3, [r2, #12]
 8003fd8:	e006      	b.n	8003fe8 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003fe0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6093      	str	r3, [r2, #8]
  }    
}
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	4002640f 	andmi	r6, r2, pc, lsl #8
 8003ff8:	40026000 	andmi	r6, r2, r0
 8003ffc:	40026400 	andmi	r6, r2, r0, lsl #8

08004000 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	615a      	str	r2, [r3, #20]
 800402a:	e005      	b.n	8004038 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d014      	beq.n	8004068 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 031e 	and.w	r3, r3, #30
 800404e:	431a      	orrs	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e008      	b.n	8004068 <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 031e 	and.w	r3, r3, #30
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <DMA_GetITStatus+0xa4>)
 800408e:	429a      	cmp	r2, r3
 8004090:	d802      	bhi.n	8004098 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <DMA_GetITStatus+0xa8>)
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e001      	b.n	800409c <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <DMA_GetITStatus+0xac>)
 800409a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040a2:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	0adb      	lsrs	r3, r3, #11
 80040ae:	f003 031e 	and.w	r3, r3, #30
 80040b2:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4013      	ands	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	e004      	b.n	80040ca <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e002      	b.n	80040e2 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040e8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <DMA_GetITStatus+0x90>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
 8004102:	e001      	b.n	8004108 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	4002640f 	andmi	r6, r2, pc, lsl #8
 800411c:	40026000 	andmi	r6, r2, r0
 8004120:	40026400 	andmi	r6, r2, r0, lsl #8

08004124 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <DMA_ClearITPendingBit+0x50>)
 8004132:	429a      	cmp	r2, r3
 8004134:	d802      	bhi.n	800413c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <DMA_ClearITPendingBit+0x54>)
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e001      	b.n	8004140 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <DMA_ClearITPendingBit+0x58>)
 800413e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004150:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	60d3      	str	r3, [r2, #12]
 8004158:	e006      	b.n	8004168 <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004160:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6093      	str	r3, [r2, #8]
  }   
}
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	4002640f 	andmi	r6, r2, pc, lsl #8
 8004178:	40026000 	andmi	r6, r2, r0
 800417c:	40026400 	andmi	r6, r2, r0, lsl #8

08004180 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <SPI_I2S_DeInit+0xc0>)
 800418c:	429a      	cmp	r2, r3
 800418e:	d10a      	bne.n	80041a6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004194:	2101      	movs	r1, #1
 8004196:	f7fe f8cd 	bl	8002334 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800419a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800419e:	2100      	movs	r1, #0
 80041a0:	f7fe f8c8 	bl	8002334 <RCC_APB2PeriphResetCmd>
 80041a4:	e049      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4b26      	ldr	r3, [pc, #152]	; (8004244 <SPI_I2S_DeInit+0xc4>)
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10a      	bne.n	80041c4 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80041ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041b2:	2101      	movs	r1, #1
 80041b4:	f7fe f8a0 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80041b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041bc:	2100      	movs	r1, #0
 80041be:	f7fe f89b 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 80041c2:	e03a      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <SPI_I2S_DeInit+0xc8>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d10a      	bne.n	80041e2 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80041cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041d0:	2101      	movs	r1, #1
 80041d2:	f7fe f891 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80041d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041da:	2100      	movs	r1, #0
 80041dc:	f7fe f88c 	bl	80022f8 <RCC_APB1PeriphResetCmd>
 80041e0:	e02b      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <SPI_I2S_DeInit+0xcc>)
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d10a      	bne.n	8004200 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80041ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041ee:	2101      	movs	r1, #1
 80041f0:	f7fe f8a0 	bl	8002334 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80041f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041f8:	2100      	movs	r1, #0
 80041fa:	f7fe f89b 	bl	8002334 <RCC_APB2PeriphResetCmd>
 80041fe:	e01c      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <SPI_I2S_DeInit+0xd0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d10a      	bne.n	800421e <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8004208:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800420c:	2101      	movs	r1, #1
 800420e:	f7fe f891 	bl	8002334 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004212:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004216:	2100      	movs	r1, #0
 8004218:	f7fe f88c 	bl	8002334 <RCC_APB2PeriphResetCmd>
 800421c:	e00d      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <SPI_I2S_DeInit+0xd4>)
 8004222:	429a      	cmp	r2, r3
 8004224:	d109      	bne.n	800423a <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8004226:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800422a:	2101      	movs	r1, #1
 800422c:	f7fe f882 	bl	8002334 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004230:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004234:	2100      	movs	r1, #0
 8004236:	f7fe f87d 	bl	8002334 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40013000 	andmi	r3, r1, r0
 8004244:	40003800 	andmi	r3, r0, r0, lsl #16
 8004248:	40003c00 	andmi	r3, r0, r0, lsl #24
 800424c:	40013400 	andmi	r3, r1, r0, lsl #8
 8004250:	40015000 	andmi	r5, r1, r0
 8004254:	40015400 	andmi	r5, r1, r0, lsl #8

08004258 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004272:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	885b      	ldrh	r3, [r3, #2]
 800427c:	4313      	orrs	r3, r2
 800427e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004284:	4313      	orrs	r3, r2
 8004286:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800428c:	4313      	orrs	r3, r2
 800428e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004294:	4313      	orrs	r3, r2
 8004296:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800429c:	4313      	orrs	r3, r2
 800429e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	89fa      	ldrh	r2, [r7, #14]
 80042ba:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8b9b      	ldrh	r3, [r3, #28]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	8a1a      	ldrh	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	821a      	strh	r2, [r3, #16]
}
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b08b      	sub	sp, #44	; 0x2c
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 80042ea:	2300      	movs	r3, #0
 80042ec:	837b      	strh	r3, [r7, #26]
 80042ee:	2302      	movs	r3, #2
 80042f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042f2:	2300      	movs	r3, #0
 80042f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042f6:	2301      	movs	r3, #1
 80042f8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8b9b      	ldrh	r3, [r3, #28]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004318:	f023 030f 	bic.w	r3, r3, #15
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8b9b      	ldrh	r3, [r3, #28]
 800432c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d104      	bne.n	8004340 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8004336:	2300      	movs	r3, #0
 8004338:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800433a:	2302      	movs	r3, #2
 800433c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800433e:	e071      	b.n	8004424 <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	889b      	ldrh	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8004348:	2301      	movs	r3, #1
 800434a:	847b      	strh	r3, [r7, #34]	; 0x22
 800434c:	e001      	b.n	8004352 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800434e:	2302      	movs	r3, #2
 8004350:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004352:	4b4c      	ldr	r3, [pc, #304]	; (8004484 <I2S_Init+0x1a4>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <I2S_Init+0x1a4>)
 8004360:	4a48      	ldr	r2, [pc, #288]	; (8004484 <I2S_Init+0x1a4>)
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004368:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800436a:	4b46      	ldr	r3, [pc, #280]	; (8004484 <I2S_Init+0x1a4>)
 800436c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004374:	4013      	ands	r3, r2
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <I2S_Init+0x1a4>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004388:	0f1b      	lsrs	r3, r3, #28
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004390:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <I2S_Init+0x1a4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800439a:	4a3b      	ldr	r2, [pc, #236]	; (8004488 <I2S_Init+0x1a8>)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	fb02 f203 	mul.w	r2, r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	88db      	ldrh	r3, [r3, #6]
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d10f      	bne.n	80043da <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	0a1a      	lsrs	r2, r3, #8
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	461a      	mov	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3305      	adds	r3, #5
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e011      	b.n	80043fe <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80043da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	461a      	mov	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3305      	adds	r3, #5
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	4b22      	ldr	r3, [pc, #136]	; (800448c <I2S_Init+0x1ac>)
 8004402:	fba3 1302 	umull	r1, r3, r3, r2
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800441e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004426:	2b01      	cmp	r3, #1
 8004428:	d902      	bls.n	8004430 <I2S_Init+0x150>
 800442a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800442c:	2bff      	cmp	r3, #255	; 0xff
 800442e:	d903      	bls.n	8004438 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8004430:	2302      	movs	r3, #2
 8004432:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	88da      	ldrh	r2, [r3, #6]
 800443c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800443e:	4313      	orrs	r3, r2
 8004440:	b29a      	uxth	r2, r3
 8004442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004444:	4313      	orrs	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	8859      	ldrh	r1, [r3, #2]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800445c:	4303      	orrs	r3, r0
 800445e:	b29b      	uxth	r3, r3
 8004460:	430b      	orrs	r3, r1
 8004462:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004464:	4313      	orrs	r3, r2
 8004466:	b29a      	uxth	r2, r3
 8004468:	8b7b      	ldrh	r3, [r7, #26]
 800446a:	4313      	orrs	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004472:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8b7a      	ldrh	r2, [r7, #26]
 8004478:	839a      	strh	r2, [r3, #28]
}
 800447a:	372c      	adds	r7, #44	; 0x2c
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40023800 	andmi	r3, r2, r0, lsl #16
 8004488:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 800448c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

08004490 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2207      	movs	r2, #7
 80044cc:	821a      	strh	r2, [r3, #16]
}
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	819a      	strh	r2, [r3, #12]
}
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e007      	b.n	8004544 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	801a      	strh	r2, [r3, #0]
  }
}
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8b9b      	ldrh	r3, [r3, #28]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	839a      	strh	r2, [r3, #28]
 8004572:	e007      	b.n	8004584 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8b9b      	ldrh	r3, [r3, #28]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	839a      	strh	r2, [r3, #28]
  }
}
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop

08004590 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	801a      	strh	r2, [r3, #0]
}
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop

080045c8 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80045d4:	887b      	ldrh	r3, [r7, #2]
 80045d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045da:	d108      	bne.n	80045ee <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e007      	b.n	80045fe <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	801a      	strh	r2, [r3, #0]
  }
}
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800461a:	429a      	cmp	r2, r3
 800461c:	d008      	beq.n	8004630 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e007      	b.n	8004640 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	801a      	strh	r2, [r3, #0]
  }
}
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop

0800464c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	889b      	ldrh	r3, [r3, #4]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	809a      	strh	r2, [r3, #4]
 800466e:	e007      	b.n	8004680 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	889b      	ldrh	r3, [r3, #4]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	809a      	strh	r2, [r3, #4]
  }
}
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	889b      	ldrh	r3, [r3, #4]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f043 0310 	orr.w	r3, r3, #16
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	809a      	strh	r2, [r3, #4]
 80046ae:	e007      	b.n	80046c0 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	889b      	ldrh	r3, [r3, #4]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f023 0310 	bic.w	r3, r3, #16
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	809a      	strh	r2, [r3, #4]
  }
}
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop

080046cc <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	81bb      	strh	r3, [r7, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8b9b      	ldrh	r3, [r3, #28]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046e8:	f023 030f 	bic.w	r3, r3, #15
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8b9b      	ldrh	r3, [r3, #28]
 80046fc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004706:	d003      	beq.n	8004710 <I2S_FullDuplexConfig+0x44>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 8004710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004714:	81fb      	strh	r3, [r7, #14]
 8004716:	e00b      	b.n	8004730 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004720:	d004      	beq.n	800472c <I2S_FullDuplexConfig+0x60>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d101      	bne.n	8004730 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 800472c:	2300      	movs	r3, #0
 800472e:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	885a      	ldrh	r2, [r3, #2]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800473c:	430b      	orrs	r3, r1
 800473e:	b29b      	uxth	r3, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004744:	89fb      	ldrh	r3, [r7, #14]
 8004746:	4313      	orrs	r3, r2
 8004748:	b29a      	uxth	r2, r3
 800474a:	89bb      	ldrh	r3, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004754:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	89ba      	ldrh	r2, [r7, #12]
 800475a:	839a      	strh	r2, [r3, #28]
}
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop

08004768 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	899b      	ldrh	r3, [r3, #12]
 8004774:	b29b      	uxth	r3, r3
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	887a      	ldrh	r2, [r7, #2]
 8004794:	819a      	strh	r2, [r3, #12]
}
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	801a      	strh	r2, [r3, #0]
  }
}
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	801a      	strh	r2, [r3, #0]
}
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop

08004804 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d003      	beq.n	8004822 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8b1b      	ldrh	r3, [r3, #24]
 800481e:	81fb      	strh	r3, [r7, #14]
 8004820:	e002      	b.n	8004828 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8a9b      	ldrh	r3, [r3, #20]
 8004826:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8004828:	89fb      	ldrh	r3, [r7, #14]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8a1b      	ldrh	r3, [r3, #16]
 8004844:	b29b      	uxth	r3, r3
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	460a      	mov	r2, r1
 8004860:	807a      	strh	r2, [r7, #2]
 8004862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	889b      	ldrh	r3, [r3, #4]
 800486e:	b29a      	uxth	r2, r3
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	4313      	orrs	r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	809a      	strh	r2, [r3, #4]
 800487a:	e009      	b.n	8004890 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	889b      	ldrh	r3, [r3, #4]
 8004880:	b29a      	uxth	r2, r3
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	43db      	mvns	r3, r3
 8004886:	b29b      	uxth	r3, r3
 8004888:	4013      	ands	r3, r2
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	809a      	strh	r2, [r3, #4]
  }
}
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop

0800489c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	460a      	mov	r2, r1
 80048a8:	70fa      	strb	r2, [r7, #3]
 80048aa:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80048ac:	2300      	movs	r3, #0
 80048ae:	81fb      	strh	r3, [r7, #14]
 80048b0:	2300      	movs	r3, #0
 80048b2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80048bc:	89fb      	ldrh	r3, [r7, #14]
 80048be:	2201      	movs	r2, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80048c6:	78bb      	ldrb	r3, [r7, #2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	889b      	ldrh	r3, [r3, #4]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	89bb      	ldrh	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	809a      	strh	r2, [r3, #4]
 80048dc:	e009      	b.n	80048f2 <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	889b      	ldrh	r3, [r3, #4]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	89bb      	ldrh	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	4013      	ands	r3, r2
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	809a      	strh	r2, [r3, #4]
  }
}
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	891b      	ldrh	r3, [r3, #8]
 8004910:	b29a      	uxth	r2, r3
 8004912:	887b      	ldrh	r3, [r7, #2]
 8004914:	4013      	ands	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	e001      	b.n	8004926 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	43db      	mvns	r3, r3
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	811a      	strh	r2, [r3, #8]
}
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	81bb      	strh	r3, [r7, #12]
 8004968:	2300      	movs	r3, #0
 800496a:	817b      	strh	r3, [r7, #10]
 800496c:	2300      	movs	r3, #0
 800496e:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	2201      	movs	r2, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	b2db      	uxtb	r3, r3
 8004984:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	2201      	movs	r2, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	889b      	ldrh	r3, [r3, #4]
 8004994:	b29a      	uxth	r2, r3
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	4013      	ands	r3, r2
 800499a:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	891b      	ldrh	r3, [r3, #8]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	89bb      	ldrh	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <SPI_I2S_GetITStatus+0x64>
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
 80049b6:	e001      	b.n	80049bc <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop

080049cc <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	2201      	movs	r2, #1
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80049ea:	89fb      	ldrh	r3, [r7, #14]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	811a      	strh	r2, [r3, #8]
}
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop

08004a00 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <EXTI_DeInit+0x2c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <EXTI_DeInit+0x2c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <EXTI_DeInit+0x2c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <EXTI_DeInit+0x2c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004a1c:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <EXTI_DeInit+0x2c>)
 8004a1e:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <EXTI_DeInit+0x30>)
 8004a20:	615a      	str	r2, [r3, #20]
}
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40013c00 	andmi	r3, r1, r0, lsl #24
 8004a30:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

08004a34 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <EXTI_Init+0xd8>)
 8004a42:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	799b      	ldrb	r3, [r3, #6]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d04d      	beq.n	8004ae8 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004a4c:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <EXTI_Init+0xd8>)
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <EXTI_Init+0xd8>)
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	43d2      	mvns	r2, r2
 8004a58:	400a      	ands	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <EXTI_Init+0xd8>)
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <EXTI_Init+0xd8>)
 8004a60:	6851      	ldr	r1, [r2, #4]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	43d2      	mvns	r2, r2
 8004a68:	400a      	ands	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <EXTI_Init+0xd8>)
 8004a86:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <EXTI_Init+0xd8>)
 8004a88:	6891      	ldr	r1, [r2, #8]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	43d2      	mvns	r2, r2
 8004a90:	400a      	ands	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <EXTI_Init+0xd8>)
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <EXTI_Init+0xd8>)
 8004a98:	68d1      	ldr	r1, [r2, #12]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	43d2      	mvns	r2, r2
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	795b      	ldrb	r3, [r3, #5]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d10e      	bne.n	8004aca <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004aac:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <EXTI_Init+0xd8>)
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <EXTI_Init+0xd8>)
 8004ab0:	6891      	ldr	r1, [r2, #8]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <EXTI_Init+0xd8>)
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <EXTI_Init+0xd8>)
 8004abe:	68d1      	ldr	r1, [r2, #12]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e01b      	b.n	8004b02 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <EXTI_Init+0xd8>)
 8004acc:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	795b      	ldrb	r3, [r3, #5]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	6811      	ldr	r1, [r2, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e00c      	b.n	8004b02 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	791b      	ldrb	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6811      	ldr	r1, [r2, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	43d2      	mvns	r2, r2
 8004afe:	400a      	ands	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
  }
}
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40013c00 	andmi	r3, r1, r0, lsl #24

08004b10 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	220c      	movs	r2, #12
 8004b28:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	719a      	strb	r2, [r3, #6]
}
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <EXTI_GenerateSWInterrupt+0x20>)
 8004b46:	4a05      	ldr	r2, [pc, #20]	; (8004b5c <EXTI_GenerateSWInterrupt+0x20>)
 8004b48:	6911      	ldr	r1, [r2, #16]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	611a      	str	r2, [r3, #16]
}
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40013c00 	andmi	r3, r1, r0, lsl #24

08004b60 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <EXTI_GetFlagStatus+0x30>)
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e001      	b.n	8004b82 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40013c00 	andmi	r3, r1, r0, lsl #24

08004b94 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <EXTI_ClearFlag+0x18>)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40013c00 	andmi	r3, r1, r0, lsl #24

08004bb0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <EXTI_GetITStatus+0x30>)
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e001      	b.n	8004bd2 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40013c00 	andmi	r3, r1, r0, lsl #24

08004be4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <EXTI_ClearITPendingBit+0x18>)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40013c00 	andmi	r3, r1, r0, lsl #24

08004c00 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 8004c04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c08:	2101      	movs	r1, #1
 8004c0a:	f7fd fb1b 	bl	8002244 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8004c0e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c12:	2100      	movs	r1, #0
 8004c14:	f7fd fb16 	bl	8002244 <RCC_AHB1PeriphResetCmd>
}
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8004c34:	4a4f      	ldr	r2, [pc, #316]	; (8004d74 <DMA2D_Init+0x158>)
 8004c36:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <DMA2D_Init+0x158>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 8004c3e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004c42:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8004c44:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <DMA2D_Init+0x158>)
 8004c46:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <DMA2D_Init+0x158>)
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8004c52:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <DMA2D_Init+0x158>)
 8004c54:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <DMA2D_Init+0x158>)
 8004c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c58:	f022 0207 	bic.w	r2, r2, #7
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8004c5e:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <DMA2D_Init+0x158>)
 8004c60:	4a44      	ldr	r2, [pc, #272]	; (8004d74 <DMA2D_Init+0x158>)
 8004c62:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10c      	bne.n	8004c8e <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e03a      	b.n	8004d04 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10a      	bne.n	8004cac <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e02b      	b.n	8004d04 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d10a      	bne.n	8004cca <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	015b      	lsls	r3, r3, #5
 8004cba:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	02db      	lsls	r3, r3, #11
 8004cc2:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e01c      	b.n	8004d04 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d10c      	bne.n	8004cec <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	015b      	lsls	r3, r3, #5
 8004cd8:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	03db      	lsls	r3, r3, #15
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e00b      	b.n	8004d04 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <DMA2D_Init+0x158>)
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <DMA2D_Init+0x158>)
 8004d08:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4310      	orrs	r0, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6892      	ldr	r2, [r2, #8]
 8004d14:	4310      	orrs	r0, r2
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4302      	orrs	r2, r0
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <DMA2D_Init+0x158>)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6992      	ldr	r2, [r2, #24]
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <DMA2D_Init+0x158>)
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <DMA2D_Init+0x158>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <DMA2D_Init+0x158>)
 8004d38:	4a0e      	ldr	r2, [pc, #56]	; (8004d74 <DMA2D_Init+0x158>)
 8004d3a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	69d2      	ldr	r2, [r2, #28]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <DMA2D_Init+0x158>)
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <DMA2D_Init+0x158>)
 8004d50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d52:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <DMA2D_Init+0x158>)
 8004d5a:	4a06      	ldr	r2, [pc, #24]	; (8004d74 <DMA2D_Init+0x158>)
 8004d5c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a10      	ldr	r0, [r2, #32]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4302      	orrs	r2, r0
 8004d66:	430a      	orrs	r2, r1
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	4002b000 	andmi	fp, r2, r0

08004d78 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop

08004dc8 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <DMA2D_StartTransfer+0x18>)
 8004dce:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <DMA2D_StartTransfer+0x18>)
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
}
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	4002b000 	andmi	fp, r2, r0

08004de4 <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <DMA2D_AbortTransfer+0x18>)
 8004dea:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <DMA2D_AbortTransfer+0x18>)
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	f042 0204 	orr.w	r2, r2, #4
 8004df2:	601a      	str	r2, [r3, #0]

}
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	4002b000 	andmi	fp, r2, r0

08004e00 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d006      	beq.n	8004e1e <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <DMA2D_Suspend+0x34>)
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <DMA2D_Suspend+0x34>)
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	f042 0202 	orr.w	r2, r2, #2
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e005      	b.n	8004e2a <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <DMA2D_Suspend+0x34>)
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <DMA2D_Suspend+0x34>)
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	f022 0202 	bic.w	r2, r2, #2
 8004e28:	601a      	str	r2, [r3, #0]
  }
}
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	4002b000 	andmi	fp, r2, r0

08004e38 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e6e:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 8004e70:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e72:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e74:	6911      	ldr	r1, [r2, #16]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 8004e7e:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e80:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <DMA2D_FGConfig+0xd8>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 8004eaa:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004eae:	69d1      	ldr	r1, [r2, #28]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6890      	ldr	r0, [r2, #8]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	4310      	orrs	r0, r2
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4310      	orrs	r0, r2
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 8004ec8:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004ecc:	6a12      	ldr	r2, [r2, #32]
 8004ece:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004ed2:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004ee8:	6a11      	ldr	r1, [r2, #32]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	69d0      	ldr	r0, [r2, #28]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4310      	orrs	r0, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4302      	orrs	r2, r0
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <DMA2D_FGConfig+0xd4>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f02:	3724      	adds	r7, #36	; 0x24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	4002b000 	andmi	fp, r2, r0
 8004f10:	00fc00c0 	rscseq	r0, ip, r0, asr #1

08004f14 <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f9e:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fa2:	4a26      	ldr	r2, [pc, #152]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fa4:	6991      	ldr	r1, [r2, #24]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6852      	ldr	r2, [r2, #4]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 8004fae:	4a23      	ldr	r2, [pc, #140]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <DMA2D_BGConfig+0xd8>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fdc:	4a17      	ldr	r2, [pc, #92]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004fde:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6890      	ldr	r0, [r2, #8]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	4310      	orrs	r0, r2
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4310      	orrs	r0, r2
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004ffa:	4a10      	ldr	r2, [pc, #64]	; (800503c <DMA2D_BGConfig+0xd4>)
 8004ffc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ffe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <DMA2D_BGConfig+0xd4>)
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <DMA2D_BGConfig+0xd4>)
 8005018:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	69d0      	ldr	r0, [r2, #28]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4310      	orrs	r0, r2
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4302      	orrs	r2, r0
 8005026:	430a      	orrs	r2, r1
 8005028:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <DMA2D_BGConfig+0xd4>)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005030:	631a      	str	r2, [r3, #48]	; 0x30

}
 8005032:	3724      	adds	r7, #36	; 0x24
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	4002b000 	andmi	fp, r2, r0
 8005040:	00fc00c0 	rscseq	r0, ip, r0, asr #1

08005044 <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <DMA2D_FGStart+0x34>)
 80050aa:	4a08      	ldr	r2, [pc, #32]	; (80050cc <DMA2D_FGStart+0x34>)
 80050ac:	69d2      	ldr	r2, [r2, #28]
 80050ae:	f042 0220 	orr.w	r2, r2, #32
 80050b2:	61da      	str	r2, [r3, #28]
 80050b4:	e005      	b.n	80050c2 <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <DMA2D_FGStart+0x34>)
 80050b8:	4a04      	ldr	r2, [pc, #16]	; (80050cc <DMA2D_FGStart+0x34>)
 80050ba:	69d2      	ldr	r2, [r2, #28]
 80050bc:	f022 0220 	bic.w	r2, r2, #32
 80050c0:	61da      	str	r2, [r3, #28]
  }
}
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	4002b000 	andmi	fp, r2, r0

080050d0 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <DMA2D_BGStart+0x34>)
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <DMA2D_BGStart+0x34>)
 80050e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e6:	f042 0220 	orr.w	r2, r2, #32
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24
 80050ec:	e005      	b.n	80050fa <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <DMA2D_BGStart+0x34>)
 80050f0:	4a04      	ldr	r2, [pc, #16]	; (8005104 <DMA2D_BGStart+0x34>)
 80050f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050f4:	f022 0220 	bic.w	r2, r2, #32
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	4002b000 	andmi	fp, r2, r0

08005108 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d013      	beq.n	8005142 <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800511a:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 800511e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005120:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 8005134:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	430a      	orrs	r2, r1
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005140:	e005      	b.n	800514e <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <DMA2D_DeadTimeConfig+0x50>)
 8005146:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	4002b000 	andmi	fp, r2, r0

0800515c <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <DMA2D_LineWatermarkConfig+0x18>)
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	649a      	str	r2, [r3, #72]	; 0x48
}
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	4002b000 	andmi	fp, r2, r0

08005178 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <DMA2D_ITConfig+0x38>)
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <DMA2D_ITConfig+0x38>)
 800518e:	6811      	ldr	r1, [r2, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e006      	b.n	80051a6 <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <DMA2D_ITConfig+0x38>)
 800519a:	4a05      	ldr	r2, [pc, #20]	; (80051b0 <DMA2D_ITConfig+0x38>)
 800519c:	6811      	ldr	r1, [r2, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	43d2      	mvns	r2, r2
 80051a2:	400a      	ands	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
  }
}
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	4002b000 	andmi	fp, r2, r0

080051b4 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <DMA2D_GetFlagStatus+0x30>)
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e001      	b.n	80051d6 <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	4002b000 	andmi	fp, r2, r0

080051e8 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 80051f0:	4b03      	ldr	r3, [pc, #12]	; (8005200 <DMA2D_ClearFlag+0x18>)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
}
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	4002b000 	andmi	fp, r2, r0

08005204 <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <DMA2D_GetITStatus+0x54>)
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e001      	b.n	800522c <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <DMA2D_GetITStatus+0x54>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <DMA2D_GetITStatus+0x40>
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e001      	b.n	8005248 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	4002b000 	andmi	fp, r2, r0

0800525c <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800526a:	4b04      	ldr	r3, [pc, #16]	; (800527c <DMA2D_ClearITPendingBit+0x20>)
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	4002b000 	andmi	fp, r2, r0

08005280 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 8005284:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005288:	2101      	movs	r1, #1
 800528a:	f7fd f853 	bl	8002334 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800528e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005292:	2100      	movs	r1, #0
 8005294:	f7fd f84e 	bl	8002334 <RCC_APB2PeriphResetCmd>
}
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop

0800529c <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052bc:	4a3f      	ldr	r2, [pc, #252]	; (80053bc <LTDC_Init+0x120>)
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <LTDC_Init+0x120>)
 80052c0:	6899      	ldr	r1, [r3, #8]
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <LTDC_Init+0x124>)
 80052c4:	400b      	ands	r3, r1
 80052c6:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80052d0:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <LTDC_Init+0x120>)
 80052d2:	4a3a      	ldr	r2, [pc, #232]	; (80053bc <LTDC_Init+0x120>)
 80052d4:	6891      	ldr	r1, [r2, #8]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6950      	ldr	r0, [r2, #20]
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	4302      	orrs	r2, r0
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052e2:	4a36      	ldr	r2, [pc, #216]	; (80053bc <LTDC_Init+0x120>)
 80052e4:	4b35      	ldr	r3, [pc, #212]	; (80053bc <LTDC_Init+0x120>)
 80052e6:	68d9      	ldr	r1, [r3, #12]
 80052e8:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <LTDC_Init+0x124>)
 80052ea:	400b      	ands	r3, r1
 80052ec:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80052f6:	4b31      	ldr	r3, [pc, #196]	; (80053bc <LTDC_Init+0x120>)
 80052f8:	4a30      	ldr	r2, [pc, #192]	; (80053bc <LTDC_Init+0x120>)
 80052fa:	68d1      	ldr	r1, [r2, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	69d0      	ldr	r0, [r2, #28]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4302      	orrs	r2, r0
 8005304:	430a      	orrs	r2, r1
 8005306:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <LTDC_Init+0x120>)
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <LTDC_Init+0x120>)
 800530c:	6919      	ldr	r1, [r3, #16]
 800530e:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <LTDC_Init+0x124>)
 8005310:	400b      	ands	r3, r1
 8005312:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800531c:	4b27      	ldr	r3, [pc, #156]	; (80053bc <LTDC_Init+0x120>)
 800531e:	4a27      	ldr	r2, [pc, #156]	; (80053bc <LTDC_Init+0x120>)
 8005320:	6911      	ldr	r1, [r2, #16]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4302      	orrs	r2, r0
 800532a:	430a      	orrs	r2, r1
 800532c:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800532e:	4a23      	ldr	r2, [pc, #140]	; (80053bc <LTDC_Init+0x120>)
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <LTDC_Init+0x120>)
 8005332:	6959      	ldr	r1, [r3, #20]
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <LTDC_Init+0x124>)
 8005336:	400b      	ands	r3, r1
 8005338:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8005342:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <LTDC_Init+0x120>)
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <LTDC_Init+0x120>)
 8005346:	6951      	ldr	r1, [r2, #20]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4302      	orrs	r2, r0
 8005350:	430a      	orrs	r2, r1
 8005352:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <LTDC_Init+0x120>)
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <LTDC_Init+0x120>)
 8005358:	6999      	ldr	r1, [r3, #24]
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <LTDC_Init+0x128>)
 800535c:	400b      	ands	r3, r1
 800535e:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <LTDC_Init+0x120>)
 8005362:	4a16      	ldr	r2, [pc, #88]	; (80053bc <LTDC_Init+0x120>)
 8005364:	6991      	ldr	r1, [r2, #24]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6810      	ldr	r0, [r2, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6852      	ldr	r2, [r2, #4]
 800536e:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8005374:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800537a:	4302      	orrs	r2, r0
 800537c:	430a      	orrs	r2, r1
 800537e:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <LTDC_Init+0x120>)
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <LTDC_Init+0x120>)
 8005394:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005396:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <LTDC_Init+0x120>)
 800539e:	4a07      	ldr	r2, [pc, #28]	; (80053bc <LTDC_Init+0x120>)
 80053a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053a2:	68b8      	ldr	r0, [r7, #8]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4310      	orrs	r0, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ac:	4302      	orrs	r2, r0
 80053ae:	430a      	orrs	r2, r1
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053b2:	3724      	adds	r7, #36	; 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40016800 	andmi	r6, r1, r0, lsl #16
 80053c0:	f000f800 			; <UNDEFINED> instruction: 0xf000f800
 80053c4:	0ffe888f 	svceq	0x00fe888f

080053c8 <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
}
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <LTDC_Cmd+0x34>)
 8005446:	4a08      	ldr	r2, [pc, #32]	; (8005468 <LTDC_Cmd+0x34>)
 8005448:	6992      	ldr	r2, [r2, #24]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	619a      	str	r2, [r3, #24]
 8005450:	e005      	b.n	800545e <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <LTDC_Cmd+0x34>)
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <LTDC_Cmd+0x34>)
 8005456:	6992      	ldr	r2, [r2, #24]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	619a      	str	r2, [r3, #24]
  }
}
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40016800 	andmi	r6, r1, r0, lsl #16

0800546c <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d006      	beq.n	800548a <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <LTDC_DitherCmd+0x34>)
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <LTDC_DitherCmd+0x34>)
 8005480:	6992      	ldr	r2, [r2, #24]
 8005482:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005486:	619a      	str	r2, [r3, #24]
 8005488:	e005      	b.n	8005496 <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <LTDC_DitherCmd+0x34>)
 800548c:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <LTDC_DitherCmd+0x34>)
 800548e:	6992      	ldr	r2, [r2, #24]
 8005490:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005494:	619a      	str	r2, [r3, #24]
  }
}
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40016800 	andmi	r6, r1, r0, lsl #16

080054a4 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80054ac:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <LTDC_GetRGBWidth+0x50>)
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <LTDC_GetRGBWidth+0x50>)
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <LTDC_GetRGBWidth+0x54>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <LTDC_GetRGBWidth+0x50>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <LTDC_GetRGBWidth+0x50>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <LTDC_GetRGBWidth+0x50>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	0b1b      	lsrs	r3, r3, #12
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f107 020c 	add.w	r2, r7, #12
 80054e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80054e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40016800 	andmi	r6, r1, r0, lsl #16
 80054f8:	0ffe888f 	svceq	0x00fe888f

080054fc <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	609a      	str	r2, [r3, #8]
}
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <LTDC_LIPConfig+0x18>)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40016800 	andmi	r6, r1, r0, lsl #16

0800553c <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <LTDC_ReloadConfig+0x18>)
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
}
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40016800 	andmi	r6, r1, r0, lsl #16

08005558 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f023 0207 	bic.w	r2, r3, #7
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	631a      	str	r2, [r3, #48]	; 0x30

}
 8005680:	3724      	adds	r7, #36	; 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2207      	movs	r2, #7
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f043 0201 	orr.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e005      	b.n	800572c <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 0201 	bic.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
  }
}
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop

08005738 <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <LTDC_GetPosStatus+0x3c>)
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <LTDC_GetPosStatus+0x3c>)
 8005746:	2200      	movs	r2, #0
 8005748:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <LTDC_GetPosStatus+0x3c>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <LTDC_GetPosStatus+0x3c>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	b29b      	uxth	r3, r3
 8005758:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f107 0208 	add.w	r2, r7, #8
 8005760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005764:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40016800 	andmi	r6, r1, r0, lsl #16

08005778 <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	605a      	str	r2, [r3, #4]
}
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop

08005798 <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 80057a0:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <LTDC_GetCDStatus+0x2c>)
 80057a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
 80057b0:	e001      	b.n	80057b6 <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40016800 	andmi	r6, r1, r0, lsl #16

080057c8 <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01f      	beq.n	8005824 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f043 0202 	orr.w	r2, r3, #2
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4319      	orrs	r1, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	430b      	orrs	r3, r1
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e005      	b.n	8005830 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 0202 	bic.w	r2, r3, #2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8005830:	4b03      	ldr	r3, [pc, #12]	; (8005840 <LTDC_ColorKeyingConfig+0x78>)
 8005832:	2201      	movs	r2, #1
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40016800 	andmi	r6, r1, r0, lsl #16

08005844 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]
}
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f043 0210 	orr.w	r2, r3, #16
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e005      	b.n	8005894 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 0210 	bic.w	r2, r3, #16
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <LTDC_CLUTCmd+0x3c>)
 8005896:	2201      	movs	r2, #1
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
}
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40016800 	andmi	r6, r1, r0, lsl #16

080058a8 <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	431a      	orrs	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	431a      	orrs	r2, r3
                              green | red);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	60da      	str	r2, [r3, #12]
}
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop

08005920 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8005920:	b480      	push	{r7}
 8005922:	b089      	sub	sp, #36	; 0x24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	460a      	mov	r2, r1
 800592c:	807a      	strh	r2, [r7, #2]
 800592e:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <LTDC_LayerPosition+0xd8>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	0c1a      	lsrs	r2, r3, #16
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	4413      	add	r3, r2
 8005956:	3301      	adds	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	b29a      	uxth	r2, r3
 800595e:	883b      	ldrh	r3, [r7, #0]
 8005960:	4413      	add	r3, r2
 8005962:	3301      	adds	r3, #1
 8005964:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8005972:	2304      	movs	r3, #4
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	e016      	b.n	80059a6 <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 800597e:	2303      	movs	r3, #3
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e010      	b.n	80059a6 <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d008      	beq.n	800599c <LTDC_LayerPosition+0x7c>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d005      	beq.n	800599c <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d002      	beq.n	800599c <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b07      	cmp	r3, #7
 800599a:	d102      	bne.n	80059a2 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800599c:	2302      	movs	r3, #2
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	e001      	b.n	80059a6 <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 80059a2:	2301      	movs	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b2:	1eda      	subs	r2, r3, #3
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	3b01      	subs	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	3b01      	subs	r3, #1
 80059d4:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	041a      	lsls	r2, r3, #16
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	041a      	lsls	r2, r3, #16
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	609a      	str	r2, [r3, #8]
}
 80059ee:	3724      	adds	r7, #36	; 0x24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40016800 	andmi	r6, r1, r0, lsl #16

080059fc <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop

08005a34 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b08b      	sub	sp, #44	; 0x2c
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a52:	e019      	b.n	8005a88 <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d103      	bne.n	8005a62 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a60:	e012      	b.n	8005a88 <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d008      	beq.n	8005a7a <LTDC_LayerSize+0x46>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d005      	beq.n	8005a7a <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d002      	beq.n	8005a7a <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b07      	cmp	r3, #7
 8005a78:	d103      	bne.n	8005a82 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a80:	e002      	b.n	8005a88 <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a94:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aac:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	041a      	lsls	r2, r3, #16
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	041a      	lsls	r2, r3, #16
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	041a      	lsls	r2, r3, #16
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 8005af4:	372c      	adds	r7, #44	; 0x2c
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8005b16:	2304      	movs	r3, #4
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e016      	b.n	8005b4a <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d102      	bne.n	8005b28 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8005b22:	2303      	movs	r3, #3
 8005b24:	73fb      	strb	r3, [r7, #15]
 8005b26:	e010      	b.n	8005b4a <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d008      	beq.n	8005b40 <LTDC_LayerPixelFormat+0x40>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d005      	beq.n	8005b40 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d002      	beq.n	8005b40 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b07      	cmp	r3, #7
 8005b3e:	d102      	bne.n	8005b46 <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8005b40:	2302      	movs	r3, #2
 8005b42:	73fb      	strb	r3, [r7, #15]
 8005b44:	e001      	b.n	8005b4a <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8005b62:	2304      	movs	r3, #4
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	e016      	b.n	8005b96 <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d102      	bne.n	8005b74 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	73fb      	strb	r3, [r7, #15]
 8005b72:	e010      	b.n	8005b96 <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d008      	beq.n	8005b8c <LTDC_LayerPixelFormat+0x8c>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d005      	beq.n	8005b8c <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d002      	beq.n	8005b8c <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b07      	cmp	r3, #7
 8005b8a:	d102      	bne.n	8005b92 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	73fb      	strb	r3, [r7, #15]
 8005b90:	e001      	b.n	8005b96 <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8005b92:	2301      	movs	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	041a      	lsls	r2, r3, #16
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	fb01 f303 	mul.w	r3, r1, r3
 8005ba8:	3303      	adds	r3, #3
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	611a      	str	r2, [r3, #16]
    
}
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <LTDC_ITConfig+0x38>)
 8005bd4:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <LTDC_ITConfig+0x38>)
 8005bd6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8005bde:	e006      	b.n	8005bee <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <LTDC_ITConfig+0x38>)
 8005be2:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <LTDC_ITConfig+0x38>)
 8005be4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	43d2      	mvns	r2, r2
 8005bea:	400a      	ands	r2, r1
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40016800 	andmi	r6, r1, r0, lsl #16

08005bfc <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <LTDC_GetFlagStatus+0x30>)
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	e001      	b.n	8005c1e <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40016800 	andmi	r6, r1, r0, lsl #16

08005c30 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <LTDC_ClearFlag+0x18>)
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40016800 	andmi	r6, r1, r0, lsl #16

08005c4c <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8005c58:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <LTDC_GetITStatus+0x4c>)
 8005c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e001      	b.n	8005c6e <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <LTDC_GetITStatus+0x4c>)
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <LTDC_GetITStatus+0x3a>
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
 8005c84:	e001      	b.n	8005c8a <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40016800 	andmi	r6, r1, r0, lsl #16

08005c9c <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <LTDC_ClearITPendingBit+0x18>)
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40016800 	andmi	r6, r1, r0, lsl #16

08005cb8 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d107      	bne.n	8005cd6 <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8005cc6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	f243 01db 	movw	r1, #12507	; 0x30db
 8005cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cd4:	e006      	b.n	8005ce4 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 8005cd6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8005ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8005ce4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	3201      	adds	r2, #1
 8005cec:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <FMC_NORSRAMDeInit+0x54>)
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	a0000104 	andge	r0, r0, r4, lsl #2

08005d10 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005d1c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005d2c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005d32:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005d38:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005d3e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005d44:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005d4a:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005d50:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005d56:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005d5c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005d62:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005d68:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005d6e:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d10d      	bne.n	8005d98 <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005d7c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005d90:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da0:	d124      	bne.n	8005dec <FMC_NORSRAMInit+0xdc>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d020      	beq.n	8005dec <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005daa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005db4:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005db6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005dba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005dbe:	6811      	ldr	r1, [r2, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 8005dc8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005dcc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd6:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8005dd8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de0:	6912      	ldr	r2, [r2, #16]
 8005de2:	3a01      	subs	r2, #1
 8005de4:	0511      	lsls	r1, r2, #20
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005dec:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005dfa:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e00:	6849      	ldr	r1, [r1, #4]
 8005e02:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005e04:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e0a:	6889      	ldr	r1, [r1, #8]
 8005e0c:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005e0e:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e14:	68c9      	ldr	r1, [r1, #12]
 8005e16:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005e18:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e1e:	6909      	ldr	r1, [r1, #16]
 8005e20:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005e22:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e28:	6949      	ldr	r1, [r1, #20]
 8005e2a:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8005e2c:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005e32:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005e34:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e42:	d120      	bne.n	8005e86 <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <FMC_NORSRAMInit+0x190>)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e4e:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e54:	6849      	ldr	r1, [r1, #4]
 8005e56:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005e58:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e5e:	6889      	ldr	r1, [r1, #8]
 8005e60:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005e62:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e68:	6909      	ldr	r1, [r1, #16]
 8005e6a:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005e6c:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e72:	6949      	ldr	r1, [r1, #20]
 8005e74:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005e76:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005e7c:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005e7e:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e84:	e006      	b.n	8005e94 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <FMC_NORSRAMInit+0x190>)
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	a0000104 	andge	r0, r0, r4, lsl #2

08005ea4 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ee8:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	220f      	movs	r2, #15
 8005f0a:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	220f      	movs	r2, #15
 8005f12:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	220f      	movs	r2, #15
 8005f22:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	220f      	movs	r2, #15
 8005f2a:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	220f      	movs	r2, #15
 8005f32:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	2200      	movs	r2, #0
 8005f3a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	220f      	movs	r2, #15
 8005f42:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	220f      	movs	r2, #15
 8005f4a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	220f      	movs	r2, #15
 8005f5a:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	220f      	movs	r2, #15
 8005f62:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	220f      	movs	r2, #15
 8005f6a:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f70:	2200      	movs	r2, #0
 8005f72:	619a      	str	r2, [r3, #24]
}
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop

08005f80 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 8005f92:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005f96:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005fa0:	f042 0101 	orr.w	r1, r2, #1
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005faa:	e00b      	b.n	8005fc4 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8005fac:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005fb0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <FMC_NORSRAMCmd+0x50>)
 8005fbc:	400b      	ands	r3, r1
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	000ffffe 	strdeq	pc, [pc], -lr

08005fd4 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d10e      	bne.n	8006000 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <FMC_NANDDeInit+0x54>)
 8005fe4:	2218      	movs	r2, #24
 8005fe6:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <FMC_NANDDeInit+0x54>)
 8005fea:	2240      	movs	r2, #64	; 0x40
 8005fec:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8005fee:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <FMC_NANDDeInit+0x54>)
 8005ff0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005ff4:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <FMC_NANDDeInit+0x54>)
 8005ff8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	e00d      	b.n	800601c <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <FMC_NANDDeInit+0x58>)
 8006002:	2218      	movs	r2, #24
 8006004:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <FMC_NANDDeInit+0x58>)
 8006008:	2240      	movs	r2, #64	; 0x40
 800600a:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <FMC_NANDDeInit+0x58>)
 800600e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006012:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <FMC_NANDDeInit+0x58>)
 8006016:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800601a:	60da      	str	r2, [r3, #12]
  }  
}
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	a0000060 	andge	r0, r0, r0, rrx
 800602c:	a0000080 	andge	r0, r0, r0, lsl #1

08006030 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800604c:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8006052:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 8006058:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8006060:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8006068:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800606a:	f043 0308 	orr.w	r3, r3, #8
 800606e:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800607e:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006088:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80060a4:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80060ae:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d109      	bne.n	80060d8 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <FMC_NANDInit+0xc4>)
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <FMC_NANDInit+0xc4>)
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <FMC_NANDInit+0xc4>)
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e008      	b.n	80060ea <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <FMC_NANDInit+0xc8>)
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <FMC_NANDInit+0xc8>)
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <FMC_NANDInit+0xc8>)
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	60da      	str	r2, [r3, #12]
  }
}
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	a0000060 	andge	r0, r0, r0, rrx
 80060f8:	a0000080 	andge	r0, r0, r0, lsl #1

080060fc <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2210      	movs	r2, #16
 8006114:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	22fc      	movs	r2, #252	; 0xfc
 8006134:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	22fc      	movs	r2, #252	; 0xfc
 800613c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	22fc      	movs	r2, #252	; 0xfc
 8006144:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	22fc      	movs	r2, #252	; 0xfc
 800614c:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	22fc      	movs	r2, #252	; 0xfc
 8006154:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	22fc      	movs	r2, #252	; 0xfc
 800615c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	22fc      	movs	r2, #252	; 0xfc
 8006164:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	22fc      	movs	r2, #252	; 0xfc
 800616c:	60da      	str	r2, [r3, #12]
}
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d010      	beq.n	80061ac <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b10      	cmp	r3, #16
 800618e:	d106      	bne.n	800619e <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <FMC_NANDCmd+0x60>)
 8006192:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <FMC_NANDCmd+0x60>)
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	f042 0204 	orr.w	r2, r2, #4
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e016      	b.n	80061cc <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <FMC_NANDCmd+0x64>)
 80061a0:	4a0e      	ldr	r2, [pc, #56]	; (80061dc <FMC_NANDCmd+0x64>)
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	f042 0204 	orr.w	r2, r2, #4
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e00f      	b.n	80061cc <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d106      	bne.n	80061c0 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <FMC_NANDCmd+0x60>)
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <FMC_NANDCmd+0x60>)
 80061b6:	6819      	ldr	r1, [r3, #0]
 80061b8:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <FMC_NANDCmd+0x68>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e005      	b.n	80061cc <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 80061c0:	4a06      	ldr	r2, [pc, #24]	; (80061dc <FMC_NANDCmd+0x64>)
 80061c2:	4b06      	ldr	r3, [pc, #24]	; (80061dc <FMC_NANDCmd+0x64>)
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <FMC_NANDCmd+0x68>)
 80061c8:	400b      	ands	r3, r1
 80061ca:	6013      	str	r3, [r2, #0]
    }
  }
}
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	a0000060 	andge	r0, r0, r0, rrx
 80061dc:	a0000080 	andge	r0, r0, r0, lsl #1
 80061e0:	000ffffb 	strdeq	pc, [pc], -fp

080061e4 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d106      	bne.n	800620a <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 80061fc:	4b11      	ldr	r3, [pc, #68]	; (8006244 <FMC_NANDECCCmd+0x60>)
 80061fe:	4a11      	ldr	r2, [pc, #68]	; (8006244 <FMC_NANDECCCmd+0x60>)
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e016      	b.n	8006238 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <FMC_NANDECCCmd+0x64>)
 800620c:	4a0e      	ldr	r2, [pc, #56]	; (8006248 <FMC_NANDECCCmd+0x64>)
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e00f      	b.n	8006238 <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b10      	cmp	r3, #16
 800621c:	d106      	bne.n	800622c <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <FMC_NANDECCCmd+0x60>)
 8006220:	4b08      	ldr	r3, [pc, #32]	; (8006244 <FMC_NANDECCCmd+0x60>)
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <FMC_NANDECCCmd+0x68>)
 8006226:	400b      	ands	r3, r1
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e005      	b.n	8006238 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800622c:	4a06      	ldr	r2, [pc, #24]	; (8006248 <FMC_NANDECCCmd+0x64>)
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <FMC_NANDECCCmd+0x64>)
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <FMC_NANDECCCmd+0x68>)
 8006234:	400b      	ands	r3, r1
 8006236:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	a0000060 	andge	r0, r0, r0, rrx
 8006248:	a0000080 	andge	r0, r0, r0, lsl #1
 800624c:	000fffbf 			; <UNDEFINED> instruction: 0x000fffbf

08006250 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b10      	cmp	r3, #16
 8006260:	d103      	bne.n	800626a <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <FMC_GetECC+0x30>)
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e002      	b.n	8006270 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <FMC_GetECC+0x34>)
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8006270:	68fb      	ldr	r3, [r7, #12]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	a0000060 	andge	r0, r0, r0, rrx
 8006284:	a0000080 	andge	r0, r0, r0, lsl #1

08006288 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <FMC_PCCARDDeInit+0x30>)
 800628e:	2218      	movs	r2, #24
 8006290:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <FMC_PCCARDDeInit+0x30>)
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <FMC_PCCARDDeInit+0x30>)
 800629a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800629e:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <FMC_PCCARDDeInit+0x30>)
 80062a2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80062a6:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 80062a8:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <FMC_PCCARDDeInit+0x30>)
 80062aa:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80062ae:	611a      	str	r2, [r3, #16]
}
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	a00000a0 	andge	r0, r0, r0, lsr #1

080062bc <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 80062c4:	4b27      	ldr	r3, [pc, #156]	; (8006364 <FMC_PCCARDInit+0xa8>)
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6852      	ldr	r2, [r2, #4]
 80062ce:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 80062d0:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6892      	ldr	r2, [r2, #8]
 80062d6:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 80062d8:	430a      	orrs	r2, r1
 80062da:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 80062de:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80062e0:	4b20      	ldr	r3, [pc, #128]	; (8006364 <FMC_PCCARDInit+0xa8>)
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68d2      	ldr	r2, [r2, #12]
 80062e6:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	68d2      	ldr	r2, [r2, #12]
 80062ec:	6852      	ldr	r2, [r2, #4]
 80062ee:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80062f0:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	6892      	ldr	r2, [r2, #8]
 80062f8:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80062fa:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68d2      	ldr	r2, [r2, #12]
 8006300:	68d2      	ldr	r2, [r2, #12]
 8006302:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006304:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8006306:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006308:	4b16      	ldr	r3, [pc, #88]	; (8006364 <FMC_PCCARDInit+0xa8>)
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6912      	ldr	r2, [r2, #16]
 800630e:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6912      	ldr	r2, [r2, #16]
 8006314:	6852      	ldr	r2, [r2, #4]
 8006316:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006318:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6912      	ldr	r2, [r2, #16]
 800631e:	6892      	ldr	r2, [r2, #8]
 8006320:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006322:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6912      	ldr	r2, [r2, #16]
 8006328:	68d2      	ldr	r2, [r2, #12]
 800632a:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800632c:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800632e:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <FMC_PCCARDInit+0xa8>)
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6952      	ldr	r2, [r2, #20]
 8006336:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6952      	ldr	r2, [r2, #20]
 800633c:	6852      	ldr	r2, [r2, #4]
 800633e:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8006340:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6952      	ldr	r2, [r2, #20]
 8006346:	6892      	ldr	r2, [r2, #8]
 8006348:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800634a:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6952      	ldr	r2, [r2, #20]
 8006350:	68d2      	ldr	r2, [r2, #12]
 8006352:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006354:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8006356:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	a00000a0 	andge	r0, r0, r0, lsr #1

08006368 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	22fc      	movs	r2, #252	; 0xfc
 8006388:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	22fc      	movs	r2, #252	; 0xfc
 8006390:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	22fc      	movs	r2, #252	; 0xfc
 8006398:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	22fc      	movs	r2, #252	; 0xfc
 80063a0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	22fc      	movs	r2, #252	; 0xfc
 80063a8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	22fc      	movs	r2, #252	; 0xfc
 80063b0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	22fc      	movs	r2, #252	; 0xfc
 80063b8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	22fc      	movs	r2, #252	; 0xfc
 80063c0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	22fc      	movs	r2, #252	; 0xfc
 80063c8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	22fc      	movs	r2, #252	; 0xfc
 80063d0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	22fc      	movs	r2, #252	; 0xfc
 80063d8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	22fc      	movs	r2, #252	; 0xfc
 80063e0:	60da      	str	r2, [r3, #12]
}
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d006      	beq.n	800640a <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <FMC_PCCARDCmd+0x34>)
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <FMC_PCCARDCmd+0x34>)
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	f042 0204 	orr.w	r2, r2, #4
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e005      	b.n	8006416 <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800640a:	4a05      	ldr	r2, [pc, #20]	; (8006420 <FMC_PCCARDCmd+0x34>)
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <FMC_PCCARDCmd+0x34>)
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <FMC_PCCARDCmd+0x38>)
 8006412:	400b      	ands	r3, r1
 8006414:	6013      	str	r3, [r2, #0]
  }
}
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006424:	000ffffb 	strdeq	pc, [pc], -fp

08006428 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <FMC_SDRAMDeInit+0x40>)
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8006438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <FMC_SDRAMDeInit+0x40>)
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	3202      	adds	r2, #2
 8006442:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <FMC_SDRAMDeInit+0x40>)
 800644c:	2200      	movs	r2, #0
 800644e:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <FMC_SDRAMDeInit+0x40>)
 8006452:	2200      	movs	r2, #0
 8006454:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 8006456:	4b04      	ldr	r3, [pc, #16]	; (8006468 <FMC_SDRAMDeInit+0x40>)
 8006458:	2200      	movs	r2, #0
 800645a:	619a      	str	r2, [r3, #24]
}  
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	a0000140 	andge	r0, r0, r0, asr #2

0800646c <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800648c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8006492:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8006498:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800649e:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80064a4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80064aa:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80064b0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 80064c2:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <FMC_SDRAMInit+0x158>)
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	6979      	ldr	r1, [r7, #20]
 80064ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064ce:	e011      	b.n	80064f4 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80064d8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <FMC_SDRAMInit+0x158>)
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 80064e8:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <FMC_SDRAMInit+0x158>)
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d130      	bne.n	800655e <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	3b01      	subs	r3, #1
 800650c:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800650e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	3b01      	subs	r3, #1
 8006518:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800651a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	3b01      	subs	r3, #1
 8006524:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8006526:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	3b01      	subs	r3, #1
 8006530:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8006532:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	3b01      	subs	r3, #1
 800653c:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800653e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	3b01      	subs	r3, #1
 8006548:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800654e:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <FMC_SDRAMInit+0x158>)
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	3202      	adds	r2, #2
 8006556:	6939      	ldr	r1, [r7, #16]
 8006558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800655c:	e02c      	b.n	80065b8 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	3b01      	subs	r3, #1
 800656e:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006570:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	3b01      	subs	r3, #1
 800657a:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800657c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	3b01      	subs	r3, #1
 8006586:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	3b01      	subs	r3, #1
 8006594:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	3b01      	subs	r3, #1
 800659e:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <FMC_SDRAMInit+0x158>)
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <FMC_SDRAMInit+0x158>)
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	3202      	adds	r2, #2
 80065b2:	6939      	ldr	r1, [r7, #16]
 80065b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	a0000140 	andge	r0, r0, r0, asr #2

080065c8 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2210      	movs	r2, #16
 80065e6:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2280      	movs	r2, #128	; 0x80
 80065f2:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065fa:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	2210      	movs	r2, #16
 8006614:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	2210      	movs	r2, #16
 800661c:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	2210      	movs	r2, #16
 8006624:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	2210      	movs	r2, #16
 800662c:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	2210      	movs	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	2210      	movs	r2, #16
 800663c:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	2210      	movs	r2, #16
 8006644:	619a      	str	r2, [r3, #24]
  
}
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006664:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800666e:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800667a:	4b04      	ldr	r3, [pc, #16]	; (800668c <FMC_SDRAMCmdConfig+0x3c>)
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	611a      	str	r2, [r3, #16]

}
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	a0000140 	andge	r0, r0, r0, asr #2

08006690 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <FMC_GetModeStatus+0x38>)
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f003 0306 	and.w	r3, r3, #6
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e005      	b.n	80066ba <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <FMC_GetModeStatus+0x38>)
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0318 	and.w	r3, r3, #24
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	a0000140 	andge	r0, r0, r0, asr #2

080066cc <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <FMC_SetRefreshCount+0x20>)
 80066d6:	4a05      	ldr	r2, [pc, #20]	; (80066ec <FMC_SetRefreshCount+0x20>)
 80066d8:	6951      	ldr	r1, [r2, #20]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	430a      	orrs	r2, r1
 80066e0:	615a      	str	r2, [r3, #20]
   
}
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	a0000140 	andge	r0, r0, r0, asr #2

080066f0 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <FMC_SetAutoRefresh_Number+0x20>)
 80066fa:	4a05      	ldr	r2, [pc, #20]	; (8006710 <FMC_SetAutoRefresh_Number+0x20>)
 80066fc:	6911      	ldr	r1, [r2, #16]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	0152      	lsls	r2, r2, #5
 8006702:	430a      	orrs	r2, r1
 8006704:	611a      	str	r2, [r3, #16]
}
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	a0000140 	andge	r0, r0, r0, asr #2

08006714 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006728:	4a0c      	ldr	r2, [pc, #48]	; (800675c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006730:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800673a:	e00a      	b.n	8006752 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800673c:	4a07      	ldr	r2, [pc, #28]	; (800675c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006746:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800674a:	400b      	ands	r3, r1
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	a0000140 	andge	r0, r0, r0, asr #2

08006760 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d026      	beq.n	80067c2 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b10      	cmp	r3, #16
 8006778:	d106      	bne.n	8006788 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800677a:	4b29      	ldr	r3, [pc, #164]	; (8006820 <FMC_ITConfig+0xc0>)
 800677c:	4a28      	ldr	r2, [pc, #160]	; (8006820 <FMC_ITConfig+0xc0>)
 800677e:	6851      	ldr	r1, [r2, #4]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	e046      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678e:	d106      	bne.n	800679e <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 8006790:	4b24      	ldr	r3, [pc, #144]	; (8006824 <FMC_ITConfig+0xc4>)
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <FMC_ITConfig+0xc4>)
 8006794:	6851      	ldr	r1, [r2, #4]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	e03b      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d106      	bne.n	80067b4 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 80067a6:	4b20      	ldr	r3, [pc, #128]	; (8006828 <FMC_ITConfig+0xc8>)
 80067a8:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <FMC_ITConfig+0xc8>)
 80067aa:	6851      	ldr	r1, [r2, #4]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	e030      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <FMC_ITConfig+0xcc>)
 80067b6:	4a1d      	ldr	r2, [pc, #116]	; (800682c <FMC_ITConfig+0xcc>)
 80067b8:	6951      	ldr	r1, [r2, #20]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	430a      	orrs	r2, r1
 80067be:	615a      	str	r2, [r3, #20]
 80067c0:	e029      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d107      	bne.n	80067d8 <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <FMC_ITConfig+0xc0>)
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <FMC_ITConfig+0xc0>)
 80067cc:	6851      	ldr	r1, [r2, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	43d2      	mvns	r2, r2
 80067d2:	400a      	ands	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	e01e      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	d107      	bne.n	80067f0 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <FMC_ITConfig+0xc4>)
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <FMC_ITConfig+0xc4>)
 80067e4:	6851      	ldr	r1, [r2, #4]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	43d2      	mvns	r2, r2
 80067ea:	400a      	ands	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	e012      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d107      	bne.n	8006808 <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <FMC_ITConfig+0xc8>)
 80067fa:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <FMC_ITConfig+0xc8>)
 80067fc:	6851      	ldr	r1, [r2, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	43d2      	mvns	r2, r2
 8006802:	400a      	ands	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	e006      	b.n	8006816 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8006808:	4b08      	ldr	r3, [pc, #32]	; (800682c <FMC_ITConfig+0xcc>)
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <FMC_ITConfig+0xcc>)
 800680c:	6951      	ldr	r1, [r2, #20]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	43d2      	mvns	r2, r2
 8006812:	400a      	ands	r2, r1
 8006814:	615a      	str	r2, [r3, #20]
    }
  }
}
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	a0000060 	andge	r0, r0, r0, rrx
 8006824:	a0000080 	andge	r0, r0, r0, lsl #1
 8006828:	a00000a0 	andge	r0, r0, r0, lsr #1
 800682c:	a0000140 	andge	r0, r0, r0, asr #2

08006830 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b10      	cmp	r3, #16
 8006846:	d103      	bne.n	8006850 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8006848:	4b14      	ldr	r3, [pc, #80]	; (800689c <FMC_GetFlagStatus+0x6c>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	e012      	b.n	8006876 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006856:	d103      	bne.n	8006860 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8006858:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <FMC_GetFlagStatus+0x70>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	e00a      	b.n	8006876 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d103      	bne.n	8006870 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <FMC_GetFlagStatus+0x74>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	e002      	b.n	8006876 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <FMC_GetFlagStatus+0x78>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	401a      	ands	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d002      	beq.n	8006888 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e001      	b.n	800688c <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	a0000060 	andge	r0, r0, r0, rrx
 80068a0:	a0000080 	andge	r0, r0, r0, lsl #1
 80068a4:	a00000a0 	andge	r0, r0, r0, lsr #1
 80068a8:	a0000140 	andge	r0, r0, r0, asr #2

080068ac <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d107      	bne.n	80068cc <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 80068bc:	4b15      	ldr	r3, [pc, #84]	; (8006914 <FMC_ClearFlag+0x68>)
 80068be:	4a15      	ldr	r2, [pc, #84]	; (8006914 <FMC_ClearFlag+0x68>)
 80068c0:	6851      	ldr	r1, [r2, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	43d2      	mvns	r2, r2
 80068c6:	400a      	ands	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	e01e      	b.n	800690a <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d2:	d107      	bne.n	80068e4 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <FMC_ClearFlag+0x6c>)
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <FMC_ClearFlag+0x6c>)
 80068d8:	6851      	ldr	r1, [r2, #4]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	43d2      	mvns	r2, r2
 80068de:	400a      	ands	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e012      	b.n	800690a <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d107      	bne.n	80068fc <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <FMC_ClearFlag+0x70>)
 80068ee:	4a0b      	ldr	r2, [pc, #44]	; (800691c <FMC_ClearFlag+0x70>)
 80068f0:	6851      	ldr	r1, [r2, #4]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	43d2      	mvns	r2, r2
 80068f6:	400a      	ands	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e006      	b.n	800690a <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80068fc:	4b08      	ldr	r3, [pc, #32]	; (8006920 <FMC_ClearFlag+0x74>)
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <FMC_ClearFlag+0x74>)
 8006900:	6951      	ldr	r1, [r2, #20]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	43d2      	mvns	r2, r2
 8006906:	400a      	ands	r2, r1
 8006908:	615a      	str	r2, [r3, #20]
  }
  
}
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	a0000060 	andge	r0, r0, r0, rrx
 8006918:	a0000080 	andge	r0, r0, r0, lsl #1
 800691c:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006920:	a0000140 	andge	r0, r0, r0, asr #2

08006924 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	; 0x24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d103      	bne.n	8006950 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 8006948:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <FMC_GetITStatus+0xa4>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e015      	b.n	800697c <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d103      	bne.n	8006960 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <FMC_GetITStatus+0xa8>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e00d      	b.n	800697c <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006966:	d103      	bne.n	8006970 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 8006968:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <FMC_GetITStatus+0xac>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e005      	b.n	800697c <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8006970:	4b18      	ldr	r3, [pc, #96]	; (80069d4 <FMC_GetITStatus+0xb0>)
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 8006976:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <FMC_GetITStatus+0xb0>)
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <FMC_GetITStatus+0x6c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d104      	bne.n	800699a <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e004      	b.n	80069a4 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	08da      	lsrs	r2, r3, #3
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <FMC_GetITStatus+0x92>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e001      	b.n	80069ba <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 80069b6:	2300      	movs	r3, #0
 80069b8:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 80069ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3724      	adds	r7, #36	; 0x24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	a0000060 	andge	r0, r0, r0, rrx
 80069cc:	a0000080 	andge	r0, r0, r0, lsl #1
 80069d0:	a00000a0 	andge	r0, r0, r0, lsr #1
 80069d4:	a0000140 	andge	r0, r0, r0, asr #2

080069d8 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b10      	cmp	r3, #16
 80069e6:	d108      	bne.n	80069fa <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 80069e8:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <FMC_ClearITPendingBit+0x6c>)
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <FMC_ClearITPendingBit+0x6c>)
 80069ec:	6851      	ldr	r1, [r2, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	08d2      	lsrs	r2, r2, #3
 80069f2:	43d2      	mvns	r2, r2
 80069f4:	400a      	ands	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
 80069f8:	e01f      	b.n	8006a3a <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a00:	d108      	bne.n	8006a14 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <FMC_ClearITPendingBit+0x70>)
 8006a04:	4a10      	ldr	r2, [pc, #64]	; (8006a48 <FMC_ClearITPendingBit+0x70>)
 8006a06:	6851      	ldr	r1, [r2, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	08d2      	lsrs	r2, r2, #3
 8006a0c:	43d2      	mvns	r2, r2
 8006a0e:	400a      	ands	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e012      	b.n	8006a3a <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1a:	d108      	bne.n	8006a2e <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <FMC_ClearITPendingBit+0x74>)
 8006a1e:	4a0b      	ldr	r2, [pc, #44]	; (8006a4c <FMC_ClearITPendingBit+0x74>)
 8006a20:	6851      	ldr	r1, [r2, #4]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	08d2      	lsrs	r2, r2, #3
 8006a26:	43d2      	mvns	r2, r2
 8006a28:	400a      	ands	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
 8006a2c:	e005      	b.n	8006a3a <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <FMC_ClearITPendingBit+0x78>)
 8006a30:	4a07      	ldr	r2, [pc, #28]	; (8006a50 <FMC_ClearITPendingBit+0x78>)
 8006a32:	6952      	ldr	r2, [r2, #20]
 8006a34:	f042 0201 	orr.w	r2, r2, #1
 8006a38:	615a      	str	r2, [r3, #20]
  }
}
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	a0000060 	andge	r0, r0, r0, rrx
 8006a48:	a0000080 	andge	r0, r0, r0, lsl #1
 8006a4c:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006a50:	a0000140 	andge	r0, r0, r0, asr #2

08006a54 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8006a58:	2040      	movs	r0, #64	; 0x40
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	f7fb fc10 	bl	8002280 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8006a60:	2040      	movs	r0, #64	; 0x40
 8006a62:	2100      	movs	r1, #0
 8006a64:	f7fb fc0c 	bl	8002280 <RCC_AHB2PeriphResetCmd>
}
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <RNG_Cmd+0x34>)
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <RNG_Cmd+0x34>)
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	f042 0204 	orr.w	r2, r2, #4
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e005      	b.n	8006a96 <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <RNG_Cmd+0x34>)
 8006a8c:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <RNG_Cmd+0x34>)
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	f022 0204 	bic.w	r2, r2, #4
 8006a94:	601a      	str	r2, [r3, #0]
  }
}
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	50060800 	andpl	r0, r6, r0, lsl #16

08006aa4 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <RNG_GetRandomNumber+0x14>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	50060800 	andpl	r0, r6, r0, lsl #16

08006abc <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8006acc:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <RNG_ITConfig+0x34>)
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <RNG_ITConfig+0x34>)
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e005      	b.n	8006ae6 <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <RNG_ITConfig+0x34>)
 8006adc:	4a04      	ldr	r2, [pc, #16]	; (8006af0 <RNG_ITConfig+0x34>)
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	f022 0208 	bic.w	r2, r2, #8
 8006ae4:	601a      	str	r2, [r3, #0]
  }
}
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	50060800 	andpl	r0, r6, r0, lsl #16

08006af4 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8006b02:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <RNG_GetFlagStatus+0x34>)
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
 8006b12:	e001      	b.n	8006b18 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	50060800 	andpl	r0, r6, r0, lsl #16

08006b2c <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <RNG_ClearFlag+0x20>)
 8006b38:	79fa      	ldrb	r2, [r7, #7]
 8006b3a:	0112      	lsls	r2, r2, #4
 8006b3c:	43d2      	mvns	r2, r2
 8006b3e:	605a      	str	r2, [r3, #4]
}
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	50060800 	andpl	r0, r6, r0, lsl #16

08006b50 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <RNG_GetITStatus+0x34>)
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
 8006b6e:	e001      	b.n	8006b74 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	50060800 	andpl	r0, r6, r0, lsl #16

08006b88 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <RNG_ClearITPendingBit+0x20>)
 8006b94:	79fa      	ldrb	r2, [r7, #7]
 8006b96:	43d2      	mvns	r2, r2
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	605a      	str	r2, [r3, #4]
}
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	50060800 	andpl	r0, r6, r0, lsl #16

08006bac <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8006bb6:	79fa      	ldrb	r2, [r7, #7]
 8006bb8:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <STM_EVAL_LEDInit+0x50>)
 8006bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	f7fb faa9 	bl	8002118 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <STM_EVAL_LEDInit+0x54>)
 8006bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <STM_EVAL_LEDInit+0x58>)
 8006be4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f7fa fd18 	bl	8001624 <GPIO_Init>
}
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	0800c824 	stmdaeq	r0, {r2, r5, fp, lr, pc}
 8006c00:	0800c820 	stmdaeq	r0, {r5, fp, lr, pc}
 8006c04:	20000024 	andcs	r0, r0, r4, lsr #32

08006c08 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8006c12:	79fa      	ldrb	r2, [r7, #7]
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <STM_EVAL_LEDOn+0x28>)
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	79f9      	ldrb	r1, [r7, #7]
 8006c1c:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <STM_EVAL_LEDOn+0x2c>)
 8006c1e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006c22:	831a      	strh	r2, [r3, #24]
}
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000024 	andcs	r0, r0, r4, lsr #32
 8006c34:	0800c820 	stmdaeq	r0, {r5, fp, lr, pc}

08006c38 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8006c42:	79fa      	ldrb	r2, [r7, #7]
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <STM_EVAL_LEDOff+0x28>)
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	79f9      	ldrb	r1, [r7, #7]
 8006c4c:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <STM_EVAL_LEDOff+0x2c>)
 8006c4e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006c52:	835a      	strh	r2, [r3, #26]
}
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000024 	andcs	r0, r0, r4, lsr #32
 8006c64:	0800c820 	stmdaeq	r0, {r5, fp, lr, pc}

08006c68 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8006c72:	79fa      	ldrb	r2, [r7, #7]
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <STM_EVAL_LEDToggle+0x34>)
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	79f9      	ldrb	r1, [r7, #7]
 8006c7c:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <STM_EVAL_LEDToggle+0x34>)
 8006c7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006c82:	6951      	ldr	r1, [r2, #20]
 8006c84:	79f8      	ldrb	r0, [r7, #7]
 8006c86:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <STM_EVAL_LEDToggle+0x38>)
 8006c88:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8006c8c:	404a      	eors	r2, r1
 8006c8e:	615a      	str	r2, [r3, #20]
}
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000024 	andcs	r0, r0, r4, lsr #32
 8006ca0:	0800c820 	stmdaeq	r0, {r5, fp, lr, pc}

08006ca4 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	71fa      	strb	r2, [r7, #7]
 8006cb0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	f7fb fa2e 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8006cbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	f7fb faa1 	bl	8002208 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8006cd2:	79fa      	ldrb	r2, [r7, #7]
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <STM_EVAL_PBInit+0x90>)
 8006cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f7fa fc9f 	bl	8001624 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8006ce6:	79bb      	ldrb	r3, [r7, #6]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d11f      	bne.n	8006d2c <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8006cec:	2200      	movs	r2, #0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f7fc f944 	bl	8002f80 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8006d00:	2308      	movs	r3, #8
 8006d02:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8006d08:	f107 0310 	add.w	r3, r7, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd fe91 	bl	8004a34 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8006d12:	2306      	movs	r3, #6
 8006d14:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8006d16:	230f      	movs	r3, #15
 8006d18:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8006d1a:	230f      	movs	r3, #15
 8006d1c:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8006d22:	f107 030c 	add.w	r3, r7, #12
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fa fb1a 	bl	8001360 <NVIC_Init>
  }
}
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	2000002c 	andcs	r0, r0, ip, lsr #32

08006d38 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006d42:	79fa      	ldrb	r2, [r7, #7]
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <STM_EVAL_PBGetState+0x28>)
 8006d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f7fa fd32 	bl	80017b8 <GPIO_ReadInputDataBit>
 8006d54:	4603      	mov	r3, r0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000002c 	andcs	r0, r0, ip, lsr #32

08006d64 <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 8006d6a:	4826      	ldr	r0, [pc, #152]	; (8006e04 <sEE_LowLevel_DeInit+0xa0>)
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f7fc fa97 	bl	80032a0 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 8006d72:	4824      	ldr	r0, [pc, #144]	; (8006e04 <sEE_LowLevel_DeInit+0xa0>)
 8006d74:	f7fc f97a 	bl	800306c <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 8006d78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f7fb fa25 	bl	80021cc <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8006d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d86:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8006d90:	463b      	mov	r3, r7
 8006d92:	481d      	ldr	r0, [pc, #116]	; (8006e08 <sEE_LowLevel_DeInit+0xa4>)
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7fa fc45 	bl	8001624 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8006d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d9e:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8006da0:	463b      	mov	r3, r7
 8006da2:	481a      	ldr	r0, [pc, #104]	; (8006e0c <sEE_LowLevel_DeInit+0xa8>)
 8006da4:	4619      	mov	r1, r3
 8006da6:	f7fa fc3d 	bl	8001624 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8006daa:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dac:	220f      	movs	r2, #15
 8006dae:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006db0:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006db6:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8006dbc:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006dc2:	4813      	ldr	r0, [pc, #76]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dc4:	f7fa facc 	bl	8001360 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dca:	220d      	movs	r2, #13
 8006dcc:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8006dda:	480d      	ldr	r0, [pc, #52]	; (8006e10 <sEE_LowLevel_DeInit+0xac>)
 8006ddc:	f7fa fac0 	bl	8001360 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8006de0:	480c      	ldr	r0, [pc, #48]	; (8006e14 <sEE_LowLevel_DeInit+0xb0>)
 8006de2:	2100      	movs	r1, #0
 8006de4:	f7fc ffa4 	bl	8003d30 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8006de8:	480b      	ldr	r0, [pc, #44]	; (8006e18 <sEE_LowLevel_DeInit+0xb4>)
 8006dea:	2100      	movs	r1, #0
 8006dec:	f7fc ffa0 	bl	8003d30 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8006df0:	4808      	ldr	r0, [pc, #32]	; (8006e14 <sEE_LowLevel_DeInit+0xb0>)
 8006df2:	f7fc fe3f 	bl	8003a74 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 8006df6:	4808      	ldr	r0, [pc, #32]	; (8006e18 <sEE_LowLevel_DeInit+0xb4>)
 8006df8:	f7fc fe3c 	bl	8003a74 <DMA_DeInit>
}
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40005c00 	andmi	r5, r0, r0, lsl #24
 8006e08:	40020000 	andmi	r0, r2, r0
 8006e0c:	40020800 	andmi	r0, r2, r0, lsl #16
 8006e10:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8006e14:	40026070 	andmi	r6, r2, r0, ror r0
 8006e18:	40026040 	andmi	r6, r2, r0, asr #32

08006e1c <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 8006e22:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e26:	2101      	movs	r1, #1
 8006e28:	f7fb f9d0 	bl	80021cc <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 8006e2c:	2005      	movs	r0, #5
 8006e2e:	2101      	movs	r1, #1
 8006e30:	f7fb f972 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8006e34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006e38:	2101      	movs	r1, #1
 8006e3a:	f7fb f9e5 	bl	8002208 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 8006e3e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e42:	2101      	movs	r1, #1
 8006e44:	f7fb fa58 	bl	80022f8 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 8006e48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f7fb fa53 	bl	80022f8 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8006e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e56:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8006e60:	2301      	movs	r3, #1
 8006e62:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8006e68:	463b      	mov	r3, r7
 8006e6a:	4849      	ldr	r0, [pc, #292]	; (8006f90 <sEE_LowLevel_Init+0x174>)
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7fa fbd9 	bl	8001624 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8006e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e76:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8006e78:	463b      	mov	r3, r7
 8006e7a:	4846      	ldr	r0, [pc, #280]	; (8006f94 <sEE_LowLevel_Init+0x178>)
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7fa fbd1 	bl	8001624 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 8006e82:	4843      	ldr	r0, [pc, #268]	; (8006f90 <sEE_LowLevel_Init+0x174>)
 8006e84:	2108      	movs	r1, #8
 8006e86:	2204      	movs	r2, #4
 8006e88:	f7fa fd3a 	bl	8001900 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8006e8c:	4841      	ldr	r0, [pc, #260]	; (8006f94 <sEE_LowLevel_Init+0x178>)
 8006e8e:	2109      	movs	r1, #9
 8006e90:	2204      	movs	r2, #4
 8006e92:	f7fa fd35 	bl	8001900 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8006e96:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006e98:	220f      	movs	r2, #15
 8006e9a:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006e9c:	4b3e      	ldr	r3, [pc, #248]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006ea2:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006ea8:	4b3b      	ldr	r3, [pc, #236]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006eae:	483a      	ldr	r0, [pc, #232]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006eb0:	f7fa fa56 	bl	8001360 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8006eb4:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006eb6:	220d      	movs	r2, #13
 8006eb8:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006eba:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 8006ec6:	4834      	ldr	r0, [pc, #208]	; (8006f98 <sEE_LowLevel_Init+0x17c>)
 8006ec8:	f7fa fa4a 	bl	8001360 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8006ecc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	f7fb f921 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 8006ed6:	4831      	ldr	r0, [pc, #196]	; (8006f9c <sEE_LowLevel_Init+0x180>)
 8006ed8:	4931      	ldr	r1, [pc, #196]	; (8006fa0 <sEE_LowLevel_Init+0x184>)
 8006eda:	f7fd f863 	bl	8003fa4 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8006ede:	482f      	ldr	r0, [pc, #188]	; (8006f9c <sEE_LowLevel_Init+0x180>)
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f7fc ff25 	bl	8003d30 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8006ee6:	482d      	ldr	r0, [pc, #180]	; (8006f9c <sEE_LowLevel_Init+0x180>)
 8006ee8:	f7fc fdc4 	bl	8003a74 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006eee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006ef2:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 8006ef4:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006ef6:	4a2c      	ldr	r2, [pc, #176]	; (8006fa8 <sEE_LowLevel_Init+0x18c>)
 8006ef8:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 8006efa:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f02:	2240      	movs	r2, #64	; 0x40
 8006f04:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 8006f06:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f0c:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006f0e:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8006f14:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f1a:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006f1c:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8006f22:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8006f28:	4b1e      	ldr	r3, [pc, #120]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8006f36:	4b1b      	ldr	r3, [pc, #108]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f38:	2204      	movs	r2, #4
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f3e:	2203      	movs	r2, #3
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 8006f4e:	4813      	ldr	r0, [pc, #76]	; (8006f9c <sEE_LowLevel_Init+0x180>)
 8006f50:	4914      	ldr	r1, [pc, #80]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f52:	f7fc fe61 	bl	8003c18 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 8006f56:	4815      	ldr	r0, [pc, #84]	; (8006fac <sEE_LowLevel_Init+0x190>)
 8006f58:	4915      	ldr	r1, [pc, #84]	; (8006fb0 <sEE_LowLevel_Init+0x194>)
 8006f5a:	f7fd f823 	bl	8003fa4 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8006f5e:	4813      	ldr	r0, [pc, #76]	; (8006fac <sEE_LowLevel_Init+0x190>)
 8006f60:	2100      	movs	r1, #0
 8006f62:	f7fc fee5 	bl	8003d30 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 8006f66:	4811      	ldr	r0, [pc, #68]	; (8006fac <sEE_LowLevel_Init+0x190>)
 8006f68:	f7fc fd84 	bl	8003a74 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 8006f6c:	480f      	ldr	r0, [pc, #60]	; (8006fac <sEE_LowLevel_Init+0x190>)
 8006f6e:	490d      	ldr	r1, [pc, #52]	; (8006fa4 <sEE_LowLevel_Init+0x188>)
 8006f70:	f7fc fe52 	bl	8003c18 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 8006f74:	4809      	ldr	r0, [pc, #36]	; (8006f9c <sEE_LowLevel_Init+0x180>)
 8006f76:	2110      	movs	r1, #16
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f7fd f841 	bl	8004000 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 8006f7e:	480b      	ldr	r0, [pc, #44]	; (8006fac <sEE_LowLevel_Init+0x190>)
 8006f80:	2110      	movs	r1, #16
 8006f82:	2201      	movs	r2, #1
 8006f84:	f7fd f83c 	bl	8004000 <DMA_ITConfig>
}
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40020000 	andmi	r0, r2, r0
 8006f94:	40020800 	andmi	r0, r2, r0, lsl #16
 8006f98:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8006f9c:	40026070 	andmi	r6, r2, r0, ror r0
 8006fa0:	2000003d 	andcs	r0, r0, sp, lsr r0
 8006fa4:	20000494 	mulcs	r0, r4, r4
 8006fa8:	40005c10 	andmi	r5, r0, r0, lsl ip
 8006fac:	40026040 	andmi	r6, r2, r0, asr #32
 8006fb0:	103d0000 	eorsne	r0, sp, r0

08006fb4 <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10d      	bne.n	8006fe2 <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fce:	2240      	movs	r2, #64	; 0x40
 8006fd0:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 8006fd8:	480b      	ldr	r0, [pc, #44]	; (8007008 <sEE_LowLevel_DMAConfig+0x54>)
 8006fda:	490a      	ldr	r1, [pc, #40]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fdc:	f7fc fe1c 	bl	8003c18 <DMA_Init>
 8006fe0:	e00c      	b.n	8006ffc <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <sEE_LowLevel_DMAConfig+0x58>)
 8006ff6:	4903      	ldr	r1, [pc, #12]	; (8007004 <sEE_LowLevel_DMAConfig+0x50>)
 8006ff8:	f7fc fe0e 	bl	8003c18 <DMA_Init>
  }
}
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000494 	mulcs	r0, r4, r4
 8007008:	40026070 	andmi	r6, r2, r0, ror r0
 800700c:	40026040 	andmi	r6, r2, r0, asr #32

08007010 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b092      	sub	sp, #72	; 0x48
 8007014:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 8007016:	f000 f835 	bl	8007084 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 800701a:	2001      	movs	r0, #1
 800701c:	2101      	movs	r1, #1
 800701e:	f7fb f8b7 	bl	8002190 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 8007022:	2302      	movs	r3, #2
 8007024:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 8007026:	2307      	movs	r3, #7
 8007028:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 800702a:	2304      	movs	r3, #4
 800702c:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 800702e:	2307      	movs	r3, #7
 8007030:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 8007032:	2302      	movs	r3, #2
 8007034:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 8007036:	2302      	movs	r3, #2
 8007038:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 800703a:	2302      	movs	r3, #2
 800703c:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 800703e:	2301      	movs	r3, #1
 8007040:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8007042:	2300      	movs	r3, #0
 8007044:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 8007046:	2304      	movs	r3, #4
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800704a:	2310      	movs	r3, #16
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 8007052:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8007058:	2300      	movs	r3, #0
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 800705c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007060:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 8007066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800706a:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 800706c:	463b      	mov	r3, r7
 800706e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8007070:	f107 031c 	add.w	r3, r7, #28
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff f9f9 	bl	800646c <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 800707a:	f000 f90d 	bl	8007298 <SDRAM_InitSequence>
  
}
 800707e:	3748      	adds	r7, #72	; 0x48
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 800708a:	207e      	movs	r0, #126	; 0x7e
 800708c:	2101      	movs	r1, #1
 800708e:	f7fb f843 	bl	8002118 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8007092:	2302      	movs	r3, #2
 8007094:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007096:	2302      	movs	r3, #2
 8007098:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800709a:	2300      	movs	r3, #0
 800709c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 80070a2:	4877      	ldr	r0, [pc, #476]	; (8007280 <SDRAM_GPIOConfig+0x1fc>)
 80070a4:	2105      	movs	r1, #5
 80070a6:	220c      	movs	r2, #12
 80070a8:	f7fa fc2a 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 80070ac:	4874      	ldr	r0, [pc, #464]	; (8007280 <SDRAM_GPIOConfig+0x1fc>)
 80070ae:	2106      	movs	r1, #6
 80070b0:	220c      	movs	r2, #12
 80070b2:	f7fa fc25 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 80070b6:	2360      	movs	r3, #96	; 0x60
 80070b8:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80070ba:	463b      	mov	r3, r7
 80070bc:	4870      	ldr	r0, [pc, #448]	; (8007280 <SDRAM_GPIOConfig+0x1fc>)
 80070be:	4619      	mov	r1, r3
 80070c0:	f7fa fab0 	bl	8001624 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 80070c4:	486f      	ldr	r0, [pc, #444]	; (8007284 <SDRAM_GPIOConfig+0x200>)
 80070c6:	2100      	movs	r1, #0
 80070c8:	220c      	movs	r2, #12
 80070ca:	f7fa fc19 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 80070ce:	2301      	movs	r3, #1
 80070d0:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80070d2:	463b      	mov	r3, r7
 80070d4:	486b      	ldr	r0, [pc, #428]	; (8007284 <SDRAM_GPIOConfig+0x200>)
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7fa faa4 	bl	8001624 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 80070dc:	486a      	ldr	r0, [pc, #424]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 80070de:	2100      	movs	r1, #0
 80070e0:	220c      	movs	r2, #12
 80070e2:	f7fa fc0d 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 80070e6:	4868      	ldr	r0, [pc, #416]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 80070e8:	2101      	movs	r1, #1
 80070ea:	220c      	movs	r2, #12
 80070ec:	f7fa fc08 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80070f0:	4865      	ldr	r0, [pc, #404]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 80070f2:	2108      	movs	r1, #8
 80070f4:	220c      	movs	r2, #12
 80070f6:	f7fa fc03 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 80070fa:	4863      	ldr	r0, [pc, #396]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 80070fc:	2109      	movs	r1, #9
 80070fe:	220c      	movs	r2, #12
 8007100:	f7fa fbfe 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8007104:	4860      	ldr	r0, [pc, #384]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 8007106:	210a      	movs	r1, #10
 8007108:	220c      	movs	r2, #12
 800710a:	f7fa fbf9 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 800710e:	485e      	ldr	r0, [pc, #376]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 8007110:	210e      	movs	r1, #14
 8007112:	220c      	movs	r2, #12
 8007114:	f7fa fbf4 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8007118:	485b      	ldr	r0, [pc, #364]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 800711a:	210f      	movs	r1, #15
 800711c:	220c      	movs	r2, #12
 800711e:	f7fa fbef 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8007122:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007126:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007128:	463b      	mov	r3, r7
 800712a:	4857      	ldr	r0, [pc, #348]	; (8007288 <SDRAM_GPIOConfig+0x204>)
 800712c:	4619      	mov	r1, r3
 800712e:	f7fa fa79 	bl	8001624 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8007132:	4856      	ldr	r0, [pc, #344]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007134:	2100      	movs	r1, #0
 8007136:	220c      	movs	r2, #12
 8007138:	f7fa fbe2 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 800713c:	4853      	ldr	r0, [pc, #332]	; (800728c <SDRAM_GPIOConfig+0x208>)
 800713e:	2101      	movs	r1, #1
 8007140:	220c      	movs	r2, #12
 8007142:	f7fa fbdd 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8007146:	4851      	ldr	r0, [pc, #324]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007148:	2107      	movs	r1, #7
 800714a:	220c      	movs	r2, #12
 800714c:	f7fa fbd8 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8007150:	484e      	ldr	r0, [pc, #312]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007152:	2108      	movs	r1, #8
 8007154:	220c      	movs	r2, #12
 8007156:	f7fa fbd3 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 800715a:	484c      	ldr	r0, [pc, #304]	; (800728c <SDRAM_GPIOConfig+0x208>)
 800715c:	2109      	movs	r1, #9
 800715e:	220c      	movs	r2, #12
 8007160:	f7fa fbce 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8007164:	4849      	ldr	r0, [pc, #292]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007166:	210a      	movs	r1, #10
 8007168:	220c      	movs	r2, #12
 800716a:	f7fa fbc9 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 800716e:	4847      	ldr	r0, [pc, #284]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007170:	210b      	movs	r1, #11
 8007172:	220c      	movs	r2, #12
 8007174:	f7fa fbc4 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8007178:	4844      	ldr	r0, [pc, #272]	; (800728c <SDRAM_GPIOConfig+0x208>)
 800717a:	210c      	movs	r1, #12
 800717c:	220c      	movs	r2, #12
 800717e:	f7fa fbbf 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8007182:	4842      	ldr	r0, [pc, #264]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007184:	210d      	movs	r1, #13
 8007186:	220c      	movs	r2, #12
 8007188:	f7fa fbba 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 800718c:	483f      	ldr	r0, [pc, #252]	; (800728c <SDRAM_GPIOConfig+0x208>)
 800718e:	210e      	movs	r1, #14
 8007190:	220c      	movs	r2, #12
 8007192:	f7fa fbb5 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8007196:	483d      	ldr	r0, [pc, #244]	; (800728c <SDRAM_GPIOConfig+0x208>)
 8007198:	210f      	movs	r1, #15
 800719a:	220c      	movs	r2, #12
 800719c:	f7fa fbb0 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 80071a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80071a4:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80071a6:	463b      	mov	r3, r7
 80071a8:	4838      	ldr	r0, [pc, #224]	; (800728c <SDRAM_GPIOConfig+0x208>)
 80071aa:	4619      	mov	r1, r3
 80071ac:	f7fa fa3a 	bl	8001624 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 80071b0:	4837      	ldr	r0, [pc, #220]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071b2:	2100      	movs	r1, #0
 80071b4:	220c      	movs	r2, #12
 80071b6:	f7fa fba3 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 80071ba:	4835      	ldr	r0, [pc, #212]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071bc:	2101      	movs	r1, #1
 80071be:	220c      	movs	r2, #12
 80071c0:	f7fa fb9e 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 80071c4:	4832      	ldr	r0, [pc, #200]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071c6:	2102      	movs	r1, #2
 80071c8:	220c      	movs	r2, #12
 80071ca:	f7fa fb99 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 80071ce:	4830      	ldr	r0, [pc, #192]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071d0:	2103      	movs	r1, #3
 80071d2:	220c      	movs	r2, #12
 80071d4:	f7fa fb94 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 80071d8:	482d      	ldr	r0, [pc, #180]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071da:	2104      	movs	r1, #4
 80071dc:	220c      	movs	r2, #12
 80071de:	f7fa fb8f 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 80071e2:	482b      	ldr	r0, [pc, #172]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071e4:	2105      	movs	r1, #5
 80071e6:	220c      	movs	r2, #12
 80071e8:	f7fa fb8a 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 80071ec:	4828      	ldr	r0, [pc, #160]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071ee:	210b      	movs	r1, #11
 80071f0:	220c      	movs	r2, #12
 80071f2:	f7fa fb85 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 80071f6:	4826      	ldr	r0, [pc, #152]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 80071f8:	210c      	movs	r1, #12
 80071fa:	220c      	movs	r2, #12
 80071fc:	f7fa fb80 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8007200:	4823      	ldr	r0, [pc, #140]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 8007202:	210d      	movs	r1, #13
 8007204:	220c      	movs	r2, #12
 8007206:	f7fa fb7b 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 800720a:	4821      	ldr	r0, [pc, #132]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 800720c:	210e      	movs	r1, #14
 800720e:	220c      	movs	r2, #12
 8007210:	f7fa fb76 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8007214:	481e      	ldr	r0, [pc, #120]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 8007216:	210f      	movs	r1, #15
 8007218:	220c      	movs	r2, #12
 800721a:	f7fa fb71 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 800721e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007222:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8007224:	463b      	mov	r3, r7
 8007226:	481a      	ldr	r0, [pc, #104]	; (8007290 <SDRAM_GPIOConfig+0x20c>)
 8007228:	4619      	mov	r1, r3
 800722a:	f7fa f9fb 	bl	8001624 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 800722e:	4819      	ldr	r0, [pc, #100]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 8007230:	2100      	movs	r1, #0
 8007232:	220c      	movs	r2, #12
 8007234:	f7fa fb64 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8007238:	4816      	ldr	r0, [pc, #88]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 800723a:	2101      	movs	r1, #1
 800723c:	220c      	movs	r2, #12
 800723e:	f7fa fb5f 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8007242:	4814      	ldr	r0, [pc, #80]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 8007244:	2104      	movs	r1, #4
 8007246:	220c      	movs	r2, #12
 8007248:	f7fa fb5a 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 800724c:	4811      	ldr	r0, [pc, #68]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 800724e:	2105      	movs	r1, #5
 8007250:	220c      	movs	r2, #12
 8007252:	f7fa fb55 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8007256:	480f      	ldr	r0, [pc, #60]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 8007258:	2108      	movs	r1, #8
 800725a:	220c      	movs	r2, #12
 800725c:	f7fa fb50 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8007260:	480c      	ldr	r0, [pc, #48]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 8007262:	210f      	movs	r1, #15
 8007264:	220c      	movs	r2, #12
 8007266:	f7fa fb4b 	bl	8001900 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 800726a:	f248 1333 	movw	r3, #33075	; 0x8133
 800726e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8007270:	463b      	mov	r3, r7
 8007272:	4808      	ldr	r0, [pc, #32]	; (8007294 <SDRAM_GPIOConfig+0x210>)
 8007274:	4619      	mov	r1, r3
 8007276:	f7fa f9d5 	bl	8001624 <GPIO_Init>
}
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40020400 	andmi	r0, r2, r0, lsl #8
 8007284:	40020800 	andmi	r0, r2, r0, lsl #16
 8007288:	40020c00 	andmi	r0, r2, r0, lsl #24
 800728c:	40021000 	andmi	r1, r2, r0
 8007290:	40021400 	andmi	r1, r2, r0, lsl #8
 8007294:	40021800 	andmi	r1, r2, r0, lsl #16

08007298 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80072a2:	2301      	movs	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80072a6:	2308      	movs	r3, #8
 80072a8:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80072b2:	bf00      	nop
 80072b4:	2001      	movs	r0, #1
 80072b6:	2120      	movs	r1, #32
 80072b8:	f7ff faba 	bl	8006830 <FMC_GetFlagStatus>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f8      	bne.n	80072b4 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff f9c3 	bl	8006650 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 80072ca:	200a      	movs	r0, #10
 80072cc:	f000 f8aa 	bl	8007424 <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 80072d0:	2302      	movs	r3, #2
 80072d2:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80072d4:	2308      	movs	r3, #8
 80072d6:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80072d8:	2301      	movs	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80072e0:	bf00      	nop
 80072e2:	2001      	movs	r0, #1
 80072e4:	2120      	movs	r1, #32
 80072e6:	f7ff faa3 	bl	8006830 <FMC_GetFlagStatus>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f8      	bne.n	80072e2 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff f9ac 	bl	8006650 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 80072f8:	2303      	movs	r3, #3
 80072fa:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80072fc:	2308      	movs	r3, #8
 80072fe:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8007300:	2304      	movs	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007308:	bf00      	nop
 800730a:	2001      	movs	r0, #1
 800730c:	2120      	movs	r1, #32
 800730e:	f7ff fa8f 	bl	8006830 <FMC_GetFlagStatus>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f8      	bne.n	800730a <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8007318:	1d3b      	adds	r3, r7, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff f998 	bl	8006650 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007320:	bf00      	nop
 8007322:	2001      	movs	r0, #1
 8007324:	2120      	movs	r1, #32
 8007326:	f7ff fa83 	bl	8006830 <FMC_GetFlagStatus>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f8      	bne.n	8007322 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff f98c 	bl	8006650 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8007338:	f240 2331 	movw	r3, #561	; 0x231
 800733c:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 800733e:	2304      	movs	r3, #4
 8007340:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8007342:	2308      	movs	r3, #8
 8007344:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8007346:	2301      	movs	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800734e:	bf00      	nop
 8007350:	2001      	movs	r0, #1
 8007352:	2120      	movs	r1, #32
 8007354:	f7ff fa6c 	bl	8006830 <FMC_GetFlagStatus>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f8      	bne.n	8007350 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff f975 	bl	8006650 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8007366:	f240 506a 	movw	r0, #1386	; 0x56a
 800736a:	f7ff f9af 	bl	80066cc <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800736e:	bf00      	nop
 8007370:	2001      	movs	r0, #1
 8007372:	2120      	movs	r1, #32
 8007374:	f7ff fa5c 	bl	8006830 <FMC_GetFlagStatus>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f8      	bne.n	8007370 <SDRAM_InitSequence+0xd8>
  {
  }
}
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8007394:	2001      	movs	r0, #1
 8007396:	2100      	movs	r1, #0
 8007398:	f7ff f9bc 	bl	8006714 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800739c:	bf00      	nop
 800739e:	2001      	movs	r0, #1
 80073a0:	2120      	movs	r1, #32
 80073a2:	f7ff fa45 	bl	8006830 <FMC_GetFlagStatus>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f8      	bne.n	800739e <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 80073ac:	e00e      	b.n	80073cc <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80073b4:	461a      	mov	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1d19      	adds	r1, r3, #4
 80073ba:	60f9      	str	r1, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	3304      	adds	r3, #4
 80073c4:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1ed      	bne.n	80073ae <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80073e8:	bf00      	nop
 80073ea:	2001      	movs	r0, #1
 80073ec:	2120      	movs	r1, #32
 80073ee:	f7ff fa1f 	bl	8006830 <FMC_GetFlagStatus>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f8      	bne.n	80073ea <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 80073f8:	e00d      	b.n	8007416 <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1d1a      	adds	r2, r3, #4
 80073fe:	60fa      	str	r2, [r7, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	3304      	adds	r3, #4
 800740e:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3b01      	subs	r3, #1
 8007414:	607b      	str	r3, [r7, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1ee      	bne.n	80073fa <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a08      	ldr	r2, [pc, #32]	; (8007454 <delay+0x30>)
 8007434:	fb02 f303 	mul.w	r3, r2, r3
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e002      	b.n	8007442 <delay+0x1e>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b01      	subs	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f9      	bne.n	800743c <delay+0x18>
  {
  }
}
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	000186a0 	andeq	r8, r1, r0, lsr #13

08007458 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	2300      	movs	r3, #0
 8007466:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 8007468:	f000 f984 	bl	8007774 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	4313      	orrs	r3, r2
 8007476:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800747c:	4313      	orrs	r3, r2
 800747e:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8007484:	4313      	orrs	r3, r2
 8007486:	b2da      	uxtb	r2, r3
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	4313      	orrs	r3, r2
 800748c:	b2db      	uxtb	r3, r3
 800748e:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	791a      	ldrb	r2, [r3, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	795b      	ldrb	r3, [r3, #5]
 8007498:	4313      	orrs	r3, r2
 800749a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 80074ac:	f107 030f 	add.w	r3, r7, #15
 80074b0:	4618      	mov	r0, r3
 80074b2:	2120      	movs	r1, #32
 80074b4:	2201      	movs	r2, #1
 80074b6:	f000 f8f7 	bl	80076a8 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 80074ba:	f107 030e 	add.w	r3, r7, #14
 80074be:	4618      	mov	r0, r3
 80074c0:	2123      	movs	r1, #35	; 0x23
 80074c2:	2201      	movs	r2, #1
 80074c4:	f000 f8f0 	bl	80076a8 <L3GD20_Write>
}
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80074d6:	1dfb      	adds	r3, r7, #7
 80074d8:	4618      	mov	r0, r3
 80074da:	2124      	movs	r1, #36	; 0x24
 80074dc:	2201      	movs	r2, #1
 80074de:	f000 f913 	bl	8007708 <L3GD20_Read>
  
  /* Enable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80074ec:	1dfb      	adds	r3, r7, #7
 80074ee:	4618      	mov	r0, r3
 80074f0:	2124      	movs	r1, #36	; 0x24
 80074f2:	2201      	movs	r2, #1
 80074f4:	f000 f8d8 	bl	80076a8 <L3GD20_Write>
}
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop

08007500 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8007510:	f107 030f 	add.w	r3, r7, #15
 8007514:	4618      	mov	r0, r3
 8007516:	2130      	movs	r1, #48	; 0x30
 8007518:	2201      	movs	r2, #1
 800751a:	f000 f8f5 	bl	8007708 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800751e:	f107 030e 	add.w	r3, r7, #14
 8007522:	4618      	mov	r0, r3
 8007524:	2122      	movs	r1, #34	; 0x22
 8007526:	2201      	movs	r2, #1
 8007528:	f000 f8ee 	bl	8007708 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007532:	b2db      	uxtb	r3, r3
 8007534:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	f023 0320 	bic.w	r3, r3, #32
 800753c:	b2db      	uxtb	r3, r3
 800753e:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8007548:	4313      	orrs	r3, r2
 800754a:	b2da      	uxtb	r2, r3
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	4313      	orrs	r3, r2
 8007550:	b2db      	uxtb	r3, r3
 8007552:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	789a      	ldrb	r2, [r3, #2]
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	4313      	orrs	r3, r2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8007560:	f107 030f 	add.w	r3, r7, #15
 8007564:	4618      	mov	r0, r3
 8007566:	2130      	movs	r1, #48	; 0x30
 8007568:	2201      	movs	r2, #1
 800756a:	f000 f89d 	bl	80076a8 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800756e:	f107 030e 	add.w	r3, r7, #14
 8007572:	4618      	mov	r0, r3
 8007574:	2122      	movs	r1, #34	; 0x22
 8007576:	2201      	movs	r2, #1
 8007578:	f000 f896 	bl	80076a8 <L3GD20_Write>
}
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop

08007584 <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800758e:	f107 030f 	add.w	r3, r7, #15
 8007592:	4618      	mov	r0, r3
 8007594:	2122      	movs	r1, #34	; 0x22
 8007596:	2201      	movs	r2, #1
 8007598:	f000 f8b6 	bl	8007708 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80075b0:	f107 030f 	add.w	r3, r7, #15
 80075b4:	4618      	mov	r0, r3
 80075b6:	2122      	movs	r1, #34	; 0x22
 80075b8:	2201      	movs	r2, #1
 80075ba:	f000 f875 	bl	80076a8 <L3GD20_Write>
}
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80075ce:	f107 030f 	add.w	r3, r7, #15
 80075d2:	4618      	mov	r0, r3
 80075d4:	2122      	movs	r1, #34	; 0x22
 80075d6:	2201      	movs	r2, #1
 80075d8:	f000 f896 	bl	8007708 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	f023 0308 	bic.w	r3, r3, #8
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80075f0:	f107 030f 	add.w	r3, r7, #15
 80075f4:	4618      	mov	r0, r3
 80075f6:	2122      	movs	r1, #34	; 0x22
 80075f8:	2201      	movs	r2, #1
 80075fa:	f000 f855 	bl	80076a8 <L3GD20_Write>
}
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800760c:	f107 030f 	add.w	r3, r7, #15
 8007610:	4618      	mov	r0, r3
 8007612:	2121      	movs	r1, #33	; 0x21
 8007614:	2201      	movs	r2, #1
 8007616:	f000 f877 	bl	8007708 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007620:	b2db      	uxtb	r3, r3
 8007622:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800762c:	4313      	orrs	r3, r2
 800762e:	b2da      	uxtb	r2, r3
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4313      	orrs	r3, r2
 8007634:	b2db      	uxtb	r3, r3
 8007636:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8007638:	f107 030f 	add.w	r3, r7, #15
 800763c:	4618      	mov	r0, r3
 800763e:	2121      	movs	r1, #33	; 0x21
 8007640:	2201      	movs	r2, #1
 8007642:	f000 f831 	bl	80076a8 <L3GD20_Write>
}
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8007656:	f107 030f 	add.w	r3, r7, #15
 800765a:	4618      	mov	r0, r3
 800765c:	2124      	movs	r1, #36	; 0x24
 800765e:	2201      	movs	r2, #1
 8007660:	f000 f852 	bl	8007708 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	b2db      	uxtb	r3, r3
 800766c:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800766e:	7bfa      	ldrb	r2, [r7, #15]
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	4313      	orrs	r3, r2
 8007674:	b2db      	uxtb	r3, r3
 8007676:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8007678:	f107 030f 	add.w	r3, r7, #15
 800767c:	4618      	mov	r0, r3
 800767e:	2124      	movs	r1, #36	; 0x24
 8007680:	2201      	movs	r2, #1
 8007682:	f000 f811 	bl	80076a8 <L3GD20_Write>
}
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval L3GD20 status
  */
uint8_t L3GD20_GetDataStatus(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 8007692:	1dfb      	adds	r3, r7, #7
 8007694:	4618      	mov	r0, r3
 8007696:	2127      	movs	r1, #39	; 0x27
 8007698:	2201      	movs	r2, #1
 800769a:	f000 f835 	bl	8007708 <L3GD20_Read>
                  
  return tmpreg;
 800769e:	79fb      	ldrb	r3, [r7, #7]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	460a      	mov	r2, r1
 80076b4:	70fa      	strb	r2, [r7, #3]
 80076b6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80076b8:	883b      	ldrh	r3, [r7, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d903      	bls.n	80076c6 <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 80076c6:	480f      	ldr	r0, [pc, #60]	; (8007704 <L3GD20_Write+0x5c>)
 80076c8:	2102      	movs	r1, #2
 80076ca:	f7fa f8d3 	bl	8001874 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f8eb 	bl	80078ac <L3GD20_SendByte>

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80076d6:	e00a      	b.n	80076ee <L3GD20_Write+0x46>
  {
    L3GD20_SendByte(*pBuffer);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f8e5 	bl	80078ac <L3GD20_SendByte>
    NumByteToWrite--;
 80076e2:	883b      	ldrh	r3, [r7, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3301      	adds	r3, #1
 80076ec:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80076ee:	883b      	ldrh	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1f1      	bne.n	80076d8 <L3GD20_Write+0x30>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80076f4:	4803      	ldr	r0, [pc, #12]	; (8007704 <L3GD20_Write+0x5c>)
 80076f6:	2102      	movs	r1, #2
 80076f8:	f7fa f8ae 	bl	8001858 <GPIO_SetBits>
}
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40020800 	andmi	r0, r2, r0, lsl #16

08007708 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	460a      	mov	r2, r1
 8007714:	70fa      	strb	r2, [r7, #3]
 8007716:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8007718:	883b      	ldrh	r3, [r7, #0]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d904      	bls.n	8007728 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007724:	70fb      	strb	r3, [r7, #3]
 8007726:	e003      	b.n	8007730 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800772e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 8007730:	480f      	ldr	r0, [pc, #60]	; (8007770 <L3GD20_Read+0x68>)
 8007732:	2102      	movs	r1, #2
 8007734:	f7fa f89e 	bl	8001874 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f8b6 	bl	80078ac <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8007740:	e00c      	b.n	800775c <L3GD20_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 8007742:	2000      	movs	r0, #0
 8007744:	f000 f8b2 	bl	80078ac <L3GD20_SendByte>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8007750:	883b      	ldrh	r3, [r7, #0]
 8007752:	3b01      	subs	r3, #1
 8007754:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3301      	adds	r3, #1
 800775a:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800775c:	883b      	ldrh	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1ef      	bne.n	8007742 <L3GD20_Read+0x3a>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 8007762:	4803      	ldr	r0, [pc, #12]	; (8007770 <L3GD20_Read+0x68>)
 8007764:	2102      	movs	r1, #2
 8007766:	f7fa f877 	bl	8001858 <GPIO_SetBits>
}  
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40020800 	andmi	r0, r2, r0, lsl #16

08007774 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 800777a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800777e:	2101      	movs	r1, #1
 8007780:	f7fa fd42 	bl	8002208 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 8007784:	2020      	movs	r0, #32
 8007786:	2101      	movs	r1, #1
 8007788:	f7fa fcc6 	bl	8002118 <RCC_AHB1PeriphClockCmd>

  /* Enable CS GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 800778c:	2004      	movs	r0, #4
 800778e:	2101      	movs	r1, #1
 8007790:	f7fa fcc2 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 8007794:	2001      	movs	r0, #1
 8007796:	2101      	movs	r1, #1
 8007798:	f7fa fcbe 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 800779c:	2001      	movs	r0, #1
 800779e:	2101      	movs	r1, #1
 80077a0:	f7fa fcba 	bl	8002118 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 80077a4:	483d      	ldr	r0, [pc, #244]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 80077a6:	2107      	movs	r1, #7
 80077a8:	2205      	movs	r2, #5
 80077aa:	f7fa f8a9 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80077ae:	483b      	ldr	r0, [pc, #236]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 80077b0:	2108      	movs	r1, #8
 80077b2:	2205      	movs	r2, #5
 80077b4:	f7fa f8a4 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 80077b8:	4838      	ldr	r0, [pc, #224]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 80077ba:	2109      	movs	r1, #9
 80077bc:	2205      	movs	r2, #5
 80077be:	f7fa f89f 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80077c2:	2302      	movs	r3, #2
 80077c4:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80077c6:	2300      	movs	r3, #0
 80077c8:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80077ca:	2302      	movs	r3, #2
 80077cc:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80077ce:	2301      	movs	r3, #1
 80077d0:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	4830      	ldr	r0, [pc, #192]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 80077dc:	4619      	mov	r1, r3
 80077de:	f7f9 ff21 	bl	8001624 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 80077e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e6:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80077e8:	f107 0318 	add.w	r3, r7, #24
 80077ec:	482b      	ldr	r0, [pc, #172]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 80077ee:	4619      	mov	r1, r3
 80077f0:	f7f9 ff18 	bl	8001624 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 80077f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f8:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80077fa:	f107 0318 	add.w	r3, r7, #24
 80077fe:	4827      	ldr	r0, [pc, #156]	; (800789c <L3GD20_LowLevel_Init+0x128>)
 8007800:	4619      	mov	r1, r3
 8007802:	f7f9 ff0f 	bl	8001624 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 8007806:	4826      	ldr	r0, [pc, #152]	; (80078a0 <L3GD20_LowLevel_Init+0x12c>)
 8007808:	f7fc fcba 	bl	8004180 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800780c:	2300      	movs	r3, #0
 800780e:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8007810:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007814:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8007816:	2300      	movs	r3, #0
 8007818:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800781a:	2300      	movs	r3, #0
 800781c:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800781e:	2300      	movs	r3, #0
 8007820:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	81fb      	strh	r3, [r7, #14]
     to verify these constraints:
        - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
        - l3gd20 SPI interface max baudrate is 10MHz for write/read
        - PCLK2 frequency is set to 90 MHz 
    */
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8007828:	2318      	movs	r3, #24
 800782a:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800782c:	2300      	movs	r3, #0
 800782e:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8007830:	2307      	movs	r3, #7
 8007832:	82bb      	strh	r3, [r7, #20]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	481a      	ldr	r0, [pc, #104]	; (80078a0 <L3GD20_LowLevel_Init+0x12c>)
 8007838:	4619      	mov	r1, r3
 800783a:	f7fc fd0d 	bl	8004258 <SPI_Init>

  /* Enable L3GD20_SPI  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 800783e:	4818      	ldr	r0, [pc, #96]	; (80078a0 <L3GD20_LowLevel_Init+0x12c>)
 8007840:	2101      	movs	r1, #1
 8007842:	f7fc fe65 	bl	8004510 <SPI_Cmd>
  
  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 8007846:	2302      	movs	r3, #2
 8007848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800784a:	2301      	movs	r3, #1
 800784c:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800784e:	2300      	movs	r3, #0
 8007850:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8007852:	2301      	movs	r3, #1
 8007854:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007856:	2300      	movs	r3, #0
 8007858:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 800785a:	f107 0318 	add.w	r3, r7, #24
 800785e:	4811      	ldr	r0, [pc, #68]	; (80078a4 <L3GD20_LowLevel_Init+0x130>)
 8007860:	4619      	mov	r1, r3
 8007862:	f7f9 fedf 	bl	8001624 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 8007866:	480f      	ldr	r0, [pc, #60]	; (80078a4 <L3GD20_LowLevel_Init+0x130>)
 8007868:	2102      	movs	r1, #2
 800786a:	f7f9 fff5 	bl	8001858 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 800786e:	2302      	movs	r3, #2
 8007870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8007872:	2300      	movs	r3, #0
 8007874:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007876:	2300      	movs	r3, #0
 8007878:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 800787a:	f107 0318 	add.w	r3, r7, #24
 800787e:	480a      	ldr	r0, [pc, #40]	; (80078a8 <L3GD20_LowLevel_Init+0x134>)
 8007880:	4619      	mov	r1, r3
 8007882:	f7f9 fecf 	bl	8001624 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 8007886:	2304      	movs	r3, #4
 8007888:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 800788a:	f107 0318 	add.w	r3, r7, #24
 800788e:	4806      	ldr	r0, [pc, #24]	; (80078a8 <L3GD20_LowLevel_Init+0x134>)
 8007890:	4619      	mov	r1, r3
 8007892:	f7f9 fec7 	bl	8001624 <GPIO_Init>
}  
 8007896:	3720      	adds	r7, #32
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40021400 	andmi	r1, r2, r0, lsl #8
 80078a0:	40015000 	andmi	r5, r1, r0
 80078a4:	40020800 	andmi	r0, r2, r0, lsl #16
 80078a8:	40020000 	andmi	r0, r2, r0

080078ac <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80078b6:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <L3GD20_SendByte+0x88>)
 80078b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078bc:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80078be:	e00b      	b.n	80078d8 <L3GD20_SendByte+0x2c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <L3GD20_SendByte+0x88>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	1e59      	subs	r1, r3, #1
 80078c6:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <L3GD20_SendByte+0x88>)
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <L3GD20_SendByte+0x2c>
 80078ce:	f000 f835 	bl	800793c <L3GD20_TIMEOUT_UserCallback>
 80078d2:	4603      	mov	r3, r0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e029      	b.n	800792c <L3GD20_SendByte+0x80>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80078d8:	4817      	ldr	r0, [pc, #92]	; (8007938 <L3GD20_SendByte+0x8c>)
 80078da:	2102      	movs	r1, #2
 80078dc:	f7fd f80e 	bl	80048fc <SPI_I2S_GetFlagStatus>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ec      	beq.n	80078c0 <L3GD20_SendByte+0x14>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4813      	ldr	r0, [pc, #76]	; (8007938 <L3GD20_SendByte+0x8c>)
 80078ec:	4619      	mov	r1, r3
 80078ee:	f7fc ff49 	bl	8004784 <SPI_I2S_SendData>
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <L3GD20_SendByte+0x88>)
 80078f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078f8:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 80078fa:	e00b      	b.n	8007914 <L3GD20_SendByte+0x68>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <L3GD20_SendByte+0x88>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	1e59      	subs	r1, r3, #1
 8007902:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <L3GD20_SendByte+0x88>)
 8007904:	6011      	str	r1, [r2, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <L3GD20_SendByte+0x68>
 800790a:	f000 f817 	bl	800793c <L3GD20_TIMEOUT_UserCallback>
 800790e:	4603      	mov	r3, r0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e00b      	b.n	800792c <L3GD20_SendByte+0x80>
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8007914:	4808      	ldr	r0, [pc, #32]	; (8007938 <L3GD20_SendByte+0x8c>)
 8007916:	2101      	movs	r1, #1
 8007918:	f7fc fff0 	bl	80048fc <SPI_I2S_GetFlagStatus>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ec      	beq.n	80078fc <L3GD20_SendByte+0x50>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 8007922:	4805      	ldr	r0, [pc, #20]	; (8007938 <L3GD20_SendByte+0x8c>)
 8007924:	f7fc ff20 	bl	8004768 <SPI_I2S_ReceiveData>
 8007928:	4603      	mov	r3, r0
 800792a:	b2db      	uxtb	r3, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000030 	andcs	r0, r0, r0, lsr r0
 8007938:	40015000 	andmi	r5, r1, r0

0800793c <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {   
  }
 8007940:	e7fe      	b.n	8007940 <L3GD20_TIMEOUT_UserCallback+0x4>
 8007942:	bf00      	nop

08007944 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 800794a:	f001 ff9f 	bl	800988c <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 800794e:	487f      	ldr	r0, [pc, #508]	; (8007b4c <LCD_DeInit+0x208>)
 8007950:	2100      	movs	r1, #0
 8007952:	f7fc fddd 	bl	8004510 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 8007956:	487d      	ldr	r0, [pc, #500]	; (8007b4c <LCD_DeInit+0x208>)
 8007958:	f7fc fc12 	bl	8004180 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 800795c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007960:	2100      	movs	r1, #0
 8007962:	f7fa fc51 	bl	8002208 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8007966:	2304      	movs	r3, #4
 8007968:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800796a:	2300      	movs	r3, #0
 800796c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800796e:	2300      	movs	r3, #0
 8007970:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007972:	463b      	mov	r3, r7
 8007974:	4876      	ldr	r0, [pc, #472]	; (8007b50 <LCD_DeInit+0x20c>)
 8007976:	4619      	mov	r1, r3
 8007978:	f7f9 fe54 	bl	8001624 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 800797c:	2380      	movs	r3, #128	; 0x80
 800797e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8007980:	463b      	mov	r3, r7
 8007982:	4874      	ldr	r0, [pc, #464]	; (8007b54 <LCD_DeInit+0x210>)
 8007984:	4619      	mov	r1, r3
 8007986:	f7f9 fe4d 	bl	8001624 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 800798a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8007990:	463b      	mov	r3, r7
 8007992:	4870      	ldr	r0, [pc, #448]	; (8007b54 <LCD_DeInit+0x210>)
 8007994:	4619      	mov	r1, r3
 8007996:	f7f9 fe45 	bl	8001624 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 800799a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800799e:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80079a0:	463b      	mov	r3, r7
 80079a2:	486c      	ldr	r0, [pc, #432]	; (8007b54 <LCD_DeInit+0x210>)
 80079a4:	4619      	mov	r1, r3
 80079a6:	f7f9 fe3d 	bl	8001624 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 80079aa:	486b      	ldr	r0, [pc, #428]	; (8007b58 <LCD_DeInit+0x214>)
 80079ac:	2103      	movs	r1, #3
 80079ae:	2200      	movs	r2, #0
 80079b0:	f7f9 ffa6 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 80079b4:	4868      	ldr	r0, [pc, #416]	; (8007b58 <LCD_DeInit+0x214>)
 80079b6:	2104      	movs	r1, #4
 80079b8:	2200      	movs	r2, #0
 80079ba:	f7f9 ffa1 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 80079be:	4866      	ldr	r0, [pc, #408]	; (8007b58 <LCD_DeInit+0x214>)
 80079c0:	2106      	movs	r1, #6
 80079c2:	2200      	movs	r2, #0
 80079c4:	f7f9 ff9c 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 80079c8:	4863      	ldr	r0, [pc, #396]	; (8007b58 <LCD_DeInit+0x214>)
 80079ca:	210b      	movs	r1, #11
 80079cc:	2200      	movs	r2, #0
 80079ce:	f7f9 ff97 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 80079d2:	4861      	ldr	r0, [pc, #388]	; (8007b58 <LCD_DeInit+0x214>)
 80079d4:	210c      	movs	r1, #12
 80079d6:	2200      	movs	r2, #0
 80079d8:	f7f9 ff92 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 80079dc:	f641 0358 	movw	r3, #6232	; 0x1858
 80079e0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80079e2:	2302      	movs	r3, #2
 80079e4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80079e6:	2302      	movs	r3, #2
 80079e8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80079ea:	2300      	movs	r3, #0
 80079ec:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80079f2:	463b      	mov	r3, r7
 80079f4:	4858      	ldr	r0, [pc, #352]	; (8007b58 <LCD_DeInit+0x214>)
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7f9 fe14 	bl	8001624 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 80079fc:	4857      	ldr	r0, [pc, #348]	; (8007b5c <LCD_DeInit+0x218>)
 80079fe:	2100      	movs	r1, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	f7f9 ff7d 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 8007a06:	4855      	ldr	r0, [pc, #340]	; (8007b5c <LCD_DeInit+0x218>)
 8007a08:	2101      	movs	r1, #1
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f9 ff78 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8007a10:	4852      	ldr	r0, [pc, #328]	; (8007b5c <LCD_DeInit+0x218>)
 8007a12:	2108      	movs	r1, #8
 8007a14:	2200      	movs	r2, #0
 8007a16:	f7f9 ff73 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 8007a1a:	4850      	ldr	r0, [pc, #320]	; (8007b5c <LCD_DeInit+0x218>)
 8007a1c:	2109      	movs	r1, #9
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f7f9 ff6e 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8007a24:	484d      	ldr	r0, [pc, #308]	; (8007b5c <LCD_DeInit+0x218>)
 8007a26:	210a      	movs	r1, #10
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f7f9 ff69 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8007a2e:	484b      	ldr	r0, [pc, #300]	; (8007b5c <LCD_DeInit+0x218>)
 8007a30:	210b      	movs	r1, #11
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f9 ff64 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 8007a38:	f640 7303 	movw	r3, #3843	; 0xf03
 8007a3c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007a42:	2302      	movs	r3, #2
 8007a44:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007a46:	2300      	movs	r3, #0
 8007a48:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007a4e:	463b      	mov	r3, r7
 8007a50:	4842      	ldr	r0, [pc, #264]	; (8007b5c <LCD_DeInit+0x218>)
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7f9 fde6 	bl	8001624 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 8007a58:	483d      	ldr	r0, [pc, #244]	; (8007b50 <LCD_DeInit+0x20c>)
 8007a5a:	2106      	movs	r1, #6
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f7f9 ff4f 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8007a62:	483b      	ldr	r0, [pc, #236]	; (8007b50 <LCD_DeInit+0x20c>)
 8007a64:	2107      	movs	r1, #7
 8007a66:	2200      	movs	r2, #0
 8007a68:	f7f9 ff4a 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8007a6c:	4838      	ldr	r0, [pc, #224]	; (8007b50 <LCD_DeInit+0x20c>)
 8007a6e:	210a      	movs	r1, #10
 8007a70:	2200      	movs	r2, #0
 8007a72:	f7f9 ff45 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 8007a76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007a7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007a80:	2302      	movs	r3, #2
 8007a82:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007a84:	2300      	movs	r3, #0
 8007a86:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8007a8c:	463b      	mov	r3, r7
 8007a8e:	4830      	ldr	r0, [pc, #192]	; (8007b50 <LCD_DeInit+0x20c>)
 8007a90:	4619      	mov	r1, r3
 8007a92:	f7f9 fdc7 	bl	8001624 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 8007a96:	4832      	ldr	r0, [pc, #200]	; (8007b60 <LCD_DeInit+0x21c>)
 8007a98:	2103      	movs	r1, #3
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f7f9 ff30 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8007aa0:	482f      	ldr	r0, [pc, #188]	; (8007b60 <LCD_DeInit+0x21c>)
 8007aa2:	2106      	movs	r1, #6
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f7f9 ff2b 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 8007aaa:	2348      	movs	r3, #72	; 0x48
 8007aac:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 8007abe:	463b      	mov	r3, r7
 8007ac0:	4827      	ldr	r0, [pc, #156]	; (8007b60 <LCD_DeInit+0x21c>)
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f7f9 fdae 	bl	8001624 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 8007ac8:	4822      	ldr	r0, [pc, #136]	; (8007b54 <LCD_DeInit+0x210>)
 8007aca:	210a      	movs	r1, #10
 8007acc:	2200      	movs	r2, #0
 8007ace:	f7f9 ff17 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8007ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007adc:	2302      	movs	r3, #2
 8007ade:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 8007ae8:	463b      	mov	r3, r7
 8007aea:	481a      	ldr	r0, [pc, #104]	; (8007b54 <LCD_DeInit+0x210>)
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7f9 fd99 	bl	8001624 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8007af2:	481c      	ldr	r0, [pc, #112]	; (8007b64 <LCD_DeInit+0x220>)
 8007af4:	2106      	movs	r1, #6
 8007af6:	2200      	movs	r2, #0
 8007af8:	f7f9 ff02 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8007afc:	4819      	ldr	r0, [pc, #100]	; (8007b64 <LCD_DeInit+0x220>)
 8007afe:	2107      	movs	r1, #7
 8007b00:	2200      	movs	r2, #0
 8007b02:	f7f9 fefd 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 8007b06:	4817      	ldr	r0, [pc, #92]	; (8007b64 <LCD_DeInit+0x220>)
 8007b08:	210a      	movs	r1, #10
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f9 fef8 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8007b10:	4814      	ldr	r0, [pc, #80]	; (8007b64 <LCD_DeInit+0x220>)
 8007b12:	210b      	movs	r1, #11
 8007b14:	2200      	movs	r2, #0
 8007b16:	f7f9 fef3 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8007b1a:	4812      	ldr	r0, [pc, #72]	; (8007b64 <LCD_DeInit+0x220>)
 8007b1c:	210c      	movs	r1, #12
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f7f9 feee 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8007b24:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8007b28:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007b32:	2300      	movs	r3, #0
 8007b34:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4809      	ldr	r0, [pc, #36]	; (8007b64 <LCD_DeInit+0x220>)
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7f9 fd70 	bl	8001624 <GPIO_Init>
}
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40015000 	andmi	r5, r1, r0
 8007b50:	40020800 	andmi	r0, r2, r0, lsl #16
 8007b54:	40021400 	andmi	r1, r2, r0, lsl #8
 8007b58:	40020000 	andmi	r0, r2, r0
 8007b5c:	40020400 	andmi	r0, r2, r0, lsl #8
 8007b60:	40020c00 	andmi	r0, r2, r0, lsl #24
 8007b64:	40021800 	andmi	r1, r2, r0, lsl #16

08007b68 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b090      	sub	sp, #64	; 0x40
 8007b6c:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8007b6e:	f001 fe93 	bl	8009898 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8007b72:	2000      	movs	r0, #0
 8007b74:	f000 f8ac 	bl	8007cd0 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f000 f8a9 	bl	8007cd0 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8007b7e:	f001 fec7 	bl	8009910 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8007b82:	f001 fd35 	bl	80095f0 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8007b86:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f7fa fb3c 	bl	8002208 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8007b90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b94:	2101      	movs	r1, #1
 8007b96:	f7fa fabf 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8007b9a:	f001 ff23 	bl	80099e4 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8007b9e:	f7ff fa37 	bl	8007010 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8007bba:	2300      	movs	r3, #0
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8007bbe:	20c0      	movs	r0, #192	; 0xc0
 8007bc0:	2107      	movs	r1, #7
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	f7fa f808 	bl	8001bd8 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8007bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007bcc:	f7fa fa78 	bl	80020c0 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	f7fa f819 	bl	8001c08 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8007bd6:	bf00      	nop
 8007bd8:	203d      	movs	r0, #61	; 0x3d
 8007bda:	f7fa fc83 	bl	80024e4 <RCC_GetFlagStatus>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f9      	beq.n	8007bd8 <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8007be4:	2309      	movs	r3, #9
 8007be6:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8007bec:	231d      	movs	r3, #29
 8007bee:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8007bf4:	f240 130d 	movw	r3, #269	; 0x10d
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8007bfa:	f240 1343 	movw	r3, #323	; 0x143
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8007c00:	f240 1317 	movw	r3, #279	; 0x117
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8007c06:	f240 1347 	movw	r3, #327	; 0x147
 8007c0a:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8007c0c:	1d3b      	adds	r3, r7, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd fb44 	bl	800529c <LTDC_Init>
}  
 8007c14:	3740      	adds	r7, #64	; 0x40
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop

08007c1c <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b090      	sub	sp, #64	; 0x40
 8007c20:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8007c22:	231e      	movs	r3, #30
 8007c24:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8007c26:	f240 130d 	movw	r3, #269	; 0x10d
 8007c2a:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8007c30:	f240 1343 	movw	r3, #323	; 0x143
 8007c34:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8007c36:	2302      	movs	r3, #2
 8007c38:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8007c3a:	23ff      	movs	r3, #255	; 0xff
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8007c46:	2300      	movs	r3, #0
 8007c48:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8007c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8007c54:	2305      	movs	r3, #5
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8007c58:	f240 13e3 	movw	r3, #483	; 0x1e3
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8007c5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8007c64:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8007c6a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007c6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8007c70:	463b      	mov	r3, r7
 8007c72:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <LCD_LayerInit+0xa4>)
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7fd fc6f 	bl	8005558 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <LCD_LayerInit+0xa8>)
 8007c7c:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8007c7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8007c84:	2307      	movs	r3, #7
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8007c88:	463b      	mov	r3, r7
 8007c8a:	480f      	ldr	r0, [pc, #60]	; (8007cc8 <LCD_LayerInit+0xac>)
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f7fd fc63 	bl	8005558 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8007c92:	2001      	movs	r0, #1
 8007c94:	f7fd fc52 	bl	800553c <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8007c98:	4809      	ldr	r0, [pc, #36]	; (8007cc0 <LCD_LayerInit+0xa4>)
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	f7fd fd30 	bl	8005700 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8007ca0:	4809      	ldr	r0, [pc, #36]	; (8007cc8 <LCD_LayerInit+0xac>)
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	f7fd fd2c 	bl	8005700 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fd fc47 	bl	800553c <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8007cae:	4807      	ldr	r0, [pc, #28]	; (8007ccc <LCD_LayerInit+0xb0>)
 8007cb0:	f000 f890 	bl	8007dd4 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f7fd fbd9 	bl	800546c <LTDC_DitherCmd>
}
 8007cba:	3740      	adds	r7, #64	; 0x40
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40016884 	andmi	r6, r1, r4, lsl #17
 8007cc4:	d0050000 	andle	r0, r5, r0
 8007cc8:	40016904 	andmi	r6, r1, r4, lsl #18
 8007ccc:	20000034 	andcs	r0, r0, r4, lsr r0

08007cd0 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8007ce0:	4805      	ldr	r0, [pc, #20]	; (8007cf8 <LCD_ChipSelect+0x28>)
 8007ce2:	2104      	movs	r1, #4
 8007ce4:	f7f9 fdc6 	bl	8001874 <GPIO_ResetBits>
 8007ce8:	e003      	b.n	8007cf2 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8007cea:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <LCD_ChipSelect+0x28>)
 8007cec:	2104      	movs	r1, #4
 8007cee:	f7f9 fdb3 	bl	8001858 <GPIO_SetBits>
  }
}
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	40020800 	andmi	r0, r2, r0, lsl #16

08007cfc <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <LCD_SetLayer+0x34>)
 8007d0c:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8007d10:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <LCD_SetLayer+0x38>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e005      	b.n	8007d26 <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <LCD_SetLayer+0x34>)
 8007d1c:	4a06      	ldr	r2, [pc, #24]	; (8007d38 <LCD_SetLayer+0x3c>)
 8007d1e:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <LCD_SetLayer+0x38>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
  }
}  
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000058 	andcs	r0, r0, r8, asr r0
 8007d34:	200004dc 	ldrdcs	r0, [r0], -ip
 8007d38:	d0050000 	andle	r0, r5, r0

08007d3c <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	80fa      	strh	r2, [r7, #6]
 8007d48:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <LCD_SetColors+0x24>)
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <LCD_SetColors+0x28>)
 8007d52:	88ba      	ldrh	r2, [r7, #4]
 8007d54:	801a      	strh	r2, [r3, #0]
}
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	200004d8 	ldrdcs	r0, [r0], -r8
 8007d64:	20000054 	andcs	r0, r0, r4, asr r0

08007d68 <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <LCD_GetColors+0x24>)
 8007d74:	881a      	ldrh	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <LCD_GetColors+0x28>)
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	801a      	strh	r2, [r3, #0]
}
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	200004d8 	ldrdcs	r0, [r0], -r8
 8007d90:	20000054 	andcs	r0, r0, r4, asr r0

08007d94 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8007d9e:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <LCD_SetTextColor+0x1c>)
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	801a      	strh	r2, [r3, #0]
}
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	200004d8 	ldrdcs	r0, [r0], -r8

08007db4 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <LCD_SetBackColor+0x1c>)
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	801a      	strh	r2, [r3, #0]
}
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000054 	andcs	r0, r0, r4, asr r0

08007dd4 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	; (8007dec <LCD_SetFont+0x18>)
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	200004d4 	ldrdcs	r0, [r0], -r4

08007df0 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <LCD_SetTransparency+0x34>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	4808      	ldr	r0, [pc, #32]	; (8007e28 <LCD_SetTransparency+0x38>)
 8007e06:	4619      	mov	r1, r3
 8007e08:	f7fd fdf8 	bl	80059fc <LTDC_LayerAlpha>
 8007e0c:	e004      	b.n	8007e18 <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	4806      	ldr	r0, [pc, #24]	; (8007e2c <LCD_SetTransparency+0x3c>)
 8007e12:	4619      	mov	r1, r3
 8007e14:	f7fd fdf2 	bl	80059fc <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f7fd fb8f 	bl	800553c <LTDC_ReloadConfig>
}
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	200004dc 	ldrdcs	r0, [r0], -ip
 8007e28:	40016884 	andmi	r6, r1, r4, lsl #17
 8007e2c:	40016904 	andmi	r6, r1, r4, lsl #18

08007e30 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8007e34:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <LCD_GetFont+0x14>)
 8007e36:	681b      	ldr	r3, [r3, #0]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	200004d4 	ldrdcs	r0, [r0], -r4

08007e48 <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8007e56:	e00c      	b.n	8007e72 <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8007e58:	88fa      	ldrh	r2, [r7, #6]
 8007e5a:	89fb      	ldrh	r3, [r7, #14]
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	2220      	movs	r2, #32
 8007e62:	f000 f93d 	bl	80080e0 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <LCD_ClearLine+0x4c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	889a      	ldrh	r2, [r3, #4]
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	4413      	add	r3, r2
 8007e70:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8007e72:	89fb      	ldrh	r3, [r7, #14]
 8007e74:	2bef      	cmp	r3, #239	; 0xef
 8007e76:	d80a      	bhi.n	8007e8e <LCD_ClearLine+0x46>
 8007e78:	89fa      	ldrh	r2, [r7, #14]
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <LCD_ClearLine+0x4c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	889b      	ldrh	r3, [r3, #4]
 8007e80:	4413      	add	r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <LCD_ClearLine+0x4c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	889b      	ldrh	r3, [r3, #4]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	dae4      	bge.n	8007e58 <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	200004d4 	ldrdcs	r0, [r0], -r4

08007e98 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e009      	b.n	8007ec0 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	005a      	lsls	r2, r3, #1
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <LCD_Clear+0x3c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	88fa      	ldrh	r2, [r7, #6]
 8007eb8:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec6:	d3f1      	bcc.n	8007eac <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000058 	andcs	r0, r0, r8, asr r0

08007ed8 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	80fa      	strh	r2, [r7, #6]
 8007ee4:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 8007ee6:	88f9      	ldrh	r1, [r7, #6]
 8007ee8:	88ba      	ldrh	r2, [r7, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	440b      	add	r3, r1
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <LCD_SetCursor+0x34>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4413      	add	r3, r2
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000058 	andcs	r0, r0, r8, asr r0

08007f10 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f2e:	0c1b      	lsrs	r3, r3, #16
 8007f30:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007f32:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <LCD_SetColorKeying+0x5c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8007f3a:	f107 030c 	add.w	r3, r7, #12
 8007f3e:	480c      	ldr	r0, [pc, #48]	; (8007f70 <LCD_SetColorKeying+0x60>)
 8007f40:	4619      	mov	r1, r3
 8007f42:	2201      	movs	r2, #1
 8007f44:	f7fd fc40 	bl	80057c8 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007f48:	2001      	movs	r0, #1
 8007f4a:	f7fd faf7 	bl	800553c <LTDC_ReloadConfig>
 8007f4e:	e009      	b.n	8007f64 <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	4807      	ldr	r0, [pc, #28]	; (8007f74 <LCD_SetColorKeying+0x64>)
 8007f56:	4619      	mov	r1, r3
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f7fd fc35 	bl	80057c8 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f7fd faec 	bl	800553c <LTDC_ReloadConfig>
  }
}
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200004dc 	ldrdcs	r0, [r0], -ip
 8007f70:	40016884 	andmi	r6, r1, r4, lsl #17
 8007f74:	40016904 	andmi	r6, r1, r4, lsl #18

08007f78 <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <LCD_ReSetColorKeying+0x3c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	480b      	ldr	r0, [pc, #44]	; (8007fb8 <LCD_ReSetColorKeying+0x40>)
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f7fd fc1b 	bl	80057c8 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007f92:	2001      	movs	r0, #1
 8007f94:	f7fd fad2 	bl	800553c <LTDC_ReloadConfig>
 8007f98:	e008      	b.n	8007fac <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	4807      	ldr	r0, [pc, #28]	; (8007fbc <LCD_ReSetColorKeying+0x44>)
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f7fd fc11 	bl	80057c8 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7fd fac8 	bl	800553c <LTDC_ReloadConfig>
  }
} 
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200004dc 	ldrdcs	r0, [r0], -ip
 8007fb8:	40016884 	andmi	r6, r1, r4, lsl #17
 8007fbc:	40016904 	andmi	r6, r1, r4, lsl #18

08007fc0 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	603a      	str	r2, [r7, #0]
 8007fca:	4602      	mov	r2, r0
 8007fcc:	80fa      	strh	r2, [r7, #6]
 8007fce:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	015b      	lsls	r3, r3, #5
 8007fea:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e05c      	b.n	80080b4 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e048      	b.n	8008092 <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <LCD_DrawChar+0x10c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	8899      	ldrh	r1, [r3, #4]
 8008012:	4b2f      	ldr	r3, [pc, #188]	; (80080d0 <LCD_DrawChar+0x110>)
 8008014:	fba3 0301 	umull	r0, r3, r3, r1
 8008018:	08db      	lsrs	r3, r3, #3
 800801a:	b29b      	uxth	r3, r3
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	4099      	lsls	r1, r3
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	fa41 f303 	asr.w	r3, r1, r3
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <LCD_DrawChar+0x78>
 800802e:	4b27      	ldr	r3, [pc, #156]	; (80080cc <LCD_DrawChar+0x10c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	889b      	ldrh	r3, [r3, #4]
 8008034:	2b0c      	cmp	r3, #12
 8008036:	d911      	bls.n	800805c <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	fa42 f303 	asr.w	r3, r2, r3
 800804a:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10f      	bne.n	8008072 <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8008052:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <LCD_DrawChar+0x10c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	889b      	ldrh	r3, [r3, #4]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d90a      	bls.n	8008072 <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	005a      	lsls	r2, r3, #1
 8008060:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <LCD_DrawChar+0x114>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	441a      	add	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4413      	add	r3, r2
 800806a:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <LCD_DrawChar+0x118>)
 800806c:	8812      	ldrh	r2, [r2, #0]
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	e009      	b.n	8008086 <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	005a      	lsls	r2, r3, #1
 8008076:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <LCD_DrawChar+0x114>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	441a      	add	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4413      	add	r3, r2
 8008080:	4a16      	ldr	r2, [pc, #88]	; (80080dc <LCD_DrawChar+0x11c>)
 8008082:	8812      	ldrh	r2, [r2, #0]
 8008084:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3301      	adds	r3, #1
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <LCD_DrawChar+0x10c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	889b      	ldrh	r3, [r3, #4]
 8008098:	461a      	mov	r2, r3
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d8af      	bhi.n	8008000 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <LCD_DrawChar+0x10c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	33f0      	adds	r3, #240	; 0xf0
 80080ac:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	3301      	adds	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <LCD_DrawChar+0x10c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	88db      	ldrh	r3, [r3, #6]
 80080ba:	461a      	mov	r2, r3
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d89b      	bhi.n	8007ffa <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	200004d4 	ldrdcs	r0, [r0], -r4
 80080d0:	aaaaaaab 	bge	6ab2b84 <_Min_Stack_Size+0x6ab2784>
 80080d4:	20000058 	andcs	r0, r0, r8, asr r0
 80080d8:	20000054 	andcs	r0, r0, r4, asr r0
 80080dc:	200004d8 	ldrdcs	r0, [r0], -r8

080080e0 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4613      	mov	r3, r2
 80080e8:	4602      	mov	r2, r0
 80080ea:	80fa      	strh	r2, [r7, #6]
 80080ec:	460a      	mov	r2, r1
 80080ee:	80ba      	strh	r2, [r7, #4]
 80080f0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	3b20      	subs	r3, #32
 80080f6:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <LCD_DisplayChar+0x44>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	4908      	ldr	r1, [pc, #32]	; (8008124 <LCD_DisplayChar+0x44>)
 8008102:	6809      	ldr	r1, [r1, #0]
 8008104:	88c9      	ldrh	r1, [r1, #6]
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4413      	add	r3, r2
 800810e:	88f9      	ldrh	r1, [r7, #6]
 8008110:	88ba      	ldrh	r2, [r7, #4]
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	461a      	mov	r2, r3
 8008118:	f7ff ff52 	bl	8007fc0 <LCD_DrawChar>
}
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	200004d4 	ldrdcs	r0, [r0], -r4

08008128 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8008138:	e011      	b.n	800815e <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	88f9      	ldrh	r1, [r7, #6]
 8008140:	89fa      	ldrh	r2, [r7, #14]
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	f7ff ffca 	bl	80080e0 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 800814c:	4b13      	ldr	r3, [pc, #76]	; (800819c <LCD_DisplayStringLine+0x74>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	889a      	ldrh	r2, [r3, #4]
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	4413      	add	r3, r2
 8008156:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 800815e:	89fb      	ldrh	r3, [r7, #14]
 8008160:	2bef      	cmp	r3, #239	; 0xef
 8008162:	d818      	bhi.n	8008196 <LCD_DisplayStringLine+0x6e>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf0c      	ite	eq
 800816c:	2300      	moveq	r3, #0
 800816e:	2301      	movne	r3, #1
 8008170:	b2da      	uxtb	r2, r3
 8008172:	89f9      	ldrh	r1, [r7, #14]
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <LCD_DisplayStringLine+0x74>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	889b      	ldrh	r3, [r3, #4]
 800817a:	440b      	add	r3, r1
 800817c:	b299      	uxth	r1, r3
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <LCD_DisplayStringLine+0x74>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	889b      	ldrh	r3, [r3, #4]
 8008184:	4299      	cmp	r1, r3
 8008186:	bfb4      	ite	lt
 8008188:	2300      	movlt	r3, #0
 800818a:	2301      	movge	r3, #1
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4013      	ands	r3, r2
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1d1      	bne.n	800813a <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200004d4 	ldrdcs	r0, [r0], -r4

080081a0 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	80f8      	strh	r0, [r7, #6]
 80081a8:	80b9      	strh	r1, [r7, #4]
 80081aa:	807a      	strh	r2, [r7, #2]
 80081ac:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80081ae:	4b18      	ldr	r3, [pc, #96]	; (8008210 <LCD_SetDisplayWindow+0x70>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d114      	bne.n	80081e0 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	88bb      	ldrh	r3, [r7, #4]
 80081ba:	4816      	ldr	r0, [pc, #88]	; (8008214 <LCD_SetDisplayWindow+0x74>)
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	f7fd fbae 	bl	8005920 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 80081c4:	2001      	movs	r0, #1
 80081c6:	f7fd f9b9 	bl	800553c <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 80081ca:	883a      	ldrh	r2, [r7, #0]
 80081cc:	887b      	ldrh	r3, [r7, #2]
 80081ce:	4811      	ldr	r0, [pc, #68]	; (8008214 <LCD_SetDisplayWindow+0x74>)
 80081d0:	4611      	mov	r1, r2
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7fd fc2e 	bl	8005a34 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 80081d8:	2001      	movs	r0, #1
 80081da:	f7fd f9af 	bl	800553c <LTDC_ReloadConfig>
 80081de:	e013      	b.n	8008208 <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	88bb      	ldrh	r3, [r7, #4]
 80081e4:	480c      	ldr	r0, [pc, #48]	; (8008218 <LCD_SetDisplayWindow+0x78>)
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	f7fd fb99 	bl	8005920 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 80081ee:	2001      	movs	r0, #1
 80081f0:	f7fd f9a4 	bl	800553c <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 80081f4:	883a      	ldrh	r2, [r7, #0]
 80081f6:	887b      	ldrh	r3, [r7, #2]
 80081f8:	4807      	ldr	r0, [pc, #28]	; (8008218 <LCD_SetDisplayWindow+0x78>)
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	f7fd fc19 	bl	8005a34 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8008202:	2001      	movs	r0, #1
 8008204:	f7fd f99a 	bl	800553c <LTDC_ReloadConfig>
  }
}
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200004dc 	ldrdcs	r0, [r0], -ip
 8008214:	40016884 	andmi	r6, r1, r4, lsl #17
 8008218:	40016904 	andmi	r6, r1, r4, lsl #18

0800821c <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8008220:	2000      	movs	r0, #0
 8008222:	2100      	movs	r1, #0
 8008224:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008228:	23f0      	movs	r3, #240	; 0xf0
 800822a:	f7ff ffb9 	bl	80081a0 <LCD_SetDisplayWindow>
}
 800822e:	bd80      	pop	{r7, pc}

08008230 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b090      	sub	sp, #64	; 0x40
 8008234:	af00      	add	r7, sp, #0
 8008236:	80f8      	strh	r0, [r7, #6]
 8008238:	80b9      	strh	r1, [r7, #4]
 800823a:	807a      	strh	r2, [r7, #2]
 800823c:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008246:	2300      	movs	r3, #0
 8008248:	873b      	strh	r3, [r7, #56]	; 0x38
 800824a:	2300      	movs	r3, #0
 800824c:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 800824e:	88ba      	ldrh	r2, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	461a      	mov	r2, r3
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	4413      	add	r3, r2
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	461a      	mov	r2, r3
 8008262:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <LCD_DrawLine+0xc0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4413      	add	r3, r2
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <LCD_DrawLine+0xc4>)
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	0adb      	lsrs	r3, r3, #11
 8008270:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8008272:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <LCD_DrawLine+0xc4>)
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 800827c:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <LCD_DrawLine+0xc4>)
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008284:	b29b      	uxth	r3, r3
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 800828a:	f7fc fcb9 	bl	8004c00 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 800828e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008292:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8008294:	2302      	movs	r3, #2
 8008296:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8008298:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800829a:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 800829c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800829e:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 80082a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80082a2:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 80082a4:	230f      	movs	r3, #15
 80082a6:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 80082ac:	787b      	ldrb	r3, [r7, #1]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 80082b2:	2300      	movs	r3, #0
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 80082b6:	2301      	movs	r3, #1
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30
 80082be:	e005      	b.n	80082cc <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 80082c0:	23ef      	movs	r3, #239	; 0xef
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 80082c8:	2301      	movs	r3, #1
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fc fca3 	bl	8004c1c <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 80082d6:	f7fc fd77 	bl	8004dc8 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 80082da:	bf00      	nop
 80082dc:	2002      	movs	r0, #2
 80082de:	f7fc ff69 	bl	80051b4 <DMA2D_GetFlagStatus>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0f9      	beq.n	80082dc <LCD_DrawLine+0xac>
  {
  }
  
}
 80082e8:	3740      	adds	r7, #64	; 0x40
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000058 	andcs	r0, r0, r8, asr r0
 80082f4:	200004d8 	ldrdcs	r0, [r0], -r8

080082f8 <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	80f8      	strh	r0, [r7, #6]
 8008300:	80b9      	strh	r1, [r7, #4]
 8008302:	807a      	strh	r2, [r7, #2]
 8008304:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8008306:	88f9      	ldrh	r1, [r7, #6]
 8008308:	88ba      	ldrh	r2, [r7, #4]
 800830a:	883b      	ldrh	r3, [r7, #0]
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	461a      	mov	r2, r3
 8008312:	2300      	movs	r3, #0
 8008314:	f7ff ff8c 	bl	8008230 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8008318:	88ba      	ldrh	r2, [r7, #4]
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	4413      	add	r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	88f9      	ldrh	r1, [r7, #6]
 8008322:	883b      	ldrh	r3, [r7, #0]
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	461a      	mov	r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	f7ff ff80 	bl	8008230 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8008330:	88f9      	ldrh	r1, [r7, #6]
 8008332:	88ba      	ldrh	r2, [r7, #4]
 8008334:	887b      	ldrh	r3, [r7, #2]
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	461a      	mov	r2, r3
 800833c:	2301      	movs	r3, #1
 800833e:	f7ff ff77 	bl	8008230 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	883b      	ldrh	r3, [r7, #0]
 8008346:	4413      	add	r3, r2
 8008348:	b299      	uxth	r1, r3
 800834a:	88ba      	ldrh	r2, [r7, #4]
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	461a      	mov	r2, r3
 8008354:	2301      	movs	r3, #1
 8008356:	f7ff ff6b 	bl	8008230 <LCD_DrawLine>
}
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	4613      	mov	r3, r2
 8008368:	4602      	mov	r2, r0
 800836a:	80fa      	strh	r2, [r7, #6]
 800836c:	460a      	mov	r2, r1
 800836e:	80ba      	strh	r2, [r7, #4]
 8008370:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8008372:	887b      	ldrh	r3, [r7, #2]
 8008374:	425b      	negs	r3, r3
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	887a      	ldrh	r2, [r7, #2]
 800837e:	4613      	mov	r3, r2
 8008380:	07db      	lsls	r3, r3, #31
 8008382:	1a9b      	subs	r3, r3, r2
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	3302      	adds	r3, #2
 8008388:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad1      	subs	r1, r2, r3
 8008390:	88ba      	ldrh	r2, [r7, #4]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	441a      	add	r2, r3
 8008396:	4613      	mov	r3, r2
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	440b      	add	r3, r1
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	461a      	mov	r2, r3
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <LCD_DrawCircle+0x120>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	4a36      	ldr	r2, [pc, #216]	; (8008484 <LCD_DrawCircle+0x124>)
 80083ac:	8812      	ldrh	r2, [r2, #0]
 80083ae:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	18d1      	adds	r1, r2, r3
 80083b6:	88ba      	ldrh	r2, [r7, #4]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	441a      	add	r2, r3
 80083bc:	4613      	mov	r3, r2
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	440b      	add	r3, r1
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	461a      	mov	r2, r3
 80083ca:	4b2d      	ldr	r3, [pc, #180]	; (8008480 <LCD_DrawCircle+0x120>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	4a2c      	ldr	r2, [pc, #176]	; (8008484 <LCD_DrawCircle+0x124>)
 80083d2:	8812      	ldrh	r2, [r2, #0]
 80083d4:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	18d1      	adds	r1, r2, r3
 80083dc:	88ba      	ldrh	r2, [r7, #4]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	4613      	mov	r3, r2
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	440b      	add	r3, r1
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	461a      	mov	r2, r3
 80083f0:	4b23      	ldr	r3, [pc, #140]	; (8008480 <LCD_DrawCircle+0x120>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4413      	add	r3, r2
 80083f6:	4a23      	ldr	r2, [pc, #140]	; (8008484 <LCD_DrawCircle+0x124>)
 80083f8:	8812      	ldrh	r2, [r2, #0]
 80083fa:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	1ad1      	subs	r1, r2, r3
 8008402:	88ba      	ldrh	r2, [r7, #4]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	440b      	add	r3, r1
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	461a      	mov	r2, r3
 8008416:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <LCD_DrawCircle+0x120>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4413      	add	r3, r2
 800841c:	4a19      	ldr	r2, [pc, #100]	; (8008484 <LCD_DrawCircle+0x124>)
 800841e:	8812      	ldrh	r2, [r2, #0]
 8008420:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	dc13      	bgt.n	8008456 <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	3301      	adds	r3, #1
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	425a      	negs	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	429a      	cmp	r2, r3
 8008448:	d105      	bne.n	8008456 <LCD_DrawCircle+0xf6>
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	429a      	cmp	r2, r3
 8008450:	dc01      	bgt.n	8008456 <LCD_DrawCircle+0xf6>
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	429a      	cmp	r2, r3
 800845c:	dd08      	ble.n	8008470 <LCD_DrawCircle+0x110>
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	3301      	adds	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	3301      	adds	r3, #1
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	dd89      	ble.n	800838a <LCD_DrawCircle+0x2a>
}
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000058 	andcs	r0, r0, r8, asr r0
 8008484:	200004d8 	ldrdcs	r0, [r0], -r8

08008488 <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08c      	sub	sp, #48	; 0x30
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	425b      	negs	r3, r3
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800849c:	2300      	movs	r3, #0
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	07db      	lsls	r3, r3, #31
 80084a6:	1a9b      	subs	r3, r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	3302      	adds	r3, #2
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	ee07 3a10 	vmov	s14, r3
 80084c6:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80084ca:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	ee07 3a10 	vmov	s14, r3
 80084d4:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80084d8:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	f340 8094 	ble.w	800860e <LCD_DrawFullEllipse+0x186>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 80084e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80084ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80084ee:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80084f2:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4413      	add	r3, r2
 8008500:	b299      	uxth	r1, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	b29a      	uxth	r2, r3
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008510:	edd7 7a07 	vldr	s15, [r7, #28]
 8008514:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851c:	ee17 3a90 	vmov	r3, s15
 8008520:	b29b      	uxth	r3, r3
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	b29a      	uxth	r2, r3
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008530:	edd7 7a07 	vldr	s15, [r7, #28]
 8008534:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853c:	ee17 3a90 	vmov	r3, s15
 8008540:	b29b      	uxth	r3, r3
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	b29b      	uxth	r3, r3
 8008546:	3301      	adds	r3, #1
 8008548:	b29b      	uxth	r3, r3
 800854a:	4608      	mov	r0, r1
 800854c:	4611      	mov	r1, r2
 800854e:	461a      	mov	r2, r3
 8008550:	2301      	movs	r3, #1
 8008552:	f7ff fe6d 	bl	8008230 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	b29a      	uxth	r2, r3
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	b29b      	uxth	r3, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	b299      	uxth	r1, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	b29a      	uxth	r2, r3
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008570:	edd7 7a07 	vldr	s15, [r7, #28]
 8008574:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857c:	ee17 3a90 	vmov	r3, s15
 8008580:	b29b      	uxth	r3, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	b29a      	uxth	r2, r3
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008590:	edd7 7a07 	vldr	s15, [r7, #28]
 8008594:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859c:	ee17 3a90 	vmov	r3, s15
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3301      	adds	r3, #1
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4608      	mov	r0, r1
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	2301      	movs	r3, #1
 80085b2:	f7ff fe3d 	bl	8008230 <LCD_DrawLine>
      
      e2 = err;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 80085ba:	6a3a      	ldr	r2, [r7, #32]
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	429a      	cmp	r2, r3
 80085c0:	dc13      	bgt.n	80085ea <LCD_DrawFullEllipse+0x162>
      {
        err += ++y*2+1;
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	3301      	adds	r3, #1
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	3301      	adds	r3, #1
 80085ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d0:	4413      	add	r3, r2
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	425a      	negs	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	429a      	cmp	r2, r3
 80085dc:	d105      	bne.n	80085ea <LCD_DrawFullEllipse+0x162>
 80085de:	6a3a      	ldr	r2, [r7, #32]
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	429a      	cmp	r2, r3
 80085e4:	dc01      	bgt.n	80085ea <LCD_DrawFullEllipse+0x162>
 80085e6:	2300      	movs	r3, #0
 80085e8:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 80085ea:	6a3a      	ldr	r2, [r7, #32]
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	429a      	cmp	r2, r3
 80085f0:	dd08      	ble.n	8008604 <LCD_DrawFullEllipse+0x17c>
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	3301      	adds	r3, #1
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	3301      	adds	r3, #1
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	4413      	add	r3, r2
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	f77f af6d 	ble.w	80084e6 <LCD_DrawFullEllipse+0x5e>
 800860c:	e097      	b.n	800873e <LCD_DrawFullEllipse+0x2b6>
  }
  else
  {
    y = -Radius2; 
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	425b      	negs	r3, r3
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 8008618:	ed97 7a05 	vldr	s14, [r7, #20]
 800861c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008620:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008624:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	b29a      	uxth	r2, r3
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008636:	edd7 7a07 	vldr	s15, [r7, #28]
 800863a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800863e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008642:	ee17 3a90 	vmov	r3, s15
 8008646:	b29b      	uxth	r3, r3
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	b299      	uxth	r1, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	b29a      	uxth	r2, r3
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	b29b      	uxth	r3, r3
 8008654:	4413      	add	r3, r2
 8008656:	b29a      	uxth	r2, r3
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008662:	edd7 7a07 	vldr	s15, [r7, #28]
 8008666:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800866a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800866e:	ee17 3a90 	vmov	r3, s15
 8008672:	b29b      	uxth	r3, r3
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b29b      	uxth	r3, r3
 8008678:	3301      	adds	r3, #1
 800867a:	b29b      	uxth	r3, r3
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	2300      	movs	r3, #0
 8008684:	f7ff fdd4 	bl	8008230 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	b29a      	uxth	r2, r3
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008696:	edd7 7a07 	vldr	s15, [r7, #28]
 800869a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800869e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a2:	ee17 3a90 	vmov	r3, s15
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	b299      	uxth	r1, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80086c6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80086ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ce:	ee17 3a90 	vmov	r3, s15
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3301      	adds	r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4608      	mov	r0, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	461a      	mov	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	f7ff fda4 	bl	8008230 <LCD_DrawLine>
      
      e2 = err;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 80086ec:	6a3a      	ldr	r2, [r7, #32]
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	dc13      	bgt.n	800871c <LCD_DrawFullEllipse+0x294>
      {
        err += ++x*2+1;
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	3301      	adds	r3, #1
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	3301      	adds	r3, #1
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	4413      	add	r3, r2
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	425a      	negs	r2, r3
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	429a      	cmp	r2, r3
 800870e:	d105      	bne.n	800871c <LCD_DrawFullEllipse+0x294>
 8008710:	6a3a      	ldr	r2, [r7, #32]
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	429a      	cmp	r2, r3
 8008716:	dc01      	bgt.n	800871c <LCD_DrawFullEllipse+0x294>
 8008718:	2300      	movs	r3, #0
 800871a:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 800871c:	6a3a      	ldr	r2, [r7, #32]
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	429a      	cmp	r2, r3
 8008722:	dd08      	ble.n	8008736 <LCD_DrawFullEllipse+0x2ae>
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	3301      	adds	r3, #1
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	3301      	adds	r3, #1
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	4413      	add	r3, r2
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	2b00      	cmp	r3, #0
 800873a:	f77f af6d 	ble.w	8008618 <LCD_DrawFullEllipse+0x190>
  }
}
 800873e:	3730      	adds	r7, #48	; 0x30
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8008744:	b480      	push	{r7}
 8008746:	b08d      	sub	sp, #52	; 0x34
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	425b      	negs	r3, r3
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008758:	2300      	movs	r3, #0
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	07db      	lsls	r3, r3, #31
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	3302      	adds	r3, #2
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	ee07 3a10 	vmov	s14, r3
 8008782:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8008786:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	ee07 3a10 	vmov	s14, r3
 8008790:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8008794:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	f340 80b6 	ble.w	800890e <LCD_DrawEllipse+0x1ca>
  { 
    do {
      K = (float)(rad1/rad2);
 80087a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80087a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80087aa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	1ad1      	subs	r1, r2, r3
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80087c6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80087ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ce:	ee17 3a90 	vmov	r3, s15
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	441a      	add	r2, r3
 80087da:	4613      	mov	r3, r2
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	440b      	add	r3, r1
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	461a      	mov	r2, r3
 80087e8:	4ba8      	ldr	r3, [pc, #672]	; (8008a8c <LCD_DrawEllipse+0x348>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4413      	add	r3, r2
 80087ee:	4aa8      	ldr	r2, [pc, #672]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 80087f0:	8812      	ldrh	r2, [r2, #0]
 80087f2:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	18d1      	adds	r1, r2, r3
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008804:	edd7 7a07 	vldr	s15, [r7, #28]
 8008808:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800880c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008810:	ee17 3a90 	vmov	r3, s15
 8008814:	b29b      	uxth	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	441a      	add	r2, r3
 800881c:	4613      	mov	r3, r2
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	440b      	add	r3, r1
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	461a      	mov	r2, r3
 800882a:	4b98      	ldr	r3, [pc, #608]	; (8008a8c <LCD_DrawEllipse+0x348>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4413      	add	r3, r2
 8008830:	4a97      	ldr	r2, [pc, #604]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 8008832:	8812      	ldrh	r2, [r2, #0]
 8008834:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	18d1      	adds	r1, r2, r3
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008846:	edd7 7a07 	vldr	s15, [r7, #28]
 800884a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800884e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008852:	ee17 3a90 	vmov	r3, s15
 8008856:	b29b      	uxth	r3, r3
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	4613      	mov	r3, r2
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	440b      	add	r3, r1
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	461a      	mov	r2, r3
 800886a:	4b88      	ldr	r3, [pc, #544]	; (8008a8c <LCD_DrawEllipse+0x348>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4413      	add	r3, r2
 8008870:	4a87      	ldr	r2, [pc, #540]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 8008872:	8812      	ldrh	r2, [r2, #0]
 8008874:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	1ad1      	subs	r1, r2, r3
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008886:	edd7 7a07 	vldr	s15, [r7, #28]
 800888a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800888e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008892:	ee17 3a90 	vmov	r3, s15
 8008896:	b29b      	uxth	r3, r3
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	4613      	mov	r3, r2
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	440b      	add	r3, r1
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b78      	ldr	r3, [pc, #480]	; (8008a8c <LCD_DrawEllipse+0x348>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4413      	add	r3, r2
 80088b0:	4a77      	ldr	r2, [pc, #476]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 80088b2:	8812      	ldrh	r2, [r2, #0]
 80088b4:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	429a      	cmp	r2, r3
 80088c0:	dc13      	bgt.n	80088ea <LCD_DrawEllipse+0x1a6>
        err += ++y*2+1;
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	3301      	adds	r3, #1
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	3301      	adds	r3, #1
 80088ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d0:	4413      	add	r3, r2
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	425a      	negs	r2, r3
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	429a      	cmp	r2, r3
 80088dc:	d105      	bne.n	80088ea <LCD_DrawEllipse+0x1a6>
 80088de:	6a3a      	ldr	r2, [r7, #32]
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	429a      	cmp	r2, r3
 80088e4:	dc01      	bgt.n	80088ea <LCD_DrawEllipse+0x1a6>
 80088e6:	2300      	movs	r3, #0
 80088e8:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	dd08      	ble.n	8008904 <LCD_DrawEllipse+0x1c0>
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	3301      	adds	r3, #1
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	3301      	adds	r3, #1
 80088fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008900:	4413      	add	r3, r2
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	f77f af4b 	ble.w	80087a2 <LCD_DrawEllipse+0x5e>
 800890c:	e0b9      	b.n	8008a82 <LCD_DrawEllipse+0x33e>
  }
  else
  {
    y = -Radius2; 
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	425b      	negs	r3, r3
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 8008918:	ed97 7a05 	vldr	s14, [r7, #20]
 800891c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008920:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008924:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008932:	edd7 7a07 	vldr	s15, [r7, #28]
 8008936:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800893a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800893e:	ee17 3a90 	vmov	r3, s15
 8008942:	b29b      	uxth	r3, r3
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	1ad1      	subs	r1, r2, r3
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	441a      	add	r2, r3
 800894e:	4613      	mov	r3, r2
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	440b      	add	r3, r1
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	461a      	mov	r2, r3
 800895c:	4b4b      	ldr	r3, [pc, #300]	; (8008a8c <LCD_DrawEllipse+0x348>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4413      	add	r3, r2
 8008962:	4a4b      	ldr	r2, [pc, #300]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 8008964:	8812      	ldrh	r2, [r2, #0]
 8008966:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008972:	edd7 7a07 	vldr	s15, [r7, #28]
 8008976:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800897a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897e:	ee17 3a90 	vmov	r3, s15
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	18d1      	adds	r1, r2, r3
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	441a      	add	r2, r3
 8008990:	4613      	mov	r3, r2
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	440b      	add	r3, r1
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	461a      	mov	r2, r3
 800899e:	4b3b      	ldr	r3, [pc, #236]	; (8008a8c <LCD_DrawEllipse+0x348>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4413      	add	r3, r2
 80089a4:	4a3a      	ldr	r2, [pc, #232]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 80089a6:	8812      	ldrh	r2, [r2, #0]
 80089a8:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80089b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80089bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c0:	ee17 3a90 	vmov	r3, s15
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	18d1      	adds	r1, r2, r3
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	4613      	mov	r3, r2
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	440b      	add	r3, r1
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	461a      	mov	r2, r3
 80089e0:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <LCD_DrawEllipse+0x348>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4413      	add	r3, r2
 80089e6:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 80089e8:	8812      	ldrh	r2, [r2, #0]
 80089ea:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80089fa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 3a90 	vmov	r3, s15
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	1ad1      	subs	r1, r2, r3
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	4613      	mov	r3, r2
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	440b      	add	r3, r1
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <LCD_DrawEllipse+0x348>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	4a1a      	ldr	r2, [pc, #104]	; (8008a90 <LCD_DrawEllipse+0x34c>)
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 8008a30:	6a3a      	ldr	r2, [r7, #32]
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	429a      	cmp	r2, r3
 8008a36:	dc13      	bgt.n	8008a60 <LCD_DrawEllipse+0x31c>
        err += ++x*2+1;
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	3301      	adds	r3, #1
 8008a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a46:	4413      	add	r3, r2
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	425a      	negs	r2, r3
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d105      	bne.n	8008a60 <LCD_DrawEllipse+0x31c>
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	dc01      	bgt.n	8008a60 <LCD_DrawEllipse+0x31c>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	429a      	cmp	r2, r3
 8008a66:	dd08      	ble.n	8008a7a <LCD_DrawEllipse+0x336>
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	3301      	adds	r3, #1
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	4413      	add	r3, r2
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f77f af4b 	ble.w	8008918 <LCD_DrawEllipse+0x1d4>
  }
}
 8008a82:	3734      	adds	r7, #52	; 0x34
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20000058 	andcs	r0, r0, r8, asr r0
 8008a90:	200004d8 	ldrdcs	r0, [r0], -r8

08008a94 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	e022      	b.n	8008af0 <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	e019      	b.n	8008ae4 <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2101      	movs	r1, #1
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <LCD_DrawMonoPict+0x70>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a0e      	ldr	r2, [pc, #56]	; (8008b08 <LCD_DrawMonoPict+0x74>)
 8008ace:	8812      	ldrh	r2, [r2, #0]
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e004      	b.n	8008ade <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <LCD_DrawMonoPict+0x70>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a0c      	ldr	r2, [pc, #48]	; (8008b0c <LCD_DrawMonoPict+0x78>)
 8008ada:	8812      	ldrh	r2, [r2, #0]
 8008adc:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60bb      	str	r3, [r7, #8]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b1f      	cmp	r3, #31
 8008ae8:	d9e2      	bls.n	8008ab0 <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8008af6:	d3d8      	bcc.n	8008aaa <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20000058 	andcs	r0, r0, r8, asr r0
 8008b08:	20000054 	andcs	r0, r0, r4, asr r0
 8008b0c:	200004d8 	ldrdcs	r0, [r0], -r8

08008b10 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	2300      	movs	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8008b34:	4b69      	ldr	r3, [pc, #420]	; (8008cdc <LCD_WriteBMP+0x1cc>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	330a      	adds	r3, #10
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	330c      	adds	r3, #12
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3312      	adds	r3, #18
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3314      	adds	r3, #20
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	041b      	lsls	r3, r3, #16
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3316      	adds	r3, #22
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3318      	adds	r3, #24
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	041b      	lsls	r3, r3, #16
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	331c      	adds	r3, #28
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8008ba2:	4b4f      	ldr	r3, [pc, #316]	; (8008ce0 <LCD_WriteBMP+0x1d0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d127      	bne.n	8008bfa <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 8008baa:	484e      	ldr	r0, [pc, #312]	; (8008ce4 <LCD_WriteBMP+0x1d4>)
 8008bac:	6939      	ldr	r1, [r7, #16]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f7fc ff40 	bl	8005a34 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 8008bb4:	2002      	movs	r0, #2
 8008bb6:	f7fc fcc1 	bl	800553c <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	3b20      	subs	r3, #32
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	d807      	bhi.n	8008bd2 <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 8008bc2:	4848      	ldr	r0, [pc, #288]	; (8008ce4 <LCD_WriteBMP+0x1d4>)
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	f7fc ff9b 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008bca:	2002      	movs	r0, #2
 8008bcc:	f7fc fcb6 	bl	800553c <LTDC_ReloadConfig>
 8008bd0:	e03a      	b.n	8008c48 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3b10      	subs	r3, #16
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	d807      	bhi.n	8008bea <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 8008bda:	4842      	ldr	r0, [pc, #264]	; (8008ce4 <LCD_WriteBMP+0x1d4>)
 8008bdc:	2102      	movs	r1, #2
 8008bde:	f7fc ff8f 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008be2:	2002      	movs	r0, #2
 8008be4:	f7fc fcaa 	bl	800553c <LTDC_ReloadConfig>
 8008be8:	e02e      	b.n	8008c48 <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8008bea:	483e      	ldr	r0, [pc, #248]	; (8008ce4 <LCD_WriteBMP+0x1d4>)
 8008bec:	2101      	movs	r1, #1
 8008bee:	f7fc ff87 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008bf2:	2002      	movs	r0, #2
 8008bf4:	f7fc fca2 	bl	800553c <LTDC_ReloadConfig>
 8008bf8:	e026      	b.n	8008c48 <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8008bfa:	483b      	ldr	r0, [pc, #236]	; (8008ce8 <LCD_WriteBMP+0x1d8>)
 8008bfc:	6939      	ldr	r1, [r7, #16]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f7fc ff18 	bl	8005a34 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8008c04:	2002      	movs	r0, #2
 8008c06:	f7fc fc99 	bl	800553c <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3b20      	subs	r3, #32
 8008c0e:	2b07      	cmp	r3, #7
 8008c10:	d807      	bhi.n	8008c22 <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 8008c12:	4835      	ldr	r0, [pc, #212]	; (8008ce8 <LCD_WriteBMP+0x1d8>)
 8008c14:	2100      	movs	r1, #0
 8008c16:	f7fc ff73 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008c1a:	2002      	movs	r0, #2
 8008c1c:	f7fc fc8e 	bl	800553c <LTDC_ReloadConfig>
 8008c20:	e012      	b.n	8008c48 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3b10      	subs	r3, #16
 8008c26:	2b07      	cmp	r3, #7
 8008c28:	d807      	bhi.n	8008c3a <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8008c2a:	482f      	ldr	r0, [pc, #188]	; (8008ce8 <LCD_WriteBMP+0x1d8>)
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	f7fc ff67 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008c32:	2002      	movs	r0, #2
 8008c34:	f7fc fc82 	bl	800553c <LTDC_ReloadConfig>
 8008c38:	e006      	b.n	8008c48 <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8008c3a:	482b      	ldr	r0, [pc, #172]	; (8008ce8 <LCD_WriteBMP+0x1d8>)
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	f7fc ff5f 	bl	8005b00 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 8008c42:	2002      	movs	r0, #2
 8008c44:	f7fc fc7a 	bl	800553c <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	4413      	add	r3, r2
 8008c56:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	08d2      	lsrs	r2, r2, #3
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	6a3a      	ldr	r2, [r7, #32]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
 8008c74:	e02a      	b.n	8008ccc <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	607b      	str	r3, [r7, #4]
    Address++;
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	623b      	str	r3, [r7, #32]
    currentline++;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d111      	bne.n	8008cc6 <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d20d      	bcs.n	8008cc6 <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	3301      	adds	r3, #1
 8008cae:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	08db      	lsrs	r3, r3, #3
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	fb02 f303 	mul.w	r3, r2, r3
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	6a3a      	ldr	r2, [r7, #32]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	623b      	str	r3, [r7, #32]
        currentline = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	3301      	adds	r3, #1
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
 8008ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d3d0      	bcc.n	8008c76 <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 8008cd4:	3728      	adds	r7, #40	; 0x28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000058 	andcs	r0, r0, r8, asr r0
 8008ce0:	200004dc 	ldrdcs	r0, [r0], -ip
 8008ce4:	40016884 	andmi	r6, r1, r4, lsl #17
 8008ce8:	40016904 	andmi	r6, r1, r4, lsl #18

08008cec <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b090      	sub	sp, #64	; 0x40
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	80f8      	strh	r0, [r7, #6]
 8008cf4:	80b9      	strh	r1, [r7, #4]
 8008cf6:	807a      	strh	r2, [r7, #2]
 8008cf8:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008d02:	2300      	movs	r3, #0
 8008d04:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d06:	2300      	movs	r3, #0
 8008d08:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8008d0a:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <LCD_DrawFullRect+0xb8>)
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	0adb      	lsrs	r3, r3, #11
 8008d10:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <LCD_DrawFullRect+0xb8>)
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8008d1c:	4b21      	ldr	r3, [pc, #132]	; (8008da4 <LCD_DrawFullRect+0xb8>)
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8008d2a:	88ba      	ldrh	r2, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	461a      	mov	r2, r3
 8008d36:	88fb      	ldrh	r3, [r7, #6]
 8008d38:	4413      	add	r3, r2
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <LCD_DrawFullRect+0xbc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4413      	add	r3, r2
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8008d46:	f7fb ff5b 	bl	8004c00 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8008d4a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008d4e:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8008d50:	2302      	movs	r3, #2
 8008d52:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8008d54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d56:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8008d58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d5a:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8008d5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d5e:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8008d60:	230f      	movs	r3, #15
 8008d62:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8008d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8008d68:	887b      	ldrh	r3, [r7, #2]
 8008d6a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 8008d70:	883b      	ldrh	r3, [r7, #0]
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8008d74:	887b      	ldrh	r3, [r7, #2]
 8008d76:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 8008d78:	f107 030c 	add.w	r3, r7, #12
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fb ff4d 	bl	8004c1c <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 8008d82:	f7fc f821 	bl	8004dc8 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8008d86:	bf00      	nop
 8008d88:	2002      	movs	r0, #2
 8008d8a:	f7fc fa13 	bl	80051b4 <DMA2D_GetFlagStatus>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0f9      	beq.n	8008d88 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 8008d94:	4b03      	ldr	r3, [pc, #12]	; (8008da4 <LCD_DrawFullRect+0xb8>)
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe fffb 	bl	8007d94 <LCD_SetTextColor>
}
 8008d9e:	3740      	adds	r7, #64	; 0x40
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200004d8 	ldrdcs	r0, [r0], -r8
 8008da8:	20000058 	andcs	r0, r0, r8, asr r0

08008dac <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4613      	mov	r3, r2
 8008db4:	4602      	mov	r2, r0
 8008db6:	80fa      	strh	r2, [r7, #6]
 8008db8:	460a      	mov	r2, r1
 8008dba:	80ba      	strh	r2, [r7, #4]
 8008dbc:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008dbe:	887b      	ldrh	r3, [r7, #2]
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	f1c3 0303 	rsb	r3, r3, #3
 8008dc6:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8008dd0:	e06d      	b.n	8008eae <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d027      	beq.n	8008e28 <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	88fa      	ldrh	r2, [r7, #6]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	b299      	uxth	r1, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	88ba      	ldrh	r2, [r7, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f7ff fa18 	bl	8008230 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	4413      	add	r3, r2
 8008e08:	b299      	uxth	r1, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	88ba      	ldrh	r2, [r7, #4]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	2301      	movs	r3, #1
 8008e24:	f7ff fa04 	bl	8008230 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d027      	beq.n	8008e7e <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	b299      	uxth	r1, r3
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	88ba      	ldrh	r2, [r7, #4]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4608      	mov	r0, r1
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2301      	movs	r3, #1
 8008e52:	f7ff f9ed 	bl	8008230 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	b299      	uxth	r1, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	88ba      	ldrh	r2, [r7, #4]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	4608      	mov	r0, r1
 8008e74:	4611      	mov	r1, r2
 8008e76:	461a      	mov	r2, r3
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f7ff f9d9 	bl	8008230 <LCD_DrawLine>
    }
    if (D < 0)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da06      	bge.n	8008e92 <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	009a      	lsls	r2, r3, #2
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3306      	adds	r3, #6
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e00a      	b.n	8008ea8 <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	009a      	lsls	r2, r3, #2
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	330a      	adds	r3, #10
 8008ea0:	617b      	str	r3, [r7, #20]
      CurY--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d98d      	bls.n	8008dd2 <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 8008eb6:	88f9      	ldrh	r1, [r7, #6]
 8008eb8:	88ba      	ldrh	r2, [r7, #4]
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f7ff fa4d 	bl	8008360 <LCD_DrawCircle>
}
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	80f8      	strh	r0, [r7, #6]
 8008ed4:	80b9      	strh	r1, [r7, #4]
 8008ed6:	807a      	strh	r2, [r7, #2]
 8008ed8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8008eda:	2300      	movs	r3, #0
 8008edc:	823b      	strh	r3, [r7, #16]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	81fb      	strh	r3, [r7, #14]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008eea:	2300      	movs	r3, #0
 8008eec:	847b      	strh	r3, [r7, #34]	; 0x22
 8008eee:	2300      	movs	r3, #0
 8008ef0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	83fb      	strh	r3, [r7, #30]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	83bb      	strh	r3, [r7, #28]
 8008efa:	2300      	movs	r3, #0
 8008efc:	837b      	strh	r3, [r7, #26]
 8008efe:	2300      	movs	r3, #0
 8008f00:	833b      	strh	r3, [r7, #24]
 8008f02:	2300      	movs	r3, #0
 8008f04:	82fb      	strh	r3, [r7, #22]
 8008f06:	2300      	movs	r3, #0
 8008f08:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8008f0e:	887a      	ldrh	r2, [r7, #2]
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfb8      	it	lt
 8008f18:	425b      	neglt	r3, r3
 8008f1a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8008f1c:	883a      	ldrh	r2, [r7, #0]
 8008f1e:	88bb      	ldrh	r3, [r7, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfb8      	it	lt
 8008f26:	425b      	neglt	r3, r3
 8008f28:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8008f2e:	88bb      	ldrh	r3, [r7, #4]
 8008f30:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8008f32:	887a      	ldrh	r2, [r7, #2]
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d304      	bcc.n	8008f44 <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	843b      	strh	r3, [r7, #32]
 8008f42:	e005      	b.n	8008f50 <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8008f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f48:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8008f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f4e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8008f50:	883a      	ldrh	r2, [r7, #0]
 8008f52:	88bb      	ldrh	r3, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d304      	bcc.n	8008f62 <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	83bb      	strh	r3, [r7, #28]
 8008f60:	e005      	b.n	8008f6e <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8008f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f66:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8008f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f6c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8008f6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	db10      	blt.n	8008f9c <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8008f7e:	2300      	movs	r3, #0
 8008f80:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8008f82:	8a3b      	ldrh	r3, [r7, #16]
 8008f84:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8008f86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008f8a:	0fda      	lsrs	r2, r3, #31
 8008f8c:	4413      	add	r3, r2
 8008f8e:	105b      	asrs	r3, r3, #1
 8008f90:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8008f92:	89fb      	ldrh	r3, [r7, #14]
 8008f94:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8008f96:	8a3b      	ldrh	r3, [r7, #16]
 8008f98:	82bb      	strh	r3, [r7, #20]
 8008f9a:	e00f      	b.n	8008fbc <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8008fa4:	89fb      	ldrh	r3, [r7, #14]
 8008fa6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8008fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008fac:	0fda      	lsrs	r2, r3, #31
 8008fae:	4413      	add	r3, r2
 8008fb0:	105b      	asrs	r3, r3, #1
 8008fb2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8008fb4:	8a3b      	ldrh	r3, [r7, #16]
 8008fb6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	827b      	strh	r3, [r7, #18]
 8008fc0:	e02e      	b.n	8009020 <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8008fc2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8008fc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f000 fdc5 	bl	8009b5c <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8008fd2:	8b3a      	ldrh	r2, [r7, #24]
 8008fd4:	8afb      	ldrh	r3, [r7, #22]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8008fdc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008fe0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	db0e      	blt.n	8009006 <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 8008fe8:	8b3a      	ldrh	r2, [r7, #24]
 8008fea:	8b7b      	ldrh	r3, [r7, #26]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8008ff2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ff6:	4413      	add	r3, r2
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8008ffc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ffe:	8bfb      	ldrh	r3, [r7, #30]
 8009000:	4413      	add	r3, r2
 8009002:	b29b      	uxth	r3, r3
 8009004:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8009006:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009008:	8c3b      	ldrh	r3, [r7, #32]
 800900a:	4413      	add	r3, r2
 800900c:	b29b      	uxth	r3, r3
 800900e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8009010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009012:	8bbb      	ldrh	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	b29b      	uxth	r3, r3
 8009018:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800901a:	8a7b      	ldrh	r3, [r7, #18]
 800901c:	3301      	adds	r3, #1
 800901e:	827b      	strh	r3, [r7, #18]
 8009020:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009024:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009028:	429a      	cmp	r2, r3
 800902a:	ddca      	ble.n	8008fc2 <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 800902c:	3728      	adds	r7, #40	; 0x28
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop

08009034 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	81fb      	strh	r3, [r7, #14]
 8009044:	2300      	movs	r3, #0
 8009046:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 800904c:	887b      	ldrh	r3, [r7, #2]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d000      	beq.n	8009054 <LCD_Triangle+0x20>
  {
    return;
 8009052:	e027      	b.n	80090a4 <LCD_Triangle+0x70>
  }

  while(--PointCount)
 8009054:	e012      	b.n	800907c <LCD_Triangle+0x48>
  {
    X = Points->X;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	81bb      	strh	r3, [r7, #12]
    Points++;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3304      	adds	r3, #4
 8009066:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8009068:	89f8      	ldrh	r0, [r7, #14]
 800906a:	89b9      	ldrh	r1, [r7, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	b29b      	uxth	r3, r3
 8009078:	f7ff ff28 	bl	8008ecc <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 800907c:	887b      	ldrh	r3, [r7, #2]
 800907e:	3b01      	subs	r3, #1
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	887b      	ldrh	r3, [r7, #2]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e6      	bne.n	8009056 <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	b298      	uxth	r0, r3
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	b299      	uxth	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	885b      	ldrh	r3, [r3, #2]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f7ff ff14 	bl	8008ecc <LCD_DrawUniLine>
}
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop

080090ac <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	; 0x28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	80f8      	strh	r0, [r7, #6]
 80090b4:	80b9      	strh	r1, [r7, #4]
 80090b6:	807a      	strh	r2, [r7, #2]
 80090b8:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80090ba:	2300      	movs	r3, #0
 80090bc:	823b      	strh	r3, [r7, #16]
 80090be:	2300      	movs	r3, #0
 80090c0:	81fb      	strh	r3, [r7, #14]
 80090c2:	2300      	movs	r3, #0
 80090c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80090c6:	2300      	movs	r3, #0
 80090c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80090ca:	2300      	movs	r3, #0
 80090cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80090ce:	2300      	movs	r3, #0
 80090d0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80090d2:	2300      	movs	r3, #0
 80090d4:	83fb      	strh	r3, [r7, #30]
 80090d6:	2300      	movs	r3, #0
 80090d8:	83bb      	strh	r3, [r7, #28]
 80090da:	2300      	movs	r3, #0
 80090dc:	837b      	strh	r3, [r7, #26]
 80090de:	2300      	movs	r3, #0
 80090e0:	833b      	strh	r3, [r7, #24]
 80090e2:	2300      	movs	r3, #0
 80090e4:	82fb      	strh	r3, [r7, #22]
 80090e6:	2300      	movs	r3, #0
 80090e8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80090ee:	88ba      	ldrh	r2, [r7, #4]
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bfb8      	it	lt
 80090f8:	425b      	neglt	r3, r3
 80090fa:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80090fc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80090fe:	883b      	ldrh	r3, [r7, #0]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfb8      	it	lt
 8009106:	425b      	neglt	r3, r3
 8009108:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800910e:	883b      	ldrh	r3, [r7, #0]
 8009110:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8009112:	88ba      	ldrh	r2, [r7, #4]
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	429a      	cmp	r2, r3
 8009118:	d304      	bcc.n	8009124 <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 800911a:	2301      	movs	r3, #1
 800911c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800911e:	2301      	movs	r3, #1
 8009120:	843b      	strh	r3, [r7, #32]
 8009122:	e005      	b.n	8009130 <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8009124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009128:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800912a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800912e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8009130:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009132:	883b      	ldrh	r3, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d304      	bcc.n	8009142 <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 8009138:	2301      	movs	r3, #1
 800913a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800913c:	2301      	movs	r3, #1
 800913e:	83bb      	strh	r3, [r7, #28]
 8009140:	e005      	b.n	800914e <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8009142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009146:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8009148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800914c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800914e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009156:	429a      	cmp	r2, r3
 8009158:	db10      	blt.n	800917c <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800915a:	2300      	movs	r3, #0
 800915c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800915e:	2300      	movs	r3, #0
 8009160:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8009162:	8a3b      	ldrh	r3, [r7, #16]
 8009164:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8009166:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800916a:	0fda      	lsrs	r2, r3, #31
 800916c:	4413      	add	r3, r2
 800916e:	105b      	asrs	r3, r3, #1
 8009170:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8009172:	89fb      	ldrh	r3, [r7, #14]
 8009174:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8009176:	8a3b      	ldrh	r3, [r7, #16]
 8009178:	82bb      	strh	r3, [r7, #20]
 800917a:	e00f      	b.n	800919c <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800917c:	2300      	movs	r3, #0
 800917e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8009180:	2300      	movs	r3, #0
 8009182:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8009184:	89fb      	ldrh	r3, [r7, #14]
 8009186:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8009188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800918c:	0fda      	lsrs	r2, r3, #31
 800918e:	4413      	add	r3, r2
 8009190:	105b      	asrs	r3, r3, #1
 8009192:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8009194:	8a3b      	ldrh	r3, [r7, #16]
 8009196:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8009198:	89fb      	ldrh	r3, [r7, #14]
 800919a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800919c:	2300      	movs	r3, #0
 800919e:	827b      	strh	r3, [r7, #18]
 80091a0:	e02c      	b.n	80091fc <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 80091a2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80091a4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80091a6:	887a      	ldrh	r2, [r7, #2]
 80091a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80091aa:	f7ff fe8f 	bl	8008ecc <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80091ae:	8b3a      	ldrh	r2, [r7, #24]
 80091b0:	8afb      	ldrh	r3, [r7, #22]
 80091b2:	4413      	add	r3, r2
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80091b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80091bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	db0e      	blt.n	80091e2 <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 80091c4:	8b3a      	ldrh	r2, [r7, #24]
 80091c6:	8b7b      	ldrh	r3, [r7, #26]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80091ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091d2:	4413      	add	r3, r2
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80091d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091da:	8bfb      	ldrh	r3, [r7, #30]
 80091dc:	4413      	add	r3, r2
 80091de:	b29b      	uxth	r3, r3
 80091e0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80091e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091e4:	8c3b      	ldrh	r3, [r7, #32]
 80091e6:	4413      	add	r3, r2
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80091ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091ee:	8bbb      	ldrh	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80091f6:	8a7b      	ldrh	r3, [r7, #18]
 80091f8:	3301      	adds	r3, #1
 80091fa:	827b      	strh	r3, [r7, #18]
 80091fc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009200:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009204:	429a      	cmp	r2, r3
 8009206:	ddcc      	ble.n	80091a2 <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 8009208:	3728      	adds	r7, #40	; 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop

08009210 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	81fb      	strh	r3, [r7, #14]
 8009220:	2300      	movs	r3, #0
 8009222:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8009224:	887b      	ldrh	r3, [r7, #2]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d800      	bhi.n	800922c <LCD_PolyLine+0x1c>
  {
    return;
 800922a:	e019      	b.n	8009260 <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 800922c:	e012      	b.n	8009254 <LCD_PolyLine+0x44>
  {
    X = Points->X;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	885b      	ldrh	r3, [r3, #2]
 8009238:	81bb      	strh	r3, [r7, #12]
    Points++;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8009240:	89f8      	ldrh	r0, [r7, #14]
 8009242:	89b9      	ldrh	r1, [r7, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	885b      	ldrh	r3, [r3, #2]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f7ff fe3c 	bl	8008ecc <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8009254:	887b      	ldrh	r3, [r7, #2]
 8009256:	3b01      	subs	r3, #1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	887b      	ldrh	r3, [r7, #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e6      	bne.n	800922e <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop

08009268 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	460a      	mov	r2, r1
 8009274:	807a      	strh	r2, [r7, #2]
 8009276:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	81fb      	strh	r3, [r7, #14]
 800927c:	2300      	movs	r3, #0
 800927e:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8009284:	887b      	ldrh	r3, [r7, #2]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d800      	bhi.n	800928c <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 800928a:	e03a      	b.n	8009302 <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8009298:	e020      	b.n	80092dc <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3304      	adds	r3, #4
 800929e:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 80092a0:	89f8      	ldrh	r0, [r7, #14]
 80092a2:	89b9      	ldrh	r1, [r7, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	4413      	add	r3, r2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	885b      	ldrh	r3, [r3, #2]
 80092b4:	b29c      	uxth	r4, r3
 80092b6:	89bb      	ldrh	r3, [r7, #12]
 80092b8:	4423      	add	r3, r4
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f7ff fe06 	bl	8008ecc <LCD_DrawUniLine>
    X = X + Points->X;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	89fb      	ldrh	r3, [r7, #14]
 80092c8:	4413      	add	r3, r2
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	885b      	ldrh	r3, [r3, #2]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	89bb      	ldrh	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	b29b      	uxth	r3, r3
 80092da:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 80092dc:	887b      	ldrh	r3, [r7, #2]
 80092de:	3b01      	subs	r3, #1
 80092e0:	807b      	strh	r3, [r7, #2]
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1d8      	bne.n	800929a <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 80092e8:	883b      	ldrh	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b298      	uxth	r0, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	885b      	ldrh	r3, [r3, #2]
 80092f8:	b299      	uxth	r1, r3
 80092fa:	89fa      	ldrh	r2, [r7, #14]
 80092fc:	89bb      	ldrh	r3, [r7, #12]
 80092fe:	f7ff fde5 	bl	8008ecc <LCD_DrawUniLine>
  }  
}
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	bd90      	pop	{r4, r7, pc}

08009308 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8009314:	887b      	ldrh	r3, [r7, #2]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4619      	mov	r1, r3
 800931a:	f7ff ff79 	bl	8009210 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	b298      	uxth	r0, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	885b      	ldrh	r3, [r3, #2]
 8009328:	b299      	uxth	r1, r3
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009330:	3b01      	subs	r3, #1
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	4413      	add	r3, r2
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29a      	uxth	r2, r3
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009342:	3b01      	subs	r3, #1
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	687c      	ldr	r4, [r7, #4]
 8009348:	4423      	add	r3, r4
 800934a:	885b      	ldrh	r3, [r3, #2]
 800934c:	b29b      	uxth	r3, r3
 800934e:	f7ff fdbd 	bl	8008ecc <LCD_DrawUniLine>
}
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	bd90      	pop	{r4, r7, pc}

08009358 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8009364:	887b      	ldrh	r3, [r7, #2]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4619      	mov	r1, r3
 800936a:	2200      	movs	r2, #0
 800936c:	f7ff ff7c 	bl	8009268 <LCD_PolyLineRelativeClosed>
}
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop

08009378 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8009384:	887b      	ldrh	r3, [r7, #2]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4619      	mov	r1, r3
 800938a:	2201      	movs	r2, #1
 800938c:	f7ff ff6c 	bl	8009268 <LCD_PolyLineRelativeClosed>
}
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop

08009398 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8009398:	b5b0      	push	{r4, r5, r7, lr}
 800939a:	b08c      	sub	sp, #48	; 0x30
 800939c:	af02      	add	r7, sp, #8
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	833b      	strh	r3, [r7, #24]
 80093a8:	2300      	movs	r3, #0
 80093aa:	82fb      	strh	r3, [r7, #22]
 80093ac:	2300      	movs	r3, #0
 80093ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80093b0:	2300      	movs	r3, #0
 80093b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80093b4:	2300      	movs	r3, #0
 80093b6:	82bb      	strh	r3, [r7, #20]
 80093b8:	2300      	movs	r3, #0
 80093ba:	827b      	strh	r3, [r7, #18]
 80093bc:	2300      	movs	r3, #0
 80093be:	823b      	strh	r3, [r7, #16]
 80093c0:	2300      	movs	r3, #0
 80093c2:	81fb      	strh	r3, [r7, #14]
 80093c4:	2300      	movs	r3, #0
 80093c6:	81bb      	strh	r3, [r7, #12]
 80093c8:	2300      	movs	r3, #0
 80093ca:	817b      	strh	r3, [r7, #10]
 80093cc:	2300      	movs	r3, #0
 80093ce:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 80093d0:	2300      	movs	r3, #0
 80093d2:	843b      	strh	r3, [r7, #32]
 80093d4:	2300      	movs	r3, #0
 80093d6:	83fb      	strh	r3, [r7, #30]
 80093d8:	2300      	movs	r3, #0
 80093da:	83bb      	strh	r3, [r7, #28]
 80093dc:	2300      	movs	r3, #0
 80093de:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	83fb      	strh	r3, [r7, #30]
 80093e6:	8bfb      	ldrh	r3, [r7, #30]
 80093e8:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	837b      	strh	r3, [r7, #26]
 80093f0:	8b7b      	ldrh	r3, [r7, #26]
 80093f2:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 80093f4:	2301      	movs	r3, #1
 80093f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80093f8:	e02c      	b.n	8009454 <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 80093fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	4413      	add	r3, r2
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8009408:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800940c:	8c3b      	ldrh	r3, [r7, #32]
 800940e:	429a      	cmp	r2, r3
 8009410:	da01      	bge.n	8009416 <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 8009412:	89bb      	ldrh	r3, [r7, #12]
 8009414:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8009416:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800941a:	8bfb      	ldrh	r3, [r7, #30]
 800941c:	429a      	cmp	r2, r3
 800941e:	dd01      	ble.n	8009424 <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 8009420:	89bb      	ldrh	r3, [r7, #12]
 8009422:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8009424:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 8009432:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009436:	8bbb      	ldrh	r3, [r7, #28]
 8009438:	429a      	cmp	r2, r3
 800943a:	da01      	bge.n	8009440 <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 800943c:	897b      	ldrh	r3, [r7, #10]
 800943e:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 8009440:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009444:	8b7b      	ldrh	r3, [r7, #26]
 8009446:	429a      	cmp	r2, r3
 8009448:	dd01      	ble.n	800944e <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 800944a:	897b      	ldrh	r3, [r7, #10]
 800944c:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 800944e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009450:	3301      	adds	r3, #1
 8009452:	847b      	strh	r3, [r7, #34]	; 0x22
 8009454:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009458:	887b      	ldrh	r3, [r7, #2]
 800945a:	429a      	cmp	r2, r3
 800945c:	dbcd      	blt.n	80093fa <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 800945e:	887b      	ldrh	r3, [r7, #2]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d800      	bhi.n	8009466 <LCD_FillPolyLine+0xce>
  {
    return;
 8009464:	e065      	b.n	8009532 <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8009466:	8c3a      	ldrh	r2, [r7, #32]
 8009468:	8bfb      	ldrh	r3, [r7, #30]
 800946a:	4413      	add	r3, r2
 800946c:	0fda      	lsrs	r2, r3, #31
 800946e:	4413      	add	r3, r2
 8009470:	105b      	asrs	r3, r3, #1
 8009472:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8009474:	8b7a      	ldrh	r2, [r7, #26]
 8009476:	8bbb      	ldrh	r3, [r7, #28]
 8009478:	4413      	add	r3, r2
 800947a:	0fda      	lsrs	r2, r3, #31
 800947c:	4413      	add	r3, r2
 800947e:	105b      	asrs	r3, r3, #1
 8009480:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	885b      	ldrh	r3, [r3, #2]
 800948c:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800948e:	e02c      	b.n	80094ea <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	82fb      	strh	r3, [r7, #22]
    Points++;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3304      	adds	r3, #4
 80094a0:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	885b      	ldrh	r3, [r3, #2]
 80094ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80094ae:	8b38      	ldrh	r0, [r7, #24]
 80094b0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80094b2:	8aba      	ldrh	r2, [r7, #20]
 80094b4:	8afb      	ldrh	r3, [r7, #22]
 80094b6:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80094b8:	8a7c      	ldrh	r4, [r7, #18]
 80094ba:	9500      	str	r5, [sp, #0]
 80094bc:	9401      	str	r4, [sp, #4]
 80094be:	f7ff fdf5 	bl	80090ac <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80094c2:	8b38      	ldrh	r0, [r7, #24]
 80094c4:	8ab9      	ldrh	r1, [r7, #20]
 80094c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80094c8:	8afb      	ldrh	r3, [r7, #22]
 80094ca:	8a7d      	ldrh	r5, [r7, #18]
 80094cc:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80094ce:	9500      	str	r5, [sp, #0]
 80094d0:	9401      	str	r4, [sp, #4]
 80094d2:	f7ff fdeb 	bl	80090ac <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80094d6:	8ab8      	ldrh	r0, [r7, #20]
 80094d8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80094da:	8b3a      	ldrh	r2, [r7, #24]
 80094dc:	8a7b      	ldrh	r3, [r7, #18]
 80094de:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80094e0:	8afc      	ldrh	r4, [r7, #22]
 80094e2:	9500      	str	r5, [sp, #0]
 80094e4:	9401      	str	r4, [sp, #4]
 80094e6:	f7ff fde1 	bl	80090ac <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	807b      	strh	r3, [r7, #2]
 80094f0:	887b      	ldrh	r3, [r7, #2]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1cc      	bne.n	8009490 <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80094f6:	8a38      	ldrh	r0, [r7, #16]
 80094f8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80094fa:	8aba      	ldrh	r2, [r7, #20]
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009500:	8a7c      	ldrh	r4, [r7, #18]
 8009502:	9500      	str	r5, [sp, #0]
 8009504:	9401      	str	r4, [sp, #4]
 8009506:	f7ff fdd1 	bl	80090ac <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 800950a:	8a38      	ldrh	r0, [r7, #16]
 800950c:	8ab9      	ldrh	r1, [r7, #20]
 800950e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009510:	89fb      	ldrh	r3, [r7, #14]
 8009512:	8a7d      	ldrh	r5, [r7, #18]
 8009514:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8009516:	9500      	str	r5, [sp, #0]
 8009518:	9401      	str	r4, [sp, #4]
 800951a:	f7ff fdc7 	bl	80090ac <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 800951e:	8ab8      	ldrh	r0, [r7, #20]
 8009520:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009522:	8a3a      	ldrh	r2, [r7, #16]
 8009524:	8a7b      	ldrh	r3, [r7, #18]
 8009526:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009528:	89fc      	ldrh	r4, [r7, #14]
 800952a:	9500      	str	r5, [sp, #0]
 800952c:	9401      	str	r4, [sp, #4]
 800952e:	f7ff fdbd 	bl	80090ac <LCD_FillTriangle>
}
 8009532:	3728      	adds	r7, #40	; 0x28
 8009534:	46bd      	mov	sp, r7
 8009536:	bdb0      	pop	{r4, r5, r7, pc}

08009538 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 8009542:	4812      	ldr	r0, [pc, #72]	; (800958c <LCD_WriteCommand+0x54>)
 8009544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009548:	2200      	movs	r2, #0
 800954a:	f000 f9cf 	bl	80098ec <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 800954e:	2000      	movs	r0, #0
 8009550:	f7fe fbbe 	bl	8007cd0 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	b29b      	uxth	r3, r3
 8009558:	480d      	ldr	r0, [pc, #52]	; (8009590 <LCD_WriteCommand+0x58>)
 800955a:	4619      	mov	r1, r3
 800955c:	f7fb f912 	bl	8004784 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8009560:	bf00      	nop
 8009562:	480b      	ldr	r0, [pc, #44]	; (8009590 <LCD_WriteCommand+0x58>)
 8009564:	2102      	movs	r1, #2
 8009566:	f7fb f9c9 	bl	80048fc <SPI_I2S_GetFlagStatus>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0f8      	beq.n	8009562 <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8009570:	bf00      	nop
 8009572:	4807      	ldr	r0, [pc, #28]	; (8009590 <LCD_WriteCommand+0x58>)
 8009574:	2180      	movs	r1, #128	; 0x80
 8009576:	f7fb f9c1 	bl	80048fc <SPI_I2S_GetFlagStatus>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1f8      	bne.n	8009572 <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8009580:	2001      	movs	r0, #1
 8009582:	f7fe fba5 	bl	8007cd0 <LCD_ChipSelect>
}
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8009590:	40015000 	andmi	r5, r1, r0

08009594 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 800959e:	4812      	ldr	r0, [pc, #72]	; (80095e8 <LCD_WriteData+0x54>)
 80095a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80095a4:	2201      	movs	r2, #1
 80095a6:	f000 f9a1 	bl	80098ec <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80095aa:	2000      	movs	r0, #0
 80095ac:	f7fe fb90 	bl	8007cd0 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	480d      	ldr	r0, [pc, #52]	; (80095ec <LCD_WriteData+0x58>)
 80095b6:	4619      	mov	r1, r3
 80095b8:	f7fb f8e4 	bl	8004784 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80095bc:	bf00      	nop
 80095be:	480b      	ldr	r0, [pc, #44]	; (80095ec <LCD_WriteData+0x58>)
 80095c0:	2102      	movs	r1, #2
 80095c2:	f7fb f99b 	bl	80048fc <SPI_I2S_GetFlagStatus>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f8      	beq.n	80095be <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80095cc:	bf00      	nop
 80095ce:	4807      	ldr	r0, [pc, #28]	; (80095ec <LCD_WriteData+0x58>)
 80095d0:	2180      	movs	r1, #128	; 0x80
 80095d2:	f7fb f993 	bl	80048fc <SPI_I2S_GetFlagStatus>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f8      	bne.n	80095ce <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80095dc:	2001      	movs	r0, #1
 80095de:	f7fe fb77 	bl	8007cd0 <LCD_ChipSelect>
}
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	40020c00 	andmi	r0, r2, r0, lsl #24
 80095ec:	40015000 	andmi	r5, r1, r0

080095f0 <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 80095f4:	20ca      	movs	r0, #202	; 0xca
 80095f6:	f7ff ff9f 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 80095fa:	20c3      	movs	r0, #195	; 0xc3
 80095fc:	f7ff ffca 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x08);
 8009600:	2008      	movs	r0, #8
 8009602:	f7ff ffc7 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x50);
 8009606:	2050      	movs	r0, #80	; 0x50
 8009608:	f7ff ffc4 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 800960c:	20cf      	movs	r0, #207	; 0xcf
 800960e:	f7ff ff93 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009612:	2000      	movs	r0, #0
 8009614:	f7ff ffbe 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8009618:	20c1      	movs	r0, #193	; 0xc1
 800961a:	f7ff ffbb 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x30);
 800961e:	2030      	movs	r0, #48	; 0x30
 8009620:	f7ff ffb8 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8009624:	20ed      	movs	r0, #237	; 0xed
 8009626:	f7ff ff87 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 800962a:	2064      	movs	r0, #100	; 0x64
 800962c:	f7ff ffb2 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x03);
 8009630:	2003      	movs	r0, #3
 8009632:	f7ff ffaf 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x12);
 8009636:	2012      	movs	r0, #18
 8009638:	f7ff ffac 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x81);
 800963c:	2081      	movs	r0, #129	; 0x81
 800963e:	f7ff ffa9 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 8009642:	20e8      	movs	r0, #232	; 0xe8
 8009644:	f7ff ff78 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8009648:	2085      	movs	r0, #133	; 0x85
 800964a:	f7ff ffa3 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 800964e:	2000      	movs	r0, #0
 8009650:	f7ff ffa0 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x78);
 8009654:	2078      	movs	r0, #120	; 0x78
 8009656:	f7ff ff9d 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 800965a:	20cb      	movs	r0, #203	; 0xcb
 800965c:	f7ff ff6c 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8009660:	2039      	movs	r0, #57	; 0x39
 8009662:	f7ff ff97 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8009666:	202c      	movs	r0, #44	; 0x2c
 8009668:	f7ff ff94 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 800966c:	2000      	movs	r0, #0
 800966e:	f7ff ff91 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x34);
 8009672:	2034      	movs	r0, #52	; 0x34
 8009674:	f7ff ff8e 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x02);
 8009678:	2002      	movs	r0, #2
 800967a:	f7ff ff8b 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 800967e:	20f7      	movs	r0, #247	; 0xf7
 8009680:	f7ff ff5a 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8009684:	2020      	movs	r0, #32
 8009686:	f7ff ff85 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 800968a:	20ea      	movs	r0, #234	; 0xea
 800968c:	f7ff ff54 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009690:	2000      	movs	r0, #0
 8009692:	f7ff ff7f 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 8009696:	2000      	movs	r0, #0
 8009698:	f7ff ff7c 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 800969c:	20b1      	movs	r0, #177	; 0xb1
 800969e:	f7ff ff4b 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7ff ff76 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80096a8:	201b      	movs	r0, #27
 80096aa:	f7ff ff73 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80096ae:	20b6      	movs	r0, #182	; 0xb6
 80096b0:	f7ff ff42 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80096b4:	200a      	movs	r0, #10
 80096b6:	f7ff ff6d 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0xA2);
 80096ba:	20a2      	movs	r0, #162	; 0xa2
 80096bc:	f7ff ff6a 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 80096c0:	20c0      	movs	r0, #192	; 0xc0
 80096c2:	f7ff ff39 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80096c6:	2010      	movs	r0, #16
 80096c8:	f7ff ff64 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 80096cc:	20c1      	movs	r0, #193	; 0xc1
 80096ce:	f7ff ff33 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80096d2:	2010      	movs	r0, #16
 80096d4:	f7ff ff5e 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 80096d8:	20c5      	movs	r0, #197	; 0xc5
 80096da:	f7ff ff2d 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 80096de:	2045      	movs	r0, #69	; 0x45
 80096e0:	f7ff ff58 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x15);
 80096e4:	2015      	movs	r0, #21
 80096e6:	f7ff ff55 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 80096ea:	20c7      	movs	r0, #199	; 0xc7
 80096ec:	f7ff ff24 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 80096f0:	2090      	movs	r0, #144	; 0x90
 80096f2:	f7ff ff4f 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 80096f6:	2036      	movs	r0, #54	; 0x36
 80096f8:	f7ff ff1e 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 80096fc:	20c8      	movs	r0, #200	; 0xc8
 80096fe:	f7ff ff49 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8009702:	20f2      	movs	r0, #242	; 0xf2
 8009704:	f7ff ff18 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009708:	2000      	movs	r0, #0
 800970a:	f7ff ff43 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 800970e:	20b0      	movs	r0, #176	; 0xb0
 8009710:	f7ff ff12 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8009714:	20c2      	movs	r0, #194	; 0xc2
 8009716:	f7ff ff3d 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 800971a:	20b6      	movs	r0, #182	; 0xb6
 800971c:	f7ff ff0c 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8009720:	200a      	movs	r0, #10
 8009722:	f7ff ff37 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8009726:	20a7      	movs	r0, #167	; 0xa7
 8009728:	f7ff ff34 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x27);
 800972c:	2027      	movs	r0, #39	; 0x27
 800972e:	f7ff ff31 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x04);
 8009732:	2004      	movs	r0, #4
 8009734:	f7ff ff2e 	bl	8009594 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8009738:	202a      	movs	r0, #42	; 0x2a
 800973a:	f7ff fefd 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800973e:	2000      	movs	r0, #0
 8009740:	f7ff ff28 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 8009744:	2000      	movs	r0, #0
 8009746:	f7ff ff25 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 800974a:	2000      	movs	r0, #0
 800974c:	f7ff ff22 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8009750:	20ef      	movs	r0, #239	; 0xef
 8009752:	f7ff ff1f 	bl	8009594 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8009756:	202b      	movs	r0, #43	; 0x2b
 8009758:	f7ff feee 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800975c:	2000      	movs	r0, #0
 800975e:	f7ff ff19 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 8009762:	2000      	movs	r0, #0
 8009764:	f7ff ff16 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x01);
 8009768:	2001      	movs	r0, #1
 800976a:	f7ff ff13 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x3F);
 800976e:	203f      	movs	r0, #63	; 0x3f
 8009770:	f7ff ff10 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8009774:	20f6      	movs	r0, #246	; 0xf6
 8009776:	f7ff fedf 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 800977a:	2001      	movs	r0, #1
 800977c:	f7ff ff0a 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 8009780:	2000      	movs	r0, #0
 8009782:	f7ff ff07 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x06);
 8009786:	2006      	movs	r0, #6
 8009788:	f7ff ff04 	bl	8009594 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 800978c:	202c      	movs	r0, #44	; 0x2c
 800978e:	f7ff fed3 	bl	8009538 <LCD_WriteCommand>
  delay(200);
 8009792:	20c8      	movs	r0, #200	; 0xc8
 8009794:	f000 fa06 	bl	8009ba4 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8009798:	2026      	movs	r0, #38	; 0x26
 800979a:	f7ff fecd 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 800979e:	2001      	movs	r0, #1
 80097a0:	f7ff fef8 	bl	8009594 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80097a4:	20e0      	movs	r0, #224	; 0xe0
 80097a6:	f7ff fec7 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80097aa:	200f      	movs	r0, #15
 80097ac:	f7ff fef2 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x29);
 80097b0:	2029      	movs	r0, #41	; 0x29
 80097b2:	f7ff feef 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x24);
 80097b6:	2024      	movs	r0, #36	; 0x24
 80097b8:	f7ff feec 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80097bc:	200c      	movs	r0, #12
 80097be:	f7ff fee9 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x0E);
 80097c2:	200e      	movs	r0, #14
 80097c4:	f7ff fee6 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x09);
 80097c8:	2009      	movs	r0, #9
 80097ca:	f7ff fee3 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x4E);
 80097ce:	204e      	movs	r0, #78	; 0x4e
 80097d0:	f7ff fee0 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x78);
 80097d4:	2078      	movs	r0, #120	; 0x78
 80097d6:	f7ff fedd 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x3C);
 80097da:	203c      	movs	r0, #60	; 0x3c
 80097dc:	f7ff feda 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x09);
 80097e0:	2009      	movs	r0, #9
 80097e2:	f7ff fed7 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x13);
 80097e6:	2013      	movs	r0, #19
 80097e8:	f7ff fed4 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x05);
 80097ec:	2005      	movs	r0, #5
 80097ee:	f7ff fed1 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x17);
 80097f2:	2017      	movs	r0, #23
 80097f4:	f7ff fece 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x11);
 80097f8:	2011      	movs	r0, #17
 80097fa:	f7ff fecb 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x00);
 80097fe:	2000      	movs	r0, #0
 8009800:	f7ff fec8 	bl	8009594 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8009804:	20e1      	movs	r0, #225	; 0xe1
 8009806:	f7ff fe97 	bl	8009538 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800980a:	2000      	movs	r0, #0
 800980c:	f7ff fec2 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x16);
 8009810:	2016      	movs	r0, #22
 8009812:	f7ff febf 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8009816:	201b      	movs	r0, #27
 8009818:	f7ff febc 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x04);
 800981c:	2004      	movs	r0, #4
 800981e:	f7ff feb9 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x11);
 8009822:	2011      	movs	r0, #17
 8009824:	f7ff feb6 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x07);
 8009828:	2007      	movs	r0, #7
 800982a:	f7ff feb3 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x31);
 800982e:	2031      	movs	r0, #49	; 0x31
 8009830:	f7ff feb0 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x33);
 8009834:	2033      	movs	r0, #51	; 0x33
 8009836:	f7ff fead 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x42);
 800983a:	2042      	movs	r0, #66	; 0x42
 800983c:	f7ff feaa 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x05);
 8009840:	2005      	movs	r0, #5
 8009842:	f7ff fea7 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8009846:	200c      	movs	r0, #12
 8009848:	f7ff fea4 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x0A);
 800984c:	200a      	movs	r0, #10
 800984e:	f7ff fea1 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x28);
 8009852:	2028      	movs	r0, #40	; 0x28
 8009854:	f7ff fe9e 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8009858:	202f      	movs	r0, #47	; 0x2f
 800985a:	f7ff fe9b 	bl	8009594 <LCD_WriteData>
  LCD_WriteData(0x0F);
 800985e:	200f      	movs	r0, #15
 8009860:	f7ff fe98 	bl	8009594 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8009864:	2011      	movs	r0, #17
 8009866:	f7ff fe67 	bl	8009538 <LCD_WriteCommand>
  delay(200);
 800986a:	20c8      	movs	r0, #200	; 0xc8
 800986c:	f000 f99a 	bl	8009ba4 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8009870:	2029      	movs	r0, #41	; 0x29
 8009872:	f7ff fe61 	bl	8009538 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8009876:	202c      	movs	r0, #44	; 0x2c
 8009878:	f7ff fe5e 	bl	8009538 <LCD_WriteCommand>
 }
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop

08009880 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8009884:	2029      	movs	r0, #41	; 0x29
 8009886:	f7ff fe57 	bl	8009538 <LCD_WriteCommand>
}
 800988a:	bd80      	pop	{r7, pc}

0800988c <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 8009890:	2028      	movs	r0, #40	; 0x28
 8009892:	f7ff fe51 	bl	8009538 <LCD_WriteCommand>
}
 8009896:	bd80      	pop	{r7, pc}

08009898 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 800989e:	200c      	movs	r0, #12
 80098a0:	2101      	movs	r1, #1
 80098a2:	f7f8 fc39 	bl	8002118 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80098a6:	2304      	movs	r3, #4
 80098a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80098aa:	2302      	movs	r3, #2
 80098ac:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80098ae:	2301      	movs	r3, #1
 80098b0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80098b2:	2300      	movs	r3, #0
 80098b4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80098ba:	463b      	mov	r3, r7
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <LCD_CtrlLinesConfig+0x4c>)
 80098be:	4619      	mov	r1, r3
 80098c0:	f7f7 feb0 	bl	8001624 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 80098c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c8:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80098ca:	463b      	mov	r3, r7
 80098cc:	4806      	ldr	r0, [pc, #24]	; (80098e8 <LCD_CtrlLinesConfig+0x50>)
 80098ce:	4619      	mov	r1, r3
 80098d0:	f7f7 fea8 	bl	8001624 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 80098d4:	4803      	ldr	r0, [pc, #12]	; (80098e4 <LCD_CtrlLinesConfig+0x4c>)
 80098d6:	2104      	movs	r1, #4
 80098d8:	2201      	movs	r2, #1
 80098da:	f000 f807 	bl	80098ec <LCD_CtrlLinesWrite>
}
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	40020800 	andmi	r0, r2, r0, lsl #16
 80098e8:	40020c00 	andmi	r0, r2, r0, lsl #24

080098ec <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	4613      	mov	r3, r2
 80098f6:	460a      	mov	r2, r1
 80098f8:	807a      	strh	r2, [r7, #2]
 80098fa:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 80098fc:	887a      	ldrh	r2, [r7, #2]
 80098fe:	787b      	ldrb	r3, [r7, #1]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4611      	mov	r1, r2
 8009904:	461a      	mov	r2, r3
 8009906:	f7f7 ffc3 	bl	8001890 <GPIO_WriteBit>
}
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8009916:	2020      	movs	r0, #32
 8009918:	2101      	movs	r1, #1
 800991a:	f7f8 fbfd 	bl	8002118 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 800991e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009922:	2101      	movs	r1, #1
 8009924:	f7f8 fc70 	bl	8002208 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8009928:	2380      	movs	r3, #128	; 0x80
 800992a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800992c:	2301      	movs	r3, #1
 800992e:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009930:	2302      	movs	r3, #2
 8009932:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009934:	2300      	movs	r3, #0
 8009936:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8009938:	2302      	movs	r3, #2
 800993a:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800993c:	1d3b      	adds	r3, r7, #4
 800993e:	4827      	ldr	r0, [pc, #156]	; (80099dc <LCD_SPIConfig+0xcc>)
 8009940:	4619      	mov	r1, r3
 8009942:	f7f7 fe6f 	bl	8001624 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8009946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800994a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	4823      	ldr	r0, [pc, #140]	; (80099dc <LCD_SPIConfig+0xcc>)
 8009950:	4619      	mov	r1, r3
 8009952:	f7f7 fe67 	bl	8001624 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8009956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800995a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800995c:	1d3b      	adds	r3, r7, #4
 800995e:	481f      	ldr	r0, [pc, #124]	; (80099dc <LCD_SPIConfig+0xcc>)
 8009960:	4619      	mov	r1, r3
 8009962:	f7f7 fe5f 	bl	8001624 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8009966:	481d      	ldr	r0, [pc, #116]	; (80099dc <LCD_SPIConfig+0xcc>)
 8009968:	2107      	movs	r1, #7
 800996a:	2205      	movs	r2, #5
 800996c:	f7f7 ffc8 	bl	8001900 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8009970:	481a      	ldr	r0, [pc, #104]	; (80099dc <LCD_SPIConfig+0xcc>)
 8009972:	2108      	movs	r1, #8
 8009974:	2205      	movs	r2, #5
 8009976:	f7f7 ffc3 	bl	8001900 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 800997a:	4818      	ldr	r0, [pc, #96]	; (80099dc <LCD_SPIConfig+0xcc>)
 800997c:	2109      	movs	r1, #9
 800997e:	2205      	movs	r2, #5
 8009980:	f7f7 ffbe 	bl	8001900 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8009984:	4816      	ldr	r0, [pc, #88]	; (80099e0 <LCD_SPIConfig+0xd0>)
 8009986:	f7fa fbfb 	bl	8004180 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <LCD_SPIConfig+0xd0>)
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d11d      	bne.n	80099d4 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009998:	2300      	movs	r3, #0
 800999a:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800999c:	f44f 7382 	mov.w	r3, #260	; 0x104
 80099a0:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80099a2:	2300      	movs	r3, #0
 80099a4:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80099a6:	2300      	movs	r3, #0
 80099a8:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80099aa:	2300      	movs	r3, #0
 80099ac:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80099ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b2:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80099b4:	2318      	movs	r3, #24
 80099b6:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80099b8:	2300      	movs	r3, #0
 80099ba:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 80099bc:	2307      	movs	r3, #7
 80099be:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	4806      	ldr	r0, [pc, #24]	; (80099e0 <LCD_SPIConfig+0xd0>)
 80099c6:	4619      	mov	r1, r3
 80099c8:	f7fa fc46 	bl	8004258 <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 80099cc:	4804      	ldr	r0, [pc, #16]	; (80099e0 <LCD_SPIConfig+0xd0>)
 80099ce:	2101      	movs	r1, #1
 80099d0:	f7fa fd9e 	bl	8004510 <SPI_Cmd>
  }
}
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	40021400 	andmi	r1, r2, r0, lsl #8
 80099e0:	40015000 	andmi	r5, r1, r0

080099e4 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 80099ea:	206f      	movs	r0, #111	; 0x6f
 80099ec:	2101      	movs	r1, #1
 80099ee:	f7f8 fb93 	bl	8002118 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 80099f2:	4854      	ldr	r0, [pc, #336]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 80099f4:	2103      	movs	r1, #3
 80099f6:	220e      	movs	r2, #14
 80099f8:	f7f7 ff82 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 80099fc:	4851      	ldr	r0, [pc, #324]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 80099fe:	2104      	movs	r1, #4
 8009a00:	220e      	movs	r2, #14
 8009a02:	f7f7 ff7d 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8009a06:	484f      	ldr	r0, [pc, #316]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 8009a08:	2106      	movs	r1, #6
 8009a0a:	220e      	movs	r2, #14
 8009a0c:	f7f7 ff78 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8009a10:	484c      	ldr	r0, [pc, #304]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 8009a12:	210b      	movs	r1, #11
 8009a14:	220e      	movs	r2, #14
 8009a16:	f7f7 ff73 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8009a1a:	484a      	ldr	r0, [pc, #296]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 8009a1c:	210c      	movs	r1, #12
 8009a1e:	220e      	movs	r2, #14
 8009a20:	f7f7 ff6e 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8009a24:	f641 0358 	movw	r3, #6232	; 0x1858
 8009a28:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8009a32:	2300      	movs	r3, #0
 8009a34:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	4841      	ldr	r0, [pc, #260]	; (8009b44 <LCD_AF_GPIOConfig+0x160>)
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f7f7 fdf0 	bl	8001624 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8009a44:	4840      	ldr	r0, [pc, #256]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a46:	2100      	movs	r1, #0
 8009a48:	2209      	movs	r2, #9
 8009a4a:	f7f7 ff59 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8009a4e:	483e      	ldr	r0, [pc, #248]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a50:	2101      	movs	r1, #1
 8009a52:	2209      	movs	r2, #9
 8009a54:	f7f7 ff54 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8009a58:	483b      	ldr	r0, [pc, #236]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a5a:	2108      	movs	r1, #8
 8009a5c:	220e      	movs	r2, #14
 8009a5e:	f7f7 ff4f 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8009a62:	4839      	ldr	r0, [pc, #228]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a64:	2109      	movs	r1, #9
 8009a66:	220e      	movs	r2, #14
 8009a68:	f7f7 ff4a 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8009a6c:	4836      	ldr	r0, [pc, #216]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a6e:	210a      	movs	r1, #10
 8009a70:	220e      	movs	r2, #14
 8009a72:	f7f7 ff45 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8009a76:	4834      	ldr	r0, [pc, #208]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a78:	210b      	movs	r1, #11
 8009a7a:	220e      	movs	r2, #14
 8009a7c:	f7f7 ff40 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8009a80:	f640 7303 	movw	r3, #3843	; 0xf03
 8009a84:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a86:	463b      	mov	r3, r7
 8009a88:	482f      	ldr	r0, [pc, #188]	; (8009b48 <LCD_AF_GPIOConfig+0x164>)
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	f7f7 fdca 	bl	8001624 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8009a90:	482e      	ldr	r0, [pc, #184]	; (8009b4c <LCD_AF_GPIOConfig+0x168>)
 8009a92:	2106      	movs	r1, #6
 8009a94:	220e      	movs	r2, #14
 8009a96:	f7f7 ff33 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8009a9a:	482c      	ldr	r0, [pc, #176]	; (8009b4c <LCD_AF_GPIOConfig+0x168>)
 8009a9c:	2107      	movs	r1, #7
 8009a9e:	220e      	movs	r2, #14
 8009aa0:	f7f7 ff2e 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8009aa4:	4829      	ldr	r0, [pc, #164]	; (8009b4c <LCD_AF_GPIOConfig+0x168>)
 8009aa6:	210a      	movs	r1, #10
 8009aa8:	220e      	movs	r2, #14
 8009aaa:	f7f7 ff29 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8009aae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8009ab2:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ab4:	463b      	mov	r3, r7
 8009ab6:	4825      	ldr	r0, [pc, #148]	; (8009b4c <LCD_AF_GPIOConfig+0x168>)
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f7f7 fdb3 	bl	8001624 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8009abe:	4824      	ldr	r0, [pc, #144]	; (8009b50 <LCD_AF_GPIOConfig+0x16c>)
 8009ac0:	2103      	movs	r1, #3
 8009ac2:	220e      	movs	r2, #14
 8009ac4:	f7f7 ff1c 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8009ac8:	4821      	ldr	r0, [pc, #132]	; (8009b50 <LCD_AF_GPIOConfig+0x16c>)
 8009aca:	2106      	movs	r1, #6
 8009acc:	220e      	movs	r2, #14
 8009ace:	f7f7 ff17 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8009ad2:	2348      	movs	r3, #72	; 0x48
 8009ad4:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	481d      	ldr	r0, [pc, #116]	; (8009b50 <LCD_AF_GPIOConfig+0x16c>)
 8009ada:	4619      	mov	r1, r3
 8009adc:	f7f7 fda2 	bl	8001624 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8009ae0:	481c      	ldr	r0, [pc, #112]	; (8009b54 <LCD_AF_GPIOConfig+0x170>)
 8009ae2:	210a      	movs	r1, #10
 8009ae4:	220e      	movs	r2, #14
 8009ae6:	f7f7 ff0b 	bl	8001900 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8009aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aee:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8009af0:	463b      	mov	r3, r7
 8009af2:	4818      	ldr	r0, [pc, #96]	; (8009b54 <LCD_AF_GPIOConfig+0x170>)
 8009af4:	4619      	mov	r1, r3
 8009af6:	f7f7 fd95 	bl	8001624 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8009afa:	4817      	ldr	r0, [pc, #92]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009afc:	2106      	movs	r1, #6
 8009afe:	220e      	movs	r2, #14
 8009b00:	f7f7 fefe 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8009b04:	4814      	ldr	r0, [pc, #80]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009b06:	2107      	movs	r1, #7
 8009b08:	220e      	movs	r2, #14
 8009b0a:	f7f7 fef9 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8009b0e:	4812      	ldr	r0, [pc, #72]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009b10:	210a      	movs	r1, #10
 8009b12:	2209      	movs	r2, #9
 8009b14:	f7f7 fef4 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8009b18:	480f      	ldr	r0, [pc, #60]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009b1a:	210b      	movs	r1, #11
 8009b1c:	220e      	movs	r2, #14
 8009b1e:	f7f7 feef 	bl	8001900 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8009b22:	480d      	ldr	r0, [pc, #52]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009b24:	210c      	movs	r1, #12
 8009b26:	2209      	movs	r2, #9
 8009b28:	f7f7 feea 	bl	8001900 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8009b2c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8009b30:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b32:	463b      	mov	r3, r7
 8009b34:	4808      	ldr	r0, [pc, #32]	; (8009b58 <LCD_AF_GPIOConfig+0x174>)
 8009b36:	4619      	mov	r1, r3
 8009b38:	f7f7 fd74 	bl	8001624 <GPIO_Init>
 
}
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	40020000 	andmi	r0, r2, r0
 8009b48:	40020400 	andmi	r0, r2, r0, lsl #8
 8009b4c:	40020800 	andmi	r0, r2, r0, lsl #16
 8009b50:	40020c00 	andmi	r0, r2, r0, lsl #24
 8009b54:	40021400 	andmi	r1, r2, r0, lsl #8
 8009b58:	40021800 	andmi	r1, r2, r0, lsl #16

08009b5c <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	80fa      	strh	r2, [r7, #6]
 8009b68:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8009b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	db0c      	blt.n	8009b8c <PutPixel+0x30>
 8009b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b76:	2bef      	cmp	r3, #239	; 0xef
 8009b78:	dc08      	bgt.n	8009b8c <PutPixel+0x30>
 8009b7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	db04      	blt.n	8009b8c <PutPixel+0x30>
 8009b82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009b86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009b8a:	db00      	blt.n	8009b8e <PutPixel+0x32>
  {
    return;  
 8009b8c:	e007      	b.n	8009b9e <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 8009b8e:	88fa      	ldrh	r2, [r7, #6]
 8009b90:	88bb      	ldrh	r3, [r7, #4]
 8009b92:	4610      	mov	r0, r2
 8009b94:	4619      	mov	r1, r3
 8009b96:	2201      	movs	r2, #1
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f7fe fb49 	bl	8008230 <LCD_DrawLine>
}
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e002      	b.n	8009bbc <delay+0x18>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1f9      	bne.n	8009bb6 <delay+0x12>
  {
  }
}
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 8009bd0:	f000 fcfa 	bl	800a5c8 <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 8009bd4:	f000 fd3e 	bl	800a654 <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 8009bd8:	f000 f8ae 	bl	8009d38 <IOE_IsOperational>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 8009be2:	2304      	movs	r3, #4
 8009be4:	e008      	b.n	8009bf8 <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 8009be6:	f000 f8c1 	bl	8009d6c <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 8009bea:	2001      	movs	r0, #1
 8009bec:	2101      	movs	r1, #1
 8009bee:	f000 f8e7 	bl	8009dc0 <IOE_FnctCmd>
  IOE_TP_Config();
 8009bf2:	f000 f957 	bl	8009ea4 <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <IOE_TPITConfig>:
  * @brief  Enables the touch Panel interrupt.
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_TPITConfig(void)
{    
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* Enable the Global interrupt */  
  IOE_GITCmd(ENABLE);     
 8009c00:	2001      	movs	r0, #1
 8009c02:	f000 f905 	bl	8009e10 <IOE_GITCmd>
          
  /* Enable the Global GPIO Interrupt */
  IOE_GITConfig((uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 8009c06:	2007      	movs	r0, #7
 8009c08:	2101      	movs	r1, #1
 8009c0a:	f000 f923 	bl	8009e54 <IOE_GITConfig>
    
  /* Read the GPIO_IT_STA to clear all pending bits if any */
  I2C_ReadDeviceRegister(IOE_REG_GPIO_INT_STA); 
 8009c0e:	200d      	movs	r0, #13
 8009c10:	f000 fe4a 	bl	800a8a8 <I2C_ReadDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop

08009c1c <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 8009c22:	2040      	movs	r0, #64	; 0x40
 8009c24:	f000 fe40 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	4b29      	ldr	r3, [pc, #164]	; (8009cd8 <IOE_TP_GetState+0xbc>)
 8009c32:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 8009c34:	4b28      	ldr	r3, [pc, #160]	; (8009cd8 <IOE_TP_GetState+0xbc>)
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d030      	beq.n	8009c9e <IOE_TP_GetState+0x82>
  {
    x = IOE_TP_Read_X();
 8009c3c:	f000 fc52 	bl	800a4e4 <IOE_TP_Read_X>
 8009c40:	4603      	mov	r3, r0
 8009c42:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 8009c44:	f000 fc82 	bl	800a54c <IOE_TP_Read_Y>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 8009c4c:	4b23      	ldr	r3, [pc, #140]	; (8009cdc <IOE_TP_GetState+0xc0>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d904      	bls.n	8009c60 <IOE_TP_GetState+0x44>
 8009c56:	4b21      	ldr	r3, [pc, #132]	; (8009cdc <IOE_TP_GetState+0xc0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	e003      	b.n	8009c68 <IOE_TP_GetState+0x4c>
 8009c60:	4b1e      	ldr	r3, [pc, #120]	; (8009cdc <IOE_TP_GetState+0xc0>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 8009c6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <IOE_TP_GetState+0xc4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d904      	bls.n	8009c7e <IOE_TP_GetState+0x62>
 8009c74:	4b1a      	ldr	r3, [pc, #104]	; (8009ce0 <IOE_TP_GetState+0xc4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	e003      	b.n	8009c86 <IOE_TP_GetState+0x6a>
 8009c7e:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <IOE_TP_GetState+0xc4>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	2b05      	cmp	r3, #5
 8009c90:	d905      	bls.n	8009c9e <IOE_TP_GetState+0x82>
    {
      _x = x;
 8009c92:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <IOE_TP_GetState+0xc0>)
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	601a      	str	r2, [r3, #0]
      _y = y;       
 8009c98:	4b11      	ldr	r3, [pc, #68]	; (8009ce0 <IOE_TP_GetState+0xc4>)
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	601a      	str	r2, [r3, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <IOE_TP_GetState+0xc0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <IOE_TP_GetState+0xbc>)
 8009ca6:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 8009ca8:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <IOE_TP_GetState+0xc4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <IOE_TP_GetState+0xbc>)
 8009cb0:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 8009cb2:	f000 fc75 	bl	800a5a0 <IOE_TP_Read_Z>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <IOE_TP_GetState+0xbc>)
 8009cbc:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8009cbe:	204b      	movs	r0, #75	; 0x4b
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	f000 fd43 	bl	800a74c <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8009cc6:	204b      	movs	r0, #75	; 0x4b
 8009cc8:	2100      	movs	r1, #0
 8009cca:	f000 fd3f 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 8009cce:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <IOE_TP_GetState+0xbc>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	200004e0 	andcs	r0, r0, r0, ror #9
 8009cdc:	200004e8 	andcs	r0, r0, r8, ror #9
 8009ce0:	200004ec 	andcs	r0, r0, ip, ror #9

08009ce4 <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t Global_IT)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	71fb      	strb	r3, [r7, #7]
  __IO uint8_t tmp = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
 
  /* Get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_STA);
 8009cf2:	200b      	movs	r0, #11
 8009cf4:	f000 fdd8 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	4013      	ands	r3, r2
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <IOE_GetGITStatus+0x2a>
  {
    return SET;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <IOE_GetGITStatus+0x2c>
  }
  else
  {
    return RESET;
 8009d0e:	2300      	movs	r3, #0
  }
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t Global_IT)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	71fb      	strb	r3, [r7, #7]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, Global_IT); 
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	200b      	movs	r0, #11
 8009d26:	4619      	mov	r1, r3
 8009d28:	f000 fd10 	bl	800a74c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop

08009d38 <IOE_IsOperational>:
  *         communicates correctly ont the I2C bus.
  * @param  None
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 8009d3c:	f000 f826 	bl	8009d8c <IOE_ReadID>
 8009d40:	4603      	mov	r3, r0
 8009d42:	461a      	mov	r2, r3
 8009d44:	f640 0311 	movw	r3, #2065	; 0x811
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d009      	beq.n	8009d60 <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <IOE_IsOperational+0x30>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 8009d54:	f000 ff7c 	bl	800ac50 <IOE_TimeoutUserCallback>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	e002      	b.n	8009d62 <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 8009d60:	2300      	movs	r3, #0
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	2000005c 	andcs	r0, r0, ip, asr r0

08009d6c <IOE_Reset>:
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 8009d70:	2003      	movs	r0, #3
 8009d72:	2102      	movs	r1, #2
 8009d74:	f000 fcea 	bl	800a74c <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 8009d78:	2002      	movs	r0, #2
 8009d7a:	f000 ff9f 	bl	800acbc <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 8009d7e:	2003      	movs	r0, #3
 8009d80:	2100      	movs	r1, #0
 8009d82:	f000 fce3 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <IOE_ReadID>:
  * @brief  Reads the IOE device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 8009d96:	2000      	movs	r0, #0
 8009d98:	f000 fd86 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 8009da6:	2001      	movs	r0, #1
 8009da8:	f000 fd7e 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 8009db6:	88fb      	ldrh	r3, [r7, #6]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	71fa      	strb	r2, [r7, #7]
 8009dcc:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 8009dd2:	2004      	movs	r0, #4
 8009dd4:	f000 fd68 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009ddc:	79bb      	ldrb	r3, [r7, #6]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <IOE_FnctCmd+0x32>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	43db      	mvns	r3, r3
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4013      	ands	r3, r2
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	73fb      	strb	r3, [r7, #15]
 8009df0:	e003      	b.n	8009dfa <IOE_FnctCmd+0x3a>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 8009df2:	7bfa      	ldrb	r2, [r7, #15]
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2004      	movs	r0, #4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f000 fca4 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop

08009e10 <IOE_GITCmd>:
  * @brief  Enables or disables the Global interrupt.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(FunctionalState NewState)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_CTRL);
 8009e1e:	2009      	movs	r0, #9
 8009e20:	f000 fd42 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <IOE_GITCmd+0x28>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	f043 0301 	orr.w	r3, r3, #1
 8009e34:	73fb      	strb	r3, [r7, #15]
 8009e36:	e003      	b.n	8009e40 <IOE_GITCmd+0x30>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(IOE_REG_INT_CTRL, tmp);
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2009      	movs	r0, #9
 8009e44:	4619      	mov	r1, r3
 8009e46:	f000 fc81 	bl	800a74c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <IOE_GITConfig>:
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t Global_IT, FunctionalState NewState)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	71fa      	strb	r2, [r7, #7]
 8009e60:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_EN);
 8009e66:	200a      	movs	r0, #10
 8009e68:	f000 fd1e 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009e70:	79bb      	ldrb	r3, [r7, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <IOE_GITConfig+0x2c>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 8009e76:	7bfa      	ldrb	r2, [r7, #15]
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	73fb      	strb	r3, [r7, #15]
 8009e7e:	e006      	b.n	8009e8e <IOE_GITConfig+0x3a>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	43db      	mvns	r3, r3
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_REG_INT_EN, tmp);
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	200a      	movs	r0, #10
 8009e92:	4619      	mov	r1, r3
 8009e94:	f000 fc5a 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop

08009ea4 <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 8009ea8:	2002      	movs	r0, #2
 8009eaa:	2101      	movs	r1, #1
 8009eac:	f7ff ff88 	bl	8009dc0 <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 8009eb0:	2020      	movs	r0, #32
 8009eb2:	2149      	movs	r1, #73	; 0x49
 8009eb4:	f000 fc4a 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 8009eb8:	2002      	movs	r0, #2
 8009eba:	f000 feff 	bl	800acbc <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 8009ebe:	2021      	movs	r0, #33	; 0x21
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	f000 fc43 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8009ec6:	201e      	movs	r0, #30
 8009ec8:	2100      	movs	r1, #0
 8009eca:	f000 f835 	bl	8009f38 <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 8009ece:	2041      	movs	r0, #65	; 0x41
 8009ed0:	219a      	movs	r1, #154	; 0x9a
 8009ed2:	f000 fc3b 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 8009ed6:	204a      	movs	r0, #74	; 0x4a
 8009ed8:	2101      	movs	r1, #1
 8009eda:	f000 fc37 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8009ede:	204b      	movs	r0, #75	; 0x4b
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	f000 fc33 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8009ee6:	204b      	movs	r0, #75	; 0x4b
 8009ee8:	2100      	movs	r1, #0
 8009eea:	f000 fc2f 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 8009eee:	2056      	movs	r0, #86	; 0x56
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	f000 fc2b 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 8009ef6:	2058      	movs	r0, #88	; 0x58
 8009ef8:	2101      	movs	r1, #1
 8009efa:	f000 fc27 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 8009efe:	2040      	movs	r0, #64	; 0x40
 8009f00:	2103      	movs	r1, #3
 8009f02:	f000 fc23 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 8009f06:	200b      	movs	r0, #11
 8009f08:	21ff      	movs	r1, #255	; 0xff
 8009f0a:	f000 fc1f 	bl	800a74c <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	80da      	strh	r2, [r3, #6]
 8009f14:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f16:	88da      	ldrh	r2, [r3, #6]
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f1a:	809a      	strh	r2, [r3, #4]
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f1e:	889a      	ldrh	r2, [r3, #4]
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f22:	805a      	strh	r2, [r3, #2]
 8009f24:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f26:	885a      	ldrh	r2, [r3, #2]
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <IOE_TP_Config+0x90>)
 8009f2a:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200004e0 	andcs	r0, r0, r0, ror #9

08009f38 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	71fa      	strb	r2, [r7, #7]
 8009f44:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 8009f4a:	2017      	movs	r0, #23
 8009f4c:	f000 fcac 	bl	800a8a8 <I2C_ReadDeviceRegister>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009f54:	79bb      	ldrb	r3, [r7, #6]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <IOE_IOAFConfig+0x2c>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	e006      	b.n	8009f72 <IOE_IOAFConfig+0x3a>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	43db      	mvns	r3, r3
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	2017      	movs	r0, #23
 8009f76:	4619      	mov	r1, r3
 8009f78:	f000 fbe8 	bl	800a74c <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop

08009f88 <I2C_DMA_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_DMA_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	71fa      	strb	r2, [r7, #7]
 8009f94:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;  
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 8009f9e:	79bb      	ldrb	r3, [r7, #6]
 8009fa0:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 8009fa2:	f107 030b 	add.w	r3, r7, #11
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f000 fb7d 	bl	800a6a8 <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009fae:	4852      	ldr	r0, [pc, #328]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	f7f9 f9d5 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8009fb6:	4b51      	ldr	r3, [pc, #324]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 8009fb8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009fbc:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 8009fbe:	e00a      	b.n	8009fd6 <I2C_DMA_WriteDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009fc0:	4b4e      	ldr	r3, [pc, #312]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	1e59      	subs	r1, r3, #1
 8009fc6:	4a4d      	ldr	r2, [pc, #308]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 8009fc8:	6011      	str	r1, [r2, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <I2C_DMA_WriteDeviceRegister+0x4e>
 8009fce:	f000 fe3f 	bl	800ac50 <IOE_TimeoutUserCallback>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	e08c      	b.n	800a0f0 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 8009fd6:	4848      	ldr	r0, [pc, #288]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 8009fd8:	4949      	ldr	r1, [pc, #292]	; (800a100 <I2C_DMA_WriteDeviceRegister+0x178>)
 8009fda:	f7f9 fcbd 	bl	8003958 <I2C_GetFlagStatus>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d0ed      	beq.n	8009fc0 <I2C_DMA_WriteDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8009fe4:	4844      	ldr	r0, [pc, #272]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 8009fe6:	2182      	movs	r1, #130	; 0x82
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f9 f9f9 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8009fee:	4b43      	ldr	r3, [pc, #268]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 8009ff0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009ff4:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8009ff6:	e00a      	b.n	800a00e <I2C_DMA_WriteDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009ff8:	4b40      	ldr	r3, [pc, #256]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	1e59      	subs	r1, r3, #1
 8009ffe:	4a3f      	ldr	r2, [pc, #252]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a000:	6011      	str	r1, [r2, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <I2C_DMA_WriteDeviceRegister+0x86>
 800a006:	f000 fe23 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a00a:	4603      	mov	r3, r0
 800a00c:	e070      	b.n	800a0f0 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a00e:	483a      	ldr	r0, [pc, #232]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a010:	493c      	ldr	r1, [pc, #240]	; (800a104 <I2C_DMA_WriteDeviceRegister+0x17c>)
 800a012:	f7f9 fc4f 	bl	80038b4 <I2C_CheckEvent>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0ed      	beq.n	8009ff8 <I2C_DMA_WriteDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	4836      	ldr	r0, [pc, #216]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a020:	4619      	mov	r1, r3
 800a022:	f7f9 fb3d 	bl	80036a0 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a026:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a028:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a02c:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a02e:	e00a      	b.n	800a046 <I2C_DMA_WriteDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a030:	4b32      	ldr	r3, [pc, #200]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	1e59      	subs	r1, r3, #1
 800a036:	4a31      	ldr	r2, [pc, #196]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d103      	bne.n	800a046 <I2C_DMA_WriteDeviceRegister+0xbe>
 800a03e:	f000 fe07 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a042:	4603      	mov	r3, r0
 800a044:	e054      	b.n	800a0f0 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a046:	482c      	ldr	r0, [pc, #176]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a048:	492f      	ldr	r1, [pc, #188]	; (800a108 <I2C_DMA_WriteDeviceRegister+0x180>)
 800a04a:	f7f9 fc85 	bl	8003958 <I2C_GetFlagStatus>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <I2C_DMA_WriteDeviceRegister+0xda>
 800a054:	4828      	ldr	r0, [pc, #160]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a056:	492d      	ldr	r1, [pc, #180]	; (800a10c <I2C_DMA_WriteDeviceRegister+0x184>)
 800a058:	f7f9 fc7e 	bl	8003958 <I2C_GetFlagStatus>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0e6      	beq.n	800a030 <I2C_DMA_WriteDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a062:	4825      	ldr	r0, [pc, #148]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a064:	2101      	movs	r1, #1
 800a066:	f7f9 fba9 	bl	80037bc <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 800a06a:	4829      	ldr	r0, [pc, #164]	; (800a110 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a06c:	2101      	movs	r1, #1
 800a06e:	f7f9 fe5f 	bl	8003d30 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 800a072:	4b22      	ldr	r3, [pc, #136]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a074:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a078:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800a07a:	e00a      	b.n	800a092 <I2C_DMA_WriteDeviceRegister+0x10a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a07c:	4b1f      	ldr	r3, [pc, #124]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	1e59      	subs	r1, r3, #1
 800a082:	4a1e      	ldr	r2, [pc, #120]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d103      	bne.n	800a092 <I2C_DMA_WriteDeviceRegister+0x10a>
 800a08a:	f000 fde1 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a08e:	4603      	mov	r3, r0
 800a090:	e02e      	b.n	800a0f0 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800a092:	481f      	ldr	r0, [pc, #124]	; (800a110 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a094:	491f      	ldr	r1, [pc, #124]	; (800a114 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800a096:	f7f9 ff49 	bl	8003f2c <DMA_GetFlagStatus>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0ed      	beq.n	800a07c <I2C_DMA_WriteDeviceRegister+0xf4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
 800a0a0:	4b16      	ldr	r3, [pc, #88]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a0a2:	4a1d      	ldr	r2, [pc, #116]	; (800a118 <I2C_DMA_WriteDeviceRegister+0x190>)
 800a0a4:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a0a6:	e00a      	b.n	800a0be <I2C_DMA_WriteDeviceRegister+0x136>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a0a8:	4b14      	ldr	r3, [pc, #80]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	1e59      	subs	r1, r3, #1
 800a0ae:	4a13      	ldr	r2, [pc, #76]	; (800a0fc <I2C_DMA_WriteDeviceRegister+0x174>)
 800a0b0:	6011      	str	r1, [r2, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d103      	bne.n	800a0be <I2C_DMA_WriteDeviceRegister+0x136>
 800a0b6:	f000 fdcb 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	e018      	b.n	800a0f0 <I2C_DMA_WriteDeviceRegister+0x168>
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a0be:	480e      	ldr	r0, [pc, #56]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a0c0:	4912      	ldr	r1, [pc, #72]	; (800a10c <I2C_DMA_WriteDeviceRegister+0x184>)
 800a0c2:	f7f9 fc49 	bl	8003958 <I2C_GetFlagStatus>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ed      	beq.n	800a0a8 <I2C_DMA_WriteDeviceRegister+0x120>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a0cc:	480a      	ldr	r0, [pc, #40]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	f7f9 f966 	bl	80033a0 <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 800a0d4:	480e      	ldr	r0, [pc, #56]	; (800a110 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	f7f9 fe2a 	bl	8003d30 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a0dc:	4806      	ldr	r0, [pc, #24]	; (800a0f8 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a0de:	2100      	movs	r1, #0
 800a0e0:	f7f9 fb6c 	bl	80037bc <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 800a0e4:	480a      	ldr	r0, [pc, #40]	; (800a110 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a0e6:	490b      	ldr	r1, [pc, #44]	; (800a114 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800a0e8:	f7f9 ff5c 	bl	8003fa4 <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	b2db      	uxtb	r3, r3
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a0fc:	2000005c 	andcs	r0, r0, ip, asr r0
 800a100:	10000001 	andne	r0, r0, r1
 800a104:	00070082 	andeq	r0, r7, r2, lsl #1
 800a108:	10000080 	andne	r0, r0, r0, lsl #1
 800a10c:	10000004 	andne	r0, r0, r4
 800a110:	400260a0 	andmi	r6, r2, r0, lsr #1
 800a114:	20200000 	eorcs	r0, r0, r0
 800a118:	002fd000 	eoreq	sp, pc, r0

0800a11c <I2C_DMA_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_DMA_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	71fb      	strb	r3, [r7, #7]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800a126:	2300      	movs	r3, #0
 800a128:	733b      	strb	r3, [r7, #12]
 800a12a:	2300      	movs	r3, #0
 800a12c:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800a12e:	f107 030c 	add.w	r3, r7, #12
 800a132:	2001      	movs	r0, #1
 800a134:	4619      	mov	r1, r3
 800a136:	f000 fab7 	bl	800a6a8 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800a13a:	4864      	ldr	r0, [pc, #400]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a13c:	2101      	movs	r1, #1
 800a13e:	f7f9 fb5d 	bl	80037fc <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a142:	4862      	ldr	r0, [pc, #392]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a144:	2101      	movs	r1, #1
 800a146:	f7f9 f90b 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a14a:	4b61      	ldr	r3, [pc, #388]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a14c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a150:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a152:	e00a      	b.n	800a16a <I2C_DMA_ReadDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a154:	4b5e      	ldr	r3, [pc, #376]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	1e59      	subs	r1, r3, #1
 800a15a:	4a5d      	ldr	r2, [pc, #372]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d103      	bne.n	800a16a <I2C_DMA_ReadDeviceRegister+0x4e>
 800a162:	f000 fd75 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a166:	4603      	mov	r3, r0
 800a168:	e0ac      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a16a:	4858      	ldr	r0, [pc, #352]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a16c:	4959      	ldr	r1, [pc, #356]	; (800a2d4 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800a16e:	f7f9 fbf3 	bl	8003958 <I2C_GetFlagStatus>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0ed      	beq.n	800a154 <I2C_DMA_ReadDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a178:	4854      	ldr	r0, [pc, #336]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a17a:	2182      	movs	r1, #130	; 0x82
 800a17c:	2200      	movs	r2, #0
 800a17e:	f7f9 f92f 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a182:	4b53      	ldr	r3, [pc, #332]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a184:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a188:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800a18a:	e00a      	b.n	800a1a2 <I2C_DMA_ReadDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a18c:	4b50      	ldr	r3, [pc, #320]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	1e59      	subs	r1, r3, #1
 800a192:	4a4f      	ldr	r2, [pc, #316]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a194:	6011      	str	r1, [r2, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <I2C_DMA_ReadDeviceRegister+0x86>
 800a19a:	f000 fd59 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	e090      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800a1a2:	484a      	ldr	r0, [pc, #296]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a1a4:	494c      	ldr	r1, [pc, #304]	; (800a2d8 <I2C_DMA_ReadDeviceRegister+0x1bc>)
 800a1a6:	f7f9 fb85 	bl	80038b4 <I2C_CheckEvent>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0ed      	beq.n	800a18c <I2C_DMA_ReadDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	4846      	ldr	r0, [pc, #280]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f7f9 fa73 	bl	80036a0 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a1ba:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a1bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a1c0:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a1c2:	e00a      	b.n	800a1da <I2C_DMA_ReadDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a1c4:	4b42      	ldr	r3, [pc, #264]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	1e59      	subs	r1, r3, #1
 800a1ca:	4a41      	ldr	r2, [pc, #260]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a1cc:	6011      	str	r1, [r2, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <I2C_DMA_ReadDeviceRegister+0xbe>
 800a1d2:	f000 fd3d 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	e074      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a1da:	483c      	ldr	r0, [pc, #240]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a1dc:	493f      	ldr	r1, [pc, #252]	; (800a2dc <I2C_DMA_ReadDeviceRegister+0x1c0>)
 800a1de:	f7f9 fbbb 	bl	8003958 <I2C_GetFlagStatus>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <I2C_DMA_ReadDeviceRegister+0xda>
 800a1e8:	4838      	ldr	r0, [pc, #224]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a1ea:	493d      	ldr	r1, [pc, #244]	; (800a2e0 <I2C_DMA_ReadDeviceRegister+0x1c4>)
 800a1ec:	f7f9 fbb4 	bl	8003958 <I2C_GetFlagStatus>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0e6      	beq.n	800a1c4 <I2C_DMA_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a1f6:	4835      	ldr	r0, [pc, #212]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	f7f9 f8b1 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a1fe:	4b34      	ldr	r3, [pc, #208]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a200:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a204:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a206:	e00a      	b.n	800a21e <I2C_DMA_ReadDeviceRegister+0x102>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a208:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	1e59      	subs	r1, r3, #1
 800a20e:	4a30      	ldr	r2, [pc, #192]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a210:	6011      	str	r1, [r2, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <I2C_DMA_ReadDeviceRegister+0x102>
 800a216:	f000 fd1b 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a21a:	4603      	mov	r3, r0
 800a21c:	e052      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a21e:	482b      	ldr	r0, [pc, #172]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a220:	492c      	ldr	r1, [pc, #176]	; (800a2d4 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800a222:	f7f9 fb99 	bl	8003958 <I2C_GetFlagStatus>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d0ed      	beq.n	800a208 <I2C_DMA_ReadDeviceRegister+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800a22c:	4827      	ldr	r0, [pc, #156]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a22e:	2182      	movs	r1, #130	; 0x82
 800a230:	2201      	movs	r2, #1
 800a232:	f7f9 f8d5 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a236:	4b26      	ldr	r3, [pc, #152]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a238:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a23c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a23e:	e00a      	b.n	800a256 <I2C_DMA_ReadDeviceRegister+0x13a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a240:	4b23      	ldr	r3, [pc, #140]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	1e59      	subs	r1, r3, #1
 800a246:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a248:	6011      	str	r1, [r2, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <I2C_DMA_ReadDeviceRegister+0x13a>
 800a24e:	f000 fcff 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a252:	4603      	mov	r3, r0
 800a254:	e036      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a256:	481d      	ldr	r0, [pc, #116]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a258:	4922      	ldr	r1, [pc, #136]	; (800a2e4 <I2C_DMA_ReadDeviceRegister+0x1c8>)
 800a25a:	f7f9 fb2b 	bl	80038b4 <I2C_CheckEvent>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0ed      	beq.n	800a240 <I2C_DMA_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a264:	4819      	ldr	r0, [pc, #100]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a266:	2101      	movs	r1, #1
 800a268:	f7f9 faa8 	bl	80037bc <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800a26c:	481e      	ldr	r0, [pc, #120]	; (800a2e8 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a26e:	2101      	movs	r1, #1
 800a270:	f7f9 fd5e 	bl	8003d30 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800a274:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a276:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800a27a:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800a27c:	e00a      	b.n	800a294 <I2C_DMA_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a27e:	4b14      	ldr	r3, [pc, #80]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	1e59      	subs	r1, r3, #1
 800a284:	4a12      	ldr	r2, [pc, #72]	; (800a2d0 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a286:	6011      	str	r1, [r2, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d103      	bne.n	800a294 <I2C_DMA_ReadDeviceRegister+0x178>
 800a28c:	f000 fce0 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a290:	4603      	mov	r3, r0
 800a292:	e017      	b.n	800a2c4 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800a294:	4814      	ldr	r0, [pc, #80]	; (800a2e8 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a296:	4915      	ldr	r1, [pc, #84]	; (800a2ec <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800a298:	f7f9 fe48 	bl	8003f2c <DMA_GetFlagStatus>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0ed      	beq.n	800a27e <I2C_DMA_ReadDeviceRegister+0x162>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a2a2:	480a      	ldr	r0, [pc, #40]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	f7f9 f87b 	bl	80033a0 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800a2aa:	480f      	ldr	r0, [pc, #60]	; (800a2e8 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	f7f9 fd3f 	bl	8003d30 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a2b2:	4806      	ldr	r0, [pc, #24]	; (800a2cc <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	f7f9 fa81 	bl	80037bc <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800a2ba:	480b      	ldr	r0, [pc, #44]	; (800a2e8 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a2bc:	490b      	ldr	r1, [pc, #44]	; (800a2ec <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800a2be:	f7f9 fe71 	bl	8003fa4 <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 800a2c2:	7b3b      	ldrb	r3, [r7, #12]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a2d0:	2000005c 	andcs	r0, r0, ip, asr r0
 800a2d4:	10000001 	andne	r0, r0, r1
 800a2d8:	00070082 	andeq	r0, r7, r2, lsl #1
 800a2dc:	10000080 	andne	r0, r0, r0, lsl #1
 800a2e0:	10000004 	andne	r0, r0, r4
 800a2e4:	00030002 	andeq	r0, r3, r2
 800a2e8:	40026010 	andmi	r6, r2, r0, lsl r0
 800a2ec:	10000020 	andne	r0, r0, r0, lsr #32

0800a2f0 <I2C_DMA_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_DMA_ReadDataBuffer(uint32_t RegisterAddr)
{ 
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint8_t tmp= 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	733b      	strb	r3, [r7, #12]
 800a300:	2300      	movs	r3, #0
 800a302:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800a304:	f107 030c 	add.w	r3, r7, #12
 800a308:	2001      	movs	r0, #1
 800a30a:	4619      	mov	r1, r3
 800a30c:	f000 f9cc 	bl	800a6a8 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800a310:	486b      	ldr	r0, [pc, #428]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a312:	2101      	movs	r1, #1
 800a314:	f7f9 fa72 	bl	80037fc <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a318:	4869      	ldr	r0, [pc, #420]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a31a:	2101      	movs	r1, #1
 800a31c:	f7f9 f820 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a320:	4b68      	ldr	r3, [pc, #416]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a322:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a326:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a328:	e00a      	b.n	800a340 <I2C_DMA_ReadDataBuffer+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a32a:	4b66      	ldr	r3, [pc, #408]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	1e59      	subs	r1, r3, #1
 800a330:	4a64      	ldr	r2, [pc, #400]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a332:	6011      	str	r1, [r2, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d103      	bne.n	800a340 <I2C_DMA_ReadDataBuffer+0x50>
 800a338:	f000 fc8a 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a33c:	4603      	mov	r3, r0
 800a33e:	e0ba      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a340:	485f      	ldr	r0, [pc, #380]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a342:	4961      	ldr	r1, [pc, #388]	; (800a4c8 <I2C_DMA_ReadDataBuffer+0x1d8>)
 800a344:	f7f9 fb08 	bl	8003958 <I2C_GetFlagStatus>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0ed      	beq.n	800a32a <I2C_DMA_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a34e:	485c      	ldr	r0, [pc, #368]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a350:	2182      	movs	r1, #130	; 0x82
 800a352:	2200      	movs	r2, #0
 800a354:	f7f9 f844 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a358:	4b5a      	ldr	r3, [pc, #360]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a35a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a35e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a360:	e00a      	b.n	800a378 <I2C_DMA_ReadDataBuffer+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a362:	4b58      	ldr	r3, [pc, #352]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	1e59      	subs	r1, r3, #1
 800a368:	4a56      	ldr	r2, [pc, #344]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a36a:	6011      	str	r1, [r2, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <I2C_DMA_ReadDataBuffer+0x88>
 800a370:	f000 fc6e 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a374:	4603      	mov	r3, r0
 800a376:	e09e      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a378:	4851      	ldr	r0, [pc, #324]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a37a:	4954      	ldr	r1, [pc, #336]	; (800a4cc <I2C_DMA_ReadDataBuffer+0x1dc>)
 800a37c:	f7f9 fa9a 	bl	80038b4 <I2C_CheckEvent>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0ed      	beq.n	800a362 <I2C_DMA_ReadDataBuffer+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	484d      	ldr	r0, [pc, #308]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a38c:	4619      	mov	r1, r3
 800a38e:	f7f9 f987 	bl	80036a0 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a392:	4b4c      	ldr	r3, [pc, #304]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a394:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a398:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a39a:	e00a      	b.n	800a3b2 <I2C_DMA_ReadDataBuffer+0xc2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a39c:	4b49      	ldr	r3, [pc, #292]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	1e59      	subs	r1, r3, #1
 800a3a2:	4a48      	ldr	r2, [pc, #288]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a3a4:	6011      	str	r1, [r2, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d103      	bne.n	800a3b2 <I2C_DMA_ReadDataBuffer+0xc2>
 800a3aa:	f000 fc51 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	e081      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a3b2:	4843      	ldr	r0, [pc, #268]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a3b4:	4946      	ldr	r1, [pc, #280]	; (800a4d0 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800a3b6:	f7f9 facf 	bl	8003958 <I2C_GetFlagStatus>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d106      	bne.n	800a3ce <I2C_DMA_ReadDataBuffer+0xde>
 800a3c0:	483f      	ldr	r0, [pc, #252]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a3c2:	4944      	ldr	r1, [pc, #272]	; (800a4d4 <I2C_DMA_ReadDataBuffer+0x1e4>)
 800a3c4:	f7f9 fac8 	bl	8003958 <I2C_GetFlagStatus>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0e6      	beq.n	800a39c <I2C_DMA_ReadDataBuffer+0xac>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a3ce:	483c      	ldr	r0, [pc, #240]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	f7f8 ffc5 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a3d6:	4b3b      	ldr	r3, [pc, #236]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a3d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a3dc:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a3de:	e00a      	b.n	800a3f6 <I2C_DMA_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a3e0:	4b38      	ldr	r3, [pc, #224]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	1e59      	subs	r1, r3, #1
 800a3e6:	4a37      	ldr	r2, [pc, #220]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a3e8:	6011      	str	r1, [r2, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d103      	bne.n	800a3f6 <I2C_DMA_ReadDataBuffer+0x106>
 800a3ee:	f000 fc2f 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	e05f      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a3f6:	4832      	ldr	r0, [pc, #200]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a3f8:	4933      	ldr	r1, [pc, #204]	; (800a4c8 <I2C_DMA_ReadDataBuffer+0x1d8>)
 800a3fa:	f7f9 faad 	bl	8003958 <I2C_GetFlagStatus>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0ed      	beq.n	800a3e0 <I2C_DMA_ReadDataBuffer+0xf0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800a404:	482e      	ldr	r0, [pc, #184]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a406:	2182      	movs	r1, #130	; 0x82
 800a408:	2201      	movs	r2, #1
 800a40a:	f7f8 ffe9 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a40e:	4b2d      	ldr	r3, [pc, #180]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a410:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a414:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a416:	e00a      	b.n	800a42e <I2C_DMA_ReadDataBuffer+0x13e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a418:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	1e59      	subs	r1, r3, #1
 800a41e:	4a29      	ldr	r2, [pc, #164]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a420:	6011      	str	r1, [r2, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <I2C_DMA_ReadDataBuffer+0x13e>
 800a426:	f000 fc13 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a42a:	4603      	mov	r3, r0
 800a42c:	e043      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a42e:	4824      	ldr	r0, [pc, #144]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a430:	4929      	ldr	r1, [pc, #164]	; (800a4d8 <I2C_DMA_ReadDataBuffer+0x1e8>)
 800a432:	f7f9 fa3f 	bl	80038b4 <I2C_CheckEvent>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0ed      	beq.n	800a418 <I2C_DMA_ReadDataBuffer+0x128>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a43c:	4820      	ldr	r0, [pc, #128]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a43e:	2101      	movs	r1, #1
 800a440:	f7f9 f9bc 	bl	80037bc <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800a444:	4825      	ldr	r0, [pc, #148]	; (800a4dc <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a446:	2101      	movs	r1, #1
 800a448:	f7f9 fc72 	bl	8003d30 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800a44c:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a44e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800a452:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800a454:	e00a      	b.n	800a46c <I2C_DMA_ReadDataBuffer+0x17c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a456:	4b1b      	ldr	r3, [pc, #108]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	1e59      	subs	r1, r3, #1
 800a45c:	4a19      	ldr	r2, [pc, #100]	; (800a4c4 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a45e:	6011      	str	r1, [r2, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d103      	bne.n	800a46c <I2C_DMA_ReadDataBuffer+0x17c>
 800a464:	f000 fbf4 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a468:	4603      	mov	r3, r0
 800a46a:	e024      	b.n	800a4b6 <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800a46c:	481b      	ldr	r0, [pc, #108]	; (800a4dc <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a46e:	491c      	ldr	r1, [pc, #112]	; (800a4e0 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800a470:	f7f9 fd5c 	bl	8003f2c <DMA_GetFlagStatus>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0ed      	beq.n	800a456 <I2C_DMA_ReadDataBuffer+0x166>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a47a:	4811      	ldr	r0, [pc, #68]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a47c:	2101      	movs	r1, #1
 800a47e:	f7f8 ff8f 	bl	80033a0 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800a482:	4816      	ldr	r0, [pc, #88]	; (800a4dc <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a484:	2100      	movs	r1, #0
 800a486:	f7f9 fc53 	bl	8003d30 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a48a:	480d      	ldr	r0, [pc, #52]	; (800a4c0 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a48c:	2100      	movs	r1, #0
 800a48e:	f7f9 f995 	bl	80037bc <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800a492:	4812      	ldr	r0, [pc, #72]	; (800a4dc <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a494:	4912      	ldr	r1, [pc, #72]	; (800a4e0 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800a496:	f7f9 fd85 	bl	8003fa4 <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 800a49a:	7b3b      	ldrb	r3, [r7, #12]
 800a49c:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 800a49e:	7b7b      	ldrb	r3, [r7, #13]
 800a4a0:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	737b      	strb	r3, [r7, #13]
  
  /* return the data */
  return (uint16_t) ((uint16_t)IOE_BufferRX[0] | (uint16_t)IOE_BufferRX[1]<< 8);
 800a4a6:	7b3b      	ldrb	r3, [r7, #12]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	7b7b      	ldrb	r3, [r7, #13]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	b29b      	uxth	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a4c4:	2000005c 	andcs	r0, r0, ip, asr r0
 800a4c8:	10000001 	andne	r0, r0, r1
 800a4cc:	00070082 	andeq	r0, r7, r2, lsl #1
 800a4d0:	10000080 	andne	r0, r0, r0, lsl #1
 800a4d4:	10000004 	andne	r0, r0, r4
 800a4d8:	00030002 	andeq	r0, r3, r2
 800a4dc:	40026010 	andmi	r6, r2, r0, lsl r0
 800a4e0:	10000020 	andne	r0, r0, r0, lsr #32

0800a4e4 <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 800a4ea:	204d      	movs	r0, #77	; 0x4d
 800a4ec:	f000 faca 	bl	800aa84 <I2C_ReadDataBuffer>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	dc05      	bgt.n	800a50a <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800a504:	330e      	adds	r3, #14
 800a506:	607b      	str	r3, [r7, #4]
 800a508:	e004      	b.n	800a514 <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800a510:	3308      	adds	r3, #8
 800a512:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a0c      	ldr	r2, [pc, #48]	; (800a548 <IOE_TP_Read_X+0x64>)
 800a518:	fb82 1203 	smull	r1, r2, r2, r3
 800a51c:	441a      	add	r2, r3
 800a51e:	10d2      	asrs	r2, r2, #3
 800a520:	17db      	asrs	r3, r3, #31
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc02      	bgt.n	800a532 <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	e004      	b.n	800a53c <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2bf0      	cmp	r3, #240	; 0xf0
 800a536:	dd01      	ble.n	800a53c <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 800a538:	23ef      	movs	r3, #239	; 0xef
 800a53a:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	b29b      	uxth	r3, r3
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	88888889 	stmhi	r8, {r0, r3, r7, fp, pc}

0800a54c <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 800a552:	204f      	movs	r0, #79	; 0x4f
 800a554:	f000 fa96 	bl	800aa84 <I2C_ReadDataBuffer>
 800a558:	4603      	mov	r3, r0
 800a55a:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a562:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <IOE_TP_Read_Y+0x50>)
 800a568:	fb82 1203 	smull	r1, r2, r2, r3
 800a56c:	1052      	asrs	r2, r2, #1
 800a56e:	17db      	asrs	r3, r3, #31
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dc02      	bgt.n	800a580 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	607b      	str	r3, [r7, #4]
 800a57e:	e006      	b.n	800a58e <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a586:	dd02      	ble.n	800a58e <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 800a588:	f240 133f 	movw	r3, #319	; 0x13f
 800a58c:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	b29b      	uxth	r3, r3
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	2e8ba2e9 	cdpcs	2, 8, cr10, cr11, cr9, {7}

0800a5a0 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 800a5a6:	2051      	movs	r0, #81	; 0x51
 800a5a8:	f000 fa6c 	bl	800aa84 <I2C_ReadDataBuffer>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <IOE_TP_Read_Z+0x1a>
    z = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	b29b      	uxth	r3, r3
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop

0800a5c8 <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 800a5ce:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	f7f7 fdfa 	bl	80021cc <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 800a5d8:	f240 1005 	movw	r0, #261	; 0x105
 800a5dc:	2101      	movs	r1, #1
 800a5de:	f7f7 fd9b 	bl	8002118 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800a5e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	f7f7 fe0e 	bl	8002208 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 800a5ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	f7f7 fe81 	bl	80022f8 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 800a5f6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	f7f7 fe7c 	bl	80022f8 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 800a600:	4812      	ldr	r0, [pc, #72]	; (800a64c <IOE_GPIO_Config+0x84>)
 800a602:	2108      	movs	r1, #8
 800a604:	2204      	movs	r2, #4
 800a606:	f7f7 f97b 	bl	8001900 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 800a60a:	4811      	ldr	r0, [pc, #68]	; (800a650 <IOE_GPIO_Config+0x88>)
 800a60c:	2109      	movs	r1, #9
 800a60e:	2204      	movs	r2, #4
 800a610:	f7f7 f976 	bl	8001900 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 800a614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a618:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a61a:	2302      	movs	r3, #2
 800a61c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800a61e:	2302      	movs	r3, #2
 800a620:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800a622:	2301      	movs	r3, #1
 800a624:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800a62a:	463b      	mov	r3, r7
 800a62c:	4807      	ldr	r0, [pc, #28]	; (800a64c <IOE_GPIO_Config+0x84>)
 800a62e:	4619      	mov	r1, r3
 800a630:	f7f6 fff8 	bl	8001624 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 800a634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a638:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800a63a:	463b      	mov	r3, r7
 800a63c:	4804      	ldr	r0, [pc, #16]	; (800a650 <IOE_GPIO_Config+0x88>)
 800a63e:	4619      	mov	r1, r3
 800a640:	f7f6 fff0 	bl	8001624 <GPIO_Init>
  
}
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	40020000 	andmi	r0, r2, r0
 800a650:	40020800 	andmi	r0, r2, r0, lsl #16

0800a654 <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((IOE_I2C->CR1 & I2C_CR1_PE) == 0)
 800a65a:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <IOE_I2C_Config+0x4c>)
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d117      	bne.n	800a698 <IOE_I2C_Config+0x44>
  {   
    /* IOE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a668:	2300      	movs	r3, #0
 800a66a:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800a66c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800a670:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800a672:	2300      	movs	r3, #0
 800a674:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800a67c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a680:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800a682:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <IOE_I2C_Config+0x50>)
 800a684:	603b      	str	r3, [r7, #0]
  
    /* Initialize the I2C peripheral */
    I2C_Init(IOE_I2C, &I2C_InitStructure);
 800a686:	463b      	mov	r3, r7
 800a688:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <IOE_I2C_Config+0x4c>)
 800a68a:	4619      	mov	r1, r3
 800a68c:	f7f8 fd28 	bl	80030e0 <I2C_Init>
  
    /* Enable the I2C peripheral */
    I2C_Cmd(IOE_I2C, ENABLE);
 800a690:	4803      	ldr	r0, [pc, #12]	; (800a6a0 <IOE_I2C_Config+0x4c>)
 800a692:	2101      	movs	r1, #1
 800a694:	f7f8 fe04 	bl	80032a0 <I2C_Cmd>
  }   
}
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a6a4:	000186a0 	andeq	r8, r1, r0, lsr #13

0800a6a8 <IOE_DMA_Config>:
  * @brief  Configure the DMA Peripheral used to handle communication via I2C.
  * @param  None
  * @retval None
  */
static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b092      	sub	sp, #72	; 0x48
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 800a6b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	f7f7 fd2d 	bl	8002118 <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 800a6be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6c2:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 800a6c4:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <IOE_DMA_Config+0x98>)
 800a6c6:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800a6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800a6e6:	2304      	movs	r3, #4
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d10d      	bne.n	800a718 <IOE_DMA_Config+0x70>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 800a700:	2302      	movs	r3, #2
 800a702:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 800a704:	480f      	ldr	r0, [pc, #60]	; (800a744 <IOE_DMA_Config+0x9c>)
 800a706:	f7f9 f9b5 	bl	8003a74 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	480d      	ldr	r0, [pc, #52]	; (800a744 <IOE_DMA_Config+0x9c>)
 800a710:	4619      	mov	r1, r3
 800a712:	f7f9 fa81 	bl	8003c18 <DMA_Init>
 800a716:	e00f      	b.n	800a738 <IOE_DMA_Config+0x90>
  }
  /* If using DMA for Transmission */
  else if (Direction == IOE_DMA_TX)
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10c      	bne.n	800a738 <IOE_DMA_Config+0x90>
  { 
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 1;
 800a722:	2301      	movs	r3, #1
 800a724:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
 800a726:	4808      	ldr	r0, [pc, #32]	; (800a748 <IOE_DMA_Config+0xa0>)
 800a728:	f7f9 f9a4 	bl	8003a74 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	4805      	ldr	r0, [pc, #20]	; (800a748 <IOE_DMA_Config+0xa0>)
 800a732:	4619      	mov	r1, r3
 800a734:	f7f9 fa70 	bl	8003c18 <DMA_Init>
  }
}
 800a738:	3748      	adds	r7, #72	; 0x48
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	40005c10 	andmi	r5, r0, r0, lsl ip
 800a744:	40026010 	andmi	r6, r2, r0, lsl r0
 800a748:	400260a0 	andmi	r6, r2, r0, lsr #1

0800a74c <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	71fa      	strb	r2, [r7, #7]
 800a758:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a75e:	484c      	ldr	r0, [pc, #304]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a760:	2101      	movs	r1, #1
 800a762:	f7f8 fdfd 	bl	8003360 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a766:	4b4b      	ldr	r3, [pc, #300]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a768:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a76c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a76e:	e00a      	b.n	800a786 <I2C_WriteDeviceRegister+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a770:	4b48      	ldr	r3, [pc, #288]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	1e59      	subs	r1, r3, #1
 800a776:	4a47      	ldr	r2, [pc, #284]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <I2C_WriteDeviceRegister+0x3a>
 800a77e:	f000 fa67 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a782:	4603      	mov	r3, r0
 800a784:	e080      	b.n	800a888 <I2C_WriteDeviceRegister+0x13c>
  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a786:	4842      	ldr	r0, [pc, #264]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a788:	4943      	ldr	r1, [pc, #268]	; (800a898 <I2C_WriteDeviceRegister+0x14c>)
 800a78a:	f7f9 f8e5 	bl	8003958 <I2C_GetFlagStatus>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0ed      	beq.n	800a770 <I2C_WriteDeviceRegister+0x24>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a794:	483e      	ldr	r0, [pc, #248]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a796:	2182      	movs	r1, #130	; 0x82
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f8 fe21 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800a79e:	4b3d      	ldr	r3, [pc, #244]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a7a4:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a7a6:	e00a      	b.n	800a7be <I2C_WriteDeviceRegister+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a7a8:	4b3a      	ldr	r3, [pc, #232]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	1e59      	subs	r1, r3, #1
 800a7ae:	4a39      	ldr	r2, [pc, #228]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7b0:	6011      	str	r1, [r2, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <I2C_WriteDeviceRegister+0x72>
 800a7b6:	f000 fa4b 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	e064      	b.n	800a888 <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a7be:	4834      	ldr	r0, [pc, #208]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a7c0:	4936      	ldr	r1, [pc, #216]	; (800a89c <I2C_WriteDeviceRegister+0x150>)
 800a7c2:	f7f9 f8c9 	bl	8003958 <I2C_GetFlagStatus>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0ed      	beq.n	800a7a8 <I2C_WriteDeviceRegister+0x5c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800a7cc:	4b30      	ldr	r3, [pc, #192]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a7ce:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a7d0:	4b30      	ldr	r3, [pc, #192]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7d2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a7d6:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a7d8:	e00a      	b.n	800a7f0 <I2C_WriteDeviceRegister+0xa4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a7da:	4b2e      	ldr	r3, [pc, #184]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1e59      	subs	r1, r3, #1
 800a7e0:	4a2c      	ldr	r2, [pc, #176]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a7e2:	6011      	str	r1, [r2, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <I2C_WriteDeviceRegister+0xa4>
 800a7e8:	f000 fa32 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	e04b      	b.n	800a888 <I2C_WriteDeviceRegister+0x13c>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a7f0:	4827      	ldr	r0, [pc, #156]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a7f2:	492b      	ldr	r1, [pc, #172]	; (800a8a0 <I2C_WriteDeviceRegister+0x154>)
 800a7f4:	f7f9 f8b0 	bl	8003958 <I2C_GetFlagStatus>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0ed      	beq.n	800a7da <I2C_WriteDeviceRegister+0x8e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	4823      	ldr	r0, [pc, #140]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a802:	4619      	mov	r1, r3
 800a804:	f7f8 ff4c 	bl	80036a0 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a808:	4b22      	ldr	r3, [pc, #136]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a80a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a80e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a810:	e00a      	b.n	800a828 <I2C_WriteDeviceRegister+0xdc>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a812:	4b20      	ldr	r3, [pc, #128]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	1e59      	subs	r1, r3, #1
 800a818:	4a1e      	ldr	r2, [pc, #120]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a81a:	6011      	str	r1, [r2, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <I2C_WriteDeviceRegister+0xdc>
 800a820:	f000 fa16 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a824:	4603      	mov	r3, r0
 800a826:	e02f      	b.n	800a888 <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a828:	4819      	ldr	r0, [pc, #100]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a82a:	491d      	ldr	r1, [pc, #116]	; (800a8a0 <I2C_WriteDeviceRegister+0x154>)
 800a82c:	f7f9 f894 	bl	8003958 <I2C_GetFlagStatus>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0ed      	beq.n	800a812 <I2C_WriteDeviceRegister+0xc6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 800a836:	79bb      	ldrb	r3, [r7, #6]
 800a838:	4815      	ldr	r0, [pc, #84]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a83a:	4619      	mov	r1, r3
 800a83c:	f7f8 ff30 	bl	80036a0 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a840:	4b14      	ldr	r3, [pc, #80]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a842:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a846:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a848:	e00a      	b.n	800a860 <I2C_WriteDeviceRegister+0x114>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	1e59      	subs	r1, r3, #1
 800a850:	4a10      	ldr	r2, [pc, #64]	; (800a894 <I2C_WriteDeviceRegister+0x148>)
 800a852:	6011      	str	r1, [r2, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d103      	bne.n	800a860 <I2C_WriteDeviceRegister+0x114>
 800a858:	f000 f9fa 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a85c:	4603      	mov	r3, r0
 800a85e:	e013      	b.n	800a888 <I2C_WriteDeviceRegister+0x13c>
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a860:	480b      	ldr	r0, [pc, #44]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a862:	490f      	ldr	r1, [pc, #60]	; (800a8a0 <I2C_WriteDeviceRegister+0x154>)
 800a864:	f7f9 f878 	bl	8003958 <I2C_GetFlagStatus>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0ed      	beq.n	800a84a <I2C_WriteDeviceRegister+0xfe>
 800a86e:	4808      	ldr	r0, [pc, #32]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a870:	490c      	ldr	r1, [pc, #48]	; (800a8a4 <I2C_WriteDeviceRegister+0x158>)
 800a872:	f7f9 f871 	bl	8003958 <I2C_GetFlagStatus>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0e6      	beq.n	800a84a <I2C_WriteDeviceRegister+0xfe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a87c:	4804      	ldr	r0, [pc, #16]	; (800a890 <I2C_WriteDeviceRegister+0x144>)
 800a87e:	2101      	movs	r1, #1
 800a880:	f7f8 fd8e 	bl	80033a0 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	b2db      	uxtb	r3, r3
  
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a894:	2000005c 	andcs	r0, r0, ip, asr r0
 800a898:	10000001 	andne	r0, r0, r1
 800a89c:	10000002 	andne	r0, r0, r2
 800a8a0:	10000080 	andne	r0, r0, r0, lsl #1
 800a8a4:	10000004 	andne	r0, r0, r4

0800a8a8 <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a8b6:	486c      	ldr	r0, [pc, #432]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f7f8 fd51 	bl	8003360 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a8be:	4b6b      	ldr	r3, [pc, #428]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a8c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a8c4:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a8c6:	e00a      	b.n	800a8de <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a8c8:	4b68      	ldr	r3, [pc, #416]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	1e59      	subs	r1, r3, #1
 800a8ce:	4a67      	ldr	r2, [pc, #412]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a8d0:	6011      	str	r1, [r2, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d103      	bne.n	800a8de <I2C_ReadDeviceRegister+0x36>
 800a8d6:	f000 f9bb 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	e0c0      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a8de:	4862      	ldr	r0, [pc, #392]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a8e0:	4963      	ldr	r1, [pc, #396]	; (800aa70 <I2C_ReadDeviceRegister+0x1c8>)
 800a8e2:	f7f9 f839 	bl	8003958 <I2C_GetFlagStatus>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0ed      	beq.n	800a8c8 <I2C_ReadDeviceRegister+0x20>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 800a8ec:	485e      	ldr	r0, [pc, #376]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	f7f8 fd94 	bl	800341c <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a8f4:	485c      	ldr	r0, [pc, #368]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a8f6:	2182      	movs	r1, #130	; 0x82
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f7f8 fd71 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800a8fe:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a900:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a904:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a906:	e00a      	b.n	800a91e <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a908:	4b58      	ldr	r3, [pc, #352]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	1e59      	subs	r1, r3, #1
 800a90e:	4a57      	ldr	r2, [pc, #348]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a910:	6011      	str	r1, [r2, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <I2C_ReadDeviceRegister+0x76>
 800a916:	f000 f99b 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a91a:	4603      	mov	r3, r0
 800a91c:	e0a0      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a91e:	4852      	ldr	r0, [pc, #328]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a920:	4954      	ldr	r1, [pc, #336]	; (800aa74 <I2C_ReadDeviceRegister+0x1cc>)
 800a922:	f7f9 f819 	bl	8003958 <I2C_GetFlagStatus>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0ed      	beq.n	800a908 <I2C_ReadDeviceRegister+0x60>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800a92c:	4b4e      	ldr	r3, [pc, #312]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a92e:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a930:	4b4e      	ldr	r3, [pc, #312]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a932:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a936:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a938:	e00a      	b.n	800a950 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a93a:	4b4c      	ldr	r3, [pc, #304]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	1e59      	subs	r1, r3, #1
 800a940:	4a4a      	ldr	r2, [pc, #296]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a942:	6011      	str	r1, [r2, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <I2C_ReadDeviceRegister+0xa8>
 800a948:	f000 f982 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a94c:	4603      	mov	r3, r0
 800a94e:	e087      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a950:	4845      	ldr	r0, [pc, #276]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a952:	4949      	ldr	r1, [pc, #292]	; (800aa78 <I2C_ReadDeviceRegister+0x1d0>)
 800a954:	f7f9 f800 	bl	8003958 <I2C_GetFlagStatus>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0ed      	beq.n	800a93a <I2C_ReadDeviceRegister+0x92>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	4841      	ldr	r0, [pc, #260]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a962:	4619      	mov	r1, r3
 800a964:	f7f8 fe9c 	bl	80036a0 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a968:	4b40      	ldr	r3, [pc, #256]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a96a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a96e:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a970:	e00a      	b.n	800a988 <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a972:	4b3e      	ldr	r3, [pc, #248]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	1e59      	subs	r1, r3, #1
 800a978:	4a3c      	ldr	r2, [pc, #240]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a97a:	6011      	str	r1, [r2, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <I2C_ReadDeviceRegister+0xe0>
 800a980:	f000 f966 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a984:	4603      	mov	r3, r0
 800a986:	e06b      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a988:	4837      	ldr	r0, [pc, #220]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a98a:	493b      	ldr	r1, [pc, #236]	; (800aa78 <I2C_ReadDeviceRegister+0x1d0>)
 800a98c:	f7f8 ffe4 	bl	8003958 <I2C_GetFlagStatus>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0ed      	beq.n	800a972 <I2C_ReadDeviceRegister+0xca>
 800a996:	4834      	ldr	r0, [pc, #208]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a998:	4938      	ldr	r1, [pc, #224]	; (800aa7c <I2C_ReadDeviceRegister+0x1d4>)
 800a99a:	f7f8 ffdd 	bl	8003958 <I2C_GetFlagStatus>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0e6      	beq.n	800a972 <I2C_ReadDeviceRegister+0xca>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a9a4:	4830      	ldr	r0, [pc, #192]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	f7f8 fcda 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a9ac:	4b2f      	ldr	r3, [pc, #188]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9ae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a9b2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a9b4:	e00a      	b.n	800a9cc <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a9b6:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	1e59      	subs	r1, r3, #1
 800a9bc:	4a2b      	ldr	r2, [pc, #172]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9be:	6011      	str	r1, [r2, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <I2C_ReadDeviceRegister+0x124>
 800a9c4:	f000 f944 	bl	800ac50 <IOE_TimeoutUserCallback>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	e049      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a9cc:	4826      	ldr	r0, [pc, #152]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a9ce:	4928      	ldr	r1, [pc, #160]	; (800aa70 <I2C_ReadDeviceRegister+0x1c8>)
 800a9d0:	f7f8 ffc2 	bl	8003958 <I2C_GetFlagStatus>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0ed      	beq.n	800a9b6 <I2C_ReadDeviceRegister+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800a9da:	4823      	ldr	r0, [pc, #140]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800a9dc:	2182      	movs	r1, #130	; 0x82
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f7f8 fcfe 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a9e4:	4b21      	ldr	r3, [pc, #132]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a9ea:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a9ec:	e00a      	b.n	800aa04 <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a9ee:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	1e59      	subs	r1, r3, #1
 800a9f4:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800a9f6:	6011      	str	r1, [r2, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d103      	bne.n	800aa04 <I2C_ReadDeviceRegister+0x15c>
 800a9fc:	f000 f928 	bl	800ac50 <IOE_TimeoutUserCallback>
 800aa00:	4603      	mov	r3, r0
 800aa02:	e02d      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aa04:	4818      	ldr	r0, [pc, #96]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa06:	491b      	ldr	r1, [pc, #108]	; (800aa74 <I2C_ReadDeviceRegister+0x1cc>)
 800aa08:	f7f8 ffa6 	bl	8003958 <I2C_GetFlagStatus>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0ed      	beq.n	800a9ee <I2C_ReadDeviceRegister+0x146>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800aa12:	4b15      	ldr	r3, [pc, #84]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa14:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aa16:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800aa18:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aa1c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800aa1e:	e00a      	b.n	800aa36 <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aa20:	4b12      	ldr	r3, [pc, #72]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	1e59      	subs	r1, r3, #1
 800aa26:	4a11      	ldr	r2, [pc, #68]	; (800aa6c <I2C_ReadDeviceRegister+0x1c4>)
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <I2C_ReadDeviceRegister+0x18e>
 800aa2e:	f000 f90f 	bl	800ac50 <IOE_TimeoutUserCallback>
 800aa32:	4603      	mov	r3, r0
 800aa34:	e014      	b.n	800aa60 <I2C_ReadDeviceRegister+0x1b8>
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800aa36:	480c      	ldr	r0, [pc, #48]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa38:	4911      	ldr	r1, [pc, #68]	; (800aa80 <I2C_ReadDeviceRegister+0x1d8>)
 800aa3a:	f7f8 ff8d 	bl	8003958 <I2C_GetFlagStatus>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0ed      	beq.n	800aa20 <I2C_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800aa44:	4808      	ldr	r0, [pc, #32]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa46:	2101      	movs	r1, #1
 800aa48:	f7f8 fcaa 	bl	80033a0 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 800aa4c:	4806      	ldr	r0, [pc, #24]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa4e:	f7f8 fe37 	bl	80036c0 <I2C_ReceiveData>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800aa56:	4804      	ldr	r0, [pc, #16]	; (800aa68 <I2C_ReadDeviceRegister+0x1c0>)
 800aa58:	2101      	movs	r1, #1
 800aa5a:	f7f8 fcdf 	bl	800341c <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	40005c00 	andmi	r5, r0, r0, lsl #24
 800aa6c:	2000005c 	andcs	r0, r0, ip, asr r0
 800aa70:	10000001 	andne	r0, r0, r1
 800aa74:	10000002 	andne	r0, r0, r2
 800aa78:	10000080 	andne	r0, r0, r0, lsl #1
 800aa7c:	10000004 	andne	r0, r0, r4
 800aa80:	10000040 	andne	r0, r0, r0, asr #32

0800aa84 <I2C_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	733b      	strb	r3, [r7, #12]
 800aa90:	2300      	movs	r3, #0
 800aa92:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800aa94:	4868      	ldr	r0, [pc, #416]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800aa96:	2101      	movs	r1, #1
 800aa98:	f7f8 fc62 	bl	8003360 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aa9c:	4b67      	ldr	r3, [pc, #412]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aa9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aaa2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800aaa4:	e00a      	b.n	800aabc <I2C_ReadDataBuffer+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aaa6:	4b65      	ldr	r3, [pc, #404]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	1e59      	subs	r1, r3, #1
 800aaac:	4a63      	ldr	r2, [pc, #396]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aaae:	6011      	str	r1, [r2, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d103      	bne.n	800aabc <I2C_ReadDataBuffer+0x38>
 800aab4:	f000 f8cc 	bl	800ac50 <IOE_TimeoutUserCallback>
 800aab8:	4603      	mov	r3, r0
 800aaba:	e0b9      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800aabc:	485e      	ldr	r0, [pc, #376]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800aabe:	4960      	ldr	r1, [pc, #384]	; (800ac40 <I2C_ReadDataBuffer+0x1bc>)
 800aac0:	f7f8 ff4a 	bl	8003958 <I2C_GetFlagStatus>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0ed      	beq.n	800aaa6 <I2C_ReadDataBuffer+0x22>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800aaca:	485b      	ldr	r0, [pc, #364]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800aacc:	2182      	movs	r1, #130	; 0x82
 800aace:	2200      	movs	r2, #0
 800aad0:	f7f8 fc86 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800aad4:	4b59      	ldr	r3, [pc, #356]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aad6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aada:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aadc:	e00a      	b.n	800aaf4 <I2C_ReadDataBuffer+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aade:	4b57      	ldr	r3, [pc, #348]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	1e59      	subs	r1, r3, #1
 800aae4:	4a55      	ldr	r2, [pc, #340]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800aae6:	6011      	str	r1, [r2, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <I2C_ReadDataBuffer+0x70>
 800aaec:	f000 f8b0 	bl	800ac50 <IOE_TimeoutUserCallback>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	e09d      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aaf4:	4850      	ldr	r0, [pc, #320]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800aaf6:	4953      	ldr	r1, [pc, #332]	; (800ac44 <I2C_ReadDataBuffer+0x1c0>)
 800aaf8:	f7f8 ff2e 	bl	8003958 <I2C_GetFlagStatus>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0ed      	beq.n	800aade <I2C_ReadDataBuffer+0x5a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800ab02:	4b4d      	ldr	r3, [pc, #308]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab04:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ab06:	4b4d      	ldr	r3, [pc, #308]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ab0c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800ab0e:	e00a      	b.n	800ab26 <I2C_ReadDataBuffer+0xa2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ab10:	4b4a      	ldr	r3, [pc, #296]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	1e59      	subs	r1, r3, #1
 800ab16:	4a49      	ldr	r2, [pc, #292]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab18:	6011      	str	r1, [r2, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d103      	bne.n	800ab26 <I2C_ReadDataBuffer+0xa2>
 800ab1e:	f000 f897 	bl	800ac50 <IOE_TimeoutUserCallback>
 800ab22:	4603      	mov	r3, r0
 800ab24:	e084      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800ab26:	4844      	ldr	r0, [pc, #272]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab28:	4947      	ldr	r1, [pc, #284]	; (800ac48 <I2C_ReadDataBuffer+0x1c4>)
 800ab2a:	f7f8 ff15 	bl	8003958 <I2C_GetFlagStatus>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0ed      	beq.n	800ab10 <I2C_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	483f      	ldr	r0, [pc, #252]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f7f8 fdb0 	bl	80036a0 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800ab40:	483d      	ldr	r0, [pc, #244]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab42:	2101      	movs	r1, #1
 800ab44:	f7f8 fc0c 	bl	8003360 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ab48:	4b3c      	ldr	r3, [pc, #240]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab4a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ab4e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800ab50:	e00a      	b.n	800ab68 <I2C_ReadDataBuffer+0xe4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ab52:	4b3a      	ldr	r3, [pc, #232]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	1e59      	subs	r1, r3, #1
 800ab58:	4a38      	ldr	r2, [pc, #224]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab5a:	6011      	str	r1, [r2, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d103      	bne.n	800ab68 <I2C_ReadDataBuffer+0xe4>
 800ab60:	f000 f876 	bl	800ac50 <IOE_TimeoutUserCallback>
 800ab64:	4603      	mov	r3, r0
 800ab66:	e063      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800ab68:	4833      	ldr	r0, [pc, #204]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab6a:	4935      	ldr	r1, [pc, #212]	; (800ac40 <I2C_ReadDataBuffer+0x1bc>)
 800ab6c:	f7f8 fef4 	bl	8003958 <I2C_GetFlagStatus>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0ed      	beq.n	800ab52 <I2C_ReadDataBuffer+0xce>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800ab76:	4830      	ldr	r0, [pc, #192]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ab78:	2182      	movs	r1, #130	; 0x82
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f7f8 fc30 	bl	80033e0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ab80:	4b2e      	ldr	r3, [pc, #184]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab82:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ab86:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ab88:	e00a      	b.n	800aba0 <I2C_ReadDataBuffer+0x11c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ab8a:	4b2c      	ldr	r3, [pc, #176]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	1e59      	subs	r1, r3, #1
 800ab90:	4a2a      	ldr	r2, [pc, #168]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800ab92:	6011      	str	r1, [r2, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <I2C_ReadDataBuffer+0x11c>
 800ab98:	f000 f85a 	bl	800ac50 <IOE_TimeoutUserCallback>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	e047      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aba0:	4825      	ldr	r0, [pc, #148]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800aba2:	4928      	ldr	r1, [pc, #160]	; (800ac44 <I2C_ReadDataBuffer+0x1c0>)
 800aba4:	f7f8 fed8 	bl	8003958 <I2C_GetFlagStatus>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ed      	beq.n	800ab8a <I2C_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 800abae:	4822      	ldr	r0, [pc, #136]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abb0:	2100      	movs	r1, #0
 800abb2:	f7f8 fc33 	bl	800341c <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 800abb6:	4820      	ldr	r0, [pc, #128]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abbc:	f7f8 fd10 	bl	80035e0 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800abc0:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abc2:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800abc4:	4b1d      	ldr	r3, [pc, #116]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800abc6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800abca:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800abcc:	e00a      	b.n	800abe4 <I2C_ReadDataBuffer+0x160>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800abce:	4b1b      	ldr	r3, [pc, #108]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	1e59      	subs	r1, r3, #1
 800abd4:	4a19      	ldr	r2, [pc, #100]	; (800ac3c <I2C_ReadDataBuffer+0x1b8>)
 800abd6:	6011      	str	r1, [r2, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <I2C_ReadDataBuffer+0x160>
 800abdc:	f000 f838 	bl	800ac50 <IOE_TimeoutUserCallback>
 800abe0:	4603      	mov	r3, r0
 800abe2:	e025      	b.n	800ac30 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800abe4:	4814      	ldr	r0, [pc, #80]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abe6:	4919      	ldr	r1, [pc, #100]	; (800ac4c <I2C_ReadDataBuffer+0x1c8>)
 800abe8:	f7f8 feb6 	bl	8003958 <I2C_GetFlagStatus>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0ed      	beq.n	800abce <I2C_ReadDataBuffer+0x14a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800abf2:	4811      	ldr	r0, [pc, #68]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abf4:	2101      	movs	r1, #1
 800abf6:	f7f8 fbd3 	bl	80033a0 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 800abfa:	480f      	ldr	r0, [pc, #60]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800abfc:	f7f8 fd60 	bl	80036c0 <I2C_ReceiveData>
 800ac00:	4603      	mov	r3, r0
 800ac02:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 800ac04:	480c      	ldr	r0, [pc, #48]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ac06:	f7f8 fd5b 	bl	80036c0 <I2C_ReceiveData>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800ac0e:	480a      	ldr	r0, [pc, #40]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ac10:	2101      	movs	r1, #1
 800ac12:	f7f8 fc03 	bl	800341c <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 800ac16:	4808      	ldr	r0, [pc, #32]	; (800ac38 <I2C_ReadDataBuffer+0x1b4>)
 800ac18:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800ac1c:	f7f8 fce0 	bl	80035e0 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 800ac20:	7b3b      	ldrb	r3, [r7, #12]
 800ac22:	461a      	mov	r2, r3
 800ac24:	7b7b      	ldrb	r3, [r7, #13]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	b29b      	uxth	r3, r3
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	40005c00 	andmi	r5, r0, r0, lsl #24
 800ac3c:	2000005c 	andcs	r0, r0, ip, asr r0
 800ac40:	10000001 	andne	r0, r0, r1
 800ac44:	10000002 	andne	r0, r0, r2
 800ac48:	10000080 	andne	r0, r0, r0, lsl #1
 800ac4c:	10000004 	andne	r0, r0, r4

0800ac50 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800ac56:	4817      	ldr	r0, [pc, #92]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800ac58:	2101      	movs	r1, #1
 800ac5a:	f7f8 fba1 	bl	80033a0 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 800ac5e:	4815      	ldr	r0, [pc, #84]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800ac60:	2101      	movs	r1, #1
 800ac62:	f7f8 fc5b 	bl	800351c <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 800ac66:	4813      	ldr	r0, [pc, #76]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800ac68:	2100      	movs	r1, #0
 800ac6a:	f7f8 fc57 	bl	800351c <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 800ac6e:	f7ff fcab 	bl	800a5c8 <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 800ac72:	4810      	ldr	r0, [pc, #64]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800ac74:	f7f8 f9fa 	bl	800306c <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800ac7c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800ac80:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800ac82:	2300      	movs	r3, #0
 800ac84:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800ac86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8a:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800ac8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac90:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800ac92:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <IOE_TimeoutUserCallback+0x68>)
 800ac94:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800ac96:	4807      	ldr	r0, [pc, #28]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800ac98:	2101      	movs	r1, #1
 800ac9a:	f7f8 fb01 	bl	80032a0 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4804      	ldr	r0, [pc, #16]	; (800acb4 <IOE_TimeoutUserCallback+0x64>)
 800aca2:	4619      	mov	r1, r3
 800aca4:	f7f8 fa1c 	bl	80030e0 <I2C_Init>
  
  return 0;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40005c00 	andmi	r5, r0, r0, lsl #24
 800acb8:	000186a0 	andeq	r8, r1, r0, lsr #13

0800acbc <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800acc4:	2300      	movs	r3, #0
 800acc6:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a08      	ldr	r2, [pc, #32]	; (800acec <delay+0x30>)
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	e002      	b.n	800acda <delay+0x1e>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1f9      	bne.n	800acd4 <delay+0x18>
  {
  }
}
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	000186a0 	andeq	r8, r1, r0, lsr #13

0800acf0 <atan>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800acfc:	f2c4 430f 	movt	r3, #17423	; 0x440f
 800ad00:	4598      	cmp	r8, r3
 800ad02:	b083      	sub	sp, #12
 800ad04:	4683      	mov	fp, r0
 800ad06:	468a      	mov	sl, r1
 800ad08:	460f      	mov	r7, r1
 800ad0a:	dd23      	ble.n	800ad54 <atan+0x64>
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800ad12:	4588      	cmp	r8, r1
 800ad14:	f300 80d1 	bgt.w	800aeba <atan+0x1ca>
 800ad18:	bf14      	ite	ne
 800ad1a:	2300      	movne	r3, #0
 800ad1c:	2301      	moveq	r3, #1
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	bf0c      	ite	eq
 800ad22:	2200      	moveq	r2, #0
 800ad24:	f003 0201 	andne.w	r2, r3, #1
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	f040 80c6 	bne.w	800aeba <atan+0x1ca>
 800ad2e:	f242 1afb 	movw	sl, #8699	; 0x21fb
 800ad32:	4653      	mov	r3, sl
 800ad34:	f6c3 73f9 	movt	r3, #16377	; 0x3ff9
 800ad38:	f6cb 7af9 	movt	sl, #49145	; 0xbff9
 800ad3c:	f642 5b18 	movw	fp, #11544	; 0x2d18
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	bfc8      	it	gt
 800ad44:	469a      	movgt	sl, r3
 800ad46:	f2c5 4b44 	movt	fp, #21572	; 0x5444
 800ad4a:	4658      	mov	r0, fp
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	b003      	add	sp, #12
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad58:	f6c3 73db 	movt	r3, #16347	; 0x3fdb
 800ad5c:	4598      	cmp	r8, r3
 800ad5e:	f300 80cc 	bgt.w	800aefa <atan+0x20a>
 800ad62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad66:	f6c3 631f 	movt	r3, #15903	; 0x3e1f
 800ad6a:	4598      	cmp	r8, r3
 800ad6c:	f340 80b2 	ble.w	800aed4 <atan+0x1e4>
 800ad70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad74:	465a      	mov	r2, fp
 800ad76:	4653      	mov	r3, sl
 800ad78:	4658      	mov	r0, fp
 800ad7a:	4651      	mov	r1, sl
 800ad7c:	f8cd c004 	str.w	ip, [sp, #4]
 800ad80:	f7f5 fbd8 	bl	8000534 <__aeabi_dmul>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4680      	mov	r8, r0
 800ad8a:	4689      	mov	r9, r1
 800ad8c:	f7f5 fbd2 	bl	8000534 <__aeabi_dmul>
 800ad90:	a3a1      	add	r3, pc, #644	; (adr r3, 800b018 <atan+0x328>)
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	4604      	mov	r4, r0
 800ad98:	460d      	mov	r5, r1
 800ad9a:	f7f5 fbcb 	bl	8000534 <__aeabi_dmul>
 800ad9e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b020 <atan+0x330>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fa14 	bl	80001d0 <__adddf3>
 800ada8:	4622      	mov	r2, r4
 800adaa:	462b      	mov	r3, r5
 800adac:	f7f5 fbc2 	bl	8000534 <__aeabi_dmul>
 800adb0:	a39d      	add	r3, pc, #628	; (adr r3, 800b028 <atan+0x338>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa0b 	bl	80001d0 <__adddf3>
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	f7f5 fbb9 	bl	8000534 <__aeabi_dmul>
 800adc2:	a39b      	add	r3, pc, #620	; (adr r3, 800b030 <atan+0x340>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 fa02 	bl	80001d0 <__adddf3>
 800adcc:	4622      	mov	r2, r4
 800adce:	462b      	mov	r3, r5
 800add0:	f7f5 fbb0 	bl	8000534 <__aeabi_dmul>
 800add4:	a398      	add	r3, pc, #608	; (adr r3, 800b038 <atan+0x348>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 f9f9 	bl	80001d0 <__adddf3>
 800adde:	4622      	mov	r2, r4
 800ade0:	462b      	mov	r3, r5
 800ade2:	f7f5 fba7 	bl	8000534 <__aeabi_dmul>
 800ade6:	a396      	add	r3, pc, #600	; (adr r3, 800b040 <atan+0x350>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	f7f5 f9f0 	bl	80001d0 <__adddf3>
 800adf0:	4642      	mov	r2, r8
 800adf2:	464b      	mov	r3, r9
 800adf4:	f7f5 fb9e 	bl	8000534 <__aeabi_dmul>
 800adf8:	a393      	add	r3, pc, #588	; (adr r3, 800b048 <atan+0x358>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	4680      	mov	r8, r0
 800ae00:	4689      	mov	r9, r1
 800ae02:	4620      	mov	r0, r4
 800ae04:	4629      	mov	r1, r5
 800ae06:	f7f5 fb95 	bl	8000534 <__aeabi_dmul>
 800ae0a:	a391      	add	r3, pc, #580	; (adr r3, 800b050 <atan+0x360>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 f9dc 	bl	80001cc <__aeabi_dsub>
 800ae14:	4622      	mov	r2, r4
 800ae16:	462b      	mov	r3, r5
 800ae18:	f7f5 fb8c 	bl	8000534 <__aeabi_dmul>
 800ae1c:	a38e      	add	r3, pc, #568	; (adr r3, 800b058 <atan+0x368>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f7f5 f9d3 	bl	80001cc <__aeabi_dsub>
 800ae26:	4622      	mov	r2, r4
 800ae28:	462b      	mov	r3, r5
 800ae2a:	f7f5 fb83 	bl	8000534 <__aeabi_dmul>
 800ae2e:	a38c      	add	r3, pc, #560	; (adr r3, 800b060 <atan+0x370>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 f9ca 	bl	80001cc <__aeabi_dsub>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	f7f5 fb7a 	bl	8000534 <__aeabi_dmul>
 800ae40:	a389      	add	r3, pc, #548	; (adr r3, 800b068 <atan+0x378>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 f9c1 	bl	80001cc <__aeabi_dsub>
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	f7f5 fb71 	bl	8000534 <__aeabi_dmul>
 800ae52:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ae56:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	d07a      	beq.n	800af56 <atan+0x266>
 800ae60:	4640      	mov	r0, r8
 800ae62:	4649      	mov	r1, r9
 800ae64:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800ae68:	f7f5 f9b2 	bl	80001d0 <__adddf3>
 800ae6c:	465a      	mov	r2, fp
 800ae6e:	4653      	mov	r3, sl
 800ae70:	f7f5 fb60 	bl	8000534 <__aeabi_dmul>
 800ae74:	f24f 2c18 	movw	ip, #61976	; 0xf218
 800ae78:	f6c0 0c00 	movt	ip, #2048	; 0x800
 800ae7c:	44a4      	add	ip, r4
 800ae7e:	e9dc 2300 	ldrd	r2, r3, [ip]
 800ae82:	f7f5 f9a3 	bl	80001cc <__aeabi_dsub>
 800ae86:	465a      	mov	r2, fp
 800ae88:	4653      	mov	r3, sl
 800ae8a:	f7f5 f99f 	bl	80001cc <__aeabi_dsub>
 800ae8e:	f24f 2538 	movw	r5, #62008	; 0xf238
 800ae92:	f6c0 0500 	movt	r5, #2048	; 0x800
 800ae96:	4425      	add	r5, r4
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aea0:	f7f5 f994 	bl	80001cc <__aeabi_dsub>
 800aea4:	2f00      	cmp	r7, #0
 800aea6:	468a      	mov	sl, r1
 800aea8:	4683      	mov	fp, r0
 800aeaa:	bfb8      	it	lt
 800aeac:	f101 4a00 	addlt.w	sl, r1, #2147483648	; 0x80000000
 800aeb0:	4658      	mov	r0, fp
 800aeb2:	4651      	mov	r1, sl
 800aeb4:	b003      	add	sp, #12
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	4658      	mov	r0, fp
 800aebc:	4651      	mov	r1, sl
 800aebe:	465a      	mov	r2, fp
 800aec0:	4653      	mov	r3, sl
 800aec2:	f7f5 f985 	bl	80001d0 <__adddf3>
 800aec6:	4683      	mov	fp, r0
 800aec8:	468a      	mov	sl, r1
 800aeca:	4658      	mov	r0, fp
 800aecc:	4651      	mov	r1, sl
 800aece:	b003      	add	sp, #12
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	a366      	add	r3, pc, #408	; (adr r3, 800b070 <atan+0x380>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	f7f5 f979 	bl	80001d0 <__adddf3>
 800aede:	2300      	movs	r3, #0
 800aee0:	2200      	movs	r2, #0
 800aee2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800aee6:	f7f5 fdb5 	bl	8000a54 <__aeabi_dcmpgt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f af40 	beq.w	800ad70 <atan+0x80>
 800aef0:	4658      	mov	r0, fp
 800aef2:	4651      	mov	r1, sl
 800aef4:	b003      	add	sp, #12
 800aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefa:	f000 f8bd 	bl	800b078 <fabs>
 800aefe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af02:	f6c3 73f2 	movt	r3, #16370	; 0x3ff2
 800af06:	4598      	cmp	r8, r3
 800af08:	4604      	mov	r4, r0
 800af0a:	460d      	mov	r5, r1
 800af0c:	dc34      	bgt.n	800af78 <atan+0x288>
 800af0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af12:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 800af16:	4598      	cmp	r8, r3
 800af18:	dc62      	bgt.n	800afe0 <atan+0x2f0>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	f7f5 f957 	bl	80001d0 <__adddf3>
 800af22:	2300      	movs	r3, #0
 800af24:	2200      	movs	r2, #0
 800af26:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800af2a:	f7f5 f94f 	bl	80001cc <__aeabi_dsub>
 800af2e:	2200      	movs	r2, #0
 800af30:	4680      	mov	r8, r0
 800af32:	4689      	mov	r9, r1
 800af34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af38:	4620      	mov	r0, r4
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7f5 f948 	bl	80001d0 <__adddf3>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 fc1e 	bl	8000788 <__aeabi_ddiv>
 800af4c:	f04f 0c00 	mov.w	ip, #0
 800af50:	4683      	mov	fp, r0
 800af52:	468a      	mov	sl, r1
 800af54:	e70e      	b.n	800ad74 <atan+0x84>
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	f7f5 f939 	bl	80001d0 <__adddf3>
 800af5e:	465a      	mov	r2, fp
 800af60:	4653      	mov	r3, sl
 800af62:	f7f5 fae7 	bl	8000534 <__aeabi_dmul>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4658      	mov	r0, fp
 800af6c:	4651      	mov	r1, sl
 800af6e:	f7f5 f92d 	bl	80001cc <__aeabi_dsub>
 800af72:	4683      	mov	fp, r0
 800af74:	468a      	mov	sl, r1
 800af76:	e7a8      	b.n	800aeca <atan+0x1da>
 800af78:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800af7c:	f2c4 0303 	movt	r3, #16387	; 0x4003
 800af80:	4598      	cmp	r8, r3
 800af82:	dc20      	bgt.n	800afc6 <atan+0x2d6>
 800af84:	2300      	movs	r3, #0
 800af86:	2200      	movs	r2, #0
 800af88:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800af8c:	f7f5 f91e 	bl	80001cc <__aeabi_dsub>
 800af90:	2300      	movs	r3, #0
 800af92:	4680      	mov	r8, r0
 800af94:	4689      	mov	r9, r1
 800af96:	2200      	movs	r2, #0
 800af98:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fac8 	bl	8000534 <__aeabi_dmul>
 800afa4:	2300      	movs	r3, #0
 800afa6:	2200      	movs	r2, #0
 800afa8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800afac:	f7f5 f910 	bl	80001d0 <__adddf3>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4640      	mov	r0, r8
 800afb6:	4649      	mov	r1, r9
 800afb8:	f7f5 fbe6 	bl	8000788 <__aeabi_ddiv>
 800afbc:	f04f 0c02 	mov.w	ip, #2
 800afc0:	4683      	mov	fp, r0
 800afc2:	468a      	mov	sl, r1
 800afc4:	e6d6      	b.n	800ad74 <atan+0x84>
 800afc6:	460b      	mov	r3, r1
 800afc8:	2100      	movs	r1, #0
 800afca:	4602      	mov	r2, r0
 800afcc:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 800afd0:	2000      	movs	r0, #0
 800afd2:	f7f5 fbd9 	bl	8000788 <__aeabi_ddiv>
 800afd6:	f04f 0c03 	mov.w	ip, #3
 800afda:	4683      	mov	fp, r0
 800afdc:	468a      	mov	sl, r1
 800afde:	e6c9      	b.n	800ad74 <atan+0x84>
 800afe0:	2300      	movs	r3, #0
 800afe2:	2200      	movs	r2, #0
 800afe4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800afe8:	f7f5 f8f0 	bl	80001cc <__aeabi_dsub>
 800afec:	2300      	movs	r3, #0
 800afee:	4680      	mov	r8, r0
 800aff0:	4689      	mov	r9, r1
 800aff2:	2200      	movs	r2, #0
 800aff4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800aff8:	4620      	mov	r0, r4
 800affa:	4629      	mov	r1, r5
 800affc:	f7f5 f8e8 	bl	80001d0 <__adddf3>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 fbbe 	bl	8000788 <__aeabi_ddiv>
 800b00c:	f04f 0c01 	mov.w	ip, #1
 800b010:	4683      	mov	fp, r0
 800b012:	468a      	mov	sl, r1
 800b014:	e6ae      	b.n	800ad74 <atan+0x84>
 800b016:	bf00      	nop
 800b018:	e322da11 	teq	r2, #69632	; 0x11000
 800b01c:	3f90ad3a 	svccc	0x0090ad3a
 800b020:	24760deb 	ldrbtcs	r0, [r6], #-3563	; 0xdeb
 800b024:	3fa97b4b 	svccc	0x00a97b4b
 800b028:	a0d03d51 	sbcsge	r3, r0, r1, asr sp
 800b02c:	3fb10d66 	svccc	0x00b10d66
 800b030:	c54c206e 	strbgt	r2, [ip, #-110]	; 0x6e
 800b034:	3fb745cd 	svccc	0x00b745cd
 800b038:	920083ff 	andls	r8, r0, #-67108861	; 0xfc000003
 800b03c:	3fc24924 	svccc	0x00c24924
 800b040:	5555550d 	ldrbpl	r5, [r5, #-1293]	; 0x50d
 800b044:	3fd55555 	svccc	0x00d55555
 800b048:	2c6a6c2f 	stclcs	12, cr6, [sl], #-188	; 0xffffff44
 800b04c:	bfa2b444 	svclt	0x00a2b444
 800b050:	52defd9a 	sbcspl	pc, lr, #9856	; 0x2680
 800b054:	3fadde2d 	svccc	0x00adde2d
 800b058:	af749a6d 	svcge	0x00749a6d
 800b05c:	3fb3b0f2 	svccc	0x00b3b0f2
 800b060:	fe231671 	mcr2	6, 1, r1, cr3, cr1, {3}
 800b064:	3fbc71c6 	svccc	0x00bc71c6
 800b068:	9998ebc4 	ldmibls	r8, {r2, r6, r7, r8, r9, fp, sp, lr, pc}
 800b06c:	3fc99999 	svccc	0x00c99999
 800b070:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800b074:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}

0800b078 <fabs>:
 800b078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop

0800b080 <asin>:
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	f240 0860 	movw	r8, #96	; 0x60
 800b088:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800b08c:	b08a      	sub	sp, #40	; 0x28
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	f000 f9e5 	bl	800b460 <__ieee754_asin>
 800b096:	f998 3000 	ldrsb.w	r3, [r8]
 800b09a:	3301      	adds	r3, #1
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	d004      	beq.n	800b0ac <asin+0x2c>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f001 fa5d 	bl	800c564 <__fpclassifyd>
 800b0aa:	b920      	cbnz	r0, 800b0b6 <asin+0x36>
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	b00a      	add	sp, #40	; 0x28
 800b0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7ff ffdd 	bl	800b078 <fabs>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b0c6:	f7f5 fcc5 	bl	8000a54 <__aeabi_dcmpgt>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d0ee      	beq.n	800b0ac <asin+0x2c>
 800b0ce:	f24f 2358 	movw	r3, #62040	; 0xf258
 800b0d2:	f24f 205c 	movw	r0, #62044	; 0xf25c
 800b0d6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b0da:	2101      	movs	r1, #1
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f6c0 0000 	movt	r0, #2048	; 0x800
 800b0e2:	e88d 000a 	stmia.w	sp, {r1, r3}
 800b0e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b0ea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b0ee:	9208      	str	r2, [sp, #32]
 800b0f0:	f001 fa62 	bl	800c5b8 <nan>
 800b0f4:	f998 3000 	ldrsb.w	r3, [r8]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0fe:	d00a      	beq.n	800b116 <asin+0x96>
 800b100:	4668      	mov	r0, sp
 800b102:	f001 fa57 	bl	800c5b4 <matherr>
 800b106:	b130      	cbz	r0, 800b116 <asin+0x96>
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	b94b      	cbnz	r3, 800b120 <asin+0xa0>
 800b10c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b110:	b00a      	add	sp, #40	; 0x28
 800b112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b116:	f001 fb7d 	bl	800c814 <__errno>
 800b11a:	2321      	movs	r3, #33	; 0x21
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	e7f3      	b.n	800b108 <asin+0x88>
 800b120:	f001 fb78 	bl	800c814 <__errno>
 800b124:	9b08      	ldr	r3, [sp, #32]
 800b126:	6003      	str	r3, [r0, #0]
 800b128:	e7f0      	b.n	800b10c <asin+0x8c>
 800b12a:	bf00      	nop

0800b12c <pow>:
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	f240 0a60 	movw	sl, #96	; 0x60
 800b134:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800b138:	b08b      	sub	sp, #44	; 0x2c
 800b13a:	461d      	mov	r5, r3
 800b13c:	4680      	mov	r8, r0
 800b13e:	4689      	mov	r9, r1
 800b140:	4614      	mov	r4, r2
 800b142:	f000 fba1 	bl	800b888 <__ieee754_pow>
 800b146:	f99a 3000 	ldrsb.w	r3, [sl]
 800b14a:	3301      	adds	r3, #1
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	d004      	beq.n	800b15c <pow+0x30>
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f001 fa05 	bl	800c564 <__fpclassifyd>
 800b15a:	b920      	cbnz	r0, 800b166 <pow+0x3a>
 800b15c:	4630      	mov	r0, r6
 800b15e:	4639      	mov	r1, r7
 800b160:	b00b      	add	sp, #44	; 0x2c
 800b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f001 f9fb 	bl	800c564 <__fpclassifyd>
 800b16e:	4683      	mov	fp, r0
 800b170:	bb30      	cbnz	r0, 800b1c0 <pow+0x94>
 800b172:	4620      	mov	r0, r4
 800b174:	4629      	mov	r1, r5
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	f7f5 fc43 	bl	8000a04 <__aeabi_dcmpeq>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d0ec      	beq.n	800b15c <pow+0x30>
 800b182:	f99a 0000 	ldrsb.w	r0, [sl]
 800b186:	f8cd b020 	str.w	fp, [sp, #32]
 800b18a:	2300      	movs	r3, #0
 800b18c:	f24f 2160 	movw	r1, #62048	; 0xf260
 800b190:	2200      	movs	r2, #0
 800b192:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b196:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b19a:	2601      	movs	r6, #1
 800b19c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b1a0:	bf18      	it	ne
 800b1a2:	2802      	cmpne	r0, #2
 800b1a4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b1a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b1ac:	9101      	str	r1, [sp, #4]
 800b1ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1b2:	9600      	str	r6, [sp, #0]
 800b1b4:	d132      	bne.n	800b21c <pow+0xf0>
 800b1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ba:	b00b      	add	sp, #44	; 0x2c
 800b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f7f5 fc1c 	bl	8000a04 <__aeabi_dcmpeq>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d032      	beq.n	800b236 <pow+0x10a>
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f7f5 fc14 	bl	8000a04 <__aeabi_dcmpeq>
 800b1dc:	4683      	mov	fp, r0
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d068      	beq.n	800b2b4 <pow+0x188>
 800b1e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b1e6:	2400      	movs	r4, #0
 800b1e8:	2500      	movs	r5, #0
 800b1ea:	f24f 2360 	movw	r3, #62048	; 0xf260
 800b1ee:	ec45 4b17 	vmov	d7, r4, r5
 800b1f2:	f99a 2000 	ldrsb.w	r2, [sl]
 800b1f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b202:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b206:	e88d 0009 	stmia.w	sp, {r0, r3}
 800b20a:	9108      	str	r1, [sp, #32]
 800b20c:	b132      	cbz	r2, 800b21c <pow+0xf0>
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b21a:	e7cc      	b.n	800b1b6 <pow+0x8a>
 800b21c:	4668      	mov	r0, sp
 800b21e:	f001 f9c9 	bl	800c5b4 <matherr>
 800b222:	2800      	cmp	r0, #0
 800b224:	d074      	beq.n	800b310 <pow+0x1e4>
 800b226:	9b08      	ldr	r3, [sp, #32]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0c4      	beq.n	800b1b6 <pow+0x8a>
 800b22c:	f001 faf2 	bl	800c814 <__errno>
 800b230:	9b08      	ldr	r3, [sp, #32]
 800b232:	6003      	str	r3, [r0, #0]
 800b234:	e7bf      	b.n	800b1b6 <pow+0x8a>
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	f001 f98d 	bl	800c558 <finite>
 800b23e:	4683      	mov	fp, r0
 800b240:	2800      	cmp	r0, #0
 800b242:	d06a      	beq.n	800b31a <pow+0x1ee>
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	f7f5 fbda 	bl	8000a04 <__aeabi_dcmpeq>
 800b250:	2800      	cmp	r0, #0
 800b252:	d083      	beq.n	800b15c <pow+0x30>
 800b254:	4640      	mov	r0, r8
 800b256:	4649      	mov	r1, r9
 800b258:	f001 f97e 	bl	800c558 <finite>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f43f af7d 	beq.w	800b15c <pow+0x30>
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	f001 f977 	bl	800c558 <finite>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f43f af76 	beq.w	800b15c <pow+0x30>
 800b270:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b274:	f99a 2000 	ldrsb.w	r2, [sl]
 800b278:	2400      	movs	r4, #0
 800b27a:	2500      	movs	r5, #0
 800b27c:	f24f 2360 	movw	r3, #62048	; 0xf260
 800b280:	ec45 4b17 	vmov	d7, r4, r5
 800b284:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b288:	2004      	movs	r0, #4
 800b28a:	2100      	movs	r1, #0
 800b28c:	2a02      	cmp	r2, #2
 800b28e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b292:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b296:	e88d 0009 	stmia.w	sp, {r0, r3}
 800b29a:	9108      	str	r1, [sp, #32]
 800b29c:	f000 808d 	beq.w	800b3ba <pow+0x28e>
 800b2a0:	4668      	mov	r0, sp
 800b2a2:	f001 f987 	bl	800c5b4 <matherr>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f000 8087 	beq.w	800b3ba <pow+0x28e>
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d081      	beq.n	800b1b6 <pow+0x8a>
 800b2b2:	e7bb      	b.n	800b22c <pow+0x100>
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f001 f94e 	bl	800c558 <finite>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f43f af4d 	beq.w	800b15c <pow+0x30>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f7f5 fba5 	bl	8000a18 <__aeabi_dcmplt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f af44 	beq.w	800b15c <pow+0x30>
 800b2d4:	f24f 2360 	movw	r3, #62048	; 0xf260
 800b2d8:	f89a 1000 	ldrb.w	r1, [sl]
 800b2dc:	f8cd b020 	str.w	fp, [sp, #32]
 800b2e0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b2ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b2ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	2900      	cmp	r1, #0
 800b2f8:	d032      	beq.n	800b360 <pow+0x234>
 800b2fa:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
 800b2fe:	2902      	cmp	r1, #2
 800b300:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b304:	d12e      	bne.n	800b364 <pow+0x238>
 800b306:	f001 fa85 	bl	800c814 <__errno>
 800b30a:	2321      	movs	r3, #33	; 0x21
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	e7cd      	b.n	800b2ac <pow+0x180>
 800b310:	f001 fa80 	bl	800c814 <__errno>
 800b314:	2321      	movs	r3, #33	; 0x21
 800b316:	6003      	str	r3, [r0, #0]
 800b318:	e785      	b.n	800b226 <pow+0xfa>
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f001 f91b 	bl	800c558 <finite>
 800b322:	2800      	cmp	r0, #0
 800b324:	d08e      	beq.n	800b244 <pow+0x118>
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	f001 f915 	bl	800c558 <finite>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d088      	beq.n	800b244 <pow+0x118>
 800b332:	4630      	mov	r0, r6
 800b334:	4639      	mov	r1, r7
 800b336:	f001 f915 	bl	800c564 <__fpclassifyd>
 800b33a:	b9c8      	cbnz	r0, 800b370 <pow+0x244>
 800b33c:	f24f 2360 	movw	r3, #62048	; 0xf260
 800b340:	f89a 6000 	ldrb.w	r6, [sl]
 800b344:	9008      	str	r0, [sp, #32]
 800b346:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b34a:	2201      	movs	r2, #1
 800b34c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b350:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b354:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b358:	2e00      	cmp	r6, #0
 800b35a:	d133      	bne.n	800b3c4 <pow+0x298>
 800b35c:	2200      	movs	r2, #0
 800b35e:	2300      	movs	r3, #0
 800b360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b364:	4668      	mov	r0, sp
 800b366:	f001 f925 	bl	800c5b4 <matherr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d19e      	bne.n	800b2ac <pow+0x180>
 800b36e:	e7ca      	b.n	800b306 <pow+0x1da>
 800b370:	f24f 2360 	movw	r3, #62048	; 0xf260
 800b374:	f99a 2000 	ldrsb.w	r2, [sl]
 800b378:	f8cd b020 	str.w	fp, [sp, #32]
 800b37c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b380:	2103      	movs	r1, #3
 800b382:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b386:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b38a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800b38e:	bb22      	cbnz	r2, 800b3da <pow+0x2ae>
 800b390:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800b394:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 800b398:	f2c4 77ef 	movt	r7, #18415	; 0x47ef
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3a8:	f7f5 fb36 	bl	8000a18 <__aeabi_dcmplt>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d13b      	bne.n	800b428 <pow+0x2fc>
 800b3b0:	f99a 3000 	ldrsb.w	r3, [sl]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	f47f af73 	bne.w	800b2a0 <pow+0x174>
 800b3ba:	f001 fa2b 	bl	800c814 <__errno>
 800b3be:	2322      	movs	r3, #34	; 0x22
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	e773      	b.n	800b2ac <pow+0x180>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	f7f5 f9dc 	bl	8000788 <__aeabi_ddiv>
 800b3d0:	2e02      	cmp	r6, #2
 800b3d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b3d6:	d096      	beq.n	800b306 <pow+0x1da>
 800b3d8:	e7c4      	b.n	800b364 <pow+0x238>
 800b3da:	2700      	movs	r7, #0
 800b3dc:	2600      	movs	r6, #0
 800b3de:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3ee:	f7f5 fb13 	bl	8000a18 <__aeabi_dcmplt>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0dc      	beq.n	800b3b0 <pow+0x284>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b3fe:	4620      	mov	r0, r4
 800b400:	4629      	mov	r1, r5
 800b402:	f7f5 f897 	bl	8000534 <__aeabi_dmul>
 800b406:	4604      	mov	r4, r0
 800b408:	460d      	mov	r5, r1
 800b40a:	f001 f8db 	bl	800c5c4 <rint>
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	f7f5 faf7 	bl	8000a04 <__aeabi_dcmpeq>
 800b416:	2800      	cmp	r0, #0
 800b418:	d1ca      	bne.n	800b3b0 <pow+0x284>
 800b41a:	2300      	movs	r3, #0
 800b41c:	2200      	movs	r2, #0
 800b41e:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
 800b422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b426:	e7c3      	b.n	800b3b0 <pow+0x284>
 800b428:	2300      	movs	r3, #0
 800b42a:	2200      	movs	r2, #0
 800b42c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 f87e 	bl	8000534 <__aeabi_dmul>
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	f001 f8c2 	bl	800c5c4 <rint>
 800b440:	4622      	mov	r2, r4
 800b442:	462b      	mov	r3, r5
 800b444:	f7f5 fade 	bl	8000a04 <__aeabi_dcmpeq>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d1b1      	bne.n	800b3b0 <pow+0x284>
 800b44c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b450:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b454:	f2cc 73ef 	movt	r3, #51183	; 0xc7ef
 800b458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b45c:	e7a8      	b.n	800b3b0 <pow+0x284>
 800b45e:	bf00      	nop

0800b460 <__ieee754_asin>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b468:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b46c:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800b470:	4598      	cmp	r8, r3
 800b472:	b087      	sub	sp, #28
 800b474:	4682      	mov	sl, r0
 800b476:	4689      	mov	r9, r1
 800b478:	460f      	mov	r7, r1
 800b47a:	dd16      	ble.n	800b4aa <__ieee754_asin+0x4a>
 800b47c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b480:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b484:	ea58 0800 	orrs.w	r8, r8, r0
 800b488:	f000 810f 	beq.w	800b6aa <__ieee754_asin+0x24a>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	f7f4 fe9c 	bl	80001cc <__aeabi_dsub>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	f7f5 f976 	bl	8000788 <__aeabi_ddiv>
 800b49c:	4682      	mov	sl, r0
 800b49e:	4689      	mov	r9, r1
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	b007      	add	sp, #28
 800b4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4ae:	f6c3 73df 	movt	r3, #16351	; 0x3fdf
 800b4b2:	4598      	cmp	r8, r3
 800b4b4:	dc10      	bgt.n	800b4d8 <__ieee754_asin+0x78>
 800b4b6:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b4ba:	f280 8134 	bge.w	800b726 <__ieee754_asin+0x2c6>
 800b4be:	a3d6      	add	r3, pc, #856	; (adr r3, 800b818 <__ieee754_asin+0x3b8>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fe84 	bl	80001d0 <__adddf3>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b4d0:	f7f5 fac0 	bl	8000a54 <__aeabi_dcmpgt>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d1e3      	bne.n	800b4a0 <__ieee754_asin+0x40>
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7ff fdcc 	bl	800b078 <fabs>
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	f7f4 fe6e 	bl	80001cc <__aeabi_dsub>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b4f8:	f7f5 f81c 	bl	8000534 <__aeabi_dmul>
 800b4fc:	a3c8      	add	r3, pc, #800	; (adr r3, 800b820 <__ieee754_asin+0x3c0>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	f7f5 f815 	bl	8000534 <__aeabi_dmul>
 800b50a:	a3c7      	add	r3, pc, #796	; (adr r3, 800b828 <__ieee754_asin+0x3c8>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fe5e 	bl	80001d0 <__adddf3>
 800b514:	4622      	mov	r2, r4
 800b516:	462b      	mov	r3, r5
 800b518:	f7f5 f80c 	bl	8000534 <__aeabi_dmul>
 800b51c:	a3c4      	add	r3, pc, #784	; (adr r3, 800b830 <__ieee754_asin+0x3d0>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fe53 	bl	80001cc <__aeabi_dsub>
 800b526:	4622      	mov	r2, r4
 800b528:	462b      	mov	r3, r5
 800b52a:	f7f5 f803 	bl	8000534 <__aeabi_dmul>
 800b52e:	a3c2      	add	r3, pc, #776	; (adr r3, 800b838 <__ieee754_asin+0x3d8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe4c 	bl	80001d0 <__adddf3>
 800b538:	4622      	mov	r2, r4
 800b53a:	462b      	mov	r3, r5
 800b53c:	f7f4 fffa 	bl	8000534 <__aeabi_dmul>
 800b540:	a3bf      	add	r3, pc, #764	; (adr r3, 800b840 <__ieee754_asin+0x3e0>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f4 fe41 	bl	80001cc <__aeabi_dsub>
 800b54a:	4622      	mov	r2, r4
 800b54c:	462b      	mov	r3, r5
 800b54e:	f7f4 fff1 	bl	8000534 <__aeabi_dmul>
 800b552:	a3bd      	add	r3, pc, #756	; (adr r3, 800b848 <__ieee754_asin+0x3e8>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 fe3a 	bl	80001d0 <__adddf3>
 800b55c:	4622      	mov	r2, r4
 800b55e:	462b      	mov	r3, r5
 800b560:	f7f4 ffe8 	bl	8000534 <__aeabi_dmul>
 800b564:	a3ba      	add	r3, pc, #744	; (adr r3, 800b850 <__ieee754_asin+0x3f0>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 ffdf 	bl	8000534 <__aeabi_dmul>
 800b576:	a3b8      	add	r3, pc, #736	; (adr r3, 800b858 <__ieee754_asin+0x3f8>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 fe26 	bl	80001cc <__aeabi_dsub>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f4 ffd6 	bl	8000534 <__aeabi_dmul>
 800b588:	a3b5      	add	r3, pc, #724	; (adr r3, 800b860 <__ieee754_asin+0x400>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fe1f 	bl	80001d0 <__adddf3>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f4 ffcd 	bl	8000534 <__aeabi_dmul>
 800b59a:	a3b3      	add	r3, pc, #716	; (adr r3, 800b868 <__ieee754_asin+0x408>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f4 fe14 	bl	80001cc <__aeabi_dsub>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	f7f4 ffc4 	bl	8000534 <__aeabi_dmul>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f7f4 fe0c 	bl	80001d0 <__adddf3>
 800b5b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5bc:	4620      	mov	r0, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f000 ff0a 	bl	800c3d8 <__ieee754_sqrt>
 800b5c4:	f243 3332 	movw	r3, #13106	; 0x3332
 800b5c8:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800b5cc:	4598      	cmp	r8, r3
 800b5ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b5d2:	f300 8085 	bgt.w	800b6e0 <__ieee754_asin+0x280>
 800b5d6:	e9dd ab00 	ldrd	sl, fp, [sp]
 800b5da:	4652      	mov	r2, sl
 800b5dc:	465b      	mov	r3, fp
 800b5de:	f7f4 fdf7 	bl	80001d0 <__adddf3>
 800b5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	4689      	mov	r9, r1
 800b5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ee:	f7f5 f8cb 	bl	8000788 <__aeabi_ddiv>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 ff9b 	bl	8000534 <__aeabi_dmul>
 800b5fe:	f04f 0a00 	mov.w	sl, #0
 800b602:	4689      	mov	r9, r1
 800b604:	4652      	mov	r2, sl
 800b606:	4680      	mov	r8, r0
 800b608:	465b      	mov	r3, fp
 800b60a:	4650      	mov	r0, sl
 800b60c:	4659      	mov	r1, fp
 800b60e:	f7f4 ff91 	bl	8000534 <__aeabi_dmul>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4620      	mov	r0, r4
 800b618:	4629      	mov	r1, r5
 800b61a:	f7f4 fdd7 	bl	80001cc <__aeabi_dsub>
 800b61e:	4652      	mov	r2, sl
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	465b      	mov	r3, fp
 800b626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b62a:	f7f4 fdd1 	bl	80001d0 <__adddf3>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f5 f8a7 	bl	8000788 <__aeabi_ddiv>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	f7f4 fdc7 	bl	80001d0 <__adddf3>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	a18a      	add	r1, pc, #552	; (adr r1, 800b870 <__ieee754_asin+0x410>)
 800b648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64c:	f7f4 fdbe 	bl	80001cc <__aeabi_dsub>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f4 fdb8 	bl	80001cc <__aeabi_dsub>
 800b65c:	4652      	mov	r2, sl
 800b65e:	4604      	mov	r4, r0
 800b660:	460d      	mov	r5, r1
 800b662:	4650      	mov	r0, sl
 800b664:	465b      	mov	r3, fp
 800b666:	4659      	mov	r1, fp
 800b668:	f7f4 fdb2 	bl	80001d0 <__adddf3>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	a181      	add	r1, pc, #516	; (adr r1, 800b878 <__ieee754_asin+0x418>)
 800b672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b676:	f7f4 fda9 	bl	80001cc <__aeabi_dsub>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4620      	mov	r0, r4
 800b680:	4629      	mov	r1, r5
 800b682:	f7f4 fda3 	bl	80001cc <__aeabi_dsub>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	a17b      	add	r1, pc, #492	; (adr r1, 800b878 <__ieee754_asin+0x418>)
 800b68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b690:	f7f4 fd9c 	bl	80001cc <__aeabi_dsub>
 800b694:	4682      	mov	sl, r0
 800b696:	4689      	mov	r9, r1
 800b698:	2f00      	cmp	r7, #0
 800b69a:	bfd8      	it	le
 800b69c:	f109 4900 	addle.w	r9, r9, #2147483648	; 0x80000000
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	b007      	add	sp, #28
 800b6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6aa:	a375      	add	r3, pc, #468	; (adr r3, 800b880 <__ieee754_asin+0x420>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 ff40 	bl	8000534 <__aeabi_dmul>
 800b6b4:	a36e      	add	r3, pc, #440	; (adr r3, 800b870 <__ieee754_asin+0x410>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	4650      	mov	r0, sl
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	f7f4 ff37 	bl	8000534 <__aeabi_dmul>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f4 fd7f 	bl	80001d0 <__adddf3>
 800b6d2:	4682      	mov	sl, r0
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4649      	mov	r1, r9
 800b6da:	b007      	add	sp, #28
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e8:	f7f5 f84e 	bl	8000788 <__aeabi_ddiv>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f4:	f7f4 ff1e 	bl	8000534 <__aeabi_dmul>
 800b6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6fc:	f7f4 fd68 	bl	80001d0 <__adddf3>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	f7f4 fd64 	bl	80001d0 <__adddf3>
 800b708:	a359      	add	r3, pc, #356	; (adr r3, 800b870 <__ieee754_asin+0x410>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fd5d 	bl	80001cc <__aeabi_dsub>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	a15a      	add	r1, pc, #360	; (adr r1, 800b880 <__ieee754_asin+0x420>)
 800b718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b71c:	f7f4 fd56 	bl	80001cc <__aeabi_dsub>
 800b720:	4682      	mov	sl, r0
 800b722:	4689      	mov	r9, r1
 800b724:	e7b8      	b.n	800b698 <__ieee754_asin+0x238>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	f7f4 ff03 	bl	8000534 <__aeabi_dmul>
 800b72e:	a33c      	add	r3, pc, #240	; (adr r3, 800b820 <__ieee754_asin+0x3c0>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	4604      	mov	r4, r0
 800b736:	460d      	mov	r5, r1
 800b738:	f7f4 fefc 	bl	8000534 <__aeabi_dmul>
 800b73c:	a33a      	add	r3, pc, #232	; (adr r3, 800b828 <__ieee754_asin+0x3c8>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fd45 	bl	80001d0 <__adddf3>
 800b746:	4622      	mov	r2, r4
 800b748:	462b      	mov	r3, r5
 800b74a:	f7f4 fef3 	bl	8000534 <__aeabi_dmul>
 800b74e:	a338      	add	r3, pc, #224	; (adr r3, 800b830 <__ieee754_asin+0x3d0>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fd3a 	bl	80001cc <__aeabi_dsub>
 800b758:	4622      	mov	r2, r4
 800b75a:	462b      	mov	r3, r5
 800b75c:	f7f4 feea 	bl	8000534 <__aeabi_dmul>
 800b760:	a335      	add	r3, pc, #212	; (adr r3, 800b838 <__ieee754_asin+0x3d8>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 fd33 	bl	80001d0 <__adddf3>
 800b76a:	4622      	mov	r2, r4
 800b76c:	462b      	mov	r3, r5
 800b76e:	f7f4 fee1 	bl	8000534 <__aeabi_dmul>
 800b772:	a333      	add	r3, pc, #204	; (adr r3, 800b840 <__ieee754_asin+0x3e0>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 fd28 	bl	80001cc <__aeabi_dsub>
 800b77c:	4622      	mov	r2, r4
 800b77e:	462b      	mov	r3, r5
 800b780:	f7f4 fed8 	bl	8000534 <__aeabi_dmul>
 800b784:	a330      	add	r3, pc, #192	; (adr r3, 800b848 <__ieee754_asin+0x3e8>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fd21 	bl	80001d0 <__adddf3>
 800b78e:	4622      	mov	r2, r4
 800b790:	462b      	mov	r3, r5
 800b792:	f7f4 fecf 	bl	8000534 <__aeabi_dmul>
 800b796:	a32e      	add	r3, pc, #184	; (adr r3, 800b850 <__ieee754_asin+0x3f0>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7f4 fec6 	bl	8000534 <__aeabi_dmul>
 800b7a8:	a32b      	add	r3, pc, #172	; (adr r3, 800b858 <__ieee754_asin+0x3f8>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f7f4 fd0d 	bl	80001cc <__aeabi_dsub>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	f7f4 febd 	bl	8000534 <__aeabi_dmul>
 800b7ba:	a329      	add	r3, pc, #164	; (adr r3, 800b860 <__ieee754_asin+0x400>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 fd06 	bl	80001d0 <__adddf3>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	462b      	mov	r3, r5
 800b7c8:	f7f4 feb4 	bl	8000534 <__aeabi_dmul>
 800b7cc:	a326      	add	r3, pc, #152	; (adr r3, 800b868 <__ieee754_asin+0x408>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fcfb 	bl	80001cc <__aeabi_dsub>
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	462b      	mov	r3, r5
 800b7da:	f7f4 feab 	bl	8000534 <__aeabi_dmul>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b7e6:	f7f4 fcf3 	bl	80001d0 <__adddf3>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	f7f4 ffc9 	bl	8000788 <__aeabi_ddiv>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fe99 	bl	8000534 <__aeabi_dmul>
 800b802:	4652      	mov	r2, sl
 800b804:	464b      	mov	r3, r9
 800b806:	f7f4 fce3 	bl	80001d0 <__adddf3>
 800b80a:	4682      	mov	sl, r0
 800b80c:	4689      	mov	r9, r1
 800b80e:	4650      	mov	r0, sl
 800b810:	4649      	mov	r1, r9
 800b812:	b007      	add	sp, #28
 800b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b818:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800b81c:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800b820:	0dfdf709 	ldcleq	7, cr15, [sp, #36]!	; 0x24
 800b824:	3f023de1 	svccc	0x00023de1
 800b828:	7501b288 	strvc	fp, [r1, #-648]	; 0x288
 800b82c:	3f49efe0 	svccc	0x0049efe0
 800b830:	b5688f3b 	strblt	r8, [r8, #-3899]!	; 0xf3b
 800b834:	3fa48228 	svccc	0x00a48228
 800b838:	0e884455 	mcreq	4, 4, r4, cr8, cr5, {2}
 800b83c:	3fc9c155 	svccc	0x00c9c155
 800b840:	03eb6f7d 	mvneq	r6, #500	; 0x1f4
 800b844:	3fd4d612 	svccc	0x00d4d612
 800b848:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
 800b84c:	3fc55555 	svccc	0x00c55555
 800b850:	b12e9282 	smlawblt	lr, r2, r2, r9
 800b854:	3fb3b8c5 	svccc	0x00b3b8c5
 800b858:	1b8d0159 	blne	634bdc4 <_Min_Stack_Size+0x634b9c4>
 800b85c:	3fe6066c 	svccc	0x00e6066c
 800b860:	9c598ac8 	mrrcls	10, 12, r8, r9, cr8
 800b864:	40002ae5 	andmi	r2, r0, r5, ror #21
 800b868:	1c8a2d4b 	stcne	13, cr2, [sl], {75}	; 0x4b
 800b86c:	40033a27 	andmi	r3, r3, r7, lsr #20
 800b870:	33145c07 	tstcc	r4, #1792	; 0x700
 800b874:	3c91a626 	ldccc	6, cr10, [r1], {38}	; 0x26
 800b878:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800b87c:	3fe921fb 	svccc	0x00e921fb
 800b880:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800b884:	3ff921fb 	svccc	0x00f921fb

0800b888 <__ieee754_pow>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800b890:	4681      	mov	r9, r0
 800b892:	4606      	mov	r6, r0
 800b894:	ea58 0002 	orrs.w	r0, r8, r2
 800b898:	b093      	sub	sp, #76	; 0x4c
 800b89a:	4693      	mov	fp, r2
 800b89c:	469c      	mov	ip, r3
 800b89e:	4614      	mov	r4, r2
 800b8a0:	461d      	mov	r5, r3
 800b8a2:	468a      	mov	sl, r1
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	f000 8089 	beq.w	800b9bc <__ieee754_pow+0x134>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b8b0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800b8b4:	4291      	cmp	r1, r2
 800b8b6:	9102      	str	r1, [sp, #8]
 800b8b8:	dd11      	ble.n	800b8de <__ieee754_pow+0x56>
 800b8ba:	9a02      	ldr	r2, [sp, #8]
 800b8bc:	f102 4c40 	add.w	ip, r2, #3221225472	; 0xc0000000
 800b8c0:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 800b8c4:	ea5c 0606 	orrs.w	r6, ip, r6
 800b8c8:	f040 8082 	bne.w	800b9d0 <__ieee754_pow+0x148>
 800b8cc:	f04f 0a00 	mov.w	sl, #0
 800b8d0:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4651      	mov	r1, sl
 800b8d8:	b013      	add	sp, #76	; 0x4c
 800b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8de:	bf14      	ite	ne
 800b8e0:	2300      	movne	r3, #0
 800b8e2:	2301      	moveq	r3, #1
 800b8e4:	f1b9 0f00 	cmp.w	r9, #0
 800b8e8:	bf0c      	ite	eq
 800b8ea:	2100      	moveq	r1, #0
 800b8ec:	f003 0101 	andne.w	r1, r3, #1
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	d1e2      	bne.n	800b8ba <__ieee754_pow+0x32>
 800b8f4:	4590      	cmp	r8, r2
 800b8f6:	dce0      	bgt.n	800b8ba <__ieee754_pow+0x32>
 800b8f8:	bf14      	ite	ne
 800b8fa:	2100      	movne	r1, #0
 800b8fc:	2101      	moveq	r1, #1
 800b8fe:	f1bb 0f00 	cmp.w	fp, #0
 800b902:	bf0c      	ite	eq
 800b904:	2200      	moveq	r2, #0
 800b906:	f001 0201 	andne.w	r2, r1, #1
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d1d5      	bne.n	800b8ba <__ieee754_pow+0x32>
 800b90e:	2f00      	cmp	r7, #0
 800b910:	db67      	blt.n	800b9e2 <__ieee754_pow+0x15a>
 800b912:	9204      	str	r2, [sp, #16]
 800b914:	b9a4      	cbnz	r4, 800b940 <__ieee754_pow+0xb8>
 800b916:	2900      	cmp	r1, #0
 800b918:	f040 8088 	bne.w	800ba2c <__ieee754_pow+0x1a4>
 800b91c:	2200      	movs	r2, #0
 800b91e:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
 800b922:	4590      	cmp	r8, r2
 800b924:	f000 80b8 	beq.w	800ba98 <__ieee754_pow+0x210>
 800b928:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800b92c:	bf04      	itt	eq
 800b92e:	4648      	moveq	r0, r9
 800b930:	4651      	moveq	r1, sl
 800b932:	d03c      	beq.n	800b9ae <__ieee754_pow+0x126>
 800b934:	2200      	movs	r2, #0
 800b936:	f6c3 72e0 	movt	r2, #16352	; 0x3fe0
 800b93a:	4295      	cmp	r5, r2
 800b93c:	f000 8420 	beq.w	800c180 <__ieee754_pow+0x8f8>
 800b940:	4648      	mov	r0, r9
 800b942:	4651      	mov	r1, sl
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	f8cd c000 	str.w	ip, [sp]
 800b94a:	f7ff fb95 	bl	800b078 <fabs>
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	f8dd c000 	ldr.w	ip, [sp]
 800b954:	b956      	cbnz	r6, 800b96c <__ieee754_pow+0xe4>
 800b956:	9a02      	ldr	r2, [sp, #8]
 800b958:	2a00      	cmp	r2, #0
 800b95a:	bf08      	it	eq
 800b95c:	f043 0301 	orreq.w	r3, r3, #1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d17b      	bne.n	800ba5c <__ieee754_pow+0x1d4>
 800b964:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b968:	429a      	cmp	r2, r3
 800b96a:	d077      	beq.n	800ba5c <__ieee754_pow+0x1d4>
 800b96c:	0ffb      	lsrs	r3, r7, #31
 800b96e:	9a04      	ldr	r2, [sp, #16]
 800b970:	3b01      	subs	r3, #1
 800b972:	431a      	orrs	r2, r3
 800b974:	930a      	str	r3, [sp, #40]	; 0x28
 800b976:	f000 808a 	beq.w	800ba8e <__ieee754_pow+0x206>
 800b97a:	2300      	movs	r3, #0
 800b97c:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
 800b980:	4598      	cmp	r8, r3
 800b982:	f340 809f 	ble.w	800bac4 <__ieee754_pow+0x23c>
 800b986:	2300      	movs	r3, #0
 800b988:	f2c4 33f0 	movt	r3, #17392	; 0x43f0
 800b98c:	4598      	cmp	r8, r3
 800b98e:	f340 8441 	ble.w	800c214 <__ieee754_pow+0x98c>
 800b992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b996:	9902      	ldr	r1, [sp, #8]
 800b998:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800b99c:	4299      	cmp	r1, r3
 800b99e:	f340 83f9 	ble.w	800c194 <__ieee754_pow+0x90c>
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	dd57      	ble.n	800ba56 <__ieee754_pow+0x1ce>
 800b9a6:	f20f 7140 	addw	r1, pc, #1856	; 0x740
 800b9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	f7f4 fdbf 	bl	8000534 <__aeabi_dmul>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	468a      	mov	sl, r1
 800b9ba:	e78b      	b.n	800b8d4 <__ieee754_pow+0x4c>
 800b9bc:	f04f 0a00 	mov.w	sl, #0
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4651      	mov	r1, sl
 800b9ca:	b013      	add	sp, #76	; 0x4c
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d0:	f24f 205c 	movw	r0, #62044	; 0xf25c
 800b9d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 800b9d8:	b013      	add	sp, #76	; 0x4c
 800b9da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9de:	f000 bdeb 	b.w	800c5b8 <nan>
 800b9e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b9e6:	f2c4 303f 	movt	r0, #17215	; 0x433f
 800b9ea:	4580      	cmp	r8, r0
 800b9ec:	dc64      	bgt.n	800bab8 <__ieee754_pow+0x230>
 800b9ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b9f2:	f6c3 70ef 	movt	r0, #16367	; 0x3fef
 800b9f6:	4580      	cmp	r8, r0
 800b9f8:	dd8b      	ble.n	800b912 <__ieee754_pow+0x8a>
 800b9fa:	ea4f 5228 	mov.w	r2, r8, asr #20
 800b9fe:	f240 4013 	movw	r0, #1043	; 0x413
 800ba02:	4282      	cmp	r2, r0
 800ba04:	f340 84a0 	ble.w	800c348 <__ieee754_pow+0xac0>
 800ba08:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
 800ba0c:	3203      	adds	r2, #3
 800ba0e:	fa2b f002 	lsr.w	r0, fp, r2
 800ba12:	fa00 f202 	lsl.w	r2, r0, r2
 800ba16:	455a      	cmp	r2, fp
 800ba18:	bf02      	ittt	eq
 800ba1a:	f000 0001 	andeq.w	r0, r0, #1
 800ba1e:	f1c0 0002 	rsbeq	r0, r0, #2
 800ba22:	9004      	streq	r0, [sp, #16]
 800ba24:	f43f af76 	beq.w	800b914 <__ieee754_pow+0x8c>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	e772      	b.n	800b912 <__ieee754_pow+0x8a>
 800ba2c:	9902      	ldr	r1, [sp, #8]
 800ba2e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800ba32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba36:	431e      	orrs	r6, r3
 800ba38:	f43f af48 	beq.w	800b8cc <__ieee754_pow+0x44>
 800ba3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba40:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800ba44:	4299      	cmp	r1, r3
 800ba46:	f340 83dc 	ble.w	800c202 <__ieee754_pow+0x97a>
 800ba4a:	2d00      	cmp	r5, #0
 800ba4c:	bfa4      	itt	ge
 800ba4e:	465e      	movge	r6, fp
 800ba50:	46e2      	movge	sl, ip
 800ba52:	f6bf af3f 	bge.w	800b8d4 <__ieee754_pow+0x4c>
 800ba56:	2600      	movs	r6, #0
 800ba58:	46b2      	mov	sl, r6
 800ba5a:	e73b      	b.n	800b8d4 <__ieee754_pow+0x4c>
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	f2c0 844f 	blt.w	800c300 <__ieee754_pow+0xa78>
 800ba62:	2f00      	cmp	r7, #0
 800ba64:	daa7      	bge.n	800b9b6 <__ieee754_pow+0x12e>
 800ba66:	9a02      	ldr	r2, [sp, #8]
 800ba68:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 800ba6c:	9a04      	ldr	r2, [sp, #16]
 800ba6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba72:	431a      	orrs	r2, r3
 800ba74:	f040 8476 	bne.w	800c364 <__ieee754_pow+0xadc>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	f7f4 fba6 	bl	80001cc <__aeabi_dsub>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	f7f4 fe80 	bl	8000788 <__aeabi_ddiv>
 800ba88:	4606      	mov	r6, r0
 800ba8a:	468a      	mov	sl, r1
 800ba8c:	e722      	b.n	800b8d4 <__ieee754_pow+0x4c>
 800ba8e:	4648      	mov	r0, r9
 800ba90:	4651      	mov	r1, sl
 800ba92:	464a      	mov	r2, r9
 800ba94:	4653      	mov	r3, sl
 800ba96:	e7f1      	b.n	800ba7c <__ieee754_pow+0x1f4>
 800ba98:	2d00      	cmp	r5, #0
 800ba9a:	bfa8      	it	ge
 800ba9c:	464e      	movge	r6, r9
 800ba9e:	f6bf af19 	bge.w	800b8d4 <__ieee754_pow+0x4c>
 800baa2:	2100      	movs	r1, #0
 800baa4:	4653      	mov	r3, sl
 800baa6:	464a      	mov	r2, r9
 800baa8:	2000      	movs	r0, #0
 800baaa:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800baae:	f7f4 fe6b 	bl	8000788 <__aeabi_ddiv>
 800bab2:	4606      	mov	r6, r0
 800bab4:	468a      	mov	sl, r1
 800bab6:	e70d      	b.n	800b8d4 <__ieee754_pow+0x4c>
 800bab8:	2202      	movs	r2, #2
 800baba:	9204      	str	r2, [sp, #16]
 800babc:	2c00      	cmp	r4, #0
 800babe:	f43f af2a 	beq.w	800b916 <__ieee754_pow+0x8e>
 800bac2:	e73d      	b.n	800b940 <__ieee754_pow+0xb8>
 800bac4:	9b02      	ldr	r3, [sp, #8]
 800bac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baca:	bfa8      	it	ge
 800bacc:	2500      	movge	r5, #0
 800bace:	da0c      	bge.n	800baea <__ieee754_pow+0x262>
 800bad0:	2300      	movs	r3, #0
 800bad2:	2200      	movs	r2, #0
 800bad4:	f2c4 3340 	movt	r3, #17216	; 0x4340
 800bad8:	f8cd c000 	str.w	ip, [sp]
 800badc:	f7f4 fd2a 	bl	8000534 <__aeabi_dmul>
 800bae0:	f8dd c000 	ldr.w	ip, [sp]
 800bae4:	9102      	str	r1, [sp, #8]
 800bae6:	f06f 0534 	mvn.w	r5, #52	; 0x34
 800baea:	9a02      	ldr	r2, [sp, #8]
 800baec:	1514      	asrs	r4, r2, #20
 800baee:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800baf2:	f649 028e 	movw	r2, #39054	; 0x988e
 800baf6:	f2c0 0203 	movt	r2, #3
 800bafa:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800bafe:	4293      	cmp	r3, r2
 800bb00:	442e      	add	r6, r5
 800bb02:	f043 547f 	orr.w	r4, r3, #1069547520	; 0x3fc00000
 800bb06:	bfd8      	it	le
 800bb08:	2500      	movle	r5, #0
 800bb0a:	9611      	str	r6, [sp, #68]	; 0x44
 800bb0c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bb10:	bfd8      	it	le
 800bb12:	46aa      	movle	sl, r5
 800bb14:	dd11      	ble.n	800bb3a <__ieee754_pow+0x2b2>
 800bb16:	f24b 6279 	movw	r2, #46713	; 0xb679
 800bb1a:	f2c0 020b 	movt	r2, #11
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	bfc1      	itttt	gt
 800bb22:	4633      	movgt	r3, r6
 800bb24:	2500      	movgt	r5, #0
 800bb26:	3301      	addgt	r3, #1
 800bb28:	9311      	strgt	r3, [sp, #68]	; 0x44
 800bb2a:	bfc7      	ittee	gt
 800bb2c:	f5a4 1480 	subgt.w	r4, r4, #1048576	; 0x100000
 800bb30:	46aa      	movgt	sl, r5
 800bb32:	f44f 2580 	movle.w	r5, #262144	; 0x40000
 800bb36:	f04f 0a01 	movle.w	sl, #1
 800bb3a:	f24f 2188 	movw	r1, #62088	; 0xf288
 800bb3e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bb42:	f6c0 0100 	movt	r1, #2048	; 0x800
 800bb46:	4451      	add	r1, sl
 800bb48:	ed91 7b00 	vldr	d7, [r1]
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	4623      	mov	r3, r4
 800bb50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb58:	ec53 2b17 	vmov	r2, r3, d7
 800bb5c:	f8cd c000 	str.w	ip, [sp]
 800bb60:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bb64:	f7f4 fb32 	bl	80001cc <__aeabi_dsub>
 800bb68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb74:	f7f4 fb2c 	bl	80001d0 <__adddf3>
 800bb78:	460b      	mov	r3, r1
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800bb82:	2000      	movs	r0, #0
 800bb84:	f7f4 fe00 	bl	8000788 <__aeabi_ddiv>
 800bb88:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fcce 	bl	8000534 <__aeabi_dmul>
 800bb98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb9c:	1061      	asrs	r1, r4, #1
 800bb9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bba2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bba6:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 800bbaa:	186b      	adds	r3, r5, r1
 800bbac:	2100      	movs	r1, #0
 800bbae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbb2:	9102      	str	r1, [sp, #8]
 800bbb4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4640      	mov	r0, r8
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	4614      	mov	r4, r2
 800bbc0:	461d      	mov	r5, r3
 800bbc2:	f7f4 fcb7 	bl	8000534 <__aeabi_dmul>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fafd 	bl	80001cc <__aeabi_dsub>
 800bbd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460f      	mov	r7, r1
 800bbda:	4620      	mov	r0, r4
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f7f4 faf5 	bl	80001cc <__aeabi_dsub>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbea:	f7f4 faef 	bl	80001cc <__aeabi_dsub>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	f7f4 fc9d 	bl	8000534 <__aeabi_dmul>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	f7f4 fae3 	bl	80001cc <__aeabi_dsub>
 800bc06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bc0a:	f7f4 fc93 	bl	8000534 <__aeabi_dmul>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	460f      	mov	r7, r1
 800bc12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f7f4 fc8b 	bl	8000534 <__aeabi_dmul>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	f7f4 fc85 	bl	8000534 <__aeabi_dmul>
 800bc2a:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc36:	4620      	mov	r0, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	f7f4 fc7b 	bl	8000534 <__aeabi_dmul>
 800bc3e:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fac3 	bl	80001d0 <__adddf3>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fc71 	bl	8000534 <__aeabi_dmul>
 800bc52:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fab9 	bl	80001d0 <__adddf3>
 800bc5e:	4622      	mov	r2, r4
 800bc60:	462b      	mov	r3, r5
 800bc62:	f7f4 fc67 	bl	8000534 <__aeabi_dmul>
 800bc66:	f20f 43a0 	addw	r3, pc, #1184	; 0x4a0
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f7f4 faaf 	bl	80001d0 <__adddf3>
 800bc72:	4622      	mov	r2, r4
 800bc74:	462b      	mov	r3, r5
 800bc76:	f7f4 fc5d 	bl	8000534 <__aeabi_dmul>
 800bc7a:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	f7f4 faa5 	bl	80001d0 <__adddf3>
 800bc86:	4622      	mov	r2, r4
 800bc88:	462b      	mov	r3, r5
 800bc8a:	f7f4 fc53 	bl	8000534 <__aeabi_dmul>
 800bc8e:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 fa9b 	bl	80001d0 <__adddf3>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bca2:	f7f4 fc47 	bl	8000534 <__aeabi_dmul>
 800bca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcaa:	4604      	mov	r4, r0
 800bcac:	460d      	mov	r5, r1
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	f7f4 fa8d 	bl	80001d0 <__adddf3>
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	463b      	mov	r3, r7
 800bcba:	f7f4 fc3b 	bl	8000534 <__aeabi_dmul>
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	f7f4 fa85 	bl	80001d0 <__adddf3>
 800bcc6:	4642      	mov	r2, r8
 800bcc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bccc:	464b      	mov	r3, r9
 800bcce:	4640      	mov	r0, r8
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	f7f4 fc2f 	bl	8000534 <__aeabi_dmul>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800bcde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bce2:	f7f4 fa75 	bl	80001d0 <__adddf3>
 800bce6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcea:	f7f4 fa71 	bl	80001d0 <__adddf3>
 800bcee:	9802      	ldr	r0, [sp, #8]
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	f7f4 fc1a 	bl	8000534 <__aeabi_dmul>
 800bd00:	4622      	mov	r2, r4
 800bd02:	4680      	mov	r8, r0
 800bd04:	4689      	mov	r9, r1
 800bd06:	462b      	mov	r3, r5
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 fc12 	bl	8000534 <__aeabi_dmul>
 800bd10:	2300      	movs	r3, #0
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	4620      	mov	r0, r4
 800bd18:	4629      	mov	r1, r5
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800bd20:	f7f4 fa54 	bl	80001cc <__aeabi_dsub>
 800bd24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd28:	f7f4 fa50 	bl	80001cc <__aeabi_dsub>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd34:	f7f4 fa4a 	bl	80001cc <__aeabi_dsub>
 800bd38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd3c:	f7f4 fbfa 	bl	8000534 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4630      	mov	r0, r6
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fa42 	bl	80001d0 <__adddf3>
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	4632      	mov	r2, r6
 800bd52:	463b      	mov	r3, r7
 800bd54:	4640      	mov	r0, r8
 800bd56:	4649      	mov	r1, r9
 800bd58:	f7f4 fa3a 	bl	80001d0 <__adddf3>
 800bd5c:	9802      	ldr	r0, [sp, #8]
 800bd5e:	a3f0      	add	r3, pc, #960	; (adr r3, 800c120 <__ieee754_pow+0x898>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	4604      	mov	r4, r0
 800bd66:	460d      	mov	r5, r1
 800bd68:	f7f4 fbe4 	bl	8000534 <__aeabi_dmul>
 800bd6c:	a3ee      	add	r3, pc, #952	; (adr r3, 800c128 <__ieee754_pow+0x8a0>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd76:	4620      	mov	r0, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7f4 fbdb 	bl	8000534 <__aeabi_dmul>
 800bd7e:	4642      	mov	r2, r8
 800bd80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd84:	464b      	mov	r3, r9
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f7f4 fa1f 	bl	80001cc <__aeabi_dsub>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4630      	mov	r0, r6
 800bd94:	4639      	mov	r1, r7
 800bd96:	f7f4 fa19 	bl	80001cc <__aeabi_dsub>
 800bd9a:	a3e5      	add	r3, pc, #916	; (adr r3, 800c130 <__ieee754_pow+0x8a8>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fbc8 	bl	8000534 <__aeabi_dmul>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdac:	f7f4 fa10 	bl	80001d0 <__adddf3>
 800bdb0:	f24f 2378 	movw	r3, #62072	; 0xf278
 800bdb4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdb8:	4453      	add	r3, sl
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fa07 	bl	80001d0 <__adddf3>
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bdc6:	4689      	mov	r9, r1
 800bdc8:	f7f4 fb4e 	bl	8000468 <__aeabi_i2d>
 800bdcc:	f24f 2368 	movw	r3, #62056	; 0xf268
 800bdd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdd4:	4453      	add	r3, sl
 800bdd6:	ed93 7b00 	vldr	d7, [r3]
 800bdda:	4604      	mov	r4, r0
 800bddc:	460d      	mov	r5, r1
 800bdde:	4642      	mov	r2, r8
 800bde0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bde4:	464b      	mov	r3, r9
 800bde6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdea:	f7f4 f9f1 	bl	80001d0 <__adddf3>
 800bdee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdf2:	f7f4 f9ed 	bl	80001d0 <__adddf3>
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	f7f4 f9e9 	bl	80001d0 <__adddf3>
 800bdfe:	9802      	ldr	r0, [sp, #8]
 800be00:	4622      	mov	r2, r4
 800be02:	462b      	mov	r3, r5
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	f7f4 f9e0 	bl	80001cc <__aeabi_dsub>
 800be0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be10:	f7f4 f9dc 	bl	80001cc <__aeabi_dsub>
 800be14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be18:	f7f4 f9d8 	bl	80001cc <__aeabi_dsub>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4640      	mov	r0, r8
 800be22:	4649      	mov	r1, r9
 800be24:	f7f4 f9d2 	bl	80001cc <__aeabi_dsub>
 800be28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be2c:	f8dd c000 	ldr.w	ip, [sp]
 800be30:	9904      	ldr	r1, [sp, #16]
 800be32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be34:	1e4b      	subs	r3, r1, #1
 800be36:	431a      	orrs	r2, r3
 800be38:	f040 81de 	bne.w	800c1f8 <__ieee754_pow+0x970>
 800be3c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800c0e0 <__ieee754_pow+0x858>
 800be40:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be44:	4663      	mov	r3, ip
 800be46:	465a      	mov	r2, fp
 800be48:	2100      	movs	r1, #0
 800be4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be4e:	9102      	str	r1, [sp, #8]
 800be50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be54:	4661      	mov	r1, ip
 800be56:	4658      	mov	r0, fp
 800be58:	4642      	mov	r2, r8
 800be5a:	464b      	mov	r3, r9
 800be5c:	f8cd c000 	str.w	ip, [sp]
 800be60:	f7f4 f9b4 	bl	80001cc <__aeabi_dsub>
 800be64:	463b      	mov	r3, r7
 800be66:	4632      	mov	r2, r6
 800be68:	f7f4 fb64 	bl	8000534 <__aeabi_dmul>
 800be6c:	f8dd c000 	ldr.w	ip, [sp]
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be78:	4661      	mov	r1, ip
 800be7a:	4658      	mov	r0, fp
 800be7c:	f7f4 fb5a 	bl	8000534 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 f9a2 	bl	80001d0 <__adddf3>
 800be8c:	463b      	mov	r3, r7
 800be8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be92:	4632      	mov	r2, r6
 800be94:	4640      	mov	r0, r8
 800be96:	4649      	mov	r1, r9
 800be98:	f7f4 fb4c 	bl	8000534 <__aeabi_dmul>
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	462b      	mov	r3, r5
 800bea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bea6:	4622      	mov	r2, r4
 800bea8:	f7f4 f992 	bl	80001d0 <__adddf3>
 800beac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beb0:	f2c4 038f 	movt	r3, #16527	; 0x408f
 800beb4:	4299      	cmp	r1, r3
 800beb6:	4682      	mov	sl, r0
 800beb8:	468b      	mov	fp, r1
 800beba:	460f      	mov	r7, r1
 800bebc:	f340 816e 	ble.w	800c19c <__ieee754_pow+0x914>
 800bec0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bec4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bec8:	4303      	orrs	r3, r0
 800beca:	f040 8223 	bne.w	800c314 <__ieee754_pow+0xa8c>
 800bece:	a39a      	add	r3, pc, #616	; (adr r3, 800c138 <__ieee754_pow+0x8b0>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bed8:	f7f4 f97a 	bl	80001d0 <__adddf3>
 800bedc:	4622      	mov	r2, r4
 800bede:	4680      	mov	r8, r0
 800bee0:	4689      	mov	r9, r1
 800bee2:	462b      	mov	r3, r5
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f970 	bl	80001cc <__aeabi_dsub>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fdae 	bl	8000a54 <__aeabi_dcmpgt>
 800bef8:	46d8      	mov	r8, fp
 800befa:	2800      	cmp	r0, #0
 800befc:	f040 820a 	bne.w	800c314 <__ieee754_pow+0xa8c>
 800bf00:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf04:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bf08:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800bf0c:	4119      	asrs	r1, r3
 800bf0e:	4439      	add	r1, r7
 800bf10:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bf14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bf18:	f2a6 3eff 	subw	lr, r6, #1023	; 0x3ff
 800bf1c:	f3c1 0a13 	ubfx	sl, r1, #0, #20
 800bf20:	f2c0 000f 	movt	r0, #15
 800bf24:	f5c6 6682 	rsb	r6, r6, #1040	; 0x410
 800bf28:	fa40 f00e 	asr.w	r0, r0, lr
 800bf2c:	3603      	adds	r6, #3
 800bf2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bf32:	ea21 0300 	bic.w	r3, r1, r0
 800bf36:	2f00      	cmp	r7, #0
 800bf38:	f04f 0200 	mov.w	r2, #0
 800bf3c:	fa4a fa06 	asr.w	sl, sl, r6
 800bf40:	4620      	mov	r0, r4
 800bf42:	4629      	mov	r1, r5
 800bf44:	bfb8      	it	lt
 800bf46:	f1ca 0a00 	rsblt	sl, sl, #0
 800bf4a:	f7f4 f93f 	bl	80001cc <__aeabi_dsub>
 800bf4e:	4604      	mov	r4, r0
 800bf50:	460d      	mov	r5, r1
 800bf52:	4622      	mov	r2, r4
 800bf54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf58:	462b      	mov	r3, r5
 800bf5a:	f7f4 f939 	bl	80001d0 <__adddf3>
 800bf5e:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 800bf62:	2600      	movs	r6, #0
 800bf64:	a376      	add	r3, pc, #472	; (adr r3, 800c140 <__ieee754_pow+0x8b8>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	460f      	mov	r7, r1
 800bf6e:	f7f4 fae1 	bl	8000534 <__aeabi_dmul>
 800bf72:	4622      	mov	r2, r4
 800bf74:	4680      	mov	r8, r0
 800bf76:	4689      	mov	r9, r1
 800bf78:	462b      	mov	r3, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	f7f4 f925 	bl	80001cc <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf8a:	f7f4 f91f 	bl	80001cc <__aeabi_dsub>
 800bf8e:	a36e      	add	r3, pc, #440	; (adr r3, 800c148 <__ieee754_pow+0x8c0>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 face 	bl	8000534 <__aeabi_dmul>
 800bf98:	a36d      	add	r3, pc, #436	; (adr r3, 800c150 <__ieee754_pow+0x8c8>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	f7f4 fac5 	bl	8000534 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f90d 	bl	80001d0 <__adddf3>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	f7f4 f905 	bl	80001d0 <__adddf3>
 800bfc6:	4642      	mov	r2, r8
 800bfc8:	464b      	mov	r3, r9
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460f      	mov	r7, r1
 800bfce:	f7f4 f8fd 	bl	80001cc <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 f8f7 	bl	80001cc <__aeabi_dsub>
 800bfde:	4632      	mov	r2, r6
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4689      	mov	r9, r1
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 faa3 	bl	8000534 <__aeabi_dmul>
 800bfee:	a35a      	add	r3, pc, #360	; (adr r3, 800c158 <__ieee754_pow+0x8d0>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	f7f4 fa9c 	bl	8000534 <__aeabi_dmul>
 800bffc:	a358      	add	r3, pc, #352	; (adr r3, 800c160 <__ieee754_pow+0x8d8>)
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f7f4 f8e3 	bl	80001cc <__aeabi_dsub>
 800c006:	4622      	mov	r2, r4
 800c008:	462b      	mov	r3, r5
 800c00a:	f7f4 fa93 	bl	8000534 <__aeabi_dmul>
 800c00e:	a356      	add	r3, pc, #344	; (adr r3, 800c168 <__ieee754_pow+0x8e0>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f7f4 f8dc 	bl	80001d0 <__adddf3>
 800c018:	4622      	mov	r2, r4
 800c01a:	462b      	mov	r3, r5
 800c01c:	f7f4 fa8a 	bl	8000534 <__aeabi_dmul>
 800c020:	a353      	add	r3, pc, #332	; (adr r3, 800c170 <__ieee754_pow+0x8e8>)
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f7f4 f8d1 	bl	80001cc <__aeabi_dsub>
 800c02a:	4622      	mov	r2, r4
 800c02c:	462b      	mov	r3, r5
 800c02e:	f7f4 fa81 	bl	8000534 <__aeabi_dmul>
 800c032:	a351      	add	r3, pc, #324	; (adr r3, 800c178 <__ieee754_pow+0x8f0>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	f7f4 f8ca 	bl	80001d0 <__adddf3>
 800c03c:	4622      	mov	r2, r4
 800c03e:	462b      	mov	r3, r5
 800c040:	f7f4 fa78 	bl	8000534 <__aeabi_dmul>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4630      	mov	r0, r6
 800c04a:	4639      	mov	r1, r7
 800c04c:	f7f4 f8be 	bl	80001cc <__aeabi_dsub>
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4622      	mov	r2, r4
 800c056:	462b      	mov	r3, r5
 800c058:	4630      	mov	r0, r6
 800c05a:	4639      	mov	r1, r7
 800c05c:	f7f4 fa6a 	bl	8000534 <__aeabi_dmul>
 800c060:	2200      	movs	r2, #0
 800c062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c06a:	4620      	mov	r0, r4
 800c06c:	4629      	mov	r1, r5
 800c06e:	f7f4 f8ad 	bl	80001cc <__aeabi_dsub>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07a:	f7f4 fb85 	bl	8000788 <__aeabi_ddiv>
 800c07e:	4642      	mov	r2, r8
 800c080:	4604      	mov	r4, r0
 800c082:	460d      	mov	r5, r1
 800c084:	464b      	mov	r3, r9
 800c086:	4630      	mov	r0, r6
 800c088:	4639      	mov	r1, r7
 800c08a:	f7f4 fa53 	bl	8000534 <__aeabi_dmul>
 800c08e:	4642      	mov	r2, r8
 800c090:	464b      	mov	r3, r9
 800c092:	f7f4 f89d 	bl	80001d0 <__adddf3>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4620      	mov	r0, r4
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f4 f895 	bl	80001cc <__aeabi_dsub>
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	f7f4 f891 	bl	80001cc <__aeabi_dsub>
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7f4 f889 	bl	80001cc <__aeabi_dsub>
 800c0ba:	448b      	add	fp, r1
 800c0bc:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	bfa8      	it	ge
 800c0c6:	465b      	movge	r3, fp
 800c0c8:	f2c0 815a 	blt.w	800c380 <__ieee754_pow+0xaf8>
 800c0cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0d0:	f7f4 fa30 	bl	8000534 <__aeabi_dmul>
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	468a      	mov	sl, r1
 800c0d8:	f7ff bbfc 	b.w	800b8d4 <__ieee754_pow+0x4c>
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	00000000 	andeq	r0, r0, r0
 800c0e4:	bff00000 	svclt	0x00f00000	; IMB
 800c0e8:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c0ec:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800c0f0:	4a454eef 	bmi	915fcb4 <_siccmram+0x1150570>
 800c0f4:	3fca7e28 	svccc	0x00ca7e28
 800c0f8:	93c9db65 	bicls	sp, r9, #103424	; 0x19400
 800c0fc:	3fcd864a 	svccc	0x00cd864a
 800c100:	a91d4101 	ldmdbge	sp, {r0, r8, lr}
 800c104:	3fd17460 	svccc	0x00d17460
 800c108:	518f264d 	orrpl	r2, pc, sp, asr #12
 800c10c:	3fd55555 	svccc	0x00d55555
 800c110:	db6fabff 	blle	9bf7114 <_siccmram+0x1be79d0>
 800c114:	3fdb6db6 	svccc	0x00db6db6
 800c118:	33333303 	teqcc	r3, #201326592	; 0xc000000
 800c11c:	3fe33333 	svccc	0x00e33333
 800c120:	e0000000 	and	r0, r0, r0
 800c124:	3feec709 	svccc	0x00eec709
 800c128:	145b01f5 	ldrbne	r0, [fp], #-501	; 0x1f5
 800c12c:	be3e2fe0 	cdplt	15, 3, cr2, cr14, cr0, {7}
 800c130:	dc3a03fd 	ldcle	3, cr0, [sl], #-1012	; 0xfffffc0c
 800c134:	3feec709 	svccc	0x00eec709
 800c138:	652b82fe 	strvs	r8, [fp, #-766]!	; 0x2fe
 800c13c:	3c971547 	cfldr32cc	mvfx1, [r7], {71}	; 0x47
 800c140:	00000000 	andeq	r0, r0, r0
 800c144:	3fe62e43 	svccc	0x00e62e43
 800c148:	fefa39ef 	cdp2	9, 15, cr3, cr10, cr15, {7}
 800c14c:	3fe62e42 	svccc	0x00e62e42
 800c150:	0ca86c39 	stceq	12, cr6, [r8], #228	; 0xe4
 800c154:	be205c61 	cdplt	12, 2, cr5, cr0, cr1, {3}
 800c158:	72bea4d0 	adcsvc	sl, lr, #208, 8	; 0xd0000000
 800c15c:	3e663769 	cdpcc	7, 6, cr3, cr6, cr9, {3}
 800c160:	c5d26bf1 	ldrbgt	r6, [r2, #3057]	; 0xbf1
 800c164:	3ebbbd41 	cdpcc	13, 11, cr11, cr11, cr1, {2}
 800c168:	af25de2c 	svcge	0x0025de2c
 800c16c:	3f11566a 	svccc	0x0011566a
 800c170:	16bebd93 	ssatne	fp, #31, r3, lsl #27
 800c174:	3f66c16c 	svccc	0x0066c16c
 800c178:	5555553e 	ldrbpl	r5, [r5, #-1342]	; 0x53e
 800c17c:	3fc55555 	svccc	0x00c55555
 800c180:	2f00      	cmp	r7, #0
 800c182:	f6ff abdd 	blt.w	800b940 <__ieee754_pow+0xb8>
 800c186:	4648      	mov	r0, r9
 800c188:	4651      	mov	r1, sl
 800c18a:	b013      	add	sp, #76	; 0x4c
 800c18c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	f000 b922 	b.w	800c3d8 <__ieee754_sqrt>
 800c194:	2d00      	cmp	r5, #0
 800c196:	f6bf ac5e 	bge.w	800ba56 <__ieee754_pow+0x1ce>
 800c19a:	e404      	b.n	800b9a6 <__ieee754_pow+0x11e>
 800c19c:	f64c 33ff 	movw	r3, #52223	; 0xcbff
 800c1a0:	f2c4 0390 	movt	r3, #16528	; 0x4090
 800c1a4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c1a8:	4598      	cmp	r8, r3
 800c1aa:	f340 80c3 	ble.w	800c334 <__ieee754_pow+0xaac>
 800c1ae:	f101 537d 	add.w	r3, r1, #1061158912	; 0x3f400000
 800c1b2:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 800c1b6:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 800c1ba:	4303      	orrs	r3, r0
 800c1bc:	d10c      	bne.n	800c1d8 <__ieee754_pow+0x950>
 800c1be:	4622      	mov	r2, r4
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	f7f4 f803 	bl	80001cc <__aeabi_dsub>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ce:	f7f4 fc2d 	bl	8000a2c <__aeabi_dcmple>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	f43f ae94 	beq.w	800bf00 <__ieee754_pow+0x678>
 800c1d8:	a373      	add	r3, pc, #460	; (adr r3, 800c3a8 <__ieee754_pow+0xb20>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1e2:	f7f4 f9a7 	bl	8000534 <__aeabi_dmul>
 800c1e6:	a370      	add	r3, pc, #448	; (adr r3, 800c3a8 <__ieee754_pow+0xb20>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f4 f9a2 	bl	8000534 <__aeabi_dmul>
 800c1f0:	4606      	mov	r6, r0
 800c1f2:	468a      	mov	sl, r1
 800c1f4:	f7ff bb6e 	b.w	800b8d4 <__ieee754_pow+0x4c>
 800c1f8:	ed9f 7b69 	vldr	d7, [pc, #420]	; 800c3a0 <__ieee754_pow+0xb18>
 800c1fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c200:	e620      	b.n	800be44 <__ieee754_pow+0x5bc>
 800c202:	2d00      	cmp	r5, #0
 800c204:	bfbc      	itt	lt
 800c206:	465e      	movlt	r6, fp
 800c208:	f10c 4a00 	addlt.w	sl, ip, #2147483648	; 0x80000000
 800c20c:	f6bf ac23 	bge.w	800ba56 <__ieee754_pow+0x1ce>
 800c210:	f7ff bb60 	b.w	800b8d4 <__ieee754_pow+0x4c>
 800c214:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c218:	9a02      	ldr	r2, [sp, #8]
 800c21a:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800c21e:	429a      	cmp	r2, r3
 800c220:	ddb8      	ble.n	800c194 <__ieee754_pow+0x90c>
 800c222:	2300      	movs	r3, #0
 800c224:	9a02      	ldr	r2, [sp, #8]
 800c226:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800c22a:	429a      	cmp	r2, r3
 800c22c:	f73f abb9 	bgt.w	800b9a2 <__ieee754_pow+0x11a>
 800c230:	2300      	movs	r3, #0
 800c232:	2200      	movs	r2, #0
 800c234:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800c238:	f8cd c000 	str.w	ip, [sp]
 800c23c:	f7f3 ffc6 	bl	80001cc <__aeabi_dsub>
 800c240:	a35b      	add	r3, pc, #364	; (adr r3, 800c3b0 <__ieee754_pow+0xb28>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	4604      	mov	r4, r0
 800c248:	460d      	mov	r5, r1
 800c24a:	f7f4 f973 	bl	8000534 <__aeabi_dmul>
 800c24e:	a35a      	add	r3, pc, #360	; (adr r3, 800c3b8 <__ieee754_pow+0xb30>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	4680      	mov	r8, r0
 800c256:	4689      	mov	r9, r1
 800c258:	4620      	mov	r0, r4
 800c25a:	4629      	mov	r1, r5
 800c25c:	f7f4 f96a 	bl	8000534 <__aeabi_dmul>
 800c260:	4622      	mov	r2, r4
 800c262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c266:	462b      	mov	r3, r5
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 f962 	bl	8000534 <__aeabi_dmul>
 800c270:	2300      	movs	r3, #0
 800c272:	4606      	mov	r6, r0
 800c274:	460f      	mov	r7, r1
 800c276:	4620      	mov	r0, r4
 800c278:	4629      	mov	r1, r5
 800c27a:	2200      	movs	r2, #0
 800c27c:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
 800c280:	f7f4 f958 	bl	8000534 <__aeabi_dmul>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	a14d      	add	r1, pc, #308	; (adr r1, 800c3c0 <__ieee754_pow+0xb38>)
 800c28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28e:	f7f3 ff9d 	bl	80001cc <__aeabi_dsub>
 800c292:	4622      	mov	r2, r4
 800c294:	462b      	mov	r3, r5
 800c296:	f7f4 f94d 	bl	8000534 <__aeabi_dmul>
 800c29a:	460b      	mov	r3, r1
 800c29c:	2100      	movs	r1, #0
 800c29e:	4602      	mov	r2, r0
 800c2a0:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f7f3 ff91 	bl	80001cc <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f4 f93f 	bl	8000534 <__aeabi_dmul>
 800c2b6:	a344      	add	r3, pc, #272	; (adr r3, 800c3c8 <__ieee754_pow+0xb40>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f4 f93a 	bl	8000534 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c8:	f7f3 ff80 	bl	80001cc <__aeabi_dsub>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	f7f3 ff7a 	bl	80001d0 <__adddf3>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	4642      	mov	r2, r8
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	f7f3 ff71 	bl	80001cc <__aeabi_dsub>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f3 ff6b 	bl	80001cc <__aeabi_dsub>
 800c2f6:	f8dd c000 	ldr.w	ip, [sp]
 800c2fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2fe:	e597      	b.n	800be30 <__ieee754_pow+0x5a8>
 800c300:	460b      	mov	r3, r1
 800c302:	2100      	movs	r1, #0
 800c304:	4602      	mov	r2, r0
 800c306:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c30a:	2000      	movs	r0, #0
 800c30c:	f7f4 fa3c 	bl	8000788 <__aeabi_ddiv>
 800c310:	f7ff bba7 	b.w	800ba62 <__ieee754_pow+0x1da>
 800c314:	a32e      	add	r3, pc, #184	; (adr r3, 800c3d0 <__ieee754_pow+0xb48>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c31e:	f7f4 f909 	bl	8000534 <__aeabi_dmul>
 800c322:	a32b      	add	r3, pc, #172	; (adr r3, 800c3d0 <__ieee754_pow+0xb48>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f4 f904 	bl	8000534 <__aeabi_dmul>
 800c32c:	4606      	mov	r6, r0
 800c32e:	468a      	mov	sl, r1
 800c330:	f7ff bad0 	b.w	800b8d4 <__ieee754_pow+0x4c>
 800c334:	2300      	movs	r3, #0
 800c336:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c33a:	4598      	cmp	r8, r3
 800c33c:	f73f ade0 	bgt.w	800bf00 <__ieee754_pow+0x678>
 800c340:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c344:	46da      	mov	sl, fp
 800c346:	e60c      	b.n	800bf62 <__ieee754_pow+0x6da>
 800c348:	b9b4      	cbnz	r4, 800c378 <__ieee754_pow+0xaf0>
 800c34a:	f5c2 6282 	rsb	r2, r2, #1040	; 0x410
 800c34e:	3203      	adds	r2, #3
 800c350:	fa48 f002 	asr.w	r0, r8, r2
 800c354:	fa00 f202 	lsl.w	r2, r0, r2
 800c358:	4542      	cmp	r2, r8
 800c35a:	d017      	beq.n	800c38c <__ieee754_pow+0xb04>
 800c35c:	2200      	movs	r2, #0
 800c35e:	9204      	str	r2, [sp, #16]
 800c360:	f7ff bad9 	b.w	800b916 <__ieee754_pow+0x8e>
 800c364:	9b04      	ldr	r3, [sp, #16]
 800c366:	2b01      	cmp	r3, #1
 800c368:	4606      	mov	r6, r0
 800c36a:	bf08      	it	eq
 800c36c:	f101 4a00 	addeq.w	sl, r1, #2147483648	; 0x80000000
 800c370:	f47f ab22 	bne.w	800b9b8 <__ieee754_pow+0x130>
 800c374:	f7ff baae 	b.w	800b8d4 <__ieee754_pow+0x4c>
 800c378:	2200      	movs	r2, #0
 800c37a:	9204      	str	r2, [sp, #16]
 800c37c:	f7ff bae0 	b.w	800b940 <__ieee754_pow+0xb8>
 800c380:	4652      	mov	r2, sl
 800c382:	f000 f9b1 	bl	800c6e8 <scalbn>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	e69f      	b.n	800c0cc <__ieee754_pow+0x844>
 800c38c:	f000 0001 	and.w	r0, r0, #1
 800c390:	f1c0 0002 	rsb	r0, r0, #2
 800c394:	9004      	str	r0, [sp, #16]
 800c396:	f7ff babe 	b.w	800b916 <__ieee754_pow+0x8e>
 800c39a:	bf00      	nop
 800c39c:	f3af 8000 	nop.w
 800c3a0:	00000000 	andeq	r0, r0, r0
 800c3a4:	3ff00000 	svccc	0x00f00000	; IMB
 800c3a8:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
 800c3ac:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f
 800c3b0:	60000000 	andvs	r0, r0, r0
 800c3b4:	3ff71547 	svccc	0x00f71547
 800c3b8:	f85ddf44 			; <UNDEFINED> instruction: 0xf85ddf44
 800c3bc:	3e54ae0b 	cdpcc	14, 5, cr10, cr4, cr11, {0}
 800c3c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
 800c3c4:	3fd55555 	svccc	0x00d55555
 800c3c8:	652b82fe 	strvs	r8, [fp, #-766]!	; 0x2fe
 800c3cc:	3ff71547 	svccc	0x00f71547
 800c3d0:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c3d4:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}

0800c3d8 <__ieee754_sqrt>:
 800c3d8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 800c3e4:	f04f 0800 	mov.w	r8, #0
 800c3e8:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 800c3ec:	f6c7 78f0 	movt	r8, #32752	; 0x7ff0
 800c3f0:	45c4      	cmp	ip, r8
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	f000 8092 	beq.w	800c522 <__ieee754_sqrt+0x14a>
 800c3fe:	2900      	cmp	r1, #0
 800c400:	dd72      	ble.n	800c4e8 <__ieee754_sqrt+0x110>
 800c402:	150f      	asrs	r7, r1, #20
 800c404:	d07b      	beq.n	800c4fe <__ieee754_sqrt+0x126>
 800c406:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800c40a:	07f9      	lsls	r1, r7, #31
 800c40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c410:	bf48      	it	mi
 800c412:	0fd1      	lsrmi	r1, r2, #31
 800c414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c418:	bf44      	itt	mi
 800c41a:	0052      	lslmi	r2, r2, #1
 800c41c:	eb01 0343 	addmi.w	r3, r1, r3, lsl #1
 800c420:	f04f 0c00 	mov.w	ip, #0
 800c424:	0fd1      	lsrs	r1, r2, #31
 800c426:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c42a:	107f      	asrs	r7, r7, #1
 800c42c:	0052      	lsls	r2, r2, #1
 800c42e:	4660      	mov	r0, ip
 800c430:	2416      	movs	r4, #22
 800c432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c436:	1845      	adds	r5, r0, r1
 800c438:	429d      	cmp	r5, r3
 800c43a:	ea4f 76d2 	mov.w	r6, r2, lsr #31
 800c43e:	bfde      	ittt	le
 800c440:	ebc5 0303 	rsble	r3, r5, r3
 800c444:	1868      	addle	r0, r5, r1
 800c446:	448c      	addle	ip, r1
 800c448:	3c01      	subs	r4, #1
 800c44a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c44e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800c452:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c456:	d1ee      	bne.n	800c436 <__ieee754_sqrt+0x5e>
 800c458:	46a0      	mov	r8, r4
 800c45a:	2620      	movs	r6, #32
 800c45c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c460:	e011      	b.n	800c486 <__ieee754_sqrt+0xae>
 800c462:	4681      	mov	r9, r0
 800c464:	1a1b      	subs	r3, r3, r0
 800c466:	4295      	cmp	r5, r2
 800c468:	bf88      	it	hi
 800c46a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800c46e:	1b52      	subs	r2, r2, r5
 800c470:	440c      	add	r4, r1
 800c472:	4648      	mov	r0, r9
 800c474:	0fd5      	lsrs	r5, r2, #31
 800c476:	3e01      	subs	r6, #1
 800c478:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c47c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c480:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c484:	d015      	beq.n	800c4b2 <__ieee754_sqrt+0xda>
 800c486:	4298      	cmp	r0, r3
 800c488:	eb01 0508 	add.w	r5, r1, r8
 800c48c:	db03      	blt.n	800c496 <__ieee754_sqrt+0xbe>
 800c48e:	4295      	cmp	r5, r2
 800c490:	bf98      	it	ls
 800c492:	4283      	cmpls	r3, r0
 800c494:	d1ee      	bne.n	800c474 <__ieee754_sqrt+0x9c>
 800c496:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
 800c49a:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800c49e:	eb05 0801 	add.w	r8, r5, r1
 800c4a2:	d1de      	bne.n	800c462 <__ieee754_sqrt+0x8a>
 800c4a4:	f1b8 0f00 	cmp.w	r8, #0
 800c4a8:	bfa8      	it	ge
 800c4aa:	f100 0901 	addge.w	r9, r0, #1
 800c4ae:	dad9      	bge.n	800c464 <__ieee754_sqrt+0x8c>
 800c4b0:	e7d7      	b.n	800c462 <__ieee754_sqrt+0x8a>
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	d007      	beq.n	800c4c6 <__ieee754_sqrt+0xee>
 800c4b6:	1c63      	adds	r3, r4, #1
 800c4b8:	bf08      	it	eq
 800c4ba:	f10c 0c01 	addeq.w	ip, ip, #1
 800c4be:	d003      	beq.n	800c4c8 <__ieee754_sqrt+0xf0>
 800c4c0:	f004 0301 	and.w	r3, r4, #1
 800c4c4:	441c      	add	r4, r3
 800c4c6:	0866      	lsrs	r6, r4, #1
 800c4c8:	ea4f 036c 	mov.w	r3, ip, asr #1
 800c4cc:	f01c 0f01 	tst.w	ip, #1
 800c4d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c4d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c4d8:	bf18      	it	ne
 800c4da:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
 800c4de:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4ec:	4303      	orrs	r3, r0
 800c4ee:	d022      	beq.n	800c536 <__ieee754_sqrt+0x15e>
 800c4f0:	bb39      	cbnz	r1, 800c542 <__ieee754_sqrt+0x16a>
 800c4f2:	460f      	mov	r7, r1
 800c4f4:	0ad3      	lsrs	r3, r2, #11
 800c4f6:	3f15      	subs	r7, #21
 800c4f8:	0552      	lsls	r2, r2, #21
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0fa      	beq.n	800c4f4 <__ieee754_sqrt+0x11c>
 800c4fe:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
 800c502:	d11a      	bne.n	800c53a <__ieee754_sqrt+0x162>
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	02d8      	lsls	r0, r3, #11
 800c508:	f101 0101 	add.w	r1, r1, #1
 800c50c:	d5fa      	bpl.n	800c504 <__ieee754_sqrt+0x12c>
 800c50e:	f1c1 0001 	rsb	r0, r1, #1
 800c512:	f1c1 0420 	rsb	r4, r1, #32
 800c516:	fa22 f404 	lsr.w	r4, r2, r4
 800c51a:	4323      	orrs	r3, r4
 800c51c:	4407      	add	r7, r0
 800c51e:	408a      	lsls	r2, r1
 800c520:	e771      	b.n	800c406 <__ieee754_sqrt+0x2e>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	f7f4 f805 	bl	8000534 <__aeabi_dmul>
 800c52a:	4632      	mov	r2, r6
 800c52c:	463b      	mov	r3, r7
 800c52e:	f7f3 fe4f 	bl	80001d0 <__adddf3>
 800c532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53a:	2420      	movs	r4, #32
 800c53c:	2001      	movs	r0, #1
 800c53e:	2100      	movs	r1, #0
 800c540:	e7e9      	b.n	800c516 <__ieee754_sqrt+0x13e>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	f7f3 fe41 	bl	80001cc <__aeabi_dsub>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	f7f4 f91b 	bl	8000788 <__aeabi_ddiv>
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	bf00      	nop

0800c558 <finite>:
 800c558:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c55c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c560:	0fc0      	lsrs	r0, r0, #31
 800c562:	4770      	bx	lr

0800c564 <__fpclassifyd>:
 800c564:	ea50 0301 	orrs.w	r3, r0, r1
 800c568:	d101      	bne.n	800c56e <__fpclassifyd+0xa>
 800c56a:	2002      	movs	r0, #2
 800c56c:	4770      	bx	lr
 800c56e:	f1d0 0301 	rsbs	r3, r0, #1
 800c572:	bf38      	it	cc
 800c574:	2300      	movcc	r3, #0
 800c576:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c57a:	bf08      	it	eq
 800c57c:	2800      	cmpeq	r0, #0
 800c57e:	d0f4      	beq.n	800c56a <__fpclassifyd+0x6>
 800c580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c588:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800c58c:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800c590:	4290      	cmp	r0, r2
 800c592:	d801      	bhi.n	800c598 <__fpclassifyd+0x34>
 800c594:	2004      	movs	r0, #4
 800c596:	4770      	bx	lr
 800c598:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c59c:	d201      	bcs.n	800c5a2 <__fpclassifyd+0x3e>
 800c59e:	2003      	movs	r0, #3
 800c5a0:	4770      	bx	lr
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c5a8:	4281      	cmp	r1, r0
 800c5aa:	bf14      	ite	ne
 800c5ac:	2000      	movne	r0, #0
 800c5ae:	f003 0001 	andeq.w	r0, r3, #1
 800c5b2:	4770      	bx	lr

0800c5b4 <matherr>:
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	4770      	bx	lr

0800c5b8 <nan>:
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop

0800c5c4 <rint>:
 800c5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c5cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c5d0:	2e13      	cmp	r6, #19
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	460d      	mov	r5, r1
 800c5da:	4689      	mov	r9, r1
 800c5dc:	4684      	mov	ip, r0
 800c5de:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800c5e2:	dc37      	bgt.n	800c654 <rint+0x90>
 800c5e4:	2e00      	cmp	r6, #0
 800c5e6:	db52      	blt.n	800c68e <rint+0xca>
 800c5e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c5ec:	f2c0 010f 	movt	r1, #15
 800c5f0:	4131      	asrs	r1, r6
 800c5f2:	ea01 0003 	and.w	r0, r1, r3
 800c5f6:	4310      	orrs	r0, r2
 800c5f8:	d031      	beq.n	800c65e <rint+0x9a>
 800c5fa:	0849      	lsrs	r1, r1, #1
 800c5fc:	ea01 0c03 	and.w	ip, r1, r3
 800c600:	ea5c 0c02 	orrs.w	ip, ip, r2
 800c604:	d00c      	beq.n	800c620 <rint+0x5c>
 800c606:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c60a:	ea25 0101 	bic.w	r1, r5, r1
 800c60e:	4133      	asrs	r3, r6
 800c610:	ea41 0903 	orr.w	r9, r1, r3
 800c614:	2e13      	cmp	r6, #19
 800c616:	bf0c      	ite	eq
 800c618:	f04f 4c00 	moveq.w	ip, #2147483648	; 0x80000000
 800c61c:	f04f 0c00 	movne.w	ip, #0
 800c620:	f24f 2398 	movw	r3, #62104	; 0xf298
 800c624:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c628:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c62c:	464f      	mov	r7, r9
 800c62e:	e9d8 8900 	ldrd	r8, r9, [r8]
 800c632:	4662      	mov	r2, ip
 800c634:	463b      	mov	r3, r7
 800c636:	4640      	mov	r0, r8
 800c638:	4649      	mov	r1, r9
 800c63a:	f7f3 fdc9 	bl	80001d0 <__adddf3>
 800c63e:	e9cd 0100 	strd	r0, r1, [sp]
 800c642:	4642      	mov	r2, r8
 800c644:	464b      	mov	r3, r9
 800c646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c64a:	f7f3 fdbf 	bl	80001cc <__aeabi_dsub>
 800c64e:	b003      	add	sp, #12
 800c650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c654:	2e33      	cmp	r6, #51	; 0x33
 800c656:	dd07      	ble.n	800c668 <rint+0xa4>
 800c658:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c65c:	d03f      	beq.n	800c6de <rint+0x11a>
 800c65e:	4610      	mov	r0, r2
 800c660:	4619      	mov	r1, r3
 800c662:	b003      	add	sp, #12
 800c664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c668:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c66c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c670:	40f9      	lsrs	r1, r7
 800c672:	4201      	tst	r1, r0
 800c674:	d0f3      	beq.n	800c65e <rint+0x9a>
 800c676:	0849      	lsrs	r1, r1, #1
 800c678:	4201      	tst	r1, r0
 800c67a:	bf1f      	itttt	ne
 800c67c:	f04f 4c80 	movne.w	ip, #1073741824	; 0x40000000
 800c680:	ea20 0101 	bicne.w	r1, r0, r1
 800c684:	fa4c f707 	asrne.w	r7, ip, r7
 800c688:	ea41 0c07 	orrne.w	ip, r1, r7
 800c68c:	e7c8      	b.n	800c620 <rint+0x5c>
 800c68e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c692:	4301      	orrs	r1, r0
 800c694:	d0e3      	beq.n	800c65e <rint+0x9a>
 800c696:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c69a:	4301      	orrs	r1, r0
 800c69c:	4248      	negs	r0, r1
 800c69e:	4308      	orrs	r0, r1
 800c6a0:	f24f 2198 	movw	r1, #62104	; 0xf298
 800c6a4:	0b00      	lsrs	r0, r0, #12
 800c6a6:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c6aa:	0c5c      	lsrs	r4, r3, #17
 800c6ac:	f400 2000 	and.w	r0, r0, #524288	; 0x80000
 800c6b0:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c6b4:	ea40 4344 	orr.w	r3, r0, r4, lsl #17
 800c6b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 fd86 	bl	80001d0 <__adddf3>
 800c6c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6d0:	f7f3 fd7c 	bl	80001cc <__aeabi_dsub>
 800c6d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6d8:	ea43 71c8 	orr.w	r1, r3, r8, lsl #31
 800c6dc:	e7c1      	b.n	800c662 <rint+0x9e>
 800c6de:	f7f3 fd77 	bl	80001d0 <__adddf3>
 800c6e2:	e7be      	b.n	800c662 <rint+0x9e>
 800c6e4:	0000      	movs	r0, r0
	...

0800c6e8 <scalbn>:
 800c6e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	4690      	mov	r8, r2
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	460a      	mov	r2, r1
 800c6f8:	bb43      	cbnz	r3, 800c74c <scalbn+0x64>
 800c6fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6fe:	4303      	orrs	r3, r0
 800c700:	d039      	beq.n	800c776 <scalbn+0x8e>
 800c702:	2300      	movs	r3, #0
 800c704:	f2c4 3350 	movt	r3, #17232	; 0x4350
 800c708:	2200      	movs	r2, #0
 800c70a:	f7f3 ff13 	bl	8000534 <__aeabi_dmul>
 800c70e:	f643 43b0 	movw	r3, #15536	; 0x3cb0
 800c712:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800c716:	4598      	cmp	r8, r3
 800c718:	4606      	mov	r6, r0
 800c71a:	460f      	mov	r7, r1
 800c71c:	db3b      	blt.n	800c796 <scalbn+0xae>
 800c71e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c722:	3b36      	subs	r3, #54	; 0x36
 800c724:	460a      	mov	r2, r1
 800c726:	4443      	add	r3, r8
 800c728:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c72c:	428b      	cmp	r3, r1
 800c72e:	dd16      	ble.n	800c75e <scalbn+0x76>
 800c730:	4632      	mov	r2, r6
 800c732:	463b      	mov	r3, r7
 800c734:	a12e      	add	r1, pc, #184	; (adr r1, 800c7f0 <scalbn+0x108>)
 800c736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c73a:	f000 f861 	bl	800c800 <copysign>
 800c73e:	a32c      	add	r3, pc, #176	; (adr r3, 800c7f0 <scalbn+0x108>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f3 fef6 	bl	8000534 <__aeabi_dmul>
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	f240 74ff 	movw	r4, #2047	; 0x7ff
 800c750:	42a3      	cmp	r3, r4
 800c752:	d027      	beq.n	800c7a4 <scalbn+0xbc>
 800c754:	4443      	add	r3, r8
 800c756:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c75a:	428b      	cmp	r3, r1
 800c75c:	dce8      	bgt.n	800c730 <scalbn+0x48>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	dd0b      	ble.n	800c77a <scalbn+0x92>
 800c762:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c766:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c76a:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 800c76e:	4630      	mov	r0, r6
 800c770:	4639      	mov	r1, r7
 800c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c77a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800c77e:	da17      	bge.n	800c7b0 <scalbn+0xc8>
 800c780:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c784:	4598      	cmp	r8, r3
 800c786:	4632      	mov	r2, r6
 800c788:	463b      	mov	r3, r7
 800c78a:	dc22      	bgt.n	800c7d2 <scalbn+0xea>
 800c78c:	a11a      	add	r1, pc, #104	; (adr r1, 800c7f8 <scalbn+0x110>)
 800c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c792:	f000 f835 	bl	800c800 <copysign>
 800c796:	a318      	add	r3, pc, #96	; (adr r3, 800c7f8 <scalbn+0x110>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 feca 	bl	8000534 <__aeabi_dmul>
 800c7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	f7f3 fd12 	bl	80001d0 <__adddf3>
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c7b4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c7b8:	3336      	adds	r3, #54	; 0x36
 800c7ba:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 800c7be:	2300      	movs	r3, #0
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f6c3 4390 	movt	r3, #15504	; 0x3c90
 800c7ca:	f7f3 feb3 	bl	8000534 <__aeabi_dmul>
 800c7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d2:	a107      	add	r1, pc, #28	; (adr r1, 800c7f0 <scalbn+0x108>)
 800c7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d8:	f000 f812 	bl	800c800 <copysign>
 800c7dc:	a304      	add	r3, pc, #16	; (adr r3, 800c7f0 <scalbn+0x108>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7f3 fea7 	bl	8000534 <__aeabi_dmul>
 800c7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w
 800c7f0:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c7f4:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800c7f8:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
 800c7fc:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f

0800c800 <copysign>:
 800c800:	b430      	push	{r4, r5}
 800c802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c806:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c80a:	ea43 0102 	orr.w	r1, r3, r2
 800c80e:	bc30      	pop	{r4, r5}
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop

0800c814 <__errno>:
 800c814:	f240 4390 	movw	r3, #1168	; 0x490
 800c818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	4770      	bx	lr

Disassembly of section .rodata:

0800c820 <GPIO_PIN>:
 800c820:	40002000 	andmi	r2, r0, r0

0800c824 <GPIO_CLK>:
 800c824:	00000040 	andeq	r0, r0, r0, asr #32
 800c828:	00000040 	andeq	r0, r0, r0, asr #32

0800c82c <BUTTON_PIN>:
 800c82c:	00000001 	andeq	r0, r0, r1

0800c830 <BUTTON_CLK>:
 800c830:	00000001 	andeq	r0, r0, r1

0800c834 <BUTTON_EXTI_LINE>:
 800c834:	00000001 	andeq	r0, r0, r1

0800c838 <BUTTON_PORT_SOURCE>:
 800c838:	00000000 	andeq	r0, r0, r0

0800c83c <BUTTON_PIN_SOURCE>:
 800c83c:	00000000 	andeq	r0, r0, r0

0800c840 <BUTTON_IRQn>:
 800c840:	00000006 	andeq	r0, r0, r6

0800c844 <ASCII16x24_Table>:
	...
 800c874:	01800000 	orreq	r0, r0, r0
 800c878:	01800180 	orreq	r0, r0, r0, lsl #3
 800c87c:	01800180 	orreq	r0, r0, r0, lsl #3
 800c880:	01800180 	orreq	r0, r0, r0, lsl #3
 800c884:	01800180 	orreq	r0, r0, r0, lsl #3
 800c888:	01800180 	orreq	r0, r0, r0, lsl #3
 800c88c:	01800180 	orreq	r0, r0, r0, lsl #3
 800c890:	00000000 	andeq	r0, r0, r0
 800c894:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800c8a8:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800c8ac:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800c8b0:	00cc00cc 	sbceq	r0, ip, ip, asr #1
	...
 800c8e0:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800c8e4:	06300c60 	ldrteq	r0, [r0], -r0, ror #24
 800c8e8:	1ffe0630 	svcne	0x00fe0630
 800c8ec:	06301ffe 	shsub8eq	r1, r0, lr
 800c8f0:	03180738 	tsteq	r8, #56, 14	; 0xe00000
 800c8f4:	1ffe1ffe 	svcne	0x00fe1ffe
 800c8f8:	03180318 	tsteq	r8, #24, 6	; 0x60000000
 800c8fc:	018c018c 	orreq	r0, ip, ip, lsl #3
 800c900:	0000018c 	andeq	r0, r0, ip, lsl #3
 800c904:	00800000 	addeq	r0, r0, r0
 800c908:	0ff803e0 	svceq	0x00f803e0
 800c90c:	1c8c0e9c 	stcne	14, cr0, [ip], {156}	; 0x9c
 800c910:	008c188c 	addeq	r1, ip, ip, lsl #17
 800c914:	01f80098 			; <UNDEFINED> instruction: 0x01f80098
 800c918:	0e8007e0 	cdpeq	7, 8, cr0, cr0, cr0, {7}
 800c91c:	188c1c80 	stmne	ip, {r7, sl, fp, ip}
 800c920:	189c188c 	ldmne	ip, {r2, r3, r7, fp, ip}
 800c924:	0ff00cb8 	svceq	0x00f00cb8
 800c928:	008003e0 	addeq	r0, r0, r0, ror #7
 800c92c:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800c938:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
 800c93c:	0c110c1b 	ldceq	12, cr0, [r1], {27}
 800c940:	06110611 			; <UNDEFINED> instruction: 0x06110611
 800c944:	03110311 	tsteq	r1, #1140850688	; 0x44000000
 800c948:	018e019b 			; <UNDEFINED> instruction: 0x018e019b
 800c94c:	6cc038c0 	stclvs	8, cr3, [r0], {192}	; 0xc0
 800c950:	44604460 	strbtmi	r4, [r0], #-1120	; 0x460
 800c954:	44304430 	ldrtmi	r4, [r0], #-1072	; 0x430
 800c958:	6c184418 	cfldrsvs	mvf4, [r8], {24}
 800c95c:	0000380c 	andeq	r3, r0, ip, lsl #16
 800c960:	00000000 	andeq	r0, r0, r0
 800c964:	01e00000 	mvneq	r0, r0
 800c968:	073803f0 			; <UNDEFINED> instruction: 0x073803f0
 800c96c:	06180618 			; <UNDEFINED> instruction: 0x06180618
 800c970:	01f00330 	mvnseq	r0, r0, lsr r3
 800c974:	00f800f0 	ldrshteq	r0, [r8], #0
 800c978:	330e319c 	movwcc	r3, #57756	; 0xe19c
 800c97c:	1c061e06 	stcne	14, cr1, [r6], {6}
 800c980:	3f061c06 	svccc	0x00061c06
 800c984:	21f073fc 	ldrshcs	r7, [r0, #60]!	; 0x3c
	...
 800c998:	000c000c 	andeq	r0, ip, ip
 800c99c:	000c000c 	andeq	r0, ip, ip
 800c9a0:	000c000c 	andeq	r0, ip, ip
	...
 800c9c4:	02000000 	andeq	r0, r0, #0
 800c9c8:	01800300 	orreq	r0, r0, r0, lsl #6
 800c9cc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800c9d0:	00600060 	rsbeq	r0, r0, r0, rrx
 800c9d4:	00300030 	eorseq	r0, r0, r0, lsr r0
 800c9d8:	00300030 	eorseq	r0, r0, r0, lsr r0
 800c9dc:	00300030 	eorseq	r0, r0, r0, lsr r0
 800c9e0:	00300030 	eorseq	r0, r0, r0, lsr r0
 800c9e4:	00600060 	rsbeq	r0, r0, r0, rrx
 800c9e8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800c9ec:	03000180 	movweq	r0, #384	; 0x180
 800c9f0:	00000200 	andeq	r0, r0, r0, lsl #4
 800c9f4:	00200000 	eoreq	r0, r0, r0
 800c9f8:	00c00060 	sbceq	r0, r0, r0, rrx
 800c9fc:	01800180 	orreq	r0, r0, r0, lsl #3
 800ca00:	03000300 	movweq	r0, #768	; 0x300
 800ca04:	06000600 	streq	r0, [r0], -r0, lsl #12
 800ca08:	06000600 	streq	r0, [r0], -r0, lsl #12
 800ca0c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800ca10:	06000600 	streq	r0, [r0], -r0, lsl #12
 800ca14:	03000300 	movweq	r0, #768	; 0x300
 800ca18:	01800180 	orreq	r0, r0, r0, lsl #3
 800ca1c:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800ca20:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800ca30:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ca34:	07f806d8 	ubfxeq	r0, r8, #13, #25
 800ca38:	033001e0 	teqeq	r0, #224, 2	; 0x38
 800ca3c:	00000738 	andeq	r0, r0, r8, lsr r7
	...
 800ca60:	01800180 	orreq	r0, r0, r0, lsl #3
 800ca64:	01800180 	orreq	r0, r0, r0, lsl #3
 800ca68:	3ffc0180 	svccc	0x00fc0180
 800ca6c:	01803ffc 	strdeq	r3, [r0, ip]
 800ca70:	01800180 	orreq	r0, r0, r0, lsl #3
 800ca74:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800caa4:	01800000 	orreq	r0, r0, r0
 800caa8:	01000180 	smlabbeq	r0, r0, r1, r0
 800caac:	00800100 	addeq	r0, r0, r0, lsl #2
	...
 800cacc:	07e007e0 	strbeq	r0, [r0, r0, ror #15]!
	...
 800cb04:	00c00000 	sbceq	r0, r0, r0
 800cb08:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800cb14:	0c000000 	stceq	0, cr0, [r0], {-0}
 800cb18:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cb1c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cb20:	03000300 	movweq	r0, #768	; 0x300
 800cb24:	03800300 	orreq	r0, r0, #0, 6
 800cb28:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb2c:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800cb30:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cb34:	00600060 	rsbeq	r0, r0, r0, rrx
	...
 800cb44:	03e00000 	mvneq	r0, #0
 800cb48:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800cb4c:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800cb50:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cb54:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cb58:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cb5c:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cb60:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800cb64:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800cb74:	01000000 	mrseq	r0, (UNDEF: 0)
 800cb78:	01c00180 	biceq	r0, r0, r0, lsl #3
 800cb7c:	019801f0 			; <UNDEFINED> instruction: 0x019801f0
 800cb80:	01800188 	orreq	r0, r0, r8, lsl #3
 800cb84:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb88:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb8c:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb90:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb94:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cba4:	03e00000 	mvneq	r0, #0
 800cba8:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800cbac:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cbb0:	18001800 	stmdane	r0, {fp, ip}
 800cbb4:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cbb8:	01800300 	orreq	r0, r0, r0, lsl #6
 800cbbc:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800cbc0:	00180030 	andseq	r0, r8, r0, lsr r0
 800cbc4:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800cbd4:	01e00000 	mvneq	r0, r0
 800cbd8:	0e1807f8 	mrceq	7, 0, r0, cr8, cr8, {7}
 800cbdc:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800cbe0:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cbe4:	07c003c0 	strbeq	r0, [r0, r0, asr #7]
 800cbe8:	18000c00 	stmdane	r0, {sl, fp}
 800cbec:	180c1800 	stmdane	ip, {fp, ip}
 800cbf0:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800cbf4:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800cc04:	0c000000 	stceq	0, cr0, [r0], {-0}
 800cc08:	0f000e00 	svceq	0x00000e00
 800cc0c:	0d800f00 	stceq	15, cr0, [r0]
 800cc10:	0c600cc0 	stcleq	12, cr0, [r0], #-768	; 0xfffffd00
 800cc14:	0c300c60 	ldceq	12, cr0, [r0], #-384	; 0xfffffe80
 800cc18:	0c0c0c18 	stceq	12, cr0, [ip], {24}
 800cc1c:	3ffc3ffc 	svccc	0x00fc3ffc
 800cc20:	0c000c00 	stceq	12, cr0, [r0], {-0}
 800cc24:	0c000c00 	stceq	12, cr0, [r0], {-0}
	...
 800cc34:	0ff80000 	svceq	0x00f80000
 800cc38:	00180ff8 			; <UNDEFINED> instruction: 0x00180ff8
 800cc3c:	000c0018 	andeq	r0, ip, r8, lsl r0
 800cc40:	07fc03ec 	ldrbeq	r0, [ip, ip, ror #7]!
 800cc44:	1c000e1c 	stcne	14, cr0, [r0], {28}
 800cc48:	18001800 	stmdane	r0, {fp, ip}
 800cc4c:	180c1800 	stmdane	ip, {fp, ip}
 800cc50:	0e180c1c 	mrceq	12, 0, r0, cr8, cr12, {0}
 800cc54:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800cc64:	07c00000 	strbeq	r0, [r0, r0]
 800cc68:	1c380ff0 	ldcne	15, cr0, [r8], #-960	; 0xfffffc40
 800cc6c:	00181818 	andseq	r1, r8, r8, lsl r8
 800cc70:	03cc000c 	biceq	r0, ip, #12
 800cc74:	0e3c0fec 	cdpeq	15, 3, cr0, cr12, cr12, {7}
 800cc78:	180c1c1c 	stmdane	ip, {r2, r3, r4, sl, fp, ip}
 800cc7c:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cc80:	0e381c18 	mrceq	12, 1, r1, cr8, cr8, {0}
 800cc84:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800cc94:	1ffc0000 	svcne	0x00fc0000
 800cc98:	0c001ffc 	stceq	15, cr1, [r0], {252}	; 0xfc
 800cc9c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cca0:	03800300 	orreq	r0, r0, #0, 6
 800cca4:	01c00180 	biceq	r0, r0, r0, lsl #3
 800cca8:	00e000c0 	rsceq	r0, r0, r0, asr #1
 800ccac:	00600060 	rsbeq	r0, r0, r0, rrx
 800ccb0:	00300070 	eorseq	r0, r0, r0, ror r0
 800ccb4:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800ccc4:	03e00000 	mvneq	r0, #0
 800ccc8:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800cccc:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800ccd0:	06380c18 			; <UNDEFINED> instruction: 0x06380c18
 800ccd4:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800ccd8:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800ccdc:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cce0:	0c38180c 	ldceq	8, cr1, [r8], #-48	; 0xffffffd0
 800cce4:	03e00ff8 	mvneq	r0, #248, 30	; 0x3e0
	...
 800ccf4:	03e00000 	mvneq	r0, #0
 800ccf8:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800ccfc:	180c0c1c 	stmdane	ip, {r2, r3, r4, sl, fp}
 800cd00:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cd04:	1e381c1c 	mrcne	12, 1, r1, cr8, cr12, {0}
 800cd08:	19e01bf8 	stmibne	r0!, {r3, r4, r5, r6, r7, r8, r9, fp, ip}^
 800cd0c:	0c001800 	stceq	8, cr1, [r0], {-0}
 800cd10:	0e1c0c00 	cdpeq	12, 1, cr0, cr12, cr0, {0}
 800cd14:	01f007f8 	ldrsheq	r0, [r0, #120]!	; 0x78
	...
 800cd30:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cd44:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cd60:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cd74:	01800180 	orreq	r0, r0, r0, lsl #3
 800cd78:	01000100 	mrseq	r0, (UNDEF: 16)
 800cd7c:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800cd94:	1c001000 	stcne	0, cr1, [r0], {-0}
 800cd98:	03e00f80 	mvneq	r0, #128, 30	; 0x200
 800cd9c:	001800f8 	ldrsheq	r0, [r8], -r8
 800cda0:	03e000f8 	mvneq	r0, #248	; 0xf8
 800cda4:	1c000f80 	stcne	15, cr0, [r0], {128}	; 0x80
 800cda8:	00001000 	andeq	r1, r0, r0
	...
 800cdc4:	00001ff8 	strdeq	r1, [r0], -r8
 800cdc8:	00000000 	andeq	r0, r0, r0
 800cdcc:	00001ff8 	strdeq	r1, [r0], -r8
	...
 800cdf4:	00380008 	eorseq	r0, r8, r8
 800cdf8:	07c001f0 			; <UNDEFINED> instruction: 0x07c001f0
 800cdfc:	18001f00 	stmdane	r0, {r8, r9, sl, fp, ip}
 800ce00:	07c01f00 	strbeq	r1, [r0, r0, lsl #30]
 800ce04:	003801f0 	ldrshteq	r0, [r8], -r0
 800ce08:	00000008 	andeq	r0, r0, r8
	...
 800ce14:	03e00000 	mvneq	r0, #0
 800ce18:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800ce1c:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800ce20:	0c001800 	stceq	8, cr1, [r0], {-0}
 800ce24:	03000600 	movweq	r0, #1536	; 0x600
 800ce28:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800ce2c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ce30:	00000000 	andeq	r0, r0, r0
 800ce34:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800ce48:	181807e0 	ldmdane	r8, {r5, r6, r7, r8, r9, sl}
 800ce4c:	29c22004 	stmibcs	r2, {r2, sp}^
 800ce50:	44114a22 	ldrmi	r4, [r1], #-2594	; 0xa22
 800ce54:	44094409 	strmi	r4, [r9], #-1033	; 0x409
 800ce58:	22094409 	andcs	r4, r9, #150994944	; 0x9000000
 800ce5c:	0ce21311 	stcleq	3, cr1, [r2], #68	; 0x44
 800ce60:	20044002 	andcs	r4, r4, r2
 800ce64:	07e01818 			; <UNDEFINED> instruction: 0x07e01818
	...
 800ce74:	03800000 	orreq	r0, r0, #0
 800ce78:	06c00380 	strbeq	r0, [r0], r0, lsl #7
 800ce7c:	06c006c0 	strbeq	r0, [r0], r0, asr #13
 800ce80:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800ce84:	18301830 	ldmdane	r0!, {r4, r5, fp, ip}
 800ce88:	3ff81830 	svccc	0x00f81830
 800ce8c:	701c3ff8 			; <UNDEFINED> instruction: 0x701c3ff8
 800ce90:	600c600c 	andvs	r6, ip, ip
 800ce94:	c006c006 	andgt	ip, r6, r6
	...
 800cea4:	03fc0000 	mvnseq	r0, #0
 800cea8:	0c0c0ffc 	stceq	15, cr0, [ip], {252}	; 0xfc
 800ceac:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800ceb0:	0c0c180c 	stceq	8, cr1, [ip], {12}
 800ceb4:	0ffc07fc 	svceq	0x00fc07fc
 800ceb8:	300c180c 	andcc	r1, ip, ip, lsl #16
 800cebc:	300c300c 	andcc	r3, ip, ip
 800cec0:	180c300c 	stmdane	ip, {r2, r3, ip, sp}
 800cec4:	07fc1ffc 			; <UNDEFINED> instruction: 0x07fc1ffc
	...
 800ced4:	07c00000 	strbeq	r0, [r0, r0]
 800ced8:	38381ff0 	ldmdacc	r8!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800cedc:	700c301c 	andvc	r3, ip, ip, lsl r0
 800cee0:	00066006 	andeq	r6, r6, r6
 800cee4:	00060006 	andeq	r0, r6, r6
 800cee8:	00060006 	andeq	r0, r6, r6
 800ceec:	60060006 	andvs	r0, r6, r6
 800cef0:	301c700c 	andscc	r7, ip, ip
 800cef4:	07e01ff0 			; <UNDEFINED> instruction: 0x07e01ff0
	...
 800cf04:	03fe0000 	mvnseq	r0, #0
 800cf08:	0e060ffe 	mcreq	15, 0, r0, cr6, cr14, {7}
 800cf0c:	18061806 	stmdane	r6, {r1, r2, fp, ip}
 800cf10:	30063006 	andcc	r3, r6, r6
 800cf14:	30063006 	andcc	r3, r6, r6
 800cf18:	30063006 	andcc	r3, r6, r6
 800cf1c:	18063006 	stmdane	r6, {r1, r2, ip, sp}
 800cf20:	0e061806 	cdpeq	8, 0, cr1, cr6, cr6, {0}
 800cf24:	03fe0ffe 	mvnseq	r0, #1016	; 0x3f8
	...
 800cf34:	3ffc0000 	svccc	0x00fc0000
 800cf38:	000c3ffc 	strdeq	r3, [ip], -ip
 800cf3c:	000c000c 	andeq	r0, ip, ip
 800cf40:	000c000c 	andeq	r0, ip, ip
 800cf44:	1ffc1ffc 	svcne	0x00fc1ffc
 800cf48:	000c000c 	andeq	r0, ip, ip
 800cf4c:	000c000c 	andeq	r0, ip, ip
 800cf50:	000c000c 	andeq	r0, ip, ip
 800cf54:	3ffc3ffc 	svccc	0x00fc3ffc
	...
 800cf64:	3ff80000 	svccc	0x00f80000
 800cf68:	00183ff8 			; <UNDEFINED> instruction: 0x00183ff8
 800cf6c:	00180018 	andseq	r0, r8, r8, lsl r0
 800cf70:	00180018 	andseq	r0, r8, r8, lsl r0
 800cf74:	1ff81ff8 	svcne	0x00f81ff8
 800cf78:	00180018 	andseq	r0, r8, r8, lsl r0
 800cf7c:	00180018 	andseq	r0, r8, r8, lsl r0
 800cf80:	00180018 	andseq	r0, r8, r8, lsl r0
 800cf84:	00180018 	andseq	r0, r8, r8, lsl r0
	...
 800cf94:	0fe00000 	svceq	0x00e00000
 800cf98:	783c3ff8 	ldmdavc	ip!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 800cf9c:	e006600e 	and	r6, r6, lr
 800cfa0:	0003c007 	andeq	ip, r3, r7
 800cfa4:	fe030003 	cdp2	0, 0, cr0, cr3, cr3, {0}
 800cfa8:	c003fe03 	andgt	pc, r3, r3, lsl #28
 800cfac:	c006c007 	andgt	ip, r6, r7
 800cfb0:	f03cc00e 			; <UNDEFINED> instruction: 0xf03cc00e
 800cfb4:	0fe03ff8 	svceq	0x00e03ff8
	...
 800cfc4:	300c0000 	andcc	r0, ip, r0
 800cfc8:	300c300c 	andcc	r3, ip, ip
 800cfcc:	300c300c 	andcc	r3, ip, ip
 800cfd0:	300c300c 	andcc	r3, ip, ip
 800cfd4:	3ffc3ffc 	svccc	0x00fc3ffc
 800cfd8:	300c300c 	andcc	r3, ip, ip
 800cfdc:	300c300c 	andcc	r3, ip, ip
 800cfe0:	300c300c 	andcc	r3, ip, ip
 800cfe4:	300c300c 	andcc	r3, ip, ip
	...
 800cff4:	01800000 	orreq	r0, r0, r0
 800cff8:	01800180 	orreq	r0, r0, r0, lsl #3
 800cffc:	01800180 	orreq	r0, r0, r0, lsl #3
 800d000:	01800180 	orreq	r0, r0, r0, lsl #3
 800d004:	01800180 	orreq	r0, r0, r0, lsl #3
 800d008:	01800180 	orreq	r0, r0, r0, lsl #3
 800d00c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d010:	01800180 	orreq	r0, r0, r0, lsl #3
 800d014:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d024:	06000000 	streq	r0, [r0], -r0
 800d028:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d02c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d030:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d034:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d038:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d03c:	06180600 	ldreq	r0, [r8], -r0, lsl #12
 800d040:	07380618 			; <UNDEFINED> instruction: 0x07380618
 800d044:	01e003f0 	strdeq	r0, [r0, #48]!	; 0x30
	...
 800d054:	30060000 	andcc	r0, r6, r0
 800d058:	0c061806 	stceq	8, cr1, [r6], {6}
 800d05c:	03060606 	movweq	r0, #26118	; 0x6606
 800d060:	00c60186 	sbceq	r0, r6, r6, lsl #3
 800d064:	00760066 	rsbseq	r0, r6, r6, rrx
 800d068:	018e00de 	ldrdeq	r0, [lr, lr]
 800d06c:	06060306 	streq	r0, [r6], -r6, lsl #6
 800d070:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800d074:	60063006 	andvs	r3, r6, r6
	...
 800d084:	00180000 	andseq	r0, r8, r0
 800d088:	00180018 	andseq	r0, r8, r8, lsl r0
 800d08c:	00180018 	andseq	r0, r8, r8, lsl r0
 800d090:	00180018 	andseq	r0, r8, r8, lsl r0
 800d094:	00180018 	andseq	r0, r8, r8, lsl r0
 800d098:	00180018 	andseq	r0, r8, r8, lsl r0
 800d09c:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0a0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0a4:	1ff81ff8 	svcne	0x00f81ff8
	...
 800d0b4:	e00e0000 	and	r0, lr, r0
 800d0b8:	f01ef01e 			; <UNDEFINED> instruction: 0xf01ef01e
 800d0bc:	d836f01e 	ldmdale	r6!, {r1, r2, r3, r4, ip, sp, lr, pc}
 800d0c0:	d836d836 	ldmdale	r6!, {r1, r2, r4, r5, fp, ip, lr, pc}
 800d0c4:	cc66d836 	stclgt	8, cr13, [r6], #-216	; 0xffffff28
 800d0c8:	cc66cc66 	stclgt	12, cr12, [r6], #-408	; 0xfffffe68
 800d0cc:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800d0d0:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800d0d4:	c386c386 	orrgt	ip, r6, #402653186	; 0x18000002
	...
 800d0e4:	300c0000 	andcc	r0, ip, r0
 800d0e8:	303c301c 	eorscc	r3, ip, ip, lsl r0
 800d0ec:	306c303c 	rsbcc	r3, ip, ip, lsr r0
 800d0f0:	30cc306c 	sbccc	r3, ip, ip, rrx
 800d0f4:	318c30cc 	orrcc	r3, ip, ip, asr #1
 800d0f8:	330c330c 	movwcc	r3, #49932	; 0xc30c
 800d0fc:	360c360c 	strcc	r3, [ip], -ip, lsl #12
 800d100:	3c0c3c0c 	stccc	12, cr3, [ip], {12}
 800d104:	300c380c 	andcc	r3, ip, ip, lsl #16
	...
 800d114:	07e00000 	strbeq	r0, [r0, r0]!
 800d118:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d11c:	6006700e 	andvs	r7, r6, lr
 800d120:	c003c003 	andgt	ip, r3, r3
 800d124:	c003c003 	andgt	ip, r3, r3
 800d128:	c003c003 	andgt	ip, r3, r3
 800d12c:	6006c003 	andvs	ip, r6, r3
 800d130:	381c700e 	ldmdacc	ip, {r1, r2, r3, ip, sp, lr}
 800d134:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800d144:	0ffc0000 	svceq	0x00fc0000
 800d148:	380c1ffc 	stmdacc	ip, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d14c:	300c300c 	andcc	r3, ip, ip
 800d150:	300c300c 	andcc	r3, ip, ip
 800d154:	1ffc180c 	svcne	0x00fc180c
 800d158:	000c07fc 	strdeq	r0, [ip], -ip
 800d15c:	000c000c 	andeq	r0, ip, ip
 800d160:	000c000c 	andeq	r0, ip, ip
 800d164:	000c000c 	andeq	r0, ip, ip
	...
 800d174:	07e00000 	strbeq	r0, [r0, r0]!
 800d178:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d17c:	6006700e 	andvs	r7, r6, lr
 800d180:	c003e003 	andgt	lr, r3, r3
 800d184:	c003c003 	andgt	ip, r3, r3
 800d188:	c003c003 	andgt	ip, r3, r3
 800d18c:	6306e007 	movwvs	lr, #24583	; 0x6007
 800d190:	3c1c3f0e 	ldccc	15, cr3, [ip], {14}
 800d194:	f7e03ff8 			; <UNDEFINED> instruction: 0xf7e03ff8
 800d198:	0000c000 	andeq	ip, r0, r0
	...
 800d1a4:	0ffe0000 	svceq	0x00fe0000
 800d1a8:	38061ffe 	stmdacc	r6, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d1ac:	30063006 	andcc	r3, r6, r6
 800d1b0:	38063006 	stmdacc	r6, {r1, r2, ip, sp}
 800d1b4:	07fe1ffe 			; <UNDEFINED> instruction: 0x07fe1ffe
 800d1b8:	06060306 	streq	r0, [r6], -r6, lsl #6
 800d1bc:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800d1c0:	30061806 	andcc	r1, r6, r6, lsl #16
 800d1c4:	60063006 	andvs	r3, r6, r6
	...
 800d1d4:	03e00000 	mvneq	r0, #0
 800d1d8:	0c1c0ff8 	ldceq	15, cr0, [ip], {248}	; 0xf8
 800d1dc:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800d1e0:	001c000c 	andseq	r0, ip, ip
 800d1e4:	0fe003f8 	svceq	0x00e003f8
 800d1e8:	38001e00 	stmdacc	r0, {r9, sl, fp, ip}
 800d1ec:	30063006 	andcc	r3, r6, r6
 800d1f0:	1c1c300e 	ldcne	0, cr3, [ip], {14}
 800d1f4:	07e00ff8 			; <UNDEFINED> instruction: 0x07e00ff8
	...
 800d204:	7ffe0000 	svcvc	0x00fe0000
 800d208:	01807ffe 	strdeq	r7, [r0, lr]
 800d20c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d210:	01800180 	orreq	r0, r0, r0, lsl #3
 800d214:	01800180 	orreq	r0, r0, r0, lsl #3
 800d218:	01800180 	orreq	r0, r0, r0, lsl #3
 800d21c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d220:	01800180 	orreq	r0, r0, r0, lsl #3
 800d224:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d234:	300c0000 	andcc	r0, ip, r0
 800d238:	300c300c 	andcc	r3, ip, ip
 800d23c:	300c300c 	andcc	r3, ip, ip
 800d240:	300c300c 	andcc	r3, ip, ip
 800d244:	300c300c 	andcc	r3, ip, ip
 800d248:	300c300c 	andcc	r3, ip, ip
 800d24c:	300c300c 	andcc	r3, ip, ip
 800d250:	1818300c 	ldmdane	r8, {r2, r3, ip, sp}
 800d254:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800d264:	60030000 	andvs	r0, r3, r0
 800d268:	30063006 	andcc	r3, r6, r6
 800d26c:	180c3006 	stmdane	ip, {r1, r2, ip, sp}
 800d270:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800d274:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800d278:	06300e38 			; <UNDEFINED> instruction: 0x06300e38
 800d27c:	07700630 			; <UNDEFINED> instruction: 0x07700630
 800d280:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d284:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800d294:	60030000 	andvs	r0, r3, r0
 800d298:	61c361c3 	bicvs	r6, r3, r3, asr #3
 800d29c:	336661c3 	cmncc	r6, #-1073741776	; 0xc0000030
 800d2a0:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800d2a4:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800d2a8:	1b6c3366 	blne	9b1a048 <_siccmram+0x1b0a904>
 800d2ac:	1b6c1b6c 	blne	9b14064 <_siccmram+0x1b04920>
 800d2b0:	1e3c1a2c 	vaddne.f32	s2, s24, s25
 800d2b4:	0e380e38 	mrceq	14, 1, r0, cr8, cr8, {1}
	...
 800d2c4:	e00f0000 	and	r0, pc, r0
 800d2c8:	3018700c 	andscc	r7, r8, ip
 800d2cc:	0c701830 	ldcleq	8, cr1, [r0], #-192	; 0xffffff40
 800d2d0:	07c00e60 	strbeq	r0, [r0, r0, ror #28]
 800d2d4:	03800380 	orreq	r0, r0, #128, 6
 800d2d8:	06e003c0 	strbteq	r0, [r0], r0, asr #7
 800d2dc:	1c300c70 	ldcne	12, cr0, [r0], #-448	; 0xfffffe40
 800d2e0:	300c1818 	andcc	r1, ip, r8, lsl r8
 800d2e4:	e007600e 	and	r6, r7, lr
	...
 800d2f4:	c0030000 	andgt	r0, r3, r0
 800d2f8:	300c6006 	andcc	r6, ip, r6
 800d2fc:	1838381c 	ldmdane	r8!, {r2, r3, r4, fp, ip, sp}
 800d300:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800d304:	03c007e0 	biceq	r0, r0, #224, 14	; 0x3800000
 800d308:	01800180 	orreq	r0, r0, r0, lsl #3
 800d30c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d310:	01800180 	orreq	r0, r0, r0, lsl #3
 800d314:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d324:	7ffc0000 	svcvc	0x00fc0000
 800d328:	60007ffc 	strdvs	r7, [r0], -ip
 800d32c:	18003000 	stmdane	r0, {ip, sp}
 800d330:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800d334:	01800300 	orreq	r0, r0, r0, lsl #6
 800d338:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800d33c:	00180030 	andseq	r0, r8, r0, lsr r0
 800d340:	0006000c 	andeq	r0, r6, ip
 800d344:	7ffe7ffe 	svcvc	0x00fe7ffe
	...
 800d354:	03e00000 	mvneq	r0, #0
 800d358:	006003e0 	rsbeq	r0, r0, r0, ror #7
 800d35c:	00600060 	rsbeq	r0, r0, r0, rrx
 800d360:	00600060 	rsbeq	r0, r0, r0, rrx
 800d364:	00600060 	rsbeq	r0, r0, r0, rrx
 800d368:	00600060 	rsbeq	r0, r0, r0, rrx
 800d36c:	00600060 	rsbeq	r0, r0, r0, rrx
 800d370:	00600060 	rsbeq	r0, r0, r0, rrx
 800d374:	00600060 	rsbeq	r0, r0, r0, rrx
 800d378:	00600060 	rsbeq	r0, r0, r0, rrx
 800d37c:	03e00060 	mvneq	r0, #96	; 0x60
 800d380:	000003e0 	andeq	r0, r0, r0, ror #7
 800d384:	00300000 	eorseq	r0, r0, r0
 800d388:	00600030 	rsbeq	r0, r0, r0, lsr r0
 800d38c:	00600060 	rsbeq	r0, r0, r0, rrx
 800d390:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d394:	01c000c0 	biceq	r0, r0, r0, asr #1
 800d398:	01800180 	orreq	r0, r0, r0, lsl #3
 800d39c:	03000180 	movweq	r0, #384	; 0x180
 800d3a0:	03000300 	movweq	r0, #768	; 0x300
 800d3a4:	06000600 	streq	r0, [r0], -r0, lsl #12
	...
 800d3b4:	03e00000 	mvneq	r0, #0
 800d3b8:	030003e0 	movweq	r0, #992	; 0x3e0
 800d3bc:	03000300 	movweq	r0, #768	; 0x300
 800d3c0:	03000300 	movweq	r0, #768	; 0x300
 800d3c4:	03000300 	movweq	r0, #768	; 0x300
 800d3c8:	03000300 	movweq	r0, #768	; 0x300
 800d3cc:	03000300 	movweq	r0, #768	; 0x300
 800d3d0:	03000300 	movweq	r0, #768	; 0x300
 800d3d4:	03000300 	movweq	r0, #768	; 0x300
 800d3d8:	03000300 	movweq	r0, #768	; 0x300
 800d3dc:	03e00300 	mvneq	r0, #0, 6
 800d3e0:	000003e0 	andeq	r0, r0, r0, ror #7
 800d3e4:	00000000 	andeq	r0, r0, r0
 800d3e8:	01c001c0 	biceq	r0, r0, r0, asr #3
 800d3ec:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d3f0:	06300360 	ldrteq	r0, [r0], -r0, ror #6
 800d3f4:	0c180630 	ldceq	6, cr0, [r8], {48}	; 0x30
 800d3f8:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 800d434:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800d438:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
 800d444:	000c0000 	andeq	r0, ip, r0
 800d448:	000c000c 	andeq	r0, ip, ip
 800d44c:	000c000c 	andeq	r0, ip, ip
 800d450:	0000000c 	andeq	r0, r0, ip
	...
 800d480:	07f803f0 			; <UNDEFINED> instruction: 0x07f803f0
 800d484:	0c0c0c1c 	stceq	12, cr0, [ip], {28}
 800d488:	0ff00f00 	svceq	0x00f00f00
 800d48c:	0c0c0cf8 	stceq	12, cr0, [ip], {248}	; 0xf8
 800d490:	0f1c0c0c 	svceq	0x001c0c0c
 800d494:	18f00ff8 	ldmne	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}^
	...
 800d4a4:	00180000 	andseq	r0, r8, r0
 800d4a8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d4ac:	00180018 	andseq	r0, r8, r8, lsl r0
 800d4b0:	0ff803d8 	svceq	0x00f803d8
 800d4b4:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800d4b8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d4bc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d4c0:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800d4c4:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
	...
 800d4e0:	07f003c0 	ldrbeq	r0, [r0, r0, asr #7]!
 800d4e4:	0c180e30 	ldceq	14, cr0, [r8], {48}	; 0x30
 800d4e8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d4ec:	00180018 	andseq	r0, r8, r8, lsl r0
 800d4f0:	0e300c18 	mrceq	12, 1, r0, cr0, cr8, {0}
 800d4f4:	03c007f0 	biceq	r0, r0, #240, 14	; 0x3c00000
	...
 800d504:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800d508:	18001800 	stmdane	r0, {fp, ip}
 800d50c:	18001800 	stmdane	r0, {fp, ip}
 800d510:	1ff01bc0 	svcne	0x00f01bc0
 800d514:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800d518:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d51c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d520:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800d524:	1bc01ff0 	blne	70154ec <_Min_Stack_Size+0x70150ec>
	...
 800d540:	0ff003c0 	svceq	0x00f003c0
 800d544:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800d548:	1ff81ff8 	svcne	0x00f81ff8
 800d54c:	00180018 	andseq	r0, r8, r8, lsl r0
 800d550:	1c301838 	ldcne	8, cr1, [r0], #-224	; 0xffffff20
 800d554:	07c00ff0 			; <UNDEFINED> instruction: 0x07c00ff0
	...
 800d564:	0f800000 	svceq	0x00800000
 800d568:	00c00fc0 	sbceq	r0, r0, r0, asr #31
 800d56c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d570:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800d574:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d578:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d57c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d580:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d584:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d5a0:	0ff80de0 	svceq	0x00f80de0
 800d5a4:	0c0c0e18 	stceq	14, cr0, [ip], {24}
 800d5a8:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800d5ac:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800d5b0:	0e180c0c 	cdpeq	12, 1, cr0, cr8, cr12, {0}
 800d5b4:	0de00ff8 	stcleq	15, cr0, [r0, #992]!	; 0x3e0
 800d5b8:	0c0c0c00 	stceq	12, cr0, [ip], {-0}
 800d5bc:	07f8061c 			; <UNDEFINED> instruction: 0x07f8061c
 800d5c0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800d5c4:	00180000 	andseq	r0, r8, r0
 800d5c8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d5cc:	00180018 	andseq	r0, r8, r8, lsl r0
 800d5d0:	0ff807d8 	svceq	0x00f807d8
 800d5d4:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800d5d8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d5dc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d5e0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d5e4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800d5f4:	00c00000 	sbceq	r0, r0, r0
 800d5f8:	000000c0 	andeq	r0, r0, r0, asr #1
 800d5fc:	00000000 	andeq	r0, r0, r0
 800d600:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d604:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d608:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d60c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d610:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d614:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d624:	00c00000 	sbceq	r0, r0, r0
 800d628:	000000c0 	andeq	r0, r0, r0, asr #1
 800d62c:	00000000 	andeq	r0, r0, r0
 800d630:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d634:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d638:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d63c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d640:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d644:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d648:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d64c:	00f800c0 	rscseq	r0, r8, r0, asr #1
 800d650:	00000078 	andeq	r0, r0, r8, ror r0
 800d654:	000c0000 	andeq	r0, ip, r0
 800d658:	000c000c 	andeq	r0, ip, ip
 800d65c:	000c000c 	andeq	r0, ip, ip
 800d660:	060c0c0c 	streq	r0, [ip], -ip, lsl #24
 800d664:	018c030c 	orreq	r0, ip, ip, lsl #6
 800d668:	006c00cc 	rsbeq	r0, ip, ip, asr #1
 800d66c:	019c00fc 	ldrsheq	r0, [ip, ip]
 800d670:	030c038c 	movweq	r0, #50060	; 0xc38c
 800d674:	0c0c060c 	stceq	6, cr0, [ip], {12}
	...
 800d684:	00c00000 	sbceq	r0, r0, r0
 800d688:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d68c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d690:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d694:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d698:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d69c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6a0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6a4:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d6c0:	7eff3c7c 	mrcvc	12, 7, r3, cr15, cr12, {3}
 800d6c4:	c183e3c7 	orrgt	lr, r3, r7, asr #7
 800d6c8:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d6cc:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d6d0:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d6d4:	c183c183 	orrgt	ip, r3, r3, lsl #3
	...
 800d6f0:	0ff80798 	svceq	0x00f80798
 800d6f4:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800d6f8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d6fc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d700:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d704:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800d720:	0ff003c0 	svceq	0x00f003c0
 800d724:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800d728:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d72c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d730:	0c301818 	ldceq	8, cr1, [r0], #-96	; 0xffffffa0
 800d734:	03c00ff0 	biceq	r0, r0, #240, 30	; 0x3c0
	...
 800d750:	0ff803d8 	svceq	0x00f803d8
 800d754:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800d758:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d75c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d760:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800d764:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
 800d768:	00180018 	andseq	r0, r8, r8, lsl r0
 800d76c:	00180018 	andseq	r0, r8, r8, lsl r0
 800d770:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 800d780:	1ff01bc0 	svcne	0x00f01bc0
 800d784:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800d788:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d78c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d790:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800d794:	1bc01ff0 	blne	701575c <_Min_Stack_Size+0x701535c>
 800d798:	18001800 	stmdane	r0, {fp, ip}
 800d79c:	18001800 	stmdane	r0, {fp, ip}
 800d7a0:	00001800 	andeq	r1, r0, r0, lsl #16
	...
 800d7b0:	03f007b0 	mvnseq	r0, #176, 14	; 0x2c00000
 800d7b4:	00300070 	eorseq	r0, r0, r0, ror r0
 800d7b8:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d7bc:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d7c0:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d7c4:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800d7e0:	03f003e0 	mvnseq	r0, #224, 6	; 0x80000003
 800d7e4:	0c180e38 	ldceq	14, cr0, [r8], {56}	; 0x38
 800d7e8:	03f00038 	mvnseq	r0, #56	; 0x38
 800d7ec:	0c0007c0 	stceq	7, cr0, [r0], {192}	; 0xc0
 800d7f0:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800d7f4:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800d808:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800d80c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d810:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800d814:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d818:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d81c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d820:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d824:	078007c0 	streq	r0, [r0, r0, asr #15]
	...
 800d840:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d844:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d848:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d84c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d850:	1c381818 	ldcne	8, cr1, [r8], #-96	; 0xffffffa0
 800d854:	19e01ff0 	stmibne	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}^
	...
 800d870:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800d874:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800d878:	06300630 			; <UNDEFINED> instruction: 0x06300630
 800d87c:	03600630 	cmneq	r0, #48, 12	; 0x3000000
 800d880:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d884:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800d8a0:	41c141c1 	bicmi	r4, r1, r1, asr #3
 800d8a4:	636361c3 	cmnvs	r3, #-1073741776	; 0xc0000030
 800d8a8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800d8ac:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800d8b0:	1c1c3636 	ldcne	6, cr3, [ip], {54}	; 0x36
 800d8b4:	1c1c1c1c 	ldcne	12, cr1, [ip], {28}
	...
 800d8d0:	1c38381c 	ldcne	8, cr3, [r8], #-112	; 0xffffff90
 800d8d4:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800d8d8:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d8dc:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d8e0:	0c300660 	ldceq	6, cr0, [r0], #-384	; 0xfffffe80
 800d8e4:	381c1c38 	ldmdacc	ip, {r3, r4, r5, sl, fp, ip}
	...
 800d900:	18303018 	ldmdane	r0!, {r3, r4, ip, sp}
 800d904:	18701830 	ldmdane	r0!, {r4, r5, fp, ip}^
 800d908:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800d90c:	06c00ce0 	strbeq	r0, [r0], r0, ror #25
 800d910:	038006c0 	orreq	r0, r0, #192, 12	; 0xc000000
 800d914:	03800380 	orreq	r0, r0, #128, 6
 800d918:	01800180 	orreq	r0, r0, r0, lsl #3
 800d91c:	00f001c0 	rscseq	r0, r0, r0, asr #3
 800d920:	00000070 	andeq	r0, r0, r0, ror r0
	...
 800d930:	1ffc1ffc 	svcne	0x00fc1ffc
 800d934:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800d938:	01800300 	orreq	r0, r0, r0, lsl #6
 800d93c:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800d940:	00180030 	andseq	r0, r8, r0, lsr r0
 800d944:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800d954:	03000000 	movweq	r0, #0
 800d958:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800d95c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d960:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d964:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800d968:	00300060 	eorseq	r0, r0, r0, rrx
 800d96c:	00400060 	subeq	r0, r0, r0, rrx
 800d970:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d974:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d978:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d97c:	03000180 	movweq	r0, #384	; 0x180
 800d980:	00000000 	andeq	r0, r0, r0
 800d984:	01800000 	orreq	r0, r0, r0
 800d988:	01800180 	orreq	r0, r0, r0, lsl #3
 800d98c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d990:	01800180 	orreq	r0, r0, r0, lsl #3
 800d994:	01800180 	orreq	r0, r0, r0, lsl #3
 800d998:	01800180 	orreq	r0, r0, r0, lsl #3
 800d99c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9a0:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9a4:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9a8:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9ac:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9b0:	00000180 	andeq	r0, r0, r0, lsl #3
 800d9b4:	00600000 	rsbeq	r0, r0, r0
 800d9b8:	01c000c0 	biceq	r0, r0, r0, asr #1
 800d9bc:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9c0:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9c4:	03000180 	movweq	r0, #384	; 0x180
 800d9c8:	06000300 	streq	r0, [r0], -r0, lsl #6
 800d9cc:	01000300 	mrseq	r0, LR_irq
 800d9d0:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9d4:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9d8:	01800180 	orreq	r0, r0, r0, lsl #3
 800d9dc:	006000c0 	rsbeq	r0, r0, r0, asr #1
	...
 800d9f4:	1ff810f0 	svcne	0x00f810f0
 800d9f8:	00000f08 	andeq	r0, r0, r8, lsl #30
	...

0800da14 <ASCII12x12_Table>:
	...
 800da2c:	20000000 	andcs	r0, r0, r0
 800da30:	20002000 	andcs	r2, r0, r0
 800da34:	20002000 	andcs	r2, r0, r0
 800da38:	20002000 	andcs	r2, r0, r0
 800da3c:	20000000 	andcs	r0, r0, r0
 800da40:	00000000 	andeq	r0, r0, r0
 800da44:	50000000 	andpl	r0, r0, r0
 800da48:	50005000 	andpl	r5, r0, r0
	...
 800da5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 800da60:	12000900 	andne	r0, r0, #0, 18
 800da64:	12007f00 	andne	r7, r0, #0, 30
 800da68:	12007f00 	andne	r7, r0, #0, 30
 800da6c:	24002400 	strcs	r2, [r0], #-1024	; 0x400
 800da70:	00000000 	andeq	r0, r0, r0
 800da74:	38001000 	stmdacc	r0, {ip}
 800da78:	50005400 	andpl	r5, r0, r0, lsl #8
 800da7c:	38005000 	stmdacc	r0, {ip, lr}
 800da80:	54001400 	strpl	r1, [r0], #-1024	; 0x400
 800da84:	38005400 	stmdacc	r0, {sl, ip, lr}
 800da88:	00001000 	andeq	r1, r0, r0
 800da8c:	30800000 	addcc	r0, r0, r0
 800da90:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800da94:	32c04a00 	sbccc	r4, r0, #0, 20
 800da98:	09200520 	stmdbeq	r0!, {r5, r8, sl}
 800da9c:	10c00920 	sbcne	r0, r0, r0, lsr #18
 800daa0:	00000000 	andeq	r0, r0, r0
 800daa4:	0c000000 	stceq	0, cr0, [r0], {-0}
 800daa8:	12001200 	andne	r1, r0, #0, 4
 800daac:	18001400 	stmdane	r0, {sl, ip}
 800dab0:	23002500 	movwcs	r2, #1280	; 0x500
 800dab4:	1d802300 	stcne	3, cr2, [r0]
 800dab8:	00000000 	andeq	r0, r0, r0
 800dabc:	40000000 	andmi	r0, r0, r0
 800dac0:	40004000 	andmi	r4, r0, r0
	...
 800dad4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dad8:	10001000 	andne	r1, r0, r0
 800dadc:	20002000 	andcs	r2, r0, r0
 800dae0:	20002000 	andcs	r2, r0, r0
 800dae4:	20002000 	andcs	r2, r0, r0
 800dae8:	10001000 	andne	r1, r0, r0
 800daec:	40000000 	andmi	r0, r0, r0
 800daf0:	20002000 	andcs	r2, r0, r0
 800daf4:	10001000 	andne	r1, r0, r0
 800daf8:	10001000 	andne	r1, r0, r0
 800dafc:	10001000 	andne	r1, r0, r0
 800db00:	20002000 	andcs	r2, r0, r0
 800db04:	20000000 	andcs	r0, r0, r0
 800db08:	20007000 	andcs	r7, r0, r0
 800db0c:	00005000 	andeq	r5, r0, r0
	...
 800db20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800db24:	7f000800 	svcvc	0x00000800
 800db28:	08000800 	stmdaeq	r0, {fp}
	...
 800db44:	20000000 	andcs	r0, r0, r0
 800db48:	40002000 	andmi	r2, r0, r0
	...
 800db58:	00007000 	andeq	r7, r0, r0
	...
 800db74:	20000000 	andcs	r0, r0, r0
 800db78:	00000000 	andeq	r0, r0, r0
 800db7c:	10000000 	andne	r0, r0, r0
 800db80:	10001000 	andne	r1, r0, r0
 800db84:	20002000 	andcs	r2, r0, r0
 800db88:	20002000 	andcs	r2, r0, r0
 800db8c:	40004000 	andmi	r4, r0, r0
 800db90:	00000000 	andeq	r0, r0, r0
 800db94:	10000000 	andne	r0, r0, r0
 800db98:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800db9c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dba0:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dba4:	10002800 	andne	r2, r0, r0, lsl #16
 800dba8:	00000000 	andeq	r0, r0, r0
 800dbac:	10000000 	andne	r0, r0, r0
 800dbb0:	50003000 	andpl	r3, r0, r0
 800dbb4:	10001000 	andne	r1, r0, r0
 800dbb8:	10001000 	andne	r1, r0, r0
 800dbbc:	10001000 	andne	r1, r0, r0
 800dbc0:	00000000 	andeq	r0, r0, r0
 800dbc4:	30000000 	andcc	r0, r0, r0
 800dbc8:	44004800 	strmi	r4, [r0], #-2048	; 0x800
 800dbcc:	08000400 	stmdaeq	r0, {sl}
 800dbd0:	20001000 	andcs	r1, r0, r0
 800dbd4:	7c004000 	stcvc	0, cr4, [r0], {-0}
 800dbd8:	00000000 	andeq	r0, r0, r0
 800dbdc:	30000000 	andcc	r0, r0, r0
 800dbe0:	04004800 	streq	r4, [r0], #-2048	; 0x800
 800dbe4:	10000800 	andne	r0, r0, r0, lsl #16
 800dbe8:	44000800 	strmi	r0, [r0], #-2048	; 0x800
 800dbec:	30004800 	andcc	r4, r0, r0, lsl #16
 800dbf0:	00000000 	andeq	r0, r0, r0
 800dbf4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dbf8:	18001800 	stmdane	r0, {fp, ip}
 800dbfc:	28002800 	stmdacs	r0, {fp, sp}
 800dc00:	7c004800 	stcvc	8, cr4, [r0], {-0}
 800dc04:	08000800 	stmdaeq	r0, {fp}
 800dc08:	00000000 	andeq	r0, r0, r0
 800dc0c:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dc10:	40002000 	andmi	r2, r0, r0
 800dc14:	48007000 	stmdami	r0, {ip, sp, lr}
 800dc18:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800dc1c:	30004800 	andcc	r4, r0, r0, lsl #16
 800dc20:	00000000 	andeq	r0, r0, r0
 800dc24:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800dc28:	40002400 	andmi	r2, r0, r0, lsl #8
 800dc2c:	68005000 	stmdavs	r0, {ip, lr}
 800dc30:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dc34:	10002800 	andne	r2, r0, r0, lsl #16
 800dc38:	00000000 	andeq	r0, r0, r0
 800dc3c:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800dc40:	08000400 	stmdaeq	r0, {sl}
 800dc44:	10001000 	andne	r1, r0, r0
 800dc48:	20001000 	andcs	r1, r0, r0
 800dc4c:	20002000 	andcs	r2, r0, r0
 800dc50:	00000000 	andeq	r0, r0, r0
 800dc54:	10000000 	andne	r0, r0, r0
 800dc58:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800dc5c:	10002800 	andne	r2, r0, r0, lsl #16
 800dc60:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800dc64:	10002800 	andne	r2, r0, r0, lsl #16
 800dc68:	00000000 	andeq	r0, r0, r0
 800dc6c:	10000000 	andne	r0, r0, r0
 800dc70:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800dc74:	2c004400 	cfstrscs	mvf4, [r0], {-0}
 800dc78:	04001400 	streq	r1, [r0], #-1024	; 0x400
 800dc7c:	30004800 	andcc	r4, r0, r0, lsl #16
	...
 800dc88:	20000000 	andcs	r0, r0, r0
	...
 800dc94:	20000000 	andcs	r0, r0, r0
	...
 800dca0:	20000000 	andcs	r0, r0, r0
	...
 800dcac:	20000000 	andcs	r0, r0, r0
 800dcb0:	40002000 	andmi	r2, r0, r0
 800dcb4:	00000000 	andeq	r0, r0, r0
 800dcb8:	08000400 	stmdaeq	r0, {sl}
 800dcbc:	40003000 	andmi	r3, r0, r0
 800dcc0:	08003000 	stmdaeq	r0, {ip, sp}
 800dcc4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
 800dcd0:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800dcd4:	00000000 	andeq	r0, r0, r0
 800dcd8:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
 800dce8:	20004000 	andcs	r4, r0, r0
 800dcec:	04001800 	streq	r1, [r0], #-2048	; 0x800
 800dcf0:	20001800 	andcs	r1, r0, r0, lsl #16
 800dcf4:	00004000 	andeq	r4, r0, r0
 800dcf8:	00000000 	andeq	r0, r0, r0
 800dcfc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800dd00:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800dd04:	08000400 	stmdaeq	r0, {sl}
 800dd08:	10001000 	andne	r1, r0, r0
 800dd0c:	10000000 	andne	r0, r0, r0
 800dd10:	00000000 	andeq	r0, r0, r0
 800dd14:	0f800000 	svceq	0x00800000
 800dd18:	2ea01040 	cdpcs	0, 10, cr1, cr0, cr0, {2}
 800dd1c:	512051a0 	teqpl	r0, r0, lsr #3
 800dd20:	51205120 	teqpl	r0, r0, lsr #2
 800dd24:	4dc05320 	stclmi	3, cr5, [r0, #128]	; 0x80
 800dd28:	10402020 	subne	r2, r0, r0, lsr #32
 800dd2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dd30:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800dd34:	22001400 	andcs	r1, r0, #0, 8
 800dd38:	22003e00 	andcs	r3, r0, #0, 28
 800dd3c:	41004100 	mrsmi	r4, (UNDEF: 16)
 800dd40:	00000000 	andeq	r0, r0, r0
 800dd44:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dd48:	22002200 	andcs	r2, r0, #0, 4
 800dd4c:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dd50:	22002200 	andcs	r2, r0, #0, 4
 800dd54:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dd58:	00000000 	andeq	r0, r0, r0
 800dd5c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800dd60:	21001100 	mrscs	r1, (UNDEF: 16)
 800dd64:	20002000 	andcs	r2, r0, r0
 800dd68:	21002000 	mrscs	r2, (UNDEF: 0)
 800dd6c:	0e001100 	adfeqs	f1, f0, f0
 800dd70:	00000000 	andeq	r0, r0, r0
 800dd74:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dd78:	21002200 	mrscs	r2, R8_usr
 800dd7c:	21002100 	mrscs	r2, (UNDEF: 16)
 800dd80:	21002100 	mrscs	r2, (UNDEF: 16)
 800dd84:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dd88:	00000000 	andeq	r0, r0, r0
 800dd8c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800dd90:	20002000 	andcs	r2, r0, r0
 800dd94:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800dd98:	20002000 	andcs	r2, r0, r0
 800dd9c:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800dda0:	00000000 	andeq	r0, r0, r0
 800dda4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800dda8:	20002000 	andcs	r2, r0, r0
 800ddac:	3c002000 	stccc	0, cr2, [r0], {-0}
 800ddb0:	20002000 	andcs	r2, r0, r0
 800ddb4:	20002000 	andcs	r2, r0, r0
 800ddb8:	00000000 	andeq	r0, r0, r0
 800ddbc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800ddc0:	21001100 	mrscs	r1, (UNDEF: 16)
 800ddc4:	27002000 	strcs	r2, [r0, -r0]
 800ddc8:	21002100 	mrscs	r2, (UNDEF: 16)
 800ddcc:	0e001100 	adfeqs	f1, f0, f0
 800ddd0:	00000000 	andeq	r0, r0, r0
 800ddd4:	21000000 	mrscs	r0, (UNDEF: 0)
 800ddd8:	21002100 	mrscs	r2, (UNDEF: 16)
 800dddc:	3f002100 	svccc	0x00002100
 800dde0:	21002100 	mrscs	r2, (UNDEF: 16)
 800dde4:	21002100 	mrscs	r2, (UNDEF: 16)
 800dde8:	00000000 	andeq	r0, r0, r0
 800ddec:	20000000 	andcs	r0, r0, r0
 800ddf0:	20002000 	andcs	r2, r0, r0
 800ddf4:	20002000 	andcs	r2, r0, r0
 800ddf8:	20002000 	andcs	r2, r0, r0
 800ddfc:	20002000 	andcs	r2, r0, r0
 800de00:	00000000 	andeq	r0, r0, r0
 800de04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800de08:	08000800 	stmdaeq	r0, {fp}
 800de0c:	08000800 	stmdaeq	r0, {fp}
 800de10:	48000800 	stmdami	r0, {fp}
 800de14:	30004800 	andcc	r4, r0, r0, lsl #16
 800de18:	00000000 	andeq	r0, r0, r0
 800de1c:	22000000 	andcs	r0, r0, #0
 800de20:	28002400 	stmdacs	r0, {sl, sp}
 800de24:	38002800 	stmdacc	r0, {fp, sp}
 800de28:	24002800 	strcs	r2, [r0], #-2048	; 0x800
 800de2c:	22002400 	andcs	r2, r0, #0, 8
 800de30:	00000000 	andeq	r0, r0, r0
 800de34:	20000000 	andcs	r0, r0, r0
 800de38:	20002000 	andcs	r2, r0, r0
 800de3c:	20002000 	andcs	r2, r0, r0
 800de40:	20002000 	andcs	r2, r0, r0
 800de44:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800de48:	00000000 	andeq	r0, r0, r0
 800de4c:	20800000 	addcs	r0, r0, r0
 800de50:	31803180 	orrcc	r3, r0, r0, lsl #3
 800de54:	2a803180 	bcs	601a45c <_Min_Stack_Size+0x601a05c>
 800de58:	2a802a80 	bcs	6018860 <_Min_Stack_Size+0x6018460>
 800de5c:	24802a80 	strcs	r2, [r0], #2688	; 0xa80
 800de60:	00000000 	andeq	r0, r0, r0
 800de64:	21000000 	mrscs	r0, (UNDEF: 0)
 800de68:	31003100 	mrscc	r3, (UNDEF: 16)
 800de6c:	29002900 	stmdbcs	r0, {r8, fp, sp}
 800de70:	23002500 	movwcs	r2, #1280	; 0x500
 800de74:	21002300 	mrscs	r2, LR_irq
 800de78:	00000000 	andeq	r0, r0, r0
 800de7c:	0c000000 	stceq	0, cr0, [r0], {-0}
 800de80:	21001200 	mrscs	r1, R8_usr
 800de84:	21002100 	mrscs	r2, (UNDEF: 16)
 800de88:	21002100 	mrscs	r2, (UNDEF: 16)
 800de8c:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800de90:	00000000 	andeq	r0, r0, r0
 800de94:	3c000000 	stccc	0, cr0, [r0], {-0}
 800de98:	22002200 	andcs	r2, r0, #0, 4
 800de9c:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dea0:	20002000 	andcs	r2, r0, r0
 800dea4:	20002000 	andcs	r2, r0, r0
 800dea8:	00000000 	andeq	r0, r0, r0
 800deac:	0c000000 	stceq	0, cr0, [r0], {-0}
 800deb0:	21001200 	mrscs	r1, R8_usr
 800deb4:	21002100 	mrscs	r2, (UNDEF: 16)
 800deb8:	21002100 	mrscs	r2, (UNDEF: 16)
 800debc:	0d001600 	stceq	6, cr1, [r0, #-0]
 800dec0:	00000100 	andeq	r0, r0, r0, lsl #2
 800dec4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800dec8:	21002100 	mrscs	r2, (UNDEF: 16)
 800decc:	3e002100 	adfccs	f2, f0, f0
 800ded0:	22002400 	andcs	r2, r0, #0, 8
 800ded4:	20802100 	addcs	r2, r0, r0, lsl #2
 800ded8:	00000000 	andeq	r0, r0, r0
 800dedc:	1c000000 	stcne	0, cr0, [r0], {-0}
 800dee0:	22002200 	andcs	r2, r0, #0, 4
 800dee4:	1c002000 	stcne	0, cr2, [r0], {-0}
 800dee8:	22000200 	andcs	r0, r0, #0, 4
 800deec:	1c002200 	sfmne	f2, 4, [r0], {-0}
 800def0:	00000000 	andeq	r0, r0, r0
 800def4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800def8:	08000800 	stmdaeq	r0, {fp}
 800defc:	08000800 	stmdaeq	r0, {fp}
 800df00:	08000800 	stmdaeq	r0, {fp}
 800df04:	08000800 	stmdaeq	r0, {fp}
 800df08:	00000000 	andeq	r0, r0, r0
 800df0c:	21000000 	mrscs	r0, (UNDEF: 0)
 800df10:	21002100 	mrscs	r2, (UNDEF: 16)
 800df14:	21002100 	mrscs	r2, (UNDEF: 16)
 800df18:	21002100 	mrscs	r2, (UNDEF: 16)
 800df1c:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800df20:	00000000 	andeq	r0, r0, r0
 800df24:	41000000 	mrsmi	r0, (UNDEF: 0)
 800df28:	22004100 	andcs	r4, r0, #0, 2
 800df2c:	22002200 	andcs	r2, r0, #0, 4
 800df30:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800df34:	08001400 	stmdaeq	r0, {sl, ip}
 800df38:	00000000 	andeq	r0, r0, r0
 800df3c:	44400000 	strbmi	r0, [r0], #-0
 800df40:	2a404a40 	bcs	9020848 <_siccmram+0x1011104>
 800df44:	2a802a80 	bcs	601894c <_Min_Stack_Size+0x601854c>
 800df48:	2a802a80 	bcs	6018950 <_Min_Stack_Size+0x6018550>
 800df4c:	11002a80 	smlabbne	r0, r0, sl, r2
 800df50:	00000000 	andeq	r0, r0, r0
 800df54:	41000000 	mrsmi	r0, (UNDEF: 0)
 800df58:	14002200 	strne	r2, [r0], #-512	; 0x200
 800df5c:	08001400 	stmdaeq	r0, {sl, ip}
 800df60:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800df64:	41002200 	mrsmi	r2, R8_usr
 800df68:	00000000 	andeq	r0, r0, r0
 800df6c:	41000000 	mrsmi	r0, (UNDEF: 0)
 800df70:	22002200 	andcs	r2, r0, #0, 4
 800df74:	08001400 	stmdaeq	r0, {sl, ip}
 800df78:	08000800 	stmdaeq	r0, {fp}
 800df7c:	08000800 	stmdaeq	r0, {fp}
 800df80:	00000000 	andeq	r0, r0, r0
 800df84:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800df88:	04000200 	streq	r0, [r0], #-512	; 0x200
 800df8c:	10000800 	andne	r0, r0, r0, lsl #16
 800df90:	20001000 	andcs	r1, r0, r0
 800df94:	7e004000 	cdpvc	0, 0, cr4, cr0, cr0, {0}
 800df98:	00000000 	andeq	r0, r0, r0
 800df9c:	30000000 	andcc	r0, r0, r0
 800dfa0:	20002000 	andcs	r2, r0, r0
 800dfa4:	20002000 	andcs	r2, r0, r0
 800dfa8:	20002000 	andcs	r2, r0, r0
 800dfac:	20002000 	andcs	r2, r0, r0
 800dfb0:	20002000 	andcs	r2, r0, r0
 800dfb4:	40000000 	andmi	r0, r0, r0
 800dfb8:	20004000 	andcs	r4, r0, r0
 800dfbc:	20002000 	andcs	r2, r0, r0
 800dfc0:	20002000 	andcs	r2, r0, r0
 800dfc4:	10001000 	andne	r1, r0, r0
 800dfc8:	00000000 	andeq	r0, r0, r0
 800dfcc:	60000000 	andvs	r0, r0, r0
 800dfd0:	20002000 	andcs	r2, r0, r0
 800dfd4:	20002000 	andcs	r2, r0, r0
 800dfd8:	20002000 	andcs	r2, r0, r0
 800dfdc:	20002000 	andcs	r2, r0, r0
 800dfe0:	20002000 	andcs	r2, r0, r0
 800dfe4:	10000000 	andne	r0, r0, r0
 800dfe8:	28002800 	stmdacs	r0, {fp, sp}
 800dfec:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800e010:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800e014:	20004000 	andcs	r4, r0, r0
	...
 800e030:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e034:	04004400 	streq	r4, [r0], #-1024	; 0x400
 800e038:	44003c00 	strmi	r3, [r0], #-3072	; 0xc00
 800e03c:	3c004400 	cfstrscc	mvf4, [r0], {-0}
 800e040:	00000000 	andeq	r0, r0, r0
 800e044:	40000000 	andmi	r0, r0, r0
 800e048:	58004000 	stmdapl	r0, {lr}
 800e04c:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e050:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e054:	58006400 	stmdapl	r0, {sl, sp, lr}
	...
 800e060:	30000000 	andcc	r0, r0, r0
 800e064:	40004800 	andmi	r4, r0, r0, lsl #16
 800e068:	40004000 	andmi	r4, r0, r0
 800e06c:	30004800 	andcc	r4, r0, r0, lsl #16
 800e070:	00000000 	andeq	r0, r0, r0
 800e074:	04000000 	streq	r0, [r0], #-0
 800e078:	34000400 	strcc	r0, [r0], #-1024	; 0x400
 800e07c:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e080:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e084:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800e090:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e094:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e098:	40007c00 	andmi	r7, r0, r0, lsl #24
 800e09c:	38004400 	stmdacc	r0, {sl, lr}
 800e0a0:	00000000 	andeq	r0, r0, r0
 800e0a4:	60000000 	andvs	r0, r0, r0
 800e0a8:	e0004000 	and	r4, r0, r0
 800e0ac:	40004000 	andmi	r4, r0, r0
 800e0b0:	40004000 	andmi	r4, r0, r0
 800e0b4:	40004000 	andmi	r4, r0, r0
	...
 800e0c0:	34000000 	strcc	r0, [r0], #-0
 800e0c4:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e0c8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e0cc:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800e0d0:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800e0d4:	40000000 	andmi	r0, r0, r0
 800e0d8:	58004000 	stmdapl	r0, {lr}
 800e0dc:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e0e0:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e0e4:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e0e8:	00000000 	andeq	r0, r0, r0
 800e0ec:	40000000 	andmi	r0, r0, r0
 800e0f0:	40000000 	andmi	r0, r0, r0
 800e0f4:	40004000 	andmi	r4, r0, r0
 800e0f8:	40004000 	andmi	r4, r0, r0
 800e0fc:	40004000 	andmi	r4, r0, r0
 800e100:	00000000 	andeq	r0, r0, r0
 800e104:	40000000 	andmi	r0, r0, r0
 800e108:	40000000 	andmi	r0, r0, r0
 800e10c:	40004000 	andmi	r4, r0, r0
 800e110:	40004000 	andmi	r4, r0, r0
 800e114:	40004000 	andmi	r4, r0, r0
 800e118:	40004000 	andmi	r4, r0, r0
 800e11c:	40000000 	andmi	r0, r0, r0
 800e120:	48004000 	stmdami	r0, {lr}
 800e124:	60005000 	andvs	r5, r0, r0
 800e128:	50005000 	andpl	r5, r0, r0
 800e12c:	48004800 	stmdami	r0, {fp, lr}
 800e130:	00000000 	andeq	r0, r0, r0
 800e134:	40000000 	andmi	r0, r0, r0
 800e138:	40004000 	andmi	r4, r0, r0
 800e13c:	40004000 	andmi	r4, r0, r0
 800e140:	40004000 	andmi	r4, r0, r0
 800e144:	40004000 	andmi	r4, r0, r0
	...
 800e150:	52000000 	andpl	r0, r0, #0
 800e154:	49006d00 	stmdbmi	r0, {r8, sl, fp, sp, lr}
 800e158:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800e15c:	49004900 	stmdbmi	r0, {r8, fp, lr}
	...
 800e168:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800e16c:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e170:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e174:	44004400 	strmi	r4, [r0], #-1024	; 0x400
	...
 800e180:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e184:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e188:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e18c:	38004400 	stmdacc	r0, {sl, lr}
	...
 800e198:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800e19c:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e1a0:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e1a4:	58006400 	stmdapl	r0, {sl, sp, lr}
 800e1a8:	40004000 	andmi	r4, r0, r0
 800e1ac:	00000000 	andeq	r0, r0, r0
 800e1b0:	34000000 	strcc	r0, [r0], #-0
 800e1b4:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e1b8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e1bc:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800e1c0:	04000400 	streq	r0, [r0], #-1024	; 0x400
 800e1c4:	00000000 	andeq	r0, r0, r0
 800e1c8:	50000000 	andpl	r0, r0, r0
 800e1cc:	40006000 	andmi	r6, r0, r0
 800e1d0:	40004000 	andmi	r4, r0, r0
 800e1d4:	40004000 	andmi	r4, r0, r0
	...
 800e1e0:	30000000 	andcc	r0, r0, r0
 800e1e4:	40004800 	andmi	r4, r0, r0, lsl #16
 800e1e8:	08003000 	stmdaeq	r0, {ip, sp}
 800e1ec:	30004800 	andcc	r4, r0, r0, lsl #16
 800e1f0:	00000000 	andeq	r0, r0, r0
 800e1f4:	40000000 	andmi	r0, r0, r0
 800e1f8:	e0004000 	and	r4, r0, r0
 800e1fc:	40004000 	andmi	r4, r0, r0
 800e200:	40004000 	andmi	r4, r0, r0
 800e204:	60004000 	andvs	r4, r0, r0
	...
 800e210:	44000000 	strmi	r0, [r0], #-0
 800e214:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e218:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e21c:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800e228:	44000000 	strmi	r0, [r0], #-0
 800e22c:	28004400 	stmdacs	r0, {sl, lr}
 800e230:	28002800 	stmdacs	r0, {fp, sp}
 800e234:	10002800 	andne	r2, r0, r0, lsl #16
	...
 800e240:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
 800e244:	55004900 	strpl	r4, [r0, #-2304]	; 0x900
 800e248:	55005500 	strpl	r5, [r0, #-1280]	; 0x500
 800e24c:	22005500 	andcs	r5, r0, #0, 10
	...
 800e258:	44000000 	strmi	r0, [r0], #-0
 800e25c:	28002800 	stmdacs	r0, {fp, sp}
 800e260:	28001000 	stmdacs	r0, {ip}
 800e264:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800e270:	44000000 	strmi	r0, [r0], #-0
 800e274:	28004400 	stmdacs	r0, {sl, lr}
 800e278:	28002800 	stmdacs	r0, {fp, sp}
 800e27c:	10001000 	andne	r1, r0, r0
 800e280:	10001000 	andne	r1, r0, r0
 800e284:	00000000 	andeq	r0, r0, r0
 800e288:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 800e28c:	10000800 	andne	r0, r0, r0, lsl #16
 800e290:	20002000 	andcs	r2, r0, r0
 800e294:	78004000 	stmdavc	r0, {lr}
 800e298:	00000000 	andeq	r0, r0, r0
 800e29c:	10000000 	andne	r0, r0, r0
 800e2a0:	20002000 	andcs	r2, r0, r0
 800e2a4:	20002000 	andcs	r2, r0, r0
 800e2a8:	20004000 	andcs	r4, r0, r0
 800e2ac:	20002000 	andcs	r2, r0, r0
 800e2b0:	20002000 	andcs	r2, r0, r0
 800e2b4:	20000000 	andcs	r0, r0, r0
 800e2b8:	20002000 	andcs	r2, r0, r0
 800e2bc:	20002000 	andcs	r2, r0, r0
 800e2c0:	20002000 	andcs	r2, r0, r0
 800e2c4:	20002000 	andcs	r2, r0, r0
 800e2c8:	20002000 	andcs	r2, r0, r0
 800e2cc:	40000000 	andmi	r0, r0, r0
 800e2d0:	20002000 	andcs	r2, r0, r0
 800e2d4:	20002000 	andcs	r2, r0, r0
 800e2d8:	20001000 	andcs	r1, r0, r0
 800e2dc:	20002000 	andcs	r2, r0, r0
 800e2e0:	20002000 	andcs	r2, r0, r0
	...
 800e2ec:	58007400 	stmdapl	r0, {sl, ip, sp, lr}
	...
 800e300:	50007000 	andpl	r7, r0, r0
 800e304:	50005000 	andpl	r5, r0, r0
 800e308:	50005000 	andpl	r5, r0, r0
 800e30c:	70005000 	andvc	r5, r0, r0
 800e310:	00000000 	andeq	r0, r0, r0

0800e314 <ASCII8x12_Table>:
	...
 800e330:	00100000 	andseq	r0, r0, r0
 800e334:	00100010 	andseq	r0, r0, r0, lsl r0
 800e338:	00100010 	andseq	r0, r0, r0, lsl r0
 800e33c:	00000010 	andeq	r0, r0, r0, lsl r0
 800e340:	00000010 	andeq	r0, r0, r0, lsl r0
 800e344:	00000000 	andeq	r0, r0, r0
 800e348:	00280000 	eoreq	r0, r8, r0
 800e34c:	00280028 	eoreq	r0, r8, r8, lsr #32
	...
 800e360:	00140000 	andseq	r0, r4, r0
 800e364:	003e0014 	eorseq	r0, lr, r4, lsl r0
 800e368:	00280014 	eoreq	r0, r8, r4, lsl r0
 800e36c:	0028007c 	eoreq	r0, r8, ip, ror r0
 800e370:	00000028 	andeq	r0, r0, r8, lsr #32
 800e374:	00000000 	andeq	r0, r0, r0
 800e378:	00380010 	eorseq	r0, r8, r0, lsl r0
 800e37c:	00500054 	subseq	r0, r0, r4, asr r0
 800e380:	00140038 	andseq	r0, r4, r8, lsr r0
 800e384:	00540014 	subseq	r0, r4, r4, lsl r0
 800e388:	00100038 	andseq	r0, r0, r8, lsr r0
 800e38c:	00000000 	andeq	r0, r0, r0
 800e390:	00440000 	subeq	r0, r4, r0
 800e394:	00a800a8 	adceq	r0, r8, r8, lsr #1
 800e398:	00140050 	andseq	r0, r4, r0, asr r0
 800e39c:	002a001a 	eoreq	r0, sl, sl, lsl r0
 800e3a0:	00000024 	andeq	r0, r0, r4, lsr #32
 800e3a4:	00000000 	andeq	r0, r0, r0
 800e3a8:	00200000 	eoreq	r0, r0, r0
 800e3ac:	00500050 	subseq	r0, r0, r0, asr r0
 800e3b0:	00e80020 	rsceq	r0, r8, r0, lsr #32
 800e3b4:	00980098 	umullseq	r0, r8, r8, r0
 800e3b8:	00000060 	andeq	r0, r0, r0, rrx
 800e3bc:	00000000 	andeq	r0, r0, r0
 800e3c0:	00800000 	addeq	r0, r0, r0
 800e3c4:	00800080 	addeq	r0, r0, r0, lsl #1
	...
 800e3d8:	00400000 	subeq	r0, r0, r0
 800e3dc:	00800080 	addeq	r0, r0, r0, lsl #1
 800e3e0:	00800080 	addeq	r0, r0, r0, lsl #1
 800e3e4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e3e8:	00800080 	addeq	r0, r0, r0, lsl #1
 800e3ec:	00000000 	andeq	r0, r0, r0
 800e3f0:	00800000 	addeq	r0, r0, r0
 800e3f4:	00400040 	subeq	r0, r0, r0, asr #32
 800e3f8:	00400040 	subeq	r0, r0, r0, asr #32
 800e3fc:	00400040 	subeq	r0, r0, r0, asr #32
 800e400:	00400040 	subeq	r0, r0, r0, asr #32
 800e404:	00000000 	andeq	r0, r0, r0
 800e408:	00400000 	subeq	r0, r0, r0
 800e40c:	004000e0 	subeq	r0, r0, r0, ror #1
 800e410:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800e424:	00200000 	eoreq	r0, r0, r0
 800e428:	00f80020 	rscseq	r0, r8, r0, lsr #32
 800e42c:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800e448:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800e45c:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800e478:	00000040 	andeq	r0, r0, r0, asr #32
 800e47c:	00000000 	andeq	r0, r0, r0
 800e480:	00200000 	eoreq	r0, r0, r0
 800e484:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e488:	00400040 	subeq	r0, r0, r0, asr #32
 800e48c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e490:	00000080 	andeq	r0, r0, r0, lsl #1
 800e494:	00000000 	andeq	r0, r0, r0
 800e498:	00600000 	rsbeq	r0, r0, r0
 800e49c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e4a0:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e4a4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e4a8:	00000060 	andeq	r0, r0, r0, rrx
 800e4ac:	00000000 	andeq	r0, r0, r0
 800e4b0:	00200000 	eoreq	r0, r0, r0
 800e4b4:	00a00060 	adceq	r0, r0, r0, rrx
 800e4b8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e4bc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e4c0:	00000020 	andeq	r0, r0, r0, lsr #32
 800e4c4:	00000000 	andeq	r0, r0, r0
 800e4c8:	00600000 	rsbeq	r0, r0, r0
 800e4cc:	00100090 	mulseq	r0, r0, r0
 800e4d0:	00200010 	eoreq	r0, r0, r0, lsl r0
 800e4d4:	00800040 	addeq	r0, r0, r0, asr #32
 800e4d8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e4dc:	00000000 	andeq	r0, r0, r0
 800e4e0:	00600000 	rsbeq	r0, r0, r0
 800e4e4:	00100090 	mulseq	r0, r0, r0
 800e4e8:	00100060 	andseq	r0, r0, r0, rrx
 800e4ec:	00900010 	addseq	r0, r0, r0, lsl r0
 800e4f0:	00000060 	andeq	r0, r0, r0, rrx
 800e4f4:	00000000 	andeq	r0, r0, r0
 800e4f8:	00100000 	andseq	r0, r0, r0
 800e4fc:	00500030 	subseq	r0, r0, r0, lsr r0
 800e500:	00900050 	addseq	r0, r0, r0, asr r0
 800e504:	001000f8 	ldrsheq	r0, [r0], -r8
 800e508:	00000010 	andeq	r0, r0, r0, lsl r0
 800e50c:	00000000 	andeq	r0, r0, r0
 800e510:	00700000 	rsbseq	r0, r0, r0
 800e514:	00800040 	addeq	r0, r0, r0, asr #32
 800e518:	001000e0 	andseq	r0, r0, r0, ror #1
 800e51c:	00900010 	addseq	r0, r0, r0, lsl r0
 800e520:	00000060 	andeq	r0, r0, r0, rrx
 800e524:	00000000 	andeq	r0, r0, r0
 800e528:	00600000 	rsbeq	r0, r0, r0
 800e52c:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e530:	00d000a0 	sbcseq	r0, r0, r0, lsr #1
 800e534:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e538:	00000060 	andeq	r0, r0, r0, rrx
 800e53c:	00000000 	andeq	r0, r0, r0
 800e540:	00f00000 	rscseq	r0, r0, r0
 800e544:	00200010 	eoreq	r0, r0, r0, lsl r0
 800e548:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e54c:	00400040 	subeq	r0, r0, r0, asr #32
 800e550:	00000040 	andeq	r0, r0, r0, asr #32
 800e554:	00000000 	andeq	r0, r0, r0
 800e558:	00600000 	rsbeq	r0, r0, r0
 800e55c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e560:	00900060 	addseq	r0, r0, r0, rrx
 800e564:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e568:	00000060 	andeq	r0, r0, r0, rrx
 800e56c:	00000000 	andeq	r0, r0, r0
 800e570:	00600000 	rsbeq	r0, r0, r0
 800e574:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e578:	005000b0 	ldrheq	r0, [r0], #-0
 800e57c:	00900010 	addseq	r0, r0, r0, lsl r0
 800e580:	00000060 	andeq	r0, r0, r0, rrx
	...
 800e58c:	00400000 	subeq	r0, r0, r0
	...
 800e598:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800e5a4:	00400000 	subeq	r0, r0, r0
	...
 800e5b0:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800e5bc:	00100000 	andseq	r0, r0, r0
 800e5c0:	00800060 	addeq	r0, r0, r0, rrx
 800e5c4:	00100060 	andseq	r0, r0, r0, rrx
	...
 800e5d8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e5dc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 800e5ec:	00800000 	addeq	r0, r0, r0
 800e5f0:	00100060 	andseq	r0, r0, r0, rrx
 800e5f4:	00800060 	addeq	r0, r0, r0, rrx
	...
 800e600:	00600000 	rsbeq	r0, r0, r0
 800e604:	00100090 	mulseq	r0, r0, r0
 800e608:	00400020 	subeq	r0, r0, r0, lsr #32
 800e60c:	00000040 	andeq	r0, r0, r0, asr #32
 800e610:	00000040 	andeq	r0, r0, r0, asr #32
 800e614:	00000000 	andeq	r0, r0, r0
 800e618:	001c0000 	andseq	r0, ip, r0
 800e61c:	005b0022 	subseq	r0, fp, r2, lsr #32
 800e620:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800e624:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800e628:	0041009e 	umaaleq	r0, r1, lr, r0
 800e62c:	00000000 	andeq	r0, r0, r0
 800e630:	00200000 	eoreq	r0, r0, r0
 800e634:	00500050 	subseq	r0, r0, r0, asr r0
 800e638:	00500050 	subseq	r0, r0, r0, asr r0
 800e63c:	00880070 	addeq	r0, r8, r0, ror r0
 800e640:	00000088 	andeq	r0, r0, r8, lsl #1
 800e644:	00000000 	andeq	r0, r0, r0
 800e648:	00f00000 	rscseq	r0, r0, r0
 800e64c:	00880088 	addeq	r0, r8, r8, lsl #1
 800e650:	008800f0 	strdeq	r0, [r8], r0	; <UNPREDICTABLE>
 800e654:	00880088 	addeq	r0, r8, r8, lsl #1
 800e658:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e65c:	00000000 	andeq	r0, r0, r0
 800e660:	00380000 	eorseq	r0, r8, r0
 800e664:	00840044 	addeq	r0, r4, r4, asr #32
 800e668:	00800080 	addeq	r0, r0, r0, lsl #1
 800e66c:	00440084 	subeq	r0, r4, r4, lsl #1
 800e670:	00000038 	andeq	r0, r0, r8, lsr r0
 800e674:	00000000 	andeq	r0, r0, r0
 800e678:	00e00000 	rsceq	r0, r0, r0
 800e67c:	00880090 	umulleq	r0, r8, r0, r0
 800e680:	00880088 	addeq	r0, r8, r8, lsl #1
 800e684:	00900088 	addseq	r0, r0, r8, lsl #1
 800e688:	000000e0 	andeq	r0, r0, r0, ror #1
 800e68c:	00000000 	andeq	r0, r0, r0
 800e690:	00f80000 	rscseq	r0, r8, r0
 800e694:	00800080 	addeq	r0, r0, r0, lsl #1
 800e698:	008000f8 	strdeq	r0, [r0], r8
 800e69c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e6a0:	000000f8 	strdeq	r0, [r0], -r8
 800e6a4:	00000000 	andeq	r0, r0, r0
 800e6a8:	00780000 	rsbseq	r0, r8, r0
 800e6ac:	00400040 	subeq	r0, r0, r0, asr #32
 800e6b0:	00400070 	subeq	r0, r0, r0, ror r0
 800e6b4:	00400040 	subeq	r0, r0, r0, asr #32
 800e6b8:	00000040 	andeq	r0, r0, r0, asr #32
 800e6bc:	00000000 	andeq	r0, r0, r0
 800e6c0:	00380000 	eorseq	r0, r8, r0
 800e6c4:	00840044 	addeq	r0, r4, r4, asr #32
 800e6c8:	009c0080 	addseq	r0, ip, r0, lsl #1
 800e6cc:	00440084 	subeq	r0, r4, r4, lsl #1
 800e6d0:	00000038 	andeq	r0, r0, r8, lsr r0
 800e6d4:	00000000 	andeq	r0, r0, r0
 800e6d8:	00880000 	addeq	r0, r8, r0
 800e6dc:	00880088 	addeq	r0, r8, r8, lsl #1
 800e6e0:	008800f8 	strdeq	r0, [r8], r8
 800e6e4:	00880088 	addeq	r0, r8, r8, lsl #1
 800e6e8:	00000088 	andeq	r0, r0, r8, lsl #1
 800e6ec:	00000000 	andeq	r0, r0, r0
 800e6f0:	00800000 	addeq	r0, r0, r0
 800e6f4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e6f8:	00800080 	addeq	r0, r0, r0, lsl #1
 800e6fc:	00800080 	addeq	r0, r0, r0, lsl #1
 800e700:	00000080 	andeq	r0, r0, r0, lsl #1
 800e704:	00000000 	andeq	r0, r0, r0
 800e708:	00100000 	andseq	r0, r0, r0
 800e70c:	00100010 	andseq	r0, r0, r0, lsl r0
 800e710:	00100010 	andseq	r0, r0, r0, lsl r0
 800e714:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e718:	00000060 	andeq	r0, r0, r0, rrx
 800e71c:	00000000 	andeq	r0, r0, r0
 800e720:	00880000 	addeq	r0, r8, r0
 800e724:	00a00090 	umlaleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e728:	00a000e0 	adceq	r0, r0, r0, ror #1
 800e72c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e730:	00000088 	andeq	r0, r0, r8, lsl #1
 800e734:	00000000 	andeq	r0, r0, r0
 800e738:	00800000 	addeq	r0, r0, r0
 800e73c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e740:	00800080 	addeq	r0, r0, r0, lsl #1
 800e744:	00800080 	addeq	r0, r0, r0, lsl #1
 800e748:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e74c:	00000000 	andeq	r0, r0, r0
 800e750:	00820000 	addeq	r0, r2, r0
 800e754:	00c600c6 	sbceq	r0, r6, r6, asr #1
 800e758:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e75c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e760:	00000092 	muleq	r0, r2, r0
 800e764:	00000000 	andeq	r0, r0, r0
 800e768:	00840000 	addeq	r0, r4, r0
 800e76c:	00a400c4 	adceq	r0, r4, r4, asr #1
 800e770:	009400a4 	addseq	r0, r4, r4, lsr #1
 800e774:	008c0094 	umulleq	r0, ip, r4, r0
 800e778:	00000084 	andeq	r0, r0, r4, lsl #1
 800e77c:	00000000 	andeq	r0, r0, r0
 800e780:	00300000 	eorseq	r0, r0, r0
 800e784:	00840048 	addeq	r0, r4, r8, asr #32
 800e788:	00840084 	addeq	r0, r4, r4, lsl #1
 800e78c:	00480084 	subeq	r0, r8, r4, lsl #1
 800e790:	00000030 	andeq	r0, r0, r0, lsr r0
 800e794:	00000000 	andeq	r0, r0, r0
 800e798:	00f00000 	rscseq	r0, r0, r0
 800e79c:	00880088 	addeq	r0, r8, r8, lsl #1
 800e7a0:	00f00088 	rscseq	r0, r0, r8, lsl #1
 800e7a4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e7a8:	00000080 	andeq	r0, r0, r0, lsl #1
 800e7ac:	00000000 	andeq	r0, r0, r0
 800e7b0:	00300000 	eorseq	r0, r0, r0
 800e7b4:	00840048 	addeq	r0, r4, r8, asr #32
 800e7b8:	00840084 	addeq	r0, r4, r4, lsl #1
 800e7bc:	00580084 	subseq	r0, r8, r4, lsl #1
 800e7c0:	00040034 	andeq	r0, r4, r4, lsr r0
 800e7c4:	00000000 	andeq	r0, r0, r0
 800e7c8:	00780000 	rsbseq	r0, r8, r0
 800e7cc:	00440044 	subeq	r0, r4, r4, asr #32
 800e7d0:	00500078 	subseq	r0, r0, r8, ror r0
 800e7d4:	00440048 	subeq	r0, r4, r8, asr #32
 800e7d8:	00000042 	andeq	r0, r0, r2, asr #32
 800e7dc:	00000000 	andeq	r0, r0, r0
 800e7e0:	00700000 	rsbseq	r0, r0, r0
 800e7e4:	00800088 	addeq	r0, r0, r8, lsl #1
 800e7e8:	00080070 	andeq	r0, r8, r0, ror r0
 800e7ec:	00880088 	addeq	r0, r8, r8, lsl #1
 800e7f0:	00000070 	andeq	r0, r0, r0, ror r0
 800e7f4:	00000000 	andeq	r0, r0, r0
 800e7f8:	00f80000 	rscseq	r0, r8, r0
 800e7fc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e800:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e804:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e808:	00000020 	andeq	r0, r0, r0, lsr #32
 800e80c:	00000000 	andeq	r0, r0, r0
 800e810:	00840000 	addeq	r0, r4, r0
 800e814:	00840084 	addeq	r0, r4, r4, lsl #1
 800e818:	00840084 	addeq	r0, r4, r4, lsl #1
 800e81c:	00480084 	subeq	r0, r8, r4, lsl #1
 800e820:	00000030 	andeq	r0, r0, r0, lsr r0
 800e824:	00000000 	andeq	r0, r0, r0
 800e828:	00880000 	addeq	r0, r8, r0
 800e82c:	00500088 	subseq	r0, r0, r8, lsl #1
 800e830:	00500050 	subseq	r0, r0, r0, asr r0
 800e834:	00500050 	subseq	r0, r0, r0, asr r0
 800e838:	00000020 	andeq	r0, r0, r0, lsr #32
 800e83c:	00000000 	andeq	r0, r0, r0
 800e840:	00920000 	addseq	r0, r2, r0
 800e844:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e848:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e84c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e850:	00000044 	andeq	r0, r0, r4, asr #32
 800e854:	00000000 	andeq	r0, r0, r0
 800e858:	00840000 	addeq	r0, r4, r0
 800e85c:	00480048 	subeq	r0, r8, r8, asr #32
 800e860:	00300030 	eorseq	r0, r0, r0, lsr r0
 800e864:	00480048 	subeq	r0, r8, r8, asr #32
 800e868:	00000084 	andeq	r0, r0, r4, lsl #1
 800e86c:	00000000 	andeq	r0, r0, r0
 800e870:	00880000 	addeq	r0, r8, r0
 800e874:	00500050 	subseq	r0, r0, r0, asr r0
 800e878:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e87c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e880:	00000020 	andeq	r0, r0, r0, lsr #32
 800e884:	00000000 	andeq	r0, r0, r0
 800e888:	00f80000 	rscseq	r0, r8, r0
 800e88c:	00100008 	andseq	r0, r0, r8
 800e890:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e894:	00800040 	addeq	r0, r0, r0, asr #32
 800e898:	000000f8 	strdeq	r0, [r0], -r8
 800e89c:	00000000 	andeq	r0, r0, r0
 800e8a0:	00c00000 	sbceq	r0, r0, r0
 800e8a4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e8a8:	00800080 	addeq	r0, r0, r0, lsl #1
 800e8ac:	00800080 	addeq	r0, r0, r0, lsl #1
 800e8b0:	00800080 	addeq	r0, r0, r0, lsl #1
 800e8b4:	00000000 	andeq	r0, r0, r0
 800e8b8:	00800000 	addeq	r0, r0, r0
 800e8bc:	00400080 	subeq	r0, r0, r0, lsl #1
 800e8c0:	00400040 	subeq	r0, r0, r0, asr #32
 800e8c4:	00200040 	eoreq	r0, r0, r0, asr #32
 800e8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 800e8cc:	00000000 	andeq	r0, r0, r0
 800e8d0:	00c00000 	sbceq	r0, r0, r0
 800e8d4:	00400040 	subeq	r0, r0, r0, asr #32
 800e8d8:	00400040 	subeq	r0, r0, r0, asr #32
 800e8dc:	00400040 	subeq	r0, r0, r0, asr #32
 800e8e0:	00400040 	subeq	r0, r0, r0, asr #32
 800e8e4:	00000000 	andeq	r0, r0, r0
 800e8e8:	00400000 	subeq	r0, r0, r0
 800e8ec:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800e8f0:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800e910:	00f80000 	rscseq	r0, r8, r0
 800e914:	00000000 	andeq	r0, r0, r0
 800e918:	00800000 	addeq	r0, r0, r0
 800e91c:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800e934:	00e00000 	rsceq	r0, r0, r0
 800e938:	00700010 	rsbseq	r0, r0, r0, lsl r0
 800e93c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e940:	00000070 	andeq	r0, r0, r0, ror r0
 800e944:	00000000 	andeq	r0, r0, r0
 800e948:	00800000 	addeq	r0, r0, r0
 800e94c:	00a00080 	adceq	r0, r0, r0, lsl #1
 800e950:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800e954:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e958:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800e964:	00600000 	rsbeq	r0, r0, r0
 800e968:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e96c:	00900080 	addseq	r0, r0, r0, lsl #1
 800e970:	00000060 	andeq	r0, r0, r0, rrx
 800e974:	00000000 	andeq	r0, r0, r0
 800e978:	00100000 	andseq	r0, r0, r0
 800e97c:	00500010 	subseq	r0, r0, r0, lsl r0
 800e980:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800e984:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e988:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800e994:	00600000 	rsbeq	r0, r0, r0
 800e998:	00f00090 	smlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e99c:	00900080 	addseq	r0, r0, r0, lsl #1
 800e9a0:	00000060 	andeq	r0, r0, r0, rrx
 800e9a4:	00000000 	andeq	r0, r0, r0
 800e9a8:	00c00000 	sbceq	r0, r0, r0
 800e9ac:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800e9b0:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9b4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9b8:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800e9c4:	00500000 	subseq	r0, r0, r0
 800e9c8:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800e9cc:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e9d0:	00100050 	andseq	r0, r0, r0, asr r0
 800e9d4:	00000000 	andeq	r0, r0, r0
 800e9d8:	00800000 	addeq	r0, r0, r0
 800e9dc:	00a00080 	adceq	r0, r0, r0, lsl #1
 800e9e0:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800e9e4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e9e8:	00000090 	muleq	r0, r0, r0
 800e9ec:	00000000 	andeq	r0, r0, r0
 800e9f0:	00800000 	addeq	r0, r0, r0
 800e9f4:	00800000 	addeq	r0, r0, r0
 800e9f8:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9fc:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea00:	00000080 	andeq	r0, r0, r0, lsl #1
 800ea04:	00000000 	andeq	r0, r0, r0
 800ea08:	00800000 	addeq	r0, r0, r0
 800ea0c:	00800000 	addeq	r0, r0, r0
 800ea10:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea14:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea18:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea1c:	00000000 	andeq	r0, r0, r0
 800ea20:	00800000 	addeq	r0, r0, r0
 800ea24:	00900080 	addseq	r0, r0, r0, lsl #1
 800ea28:	00c000a0 	sbceq	r0, r0, r0, lsr #1
 800ea2c:	009000a0 	addseq	r0, r0, r0, lsr #1
 800ea30:	00000090 	muleq	r0, r0, r0
 800ea34:	00000000 	andeq	r0, r0, r0
 800ea38:	00800000 	addeq	r0, r0, r0
 800ea3c:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea40:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea44:	00800080 	addeq	r0, r0, r0, lsl #1
 800ea48:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800ea54:	00a60000 	adceq	r0, r6, r0
 800ea58:	009200da 	ldrsbeq	r0, [r2], sl
 800ea5c:	00920092 	umullseq	r0, r2, r2, r0
 800ea60:	00000092 	muleq	r0, r2, r0
	...
 800ea6c:	00a00000 	adceq	r0, r0, r0
 800ea70:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800ea74:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ea78:	00000090 	muleq	r0, r0, r0
	...
 800ea84:	00600000 	rsbeq	r0, r0, r0
 800ea88:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ea8c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ea90:	00000060 	andeq	r0, r0, r0, rrx
	...
 800ea9c:	00a00000 	adceq	r0, r0, r0
 800eaa0:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800eaa4:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eaa8:	008000a0 	addeq	r0, r0, r0, lsr #1
	...
 800eab4:	00500000 	subseq	r0, r0, r0
 800eab8:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800eabc:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eac0:	00100050 	andseq	r0, r0, r0, asr r0
	...
 800eacc:	00a00000 	adceq	r0, r0, r0
 800ead0:	008000c0 	addeq	r0, r0, r0, asr #1
 800ead4:	00800080 	addeq	r0, r0, r0, lsl #1
 800ead8:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800eae4:	00e00000 	rsceq	r0, r0, r0
 800eae8:	00400090 	umaaleq	r0, r0, r0, r0
 800eaec:	00900020 	addseq	r0, r0, r0, lsr #32
 800eaf0:	00000060 	andeq	r0, r0, r0, rrx
 800eaf4:	00000000 	andeq	r0, r0, r0
 800eaf8:	00800000 	addeq	r0, r0, r0
 800eafc:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800eb00:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb04:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb08:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800eb14:	00900000 	addseq	r0, r0, r0
 800eb18:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eb1c:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eb20:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800eb2c:	00880000 	addeq	r0, r8, r0
 800eb30:	00500088 	subseq	r0, r0, r8, lsl #1
 800eb34:	00500050 	subseq	r0, r0, r0, asr r0
 800eb38:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800eb44:	00920000 	addseq	r0, r2, r0
 800eb48:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800eb4c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800eb50:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800eb5c:	00880000 	addeq	r0, r8, r0
 800eb60:	00200050 	eoreq	r0, r0, r0, asr r0
 800eb64:	00500020 	subseq	r0, r0, r0, lsr #32
 800eb68:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 800eb74:	00880000 	addeq	r0, r8, r0
 800eb78:	00500050 	subseq	r0, r0, r0, asr r0
 800eb7c:	00200050 	eoreq	r0, r0, r0, asr r0
 800eb80:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800eb8c:	00f00000 	rscseq	r0, r0, r0
 800eb90:	00200010 	eoreq	r0, r0, r0, lsl r0
 800eb94:	00800040 	addeq	r0, r0, r0, asr #32
 800eb98:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800eb9c:	00000000 	andeq	r0, r0, r0
 800eba0:	00c00000 	sbceq	r0, r0, r0
 800eba4:	00800080 	addeq	r0, r0, r0, lsl #1
 800eba8:	00000080 	andeq	r0, r0, r0, lsl #1
 800ebac:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebb0:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebb4:	00000000 	andeq	r0, r0, r0
 800ebb8:	00800000 	addeq	r0, r0, r0
 800ebbc:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebc0:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebc4:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebc8:	00800080 	addeq	r0, r0, r0, lsl #1
 800ebcc:	00000000 	andeq	r0, r0, r0
 800ebd0:	00c00000 	sbceq	r0, r0, r0
 800ebd4:	00400040 	subeq	r0, r0, r0, asr #32
 800ebd8:	00200040 	eoreq	r0, r0, r0, asr #32
 800ebdc:	00400040 	subeq	r0, r0, r0, asr #32
 800ebe0:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800ebf0:	00b000e8 	adcseq	r0, r0, r8, ror #1
	...
 800ec04:	00a000e0 	adceq	r0, r0, r0, ror #1
 800ec08:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ec0c:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ec10:	000000e0 	andeq	r0, r0, r0, ror #1

0800ec14 <ASCII8x8_Table>:
	...
 800ec24:	00400040 	subeq	r0, r0, r0, asr #32
 800ec28:	00400040 	subeq	r0, r0, r0, asr #32
 800ec2c:	00400040 	subeq	r0, r0, r0, asr #32
 800ec30:	00400000 	subeq	r0, r0, r0
 800ec34:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ec38:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800ec44:	00240000 	eoreq	r0, r4, r0
 800ec48:	00fe0024 	rscseq	r0, lr, r4, lsr #32
 800ec4c:	00fc0048 	rscseq	r0, ip, r8, asr #32
 800ec50:	00480048 	subeq	r0, r8, r8, asr #32
 800ec54:	00540038 	subseq	r0, r4, r8, lsr r0
 800ec58:	00380050 	eorseq	r0, r8, r0, asr r0
 800ec5c:	00140014 	andseq	r0, r4, r4, lsl r0
 800ec60:	00380054 	eorseq	r0, r8, r4, asr r0
 800ec64:	00a80044 	adceq	r0, r8, r4, asr #32
 800ec68:	005000a8 	subseq	r0, r0, r8, lsr #1
 800ec6c:	001a0014 	andseq	r0, sl, r4, lsl r0
 800ec70:	0024002a 	eoreq	r0, r4, sl, lsr #32
 800ec74:	00280010 	eoreq	r0, r8, r0, lsl r0
 800ec78:	00100028 	andseq	r0, r0, r8, lsr #32
 800ec7c:	004c0074 	subeq	r0, ip, r4, ror r0
 800ec80:	0030004c 	eorseq	r0, r0, ip, asr #32
 800ec84:	00100010 	andseq	r0, r0, r0, lsl r0
 800ec88:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800ec94:	00100008 	andseq	r0, r0, r8
 800ec98:	00100010 	andseq	r0, r0, r0, lsl r0
 800ec9c:	00100010 	andseq	r0, r0, r0, lsl r0
 800eca0:	00080010 	andeq	r0, r8, r0, lsl r0
 800eca4:	00080010 	andeq	r0, r8, r0, lsl r0
 800eca8:	00080008 	andeq	r0, r8, r8
 800ecac:	00080008 	andeq	r0, r8, r8
 800ecb0:	00100008 	andseq	r0, r0, r8
 800ecb4:	00000000 	andeq	r0, r0, r0
 800ecb8:	00180024 	andseq	r0, r8, r4, lsr #32
 800ecbc:	0018003c 	andseq	r0, r8, ip, lsr r0
 800ecc0:	00000024 	andeq	r0, r0, r4, lsr #32
 800ecc4:	00000000 	andeq	r0, r0, r0
 800ecc8:	00100010 	andseq	r0, r0, r0, lsl r0
 800eccc:	0010007c 	andseq	r0, r0, ip, ror r0
 800ecd0:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800ecdc:	00080000 	andeq	r0, r8, r0
 800ece0:	00100008 	andseq	r0, r0, r8
	...
 800ecec:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
 800ed00:	00180018 	andseq	r0, r8, r8, lsl r0
 800ed04:	00080008 	andeq	r0, r8, r8
 800ed08:	00100008 	andseq	r0, r0, r8
 800ed0c:	00200010 	eoreq	r0, r0, r0, lsl r0
 800ed10:	00200020 	eoreq	r0, r0, r0, lsr #32
 800ed14:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ed18:	00240024 	eoreq	r0, r4, r4, lsr #32
 800ed1c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800ed20:	00180024 	andseq	r0, r8, r4, lsr #32
 800ed24:	00180008 	andseq	r0, r8, r8
 800ed28:	00080028 	andeq	r0, r8, r8, lsr #32
 800ed2c:	00080008 	andeq	r0, r8, r8
 800ed30:	00080008 	andeq	r0, r8, r8
 800ed34:	00440038 	subeq	r0, r4, r8, lsr r0
 800ed38:	00040000 	andeq	r0, r4, r0
 800ed3c:	00100008 	andseq	r0, r0, r8
 800ed40:	007c0020 	rsbseq	r0, ip, r0, lsr #32
 800ed44:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ed48:	00180004 	andseq	r0, r8, r4
 800ed4c:	00040004 	andeq	r0, r4, r4
 800ed50:	00180024 	andseq	r0, r8, r4, lsr #32
 800ed54:	000c0004 	andeq	r0, ip, r4
 800ed58:	00240014 	eoreq	r0, r4, r4, lsl r0
 800ed5c:	007e0044 	rsbseq	r0, lr, r4, asr #32
 800ed60:	00040004 	andeq	r0, r4, r4
 800ed64:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800ed68:	00380020 	eorseq	r0, r8, r0, lsr #32
 800ed6c:	00040004 	andeq	r0, r4, r4
 800ed70:	00180024 	andseq	r0, r8, r4, lsr #32
 800ed74:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ed78:	00380020 	eorseq	r0, r8, r0, lsr #32
 800ed7c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800ed80:	00180024 	andseq	r0, r8, r4, lsr #32
 800ed84:	0004003c 	andeq	r0, r4, ip, lsr r0
 800ed88:	00080008 	andeq	r0, r8, r8
 800ed8c:	00100008 	andseq	r0, r0, r8
 800ed90:	00100010 	andseq	r0, r0, r0, lsl r0
 800ed94:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ed98:	00180024 	andseq	r0, r8, r4, lsr #32
 800ed9c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800eda0:	00180024 	andseq	r0, r8, r4, lsr #32
 800eda4:	00240018 	eoreq	r0, r4, r8, lsl r0
 800eda8:	00240024 	eoreq	r0, r4, r4, lsr #32
 800edac:	0004001c 	andeq	r0, r4, ip, lsl r0
 800edb0:	00180024 	andseq	r0, r8, r4, lsr #32
 800edb4:	00000000 	andeq	r0, r0, r0
 800edb8:	00000010 	andeq	r0, r0, r0, lsl r0
 800edbc:	00100000 	andseq	r0, r0, r0
	...
 800edc8:	00000008 	andeq	r0, r0, r8
 800edcc:	00080000 	andeq	r0, r8, r0
 800edd0:	00000010 	andeq	r0, r0, r0, lsl r0
 800edd4:	00000000 	andeq	r0, r0, r0
 800edd8:	00180004 	andseq	r0, r8, r4
 800eddc:	00180020 	andseq	r0, r8, r0, lsr #32
 800ede0:	00000004 	andeq	r0, r0, r4
 800ede4:	00000000 	andeq	r0, r0, r0
 800ede8:	003c0000 	eorseq	r0, ip, r0
 800edec:	003c0000 	eorseq	r0, ip, r0
	...
 800edf8:	00180020 	andseq	r0, r8, r0, lsr #32
 800edfc:	00180004 	andseq	r0, r8, r4
 800ee00:	00000020 	andeq	r0, r0, r0, lsr #32
 800ee04:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ee08:	00080004 	andeq	r0, r8, r4
 800ee0c:	00100010 	andseq	r0, r0, r0, lsl r0
 800ee10:	00100000 	andseq	r0, r0, r0
 800ee14:	0042003c 	subeq	r0, r2, ip, lsr r0
 800ee18:	00a50099 	umlaleq	r0, r5, r9, r0
 800ee1c:	009d00a5 	addseq	r0, sp, r5, lsr #1
 800ee20:	00380042 	eorseq	r0, r8, r2, asr #32
 800ee24:	00440038 	subeq	r0, r4, r8, lsr r0
 800ee28:	00440044 	subeq	r0, r4, r4, asr #32
 800ee2c:	0044007c 	subeq	r0, r4, ip, ror r0
 800ee30:	00440044 	subeq	r0, r4, r4, asr #32
 800ee34:	00440078 	subeq	r0, r4, r8, ror r0
 800ee38:	00780044 	rsbseq	r0, r8, r4, asr #32
 800ee3c:	00440044 	subeq	r0, r4, r4, asr #32
 800ee40:	00780044 	rsbseq	r0, r8, r4, asr #32
 800ee44:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800ee48:	00400042 	subeq	r0, r0, r2, asr #32
 800ee4c:	00420040 	subeq	r0, r2, r0, asr #32
 800ee50:	001c0022 	andseq	r0, ip, r2, lsr #32
 800ee54:	00480070 	subeq	r0, r8, r0, ror r0
 800ee58:	00440044 	subeq	r0, r4, r4, asr #32
 800ee5c:	00440044 	subeq	r0, r4, r4, asr #32
 800ee60:	00700048 	rsbseq	r0, r0, r8, asr #32
 800ee64:	0040007c 	subeq	r0, r0, ip, ror r0
 800ee68:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800ee6c:	00400040 	subeq	r0, r0, r0, asr #32
 800ee70:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800ee74:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800ee78:	00380020 	eorseq	r0, r8, r0, lsr #32
 800ee7c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800ee80:	00200020 	eoreq	r0, r0, r0, lsr #32
 800ee84:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800ee88:	00400042 	subeq	r0, r0, r2, asr #32
 800ee8c:	0042004e 	subeq	r0, r2, lr, asr #32
 800ee90:	001c0022 	andseq	r0, ip, r2, lsr #32
 800ee94:	00440044 	subeq	r0, r4, r4, asr #32
 800ee98:	007c0044 	rsbseq	r0, ip, r4, asr #32
 800ee9c:	00440044 	subeq	r0, r4, r4, asr #32
 800eea0:	00440044 	subeq	r0, r4, r4, asr #32
 800eea4:	00100010 	andseq	r0, r0, r0, lsl r0
 800eea8:	00100010 	andseq	r0, r0, r0, lsl r0
 800eeac:	00100010 	andseq	r0, r0, r0, lsl r0
 800eeb0:	00100010 	andseq	r0, r0, r0, lsl r0
 800eeb4:	00040004 	andeq	r0, r4, r4
 800eeb8:	00040004 	andeq	r0, r4, r4
 800eebc:	00240004 	eoreq	r0, r4, r4
 800eec0:	00180024 	andseq	r0, r8, r4, lsr #32
 800eec4:	00480044 	subeq	r0, r8, r4, asr #32
 800eec8:	00700050 	rsbseq	r0, r0, r0, asr r0
 800eecc:	00480050 	subeq	r0, r8, r0, asr r0
 800eed0:	00440048 	subeq	r0, r4, r8, asr #32
 800eed4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800eed8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800eedc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800eee0:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800eee4:	00c60082 	sbceq	r0, r6, r2, lsl #1
 800eee8:	00aa00c6 	adceq	r0, sl, r6, asr #1
 800eeec:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800eef0:	009200aa 	addseq	r0, r2, sl, lsr #1
 800eef4:	00620042 	rsbeq	r0, r2, r2, asr #32
 800eef8:	00520052 	subseq	r0, r2, r2, asr r0
 800eefc:	004a004a 	subeq	r0, sl, sl, asr #32
 800ef00:	00420046 	subeq	r0, r2, r6, asr #32
 800ef04:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ef08:	00420042 	subeq	r0, r2, r2, asr #32
 800ef0c:	00420042 	subeq	r0, r2, r2, asr #32
 800ef10:	00180024 	andseq	r0, r8, r4, lsr #32
 800ef14:	00440078 	subeq	r0, r4, r8, ror r0
 800ef18:	00440044 	subeq	r0, r4, r4, asr #32
 800ef1c:	00400078 	subeq	r0, r0, r8, ror r0
 800ef20:	00400040 	subeq	r0, r0, r0, asr #32
 800ef24:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ef28:	00420042 	subeq	r0, r2, r2, asr #32
 800ef2c:	00420042 	subeq	r0, r2, r2, asr #32
 800ef30:	001a002c 	andseq	r0, sl, ip, lsr #32
 800ef34:	00440078 	subeq	r0, r4, r8, ror r0
 800ef38:	00780044 	rsbseq	r0, r8, r4, asr #32
 800ef3c:	00480050 	subeq	r0, r8, r0, asr r0
 800ef40:	00420044 	subeq	r0, r2, r4, asr #32
 800ef44:	00440038 	subeq	r0, r4, r8, lsr r0
 800ef48:	00380040 	eorseq	r0, r8, r0, asr #32
 800ef4c:	00440004 	subeq	r0, r4, r4
 800ef50:	00380044 	eorseq	r0, r8, r4, asr #32
 800ef54:	0010007c 	andseq	r0, r0, ip, ror r0
 800ef58:	00100010 	andseq	r0, r0, r0, lsl r0
 800ef5c:	00100010 	andseq	r0, r0, r0, lsl r0
 800ef60:	00100010 	andseq	r0, r0, r0, lsl r0
 800ef64:	00420042 	subeq	r0, r2, r2, asr #32
 800ef68:	00420042 	subeq	r0, r2, r2, asr #32
 800ef6c:	00420042 	subeq	r0, r2, r2, asr #32
 800ef70:	00180024 	andseq	r0, r8, r4, lsr #32
 800ef74:	00440044 	subeq	r0, r4, r4, asr #32
 800ef78:	00280028 	eoreq	r0, r8, r8, lsr #32
 800ef7c:	00280028 	eoreq	r0, r8, r8, lsr #32
 800ef80:	00100028 	andseq	r0, r0, r8, lsr #32
 800ef84:	00aa0092 	umlaleq	r0, sl, r2, r0
 800ef88:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800ef8c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800ef90:	004400aa 	subeq	r0, r4, sl, lsr #1
 800ef94:	00240042 	eoreq	r0, r4, r2, asr #32
 800ef98:	00180024 	andseq	r0, r8, r4, lsr #32
 800ef9c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800efa0:	00420024 	subeq	r0, r2, r4, lsr #32
 800efa4:	00280044 	eoreq	r0, r8, r4, asr #32
 800efa8:	00100028 	andseq	r0, r0, r8, lsr #32
 800efac:	00100010 	andseq	r0, r0, r0, lsl r0
 800efb0:	00100010 	andseq	r0, r0, r0, lsl r0
 800efb4:	0004007c 	andeq	r0, r4, ip, ror r0
 800efb8:	00100008 	andseq	r0, r0, r8
 800efbc:	00200010 	eoreq	r0, r0, r0, lsl r0
 800efc0:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800efc4:	0010001c 	andseq	r0, r0, ip, lsl r0
 800efc8:	00100010 	andseq	r0, r0, r0, lsl r0
 800efcc:	00100010 	andseq	r0, r0, r0, lsl r0
 800efd0:	001c0010 	andseq	r0, ip, r0, lsl r0
 800efd4:	00100010 	andseq	r0, r0, r0, lsl r0
 800efd8:	00080008 	andeq	r0, r8, r8
 800efdc:	00080008 	andeq	r0, r8, r8
 800efe0:	00040004 	andeq	r0, r4, r4
 800efe4:	0004001c 	andeq	r0, r4, ip, lsl r0
 800efe8:	00040004 	andeq	r0, r4, r4
 800efec:	00040004 	andeq	r0, r4, r4
 800eff0:	001c0004 	andseq	r0, ip, r4
 800eff4:	00280010 	eoreq	r0, r8, r0, lsl r0
 800eff8:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800f014:	00100020 	andseq	r0, r0, r0, lsr #32
 800f018:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800f028:	00040018 	andeq	r0, r4, r8, lsl r0
 800f02c:	0024001c 	eoreq	r0, r4, ip, lsl r0
 800f030:	001c0024 	andseq	r0, ip, r4, lsr #32
 800f034:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f038:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f03c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f040:	00280034 	eoreq	r0, r8, r4, lsr r0
 800f044:	00000000 	andeq	r0, r0, r0
 800f048:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f04c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f050:	00180024 	andseq	r0, r8, r4, lsr #32
 800f054:	00040004 	andeq	r0, r4, r4
 800f058:	002c0014 	eoreq	r0, ip, r4, lsl r0
 800f05c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f060:	0014002c 	andseq	r0, r4, ip, lsr #32
 800f064:	00000000 	andeq	r0, r0, r0
 800f068:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f06c:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800f070:	00180024 	andseq	r0, r8, r4, lsr #32
 800f074:	00180000 	andseq	r0, r8, r0
 800f078:	00100010 	andseq	r0, r0, r0, lsl r0
 800f07c:	00100018 	andseq	r0, r0, r8, lsl r0
 800f080:	00100010 	andseq	r0, r0, r0, lsl r0
 800f084:	00180000 	andseq	r0, r8, r0
 800f088:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f08c:	00040018 	andeq	r0, r4, r8, lsl r0
 800f090:	00180024 	andseq	r0, r8, r4, lsr #32
 800f094:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f098:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f09c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f0a0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f0a4:	00000010 	andeq	r0, r0, r0, lsl r0
 800f0a8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0ac:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0b0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0b4:	00000008 	andeq	r0, r0, r8
 800f0b8:	00080008 	andeq	r0, r8, r8
 800f0bc:	00080008 	andeq	r0, r8, r8
 800f0c0:	00100028 	andseq	r0, r0, r8, lsr #32
 800f0c4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f0c8:	00280024 	eoreq	r0, r8, r4, lsr #32
 800f0cc:	00280030 	eoreq	r0, r8, r0, lsr r0
 800f0d0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f0d4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0d8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0dc:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0e0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0e4:	00000000 	andeq	r0, r0, r0
 800f0e8:	00da00a6 	sbcseq	r0, sl, r6, lsr #1
 800f0ec:	00920092 	umullseq	r0, r2, r2, r0
 800f0f0:	00920092 	umullseq	r0, r2, r2, r0
 800f0f4:	00000000 	andeq	r0, r0, r0
 800f0f8:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f0fc:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f100:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f104:	00000000 	andeq	r0, r0, r0
 800f108:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f10c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f110:	00180024 	andseq	r0, r8, r4, lsr #32
 800f114:	00280000 	eoreq	r0, r8, r0
 800f118:	00240034 	eoreq	r0, r4, r4, lsr r0
 800f11c:	00200038 	eoreq	r0, r0, r8, lsr r0
 800f120:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f124:	00140000 	andseq	r0, r4, r0
 800f128:	0024002c 	eoreq	r0, r4, ip, lsr #32
 800f12c:	0004001c 	andeq	r0, r4, ip, lsl r0
 800f130:	00040004 	andeq	r0, r4, r4
 800f134:	00000000 	andeq	r0, r0, r0
 800f138:	0030002c 	eorseq	r0, r0, ip, lsr #32
 800f13c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f140:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f144:	00000000 	andeq	r0, r0, r0
 800f148:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f14c:	00080010 	andeq	r0, r8, r0, lsl r0
 800f150:	00180024 	andseq	r0, r8, r4, lsr #32
 800f154:	00100000 	andseq	r0, r0, r0
 800f158:	00100038 	andseq	r0, r0, r8, lsr r0
 800f15c:	00100010 	andseq	r0, r0, r0, lsl r0
 800f160:	00180010 	andseq	r0, r8, r0, lsl r0
 800f164:	00000000 	andeq	r0, r0, r0
 800f168:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f16c:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f170:	0014002c 	andseq	r0, r4, ip, lsr #32
 800f174:	00000000 	andeq	r0, r0, r0
 800f178:	00440044 	subeq	r0, r4, r4, asr #32
 800f17c:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f180:	00100028 	andseq	r0, r0, r8, lsr #32
 800f184:	00000000 	andeq	r0, r0, r0
 800f188:	00aa0092 	umlaleq	r0, sl, r2, r0
 800f18c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800f190:	004400aa 	subeq	r0, r4, sl, lsr #1
 800f194:	00000000 	andeq	r0, r0, r0
 800f198:	00280044 	eoreq	r0, r8, r4, asr #32
 800f19c:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1a0:	00440028 	subeq	r0, r4, r8, lsr #32
 800f1a4:	00280000 	eoreq	r0, r8, r0
 800f1a8:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f1ac:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1b0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1b4:	00000000 	andeq	r0, r0, r0
 800f1b8:	0004003c 	andeq	r0, r4, ip, lsr r0
 800f1bc:	00100008 	andseq	r0, r0, r8
 800f1c0:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800f1c4:	00080000 	andeq	r0, r8, r0
 800f1c8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1cc:	00100020 	andseq	r0, r0, r0, lsr #32
 800f1d0:	00080010 	andeq	r0, r8, r0, lsl r0
 800f1d4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1d8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1dc:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1e0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1e4:	00100000 	andseq	r0, r0, r0
 800f1e8:	00080008 	andeq	r0, r8, r8
 800f1ec:	00080004 	andeq	r0, r8, r4
 800f1f0:	00100008 	andseq	r0, r0, r8
 800f1f4:	00000000 	andeq	r0, r0, r0
 800f1f8:	00600000 	rsbeq	r0, r0, r0
 800f1fc:	000c0092 	muleq	ip, r2, r0
 800f200:	00000000 	andeq	r0, r0, r0
 800f204:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f208:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f20c:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f210:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f214:	00000000 	andeq	r0, r0, r0

0800f218 <atanlo>:
 800f218:	222f65e2 	eorcs	r6, pc, #947912704	; 0x38800000
 800f21c:	3c7a2b7f 	ldclcc	11, cr2, [sl], #-508	; 0xfffffe04
 800f220:	33145c07 	tstcc	r4, #1792	; 0x700
 800f224:	3c81a626 	stccc	6, cr10, [r1], {38}	; 0x26
 800f228:	7af0cbbd 	bvc	7c42124 <_Min_Stack_Size+0x7c41d24>
 800f22c:	3c700788 	ldclcc	7, cr0, [r0], #-544	; 0xfffffde0
 800f230:	33145c07 	tstcc	r4, #1792	; 0x700
 800f234:	3c91a626 	ldccc	6, cr10, [r1], {38}	; 0x26

0800f238 <atanhi>:
 800f238:	0561bb4f 	strbeq	fp, [r1, #-2895]!	; 0xb4f
 800f23c:	3fddac67 	svccc	0x00ddac67
 800f240:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800f244:	3fe921fb 	svccc	0x00e921fb
 800f248:	d281f69b 	addle	pc, r1, #162529280	; 0x9b00000
 800f24c:	3fef730b 	svccc	0x00ef730b
 800f250:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800f254:	3ff921fb 	svccc	0x00f921fb
 800f258:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
 800f25c:	00000000 	andeq	r0, r0, r0
 800f260:	00776f70 	rsbseq	r6, r7, r0, ror pc
 800f264:	00000000 	andeq	r0, r0, r0

0800f268 <dp_h>:
	...
 800f270:	40000000 	andmi	r0, r0, r0
 800f274:	3fe2b803 	svccc	0x00e2b803

0800f278 <dp_l>:
	...
 800f280:	43cfd006 	bicmi	sp, pc, #6
 800f284:	3e4cfdeb 	cdpcc	13, 4, cr15, cr12, cr11, {7}

0800f288 <bp>:
 800f288:	00000000 	andeq	r0, r0, r0
 800f28c:	3ff00000 	svccc	0x00f00000	; IMB
 800f290:	00000000 	andeq	r0, r0, r0
 800f294:	3ff80000 	svccc	0x00f80000

0800f298 <TWO52>:
 800f298:	00000000 	andeq	r0, r0, r0
 800f29c:	43300000 	teqmi	r0, #0
 800f2a0:	00000000 	andeq	r0, r0, r0
 800f2a4:	c3300000 	teqgt	r0, #0
 800f2a8:	00000043 	andeq	r0, r0, r3, asr #32

0800f2ac <_global_impure_ptr>:
 800f2ac:	20000068 	andcs	r0, r0, r8, rrx

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000004 <AHBPrescTable>:
	...
2000000c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000010:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000024 <GPIO_PORT>:
20000024:	40021800 	andmi	r1, r2, r0, lsl #16
20000028:	40021800 	andmi	r1, r2, r0, lsl #16

2000002c <BUTTON_PORT>:
2000002c:	40020000 	andmi	r0, r2, r0

20000030 <L3GD20Timeout>:
20000030:	00001000 	andeq	r1, r0, r0

20000034 <Font16x24>:
20000034:	0800c844 	stmdaeq	r0, {r2, r6, fp, lr, pc}
20000038:	00180010 	andseq	r0, r8, r0, lsl r0

2000003c <Font12x12>:
2000003c:	0800da14 	stmdaeq	r0, {r2, r4, r9, fp, ip, lr, pc}
20000040:	000c000c 	andeq	r0, ip, ip

20000044 <Font8x12>:
20000044:	0800e314 	stmdaeq	r0, {r2, r4, r8, r9, sp, lr, pc}
20000048:	000c0008 	andeq	r0, ip, r8

2000004c <Font8x8>:
2000004c:	0800ec14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr, pc}
20000050:	00080008 	andeq	r0, r8, r8

20000054 <CurrentBackColor>:
20000054:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000058 <CurrentFrameBuffer>:
20000058:	d0000000 	andle	r0, r0, r0

2000005c <IOE_TimeOut>:
2000005c:	00003000 	andeq	r3, r0, r0

20000060 <__fdlib_version>:
20000060:	00000001 	andeq	r0, r0, r1
20000064:	00000000 	andeq	r0, r0, r0

20000068 <impure_data>:
20000068:	00000000 	andeq	r0, r0, r0
2000006c:	20000354 	andcs	r0, r0, r4, asr r3
20000070:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
20000074:	20000424 	andcs	r0, r0, r4, lsr #8
	...
2000009c:	0800f2a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp, lr, pc}
	...
20000110:	00000001 	andeq	r0, r0, r1
20000114:	00000000 	andeq	r0, r0, r0
20000118:	abcd330e 	blge	1f34cd58 <_eccmram+0xf34cd58>
2000011c:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
20000120:	0005deec 	andeq	sp, r5, ip, ror #29
20000124:	0000000b 	andeq	r0, r0, fp
	...

20000490 <_impure_ptr>:
20000490:	20000068 	andcs	r0, r0, r8, rrx

Disassembly of section .bss:

20000494 <__bss_start__>:
	...

200004d0 <NVIC_InitStructure>:
200004d0:	00000000 	andeq	r0, r0, r0

200004d4 <LCD_Currentfonts>:
200004d4:	00000000 	andeq	r0, r0, r0

200004d8 <CurrentTextColor>:
200004d8:	00000000 	andeq	r0, r0, r0

200004dc <CurrentLayer>:
200004dc:	00000000 	andeq	r0, r0, r0

200004e0 <TP_State>:
	...

200004e8 <_x.7853>:
200004e8:	00000000 	andeq	r0, r0, r0

200004ec <_y.7854>:
200004ec:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

200004f0 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	12060a02 	andne	r0, r6, #8192	; 0x2000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1b011a01 	blne	46838 <_Min_Stack_Size+0x46438>
  30:	22061e03 	andcs	r1, r6, #3, 28	; 0x30
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000100 	andeq	r0, r0, r0, lsl #2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000021 	andeq	r0, r0, r1, lsr #32
      10:	00013801 	andeq	r3, r1, r1, lsl #16
      14:	00010c00 	andeq	r0, r1, r0, lsl #24
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000145 	andeq	r0, r0, r5, asr #2
      2c:	43080102 	movwmi	r0, #33026	; 0x8102
      30:	02000001 	andeq	r0, r0, #1
      34:	017f0502 	cmneq	pc, r2, lsl #10
      38:	02020000 	andeq	r0, r2, #0
      3c:	00000e07 	andeq	r0, r0, r7, lsl #28
      40:	016f0300 	cmneq	pc, r0, lsl #6
      44:	3f020000 	svccc	0x00020000
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	05050402 	streq	r0, [r5, #-1026]	; 0x402
      50:	02000000 	andeq	r0, r0, #0
      54:	01260704 	teqeq	r6, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	00000005 	andeq	r0, r0, r5
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	00000121 	andeq	r0, r0, r1, lsr #2
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	012b0704 	teqeq	fp, r4, lsl #14
      74:	04020000 	streq	r0, [r2], #-0
      78:	00019207 	andeq	r9, r1, r7, lsl #4
      7c:	08010200 	stmdaeq	r1, {r9}
      80:	0000014c 	andeq	r0, r0, ip, asr #2
      84:	68040802 	stmdavs	r4, {r1, fp}
      88:	02000001 	andeq	r0, r0, #1
      8c:	01790404 	cmneq	r9, r4, lsl #8
      90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      94:	00016304 	andeq	r6, r1, r4, lsl #6
      98:	01710300 	cmneq	r1, r0, lsl #6
      9c:	41030000 	mrsmi	r0, (UNDEF: 3)
      a0:	00000041 	andeq	r0, r0, r1, asr #32
      a4:	00009905 	andeq	r9, r0, r5, lsl #18
      a8:	01510600 	cmpeq	r1, r0, lsl #12
      ac:	1a010000 	bne	400b4 <_Min_Stack_Size+0x3fcb4>
      b0:	00000068 	andeq	r0, r0, r8, rrx
      b4:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      b8:	00000040 	andeq	r0, r0, r0, asr #32
      bc:	00e79c01 	rsceq	r9, r7, r1, lsl #24
      c0:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
      c4:	01000001 	tsteq	r0, r1
      c8:	0000e71d 	andeq	lr, r0, sp, lsl r7
      cc:	68910200 	ldmvs	r1, {r9}
      d0:	000b2e08 	andeq	r2, fp, r8, lsl #28
      d4:	00001408 	andeq	r1, r0, r8, lsl #8
      d8:	00690900 	rsbeq	r0, r9, r0, lsl #18
      dc:	00682701 	rsbeq	r2, r8, r1, lsl #14
      e0:	91020000 	mrsls	r0, (UNDEF: 2)
      e4:	0a000074 	beq	2bc <_Min_Heap_Size+0x2bc>
      e8:	0000008b 	andeq	r0, r0, fp, lsl #1
      ec:	000000f7 	strdeq	r0, [r0], -r7
      f0:	0000760b 	andeq	r7, r0, fp, lsl #12
      f4:	0c000200 	sfmeq	f0, 4, [r0], {-0}
      f8:	00000156 	andeq	r0, r0, r6, asr r1
      fc:	a406a704 	strge	sl, [r6], #-1796	; 0x704
     100:	00000000 	andeq	r0, r0, r0
     104:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     108:	00a20004 	adceq	r0, r2, r4
     10c:	01040000 	mrseq	r0, (UNDEF: 4)
     110:	00000021 	andeq	r0, r0, r1, lsr #32
     114:	0001ff01 	andeq	pc, r1, r1, lsl #30
     118:	00010c00 	andeq	r0, r1, r0, lsl #24
     11c:	00001000 	andeq	r1, r0, r0
     120:	00000000 	andeq	r0, r0, r0
     124:	0000d800 	andeq	sp, r0, r0, lsl #16
     128:	06010200 	streq	r0, [r1], -r0, lsl #4
     12c:	00000145 	andeq	r0, r0, r5, asr #2
     130:	0001ae03 	andeq	sl, r1, r3, lsl #28
     134:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     138:	02000000 	andeq	r0, r0, #0
     13c:	01430801 	cmpeq	r3, r1, lsl #16
     140:	02020000 	andeq	r0, r2, #0
     144:	00017f05 	andeq	r7, r1, r5, lsl #30
     148:	07020200 	streq	r0, [r2, -r0, lsl #4]
     14c:	0000000e 	andeq	r0, r0, lr
     150:	00016f03 	andeq	r6, r1, r3, lsl #30
     154:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
     158:	02000000 	andeq	r0, r0, #0
     15c:	00050504 	andeq	r0, r5, r4, lsl #10
     160:	04020000 	streq	r0, [r2], #-0
     164:	00012607 	andeq	r2, r1, r7, lsl #12
     168:	05080200 	streq	r0, [r8, #-512]	; 0x200
     16c:	00000000 	andeq	r0, r0, r0
     170:	21070802 	tstcs	r7, r2, lsl #16
     174:	04000001 	streq	r0, [r0], #-1
     178:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     17c:	04020074 	streq	r0, [r2], #-116	; 0x74
     180:	00012b07 	andeq	r2, r1, r7, lsl #22
     184:	07040200 	streq	r0, [r4, -r0, lsl #4]
     188:	00000192 	muleq	r0, r2, r1
     18c:	4c080102 	stfmis	f0, [r8], {2}
     190:	02000001 	andeq	r0, r0, #1
     194:	01680408 	cmneq	r8, r8, lsl #8
     198:	04020000 	streq	r0, [r2], #-0
     19c:	00017904 	andeq	r7, r1, r4, lsl #18
     1a0:	04080200 	streq	r0, [r8], #-512	; 0x200
     1a4:	00000163 	andeq	r0, r0, r3, ror #2
     1a8:	0001b003 	andeq	fp, r1, r3
     1ac:	2c2a0300 	stccs	3, cr0, [sl], #-0
     1b0:	03000000 	movweq	r0, #0
     1b4:	00000171 	andeq	r0, r0, r1, ror r1
     1b8:	004c4103 	subeq	r4, ip, r3, lsl #2
     1bc:	af050000 	svcge	0x00050000
     1c0:	06000000 	streq	r0, [r0], -r0
     1c4:	1c400407 	cfstrdne	mvd0, [r0], {7}
     1c8:	07000001 	streq	r0, [r0, -r1]
     1cc:	00000219 	andeq	r0, r0, r9, lsl r2
     1d0:	00a44204 	adceq	r4, r4, r4, lsl #4
     1d4:	07000000 	streq	r0, [r0, -r0]
     1d8:	00000267 	andeq	r0, r0, r7, ror #4
     1dc:	00a44304 	adceq	r4, r4, r4, lsl #6
     1e0:	07010000 	streq	r0, [r1, -r0]
     1e4:	0000022f 	andeq	r0, r0, pc, lsr #4
     1e8:	00a44404 	adceq	r4, r4, r4, lsl #8
     1ec:	07020000 	streq	r0, [r2, -r0]
     1f0:	000001e0 	andeq	r0, r0, r0, ror #3
     1f4:	00a44504 	adceq	r4, r4, r4, lsl #10
     1f8:	07030000 	streq	r0, [r3, -r0]
     1fc:	0000028c 	andeq	r0, r0, ip, lsl #5
     200:	00a44604 	adceq	r4, r4, r4, lsl #12
     204:	07040000 	streq	r0, [r4, -r0]
     208:	00000224 	andeq	r0, r0, r4, lsr #4
     20c:	00a44704 	adceq	r4, r4, r4, lsl #14
     210:	07050000 	streq	r0, [r5, -r0]
     214:	000001f4 	strdeq	r0, [r0], -r4
     218:	00a44804 	adceq	r4, r4, r4, lsl #16
     21c:	00060000 	andeq	r0, r6, r0
     220:	00019b03 	andeq	r9, r1, r3, lsl #22
     224:	bf490400 	svclt	0x00490400
     228:	06000000 	streq	r0, [r0], -r0
     22c:	484c0402 	stmdami	ip, {r1, sl}^
     230:	07000001 	streq	r0, [r0, -r1]
     234:	000002e0 	andeq	r0, r0, r0, ror #5
     238:	00a44e04 	adceq	r4, r4, r4, lsl #28
     23c:	07000000 	streq	r0, [r0, -r0]
     240:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     244:	00a44f04 	adceq	r4, r4, r4, lsl #30
     248:	00010000 	andeq	r0, r1, r0
     24c:	0002c503 	andeq	ip, r2, r3, lsl #10
     250:	27500400 	ldrbcs	r0, [r0, -r0, lsl #8]
     254:	08000001 	stmdaeq	r0, {r0}
     258:	00000252 	andeq	r0, r0, r2, asr r2
     25c:	0b481601 	bleq	1205a68 <_Min_Stack_Size+0x1205668>
     260:	00480800 	subeq	r0, r8, r0, lsl #16
     264:	9c010000 	stcls	0, cr0, [r1], {-0}
     268:	00000185 	andeq	r0, r0, r5, lsl #3
     26c:	00027709 	andeq	r7, r2, r9, lsl #14
     270:	1c190100 	ldfnes	f0, [r9], {-0}
     274:	02000001 	andeq	r0, r0, #1
     278:	9d097091 	stcls	0, cr7, [r9, #-580]	; 0xfffffdbc
     27c:	01000002 	tsteq	r0, r2
     280:	0001481a 	andeq	r4, r1, sl, lsl r8
     284:	6c910200 	lfmvs	f0, 4, [r1], {0}
     288:	02420800 	subeq	r0, r2, #0, 16
     28c:	30010000 	andcc	r0, r1, r0
     290:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
     294:	00000124 	andeq	r0, r0, r4, lsr #2
     298:	01df9c01 	bicseq	r9, pc, r1, lsl #24
     29c:	3b0a0000 	blcc	2802a4 <_Min_Stack_Size+0x27fea4>
     2a0:	01000002 	tsteq	r0, r2
     2a4:	0001df30 	andeq	sp, r1, r0, lsr pc
     2a8:	5c910200 	lfmpl	f0, 4, [r1], {0}
     2ac:	0002b409 	andeq	fp, r2, r9, lsl #8
     2b0:	e5320100 	ldr	r0, [r2, #-256]!	; 0x100
     2b4:	02000001 	andeq	r0, r0, #1
     2b8:	d8096c91 	stmdale	r9, {r0, r4, r7, sl, fp, sp, lr}
     2bc:	01000001 	tsteq	r0, r1
     2c0:	0001f533 	andeq	pc, r1, r3, lsr r5	; <UNPREDICTABLE>
     2c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     2c8:	0002be09 	andeq	fp, r2, r9, lsl #28
     2cc:	37340100 	ldrcc	r0, [r4, -r0, lsl #2]!
     2d0:	02000000 	andeq	r0, r0, #0
     2d4:	690b6391 	stmdbvs	fp, {r0, r4, r7, r8, r9, sp, lr}
     2d8:	73350100 	teqvc	r5, #0, 2
     2dc:	02000000 	andeq	r0, r0, #0
     2e0:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     2e4:	00009604 	andeq	r9, r0, r4, lsl #12
     2e8:	00370d00 	eorseq	r0, r7, r0, lsl #26
     2ec:	01f50000 	mvnseq	r0, r0
     2f0:	810e0000 	mrshi	r0, (UNDEF: 14)
     2f4:	05000000 	streq	r0, [r0, #-0]
     2f8:	003e0d00 	eorseq	r0, lr, r0, lsl #26
     2fc:	02050000 	andeq	r0, r5, #0
     300:	810e0000 	mrshi	r0, (UNDEF: 14)
     304:	02000000 	andeq	r0, r0, #0
     308:	020e0800 	andeq	r0, lr, #0, 16
     30c:	53010000 	movwpl	r0, #4096	; 0x1000
     310:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
     314:	000003ec 	andeq	r0, r0, ip, ror #7
     318:	02769c01 	rsbseq	r9, r6, #256	; 0x100
     31c:	eb0a0000 	bl	280324 <_Min_Stack_Size+0x27ff24>
     320:	01000001 	tsteq	r0, r1
     324:	0001df53 	andeq	sp, r1, r3, asr pc
     328:	a4910300 	ldrge	r0, [r1], #768	; 0x300
     32c:	0189097f 	orreq	r0, r9, pc, ror r9
     330:	55010000 	strpl	r0, [r1, #-0]
     334:	00000276 	andeq	r0, r0, r6, ror r2
     338:	0b4c9102 	bleq	1324748 <_Min_Stack_Size+0x1324348>
     33c:	01007464 	tsteq	r0, r4, ror #8
     340:	00009656 	andeq	r9, r0, r6, asr r6
     344:	58910200 	ldmpl	r1, {r9}
     348:	0100450b 	tsteq	r0, fp, lsl #10
     34c:	00028657 	andeq	r8, r2, r7, asr r6
     350:	bc910300 	ldclt	3, cr0, [r1], {0}
     354:	45640b7f 	strbmi	r0, [r4, #-2943]!	; 0xb7f
     358:	86580100 	ldrbhi	r0, [r8], -r0, lsl #2
     35c:	03000002 	movweq	r0, #2
     360:	0f7fac91 	svceq	0x007fac91
     364:	08000dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp}
     368:	00000052 	andeq	r0, r0, r2, asr r0
     36c:	0100690b 	tsteq	r0, fp, lsl #18
     370:	00007363 	andeq	r7, r0, r3, ror #6
     374:	5c910200 	lfmpl	f0, 4, [r1], {0}
     378:	960d0000 	strls	r0, [sp], -r0
     37c:	86000000 	strhi	r0, [r0], -r0
     380:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     384:	00000081 	andeq	r0, r0, r1, lsl #1
     388:	960d0002 	strls	r0, [sp], -r2
     38c:	96000000 	strls	r0, [r0], -r0
     390:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     394:	00000081 	andeq	r0, r0, r1, lsl #1
     398:	56100003 	ldrpl	r0, [r0], -r3
     39c:	05000001 	streq	r0, [r0, #-1]
     3a0:	00ba06a7 	adcseq	r0, sl, r7, lsr #13
     3a4:	67000000 	strvs	r0, [r0, -r0]
     3a8:	02000000 	andeq	r0, r0, #0
     3ac:	00017800 	andeq	r7, r1, r0, lsl #16
     3b0:	86010400 	strhi	r0, [r1], -r0, lsl #8
     3b4:	30000002 	andcc	r0, r0, r2
     3b8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     3bc:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
     3c0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     3c4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     3c8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     3cc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3d0:	74732f34 	ldrbtvc	r2, [r3], #-3892	; 0xf34
     3d4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
     3d8:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
     3dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     3e0:	5f393234 	svcpl	0x00393234
     3e4:	78393334 	ldmdavc	r9!, {r2, r4, r5, r8, r9, ip, sp}
     3e8:	00732e78 	rsbseq	r2, r3, r8, ror lr
     3ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 338 <_Min_Heap_Size+0x338>
     3f0:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     3f4:	2f686569 	svccs	0x00686569
     3f8:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     3fc:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     400:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     404:	20534120 	subscs	r4, r3, r0, lsr #2
     408:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
     40c:	0031352e 	eorseq	r3, r1, lr, lsr #10
     410:	05b98001 	ldreq	r8, [r9, #1]!
     414:	00040000 	andeq	r0, r4, r0
     418:	0000018a 	andeq	r0, r0, sl, lsl #3
     41c:	00210104 	eoreq	r0, r1, r4, lsl #2
     420:	46010000 	strmi	r0, [r1], -r0
     424:	0c000003 	stceq	0, cr0, [r0], {3}
     428:	50000001 	andpl	r0, r0, r1
     42c:	00000000 	andeq	r0, r0, r0
     430:	12000000 	andne	r0, r0, #0
     434:	02000003 	andeq	r0, r0, #3
     438:	01450601 	cmpeq	r5, r1, lsl #12
     43c:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     440:	02000001 	andeq	r0, r0, #1
     444:	0000371d 	andeq	r3, r0, sp, lsl r7
     448:	08010200 	stmdaeq	r1, {r9}
     44c:	00000143 	andeq	r0, r0, r3, asr #2
     450:	7f050202 	svcvc	0x00050202
     454:	03000001 	movweq	r0, #1
     458:	00000378 	andeq	r0, r0, r8, ror r3
     45c:	00502b02 	subseq	r2, r0, r2, lsl #22
     460:	02020000 	andeq	r0, r2, #0
     464:	00000e07 	andeq	r0, r0, r7, lsl #28
     468:	016f0300 	cmneq	pc, r0, lsl #6
     46c:	3f020000 	svccc	0x00020000
     470:	00000062 	andeq	r0, r0, r2, rrx
     474:	05050402 	streq	r0, [r5, #-1026]	; 0x402
     478:	03000000 	movweq	r0, #0
     47c:	000004f4 	strdeq	r0, [r0], -r4
     480:	00744102 	rsbseq	r4, r4, r2, lsl #2
     484:	04020000 	streq	r0, [r2], #-0
     488:	00012607 	andeq	r2, r1, r7, lsl #12
     48c:	05080200 	streq	r0, [r8, #-512]	; 0x200
     490:	00000000 	andeq	r0, r0, r0
     494:	21070802 	tstcs	r7, r2, lsl #16
     498:	04000001 	streq	r0, [r0], #-1
     49c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     4a0:	04020074 	streq	r0, [r2], #-116	; 0x74
     4a4:	00012b07 	andeq	r2, r1, r7, lsl #22
     4a8:	01b00300 	lslseq	r0, r0, #6
     4ac:	2a030000 	bcs	c04b4 <_Min_Stack_Size+0xc00b4>
     4b0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4b4:	00037a03 	andeq	r7, r3, r3, lsl #20
     4b8:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
     4bc:	03000000 	movweq	r0, #0
     4c0:	00000171 	andeq	r0, r0, r1, ror r1
     4c4:	00574103 	subseq	r4, r7, r3, lsl #2
     4c8:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
     4cc:	03000004 	movweq	r0, #4
     4d0:	00006942 	andeq	r6, r0, r2, asr #18
     4d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     4d8:	00000192 	muleq	r0, r2, r1
     4dc:	0000b805 	andeq	fp, r0, r5, lsl #16
     4e0:	048c0600 	streq	r0, [ip], #1536	; 0x600
     4e4:	01ea0170 	mvneq	r0, r0, ror r1
     4e8:	93070000 	movwls	r0, #28672	; 0x7000
     4ec:	04000003 	streq	r0, [r0], #-3
     4f0:	01ea0172 	mvneq	r0, r2, ror r1
     4f4:	07000000 	streq	r0, [r0, -r0]
     4f8:	000003cf 	andeq	r0, r0, pc, asr #7
     4fc:	ca017304 	bgt	5d114 <_Min_Stack_Size+0x5cd14>
     500:	04000000 	streq	r0, [r0], #-0
     504:	00047907 	andeq	r7, r4, r7, lsl #18
     508:	01740400 	cmneq	r4, r0, lsl #8
     50c:	000000ca 	andeq	r0, r0, sl, asr #1
     510:	041e0708 	ldreq	r0, [lr], #-1800	; 0x708
     514:	75040000 	strvc	r0, [r4, #-0]
     518:	0000ca01 	andeq	ip, r0, r1, lsl #20
     51c:	53080c00 	movwpl	r0, #35840	; 0x8c00
     520:	04005243 	streq	r5, [r0], #-579	; 0x243
     524:	00ca0176 	sbceq	r0, sl, r6, ror r1
     528:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     52c:	00524343 	subseq	r4, r2, r3, asr #6
     530:	ca017704 	bgt	5e148 <_Min_Stack_Size+0x5dd48>
     534:	14000000 	strne	r0, [r0], #-0
     538:	50485308 	subpl	r5, r8, r8, lsl #6
     53c:	01780400 	cmneq	r8, r0, lsl #8
     540:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     544:	043b0718 	ldrteq	r0, [fp], #-1816	; 0x718
     548:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     54c:	0000ca01 	andeq	ip, r0, r1, lsl #20
     550:	f6072400 			; <UNDEFINED> instruction: 0xf6072400
     554:	04000003 	streq	r0, [r0], #-3
     558:	00ca017a 	sbceq	r0, sl, sl, ror r1
     55c:	07280000 	streq	r0, [r8, -r0]!
     560:	00000498 	muleq	r0, r8, r4
     564:	ca017b04 	bgt	5f17c <_Min_Stack_Size+0x5ed7c>
     568:	2c000000 	stccs	0, cr0, [r0], {-0}
     56c:	00048307 	andeq	r8, r4, r7, lsl #6
     570:	017c0400 	cmneq	ip, r0, lsl #8
     574:	000000ca 	andeq	r0, r0, sl, asr #1
     578:	04570730 	ldrbeq	r0, [r7], #-1840	; 0x730
     57c:	7d040000 	stcvc	0, cr0, [r4, #-0]
     580:	0000ca01 	andeq	ip, r0, r1, lsl #20
     584:	dc073400 	cfstrsle	mvf3, [r7], {-0}
     588:	04000003 	streq	r0, [r0], #-3
     58c:	00ca017e 	sbceq	r0, sl, lr, ror r1
     590:	07380000 	ldreq	r0, [r8, -r0]!
     594:	00000507 	andeq	r0, r0, r7, lsl #10
     598:	ca017f04 	bgt	601b0 <_Min_Stack_Size+0x5fdb0>
     59c:	3c000000 	stccc	0, cr0, [r0], {-0}
     5a0:	52465008 	subpl	r5, r6, #8
     5a4:	01800400 	orreq	r0, r0, r0, lsl #8
     5a8:	00000214 	andeq	r0, r0, r4, lsl r2
     5ac:	46440840 	strbmi	r0, [r4], -r0, asr #16
     5b0:	81040052 	qaddhi	r0, r2, r4
     5b4:	0001ea01 	andeq	lr, r1, r1, lsl #20
     5b8:	41084800 	tstmi	r8, r0, lsl #16
     5bc:	04005244 	streq	r5, [r0], #-580	; 0x244
     5c0:	01ea0182 	mvneq	r0, r2, lsl #3
     5c4:	074c0000 	strbeq	r0, [ip, -r0]
     5c8:	000004a7 	andeq	r0, r0, r7, lsr #9
     5cc:	2e018304 	cdpcs	3, 0, cr8, cr1, cr4, {0}
     5d0:	50000002 	andpl	r0, r0, r2
     5d4:	00047e07 	andeq	r7, r4, r7, lsl #28
     5d8:	01840400 	orreq	r0, r4, r0, lsl #8
     5dc:	00000248 	andeq	r0, r0, r8, asr #4
     5e0:	04ac0760 	strteq	r0, [ip], #1888	; 0x760
     5e4:	85040000 	strhi	r0, [r4, #-0]
     5e8:	00023801 	andeq	r3, r2, r1, lsl #16
     5ec:	2e077400 	cfcpyscs	mvf7, mvf7
     5f0:	04000005 	streq	r0, [r0], #-5
     5f4:	00ca0186 	sbceq	r0, sl, r6, lsl #3
     5f8:	00880000 	addeq	r0, r8, r0
     5fc:	0000ca09 	andeq	ip, r0, r9, lsl #20
     600:	00970a00 	addseq	r0, r7, r0, lsl #20
     604:	01ff0000 	mvnseq	r0, r0
     608:	c30b0000 	movwgt	r0, #45056	; 0xb000
     60c:	0b000000 	bleq	614 <_Min_Stack_Size+0x214>
     610:	01ef0500 	mvneq	r0, r0, lsl #10
     614:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     618:	14000000 	strne	r0, [r0], #-0
     61c:	0b000002 	bleq	62c <_Min_Stack_Size+0x22c>
     620:	000000c3 	andeq	r0, r0, r3, asr #1
     624:	19090001 	stmdbne	r9, {r0}
     628:	05000002 	streq	r0, [r0, #-2]
     62c:	00000204 	andeq	r0, r0, r4, lsl #4
     630:	0000b80a 	andeq	fp, r0, sl, lsl #16
     634:	00022e00 	andeq	r2, r2, r0, lsl #28
     638:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     63c:	00030000 	andeq	r0, r3, r0
     640:	00023309 	andeq	r3, r2, r9, lsl #6
     644:	021e0500 	andseq	r0, lr, #0, 10
     648:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     64c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     650:	0b000002 	bleq	660 <_Min_Stack_Size+0x260>
     654:	000000c3 	andeq	r0, r0, r3, asr #1
     658:	4d090004 	stcmi	0, cr0, [r9, #-16]
     65c:	05000002 	streq	r0, [r0, #-2]
     660:	00000238 	andeq	r0, r0, r8, lsr r2
     664:	0003b60c 	andeq	fp, r3, ip, lsl #12
     668:	01870400 	orreq	r0, r7, r0, lsl #8
     66c:	000000cf 	andeq	r0, r0, pc, asr #1
     670:	0000ad05 	andeq	sl, r0, r5, lsl #26
     674:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
     678:	027901f7 	rsbseq	r0, r9, #-1073741763	; 0xc000003d
     67c:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
     680:	00000007 	andeq	r0, r0, r7
     684:	5445530f 	strbpl	r5, [r5], #-783	; 0x30f
     688:	06000100 	streq	r0, [r0], -r0, lsl #2
     68c:	033e051c 	teqeq	lr, #28, 10	; 0x7000000
     690:	000002dc 	ldrdeq	r0, [r0], -ip
     694:	52434108 	subpl	r4, r3, #8, 2
     698:	03400500 	movteq	r0, #1280	; 0x500
     69c:	000000ca 	andeq	r0, r0, sl, asr #1
     6a0:	03d70700 	bicseq	r0, r7, #0, 14
     6a4:	41050000 	mrsmi	r0, (UNDEF: 5)
     6a8:	0000ca03 	andeq	ip, r0, r3, lsl #20
     6ac:	d4070400 	strle	r0, [r7], #-1024	; 0x400
     6b0:	05000003 	streq	r0, [r0, #-3]
     6b4:	00ca0342 	sbceq	r0, sl, r2, asr #6
     6b8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     6bc:	05005253 	streq	r5, [r0, #-595]	; 0x253
     6c0:	00ca0343 	sbceq	r0, sl, r3, asr #6
     6c4:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     6c8:	05005243 	streq	r5, [r0, #-579]	; 0x243
     6cc:	00ca0344 	sbceq	r0, sl, r4, asr #6
     6d0:	07100000 	ldreq	r0, [r0, -r0]
     6d4:	0000053e 	andeq	r0, r0, lr, lsr r5
     6d8:	ca034505 	bgt	d1af4 <_Min_Stack_Size+0xd16f4>
     6dc:	14000000 	strne	r0, [r0], #-0
     6e0:	0003fb07 	andeq	pc, r3, r7, lsl #22
     6e4:	03460500 	movteq	r0, #25856	; 0x6500
     6e8:	000000ca 	andeq	r0, r0, sl, asr #1
     6ec:	150c0018 	strne	r0, [ip, #-24]
     6f0:	05000005 	streq	r0, [r0, #-5]
     6f4:	02790347 	rsbseq	r0, r9, #469762049	; 0x1c000001
     6f8:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     6fc:	0b044b05 	bleq	113318 <_Min_Stack_Size+0x112f18>
     700:	08000003 	stmdaeq	r0, {r0, r1}
     704:	05005243 	streq	r5, [r0, #-579]	; 0x243
     708:	00ca044d 	sbceq	r0, sl, sp, asr #8
     70c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     710:	00525343 	subseq	r5, r2, r3, asr #6
     714:	ca044e05 	bgt	113f30 <_Min_Stack_Size+0x113b30>
     718:	04000000 	streq	r0, [r0], #-0
     71c:	033a0c00 	teqeq	sl, #0, 24
     720:	4f050000 	svcmi	0x00050000
     724:	0002e804 	andeq	lr, r2, r4, lsl #16
     728:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
     72c:	04c00455 	strbeq	r0, [r0], #1109	; 0x455
     730:	43080000 	movwmi	r0, #32768	; 0x8000
     734:	57050052 	smlsdpl	r5, r2, r0, r0
     738:	0000ca04 	andeq	ip, r0, r4, lsl #20
     73c:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
     740:	05000003 	streq	r0, [r0, #-3]
     744:	00ca0458 	sbceq	r0, sl, r8, asr r4
     748:	07040000 	streq	r0, [r4, -r0]
     74c:	00000529 	andeq	r0, r0, r9, lsr #10
     750:	ca045905 	bgt	116b6c <_Min_Stack_Size+0x11676c>
     754:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     758:	52494308 	subpl	r4, r9, #8, 6	; 0x20000000
     75c:	045a0500 	ldrbeq	r0, [sl], #-1280	; 0x500
     760:	000000ca 	andeq	r0, r0, sl, asr #1
     764:	0399070c 	orrseq	r0, r9, #12, 14	; 0x300000
     768:	5b050000 	blpl	140770 <_Min_Stack_Size+0x140370>
     76c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     770:	21071000 	mrscs	r1, (UNDEF: 7)
     774:	05000003 	streq	r0, [r0, #-3]
     778:	00ca045c 	sbceq	r0, sl, ip, asr r4
     77c:	07140000 	ldreq	r0, [r4, -r0]
     780:	0000050c 	andeq	r0, r0, ip, lsl #10
     784:	ca045d05 	bgt	117ba0 <_Min_Stack_Size+0x1177a0>
     788:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     78c:	0004ac07 	andeq	sl, r4, r7, lsl #24
     790:	045e0500 	ldrbeq	r0, [lr], #-1280	; 0x500
     794:	000000b8 	strheq	r0, [r0], -r8
     798:	0310071c 	tsteq	r0, #28, 14	; 0x700000
     79c:	5f050000 	svcpl	0x00050000
     7a0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     7a4:	ed072000 	stc	0, cr2, [r7, #-0]
     7a8:	05000003 	streq	r0, [r0, #-3]
     7ac:	00ca0460 	sbceq	r0, sl, r0, ror #8
     7b0:	07240000 	streq	r0, [r4, -r0]!
     7b4:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
     7b8:	04046105 	streq	r6, [r4], #-261	; 0x105
     7bc:	28000002 	stmdacs	r0, {r1}
     7c0:	0004ff07 	andeq	pc, r4, r7, lsl #30
     7c4:	04620500 	strbteq	r0, [r2], #-1280	; 0x500
     7c8:	000000ca 	andeq	r0, r0, sl, asr #1
     7cc:	03190730 	tsteq	r9, #48, 14	; 0xc00000
     7d0:	63050000 	movwvs	r0, #20480	; 0x5000
     7d4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     7d8:	0c073400 	cfstrseq	mvf3, [r7], {-0}
     7dc:	05000004 	streq	r0, [r0, #-4]
     7e0:	00ca0464 	sbceq	r0, sl, r4, ror #8
     7e4:	07380000 	ldreq	r0, [r8, -r0]!
     7e8:	000004c0 	andeq	r0, r0, r0, asr #9
     7ec:	b8046505 	stmdalt	r4, {r0, r2, r8, sl, sp, lr}
     7f0:	3c000000 	stccc	0, cr0, [r0], {-0}
     7f4:	0003bf07 	andeq	fp, r3, r7, lsl #30
     7f8:	04660500 	strbteq	r0, [r6], #-1280	; 0x500
     7fc:	000000ca 	andeq	r0, r0, sl, asr #1
     800:	04240740 	strteq	r0, [r4], #-1856	; 0x740
     804:	67050000 	strvs	r0, [r5, -r0]
     808:	0000ca04 	andeq	ip, r0, r4, lsl #20
     80c:	ac074400 	cfstrsge	mvf4, [r7], {-0}
     810:	05000003 	streq	r0, [r0, #-3]
     814:	02040468 	andeq	r0, r4, #104, 8	; 0x68000000
     818:	07480000 	strbeq	r0, [r8, -r0]
     81c:	000002fe 	strdeq	r0, [r0], -lr
     820:	ca046905 	bgt	11ac3c <_Min_Stack_Size+0x11a83c>
     824:	50000000 	andpl	r0, r0, r0
     828:	00049d07 	andeq	r9, r4, r7, lsl #26
     82c:	046a0500 	strbteq	r0, [sl], #-1280	; 0x500
     830:	000000ca 	andeq	r0, r0, sl, asr #1
     834:	03a20754 			; <UNDEFINED> instruction: 0x03a20754
     838:	6b050000 	blvs	140840 <_Min_Stack_Size+0x140440>
     83c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     840:	d6075800 	strle	r5, [r7], -r0, lsl #16
     844:	05000004 	streq	r0, [r0, #-4]
     848:	00b8046c 	adcseq	r0, r8, ip, ror #8
     84c:	075c0000 	ldrbeq	r0, [ip, -r0]
     850:	00000468 	andeq	r0, r0, r8, ror #8
     854:	ca046d05 	bgt	11bc70 <_Min_Stack_Size+0x11b870>
     858:	60000000 	andvs	r0, r0, r0
     85c:	00053407 	andeq	r3, r5, r7, lsl #8
     860:	046e0500 	strbteq	r0, [lr], #-1280	; 0x500
     864:	000000ca 	andeq	r0, r0, sl, asr #1
     868:	04e00764 	strbteq	r0, [r0], #1892	; 0x764
     86c:	6f050000 	svcvs	0x00050000
     870:	00020404 	andeq	r0, r2, r4, lsl #8
     874:	2a076800 	bcs	1da87c <_Min_Stack_Size+0x1da47c>
     878:	05000003 	streq	r0, [r0, #-3]
     87c:	00ca0470 	sbceq	r0, sl, r0, ror r4
     880:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
     884:	00525343 	subseq	r5, r2, r3, asr #6
     888:	ca047105 	bgt	11cca4 <_Min_Stack_Size+0x11c8a4>
     88c:	74000000 	strvc	r0, [r0], #-0
     890:	0004ea07 	andeq	lr, r4, r7, lsl #20
     894:	04720500 	ldrbteq	r0, [r2], #-1280	; 0x500
     898:	00000204 	andeq	r0, r0, r4, lsl #4
     89c:	03830778 	orreq	r0, r3, #120, 14	; 0x1e00000
     8a0:	73050000 	movwvc	r0, #20480	; 0x5000
     8a4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     8a8:	2f078000 	svccs	0x00078000
     8ac:	05000003 	streq	r0, [r0, #-3]
     8b0:	00ca0474 	sbceq	r0, sl, r4, ror r4
     8b4:	07840000 	streq	r0, [r4, r0]
     8b8:	00000523 	andeq	r0, r0, r3, lsr #10
     8bc:	ca047505 	bgt	11dcd8 <_Min_Stack_Size+0x11d8d8>
     8c0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     8c4:	0003c707 	andeq	ip, r3, r7, lsl #14
     8c8:	04760500 	ldrbteq	r0, [r6], #-1280	; 0x500
     8cc:	000000ca 	andeq	r0, r0, sl, asr #1
     8d0:	e10c008c 	smlabb	ip, ip, r0, r0
     8d4:	05000003 	streq	r0, [r0, #-3]
     8d8:	03170478 	tsteq	r7, #120, 8	; 0x78000000
     8dc:	5d100000 	ldcpl	0, cr0, [r0, #-0]
     8e0:	01000004 	tsteq	r0, r4
     8e4:	0010e8d0 			; <UNDEFINED> instruction: 0x0010e8d0
     8e8:	00006808 	andeq	r6, r0, r8, lsl #16
     8ec:	119c0100 	orrsne	r0, ip, r0, lsl #2
     8f0:	00000441 	andeq	r0, r0, r1, asr #8
     8f4:	50011d01 	andpl	r1, r1, r1, lsl #26
     8f8:	f8080011 			; <UNDEFINED> instruction: 0xf8080011
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	00053f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
     904:	6d741200 	lfmvs	f1, 2, [r4, #-0]
     908:	1f010070 	svcne	0x00010070
     90c:	0000b801 	andeq	fp, r0, r1, lsl #16
     910:	70910200 	addsvc	r0, r1, r0, lsl #4
     914:	00047213 	andeq	r7, r4, r3, lsl r2
     918:	011f0100 	tsteq	pc, r0, lsl #2
     91c:	000000b8 	strheq	r0, [r0], -r8
     920:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     924:	00000419 	andeq	r0, r0, r9, lsl r4
     928:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     92c:	02000000 	andeq	r0, r0, #0
     930:	02136c91 	andseq	r6, r3, #37120	; 0x9100
     934:	01000004 	tsteq	r0, r4
     938:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     93c:	91020000 	mrsls	r0, (UNDEF: 2)
     940:	04141368 	ldreq	r1, [r4], #-872	; 0x368
     944:	1f010000 	svcne	0x00010000
     948:	0000b801 	andeq	fp, r0, r1, lsl #16
     94c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     950:	04ca1400 	strbeq	r1, [sl], #1024	; 0x400
     954:	55010000 	strpl	r0, [r1, #-0]
     958:	00124801 	andseq	r4, r2, r1, lsl #16
     95c:	0000f408 	andeq	pc, r0, r8, lsl #8
     960:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
     964:	13000005 	movwne	r0, #5
     968:	0000042c 	andeq	r0, r0, ip, lsr #8
     96c:	ca015a01 	bgt	57178 <_Min_Stack_Size+0x56d78>
     970:	02000000 	andeq	r0, r0, #0
     974:	89137491 	ldmdbhi	r3, {r0, r4, r7, sl, ip, sp, lr}
     978:	01000003 	tsteq	r0, r3
     97c:	00ca015a 	sbceq	r0, sl, sl, asr r1
     980:	91020000 	mrsls	r0, (UNDEF: 2)
     984:	56150070 			; <UNDEFINED> instruction: 0x56150070
     988:	04000001 	streq	r0, [r0], #-1
     98c:	025e06a7 	subseq	r0, lr, #175112192	; 0xa700000
     990:	88160000 	ldmdahi	r6, {}	; <UNPREDICTABLE>
     994:	01000004 	tsteq	r0, r4
     998:	0000b8b0 			; <UNDEFINED> instruction: 0x0000b8b0
     99c:	00030500 	andeq	r0, r3, r0, lsl #10
     9a0:	0a200000 	beq	8009a8 <_Min_Stack_Size+0x8005a8>
     9a4:	00000097 	muleq	r0, r7, r0
     9a8:	000005a1 	andeq	r0, r0, r1, lsr #11
     9ac:	0000c30b 	andeq	ip, r0, fp, lsl #6
     9b0:	16000f00 	strne	r0, [r0], -r0, lsl #30
     9b4:	00000f35 	andeq	r0, r0, r5, lsr pc
     9b8:	05b2b201 	ldreq	fp, [r2, #513]!	; 0x201
     9bc:	03050000 	movweq	r0, #20480	; 0x5000
     9c0:	20000004 	andcs	r0, r0, r4
     9c4:	0005b709 	andeq	fp, r5, r9, lsl #14
     9c8:	05910500 	ldreq	r0, [r1, #1280]	; 0x500
     9cc:	3d000000 	stccc	0, cr0, [r0, #-0]
     9d0:	04000005 	streq	r0, [r0], #-5
     9d4:	0002c200 	andeq	ip, r2, r0, lsl #4
     9d8:	21010400 	tstcs	r1, r0, lsl #8
     9dc:	01000000 	mrseq	r0, (UNDEF: 0)
     9e0:	000005f5 	strdeq	r0, [r0], -r5
     9e4:	0000010c 	andeq	r0, r0, ip, lsl #2
     9e8:	00000070 	andeq	r0, r0, r0, ror r0
     9ec:	00000000 	andeq	r0, r0, r0
     9f0:	000004c3 	andeq	r0, r0, r3, asr #9
     9f4:	45060102 	strmi	r0, [r6, #-258]	; 0x102
     9f8:	03000001 	movweq	r0, #1
     9fc:	000001ae 	andeq	r0, r0, lr, lsr #3
     a00:	00371d02 	eorseq	r1, r7, r2, lsl #26
     a04:	01020000 	mrseq	r0, (UNDEF: 2)
     a08:	00014308 	andeq	r4, r1, r8, lsl #6
     a0c:	05020200 	streq	r0, [r2, #-512]	; 0x200
     a10:	0000017f 	andeq	r0, r0, pc, ror r1
     a14:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
     a18:	03000000 	movweq	r0, #0
     a1c:	0000016f 	andeq	r0, r0, pc, ror #2
     a20:	00573f02 	subseq	r3, r7, r2, lsl #30
     a24:	04020000 	streq	r0, [r2], #-0
     a28:	00000505 	andeq	r0, r0, r5, lsl #10
     a2c:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
     a30:	41020000 	mrsmi	r0, (UNDEF: 2)
     a34:	00000069 	andeq	r0, r0, r9, rrx
     a38:	26070402 	strcs	r0, [r7], -r2, lsl #8
     a3c:	02000001 	andeq	r0, r0, #1
     a40:	00000508 	andeq	r0, r0, r8, lsl #10
     a44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     a48:	00012107 	andeq	r2, r1, r7, lsl #2
     a4c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     a50:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a54:	2b070402 	blcs	1c1a64 <_Min_Stack_Size+0x1c1664>
     a58:	03000001 	movweq	r0, #1
     a5c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     a60:	002c2a03 	eoreq	r2, ip, r3, lsl #20
     a64:	71030000 	mrsvc	r0, (UNDEF: 3)
     a68:	03000001 	movweq	r0, #1
     a6c:	00004c41 	andeq	r4, r0, r1, asr #24
     a70:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
     a74:	42030000 	andmi	r0, r3, #0
     a78:	0000005e 	andeq	r0, r0, lr, asr r0
     a7c:	040e0405 	streq	r0, [lr], #-1029	; 0x405
     a80:	01690150 	cmneq	r9, r0, asr r1
     a84:	b3060000 	movwlt	r0, #24576	; 0x6000
     a88:	04000005 	streq	r0, [r0], #-5
     a8c:	01800152 	orreq	r0, r0, r2, asr r1
     a90:	06000000 	streq	r0, [r0], -r0
     a94:	000004ac 	andeq	r0, r0, ip, lsr #9
     a98:	85015304 	strhi	r5, [r1, #-772]	; 0x304
     a9c:	20000001 	andcs	r0, r0, r1
     aa0:	00064206 	andeq	r4, r6, r6, lsl #4
     aa4:	01540400 	cmpeq	r4, r0, lsl #8
     aa8:	00000195 	muleq	r0, r5, r1
     aac:	05ce0680 	strbeq	r0, [lr, #1664]	; 0x680
     ab0:	55040000 	strpl	r0, [r4, #-0]
     ab4:	00018501 	andeq	r8, r1, r1, lsl #10
     ab8:	9307a000 	movwls	sl, #28672	; 0x7000
     abc:	04000006 	streq	r0, [r0], #-6
     ac0:	019a0156 	orrseq	r0, sl, r6, asr r1
     ac4:	01000000 	mrseq	r0, (UNDEF: 0)
     ac8:	0004c007 	andeq	ip, r4, r7
     acc:	01570400 	cmpeq	r7, r0, lsl #8
     ad0:	00000185 	andeq	r0, r0, r5, lsl #3
     ad4:	f0070120 			; <UNDEFINED> instruction: 0xf0070120
     ad8:	04000005 	streq	r0, [r0], #-5
     adc:	019f0158 	orrseq	r0, pc, r8, asr r1	; <UNPREDICTABLE>
     ae0:	01800000 	orreq	r0, r0, r0
     ae4:	0003ac07 	andeq	sl, r3, r7, lsl #24
     ae8:	01590400 	cmpeq	r9, r0, lsl #8
     aec:	00000185 	andeq	r0, r0, r5, lsl #3
     af0:	440701a0 	strmi	r0, [r7], #-416	; 0x1a0
     af4:	04000005 	streq	r0, [r0], #-5
     af8:	01a4015a 			; <UNDEFINED> instruction: 0x01a4015a
     afc:	02000000 	andeq	r0, r0, #0
     b00:	0004d607 	andeq	sp, r4, r7, lsl #12
     b04:	015b0400 	cmpeq	fp, r0, lsl #8
     b08:	000001a9 	andeq	r0, r0, r9, lsr #3
     b0c:	49080220 	stmdbmi	r8, {r5, r9}
     b10:	5c040050 	stcpl	0, cr0, [r4], {80}	; 0x50
     b14:	0001c901 	andeq	ip, r1, r1, lsl #18
     b18:	07030000 	streq	r0, [r3, -r0]
     b1c:	000004e0 	andeq	r0, r0, r0, ror #9
     b20:	ce015d04 	cdpgt	13, 0, cr5, cr1, cr4, {0}
     b24:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     b28:	05c10703 	strbeq	r0, [r1, #1795]	; 0x703
     b2c:	5e040000 	cdppl	0, 0, cr0, cr4, cr0, {0}
     b30:	0001df01 	andeq	sp, r1, r1, lsl #30
     b34:	000e0000 	andeq	r0, lr, r0
     b38:	0000a209 	andeq	sl, r0, r9, lsl #4
     b3c:	00017900 	andeq	r7, r1, r0, lsl #18
     b40:	01790a00 	cmneq	r9, r0, lsl #20
     b44:	00070000 	andeq	r0, r7, r0
     b48:	92070402 	andls	r0, r7, #33554432	; 0x2000000
     b4c:	0b000001 	bleq	b58 <_Min_Stack_Size+0x758>
     b50:	00000169 	andeq	r0, r0, r9, ror #2
     b54:	0000a209 	andeq	sl, r0, r9, lsl #4
     b58:	00019500 	andeq	r9, r1, r0, lsl #10
     b5c:	01790a00 	cmneq	r9, r0, lsl #20
     b60:	00170000 	andseq	r0, r7, r0
     b64:	0001690b 	andeq	r6, r1, fp, lsl #18
     b68:	01690b00 	cmneq	r9, r0, lsl #22
     b6c:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
     b70:	0b000001 	bleq	b7c <_Min_Stack_Size+0x77c>
     b74:	00000169 	andeq	r0, r0, r9, ror #2
     b78:	0000a209 	andeq	sl, r0, r9, lsl #4
     b7c:	0001b900 	andeq	fp, r1, r0, lsl #18
     b80:	01790a00 	cmneq	r9, r0, lsl #20
     b84:	00370000 	eorseq	r0, r7, r0
     b88:	00008c09 	andeq	r8, r0, r9, lsl #24
     b8c:	0001c900 	andeq	ip, r1, r0, lsl #18
     b90:	01790a00 	cmneq	r9, r0, lsl #20
     b94:	00ef0000 	rsceq	r0, pc, r0
     b98:	0001b90b 	andeq	fp, r1, fp, lsl #18
     b9c:	00a20900 	adceq	r0, r2, r0, lsl #18
     ba0:	01df0000 	bicseq	r0, pc, r0
     ba4:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
     ba8:	83000001 	movwhi	r0, #1
     bac:	a20b0002 	andge	r0, fp, #2
     bb0:	0d000000 	stceq	0, cr0, [r0, #-0]
     bb4:	000006c3 	andeq	r0, r0, r3, asr #13
     bb8:	ad015f04 	stcge	15, cr5, [r1, #-16]
     bbc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     bc0:	0170048c 	cmneq	r0, ip, lsl #9
     bc4:	0000030b 	andeq	r0, r0, fp, lsl #6
     bc8:	00039306 	andeq	r9, r3, r6, lsl #6
     bcc:	01720400 	cmneq	r2, r0, lsl #8
     bd0:	0000030b 	andeq	r0, r0, fp, lsl #6
     bd4:	03cf0600 	biceq	r0, pc, #0, 12
     bd8:	73040000 	movwvc	r0, #16384	; 0x4000
     bdc:	0001df01 	andeq	sp, r1, r1, lsl #30
     be0:	79060400 	stmdbvc	r6, {sl}
     be4:	04000004 	streq	r0, [r0], #-4
     be8:	01df0174 	bicseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     bec:	06080000 	streq	r0, [r8], -r0
     bf0:	0000041e 	andeq	r0, r0, lr, lsl r4
     bf4:	df017504 	svcle	0x00017504
     bf8:	0c000001 	stceq	0, cr0, [r0], {1}
     bfc:	5243530f 	subpl	r5, r3, #1006632960	; 0x3c000000
     c00:	01760400 	cmneq	r6, r0, lsl #8
     c04:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c08:	43430f10 	movtmi	r0, #16144	; 0x3f10
     c0c:	77040052 	smlsdvc	r4, r2, r0, r0
     c10:	0001df01 	andeq	sp, r1, r1, lsl #30
     c14:	530f1400 	movwpl	r1, #62464	; 0xf400
     c18:	04005048 	streq	r5, [r0], #-72	; 0x48
     c1c:	03200178 	teqeq	r0, #120, 2
     c20:	06180000 	ldreq	r0, [r8], -r0
     c24:	0000043b 	andeq	r0, r0, fp, lsr r4
     c28:	df017904 	svcle	0x00017904
     c2c:	24000001 	strcs	r0, [r0], #-1
     c30:	0003f606 	andeq	pc, r3, r6, lsl #12
     c34:	017a0400 	cmneq	sl, r0, lsl #8
     c38:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c3c:	04980628 	ldreq	r0, [r8], #1576	; 0x628
     c40:	7b040000 	blvc	100c48 <_Min_Stack_Size+0x100848>
     c44:	0001df01 	andeq	sp, r1, r1, lsl #30
     c48:	83062c00 	movwhi	r2, #27648	; 0x6c00
     c4c:	04000004 	streq	r0, [r0], #-4
     c50:	01df017c 	bicseq	r0, pc, ip, ror r1	; <UNPREDICTABLE>
     c54:	06300000 	ldrteq	r0, [r0], -r0
     c58:	00000457 	andeq	r0, r0, r7, asr r4
     c5c:	df017d04 	svcle	0x00017d04
     c60:	34000001 	strcc	r0, [r0], #-1
     c64:	0003dc06 	andeq	sp, r3, r6, lsl #24
     c68:	017e0400 	cmneq	lr, r0, lsl #8
     c6c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c70:	05070638 	streq	r0, [r7, #-1592]	; 0x638
     c74:	7f040000 	svcvc	0x00040000
     c78:	0001df01 	andeq	sp, r1, r1, lsl #30
     c7c:	500f3c00 	andpl	r3, pc, r0, lsl #24
     c80:	04005246 	streq	r5, [r0], #-582	; 0x246
     c84:	03350180 	teqeq	r5, #128, 2
     c88:	0f400000 	svceq	0x00400000
     c8c:	00524644 	subseq	r4, r2, r4, asr #12
     c90:	0b018104 	bleq	610a8 <_Min_Stack_Size+0x60ca8>
     c94:	48000003 	stmdami	r0, {r0, r1}
     c98:	5244410f 	subpl	r4, r4, #-1073741821	; 0xc0000003
     c9c:	01820400 	orreq	r0, r2, r0, lsl #8
     ca0:	0000030b 	andeq	r0, r0, fp, lsl #6
     ca4:	04a7064c 	strteq	r0, [r7], #1612	; 0x64c
     ca8:	83040000 	movwhi	r0, #16384	; 0x4000
     cac:	00034f01 	andeq	r4, r3, r1, lsl #30
     cb0:	7e065000 	cdpvc	0, 0, cr5, cr6, cr0, {0}
     cb4:	04000004 	streq	r0, [r0], #-4
     cb8:	03690184 	cmneq	r9, #132, 2	; 0x21
     cbc:	06600000 	strbteq	r0, [r0], -r0
     cc0:	000004ac 	andeq	r0, r0, ip, lsr #9
     cc4:	59018504 	stmdbpl	r1, {r2, r8, sl, pc}
     cc8:	74000003 	strvc	r0, [r0], #-3
     ccc:	00052e06 	andeq	r2, r5, r6, lsl #28
     cd0:	01860400 	orreq	r0, r6, r0, lsl #8
     cd4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     cd8:	df100088 	svcle	0x00100088
     cdc:	09000001 	stmdbeq	r0, {r0}
     ce0:	0000008c 	andeq	r0, r0, ip, lsl #1
     ce4:	00000320 	andeq	r0, r0, r0, lsr #6
     ce8:	0001790a 	andeq	r7, r1, sl, lsl #18
     cec:	0b000b00 	bleq	38f4 <_Min_Stack_Size+0x34f4>
     cf0:	00000310 	andeq	r0, r0, r0, lsl r3
     cf4:	0000a209 	andeq	sl, r0, r9, lsl #4
     cf8:	00033500 	andeq	r3, r3, r0, lsl #10
     cfc:	01790a00 	cmneq	r9, r0, lsl #20
     d00:	00010000 	andeq	r0, r1, r0
     d04:	00033a10 	andeq	r3, r3, r0, lsl sl
     d08:	03250b00 	teqeq	r5, #0, 22
     d0c:	a2090000 	andge	r0, r9, #0
     d10:	4f000000 	svcmi	0x00000000
     d14:	0a000003 	beq	d28 <_Min_Stack_Size+0x928>
     d18:	00000179 	andeq	r0, r0, r9, ror r1
     d1c:	54100003 	ldrpl	r0, [r0], #-3
     d20:	0b000003 	bleq	d34 <_Min_Stack_Size+0x934>
     d24:	0000033f 	andeq	r0, r0, pc, lsr r3
     d28:	0000a209 	andeq	sl, r0, r9, lsl #4
     d2c:	00036900 	andeq	r6, r3, r0, lsl #18
     d30:	01790a00 	cmneq	r9, r0, lsl #20
     d34:	00040000 	andeq	r0, r4, r0
     d38:	00036e10 	andeq	r6, r3, r0, lsl lr
     d3c:	03590b00 	cmpeq	r9, #0, 22
     d40:	b60d0000 	strlt	r0, [sp], -r0
     d44:	04000003 	streq	r0, [r0], #-3
     d48:	01f00187 	mvnseq	r0, r7, lsl #3
     d4c:	100e0000 	andne	r0, lr, r0
     d50:	bd026f04 	stclt	15, cr6, [r2, #-16]
     d54:	06000003 	streq	r0, [r0], -r3
     d58:	000005d7 	ldrdeq	r0, [r0], -r7
     d5c:	df027104 	svcle	0x00027104
     d60:	00000001 	andeq	r0, r0, r1
     d64:	00070c06 	andeq	r0, r7, r6, lsl #24
     d68:	02720400 	rsbseq	r0, r2, #0, 8
     d6c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     d70:	41560f04 	cmpmi	r6, r4, lsl #30
     d74:	7304004c 	movwvc	r0, #16460	; 0x404c
     d78:	0001df02 	andeq	sp, r1, r2, lsl #30
     d7c:	3c060800 	stccc	8, cr0, [r6], {-0}
     d80:	04000006 	streq	r0, [r0], #-6
     d84:	030b0274 	movweq	r0, #45684	; 0xb274
     d88:	000c0000 	andeq	r0, ip, r0
     d8c:	00067a0d 	andeq	r7, r6, sp, lsl #20
     d90:	02750400 	rsbseq	r0, r5, #0, 8
     d94:	0000037f 	andeq	r0, r0, pc, ror r3
     d98:	0000970b 	andeq	r9, r0, fp, lsl #14
     d9c:	05011100 	streq	r1, [r1, #-256]	; 0x100
     da0:	03e401f9 	mvneq	r0, #1073741886	; 0x4000003e
     da4:	c6120000 	ldrgt	r0, [r2], -r0
     da8:	00000005 	andeq	r0, r0, r5
     dac:	00071e12 	andeq	r1, r7, r2, lsl lr
     db0:	0d000100 	stfeqs	f0, [r0, #-0]
     db4:	000006ef 	andeq	r0, r0, pc, ror #13
     db8:	ce01f905 	cdpgt	9, 0, cr15, cr1, cr5, {0}
     dbc:	13000003 	movwne	r0, #3
     dc0:	29360604 	ldmdbcs	r6!, {r2, r9, sl}
     dc4:	14000004 	strne	r0, [r0], #-4
     dc8:	00000698 	muleq	r0, r8, r6
     dcc:	008c3806 	addeq	r3, ip, r6, lsl #16
     dd0:	14000000 	strne	r0, [r0], #-0
     dd4:	000006cd 	andeq	r0, r0, sp, asr #13
     dd8:	008c3d06 	addeq	r3, ip, r6, lsl #26
     ddc:	14010000 	strne	r0, [r1], #-0
     de0:	000006a8 	andeq	r0, r0, r8, lsr #13
     de4:	008c4206 	addeq	r4, ip, r6, lsl #4
     de8:	14020000 	strne	r0, [r2], #-0
     dec:	0000055a 	andeq	r0, r0, sl, asr r5
     df0:	03e44706 	mvneq	r4, #1572864	; 0x180000
     df4:	00030000 	andeq	r0, r3, r0
     df8:	00054903 	andeq	r4, r5, r3, lsl #18
     dfc:	f04a0600 			; <UNDEFINED> instruction: 0xf04a0600
     e00:	15000003 	strne	r0, [r0, #-3]
     e04:	00000725 	andeq	r0, r0, r5, lsr #14
     e08:	133c7601 	teqne	ip, #1048576	; 0x100000
     e0c:	00240800 	eoreq	r0, r4, r0, lsl #16
     e10:	9c010000 	stcls	0, cr0, [r1], {-0}
     e14:	00000458 	andeq	r0, r0, r8, asr r4
     e18:	00058f16 	andeq	r8, r5, r6, lsl pc
     e1c:	a2760100 	rsbsge	r0, r6, #0, 2
     e20:	02000000 	andeq	r0, r0, #0
     e24:	15007491 	strne	r7, [r0, #-1169]	; 0x491
     e28:	000005a2 	andeq	r0, r0, r2, lsr #11
     e2c:	13608801 	cmnne	r0, #65536	; 0x10000
     e30:	00bc0800 	adcseq	r0, ip, r0, lsl #16
     e34:	9c010000 	stcls	0, cr0, [r1], {-0}
     e38:	000004a6 	andeq	r0, r0, r6, lsr #9
     e3c:	00057f16 	andeq	r7, r5, r6, lsl pc
     e40:	a6880100 	strge	r0, [r8], r0, lsl #2
     e44:	02000004 	andeq	r0, r0, #4
     e48:	87176c91 			; <UNDEFINED> instruction: 0x87176c91
     e4c:	01000006 	tsteq	r0, r6
     e50:	00008c8a 	andeq	r8, r0, sl, lsl #25
     e54:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e58:	0005ac17 	andeq	sl, r5, r7, lsl ip
     e5c:	8c8a0100 	stfhis	f0, [sl], {0}
     e60:	02000000 	andeq	r0, r0, #0
     e64:	47177691 			; <UNDEFINED> instruction: 0x47177691
     e68:	01000006 	tsteq	r0, r6
     e6c:	00008c8a 	andeq	r8, r0, sl, lsl #25
     e70:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
     e74:	29041800 	stmdbcs	r4, {fp, ip}
     e78:	15000004 	strne	r0, [r0, #-4]
     e7c:	000005dc 	ldrdeq	r0, [r0], -ip
     e80:	141cb401 	ldrne	fp, [ip], #-1025	; 0x401
     e84:	002c0800 	eoreq	r0, ip, r0, lsl #16
     e88:	9c010000 	stcls	0, cr0, [r1], {-0}
     e8c:	000004de 	ldrdeq	r0, [r0], -lr
     e90:	0006ff16 	andeq	pc, r6, r6, lsl pc	; <UNPREDICTABLE>
     e94:	a2b40100 	adcsge	r0, r4, #0, 2
     e98:	02000000 	andeq	r0, r0, #0
     e9c:	29167491 	ldmdbcs	r6, {r0, r4, r7, sl, ip, sp, lr}
     ea0:	01000029 	tsteq	r0, r9, lsr #32
     ea4:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
     ea8:	70910200 	addsvc	r0, r1, r0, lsl #4
     eac:	064e1500 	strbeq	r1, [lr], -r0, lsl #10
     eb0:	c7010000 	strgt	r0, [r1, -r0]
     eb4:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
     eb8:	00000040 	andeq	r0, r0, r0, asr #32
     ebc:	05109c01 	ldreq	r9, [r0, #-3073]	; 0xc01
     ec0:	11160000 	tstne	r6, r0
     ec4:	01000007 	tsteq	r0, r7
     ec8:	00008cc7 	andeq	r8, r0, r7, asr #25
     ecc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ed0:	0005b816 	andeq	fp, r5, r6, lsl r8
     ed4:	e4c70100 	strb	r0, [r7], #256	; 0x100
     ed8:	02000003 	andeq	r0, r0, #3
     edc:	15007691 	strne	r7, [r0, #-1681]	; 0x691
     ee0:	00000662 	andeq	r0, r0, r2, ror #12
     ee4:	1488df01 	strne	sp, [r8], #3841	; 0xf01
     ee8:	00380800 	eorseq	r0, r8, r0, lsl #16
     eec:	9c010000 	stcls	0, cr0, [r1], {-0}
     ef0:	00000534 	andeq	r0, r0, r4, lsr r5
     ef4:	00056d16 	andeq	r6, r5, r6, lsl sp
     ef8:	a2df0100 	sbcsge	r0, pc, #0, 2
     efc:	02000000 	andeq	r0, r0, #0
     f00:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
     f04:	00000156 	andeq	r0, r0, r6, asr r1
     f08:	c906a704 	stmdbgt	r6, {r2, r8, r9, sl, sp, pc}
     f0c:	00000003 	andeq	r0, r0, r3
     f10:	00000605 	andeq	r0, r0, r5, lsl #12
     f14:	04090004 	streq	r0, [r9], #-4
     f18:	01040000 	mrseq	r0, (UNDEF: 4)
     f1c:	00000021 	andeq	r0, r0, r1, lsr #32
     f20:	0009f601 	andeq	pc, r9, r1, lsl #12
     f24:	00010c00 	andeq	r0, r1, r0, lsl #24
     f28:	0000a000 	andeq	sl, r0, r0
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	0006bf00 	andeq	fp, r6, r0, lsl #30
     f34:	06010200 	streq	r0, [r1], -r0, lsl #4
     f38:	00000145 	andeq	r0, r0, r5, asr #2
     f3c:	0001ae03 	andeq	sl, r1, r3, lsl #28
     f40:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     f44:	02000000 	andeq	r0, r0, #0
     f48:	01430801 	cmpeq	r3, r1, lsl #16
     f4c:	02020000 	andeq	r0, r2, #0
     f50:	00017f05 	andeq	r7, r1, r5, lsl #30
     f54:	03780300 	cmneq	r8, #0, 6
     f58:	2b020000 	blcs	80f60 <_Min_Stack_Size+0x80b60>
     f5c:	00000050 	andeq	r0, r0, r0, asr r0
     f60:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
     f64:	03000000 	movweq	r0, #0
     f68:	0000016f 	andeq	r0, r0, pc, ror #2
     f6c:	00623f02 	rsbeq	r3, r2, r2, lsl #30
     f70:	04020000 	streq	r0, [r2], #-0
     f74:	00000505 	andeq	r0, r0, r5, lsl #10
     f78:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
     f7c:	41020000 	mrsmi	r0, (UNDEF: 2)
     f80:	00000074 	andeq	r0, r0, r4, ror r0
     f84:	26070402 	strcs	r0, [r7], -r2, lsl #8
     f88:	02000001 	andeq	r0, r0, #1
     f8c:	00000508 	andeq	r0, r0, r8, lsl #10
     f90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f94:	00012107 	andeq	r2, r1, r7, lsl #2
     f98:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     f9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     fa0:	2b070402 	blcs	1c1fb0 <_Min_Stack_Size+0x1c1bb0>
     fa4:	03000001 	movweq	r0, #1
     fa8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     fac:	002c2a03 	eoreq	r2, ip, r3, lsl #20
     fb0:	7a030000 	bvc	c0fb8 <_Min_Stack_Size+0xc0bb8>
     fb4:	03000003 	movweq	r0, #3
     fb8:	00004536 	andeq	r4, r0, r6, lsr r5
     fbc:	01710300 	cmneq	r1, r0, lsl #6
     fc0:	41030000 	mrsmi	r0, (UNDEF: 3)
     fc4:	00000057 	andeq	r0, r0, r7, asr r0
     fc8:	0004f603 	andeq	pc, r4, r3, lsl #12
     fcc:	69420300 	stmdbvs	r2, {r8, r9}^
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	01920704 	orrseq	r0, r2, r4, lsl #14
     fd8:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
     fdc:	06000000 	streq	r0, [r0], -r0
     fe0:	000000b8 	strheq	r0, [r0], -r8
     fe4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     fe8:	0000c307 	andeq	ip, r0, r7, lsl #6
     fec:	05000100 	streq	r0, [r0, #-256]	; 0x100
     ff0:	000000a2 	andeq	r0, r0, r2, lsr #1
     ff4:	0000ad05 	andeq	sl, r0, r5, lsl #26
     ff8:	04010800 	streq	r0, [r1], #-2048	; 0x800
     ffc:	00ff01f9 	ldrshteq	r0, [pc], #25
    1000:	c6090000 	strgt	r0, [r9], -r0
    1004:	00000005 	andeq	r0, r0, r5
    1008:	00071e09 	andeq	r1, r7, r9, lsl #28
    100c:	0a000100 	beq	1414 <_Min_Stack_Size+0x1014>
    1010:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    1014:	0000018b 	andeq	r0, r0, fp, lsl #3
    1018:	0008790b 	andeq	r7, r8, fp, lsl #18
    101c:	03d60400 	bicseq	r0, r6, #0, 8
    1020:	000000ca 	andeq	r0, r0, sl, asr #1
    1024:	083f0b00 	ldmdaeq	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
    1028:	d7040000 	strle	r0, [r4, -r0]
    102c:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1030:	550b0400 	strpl	r0, [fp, #-1024]	; 0x400
    1034:	04000009 	streq	r0, [r0], #-9
    1038:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    103c:	0b080000 	bleq	201044 <_Min_Stack_Size+0x200c44>
    1040:	00000854 	andeq	r0, r0, r4, asr r8
    1044:	ca03d904 	bgt	f745c <_Min_Stack_Size+0xf705c>
    1048:	0c000000 	stceq	0, cr0, [r0], {-0}
    104c:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    1050:	03da0400 	bicseq	r0, sl, #0, 8
    1054:	000000ca 	andeq	r0, r0, sl, asr #1
    1058:	444f0c10 	strbmi	r0, [pc], #-3088	; 1060 <_Min_Stack_Size+0xc60>
    105c:	db040052 	blle	1011ac <_Min_Stack_Size+0x100dac>
    1060:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1064:	470b1400 	strmi	r1, [fp, -r0, lsl #8]
    1068:	0400000a 	streq	r0, [r0], #-10
    106c:	00df03dc 	ldrsbeq	r0, [pc], #60	; <UNPREDICTABLE>
    1070:	0b180000 	bleq	601078 <_Min_Stack_Size+0x600c78>
    1074:	00000873 	andeq	r0, r0, r3, ror r8
    1078:	df03dd04 	svcle	0x0003dd04
    107c:	1a000000 	bne	1084 <_Min_Stack_Size+0xc84>
    1080:	0008280b 	andeq	r2, r8, fp, lsl #16
    1084:	03de0400 	bicseq	r0, lr, #0, 8
    1088:	000000ca 	andeq	r0, r0, sl, asr #1
    108c:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    1090:	df040052 	svcle	0x00040052
    1094:	00018b03 	andeq	r8, r1, r3, lsl #22
    1098:	05002000 	streq	r2, [r0, #-0]
    109c:	000000cf 	andeq	r0, r0, pc, asr #1
    10a0:	00073e0d 	andeq	r3, r7, sp, lsl #28
    10a4:	03e00400 	mvneq	r0, #0, 8
    10a8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    10ac:	4205010e 	andmi	r0, r5, #-2147483645	; 0x80000003
    10b0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    10b4:	00085a09 	andeq	r5, r8, r9, lsl #20
    10b8:	46090000 	strmi	r0, [r9], -r0
    10bc:	01000008 	tsteq	r0, r8
    10c0:	0007dd09 	andeq	sp, r7, r9, lsl #26
    10c4:	0c090200 	sfmeq	f0, 4, [r9], {-0}
    10c8:	03000008 	movweq	r0, #8
    10cc:	07770300 	ldrbeq	r0, [r7, -r0, lsl #6]!
    10d0:	47050000 	strmi	r0, [r5, -r0]
    10d4:	0000019c 	muleq	r0, ip, r1
    10d8:	4f05010e 	svcmi	0x0005010e
    10dc:	000001dd 	ldrdeq	r0, [r0], -sp
    10e0:	00089509 	andeq	r9, r8, r9, lsl #10
    10e4:	ac090000 	stcge	0, cr0, [r9], {-0}
    10e8:	01000007 	tsteq	r0, r7
    10ec:	082d0300 	stmdaeq	sp!, {r8, r9}
    10f0:	52050000 	andpl	r0, r5, #0
    10f4:	000001c8 	andeq	r0, r0, r8, asr #3
    10f8:	5a05010e 	bpl	141538 <_Min_Stack_Size+0x141138>
    10fc:	00000209 	andeq	r0, r0, r9, lsl #4
    1100:	00093409 	andeq	r3, r9, r9, lsl #8
    1104:	43090000 	movwmi	r0, #36864	; 0x9000
    1108:	01000009 	tsteq	r0, r9
    110c:	0008f109 	andeq	pc, r8, r9, lsl #2
    1110:	b7090200 	strlt	r0, [r9, -r0, lsl #4]
    1114:	03000009 	movweq	r0, #9
    1118:	095d0300 	ldmdbeq	sp, {r8, r9}^
    111c:	5f050000 	svcpl	0x00050000
    1120:	000001e8 	andeq	r0, r0, r8, ror #3
    1124:	6e05010e 	adfvss	f0, f5, #0.5
    1128:	0000022f 	andeq	r0, r0, pc, lsr #4
    112c:	00097e09 	andeq	r7, r9, r9, lsl #28
    1130:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    1134:	01000009 	tsteq	r0, r9
    1138:	00096f09 	andeq	r6, r9, r9, lsl #30
    113c:	03000200 	movweq	r0, #512	; 0x200
    1140:	000009c7 	andeq	r0, r0, r7, asr #19
    1144:	02147205 	andseq	r7, r4, #1342177280	; 0x50000000
    1148:	010e0000 	mrseq	r0, (UNDEF: 14)
    114c:	024f7a05 	subeq	r7, pc, #20480	; 0x5000
    1150:	ba090000 	blt	241158 <_Min_Stack_Size+0x240d58>
    1154:	00000007 	andeq	r0, r0, r7
    1158:	00075b09 	andeq	r5, r7, r9, lsl #22
    115c:	03000100 	movweq	r0, #256	; 0x100
    1160:	00000914 	andeq	r0, r0, r4, lsl r9
    1164:	023a7d05 	eorseq	r7, sl, #320	; 0x140
    1168:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    116c:	029f8405 	addseq	r8, pc, #83886080	; 0x5000000
    1170:	52100000 	andspl	r0, r0, #0
    1174:	05000007 	streq	r0, [r0, #-7]
    1178:	0000b886 	andeq	fp, r0, r6, lsl #17
    117c:	64100000 	ldrvs	r0, [r0], #-0
    1180:	0500000a 	streq	r0, [r0, #-10]
    1184:	0001bd89 	andeq	fp, r1, r9, lsl #27
    1188:	f7100400 			; <UNDEFINED> instruction: 0xf7100400
    118c:	05000007 	streq	r0, [r0, #-7]
    1190:	0002098c 	andeq	r0, r2, ip, lsl #19
    1194:	d2100500 	andsle	r0, r0, #0, 10
    1198:	05000007 	streq	r0, [r0, #-7]
    119c:	0001dd8f 	andeq	sp, r1, pc, lsl #27
    11a0:	ad100600 	ldcge	6, cr0, [r0, #-0]
    11a4:	05000008 	streq	r0, [r0, #-8]
    11a8:	00022f92 	muleq	r2, r2, pc	; <UNPREDICTABLE>
    11ac:	03000700 	movweq	r0, #1792	; 0x700
    11b0:	000009a6 	andeq	r0, r0, r6, lsr #19
    11b4:	025a9405 	subseq	r9, sl, #83886080	; 0x5000000
    11b8:	67110000 	ldrvs	r0, [r1, -r0]
    11bc:	01000008 	tsteq	r0, r8
    11c0:	0014c07f 	andseq	ip, r4, pc, ror r0
    11c4:	00016408 	andeq	r6, r1, r8, lsl #8
    11c8:	ce9c0100 	fmlgte	f0, f4, f0
    11cc:	12000002 	andne	r0, r0, #2
    11d0:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    11d4:	02ce7f01 	sbceq	r7, lr, #1, 30
    11d8:	91020000 	mrsls	r0, (UNDEF: 2)
    11dc:	04130074 	ldreq	r0, [r3], #-116	; 0x74
    11e0:	00000190 	muleq	r0, r0, r1
    11e4:	00080214 	andeq	r0, r8, r4, lsl r2
    11e8:	24ca0100 	strbcs	r0, [sl], #256	; 0x100
    11ec:	1a080016 	bne	20124c <_Min_Stack_Size+0x200e4c>
    11f0:	01000001 	tsteq	r0, r1
    11f4:	0003309c 	muleq	r3, ip, r0
    11f8:	16b51200 	ldrtne	r1, [r5], r0, lsl #4
    11fc:	ca010000 	bgt	41204 <_Min_Stack_Size+0x40e04>
    1200:	000002ce 	andeq	r0, r0, lr, asr #5
    1204:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1208:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    120c:	0330ca01 	teqeq	r0, #4096	; 0x1000
    1210:	91020000 	mrsls	r0, (UNDEF: 2)
    1214:	074b1560 	strbeq	r1, [fp, -r0, ror #10]
    1218:	cc010000 	stcgt	0, cr0, [r1], {-0}
    121c:	000000b8 	strheq	r0, [r0], -r8
    1220:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1224:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1228:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    122c:	91020000 	mrsls	r0, (UNDEF: 2)
    1230:	091e1570 	ldmdbeq	lr, {r4, r5, r6, r8, sl, ip}
    1234:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1238:	000000b8 	strheq	r0, [r0], -r8
    123c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1240:	029f0413 	addseq	r0, pc, #318767104	; 0x13000000
    1244:	95140000 	ldrls	r0, [r4, #-0]
    1248:	01000007 	tsteq	r0, r7
    124c:	001740fe 	ldrsheq	r4, [r7], -lr
    1250:	00003208 	andeq	r3, r0, r8, lsl #4
    1254:	5a9c0100 	bpl	fe70165c <_estack+0xde6d165c>
    1258:	12000003 	andne	r0, r0, #3
    125c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    1260:	0330fe01 	teqeq	r0, #1, 28
    1264:	91020000 	mrsls	r0, (UNDEF: 2)
    1268:	01170074 	tsteq	r7, r4, ror r0
    126c:	01000009 	tsteq	r0, r9
    1270:	17740115 			; <UNDEFINED> instruction: 0x17740115
    1274:	00420800 	subeq	r0, r2, r0, lsl #16
    1278:	9c010000 	stcls	0, cr0, [r1], {-0}
    127c:	0000039e 	muleq	r0, lr, r3
    1280:	0016b518 	andseq	fp, r6, r8, lsl r5
    1284:	01150100 	tsteq	r5, r0, lsl #2
    1288:	000002ce 	andeq	r0, r0, lr, asr #5
    128c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1290:	00000752 	andeq	r0, r0, r2, asr r7
    1294:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1298:	02000000 	andeq	r0, r0, #0
    129c:	74196a91 	ldrvc	r6, [r9], #-2705	; 0xa91
    12a0:	0100706d 	tsteq	r0, sp, rrx
    12a4:	00ca0117 	sbceq	r0, sl, r7, lsl r1
    12a8:	91020000 	mrsls	r0, (UNDEF: 2)
    12ac:	7f1a0074 	svcvc	0x001a0074
    12b0:	01000008 	tsteq	r0, r8
    12b4:	00970143 	addseq	r0, r7, r3, asr #2
    12b8:	17b80000 	ldrne	r0, [r8, r0]!
    12bc:	00340800 	eorseq	r0, r4, r0, lsl #16
    12c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12c4:	000003e6 	andeq	r0, r0, r6, ror #7
    12c8:	0016b518 	andseq	fp, r6, r8, lsl r5
    12cc:	01430100 	mrseq	r0, (UNDEF: 83)
    12d0:	000002ce 	andeq	r0, r0, lr, asr #5
    12d4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    12d8:	00000752 	andeq	r0, r0, r2, asr r7
    12dc:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    12e0:	02000000 	andeq	r0, r0, #0
    12e4:	a31b6a91 	tstge	fp, #593920	; 0x91000
    12e8:	01000008 	tsteq	r0, r8
    12ec:	00970145 	addseq	r0, r7, r5, asr #2
    12f0:	91020000 	mrsls	r0, (UNDEF: 2)
    12f4:	de1a0077 	mrcle	0, 0, r0, cr10, cr7, {3}
    12f8:	01000008 	tsteq	r0, r8
    12fc:	00a2015d 	adceq	r0, r2, sp, asr r1
    1300:	17ec0000 	strbne	r0, [ip, r0]!
    1304:	001a0800 	andseq	r0, sl, r0, lsl #16
    1308:	9c010000 	stcls	0, cr0, [r1], {-0}
    130c:	00000410 	andeq	r0, r0, r0, lsl r4
    1310:	0016b518 	andseq	fp, r6, r8, lsl r5
    1314:	015d0100 	cmpeq	sp, r0, lsl #2
    1318:	000002ce 	andeq	r0, r0, lr, asr #5
    131c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1320:	000a4d1a 	andeq	r4, sl, sl, lsl sp
    1324:	016e0100 	cmneq	lr, r0, lsl #2
    1328:	00000097 	muleq	r0, r7, r0
    132c:	08001808 	stmdaeq	r0, {r3, fp, ip}
    1330:	00000034 	andeq	r0, r0, r4, lsr r0
    1334:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xc01
    1338:	b5180000 	ldrlt	r0, [r8, #-0]
    133c:	01000016 	tsteq	r0, r6, lsl r0
    1340:	02ce016e 	sbceq	r0, lr, #-2147483621	; 0x8000001b
    1344:	91020000 	mrsls	r0, (UNDEF: 2)
    1348:	0752186c 	ldrbeq	r1, [r2, -ip, ror #16]
    134c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1350:	0000a201 	andeq	sl, r0, r1, lsl #4
    1354:	6a910200 	bvs	fe441b5c <_estack+0xde411b5c>
    1358:	0008a31b 	andeq	sl, r8, fp, lsl r3
    135c:	01700100 	cmneq	r0, r0, lsl #2
    1360:	00000097 	muleq	r0, r7, r0
    1364:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1368:	0007631a 	andeq	r6, r7, sl, lsl r3
    136c:	01880100 	orreq	r0, r8, r0, lsl #2
    1370:	000000a2 	andeq	r0, r0, r2, lsr #1
    1374:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
    1378:	0000001a 	andeq	r0, r0, sl, lsl r0
    137c:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    1380:	b5180000 	ldrlt	r0, [r8, #-0]
    1384:	01000016 	tsteq	r0, r6, lsl r0
    1388:	02ce0188 	sbceq	r0, lr, #136, 2	; 0x22
    138c:	91020000 	mrsls	r0, (UNDEF: 2)
    1390:	ea170074 	b	5c1568 <_Min_Stack_Size+0x5c1168>
    1394:	01000007 	tsteq	r0, r7
    1398:	1858019c 	ldmdane	r8, {r2, r3, r4, r7, r8}^
    139c:	001c0800 	andseq	r0, ip, r0, lsl #16
    13a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    13a4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    13a8:	0016b518 	andseq	fp, r6, r8, lsl r5
    13ac:	019c0100 	orrseq	r0, ip, r0, lsl #2
    13b0:	000002ce 	andeq	r0, r0, lr, asr #5
    13b4:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    13b8:	00000752 	andeq	r0, r0, r2, asr r7
    13bc:	a2019c01 	andge	r9, r1, #256	; 0x100
    13c0:	02000000 	andeq	r0, r0, #0
    13c4:	17007291 			; <UNDEFINED> instruction: 0x17007291
    13c8:	00000819 	andeq	r0, r0, r9, lsl r8
    13cc:	7401b101 	strvc	fp, [r1], #-257	; 0x101
    13d0:	1c080018 	stcne	0, cr0, [r8], {24}
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	0004ec9c 	muleq	r4, ip, ip
    13dc:	16b51800 	ldrtne	r1, [r5], r0, lsl #16
    13e0:	b1010000 	mrslt	r0, (UNDEF: 1)
    13e4:	0002ce01 	andeq	ip, r2, r1, lsl #28
    13e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    13ec:	00075218 	andeq	r5, r7, r8, lsl r2
    13f0:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    13f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    13f8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    13fc:	0007c417 	andeq	ip, r7, r7, lsl r4
    1400:	01c70100 	biceq	r0, r7, r0, lsl #2
    1404:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
    1408:	0000002e 	andeq	r0, r0, lr, lsr #32
    140c:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xc01
    1410:	b5180000 	ldrlt	r0, [r8, #-0]
    1414:	01000016 	tsteq	r0, r6, lsl r0
    1418:	02ce01c7 	sbceq	r0, lr, #-1073741775	; 0xc0000031
    141c:	91020000 	mrsls	r0, (UNDEF: 2)
    1420:	07521874 			; <UNDEFINED> instruction: 0x07521874
    1424:	c7010000 	strgt	r0, [r1, -r0]
    1428:	0000a201 	andeq	sl, r0, r1, lsl #4
    142c:	72910200 	addsvc	r0, r1, #0, 4
    1430:	0007a518 	andeq	sl, r7, r8, lsl r5
    1434:	01c70100 	biceq	r0, r7, r0, lsl #2
    1438:	0000024f 	andeq	r0, r0, pc, asr #4
    143c:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1440:	00092917 	andeq	r2, r9, r7, lsl r9
    1444:	01e00100 	mvneq	r0, r0, lsl #2
    1448:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
    144c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1450:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xc01
    1454:	b5180000 	ldrlt	r0, [r8, #-0]
    1458:	01000016 	tsteq	r0, r6, lsl r0
    145c:	02ce01e0 	sbceq	r0, lr, #224, 2	; 0x38
    1460:	91020000 	mrsls	r0, (UNDEF: 2)
    1464:	08c71874 	stmiaeq	r7, {r2, r4, r5, r6, fp, ip}^
    1468:	e0010000 	and	r0, r1, r0
    146c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1470:	72910200 	addsvc	r0, r1, #0, 4
    1474:	098f1700 	stmibeq	pc, {r8, r9, sl, ip}	; <UNPREDICTABLE>
    1478:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    147c:	0018dc01 	andseq	sp, r8, r1, lsl #24
    1480:	00002208 	andeq	r2, r0, r8, lsl #4
    1484:	9a9c0100 	bls	fe70188c <_estack+0xde6d188c>
    1488:	18000005 	stmdane	r0, {r0, r2}
    148c:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    1490:	ce01f001 	cdpgt	0, 0, cr15, cr1, cr1, {0}
    1494:	02000002 	andeq	r0, r0, #2
    1498:	52187491 	andspl	r7, r8, #-1862270976	; 0x91000000
    149c:	01000007 	tsteq	r0, r7
    14a0:	00a201f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    14a4:	91020000 	mrsls	r0, (UNDEF: 2)
    14a8:	e5170072 	ldr	r0, [r7, #-114]	; 0x72
    14ac:	01000009 	tsteq	r0, r9
    14b0:	19000243 	stmdbne	r0, {r0, r1, r6, r9}
    14b4:	008c0800 	addeq	r0, ip, r0, lsl #16
    14b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    14bc:	000005fc 	strdeq	r0, [r0], -ip
    14c0:	0016b518 	andseq	fp, r6, r8, lsl r5
    14c4:	02430100 	subeq	r0, r3, #0, 2
    14c8:	000002ce 	andeq	r0, r0, lr, asr #5
    14cc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    14d0:	000008cf 	andeq	r0, r0, pc, asr #17
    14d4:	a2024301 	andge	r4, r2, #67108864	; 0x4000000
    14d8:	02000000 	andeq	r0, r0, #0
    14dc:	88186a91 	ldmdahi	r8, {r0, r4, r7, r9, fp, sp, lr}
    14e0:	01000007 	tsteq	r0, r7
    14e4:	00970243 	addseq	r0, r7, r3, asr #4
    14e8:	91020000 	mrsls	r0, (UNDEF: 2)
    14ec:	07901b69 	ldreq	r1, [r0, r9, ror #22]
    14f0:	45010000 	strmi	r0, [r1, #-0]
    14f4:	0000b802 	andeq	fp, r0, r2, lsl #16
    14f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14fc:	00099f1b 	andeq	r9, r9, fp, lsl pc
    1500:	02460100 	subeq	r0, r6, #0, 2
    1504:	000000b8 	strheq	r0, [r0], -r8
    1508:	00709102 	rsbseq	r9, r0, r2, lsl #2
    150c:	0001561c 	andeq	r5, r1, ip, lsl r6
    1510:	06a70600 	strteq	r0, [r7], r0, lsl #12
    1514:	000000e4 	andeq	r0, r0, r4, ror #1
    1518:	000e1100 	andeq	r1, lr, r0, lsl #2
    151c:	ae000400 	cfcpysge	mvf0, mvf0
    1520:	04000005 	streq	r0, [r0], #-5
    1524:	00002101 	andeq	r2, r0, r1, lsl #2
    1528:	10020100 	andne	r0, r2, r0, lsl #2
    152c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1530:	01180000 	tsteq	r8, r0
    1534:	00000000 	andeq	r0, r0, r0
    1538:	09bb0000 	ldmibeq	fp!, {}	; <UNPREDICTABLE>
    153c:	01020000 	mrseq	r0, (UNDEF: 2)
    1540:	00014506 	andeq	r4, r1, r6, lsl #10
    1544:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    1548:	1d020000 	stcne	0, cr0, [r2, #-0]
    154c:	00000037 	andeq	r0, r0, r7, lsr r0
    1550:	43080102 	movwmi	r0, #33026	; 0x8102
    1554:	02000001 	andeq	r0, r0, #1
    1558:	017f0502 	cmneq	pc, r2, lsl #10
    155c:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    1560:	02000003 	andeq	r0, r0, #3
    1564:	0000502b 	andeq	r5, r0, fp, lsr #32
    1568:	07020200 	streq	r0, [r2, -r0, lsl #4]
    156c:	0000000e 	andeq	r0, r0, lr
    1570:	00016f03 	andeq	r6, r1, r3, lsl #30
    1574:	623f0200 	eorsvs	r0, pc, #0, 4
    1578:	02000000 	andeq	r0, r0, #0
    157c:	00050504 	andeq	r0, r5, r4, lsl #10
    1580:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    1584:	02000004 	andeq	r0, r0, #4
    1588:	00007441 	andeq	r7, r0, r1, asr #8
    158c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1590:	00000126 	andeq	r0, r0, r6, lsr #2
    1594:	00050802 	andeq	r0, r5, r2, lsl #16
    1598:	02000000 	andeq	r0, r0, #0
    159c:	01210708 	teqeq	r1, r8, lsl #14
    15a0:	04040000 	streq	r0, [r4], #-0
    15a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    15a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    15ac:	0000012b 	andeq	r0, r0, fp, lsr #2
    15b0:	0001b003 	andeq	fp, r1, r3
    15b4:	2c2a0300 	stccs	3, cr0, [sl], #-0
    15b8:	03000000 	movweq	r0, #0
    15bc:	0000037a 	andeq	r0, r0, sl, ror r3
    15c0:	00453603 	subeq	r3, r5, r3, lsl #12
    15c4:	71030000 	mrsvc	r0, (UNDEF: 3)
    15c8:	03000001 	movweq	r0, #1
    15cc:	00005741 	andeq	r5, r0, r1, asr #14
    15d0:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
    15d4:	42030000 	andmi	r0, r3, #0
    15d8:	00000069 	andeq	r0, r0, r9, rrx
    15dc:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    15e0:	05000001 	streq	r0, [r0, #-1]
    15e4:	000000b8 	strheq	r0, [r0], -r8
    15e8:	0000b806 	andeq	fp, r0, r6, lsl #16
    15ec:	0000df00 	andeq	sp, r0, r0, lsl #30
    15f0:	00c30700 	sbceq	r0, r3, r0, lsl #14
    15f4:	00010000 	andeq	r0, r1, r0
    15f8:	0000ad05 	andeq	sl, r0, r5, lsl #26
    15fc:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1600:	00fa01f7 	ldrshteq	r0, [sl], #23
    1604:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
    1608:	00000007 	andeq	r0, r0, r7
    160c:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    1610:	0b000100 	bleq	1a18 <_Min_Stack_Size+0x1618>
    1614:	00001dc8 	andeq	r1, r0, r8, asr #27
    1618:	e401f704 	str	pc, [r1], #-1796	; 0x704
    161c:	0b000000 	bleq	1624 <_Min_Stack_Size+0x1224>
    1620:	00004d16 	andeq	r4, r0, r6, lsl sp
    1624:	e401f704 	str	pc, [r1], #-1796	; 0x704
    1628:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    162c:	01f90401 	mvnseq	r0, r1, lsl #8
    1630:	00000128 	andeq	r0, r0, r8, lsr #2
    1634:	0005c609 	andeq	ip, r5, r9, lsl #12
    1638:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    163c:	01000007 	tsteq	r0, r7
    1640:	06ef0b00 	strbteq	r0, [pc], r0, lsl #22
    1644:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    1648:	00011201 	andeq	r1, r1, r1, lsl #4
    164c:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1650:	014a01fc 	strdeq	r0, [sl, #-28]	; 0xffffffe4
    1654:	f4090000 	vst4.8	{d0-d3}, [r9], r0
    1658:	0000004e 	andeq	r0, r0, lr, asr #32
    165c:	0010b609 	andseq	fp, r0, r9, lsl #12
    1660:	0b000100 	bleq	1a68 <_Min_Stack_Size+0x1668>
    1664:	00000c42 	andeq	r0, r0, r2, asr #24
    1668:	3401fc04 	strcc	pc, [r1], #-3076	; 0xc04
    166c:	0c000001 	stceq	0, cr0, [r0], {1}
    1670:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    1674:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1678:	0052430d 	subseq	r4, r2, sp, lsl #6
    167c:	ca045704 	bgt	117294 <_Min_Stack_Size+0x116e94>
    1680:	00000000 	andeq	r0, r0, r0
    1684:	0003080e 	andeq	r0, r3, lr, lsl #16
    1688:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    168c:	000000ca 	andeq	r0, r0, sl, asr #1
    1690:	05290e04 	streq	r0, [r9, #-3588]!	; 0xe04
    1694:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    1698:	0000ca04 	andeq	ip, r0, r4, lsl #20
    169c:	430d0800 	movwmi	r0, #55296	; 0xd800
    16a0:	04005249 	streq	r5, [r0], #-585	; 0x249
    16a4:	00ca045a 	sbceq	r0, sl, sl, asr r4
    16a8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    16ac:	00000399 	muleq	r0, r9, r3
    16b0:	ca045b04 	bgt	1182c8 <_Min_Stack_Size+0x117ec8>
    16b4:	10000000 	andne	r0, r0, r0
    16b8:	0003210e 	andeq	r2, r3, lr, lsl #2
    16bc:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    16c0:	000000ca 	andeq	r0, r0, sl, asr #1
    16c4:	050c0e14 	streq	r0, [ip, #-3604]	; 0xe14
    16c8:	5d040000 	stcpl	0, cr0, [r4, #-0]
    16cc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    16d0:	ac0e1800 	stcge	8, cr1, [lr], {-0}
    16d4:	04000004 	streq	r0, [r0], #-4
    16d8:	00b8045e 	adcseq	r0, r8, lr, asr r4
    16dc:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    16e0:	00000310 	andeq	r0, r0, r0, lsl r3
    16e4:	ca045f04 	bgt	1192fc <_Min_Stack_Size+0x118efc>
    16e8:	20000000 	andcs	r0, r0, r0
    16ec:	0003ed0e 	andeq	lr, r3, lr, lsl #26
    16f0:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    16f4:	000000ca 	andeq	r0, r0, sl, asr #1
    16f8:	04b60e24 	ldrteq	r0, [r6], #3620	; 0xe24
    16fc:	61040000 	mrsvs	r0, (UNDEF: 4)
    1700:	0000cf04 	andeq	ip, r0, r4, lsl #30
    1704:	ff0e2800 			; <UNDEFINED> instruction: 0xff0e2800
    1708:	04000004 	streq	r0, [r0], #-4
    170c:	00ca0462 	sbceq	r0, sl, r2, ror #8
    1710:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    1714:	00000319 	andeq	r0, r0, r9, lsl r3
    1718:	ca046304 	bgt	11a330 <_Min_Stack_Size+0x119f30>
    171c:	34000000 	strcc	r0, [r0], #-0
    1720:	00040c0e 	andeq	r0, r4, lr, lsl #24
    1724:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    1728:	000000ca 	andeq	r0, r0, sl, asr #1
    172c:	04c00e38 	strbeq	r0, [r0], #3640	; 0xe38
    1730:	65040000 	strvs	r0, [r4, #-0]
    1734:	0000b804 	andeq	fp, r0, r4, lsl #16
    1738:	bf0e3c00 	svclt	0x000e3c00
    173c:	04000003 	streq	r0, [r0], #-3
    1740:	00ca0466 	sbceq	r0, sl, r6, ror #8
    1744:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    1748:	00000424 	andeq	r0, r0, r4, lsr #8
    174c:	ca046704 	bgt	11b364 <_Min_Stack_Size+0x11af64>
    1750:	44000000 	strmi	r0, [r0], #-0
    1754:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    1758:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    175c:	000000cf 	andeq	r0, r0, pc, asr #1
    1760:	02fe0e48 	rscseq	r0, lr, #72, 28	; 0x480
    1764:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    1768:	0000ca04 	andeq	ip, r0, r4, lsl #20
    176c:	9d0e5000 	stcls	0, cr5, [lr, #-0]
    1770:	04000004 	streq	r0, [r0], #-4
    1774:	00ca046a 	sbceq	r0, sl, sl, ror #8
    1778:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    177c:	000003a2 	andeq	r0, r0, r2, lsr #7
    1780:	ca046b04 	bgt	11c398 <_Min_Stack_Size+0x11bf98>
    1784:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1788:	0004d60e 	andeq	sp, r4, lr, lsl #12
    178c:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    1790:	000000b8 	strheq	r0, [r0], -r8
    1794:	04680e5c 	strbteq	r0, [r8], #-3676	; 0xe5c
    1798:	6d040000 	stcvs	0, cr0, [r4, #-0]
    179c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    17a0:	340e6000 	strcc	r6, [lr], #-0
    17a4:	04000005 	streq	r0, [r0], #-5
    17a8:	00ca046e 	sbceq	r0, sl, lr, ror #8
    17ac:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    17b0:	000004e0 	andeq	r0, r0, r0, ror #9
    17b4:	cf046f04 	svcgt	0x00046f04
    17b8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    17bc:	00032a0e 	andeq	r2, r3, lr, lsl #20
    17c0:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    17c4:	000000ca 	andeq	r0, r0, sl, asr #1
    17c8:	53430d70 	movtpl	r0, #15728	; 0x3d70
    17cc:	71040052 	qaddvc	r0, r2, r4
    17d0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    17d4:	ea0e7400 	b	39e7dc <_Min_Stack_Size+0x39e3dc>
    17d8:	04000004 	streq	r0, [r0], #-4
    17dc:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    17e0:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    17e4:	00000383 	andeq	r0, r0, r3, lsl #7
    17e8:	ca047304 	bgt	11e400 <_Min_Stack_Size+0x11e000>
    17ec:	80000000 	andhi	r0, r0, r0
    17f0:	00032f0e 	andeq	r2, r3, lr, lsl #30
    17f4:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    17f8:	000000ca 	andeq	r0, r0, sl, asr #1
    17fc:	05230e84 	streq	r0, [r3, #-3716]!	; 0xe84
    1800:	75040000 	strvc	r0, [r4, #-0]
    1804:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1808:	c70e8800 	strgt	r8, [lr, -r0, lsl #16]
    180c:	04000003 	streq	r0, [r0], #-3
    1810:	00ca0476 	sbceq	r0, sl, r6, ror r4
    1814:	008c0000 	addeq	r0, ip, r0
    1818:	0003e10b 	andeq	lr, r3, fp, lsl #2
    181c:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    1820:	00000156 	andeq	r0, r0, r6, asr r1
    1824:	3005100f 	andcc	r1, r5, pc
    1828:	00000344 	andeq	r0, r0, r4, asr #6
    182c:	000ab510 	andeq	fp, sl, r0, lsl r5
    1830:	b8320500 	ldmdalt	r2!, {r8, sl}
    1834:	00000000 	andeq	r0, r0, r0
    1838:	000c8610 	andeq	r8, ip, r0, lsl r6
    183c:	b8330500 	ldmdalt	r3!, {r8, sl}
    1840:	04000000 	streq	r0, [r0], #-0
    1844:	000f2210 	andeq	r2, pc, r0, lsl r2	; <UNPREDICTABLE>
    1848:	b8340500 	ldmdalt	r4!, {r8, sl}
    184c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1850:	000b7c10 	andeq	r7, fp, r0, lsl ip
    1854:	b8350500 	ldmdalt	r5!, {r8, sl}
    1858:	0c000000 	stceq	0, cr0, [r0], {-0}
    185c:	10cc0300 	sbcne	r0, ip, r0, lsl #6
    1860:	36050000 	strcc	r0, [r5], -r0
    1864:	0000030b 	andeq	r0, r0, fp, lsl #6
    1868:	000f9c11 	andeq	r9, pc, r1, lsl ip	; <UNPREDICTABLE>
    186c:	8cd50100 	ldfhie	f0, [r5], {0}
    1870:	70080019 	andvc	r0, r8, r9, lsl r0
    1874:	01000000 	mrseq	r0, (UNDEF: 0)
    1878:	0e52129c 	mrceq	2, 2, r1, cr2, cr12, {4}
    187c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1880:	0019fc01 	andseq	pc, r9, r1, lsl #24
    1884:	00002408 	andeq	r2, r0, r8, lsl #8
    1888:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    188c:	13000003 	movwne	r0, #3
    1890:	00000f1a 	andeq	r0, r0, sl, lsl pc
    1894:	97010801 	strls	r0, [r1, -r1, lsl #16]
    1898:	02000000 	andeq	r0, r0, #0
    189c:	14007791 	strne	r7, [r0], #-1937	; 0x791
    18a0:	00000c70 	andeq	r0, r0, r0, ror ip
    18a4:	4a012001 	bmi	498b0 <_Min_Stack_Size+0x494b0>
    18a8:	20000001 	andcs	r0, r0, r1
    18ac:	5008001a 	andpl	r0, r8, sl, lsl r0
    18b0:	01000000 	mrseq	r0, (UNDEF: 0)
    18b4:	0003ce9c 	muleq	r3, ip, lr
    18b8:	0fe41500 	svceq	0x00e41500
    18bc:	22010000 	andcs	r0, r1, #0
    18c0:	0000ca01 	andeq	ip, r0, r1, lsl #20
    18c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    18c8:	001a4415 	andseq	r4, sl, r5, lsl r4
    18cc:	01230100 	teqeq	r3, r0, lsl #2
    18d0:	0000014a 	andeq	r0, r0, sl, asr #2
    18d4:	15779102 	ldrbne	r9, [r7, #-258]!	; 0x102
    18d8:	00000f61 	andeq	r0, r0, r1, ror #30
    18dc:	fa012401 	blx	4a8e8 <_Min_Stack_Size+0x4a4e8>
    18e0:	02000000 	andeq	r0, r0, #0
    18e4:	12007691 	andne	r7, r0, #152043520	; 0x9100000
    18e8:	00000f43 	andeq	r0, r0, r3, asr #30
    18ec:	70013f01 	andvc	r3, r1, r1, lsl #30
    18f0:	3c08001a 	stccc	0, cr0, [r8], {26}
    18f4:	01000000 	mrseq	r0, (UNDEF: 0)
    18f8:	0004039c 	muleq	r4, ip, r3
    18fc:	0f4d1300 	svceq	0x004d1300
    1900:	3f010000 	svccc	0x00010000
    1904:	00009701 	andeq	r9, r0, r1, lsl #14
    1908:	6f910200 	svcvs	0x00910200
    190c:	0002be15 	andeq	fp, r2, r5, lsl lr
    1910:	01410100 	mrseq	r0, (UNDEF: 81)
    1914:	000000b8 	strheq	r0, [r0], -r8
    1918:	00749102 	rsbseq	r9, r4, r2, lsl #2
    191c:	000d6512 	andeq	r6, sp, r2, lsl r5
    1920:	01630100 	cmneq	r3, r0, lsl #2
    1924:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
    1928:	00000020 	andeq	r0, r0, r0, lsr #32
    192c:	04299c01 	strteq	r9, [r9], #-3073	; 0xc01
    1930:	b8130000 	ldmdalt	r3, {}	; <UNPREDICTABLE>
    1934:	01000005 	tsteq	r0, r5
    1938:	01280163 	teqeq	r8, r3, ror #2
    193c:	91020000 	mrsls	r0, (UNDEF: 2)
    1940:	18120077 	ldmdane	r2, {r0, r1, r2, r4, r5, r6}
    1944:	0100000c 	tsteq	r0, ip
    1948:	1acc017c 	bne	ff301f40 <_estack+0xdf2d1f40>
    194c:	00400800 	subeq	r0, r0, r0, lsl #16
    1950:	9c010000 	stcls	0, cr0, [r1], {-0}
    1954:	0000044f 	andeq	r0, r0, pc, asr #8
    1958:	000a7713 	andeq	r7, sl, r3, lsl r7
    195c:	017c0100 	cmneq	ip, r0, lsl #2
    1960:	00000097 	muleq	r0, r7, r0
    1964:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1968:	00108712 	andseq	r8, r0, r2, lsl r7
    196c:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    1970:	08001b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip}
    1974:	00000020 	andeq	r0, r0, r0, lsr #32
    1978:	04759c01 	ldrbteq	r9, [r5], #-3073	; 0xc01
    197c:	b8130000 	ldmdalt	r3, {}	; <UNPREDICTABLE>
    1980:	01000005 	tsteq	r0, r5
    1984:	012801a4 	smulwbeq	r8, r4, r1
    1988:	91020000 	mrsls	r0, (UNDEF: 2)
    198c:	be120077 	mrclt	0, 0, r0, cr2, cr7, {3}
    1990:	01000010 	tsteq	r0, r0, lsl r0
    1994:	1b2c01cf 	blne	b020d8 <_Min_Stack_Size+0xb01cd8>
    1998:	003c0800 	eorseq	r0, ip, r0, lsl #16
    199c:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a0:	000004d7 	ldrdeq	r0, [r0], -r7
    19a4:	000c4e13 	andeq	r4, ip, r3, lsl lr
    19a8:	01cf0100 	biceq	r0, pc, r0, lsl #2
    19ac:	000000b8 	strheq	r0, [r0], -r8
    19b0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    19b4:	00000b2b 	andeq	r0, r0, fp, lsr #22
    19b8:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    19bc:	02000000 	andeq	r0, r0, #0
    19c0:	ec137091 	ldc	0, cr7, [r3], {145}	; 0x91
    19c4:	0100000a 	tsteq	r0, sl
    19c8:	00b801cf 	adcseq	r0, r8, pc, asr #3
    19cc:	91020000 	mrsls	r0, (UNDEF: 2)
    19d0:	0b0b136c 	bleq	2c6788 <_Min_Stack_Size+0x2c6388>
    19d4:	cf010000 	svcgt	0x00010000
    19d8:	0000b801 	andeq	fp, r0, r1, lsl #16
    19dc:	68910200 	ldmvs	r1, {r9}
    19e0:	000b1013 	andeq	r1, fp, r3, lsl r0
    19e4:	01cf0100 	biceq	r0, pc, r0, lsl #2
    19e8:	000000b8 	strheq	r0, [r0], -r8
    19ec:	00009102 	andeq	r9, r0, r2, lsl #2
    19f0:	000ea312 	andeq	sl, lr, r2, lsl r3
    19f4:	01e60100 	mvneq	r0, r0, lsl #2
    19f8:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
    19fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1a00:	04fd9c01 	ldrbteq	r9, [sp], #3073	; 0xc01
    1a04:	b8130000 	ldmdalt	r3, {}	; <UNPREDICTABLE>
    1a08:	01000005 	tsteq	r0, r5
    1a0c:	012801e6 	smulwteq	r8, r6, r1
    1a10:	91020000 	mrsls	r0, (UNDEF: 2)
    1a14:	54120077 	ldrpl	r0, [r2], #-119	; 0x77
    1a18:	0100000d 	tsteq	r0, sp
    1a1c:	1b880228 	blne	fe2022c4 <_estack+0xde1d22c4>
    1a20:	00300800 	eorseq	r0, r0, r0, lsl #16
    1a24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a28:	00000541 	andeq	r0, r0, r1, asr #10
    1a2c:	000f6b13 	andeq	r6, pc, r3, lsl fp	; <UNPREDICTABLE>
    1a30:	02280100 	eoreq	r0, r8, #0, 2
    1a34:	000000b8 	strheq	r0, [r0], -r8
    1a38:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1a3c:	00000fa7 	andeq	r0, r0, r7, lsr #31
    1a40:	b8022801 	stmdalt	r2, {r0, fp, sp}
    1a44:	02000000 	andeq	r0, r0, #0
    1a48:	af137091 	svcge	0x00137091
    1a4c:	0100000f 	tsteq	r0, pc
    1a50:	00b80228 	adcseq	r0, r8, r8, lsr #4
    1a54:	91020000 	mrsls	r0, (UNDEF: 2)
    1a58:	cf12006c 	svcgt	0x0012006c
    1a5c:	0100000c 	tsteq	r0, ip
    1a60:	1bb80239 	blne	fee0234c <_estack+0xdedd234c>
    1a64:	00200800 	eoreq	r0, r0, r0, lsl #16
    1a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a6c:	00000567 	andeq	r0, r0, r7, ror #10
    1a70:	0005b813 	andeq	fp, r5, r3, lsl r8
    1a74:	02390100 	eorseq	r0, r9, #0, 2
    1a78:	00000128 	andeq	r0, r0, r8, lsr #2
    1a7c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1a80:	000dec12 	andeq	lr, sp, r2, lsl ip
    1a84:	02560100 	subseq	r0, r6, #0, 2
    1a88:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
    1a8c:	00000030 	andeq	r0, r0, r0, lsr r0
    1a90:	05ab9c01 	streq	r9, [fp, #3073]!	; 0xc01
    1a94:	77130000 	ldrvc	r0, [r3, -r0]
    1a98:	0100000e 	tsteq	r0, lr
    1a9c:	00b80256 	adcseq	r0, r8, r6, asr r2
    1aa0:	91020000 	mrsls	r0, (UNDEF: 2)
    1aa4:	0e7f1374 	mrceq	3, 3, r1, cr15, cr4, {3}
    1aa8:	56010000 	strpl	r0, [r1], -r0
    1aac:	0000b802 	andeq	fp, r0, r2, lsl #16
    1ab0:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ab4:	000e8713 	andeq	r8, lr, r3, lsl r7
    1ab8:	02560100 	subseq	r0, r6, #0, 2
    1abc:	000000b8 	strheq	r0, [r0], -r8
    1ac0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ac4:	000a7f12 	andeq	r7, sl, r2, lsl pc
    1ac8:	02680100 	rsbeq	r0, r8, #0, 2
    1acc:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
    1ad0:	00000020 	andeq	r0, r0, r0, lsr #32
    1ad4:	05d19c01 	ldrbeq	r9, [r1, #3073]	; 0xc01
    1ad8:	b8130000 	ldmdalt	r3, {}	; <UNPREDICTABLE>
    1adc:	01000005 	tsteq	r0, r5
    1ae0:	01280268 	teqeq	r8, r8, ror #4
    1ae4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ae8:	c2120077 	andsgt	r0, r2, #119	; 0x77
    1aec:	0100000d 	tsteq	r0, sp
    1af0:	1c28027a 	sfmne	f0, 4, [r8], #-488	; 0xfffffe18
    1af4:	00200800 	eoreq	r0, r0, r0, lsl #16
    1af8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1afc:	000005f7 	strdeq	r0, [r0], -r7
    1b00:	0005b813 	andeq	fp, r5, r3, lsl r8
    1b04:	027a0100 	rsbseq	r0, sl, #0, 2
    1b08:	00000128 	andeq	r0, r0, r8, lsr #2
    1b0c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1b10:	000cb512 	andeq	fp, ip, r2, lsl r5
    1b14:	02930100 	addseq	r0, r3, #0, 2
    1b18:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
    1b1c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1b20:	063b9c01 	ldrteq	r9, [fp], -r1, lsl #24
    1b24:	c6130000 	ldrgt	r0, [r3], -r0
    1b28:	0100000a 	tsteq	r0, sl
    1b2c:	00b80293 	umlalseq	r0, r8, r3, r2
    1b30:	91020000 	mrsls	r0, (UNDEF: 2)
    1b34:	0dfd136c 	ldcleq	3, cr1, [sp, #432]!	; 0x1b0
    1b38:	93010000 	movwls	r0, #4096	; 0x1000
    1b3c:	0000b802 	andeq	fp, r0, r2, lsl #16
    1b40:	68910200 	ldmvs	r1, {r9}
    1b44:	0002be15 	andeq	fp, r2, r5, lsl lr
    1b48:	02950100 	addseq	r0, r5, #0, 2
    1b4c:	000000b8 	strheq	r0, [r0], -r8
    1b50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b54:	00107812 	andseq	r7, r0, r2, lsl r8
    1b58:	02b90100 	adcseq	r0, r9, #0, 2
    1b5c:	08001c84 	stmdaeq	r0, {r2, r7, sl, fp, ip}
    1b60:	0000003c 	andeq	r0, r0, ip, lsr r0
    1b64:	067f9c01 	ldrbteq	r9, [pc], -r1, lsl #24
    1b68:	20130000 	andscs	r0, r3, r0
    1b6c:	0100000e 	tsteq	r0, lr
    1b70:	00b802b9 	ldrhteq	r0, [r8], r9
    1b74:	91020000 	mrsls	r0, (UNDEF: 2)
    1b78:	0d8e136c 	stceq	3, cr1, [lr, #432]	; 0x1b0
    1b7c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    1b80:	0000b802 	andeq	fp, r0, r2, lsl #16
    1b84:	68910200 	ldmvs	r1, {r9}
    1b88:	0002be15 	andeq	fp, r2, r5, lsl lr
    1b8c:	02bb0100 	adcseq	r0, fp, #0, 2
    1b90:	000000b8 	strheq	r0, [r0], -r8
    1b94:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b98:	000c0712 	andeq	r0, ip, r2, lsl r7
    1b9c:	035f0100 	cmpeq	pc, #0, 2
    1ba0:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
    1ba4:	00000038 	andeq	r0, r0, r8, lsr r0
    1ba8:	06b49c01 	ldrteq	r9, [r4], r1, lsl #24
    1bac:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    1bb0:	0100000f 	tsteq	r0, pc
    1bb4:	00b8035f 	adcseq	r0, r8, pc, asr r3
    1bb8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bbc:	02be156c 	adcseq	r1, lr, #108, 10	; 0x1b000000
    1bc0:	61010000 	mrsvs	r0, (UNDEF: 1)
    1bc4:	0000b803 	andeq	fp, r0, r3, lsl #16
    1bc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bcc:	0c5c1600 	mrrceq	6, 0, r1, ip, cr0
    1bd0:	7b010000 	blvc	41bd8 <_Min_Stack_Size+0x417d8>
    1bd4:	00009703 	andeq	r9, r0, r3, lsl #14
    1bd8:	001cf800 	andseq	pc, ip, r0, lsl #16
    1bdc:	00002008 	andeq	r2, r0, r8
    1be0:	129c0100 	addsne	r0, ip, #0, 2
    1be4:	00000bf8 	strdeq	r0, [r0], -r8
    1be8:	18039401 	stmdane	r3, {r0, sl, ip, pc}
    1bec:	3808001d 	stmdacc	r8, {r0, r2, r3, r4}
    1bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    1bf4:	0006ff9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    1bf8:	0cc41300 	stcleq	3, cr1, [r4], {0}
    1bfc:	94010000 	strls	r0, [r1], #-0
    1c00:	0000b803 	andeq	fp, r0, r3, lsl #16
    1c04:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c08:	0002be15 	andeq	fp, r2, r5, lsl lr
    1c0c:	03960100 	orrseq	r0, r6, #0, 2
    1c10:	000000b8 	strheq	r0, [r0], -r8
    1c14:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c18:	000ba312 	andeq	sl, fp, r2, lsl r3
    1c1c:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    1c20:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
    1c24:	00000038 	andeq	r0, r0, r8, lsr r0
    1c28:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
    1c2c:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
    1c30:	0100000a 	tsteq	r0, sl
    1c34:	00b803b4 	ldrhteq	r0, [r8], r4
    1c38:	91020000 	mrsls	r0, (UNDEF: 2)
    1c3c:	02be156c 	adcseq	r1, lr, #108, 10	; 0x1b000000
    1c40:	b6010000 	strlt	r0, [r1], -r0
    1c44:	0000b803 	andeq	fp, r0, r3, lsl #16
    1c48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c4c:	0ef91200 	cdpeq	2, 15, cr1, cr9, cr0, {0}
    1c50:	d3010000 	movwle	r0, #4096	; 0x1000
    1c54:	001d8803 	andseq	r8, sp, r3, lsl #16
    1c58:	00003808 	andeq	r3, r0, r8, lsl #16
    1c5c:	699c0100 	ldmibvs	ip, {r8}
    1c60:	13000007 	movwne	r0, #7
    1c64:	00000a6e 	andeq	r0, r0, lr, ror #20
    1c68:	b803d301 	stmdalt	r3, {r0, r8, r9, ip, lr, pc}
    1c6c:	02000000 	andeq	r0, r0, #0
    1c70:	be156c91 	mrclt	12, 0, r6, cr5, cr1, {4}
    1c74:	01000002 	tsteq	r0, r2
    1c78:	00b803d5 	ldrsbteq	r0, [r8], r5
    1c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c80:	73120074 	tstvc	r2, #116	; 0x74
    1c84:	0100000f 	tsteq	r0, pc
    1c88:	1dc00407 	cfstrdne	mvd0, [r0, #28]
    1c8c:	01540800 	cmpeq	r4, r0, lsl #16
    1c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c94:	000007e9 	andeq	r0, r0, r9, ror #15
    1c98:	000b3f13 	andeq	r3, fp, r3, lsl pc
    1c9c:	04070100 	streq	r0, [r7], #-256	; 0x100
    1ca0:	000007e9 	andeq	r0, r0, r9, ror #15
    1ca4:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
    1ca8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1cac:	b8040901 	stmdalt	r4, {r0, r8, fp}
    1cb0:	02000000 	andeq	r0, r0, #0
    1cb4:	dd157091 	ldcle	0, cr7, [r5, #-580]	; 0xfffffdbc
    1cb8:	0100000c 	tsteq	r0, ip
    1cbc:	00b80409 	adcseq	r0, r8, r9, lsl #8
    1cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cc4:	0472156c 	ldrbteq	r1, [r2], #-1388	; 0x56c
    1cc8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ccc:	0000b804 	andeq	fp, r0, r4, lsl #16
    1cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cd4:	00041915 	andeq	r1, r4, r5, lsl r9
    1cd8:	04090100 	streq	r0, [r9], #-256	; 0x100
    1cdc:	000000b8 	strheq	r0, [r0], -r8
    1ce0:	15689102 	strbne	r9, [r8, #-258]!	; 0x102
    1ce4:	00000402 	andeq	r0, r0, r2, lsl #8
    1ce8:	b8040901 	stmdalt	r4, {r0, r8, fp}
    1cec:	02000000 	andeq	r0, r0, #0
    1cf0:	14156491 	ldrne	r6, [r5], #-1169	; 0x491
    1cf4:	01000004 	tsteq	r0, r4
    1cf8:	00b80409 	adcseq	r0, r8, r9, lsl #8
    1cfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1d00:	04180060 	ldreq	r0, [r8], #-96	; 0x60
    1d04:	00000344 	andeq	r0, r0, r4, asr #6
    1d08:	000ca412 	andeq	sl, ip, r2, lsl r4
    1d0c:	04840100 	streq	r0, [r4], #256	; 0x100
    1d10:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
    1d14:	0000005c 	andeq	r0, r0, ip, asr r0
    1d18:	08249c01 	stmdaeq	r4!, {r0, sl, fp, ip, pc}
    1d1c:	e3130000 	tst	r3, #0
    1d20:	0100000c 	tsteq	r0, ip
    1d24:	00b80484 	adcseq	r0, r8, r4, lsl #9
    1d28:	91020000 	mrsls	r0, (UNDEF: 2)
    1d2c:	02be156c 	adcseq	r1, lr, #108, 10	; 0x1b000000
    1d30:	86010000 	strhi	r0, [r1], -r0
    1d34:	0000b804 	andeq	fp, r0, r4, lsl #16
    1d38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d3c:	0db41200 	lfmeq	f1, 4, [r4]
    1d40:	a4010000 	strge	r0, [r1], #-0
    1d44:	001f7004 	andseq	r7, pc, r4
    1d48:	00002008 	andeq	r2, r0, r8
    1d4c:	4a9c0100 	bmi	fe702154 <_estack+0xde6d2154>
    1d50:	13000008 	movwne	r0, #8
    1d54:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    1d58:	2804a401 	stmdacs	r4, {r0, sl, sp, pc}
    1d5c:	02000001 	andeq	r0, r0, #1
    1d60:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    1d64:	00000c2f 	andeq	r0, r0, pc, lsr #24
    1d68:	9004b501 	andls	fp, r4, r1, lsl #10
    1d6c:	2008001f 	andcs	r0, r8, pc, lsl r0
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	0008709c 	muleq	r8, ip, r0
    1d78:	05b81300 	ldreq	r1, [r8, #768]!	; 0x300
    1d7c:	b5010000 	strlt	r0, [r1, #-0]
    1d80:	00012804 	andeq	r2, r1, r4, lsl #16
    1d84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d88:	10671200 	rsbne	r1, r7, r0, lsl #4
    1d8c:	c6010000 	strgt	r0, [r1], -r0
    1d90:	001fb004 	andseq	fp, pc, r4
    1d94:	00001c08 	andeq	r1, r0, r8, lsl #24
    1d98:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1d9c:	13000008 	movwne	r0, #8
    1da0:	00000e2f 	andeq	r0, r0, pc, lsr #28
    1da4:	b804c601 	stmdalt	r4, {r0, r9, sl, lr, pc}
    1da8:	02000000 	andeq	r0, r0, #0
    1dac:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1db0:	00000d9a 	muleq	r0, sl, sp
    1db4:	cc04db01 	stcgt	11, cr13, [r4], {1}
    1db8:	3c08001f 	stccc	0, cr0, [r8], {31}
    1dbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1dc0:	0008cb9c 	muleq	r8, ip, fp
    1dc4:	0ddd1300 	ldcleq	3, cr1, [sp]
    1dc8:	db010000 	blle	41dd0 <_Min_Stack_Size+0x419d0>
    1dcc:	0000b804 	andeq	fp, r0, r4, lsl #16
    1dd0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1dd4:	0002be15 	andeq	fp, r2, r5, lsl lr
    1dd8:	04dd0100 	ldrbeq	r0, [sp], #256	; 0x100
    1ddc:	000000b8 	strheq	r0, [r0], -r8
    1de0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1de4:	000af112 	andeq	pc, sl, r2, lsl r1	; <UNPREDICTABLE>
    1de8:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    1dec:	08002008 	stmdaeq	r0, {r3, sp}
    1df0:	00000040 	andeq	r0, r0, r0, asr #32
    1df4:	09009c01 	stmdbeq	r0, {r0, sl, fp, ip, pc}
    1df8:	8d130000 	ldchi	0, cr0, [r3, #-0]
    1dfc:	0100000a 	tsteq	r0, sl
    1e00:	00b804fb 	ldrshteq	r0, [r8], fp
    1e04:	91020000 	mrsls	r0, (UNDEF: 2)
    1e08:	02be156c 	adcseq	r1, lr, #108, 10	; 0x1b000000
    1e0c:	fd010000 	stc2	0, cr0, [r1, #-0]
    1e10:	0000b804 	andeq	fp, r0, r4, lsl #16
    1e14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e18:	0bca1200 	bleq	ff286620 <_estack+0xdf256620>
    1e1c:	1f010000 	svcne	0x00010000
    1e20:	00204805 	eoreq	r4, r0, r5, lsl #16
    1e24:	00003c08 	andeq	r3, r0, r8, lsl #24
    1e28:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    1e2c:	13000009 	movwne	r0, #9
    1e30:	00000cf4 	strdeq	r0, [r0], -r4
    1e34:	b8051f01 	stmdalt	r5, {r0, r8, r9, sl, fp, ip}
    1e38:	02000000 	andeq	r0, r0, #0
    1e3c:	be156c91 	mrclt	12, 0, r6, cr5, cr1, {4}
    1e40:	01000002 	tsteq	r0, r2
    1e44:	00b80521 	adcseq	r0, r8, r1, lsr #10
    1e48:	91020000 	mrsls	r0, (UNDEF: 2)
    1e4c:	60120074 	andsvs	r0, r2, r4, ror r0
    1e50:	0100000e 	tsteq	r0, lr
    1e54:	20840543 	addcs	r0, r4, r3, asr #10
    1e58:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e60:	0000096a 	andeq	r0, r0, sl, ror #18
    1e64:	000d0b13 	andeq	r0, sp, r3, lsl fp
    1e68:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    1e6c:	000000b8 	strheq	r0, [r0], -r8
    1e70:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1e74:	000002be 			; <UNDEFINED> instruction: 0x000002be
    1e78:	b8054501 	stmdalt	r5, {r0, r8, sl, lr}
    1e7c:	02000000 	andeq	r0, r0, #0
    1e80:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e84:	00000d22 	andeq	r0, r0, r2, lsr #26
    1e88:	c0056401 	andgt	r6, r5, r1, lsl #8
    1e8c:	3c080020 	stccc	0, cr0, [r8], {32}
    1e90:	01000000 	mrseq	r0, (UNDEF: 0)
    1e94:	00099f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    1e98:	0a9c1300 	beq	fe706aa0 <_estack+0xde6d6aa0>
    1e9c:	64010000 	strvs	r0, [r1], #-0
    1ea0:	0000b805 	andeq	fp, r0, r5, lsl #16
    1ea4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ea8:	0002be15 	andeq	fp, r2, r5, lsl lr
    1eac:	05660100 	strbeq	r0, [r6, #-256]!	; 0x100
    1eb0:	000000b8 	strheq	r0, [r0], -r8
    1eb4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1eb8:	00105212 	andseq	r5, r0, r2, lsl r2
    1ebc:	05890100 	streq	r0, [r9, #256]	; 0x100
    1ec0:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
    1ec4:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ec8:	09c59c01 	stmibeq	r5, {r0, sl, fp, ip, pc}^
    1ecc:	8f130000 	svchi	0x00130000
    1ed0:	0100000e 	tsteq	r0, lr
    1ed4:	00b80589 	adcseq	r0, r8, r9, lsl #11
    1ed8:	91020000 	mrsls	r0, (UNDEF: 2)
    1edc:	ae120074 	mrcge	0, 0, r0, cr2, cr4, {3}
    1ee0:	0100000e 	tsteq	r0, lr
    1ee4:	211805b4 			; <UNDEFINED> instruction: 0x211805b4
    1ee8:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1eec:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ef0:	000009fa 	strdeq	r0, [r0], -sl
    1ef4:	000b3013 	andeq	r3, fp, r3, lsl r0
    1ef8:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    1efc:	000000b8 	strheq	r0, [r0], -r8
    1f00:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1f04:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    1f08:	2805b401 	stmdacs	r5, {r0, sl, ip, sp, pc}
    1f0c:	02000001 	andeq	r0, r0, #1
    1f10:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    1f14:	00000b8c 	andeq	r0, r0, ip, lsl #23
    1f18:	5405d401 	strpl	sp, [r5], #-1025	; 0x401
    1f1c:	3c080021 	stccc	0, cr0, [r8], {33}	; 0x21
    1f20:	01000000 	mrseq	r0, (UNDEF: 0)
    1f24:	000a2f9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    1f28:	0d701300 	ldcleq	3, cr1, [r0, #-0]
    1f2c:	d4010000 	strle	r0, [r1], #-0
    1f30:	0000b805 	andeq	fp, r0, r5, lsl #16
    1f34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f38:	0005b813 	andeq	fp, r5, r3, lsl r8
    1f3c:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    1f40:	00000128 	andeq	r0, r0, r8, lsr #2
    1f44:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1f48:	0010fb12 	andseq	pc, r0, r2, lsl fp	; <UNPREDICTABLE>
    1f4c:	05f00100 	ldrbeq	r0, [r0, #256]!	; 0x100
    1f50:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
    1f54:	0000003c 	andeq	r0, r0, ip, lsr r0
    1f58:	0a649c01 	beq	1928f64 <_Min_Stack_Size+0x1928b64>
    1f5c:	7f130000 	svcvc	0x00130000
    1f60:	0100000d 	tsteq	r0, sp
    1f64:	00b805f0 	ldrshteq	r0, [r8], r0
    1f68:	91020000 	mrsls	r0, (UNDEF: 2)
    1f6c:	05b81374 	ldreq	r1, [r8, #884]!	; 0x374
    1f70:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1f74:	00012805 	andeq	r2, r1, r5, lsl #16
    1f78:	73910200 	orrsvc	r0, r1, #0, 4
    1f7c:	10921200 	addsne	r1, r2, r0, lsl #4
    1f80:	24010000 	strcs	r0, [r1], #-0
    1f84:	0021cc06 	eoreq	ip, r1, r6, lsl #24
    1f88:	00003c08 	andeq	r3, r0, r8, lsl #24
    1f8c:	999c0100 	ldmibls	ip, {r8}
    1f90:	1300000a 	movwne	r0, #10
    1f94:	00000c95 	muleq	r0, r5, ip
    1f98:	b8062401 	stmdalt	r6, {r0, sl, sp}
    1f9c:	02000000 	andeq	r0, r0, #0
    1fa0:	b8137491 	ldmdalt	r3, {r0, r4, r7, sl, ip, sp, lr}
    1fa4:	01000005 	tsteq	r0, r5
    1fa8:	01280624 	teqeq	r8, r4, lsr #12
    1fac:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb0:	85120073 	ldrhi	r0, [r2, #-115]	; 0x73
    1fb4:	0100000f 	tsteq	r0, pc
    1fb8:	22080651 	andcs	r0, r8, #84934656	; 0x5100000
    1fbc:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fc4:	00000ace 	andeq	r0, r0, lr, asr #21
    1fc8:	000ff313 	andeq	pc, pc, r3, lsl r3	; <UNPREDICTABLE>
    1fcc:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    1fd0:	000000b8 	strheq	r0, [r0], -r8
    1fd4:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1fd8:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    1fdc:	28065101 	stmdacs	r6, {r0, r8, ip, lr}
    1fe0:	02000001 	andeq	r0, r0, #1
    1fe4:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    1fe8:	00000be1 	andeq	r0, r0, r1, ror #23
    1fec:	44067b01 	strmi	r7, [r6], #-2817	; 0xb01
    1ff0:	3c080022 	stccc	0, cr0, [r8], {34}	; 0x22
    1ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff8:	000b039c 	muleq	fp, ip, r3
    1ffc:	0b301300 	bleq	c06c04 <_Min_Stack_Size+0xc06804>
    2000:	7b010000 	blvc	42008 <_Min_Stack_Size+0x41c08>
    2004:	0000b806 	andeq	fp, r0, r6, lsl #16
    2008:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    200c:	0005b813 	andeq	fp, r5, r3, lsl r8
    2010:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2014:	00000128 	andeq	r0, r0, r8, lsr #2
    2018:	00739102 	rsbseq	r9, r3, r2, lsl #2
    201c:	000ec512 	andeq	ip, lr, r2, lsl r5
    2020:	06980100 	ldreq	r0, [r8], r0, lsl #2
    2024:	08002280 	stmdaeq	r0, {r7, r9, sp}
    2028:	0000003c 	andeq	r0, r0, ip, lsr r0
    202c:	0b389c01 	bleq	e29038 <_Min_Stack_Size+0xe28c38>
    2030:	70130000 	andsvc	r0, r3, r0
    2034:	0100000d 	tsteq	r0, sp
    2038:	00b80698 	umlalseq	r0, r8, r8, r6
    203c:	91020000 	mrsls	r0, (UNDEF: 2)
    2040:	05b81374 	ldreq	r1, [r8, #884]!	; 0x374
    2044:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2048:	00012806 	andeq	r2, r1, r6, lsl #16
    204c:	73910200 	orrsvc	r0, r1, #0, 4
    2050:	0bb31200 	bleq	fecc6858 <_estack+0xdec96858>
    2054:	b1010000 	mrslt	r0, (UNDEF: 1)
    2058:	0022bc06 	eoreq	fp, r2, r6, lsl #24
    205c:	00003c08 	andeq	r3, r0, r8, lsl #24
    2060:	6d9c0100 	ldfvss	f0, [ip]
    2064:	1300000b 	movwne	r0, #11
    2068:	00000d7f 	andeq	r0, r0, pc, ror sp
    206c:	b806b101 	stmdalt	r6, {r0, r8, ip, sp, pc}
    2070:	02000000 	andeq	r0, r0, #0
    2074:	b8137491 	ldmdalt	r3, {r0, r4, r7, sl, ip, sp, lr}
    2078:	01000005 	tsteq	r0, r5
    207c:	012806b1 			; <UNDEFINED> instruction: 0x012806b1
    2080:	91020000 	mrsls	r0, (UNDEF: 2)
    2084:	d5120073 	ldrle	r0, [r2, #-115]	; 0x73
    2088:	0100000a 	tsteq	r0, sl
    208c:	22f806e2 	rscscs	r0, r8, #236978176	; 0xe200000
    2090:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2094:	9c010000 	stcls	0, cr0, [r1], {-0}
    2098:	00000ba2 	andeq	r0, r0, r2, lsr #23
    209c:	000c9513 	andeq	r9, ip, r3, lsl r5
    20a0:	06e20100 	strbteq	r0, [r2], r0, lsl #2
    20a4:	000000b8 	strheq	r0, [r0], -r8
    20a8:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    20ac:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    20b0:	2806e201 	stmdacs	r6, {r0, r9, sp, lr, pc}
    20b4:	02000001 	andeq	r0, r0, #1
    20b8:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    20bc:	00000e09 	andeq	r0, r0, r9, lsl #28
    20c0:	34070b01 	strcc	r0, [r7], #-2817	; 0xb01
    20c4:	3c080023 	stccc	0, cr0, [r8], {35}	; 0x23
    20c8:	01000000 	mrseq	r0, (UNDEF: 0)
    20cc:	000bd79c 	muleq	fp, ip, r7
    20d0:	0ff31300 	svceq	0x00f31300
    20d4:	0b010000 	bleq	420dc <_Min_Stack_Size+0x41cdc>
    20d8:	0000b807 	andeq	fp, r0, r7, lsl #16
    20dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20e0:	0005b813 	andeq	fp, r5, r3, lsl r8
    20e4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    20e8:	00000128 	andeq	r0, r0, r8, lsr #2
    20ec:	00739102 	rsbseq	r9, r3, r2, lsl #2
    20f0:	0010de12 	andseq	sp, r0, r2, lsl lr
    20f4:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    20f8:	08002370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp}
    20fc:	0000003c 	andeq	r0, r0, ip, lsr r0
    2100:	0c0c9c01 	stceq	12, cr9, [ip], {1}
    2104:	30130000 	andscc	r0, r3, r0
    2108:	0100000b 	tsteq	r0, fp
    210c:	00b8073c 	adcseq	r0, r8, ip, lsr r7
    2110:	91020000 	mrsls	r0, (UNDEF: 2)
    2114:	05b81374 	ldreq	r1, [r8, #884]!	; 0x374
    2118:	3c010000 	stccc	0, cr0, [r1], {-0}
    211c:	00012807 	andeq	r2, r1, r7, lsl #16
    2120:	73910200 	orrsvc	r0, r1, #0, 4
    2124:	0d371200 	lfmeq	f1, 4, [r7, #-0]
    2128:	5c010000 	stcpl	0, cr0, [r1], {-0}
    212c:	0023ac07 	eoreq	sl, r3, r7, lsl #24
    2130:	00003c08 	andeq	r3, r0, r8, lsl #24
    2134:	419c0100 	orrsmi	r0, ip, r0, lsl #2
    2138:	1300000c 	movwne	r0, #12
    213c:	00000d70 	andeq	r0, r0, r0, ror sp
    2140:	b8075c01 	stmdalt	r7, {r0, sl, fp, ip, lr}
    2144:	02000000 	andeq	r0, r0, #0
    2148:	b8137491 	ldmdalt	r3, {r0, r4, r7, sl, ip, sp, lr}
    214c:	01000005 	tsteq	r0, r5
    2150:	0128075c 	teqeq	r8, ip, asr r7
    2154:	91020000 	mrsls	r0, (UNDEF: 2)
    2158:	c7120073 			; <UNDEFINED> instruction: 0xc7120073
    215c:	0100000f 	tsteq	r0, pc
    2160:	23e80778 	mvncs	r0, #120, 14	; 0x1e00000
    2164:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2168:	9c010000 	stcls	0, cr0, [r1], {-0}
    216c:	00000c76 	andeq	r0, r0, r6, ror ip
    2170:	000d7f13 	andeq	r7, sp, r3, lsl pc
    2174:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
    2178:	000000b8 	strheq	r0, [r0], -r8
    217c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2180:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2184:	28077801 	stmdacs	r7, {r0, fp, ip, sp, lr}
    2188:	02000001 	andeq	r0, r0, #1
    218c:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    2190:	00000edc 	ldrdeq	r0, [r0], -ip
    2194:	2407ac01 	strcs	sl, [r7], #-3073	; 0xc01
    2198:	3c080024 	stccc	0, cr0, [r8], {36}	; 0x24
    219c:	01000000 	mrseq	r0, (UNDEF: 0)
    21a0:	000cab9c 	muleq	ip, ip, fp
    21a4:	0c951300 	ldceq	3, cr1, [r5], {0}
    21a8:	ac010000 	stcge	0, cr0, [r1], {-0}
    21ac:	0000b807 	andeq	fp, r0, r7, lsl #16
    21b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21b4:	0005b813 	andeq	fp, r5, r3, lsl r8
    21b8:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    21bc:	00000128 	andeq	r0, r0, r8, lsr #2
    21c0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    21c4:	000b4a12 	andeq	r4, fp, r2, lsl sl
    21c8:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
    21cc:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
    21d0:	0000003c 	andeq	r0, r0, ip, lsr r0
    21d4:	0ce09c01 	stcleq	12, cr9, [r0], #4
    21d8:	f3130000 	vhadd.u16	d0, d3, d0
    21dc:	0100000f 	tsteq	r0, pc
    21e0:	00b807d9 	ldrsbteq	r0, [r8], r9
    21e4:	91020000 	mrsls	r0, (UNDEF: 2)
    21e8:	05b81374 	ldreq	r1, [r8, #884]!	; 0x374
    21ec:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    21f0:	00012807 	andeq	r2, r1, r7, lsl #16
    21f4:	73910200 	orrsvc	r0, r1, #0, 4
    21f8:	10a91200 	adcne	r1, r9, r0, lsl #4
    21fc:	07010000 	streq	r0, [r1, -r0]
    2200:	00249c08 	eoreq	r9, r4, r8, lsl #24
    2204:	00004808 	andeq	r4, r0, r8, lsl #16
    2208:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    220c:	1300000d 	movwne	r0, #13
    2210:	00000b75 	andeq	r0, r0, r5, ror fp
    2214:	97080701 	strls	r0, [r8, -r1, lsl #14]
    2218:	02000000 	andeq	r0, r0, #0
    221c:	b8137791 	ldmdalt	r3, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    2220:	01000005 	tsteq	r0, r5
    2224:	01280807 	teqeq	r8, r7, lsl #16
    2228:	91020000 	mrsls	r0, (UNDEF: 2)
    222c:	40190076 	andsmi	r0, r9, r6, ror r0
    2230:	0100000e 	tsteq	r0, lr
    2234:	00fa082c 	rscseq	r0, sl, ip, lsr #16
    2238:	24e40000 	strbtcs	r0, [r4], #0
    223c:	00740800 	rsbseq	r0, r4, r0, lsl #16
    2240:	9c010000 	stcls	0, cr0, [r1], {-0}
    2244:	00000d6c 	andeq	r0, r0, ip, ror #26
    2248:	000c2613 	andeq	r2, ip, r3, lsl r6
    224c:	082c0100 	stmdaeq	ip!, {r8}
    2250:	00000097 	muleq	r0, r7, r0
    2254:	17679102 	strbne	r9, [r7, -r2, lsl #2]!
    2258:	00706d74 	rsbseq	r6, r0, r4, ror sp
    225c:	b8082e01 	stmdalt	r8, {r0, r9, sl, fp, sp}
    2260:	02000000 	andeq	r0, r0, #0
    2264:	ab156c91 	blge	55d4b0 <_Min_Stack_Size+0x55d0b0>
    2268:	0100000a 	tsteq	r0, sl
    226c:	00b8082f 	adcseq	r0, r8, pc, lsr #16
    2270:	91020000 	mrsls	r0, (UNDEF: 2)
    2274:	08a31574 	stmiaeq	r3!, {r2, r4, r5, r6, r8, sl, ip}
    2278:	30010000 	andcc	r0, r1, r0
    227c:	0000fa08 	andeq	pc, r0, r8, lsl #20
    2280:	73910200 	orrsvc	r0, r1, #0, 4
    2284:	0b671a00 	bleq	19c8a8c <_Min_Stack_Size+0x19c868c>
    2288:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    228c:	00255808 	eoreq	r5, r5, r8, lsl #16
    2290:	00001c08 	andeq	r1, r0, r8, lsl #24
    2294:	199c0100 	ldmibne	ip, {r8}
    2298:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    229c:	06086d01 	streq	r6, [r8], -r1, lsl #26
    22a0:	74000001 	strvc	r0, [r0], #-1
    22a4:	38080025 	stmdacc	r8, {r0, r2, r5}
    22a8:	01000000 	mrseq	r0, (UNDEF: 0)
    22ac:	000db79c 	muleq	sp, ip, r7
    22b0:	0b751300 	bleq	1d46eb8 <_Min_Stack_Size+0x1d46ab8>
    22b4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    22b8:	00009708 	andeq	r9, r0, r8, lsl #14
    22bc:	6f910200 	svcvs	0x00910200
    22c0:	0008a315 	andeq	sl, r8, r5, lsl r3
    22c4:	086f0100 	stmdaeq	pc!, {r8}^	; <UNPREDICTABLE>
    22c8:	00000106 	andeq	r0, r0, r6, lsl #2
    22cc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    22d0:	000b1512 	andeq	r1, fp, r2, lsl r5
    22d4:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    22d8:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
    22dc:	00000020 	andeq	r0, r0, r0, lsr #32
    22e0:	0ddd9c01 	ldcleq	12, cr9, [sp, #4]
    22e4:	75130000 	ldrvc	r0, [r3, #-0]
    22e8:	0100000b 	tsteq	r0, fp
    22ec:	0097088f 	addseq	r0, r7, pc, lsl #17
    22f0:	91020000 	mrsls	r0, (UNDEF: 2)
    22f4:	97060077 	smlsdxls	r6, r7, r0, r0
    22f8:	ed000000 	stc	0, cr0, [r0, #-0]
    22fc:	0700000d 	streq	r0, [r0, -sp]
    2300:	000000c3 	andeq	r0, r0, r3, asr #1
    2304:	321b000f 	andscc	r0, fp, #15
    2308:	0100000f 	tsteq	r0, pc
    230c:	000dfe8d 	andeq	pc, sp, sp, lsl #29
    2310:	14030500 	strne	r0, [r3], #-1280	; 0x500
    2314:	1c200000 	stcne	0, cr0, [r0], #-0
    2318:	00000e03 	andeq	r0, r0, r3, lsl #28
    231c:	000ddd05 	andeq	sp, sp, r5, lsl #26
    2320:	01561d00 	cmpeq	r6, r0, lsl #26
    2324:	a7060000 	strge	r0, [r6, -r0]
    2328:	0000df06 	andeq	sp, r0, r6, lsl #30
    232c:	09c20000 	stmibeq	r2, {}^	; <UNPREDICTABLE>
    2330:	00040000 	andeq	r0, r4, r0
    2334:	0000076a 	andeq	r0, r0, sl, ror #14
    2338:	00210104 	eoreq	r0, r1, r4, lsl #2
    233c:	e3010000 	movw	r0, #4096	; 0x1000
    2340:	0c000014 	stceq	0, cr0, [r0], {20}
    2344:	c0000001 	andgt	r0, r0, r1
    2348:	00000002 	andeq	r0, r0, r2
    234c:	b3000000 	movwlt	r0, #0
    2350:	0200000f 	andeq	r0, r0, #15
    2354:	01450601 	cmpeq	r5, r1, lsl #12
    2358:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    235c:	02000001 	andeq	r0, r0, #1
    2360:	0000371d 	andeq	r3, r0, sp, lsl r7
    2364:	08010200 	stmdaeq	r1, {r9}
    2368:	00000143 	andeq	r0, r0, r3, asr #2
    236c:	7f050202 	svcvc	0x00050202
    2370:	03000001 	movweq	r0, #1
    2374:	00000378 	andeq	r0, r0, r8, ror r3
    2378:	00502b02 	subseq	r2, r0, r2, lsl #22
    237c:	02020000 	andeq	r0, r2, #0
    2380:	00000e07 	andeq	r0, r0, r7, lsl #28
    2384:	016f0300 	cmneq	pc, r0, lsl #6
    2388:	3f020000 	svccc	0x00020000
    238c:	00000062 	andeq	r0, r0, r2, rrx
    2390:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    2394:	03000000 	movweq	r0, #0
    2398:	000004f4 	strdeq	r0, [r0], -r4
    239c:	00744102 	rsbseq	r4, r4, r2, lsl #2
    23a0:	04020000 	streq	r0, [r2], #-0
    23a4:	00012607 	andeq	r2, r1, r7, lsl #12
    23a8:	05080200 	streq	r0, [r8, #-512]	; 0x200
    23ac:	00000000 	andeq	r0, r0, r0
    23b0:	21070802 	tstcs	r7, r2, lsl #16
    23b4:	04000001 	streq	r0, [r0], #-1
    23b8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    23bc:	04020074 	streq	r0, [r2], #-116	; 0x74
    23c0:	00012b07 	andeq	r2, r1, r7, lsl #22
    23c4:	01b00300 	lslseq	r0, r0, #6
    23c8:	2a030000 	bcs	c23d0 <_Min_Stack_Size+0xc1fd0>
    23cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    23d0:	00037a03 	andeq	r7, r3, r3, lsl #20
    23d4:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    23d8:	03000000 	movweq	r0, #0
    23dc:	00000171 	andeq	r0, r0, r1, ror r1
    23e0:	00574103 	subseq	r4, r7, r3, lsl #2
    23e4:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    23e8:	03000004 	movweq	r0, #4
    23ec:	00006942 	andeq	r6, r0, r2, asr #18
    23f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    23f4:	00000192 	muleq	r0, r2, r1
    23f8:	0000a205 	andeq	sl, r0, r5, lsl #4
    23fc:	00ad0500 	adceq	r0, sp, r0, lsl #10
    2400:	01060000 	mrseq	r0, (UNDEF: 6)
    2404:	ea01f704 	b	8001c <_Min_Stack_Size+0x7fc1c>
    2408:	07000000 	streq	r0, [r0, -r0]
    240c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    2410:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    2414:	00010054 	andeq	r0, r1, r4, asr r0
    2418:	001dc809 	andseq	ip, sp, r9, lsl #16
    241c:	01f70400 	mvnseq	r0, r0, lsl #8
    2420:	000000d4 	ldrdeq	r0, [r0], -r4
    2424:	004d1609 	subeq	r1, sp, r9, lsl #12
    2428:	01f70400 	mvnseq	r0, r0, lsl #8
    242c:	000000d4 	ldrdeq	r0, [r0], -r4
    2430:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    2434:	00011801 	andeq	r1, r1, r1, lsl #16
    2438:	05c60700 	strbeq	r0, [r6, #1792]	; 0x700
    243c:	07000000 	streq	r0, [r0, -r0]
    2440:	0000071e 	andeq	r0, r0, lr, lsl r7
    2444:	ef090001 	svc	0x00090001
    2448:	04000006 	streq	r0, [r0], #-6
    244c:	010201f9 	strdeq	r0, [r2, -r9]
    2450:	1c0a0000 	stcne	0, cr0, [sl], {-0}
    2454:	e2052604 	and	r2, r5, #4, 12	; 0x400000
    2458:	0b000001 	bleq	2464 <_Min_Stack_Size+0x2064>
    245c:	04005253 	streq	r5, [r0], #-595	; 0x253
    2460:	00ca0528 	sbceq	r0, sl, r8, lsr #10
    2464:	0c000000 	stceq	0, cr0, [r0], {-0}
    2468:	000004ac 	andeq	r0, r0, ip, lsr #9
    246c:	a2052904 	andge	r2, r5, #4, 18	; 0x10000
    2470:	02000000 	andeq	r0, r0, #0
    2474:	0052440b 	subseq	r4, r2, fp, lsl #8
    2478:	ca052a04 	bgt	14cc90 <_Min_Stack_Size+0x14c890>
    247c:	04000000 	streq	r0, [r0], #-0
    2480:	0004b60c 	andeq	fp, r4, ip, lsl #12
    2484:	052b0400 	streq	r0, [fp, #-1024]!	; 0x400
    2488:	000000a2 	andeq	r0, r0, r2, lsr #1
    248c:	52420b06 	subpl	r0, r2, #6144	; 0x1800
    2490:	2c040052 	stccs	0, cr0, [r4], {82}	; 0x52
    2494:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2498:	c00c0800 	andgt	r0, ip, r0, lsl #16
    249c:	04000004 	streq	r0, [r0], #-4
    24a0:	00a2052d 	adceq	r0, r2, sp, lsr #10
    24a4:	0b0a0000 	bleq	2824ac <_Min_Stack_Size+0x2820ac>
    24a8:	00315243 	eorseq	r5, r1, r3, asr #4
    24ac:	ca052e04 	bgt	14dcc4 <_Min_Stack_Size+0x14d8c4>
    24b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    24b4:	0003ac0c 	andeq	sl, r3, ip, lsl #24
    24b8:	052f0400 	streq	r0, [pc, #-1024]!	; 20c0 <_Min_Stack_Size+0x1cc0>
    24bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    24c0:	52430b0e 	subpl	r0, r3, #14336	; 0x3800
    24c4:	30040032 	andcc	r0, r4, r2, lsr r0
    24c8:	0000ca05 	andeq	ip, r0, r5, lsl #20
    24cc:	d60c1000 	strle	r1, [ip], -r0
    24d0:	04000004 	streq	r0, [r0], #-4
    24d4:	00a20531 	adceq	r0, r2, r1, lsr r5
    24d8:	0b120000 	bleq	4824e0 <_Min_Stack_Size+0x4820e0>
    24dc:	00335243 	eorseq	r5, r3, r3, asr #4
    24e0:	ca053204 	bgt	14ecf8 <_Min_Stack_Size+0x14e8f8>
    24e4:	14000000 	strne	r0, [r0], #-0
    24e8:	0004e00c 	andeq	lr, r4, ip
    24ec:	05330400 	ldreq	r0, [r3, #-1024]!	; 0x400
    24f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    24f4:	112c0c16 	teqne	ip, r6, lsl ip
    24f8:	34040000 	strcc	r0, [r4], #-0
    24fc:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2500:	ea0c1800 	b	308508 <_Min_Stack_Size+0x308108>
    2504:	04000004 	streq	r0, [r0], #-4
    2508:	00a20535 	adceq	r0, r2, r5, lsr r5
    250c:	001a0000 	andseq	r0, sl, r0
    2510:	00118209 	andseq	r8, r1, r9, lsl #4
    2514:	05360400 	ldreq	r0, [r6, #-1024]!	; 0x400
    2518:	00000124 	andeq	r0, r0, r4, lsr #2
    251c:	3005100d 	andcc	r1, r5, sp
    2520:	00000227 	andeq	r0, r0, r7, lsr #4
    2524:	000ab50e 	andeq	fp, sl, lr, lsl #10
    2528:	b8320500 	ldmdalt	r2!, {r8, sl}
    252c:	00000000 	andeq	r0, r0, r0
    2530:	000c860e 	andeq	r8, ip, lr, lsl #12
    2534:	b8330500 	ldmdalt	r3!, {r8, sl}
    2538:	04000000 	streq	r0, [r0], #-0
    253c:	000f220e 	andeq	r2, pc, lr, lsl #4
    2540:	b8340500 	ldmdalt	r4!, {r8, sl}
    2544:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2548:	000b7c0e 	andeq	r7, fp, lr, lsl #24
    254c:	b8350500 	ldmdalt	r5!, {r8, sl}
    2550:	0c000000 	stceq	0, cr0, [r0], {-0}
    2554:	10cc0300 	sbcne	r0, ip, r0, lsl #6
    2558:	36050000 	strcc	r0, [r5], -r0
    255c:	000001ee 	andeq	r0, r0, lr, ror #3
    2560:	3606100d 	strcc	r1, [r6], -sp
    2564:	00000283 	andeq	r0, r0, r3, lsl #5
    2568:	0012080e 	andseq	r0, r2, lr, lsl #16
    256c:	b8380600 	ldmdalt	r8!, {r9, sl}
    2570:	00000000 	andeq	r0, r0, r0
    2574:	0011dc0e 	andseq	sp, r1, lr, lsl #24
    2578:	a23e0600 	eorsge	r0, lr, #0, 12
    257c:	04000000 	streq	r0, [r0], #-0
    2580:	0011900e 	andseq	r9, r1, lr
    2584:	a2410600 	subge	r0, r1, #0, 12
    2588:	06000000 	streq	r0, [r0], -r0
    258c:	0012bd0e 	andseq	fp, r2, lr, lsl #26
    2590:	a2440600 	subge	r0, r4, #0, 12
    2594:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2598:	0013a70e 	andseq	sl, r3, lr, lsl #14
    259c:	a24b0600 	subge	r0, fp, #0, 12
    25a0:	0a000000 	beq	25a8 <_Min_Stack_Size+0x21a8>
    25a4:	00137a0e 	andseq	r7, r3, lr, lsl #20
    25a8:	a24e0600 	subge	r0, lr, #0, 12
    25ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    25b0:	132f0300 	teqne	pc, #0, 6
    25b4:	51060000 	mrspl	r0, (UNDEF: 6)
    25b8:	00000232 	andeq	r0, r0, r2, lsr r2
    25bc:	5706080d 	strpl	r0, [r6, -sp, lsl #16]
    25c0:	000002c7 	andeq	r0, r0, r7, asr #5
    25c4:	00140e0e 	andseq	r0, r4, lr, lsl #28
    25c8:	a25a0600 	subsge	r0, sl, #0, 12
    25cc:	00000000 	andeq	r0, r0, r0
    25d0:	0014d10e 	andseq	sp, r4, lr, lsl #2
    25d4:	a25d0600 	subsge	r0, sp, #0, 12
    25d8:	02000000 	andeq	r0, r0, #0
    25dc:	0011210e 	andseq	r2, r1, lr, lsl #2
    25e0:	a2600600 	rsbge	r0, r0, #0, 12
    25e4:	04000000 	streq	r0, [r0], #-0
    25e8:	0011fa0e 	andseq	pc, r1, lr, lsl #20
    25ec:	a2630600 	rsbge	r0, r3, #0, 12
    25f0:	06000000 	streq	r0, [r0], -r0
    25f4:	119f0300 	orrsne	r0, pc, r0, lsl #6
    25f8:	66060000 	strvs	r0, [r6], -r0
    25fc:	0000028e 	andeq	r0, r0, lr, lsl #5
    2600:	0012830f 	andseq	r8, r2, pc, lsl #6
    2604:	ccbb0100 	ldfgts	f0, [fp]
    2608:	14080025 	strne	r0, [r8], #-37	; 0x25
    260c:	01000001 	tsteq	r0, r1
    2610:	0002f69c 	muleq	r2, ip, r6
    2614:	135d1000 	cmpne	sp, #0
    2618:	bb010000 	bllt	42620 <_Min_Stack_Size+0x42220>
    261c:	000002f6 	strdeq	r0, [r0], -r6
    2620:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2624:	01e20411 	mvneq	r0, r1, lsl r4
    2628:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
    262c:	01000011 	tsteq	r0, r1, lsl r0
    2630:	0026e0f6 	strdeq	lr, [r6], -r6	; <UNPREDICTABLE>
    2634:	00017408 	andeq	r7, r1, r8, lsl #8
    2638:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    263c:	10000003 	andne	r0, r0, r3
    2640:	0000135d 	andeq	r1, r0, sp, asr r3
    2644:	02f6f601 	rscseq	pc, r6, #1048576	; 0x100000
    2648:	91020000 	mrsls	r0, (UNDEF: 2)
    264c:	14571054 	ldrbne	r1, [r7], #-84	; 0x54
    2650:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2654:	00000374 	andeq	r0, r0, r4, ror r3
    2658:	12509102 	subsne	r9, r0, #-2147483648	; 0x80000000
    265c:	000002be 			; <UNDEFINED> instruction: 0x000002be
    2660:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    2664:	91020000 	mrsls	r0, (UNDEF: 2)
    2668:	12261274 	eorne	r1, r6, #116, 4	; 0x40000007
    266c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2670:	000000b8 	strheq	r0, [r0], -r8
    2674:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    2678:	00001112 	andeq	r1, r0, r2, lsl r1
    267c:	00b8f901 	adcseq	pc, r8, r1, lsl #18
    2680:	91020000 	mrsls	r0, (UNDEF: 2)
    2684:	1428126c 	strtne	r1, [r8], #-620	; 0x26c
    2688:	fa010000 	blx	42690 <_Min_Stack_Size+0x42290>
    268c:	000000b8 	strheq	r0, [r0], -r8
    2690:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    2694:	00001468 	andeq	r1, r0, r8, ror #8
    2698:	0227fb01 	eoreq	pc, r7, #1024	; 0x400
    269c:	91020000 	mrsls	r0, (UNDEF: 2)
    26a0:	04110058 	ldreq	r0, [r1], #-88	; 0x58
    26a4:	00000283 	andeq	r0, r0, r3, lsl #5
    26a8:	0014b013 	andseq	fp, r4, r3, lsl r0
    26ac:	01670100 	cmneq	r7, r0, lsl #2
    26b0:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
    26b4:	00000038 	andeq	r0, r0, r8, lsr r0
    26b8:	03a09c01 	moveq	r9, #256	; 0x100
    26bc:	57140000 	ldrpl	r0, [r4, -r0]
    26c0:	01000014 	tsteq	r0, r4, lsl r0
    26c4:	03740167 	cmneq	r4, #-1073741799	; 0xc0000019
    26c8:	91020000 	mrsls	r0, (UNDEF: 2)
    26cc:	79130074 	ldmdbvc	r3, {r2, r4, r5, r6}
    26d0:	01000014 	tsteq	r0, r4, lsl r0
    26d4:	288c017b 	stmcs	ip, {r0, r1, r3, r4, r5, r6, r8}
    26d8:	00520800 	subseq	r0, r2, r0, lsl #16
    26dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    26e0:	000003e4 	andeq	r0, r0, r4, ror #7
    26e4:	00135d14 	andseq	r5, r3, r4, lsl sp
    26e8:	017b0100 	cmneq	fp, r0, lsl #2
    26ec:	000002f6 	strdeq	r0, [r0], -r6
    26f0:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    26f4:	00001290 	muleq	r0, r0, r2
    26f8:	e4017b01 	str	r7, [r1], #-2817	; 0xb01
    26fc:	02000003 	andeq	r0, r0, #3
    2700:	be156891 	mrclt	8, 0, r6, cr5, cr1, {4}
    2704:	01000002 	tsteq	r0, r2
    2708:	00b8017d 	adcseq	r0, r8, sp, ror r1
    270c:	91020000 	mrsls	r0, (UNDEF: 2)
    2710:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    2714:	000002c7 	andeq	r0, r0, r7, asr #5
    2718:	0012ca13 	andseq	ip, r2, r3, lsl sl
    271c:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2720:	080028e0 	stmdaeq	r0, {r5, r6, r7, fp, sp}
    2724:	0000002a 	andeq	r0, r0, sl, lsr #32
    2728:	04109c01 	ldreq	r9, [r0], #-3073	; 0xc01
    272c:	90140000 	andsls	r0, r4, r0
    2730:	01000012 	tsteq	r0, r2, lsl r0
    2734:	03e4019a 	mvneq	r0, #-2147483610	; 0x80000026
    2738:	91020000 	mrsls	r0, (UNDEF: 2)
    273c:	b6130074 			; <UNDEFINED> instruction: 0xb6130074
    2740:	01000011 	tsteq	r0, r1, lsl r0
    2744:	290c01ab 	stmdbcs	ip, {r0, r1, r3, r5, r7, r8}
    2748:	003e0800 	eorseq	r0, lr, r0, lsl #16
    274c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2750:	00000445 	andeq	r0, r0, r5, asr #8
    2754:	00135d14 	andseq	r5, r3, r4, lsl sp
    2758:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    275c:	000002f6 	strdeq	r0, [r0], -r6
    2760:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2764:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2768:	1801ab01 	stmdane	r1, {r0, r8, r9, fp, sp, pc}
    276c:	02000001 	andeq	r0, r0, #1
    2770:	13007391 	movwne	r7, #913	; 0x391
    2774:	00001149 	andeq	r1, r0, r9, asr #2
    2778:	4c01c501 	cfstr32mi	mvfx12, [r1], {1}
    277c:	38080029 	stmdacc	r8, {r0, r3, r5}
    2780:	01000000 	mrseq	r0, (UNDEF: 0)
    2784:	00047a9c 	muleq	r4, ip, sl
    2788:	135d1400 	cmpne	sp, #0, 8
    278c:	c5010000 	strgt	r0, [r1, #-0]
    2790:	0002f601 	andeq	pc, r2, r1, lsl #12
    2794:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2798:	0014c114 	andseq	ip, r4, r4, lsl r1
    279c:	01c50100 	biceq	r0, r5, r0, lsl #2
    27a0:	00000097 	muleq	r0, r7, r0
    27a4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    27a8:	0013c713 	andseq	ip, r3, r3, lsl r7
    27ac:	01da0100 	bicseq	r0, sl, r0, lsl #2
    27b0:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
    27b4:	00000042 	andeq	r0, r0, r2, asr #32
    27b8:	04af9c01 	strteq	r9, [pc], #3073	; 27c0 <_Min_Stack_Size+0x23c0>
    27bc:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    27c0:	01000013 	tsteq	r0, r3, lsl r0
    27c4:	02f601da 	rscseq	r0, r6, #-2147483594	; 0x80000036
    27c8:	91020000 	mrsls	r0, (UNDEF: 2)
    27cc:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    27d0:	da010000 	ble	427d8 <_Min_Stack_Size+0x423d8>
    27d4:	00011801 	andeq	r1, r1, r1, lsl #16
    27d8:	73910200 	orrsvc	r0, r1, #0, 4
    27dc:	13641300 	cmnne	r4, #0, 6
    27e0:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    27e4:	0029c801 	eoreq	ip, r9, r1, lsl #16
    27e8:	00003e08 	andeq	r3, r0, r8, lsl #28
    27ec:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    27f0:	14000004 	strne	r0, [r0], #-4
    27f4:	0000135d 	andeq	r1, r0, sp, asr r3
    27f8:	f601f401 			; <UNDEFINED> instruction: 0xf601f401
    27fc:	02000002 	andeq	r0, r0, #2
    2800:	b8147491 	ldmdalt	r4, {r0, r4, r7, sl, ip, sp, lr}
    2804:	01000005 	tsteq	r0, r5
    2808:	011801f4 			; <UNDEFINED> instruction: 0x011801f4
    280c:	91020000 	mrsls	r0, (UNDEF: 2)
    2810:	c0130073 	andsgt	r0, r3, r3, ror r0
    2814:	01000011 	tsteq	r0, r1, lsl r0
    2818:	2a08022d 	bcs	2030d4 <_Min_Stack_Size+0x202cd4>
    281c:	00220800 	eoreq	r0, r2, r0, lsl #16
    2820:	9c010000 	stcls	0, cr0, [r1], {-0}
    2824:	00000519 	andeq	r0, r0, r9, lsl r5
    2828:	00135d14 	andseq	r5, r3, r4, lsl sp
    282c:	022d0100 	eoreq	r0, sp, #0, 2
    2830:	000002f6 	strdeq	r0, [r0], -r6
    2834:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2838:	00001789 	andeq	r1, r0, r9, lsl #15
    283c:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
    2840:	02000000 	andeq	r0, r0, #0
    2844:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2848:	00001535 	andeq	r1, r0, r5, lsr r5
    284c:	a2023d01 	andge	r3, r2, #1, 26	; 0x40
    2850:	2c000000 	stccs	0, cr0, [r0], {-0}
    2854:	2008002a 	andcs	r0, r8, sl, lsr #32
    2858:	01000000 	mrseq	r0, (UNDEF: 0)
    285c:	0005439c 	muleq	r5, ip, r3
    2860:	135d1400 	cmpne	sp, #0, 8
    2864:	3d010000 	stccc	0, cr0, [r1, #-0]
    2868:	0002f602 	andeq	pc, r2, r2, lsl #12
    286c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2870:	12fb1300 	rscsne	r1, fp, #0, 6
    2874:	71010000 	mrsvc	r0, (UNDEF: 1)
    2878:	002a4c02 	eoreq	r4, sl, r2, lsl #24
    287c:	00003808 	andeq	r3, r0, r8, lsl #16
    2880:	789c0100 	ldmvc	ip, {r8}
    2884:	14000005 	strne	r0, [r0], #-5
    2888:	0000135d 	andeq	r1, r0, sp, asr r3
    288c:	f6027101 			; <UNDEFINED> instruction: 0xf6027101
    2890:	02000002 	andeq	r0, r0, #2
    2894:	b2147491 	andslt	r7, r4, #-1862270976	; 0x91000000
    2898:	01000013 	tsteq	r0, r3, lsl r0
    289c:	00970271 	addseq	r0, r7, r1, ror r2
    28a0:	91020000 	mrsls	r0, (UNDEF: 2)
    28a4:	31130073 	tstcc	r3, r3, ror r0
    28a8:	01000011 	tsteq	r0, r1, lsl r0
    28ac:	2a840285 	bcs	fe1032c8 <_estack+0xde0d32c8>
    28b0:	003e0800 	eorseq	r0, lr, r0, lsl #16
    28b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b8:	000005ad 	andeq	r0, r0, sp, lsr #11
    28bc:	00135d14 	andseq	r5, r3, r4, lsl sp
    28c0:	02850100 	addeq	r0, r5, #0, 2
    28c4:	000002f6 	strdeq	r0, [r0], -r6
    28c8:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    28cc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    28d0:	18028501 	stmdane	r2, {r0, r8, sl, pc}
    28d4:	02000001 	andeq	r0, r0, #1
    28d8:	13007391 	movwne	r7, #913	; 0x391
    28dc:	00001489 	andeq	r1, r0, r9, lsl #9
    28e0:	c402a001 	strgt	sl, [r2], #-1
    28e4:	3608002a 	strcc	r0, [r8], -sl, lsr #32
    28e8:	01000000 	mrseq	r0, (UNDEF: 0)
    28ec:	0005e29c 	muleq	r5, ip, r2
    28f0:	135d1400 	cmpne	sp, #0, 8
    28f4:	a0010000 	andge	r0, r1, r0
    28f8:	0002f602 	andeq	pc, r2, r2, lsl #12
    28fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2900:	0011cf14 	andseq	ip, r1, r4, lsl pc
    2904:	02a00100 	adceq	r0, r0, #0, 2
    2908:	000000a2 	andeq	r0, r0, r2, lsr #1
    290c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2910:	00125713 	andseq	r5, r2, r3, lsl r7
    2914:	02e50100 	rsceq	r0, r5, #0, 2
    2918:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
    291c:	00000036 	andeq	r0, r0, r6, lsr r0
    2920:	06179c01 	ldreq	r9, [r7], -r1, lsl #24
    2924:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    2928:	01000013 	tsteq	r0, r3, lsl r0
    292c:	02f602e5 	rscseq	r0, r6, #1342177294	; 0x5000000e
    2930:	91020000 	mrsls	r0, (UNDEF: 2)
    2934:	11671474 	smcne	28996	; 0x7144
    2938:	e5010000 	str	r0, [r1, #-0]
    293c:	0000a202 	andeq	sl, r0, r2, lsl #4
    2940:	72910200 	addsvc	r0, r1, #0, 4
    2944:	13f01300 	mvnsne	r1, #0, 6
    2948:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    294c:	002b3402 	eoreq	r3, fp, r2, lsl #8
    2950:	00003e08 	andeq	r3, r0, r8, lsl #28
    2954:	4c9c0100 	ldfmis	f0, [ip], {0}
    2958:	14000006 	strne	r0, [r0], #-6
    295c:	0000135d 	andeq	r1, r0, sp, asr r3
    2960:	f602f701 			; <UNDEFINED> instruction: 0xf602f701
    2964:	02000002 	andeq	r0, r0, #2
    2968:	b8147491 	ldmdalt	r4, {r0, r4, r7, sl, ip, sp, lr}
    296c:	01000005 	tsteq	r0, r5
    2970:	011802f7 			; <UNDEFINED> instruction: 0x011802f7
    2974:	91020000 	mrsls	r0, (UNDEF: 2)
    2978:	1f130073 	svcne	0x00130073
    297c:	01000013 	tsteq	r0, r3, lsl r0
    2980:	2b74030f 	blcs	1d035c4 <_Min_Stack_Size+0x1d031c4>
    2984:	00220800 	eoreq	r0, r2, r0, lsl #16
    2988:	9c010000 	stcls	0, cr0, [r1], {-0}
    298c:	00000672 	andeq	r0, r0, r2, ror r6
    2990:	00135d14 	andseq	r5, r3, r4, lsl sp
    2994:	030f0100 	movweq	r0, #61696	; 0xf100
    2998:	000002f6 	strdeq	r0, [r0], -r6
    299c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    29a0:	00149c13 	andseq	r9, r4, r3, lsl ip
    29a4:	03440100 	movteq	r0, #16640	; 0x4100
    29a8:	08002b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, sp}
    29ac:	0000003e 	andeq	r0, r0, lr, lsr r0
    29b0:	06a79c01 	strteq	r9, [r7], r1, lsl #24
    29b4:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    29b8:	01000013 	tsteq	r0, r3, lsl r0
    29bc:	02f60344 	rscseq	r0, r6, #68, 6	; 0x10000001
    29c0:	91020000 	mrsls	r0, (UNDEF: 2)
    29c4:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    29c8:	44010000 	strmi	r0, [r1], #-0
    29cc:	00011803 	andeq	r1, r1, r3, lsl #16
    29d0:	73910200 	orrsvc	r0, r1, #0, 4
    29d4:	130c1300 	movwne	r1, #49920	; 0xc300
    29d8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    29dc:	002bd803 	eoreq	sp, fp, r3, lsl #16
    29e0:	00003a08 	andeq	r3, r0, r8, lsl #20
    29e4:	dc9c0100 	ldfles	f0, [ip], {0}
    29e8:	14000006 	strne	r0, [r0], #-6
    29ec:	0000135d 	andeq	r1, r0, sp, asr r3
    29f0:	f6039801 			; <UNDEFINED> instruction: 0xf6039801
    29f4:	02000002 	andeq	r0, r0, #2
    29f8:	47147491 			; <UNDEFINED> instruction: 0x47147491
    29fc:	01000012 	tsteq	r0, r2, lsl r0
    2a00:	00970398 	umullseq	r0, r7, r8, r3
    2a04:	91020000 	mrsls	r0, (UNDEF: 2)
    2a08:	94130073 	ldrls	r0, [r3], #-115	; 0x73
    2a0c:	01000013 	tsteq	r0, r3, lsl r0
    2a10:	2c1403ab 	ldccs	3, cr0, [r4], {171}	; 0xab
    2a14:	003e0800 	eorseq	r0, lr, r0, lsl #16
    2a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a1c:	00000711 	andeq	r0, r0, r1, lsl r7
    2a20:	00135d14 	andseq	r5, r3, r4, lsl sp
    2a24:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2a28:	000002f6 	strdeq	r0, [r0], -r6
    2a2c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2a30:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2a34:	1803ab01 	stmdane	r3, {r0, r8, r9, fp, sp, pc}
    2a38:	02000001 	andeq	r0, r0, #1
    2a3c:	13007391 	movwne	r7, #913	; 0x391
    2a40:	000012a6 	andeq	r1, r0, r6, lsr #5
    2a44:	5403c401 	strpl	ip, [r3], #-1025	; 0x401
    2a48:	3e08002c 	cdpcc	0, 0, cr0, cr8, cr12, {1}
    2a4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a50:	0007469c 	muleq	r7, ip, r6
    2a54:	135d1400 	cmpne	sp, #0, 8
    2a58:	c4010000 	strgt	r0, [r1], #-0
    2a5c:	0002f603 	andeq	pc, r2, r3, lsl #12
    2a60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a64:	0005b814 	andeq	fp, r5, r4, lsl r8
    2a68:	03c40100 	biceq	r0, r4, #0, 2
    2a6c:	00000118 	andeq	r0, r0, r8, lsl r1
    2a70:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2a74:	0013fd13 	andseq	pc, r3, r3, lsl sp	; <UNPREDICTABLE>
    2a78:	040b0100 	streq	r0, [fp], #-256	; 0x100
    2a7c:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
    2a80:	00000036 	andeq	r0, r0, r6, lsr r0
    2a84:	077b9c01 	ldrbeq	r9, [fp, -r1, lsl #24]!
    2a88:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    2a8c:	01000013 	tsteq	r0, r3, lsl r0
    2a90:	02f6040b 	rscseq	r0, r6, #184549376	; 0xb000000
    2a94:	91020000 	mrsls	r0, (UNDEF: 2)
    2a98:	12171474 	andsne	r1, r7, #116, 8	; 0x74000000
    2a9c:	0b010000 	bleq	42aa4 <_Min_Stack_Size+0x426a4>
    2aa0:	0000a204 	andeq	sl, r0, r4, lsl #4
    2aa4:	72910200 	addsvc	r0, r1, #0, 4
    2aa8:	141a1300 	ldrne	r1, [sl], #-768	; 0x300
    2aac:	1d010000 	stcne	0, cr0, [r1, #-0]
    2ab0:	002ccc04 	eoreq	ip, ip, r4, lsl #24
    2ab4:	00003e08 	andeq	r3, r0, r8, lsl #28
    2ab8:	b09c0100 	addslt	r0, ip, r0, lsl #2
    2abc:	14000007 	strne	r0, [r0], #-7
    2ac0:	0000135d 	andeq	r1, r0, sp, asr r3
    2ac4:	f6041d01 			; <UNDEFINED> instruction: 0xf6041d01
    2ac8:	02000002 	andeq	r0, r0, #2
    2acc:	b8147491 	ldmdalt	r4, {r0, r4, r7, sl, ip, sp, lr}
    2ad0:	01000005 	tsteq	r0, r5
    2ad4:	0118041d 	tsteq	r8, sp, lsl r4
    2ad8:	91020000 	mrsls	r0, (UNDEF: 2)
    2adc:	ed130073 	ldc	0, cr0, [r3, #-460]	; 0xfffffe34
    2ae0:	01000011 	tsteq	r0, r1, lsl r0
    2ae4:	2d0c044b 	cfstrscs	mvf0, [ip, #-300]	; 0xfffffed4
    2ae8:	00460800 	subeq	r0, r6, r0, lsl #16
    2aec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af0:	000007f4 	strdeq	r0, [r0], -r4
    2af4:	00135d14 	andseq	r5, r3, r4, lsl sp
    2af8:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2afc:	000002f6 	strdeq	r0, [r0], -r6
    2b00:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2b04:	00001350 	andeq	r1, r0, r0, asr r3
    2b08:	a2044b01 	andge	r4, r4, #1024	; 0x400
    2b0c:	02000000 	andeq	r0, r0, #0
    2b10:	b8147291 	ldmdalt	r4, {r0, r4, r7, r9, ip, sp, lr}
    2b14:	01000005 	tsteq	r0, r5
    2b18:	0118044b 	tsteq	r8, fp, asr #8
    2b1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b20:	41130071 	tstmi	r3, r1, ror r0
    2b24:	01000013 	tsteq	r0, r3, lsl r0
    2b28:	2d5404cf 	cfldrdcs	mvd0, [r4, #-828]	; 0xfffffcc4
    2b2c:	008e0800 	addeq	r0, lr, r0, lsl #16
    2b30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b34:	00000874 	andeq	r0, r0, r4, ror r8
    2b38:	00135d14 	andseq	r5, r3, r4, lsl sp
    2b3c:	04cf0100 	strbeq	r0, [pc], #256	; 2b44 <_Min_Stack_Size+0x2744>
    2b40:	000002f6 	strdeq	r0, [r0], -r6
    2b44:	14649102 	strbtne	r9, [r4], #-258	; 0x102
    2b48:	0000144e 	andeq	r1, r0, lr, asr #8
    2b4c:	a204cf01 	andge	ip, r4, #1, 30
    2b50:	02000000 	andeq	r0, r0, #0
    2b54:	b8146291 	ldmdalt	r4, {r0, r4, r7, r9, sp, lr}
    2b58:	01000005 	tsteq	r0, r5
    2b5c:	011804cf 	tsteq	r8, pc, asr #9
    2b60:	91020000 	mrsls	r0, (UNDEF: 2)
    2b64:	15471561 	strbne	r1, [r7, #-1377]	; 0x561
    2b68:	d1010000 	mrsle	r0, (UNDEF: 1)
    2b6c:	0000b804 	andeq	fp, r0, r4, lsl #16
    2b70:	70910200 	addsvc	r0, r1, r0, lsl #4
    2b74:	0013c115 	andseq	ip, r3, r5, lsl r1
    2b78:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2b7c:	000000b8 	strheq	r0, [r0], -r8
    2b80:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    2b84:	000014dc 	ldrdeq	r1, [r0], -ip
    2b88:	b804d101 	stmdalt	r4, {r0, r8, ip, lr, pc}
    2b8c:	02000000 	andeq	r0, r0, #0
    2b90:	e0156891 	muls	r5, r1, r8
    2b94:	01000012 	tsteq	r0, r2, lsl r0
    2b98:	00b804d2 	ldrsbteq	r0, [r8], r2
    2b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba0:	3a160074 	bcc	582d78 <_Min_Stack_Size+0x582978>
    2ba4:	01000014 	tsteq	r0, r4, lsl r0
    2ba8:	00ea050f 	rsceq	r0, sl, pc, lsl #10
    2bac:	2de40000 	stclcs	0, cr0, [r4]
    2bb0:	00380800 	eorseq	r0, r8, r0, lsl #16
    2bb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bb8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    2bbc:	00135d14 	andseq	r5, r3, r4, lsl sp
    2bc0:	050f0100 	streq	r0, [pc, #-256]	; 2ac8 <_Min_Stack_Size+0x26c8>
    2bc4:	000002f6 	strdeq	r0, [r0], -r6
    2bc8:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    2bcc:	00001278 	andeq	r1, r0, r8, ror r2
    2bd0:	a2050f01 	andge	r0, r5, #1, 30
    2bd4:	02000000 	andeq	r0, r0, #0
    2bd8:	a3156a91 	tstge	r5, #593920	; 0x91000
    2bdc:	01000008 	tsteq	r0, r8
    2be0:	00ea0511 	rsceq	r0, sl, r1, lsl r5
    2be4:	91020000 	mrsls	r0, (UNDEF: 2)
    2be8:	eb130077 	bl	4c2dcc <_Min_Stack_Size+0x4c29cc>
    2bec:	01000012 	tsteq	r0, r2, lsl r0
    2bf0:	2e1c0540 	cfmac32cs	mvfx0, mvfx12, mvfx0
    2bf4:	00200800 	eoreq	r0, r0, r0, lsl #16
    2bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bfc:	000008f1 	strdeq	r0, [r0], -r1
    2c00:	00135d14 	andseq	r5, r3, r4, lsl sp
    2c04:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    2c08:	000002f6 	strdeq	r0, [r0], -r6
    2c0c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2c10:	00001278 	andeq	r1, r0, r8, ror r2
    2c14:	a2054001 	andge	r4, r5, #1
    2c18:	02000000 	andeq	r0, r0, #0
    2c1c:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2c20:	000013de 	ldrdeq	r1, [r0], -lr
    2c24:	f6056201 			; <UNDEFINED> instruction: 0xf6056201
    2c28:	3c000000 	stccc	0, cr0, [r0], {-0}
    2c2c:	ae08002e 	cdpge	0, 0, cr0, cr8, cr14, {1}
    2c30:	01000000 	mrseq	r0, (UNDEF: 0)
    2c34:	0009669c 	muleq	r9, ip, r6
    2c38:	135d1400 	cmpne	sp, #0, 8
    2c3c:	62010000 	andvs	r0, r1, #0
    2c40:	0002f605 	andeq	pc, r2, r5, lsl #12
    2c44:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2c48:	00144e14 	andseq	r4, r4, r4, lsl lr
    2c4c:	05620100 	strbeq	r0, [r2, #-256]!	; 0x100
    2c50:	000000a2 	andeq	r0, r0, r2, lsr #1
    2c54:	15629102 	strbne	r9, [r2, #-258]!	; 0x102
    2c58:	000013c0 	andeq	r1, r0, r0, asr #7
    2c5c:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    2c60:	02000000 	andeq	r0, r0, #0
    2c64:	dc156c91 	ldcle	12, cr6, [r5], {145}	; 0x91
    2c68:	01000014 	tsteq	r0, r4, lsl r0
    2c6c:	00b80564 	adcseq	r0, r8, r4, ror #10
    2c70:	91020000 	mrsls	r0, (UNDEF: 2)
    2c74:	15471574 	strbne	r1, [r7, #-1396]	; 0x574
    2c78:	64010000 	strvs	r0, [r1], #-0
    2c7c:	0000b805 	andeq	fp, r0, r5, lsl #16
    2c80:	68910200 	ldmvs	r1, {r9}
    2c84:	0008a315 	andeq	sl, r8, r5, lsl r3
    2c88:	05650100 	strbeq	r0, [r5, #-256]!	; 0x100
    2c8c:	000000f6 	strdeq	r0, [r0], -r6
    2c90:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c94:	00122f13 	andseq	r2, r2, r3, lsl pc
    2c98:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    2c9c:	08002eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp}
    2ca0:	00000038 	andeq	r0, r0, r8, lsr r0
    2ca4:	09b99c01 	ldmibeq	r9!, {r0, sl, fp, ip, pc}
    2ca8:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    2cac:	01000013 	tsteq	r0, r3, lsl r0
    2cb0:	02f605ac 	rscseq	r0, r6, #172, 10	; 0x2b000000
    2cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2cb8:	144e146c 	strbne	r1, [lr], #-1132	; 0x46c
    2cbc:	ac010000 	stcge	0, cr0, [r1], {-0}
    2cc0:	0000a205 	andeq	sl, r0, r5, lsl #4
    2cc4:	6a910200 	bvs	fe4434cc <_estack+0xde4134cc>
    2cc8:	0013c015 	andseq	ip, r3, r5, lsl r0
    2ccc:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    2cd0:	000000a2 	andeq	r0, r0, r2, lsr #1
    2cd4:	15769102 	ldrbne	r9, [r6, #-258]!	; 0x102
    2cd8:	000014dc 	ldrdeq	r1, [r0], -ip
    2cdc:	a205ae01 	andge	sl, r5, #1, 28
    2ce0:	02000000 	andeq	r0, r0, #0
    2ce4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    2ce8:	00000156 	andeq	r0, r0, r6, asr r1
    2cec:	cf06a707 	svcgt	0x0006a707
    2cf0:	00000000 	andeq	r0, r0, r0
    2cf4:	00000290 	muleq	r0, r0, r2
    2cf8:	08c10004 	stmiaeq	r1, {r2}^
    2cfc:	01040000 	mrseq	r0, (UNDEF: 4)
    2d00:	00000021 	andeq	r0, r0, r1, lsr #32
    2d04:	00160101 	andseq	r0, r6, r1, lsl #2
    2d08:	00010c00 	andeq	r0, r1, r0, lsl #24
    2d0c:	0003b000 	andeq	fp, r3, r0
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	00141200 	andseq	r1, r4, r0, lsl #4
    2d18:	06010200 	streq	r0, [r1], -r0, lsl #4
    2d1c:	00000145 	andeq	r0, r0, r5, asr #2
    2d20:	0001ae03 	andeq	sl, r1, r3, lsl #28
    2d24:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    2d28:	02000000 	andeq	r0, r0, #0
    2d2c:	01430801 	cmpeq	r3, r1, lsl #16
    2d30:	02020000 	andeq	r0, r2, #0
    2d34:	00017f05 	andeq	r7, r1, r5, lsl #30
    2d38:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2d3c:	0000000e 	andeq	r0, r0, lr
    2d40:	00016f03 	andeq	r6, r1, r3, lsl #30
    2d44:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    2d48:	02000000 	andeq	r0, r0, #0
    2d4c:	00050504 	andeq	r0, r5, r4, lsl #10
    2d50:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    2d54:	02000004 	andeq	r0, r0, #4
    2d58:	00006941 	andeq	r6, r0, r1, asr #18
    2d5c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2d60:	00000126 	andeq	r0, r0, r6, lsr #2
    2d64:	00050802 	andeq	r0, r5, r2, lsl #16
    2d68:	02000000 	andeq	r0, r0, #0
    2d6c:	01210708 	teqeq	r1, r8, lsl #14
    2d70:	04040000 	streq	r0, [r4], #-0
    2d74:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2d78:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2d7c:	0000012b 	andeq	r0, r0, fp, lsr #2
    2d80:	0001b003 	andeq	fp, r1, r3
    2d84:	2c2a0300 	stccs	3, cr0, [sl], #-0
    2d88:	03000000 	movweq	r0, #0
    2d8c:	00000171 	andeq	r0, r0, r1, ror r1
    2d90:	004c4103 	subeq	r4, ip, r3, lsl #2
    2d94:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    2d98:	03000004 	movweq	r0, #4
    2d9c:	00005e42 	andeq	r5, r0, r2, asr #28
    2da0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2da4:	00000192 	muleq	r0, r2, r1
    2da8:	0000a205 	andeq	sl, r0, r5, lsl #4
    2dac:	00a20600 	adceq	r0, r2, r0, lsl #12
    2db0:	00c90000 	sbceq	r0, r9, r0
    2db4:	ad070000 	stcge	0, cr0, [r7, #-0]
    2db8:	01000000 	mrseq	r0, (UNDEF: 0)
    2dbc:	00a20600 	adceq	r0, r2, r0, lsl #12
    2dc0:	00d90000 	sbcseq	r0, r9, r0
    2dc4:	ad070000 	stcge	0, cr0, [r7, #-0]
    2dc8:	03000000 	movweq	r0, #0
    2dcc:	00970500 	addseq	r0, r7, r0, lsl #10
    2dd0:	01080000 	mrseq	r0, (UNDEF: 8)
    2dd4:	f401f704 	vst1.8	{d15}, [r1], r4
    2dd8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2ddc:	000007be 			; <UNDEFINED> instruction: 0x000007be
    2de0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    2de4:	00010054 	andeq	r0, r1, r4, asr r0
    2de8:	001dc80b 	andseq	ip, sp, fp, lsl #16
    2dec:	01f70400 	mvnseq	r0, r0, lsl #8
    2df0:	000000de 	ldrdeq	r0, [r0], -lr
    2df4:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    2df8:	00011601 	andeq	r1, r1, r1, lsl #12
    2dfc:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    2e00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2e04:	0000071e 	andeq	r0, r0, lr, lsl r7
    2e08:	ef0b0001 	svc	0x000b0001
    2e0c:	04000006 	streq	r0, [r0], #-6
    2e10:	010001f9 	strdeq	r0, [r0, -r9]
    2e14:	240c0000 	strcs	r0, [ip], #-0
    2e18:	6d03e604 	stcvs	6, cr14, [r3, #-16]
    2e1c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2e20:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    2e24:	b403e804 	strlt	lr, [r3], #-2052	; 0x804
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	434d500e 	movtmi	r5, #53262	; 0xd00e
    2e30:	03e90400 	mvneq	r0, #0, 8
    2e34:	000000b4 	strheq	r0, [r0], -r4
    2e38:	15fa0d04 	ldrbne	r0, [sl, #3332]!	; 0xd04
    2e3c:	ea040000 	b	102e44 <_Min_Stack_Size+0x102a44>
    2e40:	00016d03 	andeq	r6, r1, r3, lsl #26
    2e44:	d70d0800 	strle	r0, [sp, -r0, lsl #16]
    2e48:	04000015 	streq	r0, [r0], #-21
    2e4c:	00b903eb 	adcseq	r0, r9, fp, ror #7
    2e50:	0d180000 	ldceq	0, cr0, [r8, #-0]
    2e54:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    2e58:	b403ec04 	strlt	lr, [r3], #-3076	; 0xc04
    2e5c:	20000000 	andcs	r0, r0, r0
    2e60:	00c90500 	sbceq	r0, r9, r0, lsl #10
    2e64:	970b0000 	strls	r0, [fp, -r0]
    2e68:	04000016 	streq	r0, [r0], #-22
    2e6c:	012203ed 	smulwteq	r2, sp, r3
    2e70:	8c0f0000 	stchi	0, cr0, [pc], {-0}
    2e74:	01000015 	tsteq	r0, r5, lsl r0
    2e78:	002f2464 	eoreq	r2, pc, r4, ror #8
    2e7c:	00001a08 	andeq	r1, r0, r8, lsl #20
    2e80:	109c0100 	addsne	r0, ip, r0, lsl #2
    2e84:	000016bb 			; <UNDEFINED> instruction: 0x000016bb
    2e88:	2f407601 	svccs	0x00407601
    2e8c:	00200800 	eoreq	r0, r0, r0, lsl #16
    2e90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e94:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    2e98:	00168411 	andseq	r8, r6, r1, lsl r4
    2e9c:	8c760100 	ldfhie	f0, [r6], #-0
    2ea0:	02000000 	andeq	r0, r0, #0
    2ea4:	10007791 	mulne	r0, r1, r7
    2ea8:	000015e0 	andeq	r1, r0, r0, ror #11
    2eac:	2f608b01 	svccs	0x00608b01
    2eb0:	00200800 	eoreq	r0, r0, r0, lsl #16
    2eb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2eb8:	000001d7 	ldrdeq	r0, [r0], -r7
    2ebc:	0005b811 	andeq	fp, r5, r1, lsl r8
    2ec0:	168b0100 	strne	r0, [fp], r0, lsl #2
    2ec4:	02000001 	andeq	r0, r0, #1
    2ec8:	10007791 	mulne	r0, r1, r7
    2ecc:	0000159a 	muleq	r0, sl, r5
    2ed0:	2f80a201 	svccs	0x0080a201
    2ed4:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    2ed8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2edc:	00000217 	andeq	r0, r0, r7, lsl r2
    2ee0:	0016a611 	andseq	sl, r6, r1, lsl r6
    2ee4:	8ca20100 	stfhis	f0, [r2]
    2ee8:	02000000 	andeq	r0, r0, #0
    2eec:	54116f91 	ldrpl	r6, [r1], #-3985	; 0xf91
    2ef0:	01000016 	tsteq	r0, r6, lsl r0
    2ef4:	00008ca2 	andeq	r8, r0, r2, lsr #25
    2ef8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2efc:	706d7412 	rsbvc	r7, sp, r2, lsl r4
    2f00:	a2a40100 	adcge	r0, r4, #0, 2
    2f04:	02000000 	andeq	r0, r0, #0
    2f08:	10007491 	mulne	r0, r1, r4
    2f0c:	00001664 	andeq	r1, r0, r4, ror #12
    2f10:	2ffcb701 	svccs	0x00fcb701
    2f14:	001c0800 	andseq	r0, ip, r0, lsl #16
    2f18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f1c:	0000023b 	andeq	r0, r0, fp, lsr r2
    2f20:	0015bd11 	andseq	fp, r5, r1, lsl sp
    2f24:	a2b70100 	adcsge	r0, r7, #0, 2
    2f28:	02000000 	andeq	r0, r0, #0
    2f2c:	10007491 	mulne	r0, r1, r4
    2f30:	00001550 	andeq	r1, r0, r0, asr r5
    2f34:	3018c801 	andscc	ip, r8, r1, lsl #16
    2f38:	00200800 	eoreq	r0, r0, r0, lsl #16
    2f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f40:	0000025f 	andeq	r0, r0, pc, asr r2
    2f44:	0005b811 	andeq	fp, r5, r1, lsl r8
    2f48:	16c80100 	strbne	r0, [r8], r0, lsl #2
    2f4c:	02000001 	andeq	r0, r0, #1
    2f50:	13007791 	movwne	r7, #1937	; 0x791
    2f54:	0000156b 	andeq	r1, r0, fp, ror #10
    2f58:	00f4d501 	rscseq	sp, r4, r1, lsl #10
    2f5c:	30380000 	eorscc	r0, r8, r0
    2f60:	00340800 	eorseq	r0, r4, r0, lsl #16
    2f64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f68:	00000287 	andeq	r0, r0, r7, lsl #5
    2f6c:	0008a314 	andeq	sl, r8, r4, lsl r3
    2f70:	f4d70100 			; <UNDEFINED> instruction: 0xf4d70100
    2f74:	02000000 	andeq	r0, r0, #0
    2f78:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    2f7c:	00000156 	andeq	r0, r0, r6, asr r1
    2f80:	d906a705 	stmdble	r6, {r0, r2, r8, r9, sl, sp, pc}
    2f84:	00000000 	andeq	r0, r0, r0
    2f88:	00000b87 	andeq	r0, r0, r7, lsl #23
    2f8c:	09f40004 	ldmibeq	r4!, {r2}^
    2f90:	01040000 	mrseq	r0, (UNDEF: 4)
    2f94:	00000021 	andeq	r0, r0, r1, lsr #32
    2f98:	0018f101 	andseq	pc, r8, r1, lsl #2
    2f9c:	00010c00 	andeq	r0, r1, r0, lsl #24
    2fa0:	0003f000 	andeq	pc, r3, r0
    2fa4:	00000000 	andeq	r0, r0, r0
    2fa8:	0015ec00 	andseq	lr, r5, r0, lsl #24
    2fac:	06010200 	streq	r0, [r1], -r0, lsl #4
    2fb0:	00000145 	andeq	r0, r0, r5, asr #2
    2fb4:	0001ae03 	andeq	sl, r1, r3, lsl #28
    2fb8:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    2fbc:	02000000 	andeq	r0, r0, #0
    2fc0:	01430801 	cmpeq	r3, r1, lsl #16
    2fc4:	02020000 	andeq	r0, r2, #0
    2fc8:	00017f05 	andeq	r7, r1, r5, lsl #30
    2fcc:	03780300 	cmneq	r8, #0, 6
    2fd0:	2b020000 	blcs	82fd8 <_Min_Stack_Size+0x82bd8>
    2fd4:	00000050 	andeq	r0, r0, r0, asr r0
    2fd8:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    2fdc:	03000000 	movweq	r0, #0
    2fe0:	0000016f 	andeq	r0, r0, pc, ror #2
    2fe4:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    2fe8:	04020000 	streq	r0, [r2], #-0
    2fec:	00000505 	andeq	r0, r0, r5, lsl #10
    2ff0:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
    2ff4:	41020000 	mrsmi	r0, (UNDEF: 2)
    2ff8:	00000074 	andeq	r0, r0, r4, ror r0
    2ffc:	26070402 	strcs	r0, [r7], -r2, lsl #8
    3000:	02000001 	andeq	r0, r0, #1
    3004:	00000508 	andeq	r0, r0, r8, lsl #10
    3008:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    300c:	00012107 	andeq	r2, r1, r7, lsl #2
    3010:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    3014:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3018:	2b070402 	blcs	1c4028 <_Min_Stack_Size+0x1c3c28>
    301c:	03000001 	movweq	r0, #1
    3020:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3024:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    3028:	7a030000 	bvc	c3030 <_Min_Stack_Size+0xc2c30>
    302c:	03000003 	movweq	r0, #3
    3030:	00004536 	andeq	r4, r0, r6, lsr r5
    3034:	01710300 	cmneq	r1, r0, lsl #6
    3038:	41030000 	mrsmi	r0, (UNDEF: 3)
    303c:	00000057 	andeq	r0, r0, r7, asr r0
    3040:	0004f603 	andeq	pc, r4, r3, lsl #12
    3044:	69420300 	stmdbvs	r2, {r8, r9}^
    3048:	02000000 	andeq	r0, r0, #0
    304c:	01920704 	orrseq	r0, r2, r4, lsl #14
    3050:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    3054:	05000000 	streq	r0, [r0, #-0]
    3058:	000000a2 	andeq	r0, r0, r2, lsr #1
    305c:	0000ad05 	andeq	sl, r0, r5, lsl #26
    3060:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3064:	00ef01f7 	strdeq	r0, [pc], #23	; <UNPREDICTABLE>
    3068:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    306c:	00000007 	andeq	r0, r0, r7
    3070:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    3074:	09000100 	stmdbeq	r0, {r8}
    3078:	00001dc8 	andeq	r1, r0, r8, asr #27
    307c:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    3080:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3084:	00004d16 	andeq	r4, r0, r6, lsl sp
    3088:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    308c:	06000000 	streq	r0, [r0], -r0
    3090:	01f90401 	mvnseq	r0, r1, lsl #8
    3094:	0000011d 	andeq	r0, r0, sp, lsl r1
    3098:	0005c607 	andeq	ip, r5, r7, lsl #12
    309c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    30a0:	01000007 	tsteq	r0, r7
    30a4:	06ef0900 	strbteq	r0, [pc], r0, lsl #18
    30a8:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    30ac:	00010701 	andeq	r0, r1, r1, lsl #14
    30b0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    30b4:	013f01fc 			; <UNDEFINED> instruction: 0x013f01fc
    30b8:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    30bc:	0000004e 	andeq	r0, r0, lr, asr #32
    30c0:	0010b607 	andseq	fp, r0, r7, lsl #12
    30c4:	09000100 	stmdbeq	r0, {r8}
    30c8:	00000c42 	andeq	r0, r0, r2, asr #24
    30cc:	2901fc04 	stmdbcs	r1, {r2, sl, fp, ip, sp, lr, pc}
    30d0:	0a000001 	beq	30dc <_Min_Stack_Size+0x2cdc>
    30d4:	03f30428 	mvnseq	r0, #40, 8	; 0x28000000
    30d8:	00000258 	andeq	r0, r0, r8, asr r2
    30dc:	3152430b 	cmpcc	r2, fp, lsl #6
    30e0:	03f50400 	mvnseq	r0, #0, 8
    30e4:	000000cf 	andeq	r0, r0, pc, asr #1
    30e8:	04ac0c00 	strteq	r0, [ip], #3072	; 0xc00
    30ec:	f6040000 			; <UNDEFINED> instruction: 0xf6040000
    30f0:	0000a203 	andeq	sl, r0, r3, lsl #4
    30f4:	430b0200 	movwmi	r0, #45568	; 0xb200
    30f8:	04003252 	streq	r3, [r0], #-594	; 0x252
    30fc:	00cf03f7 	strdeq	r0, [pc], #55	; <UNPREDICTABLE>
    3100:	0c040000 	stceq	0, cr0, [r4], {-0}
    3104:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    3108:	a203f804 	andge	pc, r3, #4, 16	; 0x40000
    310c:	06000000 	streq	r0, [r0], -r0
    3110:	0017c60c 	andseq	ip, r7, ip, lsl #12
    3114:	03f90400 	mvnseq	r0, #0, 8
    3118:	000000cf 	andeq	r0, r0, pc, asr #1
    311c:	04c00c08 	strbeq	r0, [r0], #3080	; 0xc08
    3120:	fa040000 	blx	103128 <_Min_Stack_Size+0x102d28>
    3124:	0000a203 	andeq	sl, r0, r3, lsl #4
    3128:	bf0c0a00 	svclt	0x000c0a00
    312c:	0400001a 	streq	r0, [r0], #-26
    3130:	00cf03fb 	strdeq	r0, [pc], #59	; <UNPREDICTABLE>
    3134:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3138:	000003ac 	andeq	r0, r0, ip, lsr #7
    313c:	a203fc04 	andge	pc, r3, #4, 24	; 0x400
    3140:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3144:	0052440b 	subseq	r4, r2, fp, lsl #8
    3148:	cf03fd04 	svcgt	0x0003fd04
    314c:	10000000 	andne	r0, r0, r0
    3150:	0004d60c 	andeq	sp, r4, ip, lsl #12
    3154:	03fe0400 	mvnseq	r0, #0, 8
    3158:	000000a2 	andeq	r0, r0, r2, lsr #1
    315c:	52530b12 	subspl	r0, r3, #18432	; 0x4800
    3160:	ff040031 			; <UNDEFINED> instruction: 0xff040031
    3164:	0000cf03 	andeq	ip, r0, r3, lsl #30
    3168:	e00c1400 	and	r1, ip, r0, lsl #8
    316c:	04000004 	streq	r0, [r0], #-4
    3170:	00a20400 	adceq	r0, r2, r0, lsl #8
    3174:	0b160000 	bleq	58317c <_Min_Stack_Size+0x582d7c>
    3178:	00325253 	eorseq	r5, r2, r3, asr r2
    317c:	cf040104 	svcgt	0x00040104
    3180:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3184:	0004ea0c 	andeq	lr, r4, ip, lsl #20
    3188:	04020400 	streq	r0, [r2], #-1024	; 0x400
    318c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3190:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
    3194:	03040052 	movweq	r0, #16466	; 0x4052
    3198:	0000cf04 	andeq	ip, r0, r4, lsl #30
    319c:	710c1c00 	tstvc	ip, r0, lsl #24
    31a0:	04000019 	streq	r0, [r0], #-25
    31a4:	00a20404 	adceq	r0, r2, r4, lsl #8
    31a8:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    31ac:	00001728 	andeq	r1, r0, r8, lsr #14
    31b0:	cf040504 	svcgt	0x00040504
    31b4:	20000000 	andcs	r0, r0, r0
    31b8:	00197b0c 	andseq	r7, r9, ip, lsl #22
    31bc:	04060400 	streq	r0, [r6], #-1024	; 0x400
    31c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    31c4:	17cb0c22 	strbne	r0, [fp, r2, lsr #24]
    31c8:	07040000 	streq	r0, [r4, -r0]
    31cc:	0000cf04 	andeq	ip, r0, r4, lsl #30
    31d0:	850c2400 	strhi	r2, [ip, #-1024]	; 0x400
    31d4:	04000019 	streq	r0, [r0], #-25
    31d8:	00a20408 	adceq	r0, r2, r8, lsl #8
    31dc:	00260000 	eoreq	r0, r6, r0
    31e0:	0017fc09 	andseq	pc, r7, r9, lsl #24
    31e4:	04090400 	streq	r0, [r9], #-1024	; 0x400
    31e8:	0000014b 	andeq	r0, r0, fp, asr #2
    31ec:	3005100d 	andcc	r1, r5, sp
    31f0:	0000029d 	muleq	r0, sp, r2
    31f4:	000ab50e 	andeq	fp, sl, lr, lsl #10
    31f8:	b8320500 	ldmdalt	r2!, {r8, sl}
    31fc:	00000000 	andeq	r0, r0, r0
    3200:	000c860e 	andeq	r8, ip, lr, lsl #12
    3204:	b8330500 	ldmdalt	r3!, {r8, sl}
    3208:	04000000 	streq	r0, [r0], #-0
    320c:	000f220e 	andeq	r2, pc, lr, lsl #4
    3210:	b8340500 	ldmdalt	r4!, {r8, sl}
    3214:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3218:	000b7c0e 	andeq	r7, fp, lr, lsl #24
    321c:	b8350500 	ldmdalt	r5!, {r8, sl}
    3220:	0c000000 	stceq	0, cr0, [r0], {-0}
    3224:	10cc0300 	sbcne	r0, ip, r0, lsl #6
    3228:	36050000 	strcc	r0, [r5], -r0
    322c:	00000264 	andeq	r0, r0, r4, ror #4
    3230:	3606100d 	strcc	r1, [r6], -sp
    3234:	000002f9 	strdeq	r0, [r0], -r9
    3238:	00179f0e 	andseq	r9, r7, lr, lsl #30
    323c:	b8380600 	ldmdalt	r8!, {r9, sl}
    3240:	00000000 	andeq	r0, r0, r0
    3244:	0017ae0e 	andseq	sl, r7, lr, lsl #28
    3248:	a23b0600 	eorsge	r0, fp, #0, 12
    324c:	04000000 	streq	r0, [r0], #-0
    3250:	0018520e 	andseq	r5, r8, lr, lsl #4
    3254:	a23e0600 	eorsge	r0, lr, #0, 12
    3258:	06000000 	streq	r0, [r0], -r0
    325c:	00198f0e 	andseq	r8, r9, lr, lsl #30
    3260:	a2410600 	subge	r0, r1, #0, 12
    3264:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3268:	0019aa0e 	andseq	sl, r9, lr, lsl #20
    326c:	a2440600 	subge	r0, r4, #0, 12
    3270:	0a000000 	beq	3278 <_Min_Stack_Size+0x2e78>
    3274:	0019da0e 	andseq	sp, r9, lr, lsl #20
    3278:	a2470600 	subge	r0, r7, #0, 12
    327c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3280:	194c0300 	stmdbne	ip, {r8, r9}^
    3284:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    3288:	000002a8 	andeq	r0, r0, r8, lsr #5
    328c:	0018c40f 	andseq	ip, r8, pc, lsl #8
    3290:	6c890100 	stfvss	f0, [r9], {0}
    3294:	74080030 	strvc	r0, [r8], #-48	; 0x30
    3298:	01000000 	mrseq	r0, (UNDEF: 0)
    329c:	0003289c 	muleq	r3, ip, r8
    32a0:	18861000 	stmne	r6, {ip}
    32a4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    32a8:	00000328 	andeq	r0, r0, r8, lsr #6
    32ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    32b0:	02580411 	subseq	r0, r8, #285212672	; 0x11000000
    32b4:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
    32b8:	01000018 	tsteq	r0, r8, lsl r0
    32bc:	0030e0b4 	ldrhteq	lr, [r0], -r4
    32c0:	00018408 	andeq	r8, r1, r8, lsl #8
    32c4:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    32c8:	10000003 	andne	r0, r0, r3
    32cc:	00001886 	andeq	r1, r0, r6, lsl #17
    32d0:	0328b401 	teqeq	r8, #16777216	; 0x1000000
    32d4:	91020000 	mrsls	r0, (UNDEF: 2)
    32d8:	17681054 			; <UNDEFINED> instruction: 0x17681054
    32dc:	b4010000 	strlt	r0, [r1], #-0
    32e0:	000003a6 	andeq	r0, r0, r6, lsr #7
    32e4:	12509102 	subsne	r9, r0, #-2147483648	; 0x80000000
    32e8:	000002be 			; <UNDEFINED> instruction: 0x000002be
    32ec:	00a2b601 	adceq	fp, r2, r1, lsl #12
    32f0:	91020000 	mrsls	r0, (UNDEF: 2)
    32f4:	17771276 			; <UNDEFINED> instruction: 0x17771276
    32f8:	b6010000 	strlt	r0, [r1], -r0
    32fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    3300:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    3304:	00005952 	andeq	r5, r0, r2, asr r9
    3308:	00a2b701 	adceq	fp, r2, r1, lsl #14
    330c:	91020000 	mrsls	r0, (UNDEF: 2)
    3310:	19631274 	stmdbne	r3!, {r2, r4, r5, r6, r9, ip}^
    3314:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    3318:	000000b8 	strheq	r0, [r0], -r8
    331c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    3320:	0000199f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    3324:	029db901 	addseq	fp, sp, #16384	; 0x4000
    3328:	91020000 	mrsls	r0, (UNDEF: 2)
    332c:	0411005c 	ldreq	r0, [r1], #-92	; 0x5c
    3330:	000002f9 	strdeq	r0, [r0], -r9
    3334:	0017b713 	andseq	fp, r7, r3, lsl r7
    3338:	01210100 	teqeq	r1, r0, lsl #2
    333c:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    3340:	0000003c 	andeq	r0, r0, ip, lsr r0
    3344:	03d29c01 	bicseq	r9, r2, #256	; 0x100
    3348:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
    334c:	01000017 	tsteq	r0, r7, lsl r0
    3350:	03a60121 			; <UNDEFINED> instruction: 0x03a60121
    3354:	91020000 	mrsls	r0, (UNDEF: 2)
    3358:	69130074 	ldmdbvs	r3, {r2, r4, r5, r6}
    335c:	01000019 	tsteq	r0, r9, lsl r0
    3360:	32a00139 	adccc	r0, r0, #1073741838	; 0x4000000e
    3364:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3368:	9c010000 	stcls	0, cr0, [r1], {-0}
    336c:	00000407 	andeq	r0, r0, r7, lsl #8
    3370:	00188614 	andseq	r8, r8, r4, lsl r6
    3374:	01390100 	teqeq	r9, r0, lsl #2
    3378:	00000328 	andeq	r0, r0, r8, lsr #6
    337c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3380:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3384:	1d013901 	stcne	9, cr3, [r1, #-4]
    3388:	02000001 	andeq	r0, r0, #1
    338c:	13007391 	movwne	r7, #913	; 0x391
    3390:	00001af7 	strdeq	r1, [r0], -r7
    3394:	e0015601 	and	r5, r1, r1, lsl #12
    3398:	3e080032 	mcrcc	0, 0, r0, cr8, cr2, {1}
    339c:	01000000 	mrseq	r0, (UNDEF: 0)
    33a0:	00043c9c 	muleq	r4, ip, ip
    33a4:	18861400 	stmne	r6, {sl, ip}
    33a8:	56010000 	strpl	r0, [r1], -r0
    33ac:	00032801 	andeq	r2, r3, r1, lsl #16
    33b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33b4:	0005b814 	andeq	fp, r5, r4, lsl r8
    33b8:	01560100 	cmpeq	r6, r0, lsl #2
    33bc:	0000011d 	andeq	r0, r0, sp, lsl r1
    33c0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    33c4:	00180813 	andseq	r0, r8, r3, lsl r8
    33c8:	01730100 	cmneq	r3, r0, lsl #2
    33cc:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
    33d0:	0000003e 	andeq	r0, r0, lr, lsr r0
    33d4:	04809c01 	streq	r9, [r0], #3073	; 0xc01
    33d8:	86140000 	ldrhi	r0, [r4], -r0
    33dc:	01000018 	tsteq	r0, r8, lsl r0
    33e0:	03280173 	teqeq	r8, #-1073741796	; 0xc000001c
    33e4:	91020000 	mrsls	r0, (UNDEF: 2)
    33e8:	1ac4146c 	bne	ff1085a0 <_estack+0xdf0d85a0>
    33ec:	73010000 	movwvc	r0, #4096	; 0x1000
    33f0:	0000a201 	andeq	sl, r0, r1, lsl #4
    33f4:	6a910200 	bvs	fe443bfc <_estack+0xde413bfc>
    33f8:	0002be15 	andeq	fp, r2, r5, lsl lr
    33fc:	01750100 	cmneq	r5, r0, lsl #2
    3400:	000000a2 	andeq	r0, r0, r2, lsr #1
    3404:	00769102 	rsbseq	r9, r6, r2, lsl #2
    3408:	0016ea13 	andseq	lr, r6, r3, lsl sl
    340c:	018f0100 	orreq	r0, pc, r0, lsl #2
    3410:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
    3414:	0000003e 	andeq	r0, r0, lr, lsr r0
    3418:	04b59c01 	ldrteq	r9, [r5], #3073	; 0xc01
    341c:	86140000 	ldrhi	r0, [r4], -r0
    3420:	01000018 	tsteq	r0, r8, lsl r0
    3424:	0328018f 	teqeq	r8, #-1073741789	; 0xc0000023
    3428:	91020000 	mrsls	r0, (UNDEF: 2)
    342c:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    3430:	8f010000 	svchi	0x00010000
    3434:	00011d01 	andeq	r1, r1, r1, lsl #26
    3438:	73910200 	orrsvc	r0, r1, #0, 4
    343c:	1ad61300 	bne	ff588044 <_estack+0xdf558044>
    3440:	a7010000 	strge	r0, [r1, -r0]
    3444:	0033a001 	eorseq	sl, r3, r1
    3448:	00003e08 	andeq	r3, r0, r8, lsl #28
    344c:	ea9c0100 	b	fe703854 <_estack+0xde6d3854>
    3450:	14000004 	strne	r0, [r0], #-4
    3454:	00001886 	andeq	r1, r0, r6, lsl #17
    3458:	2801a701 	stmdacs	r1, {r0, r8, r9, sl, sp, pc}
    345c:	02000003 	andeq	r0, r0, #3
    3460:	b8147491 	ldmdalt	r4, {r0, r4, r7, sl, ip, sp, lr}
    3464:	01000005 	tsteq	r0, r5
    3468:	011d01a7 	tsteq	sp, r7, lsr #3
    346c:	91020000 	mrsls	r0, (UNDEF: 2)
    3470:	a2130073 	andsge	r0, r3, #115	; 0x73
    3474:	0100001a 	tsteq	r0, sl, lsl r0
    3478:	33e001c3 	mvncc	r0, #-1073741776	; 0xc0000030
    347c:	003a0800 	eorseq	r0, sl, r0, lsl #16
    3480:	9c010000 	stcls	0, cr0, [r1], {-0}
    3484:	0000052e 	andeq	r0, r0, lr, lsr #10
    3488:	00188614 	andseq	r8, r8, r4, lsl r6
    348c:	01c30100 	biceq	r0, r3, r0, lsl #2
    3490:	00000328 	andeq	r0, r0, r8, lsr #6
    3494:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3498:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    349c:	9701c301 	strls	ip, [r1, -r1, lsl #6]
    34a0:	02000000 	andeq	r0, r0, #0
    34a4:	8b147391 	blhi	5202f0 <_Min_Stack_Size+0x51fef0>
    34a8:	01000018 	tsteq	r0, r8, lsl r0
    34ac:	009701c3 	addseq	r0, r7, r3, asr #3
    34b0:	91020000 	mrsls	r0, (UNDEF: 2)
    34b4:	4b130072 	blmi	4c3684 <_Min_Stack_Size+0x4c3284>
    34b8:	0100001a 	tsteq	r0, sl, lsl r0
    34bc:	341c01de 	ldrcc	r0, [ip], #-478	; 0x1de
    34c0:	003e0800 	eorseq	r0, lr, r0, lsl #16
    34c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    34c8:	00000563 	andeq	r0, r0, r3, ror #10
    34cc:	00188614 	andseq	r8, r8, r4, lsl r6
    34d0:	01de0100 	bicseq	r0, lr, r0, lsl #2
    34d4:	00000328 	andeq	r0, r0, r8, lsr #6
    34d8:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    34dc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    34e0:	1d01de01 	stcne	14, cr13, [r1, #-4]
    34e4:	02000001 	andeq	r0, r0, #1
    34e8:	13007391 	movwne	r7, #913	; 0x391
    34ec:	00001752 	andeq	r1, r0, r2, asr r7
    34f0:	5c01f501 	cfstr32pl	mvfx15, [r1], {1}
    34f4:	40080034 	andmi	r0, r8, r4, lsr r0
    34f8:	01000000 	mrseq	r0, (UNDEF: 0)
    34fc:	0005a79c 	muleq	r5, ip, r7
    3500:	18861400 	stmne	r6, {sl, ip}
    3504:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3508:	00032801 	andeq	r2, r3, r1, lsl #16
    350c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3510:	0013b814 	andseq	fp, r3, r4, lsl r8
    3514:	01f50100 	mvnseq	r0, r0, lsl #2
    3518:	00000097 	muleq	r0, r7, r0
    351c:	156b9102 	strbne	r9, [fp, #-258]!	; 0x102
    3520:	000002be 			; <UNDEFINED> instruction: 0x000002be
    3524:	a201f701 	andge	pc, r1, #262144	; 0x40000
    3528:	02000000 	andeq	r0, r0, #0
    352c:	13007691 	movwne	r7, #1681	; 0x691
    3530:	00001a1f 	andeq	r1, r0, pc, lsl sl
    3534:	9c021001 	stcls	0, cr1, [r2], {1}
    3538:	3e080034 	mcrcc	0, 0, r0, cr8, cr4, {1}
    353c:	01000000 	mrseq	r0, (UNDEF: 0)
    3540:	0005dc9c 	muleq	r5, ip, ip
    3544:	18861400 	stmne	r6, {sl, ip}
    3548:	10010000 	andne	r0, r1, r0
    354c:	00032802 	andeq	r2, r3, r2, lsl #16
    3550:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3554:	0005b814 	andeq	fp, r5, r4, lsl r8
    3558:	02100100 	andseq	r0, r0, #0, 2
    355c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3560:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3564:	0018cf13 	andseq	ip, r8, r3, lsl pc
    3568:	02280100 	eoreq	r0, r8, #0, 2
    356c:	080034dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp}
    3570:	0000003e 	andeq	r0, r0, lr, lsr r0
    3574:	06119c01 	ldreq	r9, [r1], -r1, lsl #24
    3578:	86140000 	ldrhi	r0, [r4], -r0
    357c:	01000018 	tsteq	r0, r8, lsl r0
    3580:	03280228 	teqeq	r8, #40, 4	; 0x80000002
    3584:	91020000 	mrsls	r0, (UNDEF: 2)
    3588:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    358c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3590:	00011d02 	andeq	r1, r1, r2, lsl #26
    3594:	73910200 	orrsvc	r0, r1, #0, 4
    3598:	1a8d1300 	bne	fe3481a0 <_estack+0xde3181a0>
    359c:	42010000 	andmi	r0, r1, #0
    35a0:	00351c02 	eorseq	r1, r5, r2, lsl #24
    35a4:	00004208 	andeq	r4, r0, r8, lsl #4
    35a8:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    35ac:	14000006 	strne	r0, [r0], #-6
    35b0:	00001886 	andeq	r1, r0, r6, lsl #17
    35b4:	28024201 	stmdacs	r2, {r0, r9, lr}
    35b8:	02000003 	andeq	r0, r0, #3
    35bc:	b8147491 	ldmdalt	r4, {r0, r4, r7, sl, ip, sp, lr}
    35c0:	01000005 	tsteq	r0, r5
    35c4:	011d0242 	tsteq	sp, r2, asr #4
    35c8:	91020000 	mrsls	r0, (UNDEF: 2)
    35cc:	07130073 			; <UNDEFINED> instruction: 0x07130073
    35d0:	01000017 	tsteq	r0, r7, lsl r0
    35d4:	3560025a 	strbcc	r0, [r0, #-602]!	; 0x25a
    35d8:	003e0800 	eorseq	r0, lr, r0, lsl #16
    35dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    35e0:	0000067b 	andeq	r0, r0, fp, ror r6
    35e4:	00188614 	andseq	r8, r8, r4, lsl r6
    35e8:	025a0100 	subseq	r0, sl, #0, 2
    35ec:	00000328 	andeq	r0, r0, r8, lsr #6
    35f0:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    35f4:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    35f8:	1d025a01 	vstrne	s10, [r2, #-4]
    35fc:	02000001 	andeq	r0, r0, #1
    3600:	13007391 	movwne	r7, #913	; 0x391
    3604:	00001a03 	andeq	r1, r0, r3, lsl #20
    3608:	a0027401 	andge	r7, r2, r1, lsl #8
    360c:	40080035 	andmi	r0, r8, r5, lsr r0
    3610:	01000000 	mrseq	r0, (UNDEF: 0)
    3614:	0006b09c 	muleq	r6, ip, r0
    3618:	18861400 	stmne	r6, {sl, ip}
    361c:	74010000 	strvc	r0, [r1], #-0
    3620:	00032802 	andeq	r2, r3, r2, lsl #16
    3624:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3628:	00185214 	andseq	r5, r8, r4, lsl r2
    362c:	02740100 	rsbseq	r0, r4, #0, 2
    3630:	000000a2 	andeq	r0, r0, r2, lsr #1
    3634:	00729102 	rsbseq	r9, r2, r2, lsl #2
    3638:	00173b13 	andseq	r3, r7, r3, lsl fp
    363c:	029a0100 	addseq	r0, sl, #0, 2
    3640:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
    3644:	00000040 	andeq	r0, r0, r0, asr #32
    3648:	06e59c01 	strbteq	r9, [r5], r1, lsl #24
    364c:	86140000 	ldrhi	r0, [r4], -r0
    3650:	01000018 	tsteq	r0, r8, lsl r0
    3654:	0328029a 	teqeq	r8, #-1610612727	; 0xa0000009
    3658:	91020000 	mrsls	r0, (UNDEF: 2)
    365c:	18991474 	ldmne	r9, {r2, r4, r5, r6, sl, ip}
    3660:	9a010000 	bls	43668 <_Min_Stack_Size+0x43268>
    3664:	0000a202 	andeq	sl, r0, r2, lsl #4
    3668:	72910200 	addsvc	r0, r1, #0, 4
    366c:	17e71300 	strbne	r1, [r7, r0, lsl #6]!
    3670:	b6010000 	strlt	r0, [r1], -r0
    3674:	00362002 	eorseq	r2, r6, r2
    3678:	00004008 	andeq	r4, r0, r8
    367c:	1a9c0100 	bne	fe703a84 <_estack+0xde6d3a84>
    3680:	14000007 	strne	r0, [r0], #-7
    3684:	00001886 	andeq	r1, r0, r6, lsl #17
    3688:	2802b601 	stmdacs	r2, {r0, r9, sl, ip, sp, pc}
    368c:	02000003 	andeq	r0, r0, #3
    3690:	77147491 			; <UNDEFINED> instruction: 0x77147491
    3694:	01000018 	tsteq	r0, r8, lsl r0
    3698:	00a202b6 	strhteq	r0, [r2], r6
    369c:	91020000 	mrsls	r0, (UNDEF: 2)
    36a0:	47130072 			; <UNDEFINED> instruction: 0x47130072
    36a4:	01000018 	tsteq	r0, r8, lsl r0
    36a8:	366002ce 	strbtcc	r0, [r0], -lr, asr #5
    36ac:	003e0800 	eorseq	r0, lr, r0, lsl #16
    36b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36b4:	0000074f 	andeq	r0, r0, pc, asr #14
    36b8:	00188614 	andseq	r8, r8, r4, lsl r6
    36bc:	02ce0100 	sbceq	r0, lr, #0, 2
    36c0:	00000328 	andeq	r0, r0, r8, lsr #6
    36c4:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    36c8:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    36cc:	1d02ce01 	stcne	14, cr12, [r2, #-4]
    36d0:	02000001 	andeq	r0, r0, #1
    36d4:	13007391 	movwne	r7, #913	; 0x391
    36d8:	00001781 	andeq	r1, r0, r1, lsl #15
    36dc:	a002f401 	andge	pc, r2, r1, lsl #8
    36e0:	1e080036 	mcrne	0, 0, r0, cr8, cr6, {1}
    36e4:	01000000 	mrseq	r0, (UNDEF: 0)
    36e8:	0007849c 	muleq	r7, ip, r4
    36ec:	18861400 	stmne	r6, {sl, ip}
    36f0:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    36f4:	00032802 	andeq	r2, r3, r2, lsl #16
    36f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    36fc:	00178914 	andseq	r8, r7, r4, lsl r9
    3700:	02f40100 	rscseq	r0, r4, #0, 2
    3704:	00000097 	muleq	r0, r7, r0
    3708:	00739102 	rsbseq	r9, r3, r2, lsl #2
    370c:	0019bc16 	andseq	fp, r9, r6, lsl ip
    3710:	03010100 	movweq	r0, #4352	; 0x1100
    3714:	00000097 	muleq	r0, r7, r0
    3718:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
    371c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3720:	07ae9c01 	streq	r9, [lr, r1, lsl #24]!
    3724:	86140000 	ldrhi	r0, [r4], -r0
    3728:	01000018 	tsteq	r0, r8, lsl r0
    372c:	03280301 	teqeq	r8, #67108864	; 0x4000000
    3730:	91020000 	mrsls	r0, (UNDEF: 2)
    3734:	67130074 			; <UNDEFINED> instruction: 0x67130074
    3738:	01000018 	tsteq	r0, r8, lsl r0
    373c:	36dc0320 	ldrbcc	r0, [ip], r0, lsr #6
    3740:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3744:	9c010000 	stcls	0, cr0, [r1], {-0}
    3748:	000007e3 	andeq	r0, r0, r3, ror #15
    374c:	00188614 	andseq	r8, r8, r4, lsl r6
    3750:	03200100 	teqeq	r0, #0, 2
    3754:	00000328 	andeq	r0, r0, r8, lsr #6
    3758:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    375c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3760:	1d032001 	stcne	0, cr2, [r3, #-4]
    3764:	02000001 	andeq	r0, r0, #1
    3768:	13007391 	movwne	r7, #913	; 0x391
    376c:	00001820 	andeq	r1, r0, r0, lsr #16
    3770:	1c033f01 	stcne	15, cr3, [r3], {1}
    3774:	40080037 	andmi	r0, r8, r7, lsr r0
    3778:	01000000 	mrseq	r0, (UNDEF: 0)
    377c:	0008189c 	muleq	r8, ip, r8
    3780:	18861400 	stmne	r6, {sl, ip}
    3784:	3f010000 	svccc	0x00010000
    3788:	00032803 	andeq	r2, r3, r3, lsl #16
    378c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3790:	001a6114 	andseq	r6, sl, r4, lsl r1
    3794:	033f0100 	teqeq	pc, #0, 2
    3798:	000000a2 	andeq	r0, r0, r2, lsr #1
    379c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    37a0:	00178e13 	andseq	r8, r7, r3, lsl lr
    37a4:	03570100 	cmpeq	r7, #0, 2
    37a8:	0800375c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, sp}
    37ac:	0000003e 	andeq	r0, r0, lr, lsr r0
    37b0:	084d9c01 	stmdaeq	sp, {r0, sl, fp, ip, pc}^
    37b4:	86140000 	ldrhi	r0, [r4], -r0
    37b8:	01000018 	tsteq	r0, r8, lsl r0
    37bc:	03280357 	teqeq	r8, #1543503873	; 0x5c000001
    37c0:	91020000 	mrsls	r0, (UNDEF: 2)
    37c4:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    37c8:	57010000 	strpl	r0, [r1, -r0]
    37cc:	00011d03 	andeq	r1, r1, r3, lsl #26
    37d0:	73910200 	orrsvc	r0, r1, #0, 4
    37d4:	16fc1600 	ldrbtne	r1, [ip], r0, lsl #12
    37d8:	6d010000 	stcvs	0, cr0, [r1, #-0]
    37dc:	00009703 	andeq	r9, r0, r3, lsl #14
    37e0:	00379c00 	eorseq	r9, r7, r0, lsl #24
    37e4:	00002008 	andeq	r2, r0, r8
    37e8:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    37ec:	14000008 	strne	r0, [r0], #-8
    37f0:	00001886 	andeq	r1, r0, r6, lsl #17
    37f4:	28036d01 	stmdacs	r3, {r0, r8, sl, fp, sp, lr}
    37f8:	02000003 	andeq	r0, r0, #3
    37fc:	13007491 	movwne	r7, #1169	; 0x491
    3800:	00001941 	andeq	r1, r0, r1, asr #18
    3804:	bc038e01 	stclt	14, cr8, [r3], {1}
    3808:	3e080037 	mcrcc	0, 0, r0, cr8, cr7, {1}
    380c:	01000000 	mrseq	r0, (UNDEF: 0)
    3810:	0008ac9c 	muleq	r8, ip, ip
    3814:	18861400 	stmne	r6, {sl, ip}
    3818:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    381c:	00032803 	andeq	r2, r3, r3, lsl #16
    3820:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3824:	0005b814 	andeq	fp, r5, r4, lsl r8
    3828:	038e0100 	orreq	r0, lr, #0, 2
    382c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3830:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3834:	0017d013 	andseq	sp, r7, r3, lsl r0
    3838:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    383c:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    3840:	0000003e 	andeq	r0, r0, lr, lsr r0
    3844:	08e19c01 	stmiaeq	r1!, {r0, sl, fp, ip, pc}^
    3848:	86140000 	ldrhi	r0, [r4], -r0
    384c:	01000018 	tsteq	r0, r8, lsl r0
    3850:	032803a6 	teqeq	r8, #-1744830462	; 0x98000002
    3854:	91020000 	mrsls	r0, (UNDEF: 2)
    3858:	05b81474 	ldreq	r1, [r8, #1140]!	; 0x474
    385c:	a6010000 	strge	r0, [r1], -r0
    3860:	00011d03 	andeq	r1, r1, r3, lsl #26
    3864:	73910200 	orrsvc	r0, r1, #0, 4
    3868:	19f21600 	ldmibne	r2!, {r9, sl, ip}^
    386c:	30010000 	andcc	r0, r1, r0
    3870:	0000a204 	andeq	sl, r0, r4, lsl #4
    3874:	00383c00 	eorseq	r3, r8, r0, lsl #24
    3878:	00002e08 	andeq	r2, r0, r8, lsl #28
    387c:	299c0100 	ldmibcs	ip, {r8}
    3880:	14000009 	strne	r0, [r0], #-9
    3884:	00001886 	andeq	r1, r0, r6, lsl #17
    3888:	28043001 	stmdacs	r4, {r0, ip, sp}
    388c:	02000003 	andeq	r0, r0, #3
    3890:	1b146c91 	blne	51eadc <_Min_Stack_Size+0x51e6dc>
    3894:	01000017 	tsteq	r0, r7, lsl r0
    3898:	00970430 	addseq	r0, r7, r0, lsr r4
    389c:	91020000 	mrsls	r0, (UNDEF: 2)
    38a0:	6d74176b 	ldclvs	7, cr1, [r4, #-428]!	; 0xfffffe54
    38a4:	32010070 	andcc	r0, r1, #112	; 0x70
    38a8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    38ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38b0:	172e1300 	strne	r1, [lr, -r0, lsl #6]!
    38b4:	4b010000 	blmi	438bc <_Min_Stack_Size+0x434bc>
    38b8:	00386c04 	eorseq	r6, r8, r4, lsl #24
    38bc:	00004608 	andeq	r4, r0, r8, lsl #12
    38c0:	6d9c0100 	ldfvss	f0, [ip]
    38c4:	14000009 	strne	r0, [r0], #-9
    38c8:	00001886 	andeq	r1, r0, r6, lsl #17
    38cc:	28044b01 	stmdacs	r4, {r0, r8, r9, fp, lr}
    38d0:	02000003 	andeq	r0, r0, #3
    38d4:	5c147491 	cfldrspl	mvf7, [r4], {145}	; 0x91
    38d8:	01000019 	tsteq	r0, r9, lsl r0
    38dc:	00a2044b 	adceq	r0, r2, fp, asr #8
    38e0:	91020000 	mrsls	r0, (UNDEF: 2)
    38e4:	05b81472 	ldreq	r1, [r8, #1138]!	; 0x472
    38e8:	4b010000 	blmi	438f0 <_Min_Stack_Size+0x434f0>
    38ec:	00011d04 	andeq	r1, r1, r4, lsl #26
    38f0:	71910200 	orrsvc	r0, r1, r0, lsl #4
    38f4:	18e21600 	stmiane	r2!, {r9, sl, ip}^
    38f8:	86010000 	strhi	r0, [r1], -r0
    38fc:	00013f04 	andeq	r3, r1, r4, lsl #30
    3900:	0038b400 	eorseq	fp, r8, r0, lsl #8
    3904:	00006008 	andeq	r6, r0, r8
    3908:	e29c0100 	adds	r0, ip, #0, 2
    390c:	14000009 	strne	r0, [r0], #-9
    3910:	00001886 	andeq	r1, r0, r6, lsl #17
    3914:	28048601 	stmdacs	r4, {r0, r9, sl, pc}
    3918:	02000003 	andeq	r0, r0, #3
    391c:	b2146491 	andslt	r6, r4, #-1862270976	; 0x91000000
    3920:	01000019 	tsteq	r0, r9, lsl r0
    3924:	00b80486 	adcseq	r0, r8, r6, lsl #9
    3928:	91020000 	mrsls	r0, (UNDEF: 2)
    392c:	1a831560 	bne	fe0c8eb4 <_estack+0xde098eb4>
    3930:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3934:	0000b804 	andeq	fp, r0, r4, lsl #16
    3938:	70910200 	addsvc	r0, r1, r0, lsl #4
    393c:	001a3215 	andseq	r3, sl, r5, lsl r2
    3940:	04890100 	streq	r0, [r9], #256	; 0x100
    3944:	000000b8 	strheq	r0, [r0], -r8
    3948:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    394c:	00001a38 	andeq	r1, r0, r8, lsr sl
    3950:	b8048901 	stmdalt	r4, {r0, r8, fp, pc}
    3954:	02000000 	andeq	r0, r0, #0
    3958:	44156891 	ldrmi	r6, [r5], #-2193	; 0x891
    395c:	0100001a 	tsteq	r0, sl, lsl r0
    3960:	013f048a 	teqeq	pc, sl, lsl #9
    3964:	91020000 	mrsls	r0, (UNDEF: 2)
    3968:	aa160077 	bge	583b4c <_Min_Stack_Size+0x58374c>
    396c:	01000018 	tsteq	r0, r8, lsl r0
    3970:	00b804b6 	ldrhteq	r0, [r8], r6
    3974:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    3978:	00440800 	subeq	r0, r4, r0, lsl #16
    397c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3980:	00000a39 	andeq	r0, r0, r9, lsr sl
    3984:	00188614 	andseq	r8, r8, r4, lsl r6
    3988:	04b60100 	ldrteq	r0, [r6], #256	; 0x100
    398c:	00000328 	andeq	r0, r0, r8, lsr #6
    3990:	15649102 	strbne	r9, [r4, #-258]!	; 0x102
    3994:	00001a83 	andeq	r1, r0, r3, lsl #21
    3998:	b804b801 	stmdalt	r4, {r0, fp, ip, sp, pc}
    399c:	02000000 	andeq	r0, r0, #0
    39a0:	32157491 	andscc	r7, r5, #-1862270976	; 0x91000000
    39a4:	0100001a 	tsteq	r0, sl, lsl r0
    39a8:	00b804b9 	ldrhteq	r0, [r8], r9
    39ac:	91020000 	mrsls	r0, (UNDEF: 2)
    39b0:	1a381570 	bne	e08f78 <_Min_Stack_Size+0xe08b78>
    39b4:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    39b8:	0000b804 	andeq	fp, r0, r4, lsl #16
    39bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    39c0:	1a711600 	bne	1c491c8 <_Min_Stack_Size+0x1c48dc8>
    39c4:	ed010000 	stc	0, cr0, [r1, #-0]
    39c8:	0000ef04 	andeq	lr, r0, r4, lsl #30
    39cc:	00395800 	eorseq	r5, r9, r0, lsl #16
    39d0:	00006608 	andeq	r6, r0, r8, lsl #12
    39d4:	9f9c0100 	svcls	0x009c0100
    39d8:	1400000a 	strne	r0, [r0], #-10
    39dc:	00001886 	andeq	r1, r0, r6, lsl #17
    39e0:	2804ed01 	stmdacs	r4, {r0, r8, sl, fp, sp, lr, pc}
    39e4:	02000003 	andeq	r0, r0, #3
    39e8:	bb146491 	bllt	51cc34 <_Min_Stack_Size+0x51c834>
    39ec:	01000018 	tsteq	r0, r8, lsl r0
    39f0:	00b804ed 	adcseq	r0, r8, sp, ror #9
    39f4:	91020000 	mrsls	r0, (UNDEF: 2)
    39f8:	08a31560 	stmiaeq	r3!, {r5, r6, r8, sl, ip}
    39fc:	ef010000 	svc	0x00010000
    3a00:	0000ef04 	andeq	lr, r0, r4, lsl #30
    3a04:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3a08:	00186015 	andseq	r6, r8, r5, lsl r0
    3a0c:	04f00100 	ldrbteq	r0, [r0], #256	; 0x100
    3a10:	000000ca 	andeq	r0, r0, sl, asr #1
    3a14:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    3a18:	00001ab6 			; <UNDEFINED> instruction: 0x00001ab6
    3a1c:	ca04f001 	bgt	13fa28 <_Min_Stack_Size+0x13f628>
    3a20:	02000000 	andeq	r0, r0, #0
    3a24:	13006c91 	movwne	r6, #3217	; 0xc91
    3a28:	000019cc 	andeq	r1, r0, ip, asr #19
    3a2c:	c0053a01 	andgt	r3, r5, r1, lsl #20
    3a30:	2c080039 	stccs	0, cr0, [r8], {57}	; 0x39
    3a34:	01000000 	mrseq	r0, (UNDEF: 0)
    3a38:	000ae39c 	muleq	sl, ip, r3
    3a3c:	18861400 	stmne	r6, {sl, ip}
    3a40:	3a010000 	bcc	43a48 <_Min_Stack_Size+0x43648>
    3a44:	00032805 	andeq	r2, r3, r5, lsl #16
    3a48:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3a4c:	0018bb14 	andseq	fp, r8, r4, lsl fp
    3a50:	053a0100 	ldreq	r0, [sl, #-256]!	; 0x100
    3a54:	000000b8 	strheq	r0, [r0], -r8
    3a58:	15689102 	strbne	r9, [r8, #-258]!	; 0x102
    3a5c:	00001836 	andeq	r1, r0, r6, lsr r8
    3a60:	b8053c01 	stmdalt	r5, {r0, sl, fp, ip, sp}
    3a64:	02000000 	andeq	r0, r0, #0
    3a68:	16007491 			; <UNDEFINED> instruction: 0x16007491
    3a6c:	00001ae7 	andeq	r1, r0, r7, ror #21
    3a70:	fb055c01 	blx	15aa7e <_Min_Stack_Size+0x15a67e>
    3a74:	ec000000 	stc	0, cr0, [r0], {-0}
    3a78:	5a080039 	bpl	203b64 <_Min_Stack_Size+0x203764>
    3a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3a80:	000b3a9c 	muleq	fp, ip, sl
    3a84:	18861400 	stmne	r6, {sl, ip}
    3a88:	5c010000 	stcpl	0, cr0, [r1], {-0}
    3a8c:	00032805 	andeq	r2, r3, r5, lsl #16
    3a90:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3a94:	00195c14 	andseq	r5, r9, r4, lsl ip
    3a98:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0x100
    3a9c:	000000b8 	strheq	r0, [r0], -r8
    3aa0:	15689102 	strbne	r9, [r8, #-258]!	; 0x102
    3aa4:	000008a3 	andeq	r0, r0, r3, lsr #17
    3aa8:	fb055e01 	blx	15b2b6 <_Min_Stack_Size+0x15aeb6>
    3aac:	02000000 	andeq	r0, r0, #0
    3ab0:	3e157791 	mrccc	7, 0, r7, cr5, cr1, {4}
    3ab4:	0100001a 	tsteq	r0, sl, lsl r0
    3ab8:	00b8055f 	adcseq	r0, r8, pc, asr r5
    3abc:	91020000 	mrsls	r0, (UNDEF: 2)
    3ac0:	d4130070 	ldrle	r0, [r3], #-112	; 0x70
    3ac4:	01000016 	tsteq	r0, r6, lsl r0
    3ac8:	3a480598 	bcc	1205130 <_Min_Stack_Size+0x1204d30>
    3acc:	002c0800 	eoreq	r0, ip, r0, lsl #16
    3ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ad4:	00000b7e 	andeq	r0, r0, lr, ror fp
    3ad8:	00188614 	andseq	r8, r8, r4, lsl r6
    3adc:	05980100 	ldreq	r0, [r8, #256]	; 0x100
    3ae0:	00000328 	andeq	r0, r0, r8, lsr #6
    3ae4:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    3ae8:	0000195c 	andeq	r1, r0, ip, asr r9
    3aec:	b8059801 	stmdalt	r5, {r0, fp, ip, pc}
    3af0:	02000000 	andeq	r0, r0, #0
    3af4:	36156891 			; <UNDEFINED> instruction: 0x36156891
    3af8:	01000018 	tsteq	r0, r8, lsl r0
    3afc:	00b8059a 	umlalseq	r0, r8, sl, r5
    3b00:	91020000 	mrsls	r0, (UNDEF: 2)
    3b04:	56180074 			; <UNDEFINED> instruction: 0x56180074
    3b08:	07000001 	streq	r0, [r0, -r1]
    3b0c:	00d406a7 	sbcseq	r0, r4, r7, lsr #13
    3b10:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3b14:	04000007 	streq	r0, [r0], #-7
    3b18:	000b5a00 	andeq	r5, fp, r0, lsl #20
    3b1c:	21010400 	tstcs	r1, r0, lsl #8
    3b20:	01000000 	mrseq	r0, (UNDEF: 0)
    3b24:	00001c61 	andeq	r1, r0, r1, ror #24
    3b28:	0000010c 	andeq	r0, r0, ip, lsl #2
    3b2c:	00000510 	andeq	r0, r0, r0, lsl r5
    3b30:	00000000 	andeq	r0, r0, r0
    3b34:	00001aa8 	andeq	r1, r0, r8, lsr #21
    3b38:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    3b3c:	02000001 	andeq	r0, r0, #1
    3b40:	01430801 	cmpeq	r3, r1, lsl #16
    3b44:	02020000 	andeq	r0, r2, #0
    3b48:	00017f05 	andeq	r7, r1, r5, lsl #30
    3b4c:	03780300 	cmneq	r8, #0, 6
    3b50:	2b020000 	blcs	83b58 <_Min_Stack_Size+0x83758>
    3b54:	00000045 	andeq	r0, r0, r5, asr #32
    3b58:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    3b5c:	03000000 	movweq	r0, #0
    3b60:	0000016f 	andeq	r0, r0, pc, ror #2
    3b64:	00573f02 	subseq	r3, r7, r2, lsl #30
    3b68:	04020000 	streq	r0, [r2], #-0
    3b6c:	00000505 	andeq	r0, r0, r5, lsl #10
    3b70:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
    3b74:	41020000 	mrsmi	r0, (UNDEF: 2)
    3b78:	00000069 	andeq	r0, r0, r9, rrx
    3b7c:	26070402 	strcs	r0, [r7], -r2, lsl #8
    3b80:	02000001 	andeq	r0, r0, #1
    3b84:	00000508 	andeq	r0, r0, r8, lsl #10
    3b88:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3b8c:	00012107 	andeq	r2, r1, r7, lsl #2
    3b90:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    3b94:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3b98:	2b070402 	blcs	1c4ba8 <_Min_Stack_Size+0x1c47a8>
    3b9c:	03000001 	movweq	r0, #1
    3ba0:	0000037a 	andeq	r0, r0, sl, ror r3
    3ba4:	003a3603 	eorseq	r3, sl, r3, lsl #12
    3ba8:	71030000 	mrsvc	r0, (UNDEF: 3)
    3bac:	03000001 	movweq	r0, #1
    3bb0:	00004c41 	andeq	r4, r0, r1, asr #24
    3bb4:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
    3bb8:	42030000 	andmi	r0, r3, #0
    3bbc:	0000005e 	andeq	r0, r0, lr, asr r0
    3bc0:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    3bc4:	05000001 	streq	r0, [r0, #-1]
    3bc8:	000000a2 	andeq	r0, r0, r2, lsr #1
    3bcc:	00009705 	andeq	r9, r0, r5, lsl #14
    3bd0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3bd4:	00d401f7 	ldrsheq	r0, [r4], #23
    3bd8:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    3bdc:	00000007 	andeq	r0, r0, r7
    3be0:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    3be4:	09000100 	stmdbeq	r0, {r8}
    3be8:	00001dc8 	andeq	r1, r0, r8, asr #27
    3bec:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    3bf0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3bf4:	00004d16 	andeq	r4, r0, r6, lsl sp
    3bf8:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    3bfc:	06000000 	streq	r0, [r0], -r0
    3c00:	01f90401 	mvnseq	r0, r1, lsl #8
    3c04:	00000102 	andeq	r0, r0, r2, lsl #2
    3c08:	0005c607 	andeq	ip, r5, r7, lsl #12
    3c0c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    3c10:	01000007 	tsteq	r0, r7
    3c14:	06ef0900 	strbteq	r0, [pc], r0, lsl #18
    3c18:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    3c1c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    3c20:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
    3c24:	016502b1 	strheq	r0, [r5, #-33]!	; 0xffffffdf
    3c28:	430b0000 	movwmi	r0, #45056	; 0xb000
    3c2c:	b3040052 	movwlt	r0, #16466	; 0x4052
    3c30:	0000b402 	andeq	fp, r0, r2, lsl #8
    3c34:	de0c0000 	cdple	0, 0, cr0, cr12, cr0, {0}
    3c38:	0400001d 	streq	r0, [r0], #-29
    3c3c:	00b402b4 	ldrhteq	r0, [r4], r4
    3c40:	0b040000 	bleq	103c48 <_Min_Stack_Size+0x103848>
    3c44:	00524150 	subseq	r4, r2, r0, asr r1
    3c48:	b402b504 	strlt	fp, [r2], #-1284	; 0x504
    3c4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3c50:	001dd90c 	andseq	sp, sp, ip, lsl #18
    3c54:	02b60400 	adcseq	r0, r6, #0, 8
    3c58:	000000b4 	strheq	r0, [r0], -r4
    3c5c:	1d670c0c 	stclne	12, cr0, [r7, #-48]!	; 0xffffffd0
    3c60:	b7040000 	strlt	r0, [r4, -r0]
    3c64:	0000b402 	andeq	fp, r0, r2, lsl #8
    3c68:	460b1000 	strmi	r1, [fp], -r0
    3c6c:	04005243 	streq	r5, [r0], #-579	; 0x243
    3c70:	00b402b8 	ldrhteq	r0, [r4], r8
    3c74:	00140000 	andseq	r0, r4, r0
    3c78:	001b2509 	andseq	r2, fp, r9, lsl #10
    3c7c:	02b90400 	adcseq	r0, r9, #0, 8
    3c80:	0000010e 	andeq	r0, r0, lr, lsl #2
    3c84:	bb04100a 	bllt	107cb4 <_Min_Stack_Size+0x1078b4>
    3c88:	0001af02 	andeq	sl, r1, r2, lsl #30
    3c8c:	1cba0c00 	ldcne	12, cr0, [sl]
    3c90:	bd040000 	stclt	0, cr0, [r4, #-0]
    3c94:	0000b402 	andeq	fp, r0, r2, lsl #8
    3c98:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
    3c9c:	0400001d 	streq	r0, [r0], #-29
    3ca0:	00b402be 	ldrhteq	r0, [r4], lr
    3ca4:	0c040000 	stceq	0, cr0, [r4], {-0}
    3ca8:	00001dd3 	ldrdeq	r1, [r0], -r3
    3cac:	b402bf04 	strlt	fp, [r2], #-3844	; 0xf04
    3cb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3cb4:	001c010c 	andseq	r0, ip, ip, lsl #2
    3cb8:	02c00400 	sbceq	r0, r0, #0, 8
    3cbc:	000000b4 	strheq	r0, [r0], -r4
    3cc0:	8a09000c 	bhi	243cf8 <_Min_Stack_Size+0x2438f8>
    3cc4:	0400001b 	streq	r0, [r0], #-27
    3cc8:	017102c1 	cmneq	r1, r1, asr #5
    3ccc:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    3cd0:	02783605 	rsbseq	r3, r8, #5242880	; 0x500000
    3cd4:	110e0000 	mrsne	r0, (UNDEF: 14)
    3cd8:	0500001e 	streq	r0, [r0, #-30]
    3cdc:	0000a238 	andeq	sl, r0, r8, lsr r2
    3ce0:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    3ce4:	0500001b 	streq	r0, [r0, #-27]
    3ce8:	0000a23b 	andeq	sl, r0, fp, lsr r2
    3cec:	2c0e0400 	cfstrscs	mvf0, [lr], {-0}
    3cf0:	0500001e 	streq	r0, [r0, #-30]
    3cf4:	0000a23d 	andeq	sl, r0, sp, lsr r2
    3cf8:	d40e0800 	strle	r0, [lr], #-2048	; 0x800
    3cfc:	0500001b 	streq	r0, [r0, #-27]
    3d00:	0000a241 	andeq	sl, r0, r1, asr #4
    3d04:	400e0c00 	andmi	r0, lr, r0, lsl #24
    3d08:	0500001e 	streq	r0, [r0, #-30]
    3d0c:	0000a245 	andeq	sl, r0, r5, asr #4
    3d10:	370e1000 	strcc	r1, [lr, -r0]
    3d14:	0500001c 	streq	r0, [r0, #-28]
    3d18:	0000a249 	andeq	sl, r0, r9, asr #4
    3d1c:	f30e1400 	vshl.u8	d1, d0, d14
    3d20:	0500001b 	streq	r0, [r0, #-27]
    3d24:	0000a24c 	andeq	sl, r0, ip, asr #4
    3d28:	e40e1800 	str	r1, [lr], #-2048	; 0x800
    3d2c:	0500001c 	streq	r0, [r0, #-28]
    3d30:	0000a24f 	andeq	sl, r0, pc, asr #4
    3d34:	830e1c00 	movwhi	r1, #60416	; 0xec00
    3d38:	0500001e 	streq	r0, [r0, #-30]
    3d3c:	0000a252 	andeq	sl, r0, r2, asr r2
    3d40:	4f0e2000 	svcmi	0x000e2000
    3d44:	0500001e 	streq	r0, [r0, #-30]
    3d48:	0000a255 	andeq	sl, r0, r5, asr r2
    3d4c:	380e2400 	stmdacc	lr, {sl, sp}
    3d50:	0500001b 	streq	r0, [r0, #-27]
    3d54:	0000a25a 	andeq	sl, r0, sl, asr r2
    3d58:	f30e2800 	vsub.i8	d2, d14, d0
    3d5c:	0500001d 	streq	r0, [r0, #-29]
    3d60:	0000a25d 	andeq	sl, r0, sp, asr r2
    3d64:	260e2c00 	strcs	r2, [lr], -r0, lsl #24
    3d68:	0500001d 	streq	r0, [r0, #-29]
    3d6c:	0000a262 	andeq	sl, r0, r2, ror #4
    3d70:	450e3000 	strmi	r3, [lr, #-0]
    3d74:	0500001b 	streq	r0, [r0, #-27]
    3d78:	0000a265 	andeq	sl, r0, r5, ror #4
    3d7c:	640e3400 	strvs	r3, [lr], #-1024	; 0x400
    3d80:	0500001b 	streq	r0, [r0, #-27]
    3d84:	0000a26a 	andeq	sl, r0, sl, ror #4
    3d88:	03003800 	movweq	r3, #2048	; 0x800
    3d8c:	00001cfb 	strdeq	r1, [r0], -fp
    3d90:	01bb6e05 			; <UNDEFINED> instruction: 0x01bb6e05
    3d94:	b60f0000 	strlt	r0, [pc], -r0
    3d98:	0100001d 	tsteq	r0, sp, lsl r0
    3d9c:	003a74c4 	eorseq	r7, sl, r4, asr #9
    3da0:	0001a408 	andeq	sl, r1, r8, lsl #8
    3da4:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    3da8:	10000002 	andne	r0, r0, r2
    3dac:	00001bc7 	andeq	r1, r0, r7, asr #23
    3db0:	02a7c401 	adceq	ip, r7, #16777216	; 0x1000000
    3db4:	91020000 	mrsls	r0, (UNDEF: 2)
    3db8:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    3dbc:	00000165 	andeq	r0, r0, r5, ror #2
    3dc0:	001cb112 	andseq	fp, ip, r2, lsl r1
    3dc4:	013f0100 	teqeq	pc, r0, lsl #2
    3dc8:	08003c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, sp}
    3dcc:	000000ac 	andeq	r0, r0, ip, lsr #1
    3dd0:	02f19c01 	rscseq	r9, r1, #256	; 0x100
    3dd4:	c7130000 	ldrgt	r0, [r3, -r0]
    3dd8:	0100001b 	tsteq	r0, fp, lsl r0
    3ddc:	02a7013f 	adceq	r0, r7, #-1073741809	; 0xc000000f
    3de0:	91020000 	mrsls	r0, (UNDEF: 2)
    3de4:	1d4d136c 	stclne	3, cr1, [sp, #-432]	; 0xfffffe50
    3de8:	3f010000 	svccc	0x00010000
    3dec:	0002f101 	andeq	pc, r2, r1, lsl #2
    3df0:	68910200 	ldmvs	r1, {r9}
    3df4:	0002be14 	andeq	fp, r2, r4, lsl lr
    3df8:	01410100 	mrseq	r0, (UNDEF: 81)
    3dfc:	000000a2 	andeq	r0, r0, r2, lsr #1
    3e00:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3e04:	02780411 	rsbseq	r0, r8, #285212672	; 0x11000000
    3e08:	55120000 	ldrpl	r0, [r2, #-0]
    3e0c:	0100001b 	tsteq	r0, fp, lsl r0
    3e10:	3cc40193 	stfcce	f0, [r4], {147}	; 0x93
    3e14:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    3e18:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e1c:	0000031d 	andeq	r0, r0, sp, lsl r3
    3e20:	001d4d13 	andseq	r4, sp, r3, lsl sp
    3e24:	01930100 	orrseq	r0, r3, r0, lsl #2
    3e28:	000002f1 	strdeq	r0, [r0], -r1
    3e2c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3e30:	001b1d12 	andseq	r1, fp, r2, lsl sp
    3e34:	01de0100 	bicseq	r0, lr, r0, lsl #2
    3e38:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
    3e3c:	00000036 	andeq	r0, r0, r6, lsr r0
    3e40:	03529c01 	cmpeq	r2, #256	; 0x100
    3e44:	c7130000 	ldrgt	r0, [r3, -r0]
    3e48:	0100001b 	tsteq	r0, fp, lsl r0
    3e4c:	02a701de 	adceq	r0, r7, #-2147483593	; 0x80000037
    3e50:	91020000 	mrsls	r0, (UNDEF: 2)
    3e54:	05b81374 	ldreq	r1, [r8, #884]!	; 0x374
    3e58:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    3e5c:	00010201 	andeq	r0, r1, r1, lsl #4
    3e60:	73910200 	orrsvc	r0, r1, #0, 4
    3e64:	1d981200 	lfmne	f1, 4, [r8]
    3e68:	02010000 	andeq	r0, r1, #0
    3e6c:	003d6802 	eorseq	r6, sp, r2, lsl #16
    3e70:	00003408 	andeq	r3, r0, r8, lsl #8
    3e74:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    3e78:	13000003 	movwne	r0, #3
    3e7c:	00001bc7 	andeq	r1, r0, r7, asr #23
    3e80:	a7020201 	strge	r0, [r2, -r1, lsl #4]
    3e84:	02000002 	andeq	r0, r0, #2
    3e88:	5c137491 	cfldrspl	mvf7, [r3], {145}	; 0x91
    3e8c:	0100001d 	tsteq	r0, sp, lsl r0
    3e90:	00a20202 	adceq	r0, r2, r2, lsl #4
    3e94:	91020000 	mrsls	r0, (UNDEF: 2)
    3e98:	07120070 			; <UNDEFINED> instruction: 0x07120070
    3e9c:	0100001c 	tsteq	r0, ip, lsl r0
    3ea0:	3d9c0226 	lfmcc	f0, 4, [ip, #152]	; 0x98
    3ea4:	00340800 	eorseq	r0, r4, r0, lsl #16
    3ea8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3eac:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    3eb0:	001bc713 	andseq	ip, fp, r3, lsl r7
    3eb4:	02260100 	eoreq	r0, r6, #0, 2
    3eb8:	000002a7 	andeq	r0, r0, r7, lsr #5
    3ebc:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    3ec0:	00001d6c 	andeq	r1, r0, ip, ror #26
    3ec4:	a2022601 	andge	r2, r2, #1048576	; 0x100000
    3ec8:	02000000 	andeq	r0, r0, #0
    3ecc:	12007091 	andne	r7, r0, #145	; 0x91
    3ed0:	00001ccd 	andeq	r1, r0, sp, asr #25
    3ed4:	d0027801 	andle	r7, r2, r1, lsl #16
    3ed8:	1c08003d 	stcne	0, cr0, [r8], {61}	; 0x3d
    3edc:	01000000 	mrseq	r0, (UNDEF: 0)
    3ee0:	0003f19c 	muleq	r3, ip, r1
    3ee4:	1bc71300 	blne	ff1c8aec <_estack+0xdf198aec>
    3ee8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3eec:	0002a702 	andeq	sl, r2, r2, lsl #14
    3ef0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ef4:	001e6713 	andseq	r6, lr, r3, lsl r7
    3ef8:	02780100 	rsbseq	r0, r8, #0, 2
    3efc:	0000008c 	andeq	r0, r0, ip, lsl #1
    3f00:	00729102 	rsbseq	r9, r2, r2, lsl #2
    3f04:	001e5815 	andseq	r5, lr, r5, lsl r8
    3f08:	02870100 	addeq	r0, r7, #0, 2
    3f0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    3f10:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
    3f14:	0000001a 	andeq	r0, r0, sl, lsl r0
    3f18:	041b9c01 	ldreq	r9, [fp], #-3073	; 0xc01
    3f1c:	c7130000 	ldrgt	r0, [r3, -r0]
    3f20:	0100001b 	tsteq	r0, fp, lsl r0
    3f24:	02a70287 	adceq	r0, r7, #1879048200	; 0x70000008
    3f28:	91020000 	mrsls	r0, (UNDEF: 2)
    3f2c:	0b120074 	bleq	484104 <_Min_Stack_Size+0x483d04>
    3f30:	0100001d 	tsteq	r0, sp, lsl r0
    3f34:	3e0802da 	mcrcc	2, 0, r0, cr8, cr10, {6}
    3f38:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f40:	0000045f 	andeq	r0, r0, pc, asr r4
    3f44:	001bc713 	andseq	ip, fp, r3, lsl r7
    3f48:	02da0100 	sbcseq	r0, sl, #0, 2
    3f4c:	000002a7 	andeq	r0, r0, r7, lsr #5
    3f50:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    3f54:	00001de3 	andeq	r1, r0, r3, ror #27
    3f58:	a202da01 	andge	sp, r2, #4096	; 0x1000
    3f5c:	02000000 	andeq	r0, r0, #0
    3f60:	0b137091 	bleq	4e01ac <_Min_Stack_Size+0x4dfdac>
    3f64:	0100001b 	tsteq	r0, fp, lsl r0
    3f68:	00a202db 	ldrdeq	r0, [r2], fp	; <UNPREDICTABLE>
    3f6c:	91020000 	mrsls	r0, (UNDEF: 2)
    3f70:	4912006c 	ldmdbmi	r2, {r2, r3, r5, r6}
    3f74:	0100001c 	tsteq	r0, ip, lsl r0
    3f78:	3e4402f9 	mcrcc	2, 2, r0, cr4, cr9, {7}
    3f7c:	00360800 	eorseq	r0, r6, r0, lsl #16
    3f80:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f84:	00000494 	muleq	r0, r4, r4
    3f88:	001bc713 	andseq	ip, fp, r3, lsl r7
    3f8c:	02f90100 	rscseq	r0, r9, #0, 2
    3f90:	000002a7 	andeq	r0, r0, r7, lsr #5
    3f94:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    3f98:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3f9c:	0202f901 	andeq	pc, r2, #16384	; 0x4000
    3fa0:	02000001 	andeq	r0, r0, #1
    3fa4:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    3fa8:	00001c20 	andeq	r1, r0, r0, lsr #24
    3fac:	7c032201 	sfmvc	f2, 4, [r3], {1}
    3fb0:	2a08003e 	bcs	2040b0 <_Min_Stack_Size+0x203cb0>
    3fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    3fb8:	0004d89c 	muleq	r4, ip, r8
    3fbc:	1bc71300 	blne	ff1c8bc4 <_estack+0xdf198bc4>
    3fc0:	22010000 	andcs	r0, r1, #0
    3fc4:	0002a703 	andeq	sl, r2, r3, lsl #14
    3fc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3fcc:	001e1d13 	andseq	r1, lr, r3, lsl sp
    3fd0:	03220100 	teqeq	r2, #0, 2
    3fd4:	000000a2 	andeq	r0, r0, r2, lsr #1
    3fd8:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    3fdc:	00001bb1 			; <UNDEFINED> instruction: 0x00001bb1
    3fe0:	a2032301 	andge	r2, r3, #67108864	; 0x4000000
    3fe4:	02000000 	andeq	r0, r0, #0
    3fe8:	15006c91 	strne	r6, [r0, #-3217]	; 0xc91
    3fec:	00001b96 	muleq	r0, r6, fp
    3ff0:	a2033c01 	andge	r3, r3, #256	; 0x100
    3ff4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3ff8:	3008003e 	andcc	r0, r8, lr, lsr r0
    3ffc:	01000000 	mrseq	r0, (UNDEF: 0)
    4000:	0005119c 	muleq	r5, ip, r1
    4004:	1bc71300 	blne	ff1c8c0c <_estack+0xdf198c0c>
    4008:	3c010000 	stccc	0, cr0, [r1], {-0}
    400c:	0002a703 	andeq	sl, r2, r3, lsl #14
    4010:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4014:	706d7416 	rsbvc	r7, sp, r6, lsl r4
    4018:	033e0100 	teqeq	lr, #0, 2
    401c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4020:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4024:	001e0015 	andseq	r0, lr, r5, lsl r0
    4028:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    402c:	00000102 	andeq	r0, r0, r2, lsl #2
    4030:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    4034:	00000030 	andeq	r0, r0, r0, lsr r0
    4038:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xc01
    403c:	c7130000 	ldrgt	r0, [r3, -r0]
    4040:	0100001b 	tsteq	r0, fp, lsl r0
    4044:	02a703af 	adceq	r0, r7, #-1140850686	; 0xbc000002
    4048:	91020000 	mrsls	r0, (UNDEF: 2)
    404c:	5979146c 	ldmdbpl	r9!, {r2, r3, r5, r6, sl, ip}^
    4050:	b1010000 	mrslt	r0, (UNDEF: 1)
    4054:	00010203 	andeq	r0, r1, r3, lsl #4
    4058:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    405c:	1b781500 	blne	1e09464 <_Min_Stack_Size+0x1e09064>
    4060:	d1010000 	mrsle	r0, (UNDEF: 1)
    4064:	0000a203 	andeq	sl, r0, r3, lsl #4
    4068:	003f0800 	eorseq	r0, pc, r0, lsl #16
    406c:	00002408 	andeq	r2, r0, r8, lsl #8
    4070:	839c0100 	orrshi	r0, ip, #0, 2
    4074:	13000005 	movwne	r0, #5
    4078:	00001bc7 	andeq	r1, r0, r7, asr #23
    407c:	a703d101 	strge	sp, [r3, -r1, lsl #2]
    4080:	02000002 	andeq	r0, r0, #2
    4084:	be146c91 	mrclt	12, 0, r6, cr4, cr1, {4}
    4088:	01000002 	tsteq	r0, r2
    408c:	00a203d3 	ldrdeq	r0, [r2], r3	; <UNPREDICTABLE>
    4090:	91020000 	mrsls	r0, (UNDEF: 2)
    4094:	c1150074 	tstgt	r5, r4, ror r0
    4098:	0100001d 	tsteq	r0, sp, lsl r0
    409c:	00d403ec 	sbcseq	r0, r4, ip, ror #7
    40a0:	3f2c0000 	svccc	0x002c0000
    40a4:	00780800 	rsbseq	r0, r8, r0, lsl #16
    40a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    40ac:	000005e9 	andeq	r0, r0, r9, ror #11
    40b0:	001bc713 	andseq	ip, fp, r3, lsl r7
    40b4:	03ec0100 	mvneq	r0, #0, 2
    40b8:	000002a7 	andeq	r0, r0, r7, lsr #5
    40bc:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    40c0:	00001d79 	andeq	r1, r0, r9, ror sp
    40c4:	a203ec01 	andge	lr, r3, #256	; 0x100
    40c8:	02000000 	andeq	r0, r0, #0
    40cc:	a3146091 	tstge	r4, #145	; 0x91
    40d0:	01000008 	tsteq	r0, r8
    40d4:	00d403ee 	sbcseq	r0, r4, lr, ror #7
    40d8:	91020000 	mrsls	r0, (UNDEF: 2)
    40dc:	1bc21477 	blne	ff0892c0 <_estack+0xdf0592c0>
    40e0:	ef010000 	svc	0x00010000
    40e4:	0005e903 	andeq	lr, r5, r3, lsl #18
    40e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    40ec:	0002be14 	andeq	fp, r2, r4, lsl lr
    40f0:	03f00100 	mvnseq	r0, #0, 2
    40f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    40f8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    40fc:	01af0411 			; <UNDEFINED> instruction: 0x01af0411
    4100:	bf120000 	svclt	0x00120000
    4104:	0100001c 	tsteq	r0, ip, lsl r0
    4108:	3fa4042f 	svccc	0x00a4042f
    410c:	005c0800 	subseq	r0, ip, r0, lsl #16
    4110:	9c010000 	stcls	0, cr0, [r1], {-0}
    4114:	00000633 	andeq	r0, r0, r3, lsr r6
    4118:	001bc713 	andseq	ip, fp, r3, lsl r7
    411c:	042f0100 	strteq	r0, [pc], #-256	; 4124 <_Min_Stack_Size+0x3d24>
    4120:	000002a7 	andeq	r0, r0, r7, lsr #5
    4124:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    4128:	00001d79 	andeq	r1, r0, r9, ror sp
    412c:	a2042f01 	andge	r2, r4, #1, 30
    4130:	02000000 	andeq	r0, r0, #0
    4134:	c2146891 	andsgt	r6, r4, #9502720	; 0x910000
    4138:	0100001b 	tsteq	r0, fp, lsl r0
    413c:	05e90431 	strbeq	r0, [r9, #1073]!	; 0x431
    4140:	91020000 	mrsls	r0, (UNDEF: 2)
    4144:	6f120074 	svcvs	0x00120074
    4148:	0100001e 	tsteq	r0, lr, lsl r0
    414c:	4000045e 	andmi	r0, r0, lr, asr r4
    4150:	00720800 	rsbseq	r0, r2, r0, lsl #16
    4154:	9c010000 	stcls	0, cr0, [r1], {-0}
    4158:	00000677 	andeq	r0, r0, r7, ror r6
    415c:	001bc713 	andseq	ip, fp, r3, lsl r7
    4160:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    4164:	000002a7 	andeq	r0, r0, r7, lsr #5
    4168:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    416c:	00001e7c 	andeq	r1, r0, ip, ror lr
    4170:	a2045e01 	andge	r5, r4, #1, 28
    4174:	02000000 	andeq	r0, r0, #0
    4178:	b8137091 	ldmdalt	r3, {r0, r4, r7, ip, sp, lr}
    417c:	01000005 	tsteq	r0, r5
    4180:	0102045e 	tsteq	r2, lr, asr r4
    4184:	91020000 	mrsls	r0, (UNDEF: 2)
    4188:	3815006f 	ldmdacc	r5, {r0, r1, r2, r3, r5, r6}
    418c:	0100001d 	tsteq	r0, sp, lsl r0
    4190:	00e00492 	smlaleq	r0, r0, r2, r4	; <UNPREDICTABLE>
    4194:	40740000 	rsbsmi	r0, r4, r0
    4198:	00b00800 	adcseq	r0, r0, r0, lsl #16
    419c:	9c010000 	stcls	0, cr0, [r1], {-0}
    41a0:	000006ec 	andeq	r0, r0, ip, ror #13
    41a4:	001bc713 	andseq	ip, fp, r3, lsl r7
    41a8:	04920100 	ldreq	r0, [r2], #256	; 0x100
    41ac:	000002a7 	andeq	r0, r0, r7, lsr #5
    41b0:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    41b4:	00001e7c 	andeq	r1, r0, ip, ror lr
    41b8:	a2049201 	andge	r9, r4, #268435456	; 0x10000000
    41bc:	02000000 	andeq	r0, r0, #0
    41c0:	a3146091 	tstge	r4, #145	; 0x91
    41c4:	01000008 	tsteq	r0, r8
    41c8:	00e00494 	smlaleq	r0, r0, r4, r4	; <UNPREDICTABLE>
    41cc:	91020000 	mrsls	r0, (UNDEF: 2)
    41d0:	1bc21477 	blne	ff0893b4 <_estack+0xdf0593b4>
    41d4:	95010000 	strls	r0, [r1, #-0]
    41d8:	0005e904 	andeq	lr, r5, r4, lsl #18
    41dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    41e0:	0002be14 	andeq	fp, r2, r4, lsl lr
    41e4:	04960100 	ldreq	r0, [r6], #256	; 0x100
    41e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    41ec:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    41f0:	00001a3e 	andeq	r1, r0, lr, lsr sl
    41f4:	a2049601 	andge	r9, r4, #1048576	; 0x100000
    41f8:	02000000 	andeq	r0, r0, #0
    41fc:	12006891 	andne	r6, r0, #9502720	; 0x910000
    4200:	00001d82 	andeq	r1, r0, r2, lsl #27
    4204:	2404e401 	strcs	lr, [r4], #-1025	; 0x401
    4208:	5c080041 	stcpl	0, cr0, [r8], {65}	; 0x41
    420c:	01000000 	mrseq	r0, (UNDEF: 0)
    4210:	0007309c 	muleq	r7, ip, r0
    4214:	1bc71300 	blne	ff1c8e1c <_estack+0xdf198e1c>
    4218:	e4010000 	str	r0, [r1], #-0
    421c:	0002a704 	andeq	sl, r2, r4, lsl #14
    4220:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4224:	001e7c13 	andseq	r7, lr, r3, lsl ip
    4228:	04e40100 	strbteq	r0, [r4], #256	; 0x100
    422c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4230:	14689102 	strbtne	r9, [r8], #-258	; 0x102
    4234:	00001bc2 	andeq	r1, r0, r2, asr #23
    4238:	e904e601 	stmdb	r4, {r0, r9, sl, sp, lr, pc}
    423c:	02000005 	andeq	r0, r0, #5
    4240:	17007491 			; <UNDEFINED> instruction: 0x17007491
    4244:	00000156 	andeq	r0, r0, r6, asr r1
    4248:	b906a706 	stmdblt	r6, {r1, r2, r8, r9, sl, sp, pc}
    424c:	00000000 	andeq	r0, r0, r0
    4250:	00000b21 	andeq	r0, r0, r1, lsr #22
    4254:	0cb10004 	ldceq	0, cr0, [r1], #16
    4258:	01040000 	mrseq	r0, (UNDEF: 4)
    425c:	00000021 	andeq	r0, r0, r1, lsr #32
    4260:	0021ba01 	eoreq	fp, r1, r1, lsl #20
    4264:	00010c00 	andeq	r0, r1, r0, lsl #24
    4268:	0005b000 	andeq	fp, r5, r0
    426c:	00000000 	andeq	r0, r0, r0
    4270:	001e3b00 	andseq	r3, lr, r0, lsl #22
    4274:	06010200 	streq	r0, [r1], -r0, lsl #4
    4278:	00000145 	andeq	r0, r0, r5, asr #2
    427c:	0001ae03 	andeq	sl, r1, r3, lsl #28
    4280:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    4284:	02000000 	andeq	r0, r0, #0
    4288:	01430801 	cmpeq	r3, r1, lsl #16
    428c:	02020000 	andeq	r0, r2, #0
    4290:	00017f05 	andeq	r7, r1, r5, lsl #30
    4294:	03780300 	cmneq	r8, #0, 6
    4298:	2b020000 	blcs	842a0 <_Min_Stack_Size+0x83ea0>
    429c:	00000050 	andeq	r0, r0, r0, asr r0
    42a0:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    42a4:	03000000 	movweq	r0, #0
    42a8:	0000016f 	andeq	r0, r0, pc, ror #2
    42ac:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    42b0:	04020000 	streq	r0, [r2], #-0
    42b4:	00000505 	andeq	r0, r0, r5, lsl #10
    42b8:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
    42bc:	41020000 	mrsmi	r0, (UNDEF: 2)
    42c0:	00000074 	andeq	r0, r0, r4, ror r0
    42c4:	26070402 	strcs	r0, [r7], -r2, lsl #8
    42c8:	02000001 	andeq	r0, r0, #1
    42cc:	00000508 	andeq	r0, r0, r8, lsl #10
    42d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    42d4:	00012107 	andeq	r2, r1, r7, lsl #2
    42d8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    42dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    42e0:	2b070402 	blcs	1c52f0 <_Min_Stack_Size+0x1c4ef0>
    42e4:	03000001 	movweq	r0, #1
    42e8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    42ec:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    42f0:	7a030000 	bvc	c42f8 <_Min_Stack_Size+0xc3ef8>
    42f4:	03000003 	movweq	r0, #3
    42f8:	00004536 	andeq	r4, r0, r6, lsr r5
    42fc:	01710300 	cmneq	r1, r0, lsl #6
    4300:	41030000 	mrsmi	r0, (UNDEF: 3)
    4304:	00000057 	andeq	r0, r0, r7, asr r0
    4308:	0004f603 	andeq	pc, r4, r3, lsl #12
    430c:	69420300 	stmdbvs	r2, {r8, r9}^
    4310:	02000000 	andeq	r0, r0, #0
    4314:	01920704 	orrseq	r0, r2, r4, lsl #14
    4318:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    431c:	06000000 	streq	r0, [r0], -r0
    4320:	000000b8 	strheq	r0, [r0], -r8
    4324:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4328:	0000c307 	andeq	ip, r0, r7, lsl #6
    432c:	05000100 	streq	r0, [r0, #-256]	; 0x100
    4330:	000000a2 	andeq	r0, r0, r2, lsr #1
    4334:	0000ad05 	andeq	sl, r0, r5, lsl #26
    4338:	04010800 	streq	r0, [r1], #-2048	; 0x800
    433c:	00ff01f7 	ldrshteq	r0, [pc], #23
    4340:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
    4344:	00000007 	andeq	r0, r0, r7
    4348:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    434c:	0b000100 	bleq	4754 <_Min_Stack_Size+0x4354>
    4350:	00001dc8 	andeq	r1, r0, r8, asr #27
    4354:	e901f704 	stmdb	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    4358:	0b000000 	bleq	4360 <_Min_Stack_Size+0x3f60>
    435c:	00004d16 	andeq	r4, r0, r6, lsl sp
    4360:	e901f704 	stmdb	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    4364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4368:	01f90401 	mvnseq	r0, r1, lsl #8
    436c:	0000012d 	andeq	r0, r0, sp, lsr #2
    4370:	0005c609 	andeq	ip, r5, r9, lsl #12
    4374:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    4378:	01000007 	tsteq	r0, r7
    437c:	06ef0b00 	strbteq	r0, [pc], r0, lsl #22
    4380:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    4384:	00011701 	andeq	r1, r1, r1, lsl #14
    4388:	04900c00 	ldreq	r0, [r0], #3072	; 0xc00
    438c:	02e20455 	rsceq	r0, r2, #1426063360	; 0x55000000
    4390:	430d0000 	movwmi	r0, #53248	; 0xd000
    4394:	57040052 	smlsdpl	r4, r2, r0, r0
    4398:	0000ca04 	andeq	ip, r0, r4, lsl #20
    439c:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    43a0:	04000003 	streq	r0, [r0], #-3
    43a4:	00ca0458 	sbceq	r0, sl, r8, asr r4
    43a8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    43ac:	00000529 	andeq	r0, r0, r9, lsr #10
    43b0:	ca045904 	bgt	11a7c8 <_Min_Stack_Size+0x11a3c8>
    43b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43b8:	5249430d 	subpl	r4, r9, #872415232	; 0x34000000
    43bc:	045a0400 	ldrbeq	r0, [sl], #-1024	; 0x400
    43c0:	000000ca 	andeq	r0, r0, sl, asr #1
    43c4:	03990e0c 	orrseq	r0, r9, #12, 28	; 0xc0
    43c8:	5b040000 	blpl	1043d0 <_Min_Stack_Size+0x103fd0>
    43cc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    43d0:	210e1000 	mrscs	r1, (UNDEF: 14)
    43d4:	04000003 	streq	r0, [r0], #-3
    43d8:	00ca045c 	sbceq	r0, sl, ip, asr r4
    43dc:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    43e0:	0000050c 	andeq	r0, r0, ip, lsl #10
    43e4:	ca045d04 	bgt	11b7fc <_Min_Stack_Size+0x11b3fc>
    43e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    43ec:	0004ac0e 	andeq	sl, r4, lr, lsl #24
    43f0:	045e0400 	ldrbeq	r0, [lr], #-1024	; 0x400
    43f4:	000000b8 	strheq	r0, [r0], -r8
    43f8:	03100e1c 	tsteq	r0, #28, 28	; 0x1c0
    43fc:	5f040000 	svcpl	0x00040000
    4400:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4404:	ed0e2000 	stc	0, cr2, [lr, #-0]
    4408:	04000003 	streq	r0, [r0], #-3
    440c:	00ca0460 	sbceq	r0, sl, r0, ror #8
    4410:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    4414:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    4418:	cf046104 	svcgt	0x00046104
    441c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4420:	0004ff0e 	andeq	pc, r4, lr, lsl #30
    4424:	04620400 	strbteq	r0, [r2], #-1024	; 0x400
    4428:	000000ca 	andeq	r0, r0, sl, asr #1
    442c:	03190e30 	tsteq	r9, #48, 28	; 0x300
    4430:	63040000 	movwvs	r0, #16384	; 0x4000
    4434:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4438:	0c0e3400 	cfstrseq	mvf3, [lr], {-0}
    443c:	04000004 	streq	r0, [r0], #-4
    4440:	00ca0464 	sbceq	r0, sl, r4, ror #8
    4444:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    4448:	000004c0 	andeq	r0, r0, r0, asr #9
    444c:	b8046504 	stmdalt	r4, {r2, r8, sl, sp, lr}
    4450:	3c000000 	stccc	0, cr0, [r0], {-0}
    4454:	0003bf0e 	andeq	fp, r3, lr, lsl #30
    4458:	04660400 	strbteq	r0, [r6], #-1024	; 0x400
    445c:	000000ca 	andeq	r0, r0, sl, asr #1
    4460:	04240e40 	strteq	r0, [r4], #-3648	; 0xe40
    4464:	67040000 	strvs	r0, [r4, -r0]
    4468:	0000ca04 	andeq	ip, r0, r4, lsl #20
    446c:	ac0e4400 	cfstrsge	mvf4, [lr], {-0}
    4470:	04000003 	streq	r0, [r0], #-3
    4474:	00cf0468 	sbceq	r0, pc, r8, ror #8
    4478:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    447c:	000002fe 	strdeq	r0, [r0], -lr
    4480:	ca046904 	bgt	11e898 <_Min_Stack_Size+0x11e498>
    4484:	50000000 	andpl	r0, r0, r0
    4488:	00049d0e 	andeq	r9, r4, lr, lsl #26
    448c:	046a0400 	strbteq	r0, [sl], #-1024	; 0x400
    4490:	000000ca 	andeq	r0, r0, sl, asr #1
    4494:	03a20e54 			; <UNDEFINED> instruction: 0x03a20e54
    4498:	6b040000 	blvs	1044a0 <_Min_Stack_Size+0x1040a0>
    449c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    44a0:	d60e5800 	strle	r5, [lr], -r0, lsl #16
    44a4:	04000004 	streq	r0, [r0], #-4
    44a8:	00b8046c 	adcseq	r0, r8, ip, ror #8
    44ac:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    44b0:	00000468 	andeq	r0, r0, r8, ror #8
    44b4:	ca046d04 	bgt	11f8cc <_Min_Stack_Size+0x11f4cc>
    44b8:	60000000 	andvs	r0, r0, r0
    44bc:	0005340e 	andeq	r3, r5, lr, lsl #8
    44c0:	046e0400 	strbteq	r0, [lr], #-1024	; 0x400
    44c4:	000000ca 	andeq	r0, r0, sl, asr #1
    44c8:	04e00e64 	strbteq	r0, [r0], #3684	; 0xe64
    44cc:	6f040000 	svcvs	0x00040000
    44d0:	0000cf04 	andeq	ip, r0, r4, lsl #30
    44d4:	2a0e6800 	bcs	39e4dc <_Min_Stack_Size+0x39e0dc>
    44d8:	04000003 	streq	r0, [r0], #-3
    44dc:	00ca0470 	sbceq	r0, sl, r0, ror r4
    44e0:	0d700000 	ldcleq	0, cr0, [r0, #-0]
    44e4:	00525343 	subseq	r5, r2, r3, asr #6
    44e8:	ca047104 	bgt	120900 <_Min_Stack_Size+0x120500>
    44ec:	74000000 	strvc	r0, [r0], #-0
    44f0:	0004ea0e 	andeq	lr, r4, lr, lsl #20
    44f4:	04720400 	ldrbteq	r0, [r2], #-1024	; 0x400
    44f8:	000000cf 	andeq	r0, r0, pc, asr #1
    44fc:	03830e78 	orreq	r0, r3, #120, 28	; 0x780
    4500:	73040000 	movwvc	r0, #16384	; 0x4000
    4504:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4508:	2f0e8000 	svccs	0x000e8000
    450c:	04000003 	streq	r0, [r0], #-3
    4510:	00ca0474 	sbceq	r0, sl, r4, ror r4
    4514:	0e840000 	cdpeq	0, 8, cr0, cr4, cr0, {0}
    4518:	00000523 	andeq	r0, r0, r3, lsr #10
    451c:	ca047504 	bgt	121934 <_Min_Stack_Size+0x121534>
    4520:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4524:	0003c70e 	andeq	ip, r3, lr, lsl #14
    4528:	04760400 	ldrbteq	r0, [r6], #-1024	; 0x400
    452c:	000000ca 	andeq	r0, r0, sl, asr #1
    4530:	e10b008c 	smlabb	fp, ip, r0, r0
    4534:	04000003 	streq	r0, [r0], #-3
    4538:	01390478 	teqeq	r9, r8, ror r4
    453c:	240c0000 	strcs	r0, [ip], #-0
    4540:	e004e004 	and	lr, r4, r4
    4544:	0d000003 	stceq	0, cr0, [r0, #-12]
    4548:	00315243 	eorseq	r5, r1, r3, asr #4
    454c:	df04e204 	svcle	0x0004e204
    4550:	00000000 	andeq	r0, r0, r0
    4554:	0004ac0e 	andeq	sl, r4, lr, lsl #24
    4558:	04e30400 	strbteq	r0, [r3], #1024	; 0x400
    455c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4560:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    4564:	e4040032 	str	r0, [r4], #-50	; 0x32
    4568:	0000df04 	andeq	sp, r0, r4, lsl #30
    456c:	b60e0400 	strlt	r0, [lr], -r0, lsl #8
    4570:	04000004 	streq	r0, [r0], #-4
    4574:	00a204e5 	adceq	r0, r2, r5, ror #9
    4578:	0d060000 	stceq	0, cr0, [r6, #-0]
    457c:	04005253 	streq	r5, [r0], #-595	; 0x253
    4580:	00df04e6 	sbcseq	r0, pc, r6, ror #9
    4584:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4588:	000004c0 	andeq	r0, r0, r0, asr #9
    458c:	a204e704 	andge	lr, r4, #4, 14	; 0x100000
    4590:	0a000000 	beq	4598 <_Min_Stack_Size+0x4198>
    4594:	0052440d 	subseq	r4, r2, sp, lsl #8
    4598:	df04e804 	svcle	0x0004e804
    459c:	0c000000 	stceq	0, cr0, [r0], {-0}
    45a0:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    45a4:	04e90400 	strbteq	r0, [r9], #1024	; 0x400
    45a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    45ac:	1ebf0e0e 	cdpne	14, 11, cr0, cr15, cr14, {0}
    45b0:	ea040000 	b	1045b8 <_Min_Stack_Size+0x1041b8>
    45b4:	0000df04 	andeq	sp, r0, r4, lsl #30
    45b8:	d60e1000 	strle	r1, [lr], -r0
    45bc:	04000004 	streq	r0, [r0], #-4
    45c0:	00a204eb 	adceq	r0, r2, fp, ror #9
    45c4:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
    45c8:	00001e96 	muleq	r0, r6, lr
    45cc:	df04ec04 	svcle	0x0004ec04
    45d0:	14000000 	strne	r0, [r0], #-0
    45d4:	0004e00e 	andeq	lr, r4, lr
    45d8:	04ed0400 	strbteq	r0, [sp], #1024	; 0x400
    45dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    45e0:	1fb80e16 	svcne	0x00b80e16
    45e4:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    45e8:	0000df04 	andeq	sp, r0, r4, lsl #30
    45ec:	ea0e1800 	b	38a5f4 <_Min_Stack_Size+0x38a1f4>
    45f0:	04000004 	streq	r0, [r0], #-4
    45f4:	00a204ef 	adceq	r0, r2, pc, ror #9
    45f8:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    45fc:	00000332 	andeq	r0, r0, r2, lsr r3
    4600:	df04f004 	svcle	0x0004f004
    4604:	1c000000 	stcne	0, cr0, [r0], {-0}
    4608:	0019710e 	andseq	r7, r9, lr, lsl #2
    460c:	04f10400 	ldrbteq	r0, [r1], #1024	; 0x400
    4610:	000000a2 	andeq	r0, r0, r2, lsr #1
    4614:	20990e1e 	addscs	r0, r9, lr, lsl lr
    4618:	f2040000 	vhadd.s8	d0, d4, d0
    461c:	0000df04 	andeq	sp, r0, r4, lsl #30
    4620:	7b0e2000 	blvc	38c628 <_Min_Stack_Size+0x38c228>
    4624:	04000019 	streq	r0, [r0], #-25
    4628:	00a204f3 	strdeq	r0, [r2], r3	; <UNPREDICTABLE>
    462c:	00220000 	eoreq	r0, r2, r0
    4630:	0021210b 	eoreq	r2, r1, fp, lsl #2
    4634:	04f40400 	ldrbteq	r0, [r4], #1024	; 0x400
    4638:	000002ee 	andeq	r0, r0, lr, ror #5
    463c:	3605120f 	strcc	r1, [r5], -pc, lsl #4
    4640:	00000461 	andeq	r0, r0, r1, ror #8
    4644:	001fbf10 	andseq	fp, pc, r0, lsl pc	; <UNPREDICTABLE>
    4648:	a2380500 	eorsge	r0, r8, #0, 10
    464c:	00000000 	andeq	r0, r0, r0
    4650:	00212d10 	eoreq	r2, r1, r0, lsl sp
    4654:	a23b0500 	eorsge	r0, fp, #0, 10
    4658:	02000000 	andeq	r0, r0, #0
    465c:	00219910 	eoreq	r9, r1, r0, lsl r9
    4660:	a23e0500 	eorsge	r0, lr, #0, 10
    4664:	04000000 	streq	r0, [r0], #-0
    4668:	0020df10 	eoreq	sp, r0, r0, lsl pc
    466c:	a2410500 	subge	r0, r1, #0, 10
    4670:	06000000 	streq	r0, [r0], -r0
    4674:	0020fd10 	eoreq	pc, r0, r0, lsl sp	; <UNPREDICTABLE>
    4678:	a2440500 	subge	r0, r4, #0, 10
    467c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4680:	00214810 	eoreq	r4, r1, r0, lsl r8
    4684:	a2470500 	subge	r0, r7, #0, 10
    4688:	0a000000 	beq	4690 <_Min_Stack_Size+0x4290>
    468c:	00210b10 	eoreq	r0, r1, r0, lsl fp
    4690:	a24b0500 	subge	r0, fp, #0, 10
    4694:	0c000000 	stceq	0, cr0, [r0], {-0}
    4698:	0020f010 	eoreq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
    469c:	a2510500 	subsge	r0, r1, #0, 10
    46a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    46a4:	00203310 	eoreq	r3, r0, r0, lsl r3
    46a8:	a2540500 	subsge	r0, r4, #0, 10
    46ac:	10000000 	andne	r0, r0, r0
    46b0:	204e0300 	subcs	r0, lr, r0, lsl #6
    46b4:	55050000 	strpl	r0, [r5, #-0]
    46b8:	000003ec 	andeq	r0, r0, ip, ror #7
    46bc:	5b05100f 	blpl	148700 <_Min_Stack_Size+0x148300>
    46c0:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    46c4:	0020a710 	eoreq	sl, r0, r0, lsl r7
    46c8:	a25e0500 	subsge	r0, lr, #0, 10
    46cc:	00000000 	andeq	r0, r0, r0
    46d0:	001ef510 	andseq	pc, lr, r0, lsl r5	; <UNPREDICTABLE>
    46d4:	a2610500 	rsbge	r0, r1, #0, 10
    46d8:	02000000 	andeq	r0, r0, #0
    46dc:	00208a10 	eoreq	r8, r0, r0, lsl sl
    46e0:	a2640500 	rsbge	r0, r4, #0, 10
    46e4:	04000000 	streq	r0, [r0], #-0
    46e8:	001ff910 	andseq	pc, pc, r0, lsl r9	; <UNPREDICTABLE>
    46ec:	a2670500 	rsbge	r0, r7, #0, 10
    46f0:	06000000 	streq	r0, [r0], -r0
    46f4:	0020d110 	eoreq	sp, r0, r0, lsl r1
    46f8:	b86a0500 	stmdalt	sl!, {r8, sl}^
    46fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4700:	00204510 	eoreq	r4, r0, r0, lsl r5
    4704:	a26d0500 	rsbge	r0, sp, #0, 10
    4708:	0c000000 	stceq	0, cr0, [r0], {-0}
    470c:	1ed60300 	cdpne	3, 13, cr0, cr6, cr0, {0}
    4710:	6f050000 	svcvs	0x00050000
    4714:	0000046c 	andeq	r0, r0, ip, ror #8
    4718:	001ee611 	andseq	lr, lr, r1, lsl r6
    471c:	80e00100 	rschi	r0, r0, r0, lsl #2
    4720:	d8080041 	stmdale	r8, {r0, r6}
    4724:	01000000 	mrseq	r0, (UNDEF: 0)
    4728:	0004ec9c 	muleq	r4, ip, ip
    472c:	21061200 	mrscs	r1, LR_usr
    4730:	e0010000 	and	r0, r1, r0
    4734:	000004ec 	andeq	r0, r0, ip, ror #9
    4738:	00749102 	rsbseq	r9, r4, r2, lsl #2
    473c:	03e00413 	mvneq	r0, #318767104	; 0x13000000
    4740:	a2140000 	andsge	r0, r4, #0
    4744:	0100001e 	tsteq	r0, lr, lsl r0
    4748:	4258011c 	subsmi	r0, r8, #28, 2
    474c:	00860800 	addeq	r0, r6, r0, lsl #16
    4750:	9c010000 	stcls	0, cr0, [r1], {-0}
    4754:	00000536 	andeq	r0, r0, r6, lsr r5
    4758:	00210615 	eoreq	r0, r1, r5, lsl r6
    475c:	011c0100 	tsteq	ip, r0, lsl #2
    4760:	000004ec 	andeq	r0, r0, ip, ror #9
    4764:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4768:	0000206d 	andeq	r2, r0, sp, rrx
    476c:	36011c01 	strcc	r1, [r1], -r1, lsl #24
    4770:	02000005 	andeq	r0, r0, #5
    4774:	be166891 	mrclt	8, 0, r6, cr6, cr1, {4}
    4778:	01000002 	tsteq	r0, r2
    477c:	00a2011e 	adceq	r0, r2, lr, lsl r1
    4780:	91020000 	mrsls	r0, (UNDEF: 2)
    4784:	04130076 	ldreq	r0, [r3], #-118	; 0x76
    4788:	00000461 	andeq	r0, r0, r1, ror #8
    478c:	00217b14 	eoreq	r7, r1, r4, lsl fp
    4790:	015c0100 	cmpeq	ip, r0, lsl #2
    4794:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
    4798:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    479c:	05f89c01 	ldrbeq	r9, [r8, #3073]!	; 0xc01
    47a0:	06150000 	ldreq	r0, [r5], -r0
    47a4:	01000021 	tsteq	r0, r1, lsr #32
    47a8:	04ec015c 	strbteq	r0, [ip], #348	; 0x15c
    47ac:	91020000 	mrsls	r0, (UNDEF: 2)
    47b0:	1eb01554 	mrcne	5, 5, r1, cr0, cr4, {2}
    47b4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    47b8:	0005f801 	andeq	pc, r5, r1, lsl #16
    47bc:	50910200 	addspl	r0, r1, r0, lsl #4
    47c0:	0002be16 	andeq	fp, r2, r6, lsl lr
    47c4:	015e0100 	cmpeq	lr, r0, lsl #2
    47c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    47cc:	166a9102 	strbtne	r9, [sl], -r2, lsl #2
    47d0:	000020ca 	andeq	r2, r0, sl, asr #1
    47d4:	a2015e01 	andge	r5, r1, #1, 28
    47d8:	02000000 	andeq	r0, r0, #0
    47dc:	a6167691 			; <UNDEFINED> instruction: 0xa6167691
    47e0:	01000021 	tsteq	r0, r1, lsr #32
    47e4:	00a2015e 	adceq	r0, r2, lr, asr r1
    47e8:	91020000 	mrsls	r0, (UNDEF: 2)
    47ec:	21ad1674 			; <UNDEFINED> instruction: 0x21ad1674
    47f0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    47f4:	0000a201 	andeq	sl, r0, r1, lsl #4
    47f8:	72910200 	addsvc	r0, r1, #0, 4
    47fc:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    4800:	015f0100 	cmpeq	pc, r0, lsl #2
    4804:	000000b8 	strheq	r0, [r0], -r8
    4808:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    480c:	0000222f 	andeq	r2, r0, pc, lsr #4
    4810:	b8015f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip, lr}
    4814:	02000000 	andeq	r0, r0, #0
    4818:	14166491 	ldrne	r6, [r6], #-1169	; 0x491
    481c:	01000004 	tsteq	r0, r4
    4820:	00b80161 	adcseq	r0, r8, r1, ror #2
    4824:	91020000 	mrsls	r0, (UNDEF: 2)
    4828:	1e9d1660 	cdpne	6, 9, cr1, cr13, cr0, {3}
    482c:	61010000 	mrsvs	r0, (UNDEF: 1)
    4830:	0000b801 	andeq	fp, r0, r1, lsl #16
    4834:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4838:	001eab16 	andseq	sl, lr, r6, lsl fp
    483c:	01610100 	cmneq	r1, r0, lsl #2
    4840:	000000b8 	strheq	r0, [r0], -r8
    4844:	00589102 	subseq	r9, r8, r2, lsl #2
    4848:	04bd0413 	ldrteq	r0, [sp], #1043	; 0x413
    484c:	7b140000 	blvc	504854 <_Min_Stack_Size+0x504454>
    4850:	0100001f 	tsteq	r0, pc, lsl r0
    4854:	449001e0 	ldrmi	r0, [r0], #480	; 0x1e0
    4858:	00480800 	subeq	r0, r8, r0, lsl #16
    485c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4860:	00000624 	andeq	r0, r0, r4, lsr #12
    4864:	00206d15 	eoreq	r6, r0, r5, lsl sp
    4868:	01e00100 	mvneq	r0, r0, lsl #2
    486c:	00000536 	andeq	r0, r0, r6, lsr r5
    4870:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4874:	00216c14 	eoreq	r6, r1, r4, lsl ip
    4878:	01fc0100 	mvnseq	r0, r0, lsl #2
    487c:	080044d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr}
    4880:	00000036 	andeq	r0, r0, r6, lsr r0
    4884:	064a9c01 	strbeq	r9, [sl], -r1, lsl #24
    4888:	b0150000 	andslt	r0, r5, r0
    488c:	0100001e 	tsteq	r0, lr, lsl r0
    4890:	05f801fc 	ldrbeq	r0, [r8, #508]!	; 0x1fc
    4894:	91020000 	mrsls	r0, (UNDEF: 2)
    4898:	9f140074 	svcls	0x00140074
    489c:	01000020 	tsteq	r0, r0, lsr #32
    48a0:	45100219 	ldrmi	r0, [r0, #-537]	; 0x219
    48a4:	003e0800 	eorseq	r0, lr, r0, lsl #16
    48a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48ac:	0000067f 	andeq	r0, r0, pc, ror r6
    48b0:	00210615 	eoreq	r0, r1, r5, lsl r6
    48b4:	02190100 	andseq	r0, r9, #0, 2
    48b8:	000004ec 	andeq	r0, r0, ip, ror #9
    48bc:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    48c0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    48c4:	2d021901 	stccs	9, cr1, [r2, #-4]
    48c8:	02000001 	andeq	r0, r0, #1
    48cc:	14007391 	strne	r7, [r0], #-913	; 0x391
    48d0:	000020e8 	andeq	r2, r0, r8, ror #1
    48d4:	50023201 	andpl	r3, r2, r1, lsl #4
    48d8:	3e080045 	cdpcc	0, 0, cr0, cr8, cr5, {2}
    48dc:	01000000 	mrseq	r0, (UNDEF: 0)
    48e0:	0006b49c 	muleq	r6, ip, r4
    48e4:	21061500 	tstcs	r6, r0, lsl #10
    48e8:	32010000 	andcc	r0, r1, #0
    48ec:	0004ec02 	andeq	lr, r4, r2, lsl #24
    48f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    48f4:	0005b815 	andeq	fp, r5, r5, lsl r8
    48f8:	02320100 	eorseq	r0, r2, #0, 2
    48fc:	0000012d 	andeq	r0, r0, sp, lsr #2
    4900:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4904:	00202014 	eoreq	r2, r0, r4, lsl r0
    4908:	024d0100 	subeq	r0, sp, #0, 2
    490c:	08004590 	stmdaeq	r0, {r4, r7, r8, sl, lr}
    4910:	00000036 	andeq	r0, r0, r6, lsr r0
    4914:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    4918:	06150000 	ldreq	r0, [r5], -r0
    491c:	01000021 	tsteq	r0, r1, lsr #32
    4920:	04ec024d 	strbteq	r0, [ip], #589	; 0x24d
    4924:	91020000 	mrsls	r0, (UNDEF: 2)
    4928:	21991574 	orrscs	r1, r9, r4, ror r5
    492c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    4930:	0000a202 	andeq	sl, r0, r2, lsl #4
    4934:	72910200 	addsvc	r0, r1, #0, 4
    4938:	1f021400 	svcne	0x00021400
    493c:	61010000 	mrsvs	r0, (UNDEF: 1)
    4940:	0045c802 	subeq	ip, r5, r2, lsl #16
    4944:	00004008 	andeq	r4, r0, r8
    4948:	1e9c0100 	fmlnee	f0, f4, f0
    494c:	15000007 	strne	r0, [r0, #-7]
    4950:	00002106 	andeq	r2, r0, r6, lsl #2
    4954:	ec026101 	stfs	f6, [r2], {1}
    4958:	02000004 	andeq	r0, r0, #4
    495c:	bf157491 	svclt	0x00157491
    4960:	0100001f 	tsteq	r0, pc, lsl r0
    4964:	00a20261 	adceq	r0, r2, r1, ror #4
    4968:	91020000 	mrsls	r0, (UNDEF: 2)
    496c:	5d140072 	ldcpl	0, cr0, [r4, #-456]	; 0xfffffe38
    4970:	0100001f 	tsteq	r0, pc, lsl r0
    4974:	4608027b 			; <UNDEFINED> instruction: 0x4608027b
    4978:	00420800 	subeq	r0, r2, r0, lsl #16
    497c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4980:	00000753 	andeq	r0, r0, r3, asr r7
    4984:	00210615 	eoreq	r0, r1, r5, lsl r6
    4988:	027b0100 	rsbseq	r0, fp, #0, 2
    498c:	000004ec 	andeq	r0, r0, ip, ror #9
    4990:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4994:	00001fd5 	ldrdeq	r1, [r0], -r5
    4998:	a2027b01 	andge	r7, r2, #1024	; 0x400
    499c:	02000000 	andeq	r0, r0, #0
    49a0:	14007291 	strne	r7, [r0], #-657	; 0x291
    49a4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    49a8:	4c029301 	stcmi	3, cr9, [r2], {1}
    49ac:	3e080046 	cdpcc	0, 0, cr0, cr8, cr6, {2}
    49b0:	01000000 	mrseq	r0, (UNDEF: 0)
    49b4:	0007889c 	muleq	r7, ip, r8
    49b8:	21061500 	tstcs	r6, r0, lsl #10
    49bc:	93010000 	movwls	r0, #4096	; 0x1000
    49c0:	0004ec02 	andeq	lr, r4, r2, lsl #24
    49c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49c8:	0005b815 	andeq	fp, r5, r5, lsl r8
    49cc:	02930100 	addseq	r0, r3, #0, 2
    49d0:	0000012d 	andeq	r0, r0, sp, lsr #2
    49d4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    49d8:	00207c14 	eoreq	r7, r0, r4, lsl ip
    49dc:	02b20100 	adcseq	r0, r2, #0, 2
    49e0:	0800468c 	stmdaeq	r0, {r2, r3, r7, r9, sl, lr}
    49e4:	0000003e 	andeq	r0, r0, lr, lsr r0
    49e8:	07bd9c01 	ldreq	r9, [sp, r1, lsl #24]!
    49ec:	06150000 	ldreq	r0, [r5], -r0
    49f0:	01000021 	tsteq	r0, r1, lsr #32
    49f4:	04ec02b2 	strbteq	r0, [ip], #690	; 0x2b2
    49f8:	91020000 	mrsls	r0, (UNDEF: 2)
    49fc:	05b81574 	ldreq	r1, [r8, #1396]!	; 0x574
    4a00:	b2010000 	andlt	r0, r1, #0
    4a04:	00012d02 	andeq	r2, r1, r2, lsl #26
    4a08:	73910200 	orrsvc	r0, r1, #0, 4
    4a0c:	21841400 	orrcs	r1, r4, r0, lsl #8
    4a10:	d7010000 	strle	r0, [r1, -r0]
    4a14:	0046cc02 	subeq	ip, r6, r2, lsl #24
    4a18:	00009a08 	andeq	r9, r0, r8, lsl #20
    4a1c:	109c0100 	addsne	r0, ip, r0, lsl #2
    4a20:	15000008 	strne	r0, [r0, #-8]
    4a24:	00001fb0 			; <UNDEFINED> instruction: 0x00001fb0
    4a28:	ec02d701 	stc	7, cr13, [r2], {1}
    4a2c:	02000004 	andeq	r0, r0, #4
    4a30:	b0156c91 	mulslt	r5, r1, ip
    4a34:	0100001e 	tsteq	r0, lr, lsl r0
    4a38:	05f802d7 	ldrbeq	r0, [r8, #727]!	; 0x2d7
    4a3c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a40:	02be1668 	adcseq	r1, lr, #104, 12	; 0x6800000
    4a44:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    4a48:	0000a202 	andeq	sl, r0, r2, lsl #4
    4a4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a50:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    4a54:	02d90100 	sbcseq	r0, r9, #0, 2
    4a58:	000000a2 	andeq	r0, r0, r2, lsr #1
    4a5c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4a60:	00221b18 	eoreq	r1, r2, r8, lsl fp
    4a64:	03210100 	teqeq	r1, #0, 2
    4a68:	000000a2 	andeq	r0, r0, r2, lsr #1
    4a6c:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
    4a70:	0000001a 	andeq	r0, r0, sl, lsl r0
    4a74:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
    4a78:	06150000 	ldreq	r0, [r5], -r0
    4a7c:	01000021 	tsteq	r0, r1, lsr #32
    4a80:	04ec0321 	strbteq	r0, [ip], #801	; 0x321
    4a84:	91020000 	mrsls	r0, (UNDEF: 2)
    4a88:	0a140074 	beq	504c60 <_Min_Stack_Size+0x504860>
    4a8c:	01000022 	tsteq	r0, r2, lsr #32
    4a90:	47840331 			; <UNDEFINED> instruction: 0x47840331
    4a94:	001c0800 	andseq	r0, ip, r0, lsl #16
    4a98:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a9c:	0000086f 	andeq	r0, r0, pc, ror #16
    4aa0:	00210615 	eoreq	r0, r1, r5, lsl r6
    4aa4:	03310100 	teqeq	r1, #0, 2
    4aa8:	000004ec 	andeq	r0, r0, ip, ror #9
    4aac:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4ab0:	00001789 	andeq	r1, r0, r9, lsl #15
    4ab4:	a2033101 	andge	r3, r3, #1073741824	; 0x40000000
    4ab8:	02000000 	andeq	r0, r0, #0
    4abc:	14007291 	strne	r7, [r0], #-657	; 0x291
    4ac0:	00002150 	andeq	r2, r0, r0, asr r1
    4ac4:	a0038b01 	andge	r8, r3, r1, lsl #22
    4ac8:	3e080047 	cdpcc	0, 0, cr0, cr8, cr7, {2}
    4acc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ad0:	0008a49c 	muleq	r8, ip, r4
    4ad4:	21061500 	tstcs	r6, r0, lsl #10
    4ad8:	8b010000 	blhi	44ae0 <_Min_Stack_Size+0x446e0>
    4adc:	0004ec03 	andeq	lr, r4, r3, lsl #24
    4ae0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4ae4:	0005b815 	andeq	fp, r5, r5, lsl r8
    4ae8:	038b0100 	orreq	r0, fp, #0, 2
    4aec:	0000012d 	andeq	r0, r0, sp, lsr #2
    4af0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4af4:	001fe914 	andseq	lr, pc, r4, lsl r9	; <UNPREDICTABLE>
    4af8:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    4afc:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    4b00:	00000022 	andeq	r0, r0, r2, lsr #32
    4b04:	08ca9c01 	stmiaeq	sl, {r0, sl, fp, ip, pc}^
    4b08:	06150000 	ldreq	r0, [r5], -r0
    4b0c:	01000021 	tsteq	r0, r1, lsr #32
    4b10:	04ec03a1 	strbteq	r0, [ip], #929	; 0x3a1
    4b14:	91020000 	mrsls	r0, (UNDEF: 2)
    4b18:	61180074 	tstvs	r8, r4, ror r0
    4b1c:	01000021 	tsteq	r0, r1, lsr #32
    4b20:	00a203b3 	strhteq	r0, [r2], r3
    4b24:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    4b28:	00320800 	eorseq	r0, r2, r0, lsl #16
    4b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b30:	00000912 	andeq	r0, r0, r2, lsl r9
    4b34:	00210615 	eoreq	r0, r1, r5, lsl r6
    4b38:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    4b3c:	000004ec 	andeq	r0, r0, ip, ror #9
    4b40:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4b44:	00001fcd 	andeq	r1, r0, sp, asr #31
    4b48:	9703b301 	strls	fp, [r3, -r1, lsl #6]
    4b4c:	02000000 	andeq	r0, r0, #0
    4b50:	33166b91 	tstcc	r6, #148480	; 0x24400
    4b54:	0100001f 	tsteq	r0, pc, lsl r0
    4b58:	00a203b5 	strhteq	r0, [r2], r5
    4b5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b60:	1e180076 	mrcne	0, 0, r0, cr8, cr6, {3}
    4b64:	0100001f 	tsteq	r0, pc, lsl r0
    4b68:	00a203cc 	adceq	r0, r2, ip, asr #7
    4b6c:	48380000 	ldmdami	r8!, {}	; <UNPREDICTABLE>
    4b70:	001a0800 	andseq	r0, sl, r0, lsl #16
    4b74:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b78:	0000093c 	andeq	r0, r0, ip, lsr r9
    4b7c:	00210615 	eoreq	r0, r1, r5, lsl r6
    4b80:	03cc0100 	biceq	r0, ip, #0, 2
    4b84:	000004ec 	andeq	r0, r0, ip, ror #9
    4b88:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b8c:	001f3a14 	andseq	r3, pc, r4, lsl sl	; <UNPREDICTABLE>
    4b90:	03f10100 	mvnseq	r0, #0, 2
    4b94:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
    4b98:	00000046 	andeq	r0, r0, r6, asr #32
    4b9c:	09809c01 	stmibeq	r0, {r0, sl, fp, ip, pc}
    4ba0:	06150000 	ldreq	r0, [r5], -r0
    4ba4:	01000021 	tsteq	r0, r1, lsr #32
    4ba8:	04ec03f1 	strbteq	r0, [ip], #1009	; 0x3f1
    4bac:	91020000 	mrsls	r0, (UNDEF: 2)
    4bb0:	205e1574 	subscs	r1, lr, r4, ror r5
    4bb4:	f1010000 	setend	le
    4bb8:	0000a203 	andeq	sl, r0, r3, lsl #4
    4bbc:	72910200 	addsvc	r0, r1, #0, 4
    4bc0:	0005b815 	andeq	fp, r5, r5, lsl r8
    4bc4:	03f10100 	mvnseq	r0, #0, 2
    4bc8:	0000012d 	andeq	r0, r0, sp, lsr #2
    4bcc:	00719102 	rsbseq	r9, r1, r2, lsl #2
    4bd0:	001ec514 	andseq	ip, lr, r4, lsl r5
    4bd4:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    4bd8:	0800489c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr}
    4bdc:	00000060 	andeq	r0, r0, r0, rrx
    4be0:	09e29c01 	stmibeq	r2!, {r0, sl, fp, ip, pc}^
    4be4:	06150000 	ldreq	r0, [r5], -r0
    4be8:	01000021 	tsteq	r0, r1, lsr #32
    4bec:	04ec045d 	strbteq	r0, [ip], #1117	; 0x45d
    4bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    4bf4:	2015156c 	andscs	r1, r5, ip, ror #10
    4bf8:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4bfc:	00009704 	andeq	r9, r0, r4, lsl #14
    4c00:	6b910200 	blvs	fe445408 <_estack+0xde415408>
    4c04:	0005b815 	andeq	fp, r5, r5, lsl r8
    4c08:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    4c0c:	0000012d 	andeq	r0, r0, sp, lsr #2
    4c10:	166a9102 	strbtne	r9, [sl], -r2, lsl #2
    4c14:	000013c1 	andeq	r1, r0, r1, asr #7
    4c18:	a2045f01 	andge	r5, r4, #1, 30
    4c1c:	02000000 	andeq	r0, r0, #0
    4c20:	dc167691 	ldcle	6, cr7, [r6], {145}	; 0x91
    4c24:	01000014 	tsteq	r0, r4, lsl r0
    4c28:	00a2045f 	adceq	r0, r2, pc, asr r4
    4c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c30:	8a180074 	bhi	604e08 <_Min_Stack_Size+0x604a08>
    4c34:	0100001f 	tsteq	r0, pc, lsl r0
    4c38:	00ff0489 	rscseq	r0, pc, r9, lsl #9
    4c3c:	48fc0000 	ldmmi	ip!, {}^	; <UNPREDICTABLE>
    4c40:	00380800 	eorseq	r0, r8, r0, lsl #16
    4c44:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c48:	00000a2a 	andeq	r0, r0, sl, lsr #20
    4c4c:	00210615 	eoreq	r0, r1, r5, lsl r6
    4c50:	04890100 	streq	r0, [r9], #256	; 0x100
    4c54:	000004ec 	andeq	r0, r0, ip, ror #9
    4c58:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4c5c:	00002008 	andeq	r2, r0, r8
    4c60:	a2048901 	andge	r8, r4, #16384	; 0x4000
    4c64:	02000000 	andeq	r0, r0, #0
    4c68:	a3166a91 	tstge	r6, #593920	; 0x91000
    4c6c:	01000008 	tsteq	r0, r8
    4c70:	00ff048b 	rscseq	r0, pc, fp, lsl #9
    4c74:	91020000 	mrsls	r0, (UNDEF: 2)
    4c78:	36140077 			; <UNDEFINED> instruction: 0x36140077
    4c7c:	01000021 	tsteq	r0, r1, lsr #32
    4c80:	493404b2 	ldmdbmi	r4!, {r1, r4, r5, r7, sl}
    4c84:	00200800 	eoreq	r0, r0, r0, lsl #16
    4c88:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c8c:	00000a5f 	andeq	r0, r0, pc, asr sl
    4c90:	00210615 	eoreq	r0, r1, r5, lsl r6
    4c94:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    4c98:	000004ec 	andeq	r0, r0, ip, ror #9
    4c9c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4ca0:	00002008 	andeq	r2, r0, r8
    4ca4:	a204b201 	andge	fp, r4, #268435456	; 0x10000000
    4ca8:	02000000 	andeq	r0, r0, #0
    4cac:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    4cb0:	00001f49 	andeq	r1, r0, r9, asr #30
    4cb4:	0b04cb01 	bleq	1378c0 <_Min_Stack_Size+0x1374c0>
    4cb8:	54000001 	strpl	r0, [r0], #-1
    4cbc:	76080049 	strvc	r0, [r8], -r9, asr #32
    4cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    4cc4:	000ad49c 	muleq	sl, ip, r4
    4cc8:	21061500 	tstcs	r6, r0, lsl #10
    4ccc:	cb010000 	blgt	44cd4 <_Min_Stack_Size+0x448d4>
    4cd0:	0004ec04 	andeq	lr, r4, r4, lsl #24
    4cd4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4cd8:	00201515 	eoreq	r1, r0, r5, lsl r5
    4cdc:	04cb0100 	strbeq	r0, [fp], #256	; 0x100
    4ce0:	00000097 	muleq	r0, r7, r0
    4ce4:	166b9102 	strbtne	r9, [fp], -r2, lsl #2
    4ce8:	000008a3 	andeq	r0, r0, r3, lsr #17
    4cec:	0b04cd01 	bleq	1380f8 <_Min_Stack_Size+0x137cf8>
    4cf0:	02000001 	andeq	r0, r0, #1
    4cf4:	c1167791 			; <UNDEFINED> instruction: 0xc1167791
    4cf8:	01000013 	tsteq	r0, r3, lsl r0
    4cfc:	00a204ce 	adceq	r0, r2, lr, asr #9
    4d00:	91020000 	mrsls	r0, (UNDEF: 2)
    4d04:	14dc1674 	ldrbne	r1, [ip], #1652	; 0x674
    4d08:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    4d0c:	0000a204 	andeq	sl, r0, r4, lsl #4
    4d10:	72910200 	addsvc	r0, r1, #0, 4
    4d14:	001a3e16 	andseq	r3, sl, r6, lsl lr
    4d18:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    4d1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d20:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4d24:	0020b014 	eoreq	fp, r0, r4, lsl r0
    4d28:	05020100 	streq	r0, [r2, #-256]	; 0x100
    4d2c:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
    4d30:	00000032 	andeq	r0, r0, r2, lsr r0
    4d34:	0b189c01 	bleq	62bd40 <_Min_Stack_Size+0x62b940>
    4d38:	06150000 	ldreq	r0, [r5], -r0
    4d3c:	01000021 	tsteq	r0, r1, lsr #32
    4d40:	04ec0502 	strbteq	r0, [ip], #1282	; 0x502
    4d44:	91020000 	mrsls	r0, (UNDEF: 2)
    4d48:	2015156c 	andscs	r1, r5, ip, ror #10
    4d4c:	02010000 	andeq	r0, r1, #0
    4d50:	00009705 	andeq	r9, r0, r5, lsl #14
    4d54:	6b910200 	blvs	fe44555c <_estack+0xde41555c>
    4d58:	0013c116 	andseq	ip, r3, r6, lsl r1
    4d5c:	05040100 	streq	r0, [r4, #-256]	; 0x100
    4d60:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d64:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4d68:	00015619 	andeq	r5, r1, r9, lsl r6
    4d6c:	06a70600 	strteq	r0, [r7], r0, lsl #12
    4d70:	000000e4 	andeq	r0, r0, r4, ror #1
    4d74:	00033800 	andeq	r3, r3, r0, lsl #16
    4d78:	1a000400 	bne	5d80 <_Min_Stack_Size+0x5980>
    4d7c:	0400000e 	streq	r0, [r0], #-14
    4d80:	00002101 	andeq	r2, r0, r1, lsl #2
    4d84:	238e0100 	orrcs	r0, lr, #0, 2
    4d88:	010c0000 	mrseq	r0, (UNDEF: 12)
    4d8c:	06800000 	streq	r0, [r0], r0
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	224d0000 	subcs	r0, sp, #0
    4d98:	01020000 	mrseq	r0, (UNDEF: 2)
    4d9c:	00014506 	andeq	r4, r1, r6, lsl #10
    4da0:	08010200 	stmdaeq	r1, {r9}
    4da4:	00000143 	andeq	r0, r0, r3, asr #2
    4da8:	7f050202 	svcvc	0x00050202
    4dac:	02000001 	andeq	r0, r0, #1
    4db0:	000e0702 	andeq	r0, lr, r2, lsl #14
    4db4:	6f030000 	svcvs	0x00030000
    4db8:	02000001 	andeq	r0, r0, #1
    4dbc:	00004c3f 	andeq	r4, r0, pc, lsr ip
    4dc0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    4dc4:	00000005 	andeq	r0, r0, r5
    4dc8:	0004f403 	andeq	pc, r4, r3, lsl #8
    4dcc:	5e410200 	cdppl	2, 4, cr0, cr1, cr0, {0}
    4dd0:	02000000 	andeq	r0, r0, #0
    4dd4:	01260704 	teqeq	r6, r4, lsl #14
    4dd8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4ddc:	00000005 	andeq	r0, r0, r5
    4de0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4de4:	00000121 	andeq	r0, r0, r1, lsr #2
    4de8:	69050404 	stmdbvs	r5, {r2, sl}
    4dec:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4df0:	012b0704 	teqeq	fp, r4, lsl #14
    4df4:	71030000 	mrsvc	r0, (UNDEF: 3)
    4df8:	03000001 	movweq	r0, #1
    4dfc:	00004141 	andeq	r4, r0, r1, asr #2
    4e00:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
    4e04:	42030000 	andmi	r0, r3, #0
    4e08:	00000053 	andeq	r0, r0, r3, asr r0
    4e0c:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    4e10:	05000001 	streq	r0, [r0, #-1]
    4e14:	0000008c 	andeq	r0, r0, ip, lsl #1
    4e18:	00008105 	andeq	r8, r0, r5, lsl #2
    4e1c:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4e20:	00be01f7 	ldrshteq	r0, [lr], r7
    4e24:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    4e28:	00000007 	andeq	r0, r0, r7
    4e2c:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    4e30:	09000100 	stmdbeq	r0, {r8}
    4e34:	00001dc8 	andeq	r1, r0, r8, asr #27
    4e38:	a801f704 	stmdage	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    4e3c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4e40:	00004d16 	andeq	r4, r0, r6, lsl sp
    4e44:	a801f704 	stmdage	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    4e48:	06000000 	streq	r0, [r0], -r0
    4e4c:	01f90401 	mvnseq	r0, r1, lsl #8
    4e50:	000000ec 	andeq	r0, r0, ip, ror #1
    4e54:	0005c607 	andeq	ip, r5, r7, lsl #12
    4e58:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    4e5c:	01000007 	tsteq	r0, r7
    4e60:	06ef0900 	strbteq	r0, [pc], r0, lsl #18
    4e64:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    4e68:	0000d601 	andeq	sp, r0, r1, lsl #12
    4e6c:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
    4e70:	014f0330 	cmpeq	pc, r0, lsr r3	; <UNPREDICTABLE>
    4e74:	490b0000 	stmdbmi	fp, {}	; <UNPREDICTABLE>
    4e78:	0400524d 	streq	r5, [r0], #-589	; 0x24d
    4e7c:	009e0332 	addseq	r0, lr, r2, lsr r3
    4e80:	0b000000 	bleq	4e88 <_Min_Stack_Size+0x4a88>
    4e84:	00524d45 	subseq	r4, r2, r5, asr #26
    4e88:	9e033304 	cdpls	3, 0, cr3, cr3, cr4, {0}
    4e8c:	04000000 	streq	r0, [r0], #-0
    4e90:	0022ef0c 	eoreq	lr, r2, ip, lsl #30
    4e94:	03340400 	teqeq	r4, #0, 8
    4e98:	0000009e 	muleq	r0, lr, r0
    4e9c:	23df0c08 	bicscs	r0, pc, #8, 24	; 0x800
    4ea0:	35040000 	strcc	r0, [r4, #-0]
    4ea4:	00009e03 	andeq	r9, r0, r3, lsl #28
    4ea8:	f80c0c00 			; <UNDEFINED> instruction: 0xf80c0c00
    4eac:	04000023 	streq	r0, [r0], #-35	; 0x23
    4eb0:	009e0336 	addseq	r0, lr, r6, lsr r3
    4eb4:	0b100000 	bleq	404ebc <_Min_Stack_Size+0x404abc>
    4eb8:	04005250 	streq	r5, [r0], #-592	; 0x250
    4ebc:	009e0337 	addseq	r0, lr, r7, lsr r3
    4ec0:	00140000 	andseq	r0, r4, r0
    4ec4:	0022e209 	eoreq	lr, r2, r9, lsl #4
    4ec8:	03380400 	teqeq	r8, #0, 8
    4ecc:	000000f8 	strdeq	r0, [r0], -r8
    4ed0:	3705010d 	strcc	r0, [r5, -sp, lsl #2]
    4ed4:	00000170 	andeq	r0, r0, r0, ror r1
    4ed8:	0022ae07 	eoreq	sl, r2, r7, lsl #28
    4edc:	64070000 	strvs	r0, [r7], #-0
    4ee0:	04000022 	streq	r0, [r0], #-34	; 0x22
    4ee4:	22d10300 	sbcscs	r0, r1, #0, 6
    4ee8:	3a050000 	bcc	144ef0 <_Min_Stack_Size+0x144af0>
    4eec:	0000015b 	andeq	r0, r0, fp, asr r1
    4ef0:	4305010d 	movwmi	r0, #20749	; 0x510d
    4ef4:	00000196 	muleq	r0, r6, r1
    4ef8:	0022f407 	eoreq	pc, r2, r7, lsl #8
    4efc:	79070800 	stmdbvc	r7, {fp}
    4f00:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    4f04:	00230807 	eoreq	r0, r3, r7, lsl #16
    4f08:	03001000 	movweq	r1, #0
    4f0c:	000023e4 	andeq	r2, r0, r4, ror #7
    4f10:	017b4705 	cmneq	fp, r5, lsl #14
    4f14:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    4f18:	01da5005 	bicseq	r5, sl, r5
    4f1c:	360f0000 	strcc	r0, [pc], -r0
    4f20:	05000022 	streq	r0, [r0, #-34]	; 0x22
    4f24:	00008c52 	andeq	r8, r0, r2, asr ip
    4f28:	400f0000 	andmi	r0, pc, r0
    4f2c:	05000022 	streq	r0, [r0, #-34]	; 0x22
    4f30:	00017055 	andeq	r7, r1, r5, asr r0
    4f34:	570f0400 	strpl	r0, [pc, -r0, lsl #8]
    4f38:	05000022 	streq	r0, [r0, #-34]	; 0x22
    4f3c:	00019658 	andeq	r9, r1, r8, asr r6
    4f40:	4a0f0500 	bmi	3c6348 <_Min_Stack_Size+0x3c5f48>
    4f44:	05000022 	streq	r0, [r0, #-34]	; 0x22
    4f48:	0000ec5b 	andeq	lr, r0, fp, asr ip
    4f4c:	03000600 	movweq	r0, #1536	; 0x600
    4f50:	0000228d 	andeq	r2, r0, sp, lsl #5
    4f54:	01a15d05 			; <UNDEFINED> instruction: 0x01a15d05
    4f58:	fe100000 	cdp2	0, 1, cr0, cr0, cr0, {0}
    4f5c:	01000023 	tsteq	r0, r3, lsr #32
    4f60:	004a006e 	subeq	r0, sl, lr, rrx
    4f64:	00003408 	andeq	r3, r0, r8, lsl #8
    4f68:	119c0100 	orrsne	r0, ip, r0, lsl #2
    4f6c:	00002324 	andeq	r2, r0, r4, lsr #6
    4f70:	4a347e01 	bmi	d2477c <_Min_Stack_Size+0xd2437c>
    4f74:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
    4f78:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f7c:	00000228 	andeq	r0, r0, r8, lsr #4
    4f80:	00229e12 	eoreq	r9, r2, r2, lsl lr
    4f84:	287e0100 	ldmdacs	lr!, {r8}^
    4f88:	02000002 	andeq	r0, r0, #2
    4f8c:	74136c91 	ldrvc	r6, [r3], #-3217	; 0xc91
    4f90:	0100706d 	tsteq	r0, sp, rrx
    4f94:	00008c80 	andeq	r8, r0, r0, lsl #25
    4f98:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4f9c:	da041400 	ble	109fa4 <_Min_Stack_Size+0x109ba4>
    4fa0:	11000001 	tstne	r0, r1
    4fa4:	00002341 	andeq	r2, r0, r1, asr #6
    4fa8:	4b10b601 	blmi	4327b4 <_Min_Stack_Size+0x4323b4>
    4fac:	002a0800 	eoreq	r0, sl, r0, lsl #16
    4fb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fb4:	00000252 	andeq	r0, r0, r2, asr r2
    4fb8:	00229e12 	eoreq	r9, r2, r2, lsl lr
    4fbc:	28b60100 	ldmcs	r6!, {r8}
    4fc0:	02000002 	andeq	r0, r0, #2
    4fc4:	11007491 			; <UNDEFINED> instruction: 0x11007491
    4fc8:	00002274 	andeq	r2, r0, r4, ror r2
    4fcc:	4b3cc501 	blmi	f363d8 <_Min_Stack_Size+0xf35fd8>
    4fd0:	00240800 	eoreq	r0, r4, r0, lsl #16
    4fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fd8:	00000276 	andeq	r0, r0, r6, ror r2
    4fdc:	00223612 	eoreq	r3, r2, r2, lsl r6
    4fe0:	8cc50100 	stfhie	f0, [r5], {0}
    4fe4:	02000000 	andeq	r0, r0, #0
    4fe8:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    4fec:	0000232e 	andeq	r2, r0, lr, lsr #6
    4ff0:	00bee301 	adcseq	lr, lr, r1, lsl #6
    4ff4:	4b600000 	blmi	1804ffc <_Min_Stack_Size+0x1804bfc>
    4ff8:	00340800 	eorseq	r0, r4, r0, lsl #16
    4ffc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5000:	000002ac 	andeq	r0, r0, ip, lsr #5
    5004:	00223612 	eoreq	r3, r2, r2, lsl r6
    5008:	8ce30100 	stfhie	f0, [r3]
    500c:	02000000 	andeq	r0, r0, #0
    5010:	a3166c91 	tstge	r6, #37120	; 0x9100
    5014:	01000008 	tsteq	r0, r8
    5018:	0000bee5 	andeq	fp, r0, r5, ror #29
    501c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5020:	22c21100 	sbccs	r1, r2, #0, 2
    5024:	fa010000 	blx	4502c <_Min_Stack_Size+0x44c2c>
    5028:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
    502c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5030:	02d09c01 	sbcseq	r9, r0, #256	; 0x100
    5034:	36120000 	ldrcc	r0, [r2], -r0
    5038:	01000022 	tsteq	r0, r2, lsr #32
    503c:	00008cfa 	strdeq	r8, [r0], -sl
    5040:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5044:	23511700 	cmpcs	r1, #0, 14
    5048:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    504c:	0000ca01 	andeq	ip, r0, r1, lsl #20
    5050:	004bb000 	subeq	fp, fp, r0
    5054:	00003408 	andeq	r3, r0, r8, lsl #8
    5058:	099c0100 	ldmibeq	ip, {r8}
    505c:	18000003 	stmdane	r0, {r0, r1}
    5060:	00002236 	andeq	r2, r0, r6, lsr r2
    5064:	8c010801 	stchi	8, cr0, [r1], {1}
    5068:	02000000 	andeq	r0, r0, #0
    506c:	a3196c91 	tstge	r9, #37120	; 0x9100
    5070:	01000008 	tsteq	r0, r8
    5074:	00be010a 	adcseq	r0, lr, sl, lsl #2
    5078:	91020000 	mrsls	r0, (UNDEF: 2)
    507c:	621a0077 	andsvs	r0, sl, #119	; 0x77
    5080:	01000023 	tsteq	r0, r3, lsr #32
    5084:	4be40120 	blmi	ff90550c <_estack+0xdf8d550c>
    5088:	001c0800 	andseq	r0, ip, r0, lsl #16
    508c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5090:	0000032f 	andeq	r0, r0, pc, lsr #6
    5094:	00223618 	eoreq	r3, r2, r8, lsl r6
    5098:	01200100 	teqeq	r0, r0, lsl #2
    509c:	0000008c 	andeq	r0, r0, ip, lsl #1
    50a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    50a4:	0001561b 	andeq	r5, r1, fp, lsl r6
    50a8:	06a70600 	strteq	r0, [r7], r0, lsl #12
    50ac:	000000a3 	andeq	r0, r0, r3, lsr #1
    50b0:	00081900 	andeq	r1, r8, r0, lsl #18
    50b4:	c1000400 	tstgt	r0, r0, lsl #8
    50b8:	0400000f 	streq	r0, [r0], #-15
    50bc:	00002101 	andeq	r2, r0, r1, lsl #2
    50c0:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    50c4:	010c0000 	mrseq	r0, (UNDEF: 12)
    50c8:	06c80000 	strbeq	r0, [r8], r0
    50cc:	00000000 	andeq	r0, r0, r0
    50d0:	24a00000 	strtcs	r0, [r0], #0
    50d4:	01020000 	mrseq	r0, (UNDEF: 2)
    50d8:	00014506 	andeq	r4, r1, r6, lsl #10
    50dc:	08010200 	stmdaeq	r1, {r9}
    50e0:	00000143 	andeq	r0, r0, r3, asr #2
    50e4:	7f050202 	svcvc	0x00050202
    50e8:	02000001 	andeq	r0, r0, #1
    50ec:	000e0702 	andeq	r0, lr, r2, lsl #14
    50f0:	6f030000 	svcvs	0x00030000
    50f4:	02000001 	andeq	r0, r0, #1
    50f8:	00004c3f 	andeq	r4, r0, pc, lsr ip
    50fc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    5100:	00000005 	andeq	r0, r0, r5
    5104:	0004f403 	andeq	pc, r4, r3, lsl #8
    5108:	5e410200 	cdppl	2, 4, cr0, cr1, cr0, {0}
    510c:	02000000 	andeq	r0, r0, #0
    5110:	01260704 	teqeq	r6, r4, lsl #14
    5114:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5118:	00000005 	andeq	r0, r0, r5
    511c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5120:	00000121 	andeq	r0, r0, r1, lsr #2
    5124:	69050404 	stmdbvs	r5, {r2, sl}
    5128:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    512c:	012b0704 	teqeq	fp, r4, lsl #14
    5130:	71030000 	mrsvc	r0, (UNDEF: 3)
    5134:	03000001 	movweq	r0, #1
    5138:	00004141 	andeq	r4, r0, r1, asr #2
    513c:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
    5140:	42030000 	andmi	r0, r3, #0
    5144:	00000053 	andeq	r0, r0, r3, asr r0
    5148:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    514c:	05000001 	streq	r0, [r0, #-1]
    5150:	0000008c 	andeq	r0, r0, ip, lsl #1
    5154:	00008105 	andeq	r8, r0, r5, lsl #2
    5158:	04010600 	streq	r0, [r1], #-1536	; 0x600
    515c:	00be01f7 	ldrshteq	r0, [lr], r7
    5160:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    5164:	00000007 	andeq	r0, r0, r7
    5168:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    516c:	09000100 	stmdbeq	r0, {r8}
    5170:	00001dc8 	andeq	r1, r0, r8, asr #27
    5174:	a801f704 	stmdage	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    5178:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    517c:	00004d16 	andeq	r4, r0, r6, lsl sp
    5180:	a801f704 	stmdage	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    5184:	06000000 	streq	r0, [r0], -r0
    5188:	01f90401 	mvnseq	r0, r1, lsl #8
    518c:	000000ec 	andeq	r0, r0, ip, ror #1
    5190:	0005c607 	andeq	ip, r5, r7, lsl #12
    5194:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    5198:	01000007 	tsteq	r0, r7
    519c:	06ef0900 	strbteq	r0, [pc], r0, lsl #18
    51a0:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    51a4:	0000d601 	andeq	sp, r0, r1, lsl #12
    51a8:	0c000a00 	stceq	10, cr0, [r0], {-0}
    51ac:	2f02c704 	svccs	0x0002c704
    51b0:	0b000002 	bleq	51c0 <_Min_Stack_Size+0x4dc0>
    51b4:	04005243 	streq	r5, [r0], #-579	; 0x243
    51b8:	009e02c9 	addseq	r0, lr, r9, asr #5
    51bc:	0b000000 	bleq	51c4 <_Min_Stack_Size+0x4dc4>
    51c0:	00525349 	subseq	r5, r2, r9, asr #6
    51c4:	9e02ca04 	vmlals.f32	s24, s4, s8
    51c8:	04000000 	streq	r0, [r0], #-0
    51cc:	001c020c 	andseq	r0, ip, ip, lsl #4
    51d0:	02cb0400 	sbceq	r0, fp, #0, 8
    51d4:	0000009e 	muleq	r0, lr, r0
    51d8:	26080c08 	strcs	r0, [r8], -r8, lsl #24
    51dc:	cc040000 	stcgt	0, cr0, [r4], {-0}
    51e0:	00009e02 	andeq	r9, r0, r2, lsl #28
    51e4:	700c0c00 	andvc	r0, ip, r0, lsl #24
    51e8:	04000026 	streq	r0, [r0], #-38	; 0x26
    51ec:	009e02cd 	addseq	r0, lr, sp, asr #5
    51f0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    51f4:	000028cf 	andeq	r2, r0, pc, asr #17
    51f8:	9e02ce04 	cdpls	14, 0, cr12, cr2, cr4, {0}
    51fc:	14000000 	strne	r0, [r0], #-0
    5200:	0029180c 	eoreq	r1, r9, ip, lsl #16
    5204:	02cf0400 	sbceq	r0, pc, #0, 8
    5208:	0000009e 	muleq	r0, lr, r0
    520c:	28420c18 	stmdacs	r2, {r3, r4, sl, fp}^
    5210:	d0040000 	andle	r0, r4, r0
    5214:	00009e02 	andeq	r9, r0, r2, lsl #28
    5218:	f20c1c00 			; <UNDEFINED> instruction: 0xf20c1c00
    521c:	04000025 	streq	r0, [r0], #-37	; 0x25
    5220:	009e02d1 			; <UNDEFINED> instruction: 0x009e02d1
    5224:	0c200000 	stceq	0, cr0, [r0], #-0
    5228:	000027a7 	andeq	r2, r0, r7, lsr #15
    522c:	9e02d204 	cdpls	2, 0, cr13, cr2, cr4, {0}
    5230:	24000000 	strcs	r0, [r0], #-0
    5234:	00274d0c 	eoreq	r4, r7, ip, lsl #26
    5238:	02d30400 	sbcseq	r0, r3, #0, 8
    523c:	0000009e 	muleq	r0, lr, r0
    5240:	29740c28 	ldmdbcs	r4!, {r3, r5, sl, fp}^
    5244:	d4040000 	strle	r0, [r4], #-0
    5248:	00009e02 	andeq	r9, r0, r2, lsl #28
    524c:	340c2c00 	strcc	r2, [ip], #-3072	; 0xc00
    5250:	04000025 	streq	r0, [r0], #-37	; 0x25
    5254:	009e02d5 			; <UNDEFINED> instruction: 0x009e02d5
    5258:	0c300000 	ldceq	0, cr0, [r0], #-0
    525c:	0000278d 	andeq	r2, r0, sp, lsl #15
    5260:	9e02d604 	cfmadd32ls	mvax0, mvfx13, mvfx2, mvfx4
    5264:	34000000 	strcc	r0, [r0], #-0
    5268:	0027470c 	eoreq	r4, r7, ip, lsl #14
    526c:	02d70400 	sbcseq	r0, r7, #0, 8
    5270:	0000009e 	muleq	r0, lr, r0
    5274:	26e60c38 			; <UNDEFINED> instruction: 0x26e60c38
    5278:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    527c:	00009e02 	andeq	r9, r0, r2, lsl #28
    5280:	4f0b3c00 	svcmi	0x000b3c00
    5284:	0400524f 	streq	r5, [r0], #-591	; 0x24f
    5288:	009e02d9 			; <UNDEFINED> instruction: 0x009e02d9
    528c:	0b400000 	bleq	1005294 <_Min_Stack_Size+0x1004e94>
    5290:	00524c4e 	subseq	r4, r2, lr, asr #24
    5294:	9e02da04 	vmlals.f32	s26, s4, s8
    5298:	44000000 	strmi	r0, [r0], #-0
    529c:	52574c0b 	subspl	r4, r7, #2816	; 0xb00
    52a0:	02db0400 	sbcseq	r0, fp, #0, 8
    52a4:	0000009e 	muleq	r0, lr, r0
    52a8:	253b0c48 	ldrcs	r0, [fp, #-3144]!	; 0xc48
    52ac:	dc040000 	stcle	0, cr0, [r4], {-0}
    52b0:	00009e02 	andeq	r9, r0, r2, lsl #28
    52b4:	d70c4c00 	strle	r4, [ip, -r0, lsl #24]
    52b8:	04000015 	streq	r0, [r0], #-21
    52bc:	022f02dd 	eoreq	r0, pc, #-805306355	; 0xd000000d
    52c0:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    52c4:	000024a1 	andeq	r2, r0, r1, lsr #9
    52c8:	4f02de04 	svcmi	0x0002de04
    52cc:	00000002 	andeq	r0, r0, r2
    52d0:	25cb0d04 	strbcs	r0, [fp, #3332]	; 0xd04
    52d4:	df040000 	svcle	0x00040000
    52d8:	00025402 	andeq	r5, r2, r2, lsl #8
    52dc:	00080000 	andeq	r0, r8, r0
    52e0:	00008c0e 	andeq	r8, r0, lr, lsl #24
    52e4:	00023f00 	andeq	r3, r2, r0, lsl #30
    52e8:	00970f00 	addseq	r0, r7, r0, lsl #30
    52ec:	00eb0000 	rsceq	r0, fp, r0
    52f0:	00008c0e 	andeq	r8, r0, lr, lsl #24
    52f4:	00024f00 	andeq	r4, r2, r0, lsl #30
    52f8:	00970f00 	addseq	r0, r7, r0, lsl #30
    52fc:	00ff0000 	rscseq	r0, pc, r0
    5300:	00023f05 	andeq	r3, r2, r5, lsl #30
    5304:	023f0500 	eorseq	r0, pc, #0, 10
    5308:	d5090000 	strle	r0, [r9, #-0]
    530c:	04000028 	streq	r0, [r0], #-40	; 0x28
    5310:	00f802e0 	rscseq	r0, r8, r0, ror #5
    5314:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    5318:	02e63005 	rsceq	r3, r6, #5
    531c:	94110000 	ldrls	r0, [r1], #-0
    5320:	05000025 	streq	r0, [r0, #-37]	; 0x25
    5324:	00008c32 	andeq	r8, r0, r2, lsr ip
    5328:	25110000 	ldrcs	r0, [r1, #-0]
    532c:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5330:	00008c35 	andeq	r8, r0, r5, lsr ip
    5334:	45110400 	ldrmi	r0, [r1, #-1024]	; 0x400
    5338:	05000024 	streq	r0, [r0, #-36]	; 0x24
    533c:	00008c38 	andeq	r8, r0, r8, lsr ip
    5340:	9d110800 	ldcls	8, cr0, [r1, #-0]
    5344:	05000028 	streq	r0, [r0, #-40]	; 0x28
    5348:	00008c40 	andeq	r8, r0, r0, asr #24
    534c:	7f110c00 	svcvc	0x00110c00
    5350:	05000028 	streq	r0, [r0, #-40]	; 0x28
    5354:	00008c48 	andeq	r8, r0, r8, asr #24
    5358:	42111000 	andsmi	r1, r1, #0
    535c:	05000029 	streq	r0, [r0, #-41]	; 0x29
    5360:	00008c50 	andeq	r8, r0, r0, asr ip
    5364:	5a111400 	bpl	44a36c <_Min_Stack_Size+0x449f6c>
    5368:	05000028 	streq	r0, [r0, #-40]	; 0x28
    536c:	00008c56 	andeq	r8, r0, r6, asr ip
    5370:	1d111800 	ldcne	8, cr1, [r1, #-0]
    5374:	05000029 	streq	r0, [r0, #-41]	; 0x29
    5378:	00008c59 	andeq	r8, r0, r9, asr ip
    537c:	4c111c00 	ldcmi	12, cr1, [r1], {-0}
    5380:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5384:	00008c5c 	andeq	r8, r0, ip, asr ip
    5388:	72112000 	andsvc	r2, r1, #0
    538c:	05000025 	streq	r0, [r0, #-37]	; 0x25
    5390:	00008c5f 	andeq	r8, r0, pc, asr ip
    5394:	03002400 	movweq	r2, #1024	; 0x400
    5398:	00002735 	andeq	r2, r0, r5, lsr r7
    539c:	02656105 	rsbeq	r6, r5, #1073741825	; 0x40000001
    53a0:	2c100000 	ldccs	0, cr0, [r0], {-0}
    53a4:	037e6505 	cmneq	lr, #20971520	; 0x1400000
    53a8:	06110000 	ldreq	r0, [r1], -r0
    53ac:	05000025 	streq	r0, [r0, #-37]	; 0x25
    53b0:	00008c67 	andeq	r8, r0, r7, ror #24
    53b4:	11110000 	tstne	r1, r0
    53b8:	05000025 	streq	r0, [r0, #-37]	; 0x25
    53bc:	00008c6a 	andeq	r8, r0, sl, ror #24
    53c0:	af110400 	svcge	0x00110400
    53c4:	05000028 	streq	r0, [r0, #-40]	; 0x28
    53c8:	00008c6d 	andeq	r8, r0, sp, ror #24
    53cc:	a8110800 	ldmdage	r1, {fp}
    53d0:	05000024 	streq	r0, [r0, #-36]	; 0x24
    53d4:	00008c70 	andeq	r8, r0, r0, ror ip
    53d8:	1b110c00 	blne	4483e0 <_Min_Stack_Size+0x447fe0>
    53dc:	05000025 	streq	r0, [r0, #-37]	; 0x25
    53e0:	00008c73 	andeq	r8, r0, r3, ror ip
    53e4:	ed111000 	ldc	0, cr1, [r1, #-0]
    53e8:	05000028 	streq	r0, [r0, #-40]	; 0x28
    53ec:	00008c76 	andeq	r8, r0, r6, ror ip
    53f0:	18111400 	ldmdane	r1, {sl, ip}
    53f4:	05000024 	streq	r0, [r0, #-36]	; 0x24
    53f8:	00008c79 	andeq	r8, r0, r9, ror ip
    53fc:	85111800 	ldrhi	r1, [r1, #-2048]	; 0x800
    5400:	05000025 	streq	r0, [r0, #-37]	; 0x25
    5404:	00008c7c 	andeq	r8, r0, ip, ror ip
    5408:	4a111c00 	bmi	44c410 <_Min_Stack_Size+0x44c010>
    540c:	05000028 	streq	r0, [r0, #-40]	; 0x28
    5410:	00008c7f 	andeq	r8, r0, pc, ror ip
    5414:	56112000 	ldrpl	r2, [r1], -r0
    5418:	05000024 	streq	r0, [r0, #-36]	; 0x24
    541c:	00008c82 	andeq	r8, r0, r2, lsl #25
    5420:	6e112400 	cfmulsvs	mvf2, mvf1, mvf0
    5424:	05000029 	streq	r0, [r0, #-41]	; 0x29
    5428:	00008c85 	andeq	r8, r0, r5, lsl #25
    542c:	03002800 	movweq	r2, #2048	; 0x800
    5430:	00002430 	andeq	r2, r0, r0, lsr r4
    5434:	02f18705 	rscseq	r8, r1, #1310720	; 0x140000
    5438:	2c100000 	ldccs	0, cr0, [r0], {-0}
    543c:	04168a05 	ldreq	r8, [r6], #-2565	; 0xa05
    5440:	54110000 	ldrpl	r0, [r1], #-0
    5444:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5448:	00008c8c 	andeq	r8, r0, ip, lsl #25
    544c:	e3110000 	tst	r1, #0
    5450:	05000028 	streq	r0, [r0, #-40]	; 0x28
    5454:	00008c8f 	andeq	r8, r0, pc, lsl #25
    5458:	11110400 	tstne	r1, r0, lsl #8
    545c:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5460:	00008c92 	muleq	r0, r2, ip
    5464:	90110800 	andsls	r0, r1, r0, lsl #16
    5468:	05000024 	streq	r0, [r0, #-36]	; 0x24
    546c:	00008c95 	muleq	r0, r5, ip
    5470:	94110c00 	ldrls	r0, [r1], #-3072	; 0xc00
    5474:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5478:	00008c98 	muleq	r0, r8, ip
    547c:	0e111000 	cdpeq	0, 1, cr1, cr1, cr0, {0}
    5480:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5484:	00008c9b 	muleq	r0, fp, ip
    5488:	41111400 	tstmi	r1, r0, lsl #8
    548c:	05000025 	streq	r0, [r0, #-37]	; 0x25
    5490:	00008c9e 	muleq	r0, lr, ip
    5494:	5f111800 	svcpl	0x00111800
    5498:	05000027 	streq	r0, [r0, #-39]	; 0x27
    549c:	00008ca1 	andeq	r8, r0, r1, lsr #25
    54a0:	62111c00 	andsvs	r1, r1, #0, 24
    54a4:	05000025 	streq	r0, [r0, #-37]	; 0x25
    54a8:	00008ca4 	andeq	r8, r0, r4, lsr #25
    54ac:	54112000 	ldrpl	r2, [r1], #-0
    54b0:	05000029 	streq	r0, [r0, #-41]	; 0x29
    54b4:	00008ca7 	andeq	r8, r0, r7, lsr #25
    54b8:	2e112400 	cfmulscs	mvf2, mvf1, mvf0
    54bc:	05000025 	streq	r0, [r0, #-37]	; 0x25
    54c0:	00008caa 	andeq	r8, r0, sl, lsr #25
    54c4:	03002800 	movweq	r2, #2048	; 0x800
    54c8:	000028ba 			; <UNDEFINED> instruction: 0x000028ba
    54cc:	0389ac05 	orreq	sl, r9, #1280	; 0x500
    54d0:	ad120000 	ldcge	0, cr0, [r2, #-0]
    54d4:	01000025 	tsteq	r0, r5, lsr #32
    54d8:	004c0069 	subeq	r0, ip, r9, rrx
    54dc:	00001a08 	andeq	r1, r0, r8, lsl #20
    54e0:	139c0100 	orrsne	r0, ip, #0, 2
    54e4:	0000271c 	andeq	r2, r0, ip, lsl r7
    54e8:	4c1c7a01 	ldcmi	10, cr7, [ip], {1}
    54ec:	015c0800 	cmpeq	ip, r0, lsl #16
    54f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    54f4:	0000048e 	andeq	r0, r0, lr, lsl #9
    54f8:	0025ba14 	eoreq	fp, r5, r4, lsl sl
    54fc:	8e7a0100 	rpwhie	f0, f2, f0
    5500:	02000004 	andeq	r0, r0, #4
    5504:	59156491 	ldmdbpl	r5, {r0, r4, r7, sl, sp, lr}
    5508:	01000025 	tsteq	r0, r5, lsr #32
    550c:	00008c7d 	andeq	r8, r0, sp, ror ip
    5510:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5514:	00287815 	eoreq	r7, r8, r5, lsl r8
    5518:	8c7e0100 	ldfhie	f0, [lr], #-0
    551c:	02000000 	andeq	r0, r0, #0
    5520:	75157091 	ldrvc	r7, [r5, #-145]	; 0x91
    5524:	01000026 	tsteq	r0, r6, lsr #32
    5528:	00008c7f 	andeq	r8, r0, pc, ror ip
    552c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5530:	00287015 	eoreq	r7, r8, r5, lsl r0
    5534:	8c800100 	stfhis	f0, [r0], {0}
    5538:	02000000 	andeq	r0, r0, #0
    553c:	16006891 			; <UNDEFINED> instruction: 0x16006891
    5540:	0002e604 	andeq	lr, r2, r4, lsl #12
    5544:	25e11300 	strbcs	r1, [r1, #768]!	; 0x300
    5548:	d3010000 	movwle	r0, #4096	; 0x1000
    554c:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
    5550:	0000004e 	andeq	r0, r0, lr, asr #32
    5554:	04b89c01 	ldrteq	r9, [r8], #3073	; 0xc01
    5558:	ba140000 	blt	505560 <_Min_Stack_Size+0x505160>
    555c:	01000025 	tsteq	r0, r5, lsr #32
    5560:	00048ed3 	ldrdeq	r8, [r4], -r3
    5564:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5568:	276e1700 	strbcs	r1, [lr, -r0, lsl #14]!
    556c:	f2010000 	vhadd.s8	d0, d1, d0
    5570:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    5574:	0000001c 	andeq	r0, r0, ip, lsl r0
    5578:	a0179c01 	andsge	r9, r7, r1, lsl #24
    557c:	01000026 	tsteq	r0, r6, lsr #32
    5580:	004de4fe 	strdeq	lr, [sp], #-78	; 0xffffffb2
    5584:	00001c08 	andeq	r1, r0, r8, lsl #24
    5588:	189c0100 	ldmne	ip, {r8}
    558c:	0000267e 	andeq	r2, r0, lr, ror r6
    5590:	00010b01 	andeq	r0, r1, r1, lsl #22
    5594:	3808004e 	stmdacc	r8, {r1, r2, r3, r6}
    5598:	01000000 	mrseq	r0, (UNDEF: 0)
    559c:	0005009c 	muleq	r5, ip, r0
    55a0:	05b81900 	ldreq	r1, [r8, #2304]!	; 0x900
    55a4:	0b010000 	bleq	455ac <_Min_Stack_Size+0x451ac>
    55a8:	0000ec01 	andeq	lr, r0, r1, lsl #24
    55ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    55b0:	26311800 	ldrtcs	r1, [r1], -r0, lsl #16
    55b4:	24010000 	strcs	r0, [r1], #-0
    55b8:	004e3801 	subeq	r3, lr, r1, lsl #16
    55bc:	0000dc08 	andeq	sp, r0, r8, lsl #24
    55c0:	809c0100 	addshi	r0, ip, r0, lsl #2
    55c4:	19000005 	stmdbne	r0, {r0, r2}
    55c8:	00002816 	andeq	r2, r0, r6, lsl r8
    55cc:	80012401 	andhi	r2, r1, r1, lsl #8
    55d0:	02000005 	andeq	r0, r0, #5
    55d4:	5f1a5c91 	svcpl	0x001a5c91
    55d8:	01000026 	tsteq	r0, r6, lsr #32
    55dc:	008c0127 	addeq	r0, ip, r7, lsr #2
    55e0:	91020000 	mrsls	r0, (UNDEF: 2)
    55e4:	26da1a74 			; <UNDEFINED> instruction: 0x26da1a74
    55e8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    55ec:	00008c01 	andeq	r8, r0, r1, lsl #24
    55f0:	70910200 	addsvc	r0, r1, r0, lsl #4
    55f4:	0027271a 	eoreq	r2, r7, sl, lsl r7
    55f8:	01290100 	teqeq	r9, r0, lsl #2
    55fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    5600:	1a6c9102 	bne	1b29a10 <_Min_Stack_Size+0x1b29610>
    5604:	000024cd 	andeq	r2, r0, sp, asr #9
    5608:	8c012a01 	stchi	10, cr2, [r1], {1}
    560c:	02000000 	andeq	r0, r0, #0
    5610:	8f1a6891 	svchi	0x001a6891
    5614:	01000028 	tsteq	r0, r8, lsr #32
    5618:	008c012b 	addeq	r0, ip, fp, lsr #2
    561c:	91020000 	mrsls	r0, (UNDEF: 2)
    5620:	29621a64 	stmdbcs	r2!, {r2, r5, r6, r9, fp, ip}^
    5624:	2c010000 	stccs	0, cr0, [r1], {-0}
    5628:	00008c01 	andeq	r8, r0, r1, lsl #24
    562c:	60910200 	addsvs	r0, r1, r0, lsl #4
    5630:	7e041600 	cfmadd32vc	mvax0, mvfx1, mvfx4, mvfx0
    5634:	18000003 	stmdane	r0, {r0, r1}
    5638:	0000268c 	andeq	r2, r0, ip, lsl #13
    563c:	14015801 	strne	r5, [r1], #-2049	; 0x801
    5640:	5408004f 	strpl	r0, [r8], #-79	; 0x4f
    5644:	01000000 	mrseq	r0, (UNDEF: 0)
    5648:	0005ac9c 	muleq	r5, ip, ip
    564c:	28161900 	ldmdacs	r6, {r8, fp, ip}
    5650:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    5654:	00058001 	andeq	r8, r5, r1
    5658:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    565c:	25d21800 	ldrbcs	r1, [r2, #2048]	; 0x800
    5660:	85010000 	strhi	r0, [r1, #-0]
    5664:	004f6801 	subeq	r6, pc, r1, lsl #16
    5668:	0000dc08 	andeq	sp, r0, r8, lsl #24
    566c:	2c9c0100 	ldfcss	f0, [ip], {0}
    5670:	19000006 	stmdbne	r0, {r1, r2}
    5674:	000024f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5678:	2c018501 	cfstr32cs	mvfx8, [r1], {1}
    567c:	02000006 	andeq	r0, r0, #6
    5680:	7b1a5c91 	blvc	69c8cc <_Min_Stack_Size+0x69c4cc>
    5684:	01000029 	tsteq	r0, r9, lsr #32
    5688:	008c0188 	addeq	r0, ip, r8, lsl #3
    568c:	91020000 	mrsls	r0, (UNDEF: 2)
    5690:	26401a74 			; <UNDEFINED> instruction: 0x26401a74
    5694:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    5698:	00008c01 	andeq	r8, r0, r1, lsl #24
    569c:	70910200 	addsvc	r0, r1, r0, lsl #4
    56a0:	00298c1a 	eoreq	r8, r9, sl, lsl ip
    56a4:	018a0100 	orreq	r0, sl, r0, lsl #2
    56a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    56ac:	1a6c9102 	bne	1b29abc <_Min_Stack_Size+0x1b296bc>
    56b0:	000026cc 	andeq	r2, r0, ip, asr #13
    56b4:	8c018b01 	stchi	11, cr8, [r1], {1}
    56b8:	02000000 	andeq	r0, r0, #0
    56bc:	9f1a6891 	svcls	0x001a6891
    56c0:	01000025 	tsteq	r0, r5, lsr #32
    56c4:	008c018c 	addeq	r0, ip, ip, lsl #3
    56c8:	91020000 	mrsls	r0, (UNDEF: 2)
    56cc:	27051a64 	strcs	r1, [r5, -r4, ror #20]
    56d0:	8d010000 	stchi	0, cr0, [r1, #-0]
    56d4:	00008c01 	andeq	r8, r0, r1, lsl #24
    56d8:	60910200 	addsvs	r0, r1, r0, lsl #4
    56dc:	16041600 	strne	r1, [r4], -r0, lsl #12
    56e0:	18000004 	stmdane	r0, {r2}
    56e4:	000024b9 			; <UNDEFINED> instruction: 0x000024b9
    56e8:	4401ba01 	strmi	fp, [r1], #-2561	; 0xa01
    56ec:	54080050 	strpl	r0, [r8], #-80	; 0x50
    56f0:	01000000 	mrseq	r0, (UNDEF: 0)
    56f4:	0006589c 	muleq	r6, ip, r8
    56f8:	24f21900 	ldrbtcs	r1, [r2], #2304	; 0x900
    56fc:	ba010000 	blt	45704 <_Min_Stack_Size+0x45304>
    5700:	00062c01 	andeq	r2, r6, r1, lsl #24
    5704:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5708:	24641800 	strbtcs	r1, [r4], #-2048	; 0x800
    570c:	e5010000 	str	r0, [r1, #-0]
    5710:	00509801 	subseq	r9, r0, r1, lsl #16
    5714:	00003808 	andeq	r3, r0, r8, lsl #16
    5718:	7e9c0100 	fmlvce	f0, f4, f0
    571c:	19000006 	stmdbne	r0, {r1, r2}
    5720:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    5724:	ec01e501 	cfstr32	mvfx14, [r1], {1}
    5728:	02000000 	andeq	r0, r0, #0
    572c:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    5730:	0000240a 	andeq	r2, r0, sl, lsl #8
    5734:	d001fd01 	andle	pc, r1, r1, lsl #26
    5738:	38080050 	stmdacc	r8, {r4, r6}
    573c:	01000000 	mrseq	r0, (UNDEF: 0)
    5740:	0006a49c 	muleq	r6, ip, r4
    5744:	05b81900 	ldreq	r1, [r8, #2304]!	; 0x900
    5748:	fd010000 	stc2	0, cr0, [r1, #-0]
    574c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    5750:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5754:	28011800 	stmdacs	r1, {fp, ip}
    5758:	14010000 	strne	r0, [r1], #-0
    575c:	00510802 	subseq	r0, r1, r2, lsl #16
    5760:	00005408 	andeq	r5, r0, r8, lsl #8
    5764:	e89c0100 	ldm	ip, {r8}
    5768:	19000006 	stmdbne	r0, {r1, r2}
    576c:	000025f9 	strdeq	r2, [r0], -r9
    5770:	8c021401 	cfstrshi	mvf1, [r2], {1}
    5774:	02000000 	andeq	r0, r0, #0
    5778:	b8196c91 	ldmdalt	r9, {r0, r4, r7, sl, fp, sp, lr}
    577c:	01000005 	tsteq	r0, r5
    5780:	00ec0214 	rsceq	r0, ip, r4, lsl r2
    5784:	91020000 	mrsls	r0, (UNDEF: 2)
    5788:	25ff1a6b 	ldrbcs	r1, [pc, #2667]!	; 61fb <_Min_Stack_Size+0x5dfb>
    578c:	16010000 	strne	r0, [r1], -r0
    5790:	00008c02 	andeq	r8, r0, r2, lsl #24
    5794:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5798:	26eb1800 	strbtcs	r1, [fp], r0, lsl #16
    579c:	2f010000 	svccs	0x00010000
    57a0:	00515c02 	subseq	r5, r1, r2, lsl #24
    57a4:	00001c08 	andeq	r1, r0, r8, lsl #24
    57a8:	0e9c0100 	fmleqe	f0, f4, f0
    57ac:	19000007 	stmdbne	r0, {r0, r1, r2}
    57b0:	000024db 	ldrdeq	r2, [r0], -fp
    57b4:	8c022f01 	stchi	15, cr2, [r2], {1}
    57b8:	02000000 	andeq	r0, r0, #0
    57bc:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    57c0:	000026b4 			; <UNDEFINED> instruction: 0x000026b4
    57c4:	78027201 	stmdavc	r2, {r0, r9, ip, sp, lr}
    57c8:	3c080051 	stccc	0, cr0, [r8], {81}	; 0x51
    57cc:	01000000 	mrseq	r0, (UNDEF: 0)
    57d0:	0007439c 	muleq	r7, ip, r3
    57d4:	26c31900 	strbcs	r1, [r3], r0, lsl #18
    57d8:	72010000 	andvc	r0, r1, #0
    57dc:	00008c02 	andeq	r8, r0, r2, lsl #24
    57e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    57e4:	0005b819 	andeq	fp, r5, r9, lsl r8
    57e8:	02720100 	rsbseq	r0, r2, #0, 2
    57ec:	000000ec 	andeq	r0, r0, ip, ror #1
    57f0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    57f4:	0029041b 	eoreq	r0, r9, fp, lsl r4
    57f8:	02910100 	addseq	r0, r1, #0, 2
    57fc:	000000be 	strheq	r0, [r0], -lr
    5800:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
    5804:	00000034 	andeq	r0, r0, r4, lsr r0
    5808:	077c9c01 	ldrbeq	r9, [ip, -r1, lsl #24]!
    580c:	82190000 	andshi	r0, r9, #0
    5810:	01000027 	tsteq	r0, r7, lsr #32
    5814:	008c0291 	umulleq	r0, ip, r1, r2
    5818:	91020000 	mrsls	r0, (UNDEF: 2)
    581c:	08a31a6c 	stmiaeq	r3!, {r2, r3, r5, r6, r9, fp, ip}
    5820:	93010000 	movwls	r0, #4096	; 0x1000
    5824:	0000be02 	andeq	fp, r0, r2, lsl #28
    5828:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    582c:	24721800 	ldrbtcs	r1, [r2], #-2048	; 0x800
    5830:	b3010000 	movwlt	r0, #4096	; 0x1000
    5834:	0051e802 	subseq	lr, r1, r2, lsl #16
    5838:	00001c08 	andeq	r1, r0, r8, lsl #24
    583c:	a29c0100 	addsge	r0, ip, #0, 2
    5840:	19000007 	stmdbne	r0, {r0, r1, r2}
    5844:	00002782 	andeq	r2, r0, r2, lsl #15
    5848:	8c02b301 	stchi	3, cr11, [r2], {1}
    584c:	02000000 	andeq	r0, r0, #0
    5850:	1b007491 	blne	22a9c <_Min_Stack_Size+0x2269c>
    5854:	00002930 	andeq	r2, r0, r0, lsr r9
    5858:	ca02c801 	bgt	b7864 <_Min_Stack_Size+0xb7464>
    585c:	04000000 	streq	r0, [r0], #-0
    5860:	58080052 	stmdapl	r8, {r1, r4, r6}
    5864:	01000000 	mrseq	r0, (UNDEF: 0)
    5868:	0007ea9c 	muleq	r7, ip, sl
    586c:	26c31900 	strbcs	r1, [r3], r0, lsl #18
    5870:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    5874:	00008c02 	andeq	r8, r0, r2, lsl #24
    5878:	6c910200 	lfmvs	f0, 4, [r1], {0}
    587c:	0008a31a 	andeq	sl, r8, sl, lsl r3
    5880:	02ca0100 	sbceq	r0, sl, #0, 2
    5884:	000000ca 	andeq	r0, r0, sl, asr #1
    5888:	1a779102 	bne	1de9c98 <_Min_Stack_Size+0x1de9898>
    588c:	00002482 	andeq	r2, r0, r2, lsl #9
    5890:	8c02cb01 	stchi	11, cr12, [r2], {1}
    5894:	02000000 	andeq	r0, r0, #0
    5898:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    589c:	0000282a 	andeq	r2, r0, sl, lsr #16
    58a0:	5c02f001 	stcpl	0, cr15, [r2], {1}
    58a4:	24080052 	strcs	r0, [r8], #-82	; 0x52
    58a8:	01000000 	mrseq	r0, (UNDEF: 0)
    58ac:	0008109c 	muleq	r8, ip, r0
    58b0:	26c31900 	strbcs	r1, [r3], r0, lsl #18
    58b4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    58b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    58bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    58c0:	01561c00 	cmpeq	r6, r0, lsl #24
    58c4:	a7060000 	strge	r0, [r6, -r0]
    58c8:	0000a306 	andeq	sl, r0, r6, lsl #6
    58cc:	0cf80000 	ldcleq	0, cr0, [r8]
    58d0:	00040000 	andeq	r0, r4, r0
    58d4:	00001169 	andeq	r1, r0, r9, ror #2
    58d8:	00210104 	eoreq	r0, r1, r4, lsl #2
    58dc:	50010000 	andpl	r0, r1, r0
    58e0:	0c000031 	stceq	0, cr0, [r0], {49}	; 0x31
    58e4:	68000001 	stmdavs	r0, {r0}
    58e8:	00000007 	andeq	r0, r0, r7
    58ec:	2b000000 	blcs	58f4 <_Min_Stack_Size+0x54f4>
    58f0:	02000028 	andeq	r0, r0, #40	; 0x28
    58f4:	01450601 	cmpeq	r5, r1, lsl #12
    58f8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    58fc:	02000001 	andeq	r0, r0, #1
    5900:	0000371d 	andeq	r3, r0, sp, lsl r7
    5904:	08010200 	stmdaeq	r1, {r9}
    5908:	00000143 	andeq	r0, r0, r3, asr #2
    590c:	7f050202 	svcvc	0x00050202
    5910:	03000001 	movweq	r0, #1
    5914:	00000378 	andeq	r0, r0, r8, ror r3
    5918:	00502b02 	subseq	r2, r0, r2, lsl #22
    591c:	02020000 	andeq	r0, r2, #0
    5920:	00000e07 	andeq	r0, r0, r7, lsl #28
    5924:	016f0300 	cmneq	pc, r0, lsl #6
    5928:	3f020000 	svccc	0x00020000
    592c:	00000062 	andeq	r0, r0, r2, rrx
    5930:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    5934:	03000000 	movweq	r0, #0
    5938:	000004f4 	strdeq	r0, [r0], -r4
    593c:	00744102 	rsbseq	r4, r4, r2, lsl #2
    5940:	04020000 	streq	r0, [r2], #-0
    5944:	00012607 	andeq	r2, r1, r7, lsl #12
    5948:	05080200 	streq	r0, [r8, #-512]	; 0x200
    594c:	00000000 	andeq	r0, r0, r0
    5950:	21070802 	tstcs	r7, r2, lsl #16
    5954:	04000001 	streq	r0, [r0], #-1
    5958:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    595c:	04020074 	streq	r0, [r2], #-116	; 0x74
    5960:	00012b07 	andeq	r2, r1, r7, lsl #22
    5964:	01b00300 	lslseq	r0, r0, #6
    5968:	2a030000 	bcs	c5970 <_Min_Stack_Size+0xc5570>
    596c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5970:	00037a03 	andeq	r7, r3, r3, lsl #20
    5974:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    5978:	03000000 	movweq	r0, #0
    597c:	00000171 	andeq	r0, r0, r1, ror r1
    5980:	00574103 	subseq	r4, r7, r3, lsl #2
    5984:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    5988:	03000004 	movweq	r0, #4
    598c:	00006942 	andeq	r6, r0, r2, asr #18
    5990:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5994:	00000192 	muleq	r0, r2, r1
    5998:	0000b805 	andeq	fp, r0, r5, lsl #16
    599c:	00b80600 	adcseq	r0, r8, r0, lsl #12
    59a0:	00df0000 	sbcseq	r0, pc, r0
    59a4:	c3070000 	movwgt	r0, #28672	; 0x7000
    59a8:	01000000 	mrseq	r0, (UNDEF: 0)
    59ac:	00b80600 	adcseq	r0, r8, r0, lsl #12
    59b0:	00ef0000 	rsceq	r0, pc, r0
    59b4:	c3070000 	movwgt	r0, #28672	; 0x7000
    59b8:	00000000 	andeq	r0, r0, r0
    59bc:	00ad0500 	adceq	r0, sp, r0, lsl #10
    59c0:	01080000 	mrseq	r0, (UNDEF: 8)
    59c4:	0a01f704 	beq	835dc <_Min_Stack_Size+0x831dc>
    59c8:	09000001 	stmdbeq	r0, {r0}
    59cc:	000007be 			; <UNDEFINED> instruction: 0x000007be
    59d0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    59d4:	00010054 	andeq	r0, r1, r4, asr r0
    59d8:	001dc80b 	andseq	ip, sp, fp, lsl #16
    59dc:	01f70400 	mvnseq	r0, r0, lsl #8
    59e0:	000000f4 	strdeq	r0, [r0], -r4
    59e4:	004d160b 	subeq	r1, sp, fp, lsl #12
    59e8:	01f70400 	mvnseq	r0, r0, lsl #8
    59ec:	000000f4 	strdeq	r0, [r0], -r4
    59f0:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    59f4:	00013801 	andeq	r3, r1, r1, lsl #16
    59f8:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    59fc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5a00:	0000071e 	andeq	r0, r0, lr, lsl r7
    5a04:	ef0b0001 	svc	0x000b0001
    5a08:	04000006 	streq	r0, [r0], #-6
    5a0c:	012201f9 	strdeq	r0, [r2, -r9]!
    5a10:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    5a14:	2b041b04 	blcs	10c62c <_Min_Stack_Size+0x10c22c>
    5a18:	0d000002 	stceq	0, cr0, [r0, #-8]
    5a1c:	000004ac 	andeq	r0, r0, ip, lsr #9
    5a20:	cf041d04 	svcgt	0x00041d04
    5a24:	00000000 	andeq	r0, r0, r0
    5a28:	002ff90d 	eoreq	pc, pc, sp, lsl #18
    5a2c:	041e0400 	ldreq	r0, [lr], #-1024	; 0x400
    5a30:	000000ca 	andeq	r0, r0, sl, asr #1
    5a34:	2f6d0d08 	svccs	0x006d0d08
    5a38:	1f040000 	svcne	0x00040000
    5a3c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5a40:	dc0d0c00 	stcle	12, cr0, [sp], {-0}
    5a44:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5a48:	00ca0420 	sbceq	r0, sl, r0, lsr #8
    5a4c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    5a50:	00002d5d 	andeq	r2, r0, sp, asr sp
    5a54:	ca042104 	bgt	10de6c <_Min_Stack_Size+0x10da6c>
    5a58:	14000000 	strne	r0, [r0], #-0
    5a5c:	5243470e 	subpl	r4, r3, #3670016	; 0x380000
    5a60:	04220400 	strteq	r0, [r2], #-1024	; 0x400
    5a64:	000000ca 	andeq	r0, r0, sl, asr #1
    5a68:	04b60d18 	ldrteq	r0, [r6], #3352	; 0xd18
    5a6c:	23040000 	movwcs	r0, #16384	; 0x4000
    5a70:	0000cf04 	andeq	ip, r0, r4, lsl #30
    5a74:	720d1c00 	andvc	r1, sp, #0, 24
    5a78:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5a7c:	00ca0424 	sbceq	r0, sl, r4, lsr #8
    5a80:	0d240000 	stceq	0, cr0, [r4, #-0]
    5a84:	000004c0 	andeq	r0, r0, r0, asr #9
    5a88:	df042504 	svcle	0x00042504
    5a8c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5a90:	0029f00d 	eoreq	pc, r9, sp
    5a94:	04260400 	strteq	r0, [r6], #-1024	; 0x400
    5a98:	000000ca 	andeq	r0, r0, sl, asr #1
    5a9c:	03ac0d2c 			; <UNDEFINED> instruction: 0x03ac0d2c
    5aa0:	27040000 	strcs	r0, [r4, -r0]
    5aa4:	0000df04 	andeq	sp, r0, r4, lsl #30
    5aa8:	490e3000 	stmdbmi	lr, {ip, sp}
    5aac:	04005245 	streq	r5, [r0], #-581	; 0x245
    5ab0:	00ca0428 	sbceq	r0, sl, r8, lsr #8
    5ab4:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    5ab8:	00525349 	subseq	r5, r2, r9, asr #6
    5abc:	ca042904 	bgt	10fed4 <_Min_Stack_Size+0x10fad4>
    5ac0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5ac4:	5243490e 	subpl	r4, r3, #229376	; 0x38000
    5ac8:	042a0400 	strteq	r0, [sl], #-1024	; 0x400
    5acc:	000000ca 	andeq	r0, r0, sl, asr #1
    5ad0:	2f1b0d3c 	svccs	0x001b0d3c
    5ad4:	2b040000 	blcs	105adc <_Min_Stack_Size+0x1056dc>
    5ad8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5adc:	680d4000 	stmdavs	sp, {lr}
    5ae0:	0400002f 	streq	r0, [r0], #-47	; 0x2f
    5ae4:	00ca042c 	sbceq	r0, sl, ip, lsr #8
    5ae8:	0d440000 	stcleq	0, cr0, [r4, #-0]
    5aec:	000030be 	strheq	r3, [r0], -lr
    5af0:	ca042d04 	bgt	110f08 <_Min_Stack_Size+0x110b08>
    5af4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    5af8:	2aa30b00 	bcs	fe8c8700 <_estack+0xde898700>
    5afc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5b00:	00014404 	andeq	r4, r1, r4, lsl #8
    5b04:	04440c00 	strbeq	r0, [r4], #-3072	; 0xc00
    5b08:	02f60434 	rscseq	r0, r6, #52, 8	; 0x34000000
    5b0c:	430e0000 	movwmi	r0, #57344	; 0xe000
    5b10:	36040052 			; <UNDEFINED> instruction: 0x36040052
    5b14:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5b18:	c40d0000 	strgt	r0, [sp], #-0
    5b1c:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    5b20:	00ca0437 	sbceq	r0, sl, r7, lsr r4
    5b24:	0d040000 	stceq	0, cr0, [r4, #-0]
    5b28:	00002ac6 	andeq	r2, r0, r6, asr #21
    5b2c:	ca043804 	bgt	113b44 <_Min_Stack_Size+0x113744>
    5b30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5b34:	002d7f0d 	eoreq	r7, sp, sp, lsl #30
    5b38:	04390400 	ldrteq	r0, [r9], #-1024	; 0x400
    5b3c:	000000ca 	andeq	r0, r0, sl, asr #1
    5b40:	313a0d0c 	teqcc	sl, ip, lsl #26
    5b44:	3a040000 	bcc	105b4c <_Min_Stack_Size+0x10574c>
    5b48:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5b4c:	c80d1000 	stmdagt	sp, {ip}
    5b50:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    5b54:	00ca043b 	sbceq	r0, sl, fp, lsr r4
    5b58:	0d140000 	ldceq	0, cr0, [r4, #-0]
    5b5c:	0000308c 	andeq	r3, r0, ip, lsl #1
    5b60:	ca043c04 	bgt	114b78 <_Min_Stack_Size+0x114778>
    5b64:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5b68:	002da10d 	eoreq	sl, sp, sp, lsl #2
    5b6c:	043d0400 	ldrteq	r0, [sp], #-1024	; 0x400
    5b70:	000000ca 	andeq	r0, r0, sl, asr #1
    5b74:	04ac0d1c 	strteq	r0, [ip], #3356	; 0xd1c
    5b78:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    5b7c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    5b80:	990d2000 	stmdbls	sp, {sp}
    5b84:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    5b88:	00ca043f 	sbceq	r0, sl, pc, lsr r4
    5b8c:	0d280000 	stceq	0, cr0, [r8, #-0]
    5b90:	000029f5 	strdeq	r2, [r0], -r5
    5b94:	ca044004 	bgt	115bac <_Min_Stack_Size+0x1157ac>
    5b98:	2c000000 	stccs	0, cr0, [r0], {-0}
    5b9c:	0029b10d 	eoreq	fp, r9, sp, lsl #2
    5ba0:	04410400 	strbeq	r0, [r1], #-1024	; 0x400
    5ba4:	000000ca 	andeq	r0, r0, sl, asr #1
    5ba8:	04b60d30 	ldrteq	r0, [r6], #3376	; 0xd30
    5bac:	42040000 	andmi	r0, r4, #0
    5bb0:	0002f604 	andeq	pc, r2, r4, lsl #12
    5bb4:	450d3400 	strmi	r3, [sp, #-1024]	; 0x400
    5bb8:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5bbc:	00ca0443 	sbceq	r0, sl, r3, asr #8
    5bc0:	00400000 	subeq	r0, r0, r0
    5bc4:	0000b806 	andeq	fp, r0, r6, lsl #16
    5bc8:	00030600 	andeq	r0, r3, r0, lsl #12
    5bcc:	00c30700 	sbceq	r0, r3, r0, lsl #14
    5bd0:	00020000 	andeq	r0, r2, r0
    5bd4:	002ba90b 	eoreq	sl, fp, fp, lsl #18
    5bd8:	04450400 	strbeq	r0, [r5], #-1024	; 0x400
    5bdc:	00000237 	andeq	r0, r0, r7, lsr r2
    5be0:	30053c0f 	andcc	r3, r5, pc, lsl #24
    5be4:	000003cf 	andeq	r0, r0, pc, asr #7
    5be8:	002acc10 	eoreq	ip, sl, r0, lsl ip
    5bec:	b8320500 	ldmdalt	r2!, {r8, sl}
    5bf0:	00000000 	andeq	r0, r0, r0
    5bf4:	0030f310 	eorseq	pc, r0, r0, lsl r3	; <UNPREDICTABLE>
    5bf8:	b8350500 	ldmdalt	r5!, {r8, sl}
    5bfc:	04000000 	streq	r0, [r0], #-0
    5c00:	00301910 	eorseq	r1, r0, r0, lsl r9
    5c04:	b8380500 	ldmdalt	r8!, {r8, sl}
    5c08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5c0c:	002d8410 	eoreq	r8, sp, r0, lsl r4
    5c10:	b83b0500 	ldmdalt	fp!, {r8, sl}
    5c14:	0c000000 	stceq	0, cr0, [r0], {-0}
    5c18:	002b9510 	eoreq	r9, fp, r0, lsl r5
    5c1c:	b83e0500 	ldmdalt	lr!, {r8, sl}
    5c20:	10000000 	andne	r0, r0, r0
    5c24:	002c4310 	eoreq	r4, ip, r0, lsl r3
    5c28:	b8410500 	stmdalt	r1, {r8, sl}^
    5c2c:	14000000 	strne	r0, [r0], #-0
    5c30:	002fbb10 	eoreq	fp, pc, r0, lsl fp	; <UNPREDICTABLE>
    5c34:	b8440500 	stmdalt	r4, {r8, sl}^
    5c38:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5c3c:	002b0610 	eoreq	r0, fp, r0, lsl r6
    5c40:	b8470500 	stmdalt	r7, {r8, sl}^
    5c44:	1c000000 	stcne	0, cr0, [r0], {-0}
    5c48:	002b3110 	eoreq	r3, fp, r0, lsl r1
    5c4c:	b84a0500 	stmdalt	sl, {r8, sl}^
    5c50:	20000000 	andcs	r0, r0, r0
    5c54:	002a7510 	eoreq	r7, sl, r0, lsl r5
    5c58:	b84d0500 	stmdalt	sp, {r8, sl}^
    5c5c:	24000000 	strcs	r0, [r0], #-0
    5c60:	002d6210 	eoreq	r6, sp, r0, lsl r2
    5c64:	b8500500 	ldmdalt	r0, {r8, sl}^
    5c68:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5c6c:	002fcf10 	eoreq	ip, pc, r0, lsl pc	; <UNPREDICTABLE>
    5c70:	b8530500 	ldmdalt	r3, {r8, sl}^
    5c74:	2c000000 	stccs	0, cr0, [r0], {-0}
    5c78:	002f9210 	eoreq	r9, pc, r0, lsl r2	; <UNPREDICTABLE>
    5c7c:	b8560500 	ldmdalt	r6, {r8, sl}^
    5c80:	30000000 	andcc	r0, r0, r0
    5c84:	002aec10 	eoreq	lr, sl, r0, lsl ip
    5c88:	b8590500 	ldmdalt	r9, {r8, sl}^
    5c8c:	34000000 	strcc	r0, [r0], #-0
    5c90:	002c9c10 	eoreq	r9, ip, r0, lsl ip
    5c94:	b85c0500 	ldmdalt	ip, {r8, sl}^
    5c98:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5c9c:	31a10300 			; <UNDEFINED> instruction: 0x31a10300
    5ca0:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    5ca4:	00000312 	andeq	r0, r0, r2, lsl r3
    5ca8:	6405400f 	strvs	r4, [r5], #-15
    5cac:	000004a3 	andeq	r0, r0, r3, lsr #9
    5cb0:	002d2510 	eoreq	r2, sp, r0, lsl r5
    5cb4:	b8660500 	stmdalt	r6!, {r8, sl}^
    5cb8:	00000000 	andeq	r0, r0, r0
    5cbc:	002c6610 	eoreq	r6, ip, r0, lsl r6
    5cc0:	b8690500 	stmdalt	r9!, {r8, sl}^
    5cc4:	04000000 	streq	r0, [r0], #-0
    5cc8:	002a6210 	eoreq	r6, sl, r0, lsl r2
    5ccc:	b86c0500 	stmdalt	ip!, {r8, sl}^
    5cd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5cd4:	002cf610 	eoreq	pc, ip, r0, lsl r6	; <UNPREDICTABLE>
    5cd8:	b86f0500 	stmdalt	pc!, {r8, sl}^	; <UNPREDICTABLE>
    5cdc:	0c000000 	stceq	0, cr0, [r0], {-0}
    5ce0:	00302910 	eorseq	r2, r0, r0, lsl r9
    5ce4:	b8720500 	ldmdalt	r2!, {r8, sl}^
    5ce8:	10000000 	andne	r0, r0, r0
    5cec:	002e0110 	eoreq	r0, lr, r0, lsl r1
    5cf0:	b8750500 	ldmdalt	r5!, {r8, sl}^
    5cf4:	14000000 	strne	r0, [r0], #-0
    5cf8:	002c1a10 	eoreq	r1, ip, r0, lsl sl
    5cfc:	b8780500 	ldmdalt	r8!, {r8, sl}^
    5d00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5d04:	002cca10 	eoreq	ip, ip, r0, lsl sl
    5d08:	b87b0500 	ldmdalt	fp!, {r8, sl}^
    5d0c:	1c000000 	stcne	0, cr0, [r0], {-0}
    5d10:	002a4d10 	eoreq	r4, sl, r0, lsl sp
    5d14:	b87e0500 	ldmdalt	lr!, {r8, sl}^
    5d18:	20000000 	andcs	r0, r0, r0
    5d1c:	002f0410 	eoreq	r0, pc, r0, lsl r4	; <UNPREDICTABLE>
    5d20:	b8810500 	stmlt	r1, {r8, sl}
    5d24:	24000000 	strcs	r0, [r0], #-0
    5d28:	00306010 	eorseq	r6, r0, r0, lsl r0
    5d2c:	b8840500 	stmlt	r4, {r8, sl}
    5d30:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5d34:	00307610 	eorseq	r7, r0, r0, lsl r6
    5d38:	b8870500 	stmlt	r7, {r8, sl}
    5d3c:	2c000000 	stccs	0, cr0, [r0], {-0}
    5d40:	002a3910 	eoreq	r3, sl, r0, lsl r9
    5d44:	b88a0500 	stmlt	sl, {r8, sl}
    5d48:	30000000 	andcc	r0, r0, r0
    5d4c:	002c3010 	eoreq	r3, ip, r0, lsl r0
    5d50:	b88c0500 	stmlt	ip, {r8, sl}
    5d54:	34000000 	strcc	r0, [r0], #-0
    5d58:	00310310 	eorseq	r0, r1, r0, lsl r3
    5d5c:	b88f0500 	stmlt	pc, {r8, sl}	; <UNPREDICTABLE>
    5d60:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5d64:	002f5510 	eoreq	r5, pc, r0, lsl r5	; <UNPREDICTABLE>
    5d68:	b8920500 	ldmlt	r2, {r8, sl}
    5d6c:	3c000000 	stccc	0, cr0, [r0], {-0}
    5d70:	299a0300 	ldmibcs	sl, {r8, r9}
    5d74:	94050000 	strls	r0, [r5], #-0
    5d78:	000003da 	ldrdeq	r0, [r0], -sl
    5d7c:	9a05080f 	bls	147dc0 <_Min_Stack_Size+0x1479c0>
    5d80:	000004cf 	andeq	r0, r0, pc, asr #9
    5d84:	002e2a10 	eoreq	r2, lr, r0, lsl sl
    5d88:	b89c0500 	ldmlt	ip, {r8, sl}
    5d8c:	00000000 	andeq	r0, r0, r0
    5d90:	002e3410 	eoreq	r3, lr, r0, lsl r4
    5d94:	b89d0500 	ldmlt	sp, {r8, sl}
    5d98:	04000000 	streq	r0, [r0], #-0
    5d9c:	30440300 	subcc	r0, r4, r0, lsl #6
    5da0:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    5da4:	000004ae 	andeq	r0, r0, lr, lsr #9
    5da8:	a0050c0f 	andge	r0, r5, pc, lsl #24
    5dac:	00000507 	andeq	r0, r0, r7, lsl #10
    5db0:	002cb510 	eoreq	fp, ip, r0, lsl r5
    5db4:	b8a20500 	stmialt	r2!, {r8, sl}
    5db8:	00000000 	andeq	r0, r0, r0
    5dbc:	002f7210 	eoreq	r7, pc, r0, lsl r2	; <UNPREDICTABLE>
    5dc0:	b8a30500 	stmialt	r3!, {r8, sl}
    5dc4:	04000000 	streq	r0, [r0], #-0
    5dc8:	002df310 	eoreq	pc, sp, r0, lsl r3	; <UNPREDICTABLE>
    5dcc:	b8a40500 	stmialt	r4!, {r8, sl}
    5dd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5dd4:	30ae0300 	adccc	r0, lr, r0, lsl #6
    5dd8:	a5050000 	strge	r0, [r5, #-0]
    5ddc:	000004da 	ldrdeq	r0, [r0], -sl
    5de0:	a7050c0f 	strge	r0, [r5, -pc, lsl #24]
    5de4:	0000053f 	andeq	r0, r0, pc, lsr r5
    5de8:	002fe710 	eoreq	lr, pc, r0, lsl r7	; <UNPREDICTABLE>
    5dec:	b8a90500 	stmialt	r9!, {r8, sl}
    5df0:	00000000 	andeq	r0, r0, r0
    5df4:	002bdc10 	eoreq	sp, fp, r0, lsl ip
    5df8:	b8ac0500 	stmialt	ip!, {r8, sl}
    5dfc:	04000000 	streq	r0, [r0], #-0
    5e00:	002d4c10 	eoreq	r4, sp, r0, lsl ip
    5e04:	b8af0500 	stmialt	pc!, {r8, sl}	; <UNPREDICTABLE>
    5e08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5e0c:	2d080300 	stccs	3, cr0, [r8, #-0]
    5e10:	b1050000 	mrslt	r0, (UNDEF: 5)
    5e14:	00000512 	andeq	r0, r0, r2, lsl r5
    5e18:	b305100f 	movwlt	r1, #20495	; 0x500f
    5e1c:	00000583 	andeq	r0, r0, r3, lsl #11
    5e20:	002f2910 	eoreq	r2, pc, r0, lsl r9	; <UNPREDICTABLE>
    5e24:	b8b50500 	ldmlt	r5!, {r8, sl}
    5e28:	00000000 	andeq	r0, r0, r0
    5e2c:	002bcd10 	eoreq	ip, fp, r0, lsl sp
    5e30:	b8b80500 	ldmlt	r8!, {r8, sl}
    5e34:	04000000 	streq	r0, [r0], #-0
    5e38:	002ebd10 	eoreq	fp, lr, r0, lsl sp
    5e3c:	b8bb0500 	ldmlt	fp!, {r8, sl}
    5e40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5e44:	0030c310 	eorseq	ip, r0, r0, lsl r3
    5e48:	b8be0500 	ldmlt	lr!, {r8, sl}
    5e4c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5e50:	2e140300 	cdpcs	3, 1, cr0, cr4, cr0, {0}
    5e54:	c0050000 	andgt	r0, r5, r0
    5e58:	0000054a 	andeq	r0, r0, sl, asr #10
    5e5c:	0029d611 	eoreq	sp, r9, r1, lsl r6
    5e60:	807b0100 	rsbshi	r0, fp, r0, lsl #2
    5e64:	1a080052 	bne	205fb4 <_Min_Stack_Size+0x205bb4>
    5e68:	01000000 	mrseq	r0, (UNDEF: 0)
    5e6c:	2f4b129c 	svccs	0x004b129c
    5e70:	8c010000 	stchi	0, cr0, [r1], {-0}
    5e74:	0800529c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, lr}
    5e78:	0000012c 	andeq	r0, r0, ip, lsr #2
    5e7c:	06179c01 	ldreq	r9, [r7], -r1, lsl #24
    5e80:	dc130000 	ldcle	0, cr0, [r3], {-0}
    5e84:	0100002a 	tsteq	r0, sl, lsr #32
    5e88:	0006178c 	andeq	r1, r6, ip, lsl #15
    5e8c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5e90:	002b6714 	eoreq	r6, fp, r4, lsl r7
    5e94:	b88e0100 	stmlt	lr, {r8}
    5e98:	02000000 	andeq	r0, r0, #0
    5e9c:	a6147491 			; <UNDEFINED> instruction: 0xa6147491
    5ea0:	0100002d 	tsteq	r0, sp, lsr #32
    5ea4:	0000b88f 	andeq	fp, r0, pc, lsl #17
    5ea8:	70910200 	addsvc	r0, r1, r0, lsl #4
    5eac:	0029fb14 	eoreq	pc, r9, r4, lsl fp	; <UNPREDICTABLE>
    5eb0:	b8900100 	ldmlt	r0, {r8}
    5eb4:	02000000 	andeq	r0, r0, #0
    5eb8:	3a146c91 	bcc	521104 <_Min_Stack_Size+0x520d04>
    5ebc:	0100002d 	tsteq	r0, sp, lsr #32
    5ec0:	0000b891 	muleq	r0, r1, r8
    5ec4:	68910200 	ldmvs	r1, {r9}
    5ec8:	002c1014 	eoreq	r1, ip, r4, lsl r0
    5ecc:	b8920100 	ldmlt	r2, {r8}
    5ed0:	02000000 	andeq	r0, r0, #0
    5ed4:	85146491 	ldrhi	r6, [r4, #-1169]	; 0x491
    5ed8:	0100002b 	tsteq	r0, fp, lsr #32
    5edc:	0000b893 	muleq	r0, r3, r8
    5ee0:	60910200 	addsvs	r0, r1, r0, lsl #4
    5ee4:	cf041500 	svcgt	0x00041500
    5ee8:	12000003 	andne	r0, r0, #3
    5eec:	00002c7a 	andeq	r2, r0, sl, ror ip
    5ef0:	53c8cd01 	bicpl	ip, r8, #1, 26	; 0x40
    5ef4:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    5ef8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5efc:	00000641 	andeq	r0, r0, r1, asr #12
    5f00:	002adc13 	eoreq	sp, sl, r3, lsl ip
    5f04:	17cd0100 	strbne	r0, [sp, r0, lsl #2]
    5f08:	02000006 	andeq	r0, r0, #6
    5f0c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    5f10:	00002b76 	andeq	r2, r0, r6, ror fp
    5f14:	5434e801 	ldrtpl	lr, [r4], #-2049	; 0x801
    5f18:	00380800 	eorseq	r0, r8, r0, lsl #16
    5f1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f20:	00000665 	andeq	r0, r0, r5, ror #12
    5f24:	0005b813 	andeq	fp, r5, r3, lsl r8
    5f28:	38e80100 	stmiacc	r8!, {r8}^
    5f2c:	02000001 	andeq	r0, r0, #1
    5f30:	16007791 			; <UNDEFINED> instruction: 0x16007791
    5f34:	00002e66 	andeq	r2, r0, r6, ror #28
    5f38:	6c010001 	stcvs	0, cr0, [r1], {1}
    5f3c:	38080054 	stmdacc	r8, {r2, r4, r6}
    5f40:	01000000 	mrseq	r0, (UNDEF: 0)
    5f44:	00068b9c 	muleq	r6, ip, fp
    5f48:	05b81700 	ldreq	r1, [r8, #1792]!	; 0x700
    5f4c:	00010000 	andeq	r0, r1, r0
    5f50:	00013801 	andeq	r3, r1, r1, lsl #16
    5f54:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5f58:	313f1800 	teqcc	pc, r0, lsl #16
    5f5c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    5f60:	00050701 	andeq	r0, r5, r1, lsl #14
    5f64:	0054a400 	subseq	sl, r4, r0, lsl #8
    5f68:	00005808 	andeq	r5, r0, r8, lsl #16
    5f6c:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    5f70:	19000006 	stmdbne	r0, {r1, r2}
    5f74:	000030df 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    5f78:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    5f7c:	02000005 	andeq	r0, r0, #5
    5f80:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    5f84:	00002ee9 	andeq	r2, r0, r9, ror #29
    5f88:	fc012c01 	stc2	12, cr2, [r1], {1}
    5f8c:	24080054 	strcs	r0, [r8], #-84	; 0x54
    5f90:	01000000 	mrseq	r0, (UNDEF: 0)
    5f94:	0006db9c 	muleq	r6, ip, fp
    5f98:	30df1700 	sbcscc	r1, pc, r0, lsl #14
    5f9c:	2c010000 	stccs	0, cr0, [r1], {-0}
    5fa0:	0006db01 	andeq	sp, r6, r1, lsl #22
    5fa4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5fa8:	07041500 	streq	r1, [r4, -r0, lsl #10]
    5fac:	16000005 	strne	r0, [r0], -r5
    5fb0:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5fb4:	20013a01 	andcs	r3, r1, r1, lsl #20
    5fb8:	1c080055 	stcne	0, cr0, [r8], {85}	; 0x55
    5fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    5fc0:	0007079c 	muleq	r7, ip, r7
    5fc4:	2ab01700 	bcs	fec0bbcc <_estack+0xdebdbbcc>
    5fc8:	3a010000 	bcc	45fd0 <_Min_Stack_Size+0x45bd0>
    5fcc:	0000b801 	andeq	fp, r0, r1, lsl #16
    5fd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5fd4:	2c8a1600 	stccs	6, cr1, [sl], {0}
    5fd8:	4c010000 	stcmi	0, cr0, [r1], {-0}
    5fdc:	00553c01 	subseq	r3, r5, r1, lsl #24
    5fe0:	00001c08 	andeq	r1, r0, r8, lsl #24
    5fe4:	2d9c0100 	ldfcss	f0, [ip]
    5fe8:	17000007 	strne	r0, [r0, -r7]
    5fec:	00003054 	andeq	r3, r0, r4, asr r0
    5ff0:	b8014c01 	stmdalt	r1, {r0, sl, fp, lr}
    5ff4:	02000000 	andeq	r0, r0, #0
    5ff8:	16007491 			; <UNDEFINED> instruction: 0x16007491
    5ffc:	00002b1a 	andeq	r2, r0, sl, lsl fp
    6000:	58016101 	stmdapl	r1, {r0, r8, sp, lr}
    6004:	32080055 	andcc	r0, r8, #85	; 0x55
    6008:	01000001 	tsteq	r0, r1
    600c:	0007bc9c 	muleq	r7, ip, ip
    6010:	2bbc1700 	blcs	fef0bc18 <_estack+0xdeedbc18>
    6014:	61010000 	mrsvs	r0, (UNDEF: 1)
    6018:	0007bc01 	andeq	fp, r7, r1, lsl #24
    601c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6020:	002ea717 	eoreq	sl, lr, r7, lsl r7
    6024:	01610100 	cmneq	r1, r0, lsl #2
    6028:	000007c2 	andeq	r0, r0, r2, asr #15
    602c:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
    6030:	00002fdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    6034:	b8016401 	stmdalt	r1, {r0, sl, sp, lr}
    6038:	02000000 	andeq	r0, r0, #0
    603c:	8d197491 	cfldrshi	mvf7, [r9, #-580]	; 0xfffffdbc
    6040:	0100002b 	tsteq	r0, fp, lsr #32
    6044:	00b80165 	adcseq	r0, r8, r5, ror #2
    6048:	91020000 	mrsls	r0, (UNDEF: 2)
    604c:	31111970 	tstcc	r1, r0, ror r9
    6050:	66010000 	strvs	r0, [r1], -r0
    6054:	0000b801 	andeq	fp, r0, r1, lsl #16
    6058:	6c910200 	lfmvs	f0, 4, [r1], {0}
    605c:	002b7f19 	eoreq	r7, fp, r9, lsl pc
    6060:	01670100 	cmneq	r7, r0, lsl #2
    6064:	000000b8 	strheq	r0, [r0], -r8
    6068:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    606c:	00002b29 	andeq	r2, r0, r9, lsr #22
    6070:	b8016801 	stmdalt	r1, {r0, fp, sp, lr}
    6074:	02000000 	andeq	r0, r0, #0
    6078:	e4196491 	ldr	r6, [r9], #-1169	; 0x491
    607c:	0100002e 	tsteq	r0, lr, lsr #32
    6080:	00b80169 	adcseq	r0, r8, r9, ror #2
    6084:	91020000 	mrsls	r0, (UNDEF: 2)
    6088:	04150060 	ldreq	r0, [r5], #-96	; 0x60
    608c:	00000306 	andeq	r0, r0, r6, lsl #6
    6090:	04a30415 	strteq	r0, [r3], #1045	; 0x415
    6094:	3e160000 	cdpcc	0, 1, cr0, cr6, cr0, {0}
    6098:	0100002e 	tsteq	r0, lr, lsr #32
    609c:	568c01af 	strpl	r0, [ip], pc, lsr #3
    60a0:	00740800 	rsbseq	r0, r4, r0, lsl #16
    60a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    60a8:	000007ee 	andeq	r0, r0, lr, ror #15
    60ac:	002ea717 	eoreq	sl, lr, r7, lsl r7
    60b0:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
    60b4:	000007c2 	andeq	r0, r0, r2, asr #15
    60b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    60bc:	0030d116 	eorseq	sp, r0, r6, lsl r1
    60c0:	01e00100 	mvneq	r0, r0, lsl #2
    60c4:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
    60c8:	00000036 	andeq	r0, r0, r6, lsr r0
    60cc:	08239c01 	stmdaeq	r3!, {r0, sl, fp, ip, pc}
    60d0:	bc170000 	ldclt	0, cr0, [r7], {-0}
    60d4:	0100002b 	tsteq	r0, fp, lsr #32
    60d8:	07bc01e0 	ldreq	r0, [ip, r0, ror #3]!
    60dc:	91020000 	mrsls	r0, (UNDEF: 2)
    60e0:	05b81774 	ldreq	r1, [r8, #1908]!	; 0x774
    60e4:	e0010000 	and	r0, r1, r0
    60e8:	00013801 	andeq	r3, r1, r1, lsl #16
    60ec:	73910200 	orrsvc	r0, r1, #0, 4
    60f0:	2de11800 	stclcs	8, cr1, [r1]
    60f4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    60f8:	0004cf01 	andeq	ip, r4, r1, lsl #30
    60fc:	00573800 	subseq	r3, r7, r0, lsl #16
    6100:	00004008 	andeq	r4, r0, r8
    6104:	4d9c0100 	ldfmis	f0, [ip]
    6108:	19000008 	stmdbne	r0, {r3}
    610c:	00002db5 			; <UNDEFINED> instruction: 0x00002db5
    6110:	cf01fb01 	svcgt	0x0001fb01
    6114:	02000004 	andeq	r0, r0, #4
    6118:	16007091 			; <UNDEFINED> instruction: 0x16007091
    611c:	00002dc9 	andeq	r2, r0, r9, asr #27
    6120:	78020c01 	stmdavc	r2, {r0, sl, fp}
    6124:	1e080057 	mcrne	0, 0, r0, cr8, cr7, {2}
    6128:	01000000 	mrseq	r0, (UNDEF: 0)
    612c:	0008739c 	muleq	r8, ip, r3
    6130:	2db51700 	ldccs	7, cr1, [r5]
    6134:	0c010000 	stceq	0, cr0, [r1], {-0}
    6138:	00087302 	andeq	r7, r8, r2, lsl #6
    613c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6140:	cf041500 	svcgt	0x00041500
    6144:	18000004 	stmdane	r0, {r2}
    6148:	00002bef 	andeq	r2, r0, pc, ror #23
    614c:	0a021d01 	beq	8d558 <_Min_Stack_Size+0x8d158>
    6150:	98000001 	stmdals	r0, {r0}
    6154:	30080057 	andcc	r0, r8, r7, asr r0
    6158:	01000000 	mrseq	r0, (UNDEF: 0)
    615c:	0008b29c 	muleq	r8, ip, r2
    6160:	2efc1700 	cdpcs	7, 15, cr1, cr12, cr0, {0}
    6164:	1d010000 	stcne	0, cr0, [r1, #-0]
    6168:	0000b802 	andeq	fp, r0, r2, lsl #16
    616c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6170:	0008a319 	andeq	sl, r8, r9, lsl r3
    6174:	021f0100 	andseq	r0, pc, #0, 2
    6178:	0000010a 	andeq	r0, r0, sl, lsl #2
    617c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    6180:	0029b816 	eoreq	fp, r9, r6, lsl r8
    6184:	02380100 	eorseq	r0, r8, #0, 2
    6188:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
    618c:	0000007c 	andeq	r0, r0, ip, ror r0
    6190:	09149c01 	ldmdbeq	r4, {r0, sl, fp, ip, pc}
    6194:	bc170000 	ldclt	0, cr0, [r7], {-0}
    6198:	0100002b 	tsteq	r0, fp, lsr #32
    619c:	07bc0238 			; <UNDEFINED> instruction: 0x07bc0238
    61a0:	91020000 	mrsls	r0, (UNDEF: 2)
    61a4:	2a1d176c 	bcs	74bf5c <_Min_Stack_Size+0x74bb5c>
    61a8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    61ac:	00091402 	andeq	r1, r9, r2, lsl #8
    61b0:	68910200 	ldmvs	r1, {r9}
    61b4:	0005b817 	andeq	fp, r5, r7, lsl r8
    61b8:	02380100 	eorseq	r0, r8, #0, 2
    61bc:	00000138 	andeq	r0, r0, r8, lsr r1
    61c0:	19679102 	stmdbne	r7!, {r1, r8, ip, pc}^
    61c4:	00002c12 	andeq	r2, r0, r2, lsl ip
    61c8:	b8023a01 	stmdalt	r2, {r0, r9, fp, ip, sp}
    61cc:	02000000 	andeq	r0, r0, #0
    61d0:	87197491 			; <UNDEFINED> instruction: 0x87197491
    61d4:	0100002b 	tsteq	r0, fp, lsr #32
    61d8:	00b8023b 	adcseq	r0, r8, fp, lsr r2
    61dc:	91020000 	mrsls	r0, (UNDEF: 2)
    61e0:	04150070 	ldreq	r0, [r5], #-112	; 0x70
    61e4:	0000053f 	andeq	r0, r0, pc, lsr r5
    61e8:	002ffe16 	eoreq	pc, pc, r6, lsl lr	; <UNPREDICTABLE>
    61ec:	025f0100 	subseq	r0, pc, #0, 2
    61f0:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
    61f4:	00000024 	andeq	r0, r0, r4, lsr #32
    61f8:	09409c01 	stmdbeq	r0, {r0, sl, fp, ip, pc}^
    61fc:	1d170000 	ldcne	0, cr0, [r7, #-0]
    6200:	0100002a 	tsteq	r0, sl, lsr #32
    6204:	0914025f 	ldmdbeq	r4, {r0, r1, r2, r3, r4, r6, r9}
    6208:	91020000 	mrsls	r0, (UNDEF: 2)
    620c:	94160074 	ldrls	r0, [r6], #-116	; 0x74
    6210:	0100002d 	tsteq	r0, sp, lsr #32
    6214:	58680271 	stmdapl	r8!, {r0, r4, r5, r6, r9}^
    6218:	00400800 	subeq	r0, r0, r0, lsl #16
    621c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6220:	00000975 	andeq	r0, r0, r5, ror r9
    6224:	002bbc17 	eoreq	fp, fp, r7, lsl ip
    6228:	02710100 	rsbseq	r0, r1, #0, 2
    622c:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6230:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6234:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    6238:	38027101 	stmdacc	r2, {r0, r8, ip, sp, lr}
    623c:	02000001 	andeq	r0, r0, #1
    6240:	16007391 			; <UNDEFINED> instruction: 0x16007391
    6244:	000029e2 	andeq	r2, r0, r2, ror #19
    6248:	a8028e01 	stmdage	r2, {r0, r9, sl, fp, pc}
    624c:	4c080058 	stcmi	0, cr0, [r8], {88}	; 0x58
    6250:	01000000 	mrseq	r0, (UNDEF: 0)
    6254:	0009d79c 	muleq	r9, ip, r7
    6258:	2bbc1700 	blcs	fef0be60 <_estack+0xdeedbe60>
    625c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6260:	0007bc02 	andeq	fp, r7, r2, lsl #24
    6264:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6268:	002ce117 	eoreq	lr, ip, r7, lsl r1
    626c:	028e0100 	addeq	r0, lr, #0, 2
    6270:	000009d7 	ldrdeq	r0, [r0], -r7
    6274:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    6278:	00003113 	andeq	r3, r0, r3, lsl r1
    627c:	b8029001 	stmdalt	r2, {r0, ip, pc}
    6280:	02000000 	andeq	r0, r0, #0
    6284:	721a7491 	andsvc	r7, sl, #-1862270976	; 0x91000000
    6288:	01006465 	tsteq	r0, r5, ror #8
    628c:	00b80291 	umlalseq	r0, r8, r1, r2
    6290:	91020000 	mrsls	r0, (UNDEF: 2)
    6294:	2e9f1970 	mrccs	9, 4, r1, cr15, cr0, {3}
    6298:	92010000 	andls	r0, r1, #0
    629c:	0000b802 	andeq	fp, r0, r2, lsl #16
    62a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    62a4:	83041500 	movwhi	r1, #17664	; 0x4500
    62a8:	16000005 	strne	r0, [r0], -r5
    62ac:	00002e75 	andeq	r2, r0, r5, ror lr
    62b0:	f402a901 	vst2.8	{d10,d12}, [r2], r1
    62b4:	2a080058 	bcs	20641c <_Min_Stack_Size+0x20601c>
    62b8:	01000000 	mrseq	r0, (UNDEF: 0)
    62bc:	000a039c 	muleq	sl, ip, r3
    62c0:	2ce11700 	stclcs	7, cr1, [r1]
    62c4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    62c8:	0009d702 	andeq	sp, r9, r2, lsl #14
    62cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62d0:	31191600 	tstcc	r9, r0, lsl #12
    62d4:	bd010000 	stclt	0, cr0, [r1, #-0]
    62d8:	00592002 	subseq	r2, r9, r2
    62dc:	0000dc08 	andeq	sp, r0, r8, lsl #24
    62e0:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    62e4:	1700000a 	strne	r0, [r0, -sl]
    62e8:	00002bbc 			; <UNDEFINED> instruction: 0x00002bbc
    62ec:	bc02bd01 	stclt	13, cr11, [r2], {1}
    62f0:	02000007 	andeq	r0, r0, #7
    62f4:	82175c91 	andshi	r5, r7, #37120	; 0x9100
    62f8:	0100002f 	tsteq	r0, pc, lsr #32
    62fc:	00a202bd 	strhteq	r0, [r2], sp
    6300:	91020000 	mrsls	r0, (UNDEF: 2)
    6304:	2f8a175a 	svccs	0x008a175a
    6308:	bd010000 	stclt	0, cr0, [r1, #-0]
    630c:	0000a202 	andeq	sl, r0, r2, lsl #4
    6310:	58910200 	ldmpl	r1, {r9}
    6314:	002f2119 	eoreq	r2, pc, r9, lsl r1	; <UNPREDICTABLE>
    6318:	02c00100 	sbceq	r0, r0, #0, 2
    631c:	000000b8 	strheq	r0, [r0], -r8
    6320:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    6324:	00000790 	muleq	r0, r0, r7
    6328:	b802c001 	stmdalt	r2, {r0, lr, pc}
    632c:	02000000 	andeq	r0, r0, #0
    6330:	aa197491 	bge	66357c <_Min_Stack_Size+0x66317c>
    6334:	0100002f 	tsteq	r0, pc, lsr #32
    6338:	00b802c1 	adcseq	r0, r8, r1, asr #5
    633c:	91020000 	mrsls	r0, (UNDEF: 2)
    6340:	2c00196c 	stccs	9, cr1, [r0], {108}	; 0x6c
    6344:	c2010000 	andgt	r0, r1, #0
    6348:	0000b802 	andeq	fp, r0, r2, lsl #16
    634c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6350:	002b5819 	eoreq	r5, fp, r9, lsl r8
    6354:	02c30100 	sbceq	r0, r3, #0, 2
    6358:	000000b8 	strheq	r0, [r0], -r8
    635c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    6360:	00003091 	muleq	r0, r1, r0
    6364:	b802c401 	stmdalt	r2, {r0, sl, lr, pc}
    6368:	02000000 	andeq	r0, r0, #0
    636c:	16006091 			; <UNDEFINED> instruction: 0x16006091
    6370:	00002e89 	andeq	r2, r0, r9, lsl #29
    6374:	fc02fa01 	stc2	10, cr15, [r2], {1}
    6378:	1c080059 	stcne	0, cr0, [r8], {89}	; 0x59
    637c:	01000000 	mrseq	r0, (UNDEF: 0)
    6380:	000ad69c 	muleq	sl, ip, r6
    6384:	2bbc1700 	blcs	fef0bf8c <_estack+0xdeedbf8c>
    6388:	fa010000 	blx	46390 <_Min_Stack_Size+0x45f90>
    638c:	0007bc02 	andeq	fp, r7, r2, lsl #24
    6390:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6394:	002e0617 	eoreq	r0, lr, r7, lsl r6
    6398:	02fa0100 	rscseq	r0, sl, #0, 2
    639c:	00000097 	muleq	r0, r7, r0
    63a0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    63a4:	002f3916 	eoreq	r3, pc, r6, lsl r9	; <UNPREDICTABLE>
    63a8:	03090100 	movweq	r0, #37120	; 0x9100
    63ac:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
    63b0:	0000001a 	andeq	r0, r0, sl, lsl r0
    63b4:	0b0b9c01 	bleq	2ed3c0 <_Min_Stack_Size+0x2ecfc0>
    63b8:	bc170000 	ldclt	0, cr0, [r7], {-0}
    63bc:	0100002b 	tsteq	r0, fp, lsr #32
    63c0:	07bc0309 	ldreq	r0, [ip, r9, lsl #6]!
    63c4:	91020000 	mrsls	r0, (UNDEF: 2)
    63c8:	13b81774 			; <UNDEFINED> instruction: 0x13b81774
    63cc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    63d0:	0000b803 	andeq	fp, r0, r3, lsl #16
    63d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    63d8:	2b491600 	blcs	124bbe0 <_Min_Stack_Size+0x124b7e0>
    63dc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    63e0:	005a3403 	subseq	r3, sl, r3, lsl #8
    63e4:	0000ca08 	andeq	ip, r0, r8, lsl #20
    63e8:	a99c0100 	ldmibge	ip, {r8}
    63ec:	1700000b 	strne	r0, [r0, -fp]
    63f0:	00002bbc 			; <UNDEFINED> instruction: 0x00002bbc
    63f4:	bc031901 	stclt	9, cr1, [r3], {1}
    63f8:	02000007 	andeq	r0, r0, #7
    63fc:	4a175c91 	bmi	5dd648 <_Min_Stack_Size+0x5dd248>
    6400:	01000031 	tsteq	r0, r1, lsr r0
    6404:	00b80319 	adcseq	r0, r8, r9, lsl r3
    6408:	91020000 	mrsls	r0, (UNDEF: 2)
    640c:	29cf1758 	stmibcs	pc, {r3, r4, r6, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    6410:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    6414:	0000b803 	andeq	fp, r0, r3, lsl #16
    6418:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    641c:	00079019 	andeq	r9, r7, r9, lsl r0
    6420:	031c0100 	tsteq	ip, #0, 2
    6424:	00000097 	muleq	r0, r7, r0
    6428:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
    642c:	00002f21 	andeq	r2, r0, r1, lsr #30
    6430:	b8031d01 	stmdalt	r3, {r0, r8, sl, fp, ip}
    6434:	02000000 	andeq	r0, r0, #0
    6438:	aa197091 	bge	662684 <_Min_Stack_Size+0x662284>
    643c:	0100002f 	tsteq	r0, pc, lsr #32
    6440:	00b8031e 	adcseq	r0, r8, lr, lsl r3
    6444:	91020000 	mrsls	r0, (UNDEF: 2)
    6448:	2c00196c 	stccs	9, cr1, [r0], {108}	; 0x6c
    644c:	1f010000 	svcne	0x00010000
    6450:	0000b803 	andeq	fp, r0, r3, lsl #16
    6454:	68910200 	ldmvs	r1, {r9}
    6458:	002b5819 	eoreq	r5, fp, r9, lsl r8
    645c:	03200100 	teqeq	r0, #0, 2
    6460:	000000b8 	strheq	r0, [r0], -r8
    6464:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    6468:	00003091 	muleq	r0, r1, r0
    646c:	b8032101 	stmdalt	r3, {r0, r8, sp}
    6470:	02000000 	andeq	r0, r0, #0
    6474:	16006091 			; <UNDEFINED> instruction: 0x16006091
    6478:	00002a8d 	andeq	r2, r0, sp, lsl #21
    647c:	00035701 	andeq	r5, r3, r1, lsl #14
    6480:	c008005b 	andgt	r0, r8, fp, asr r0
    6484:	01000000 	mrseq	r0, (UNDEF: 0)
    6488:	000bfc9c 	muleq	fp, ip, ip
    648c:	2bbc1700 	blcs	fef0c094 <_estack+0xdeedc094>
    6490:	57010000 	strpl	r0, [r1, -r0]
    6494:	0007bc03 	andeq	fp, r7, r3, lsl #24
    6498:	6c910200 	lfmvs	f0, 4, [r1], {0}
    649c:	00302e17 	eorseq	r2, r0, r7, lsl lr
    64a0:	03570100 	cmpeq	r7, #0, 2
    64a4:	000000b8 	strheq	r0, [r0], -r8
    64a8:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    64ac:	00000790 	muleq	r0, r0, r7
    64b0:	97035a01 	strls	r5, [r3, -r1, lsl #20]
    64b4:	02000000 	andeq	r0, r0, #0
    64b8:	21197791 			; <UNDEFINED> instruction: 0x21197791
    64bc:	0100002f 	tsteq	r0, pc, lsr #32
    64c0:	00b8035b 	adcseq	r0, r8, fp, asr r3
    64c4:	91020000 	mrsls	r0, (UNDEF: 2)
    64c8:	2c160070 	ldccs	0, cr0, [r6], {112}	; 0x70
    64cc:	01000031 	tsteq	r0, r1, lsr r0
    64d0:	5bc003c9 	blpl	ff0073fc <_estack+0xdefd73fc>
    64d4:	003c0800 	eorseq	r0, ip, r0, lsl #16
    64d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    64dc:	00000c31 	andeq	r0, r0, r1, lsr ip
    64e0:	002d7717 	eoreq	r7, sp, r7, lsl r7
    64e4:	03c90100 	biceq	r0, r9, #0, 2
    64e8:	000000b8 	strheq	r0, [r0], -r8
    64ec:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    64f0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    64f4:	3803c901 	stmdacc	r3, {r0, r8, fp, lr, pc}
    64f8:	02000001 	andeq	r0, r0, #1
    64fc:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    6500:	00002e53 	andeq	r2, r0, r3, asr lr
    6504:	0a03e301 	beq	ff110 <_Min_Stack_Size+0xfed10>
    6508:	fc000001 	stc2	0, cr0, [r0], {1}
    650c:	3408005b 	strcc	r0, [r8], #-91	; 0x5b
    6510:	01000000 	mrseq	r0, (UNDEF: 0)
    6514:	000c6a9c 	muleq	ip, ip, sl
    6518:	303a1700 	eorscc	r1, sl, r0, lsl #14
    651c:	e3010000 	movw	r0, #4096	; 0x1000
    6520:	0000b803 	andeq	fp, r0, r3, lsl #16
    6524:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6528:	0008a319 	andeq	sl, r8, r9, lsl r3
    652c:	03e50100 	mvneq	r0, #0, 2
    6530:	0000010a 	andeq	r0, r0, sl, lsl #2
    6534:	00779102 	rsbseq	r9, r7, r2, lsl #2
    6538:	002a0e16 	eoreq	r0, sl, r6, lsl lr
    653c:	03ff0100 	mvnseq	r0, #0, 2
    6540:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
    6544:	0000001c 	andeq	r0, r0, ip, lsl r0
    6548:	0c909c01 	ldceq	12, cr9, [r0], {1}
    654c:	3a170000 	bcc	5c6554 <_Min_Stack_Size+0x5c6154>
    6550:	01000030 	tsteq	r0, r0, lsr r0
    6554:	00b803ff 	ldrshteq	r0, [r8], pc
    6558:	91020000 	mrsls	r0, (UNDEF: 2)
    655c:	55180074 	ldrpl	r0, [r8, #-116]	; 0x74
    6560:	0100002c 	tsteq	r0, ip, lsr #32
    6564:	01160412 	tsteq	r6, r2, lsl r4
    6568:	5c4c0000 	marpl	acc0, r0, ip
    656c:	00500800 	subseq	r0, r0, r0, lsl #16
    6570:	9c010000 	stcls	0, cr0, [r1], {-0}
    6574:	00000cc9 	andeq	r0, r0, r9, asr #25
    6578:	002d7717 	eoreq	r7, sp, r7, lsl r7
    657c:	04120100 	ldreq	r0, [r2], #-256	; 0x100
    6580:	000000b8 	strheq	r0, [r0], -r8
    6584:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    6588:	000008a3 	andeq	r0, r0, r3, lsr #17
    658c:	16041401 	strne	r1, [r4], -r1, lsl #8
    6590:	02000001 	andeq	r0, r0, #1
    6594:	16007791 			; <UNDEFINED> instruction: 0x16007791
    6598:	00002ecd 	andeq	r2, r0, sp, asr #29
    659c:	9c043801 	stcls	8, cr3, [r4], {1}
    65a0:	1c08005c 	stcne	0, cr0, [r8], {92}	; 0x5c
    65a4:	01000000 	mrseq	r0, (UNDEF: 0)
    65a8:	000cef9c 	muleq	ip, ip, pc	; <UNPREDICTABLE>
    65ac:	2d771700 	ldclcs	7, cr1, [r7, #-0]
    65b0:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    65b4:	0000b804 	andeq	fp, r0, r4, lsl #16
    65b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    65bc:	01561b00 	cmpeq	r6, r0, lsl #22
    65c0:	a7060000 	strge	r0, [r6, -r0]
    65c4:	0000ef06 	andeq	lr, r0, r6, lsl #30
    65c8:	0c860000 	stceq	0, cr0, [r6], {0}
    65cc:	00040000 	andeq	r0, r4, r0
    65d0:	000012f9 	strdeq	r1, [r0], -r9
    65d4:	00210104 	eoreq	r0, r1, r4, lsl #2
    65d8:	26010000 	strcs	r0, [r1], -r0
    65dc:	0c000039 	stceq	0, cr0, [r0], {57}	; 0x39
    65e0:	60000001 	andvs	r0, r0, r1
    65e4:	00000008 	andeq	r0, r0, r8
    65e8:	e4000000 	str	r0, [r0], #-0
    65ec:	0200002c 	andeq	r0, r0, #44	; 0x2c
    65f0:	01450601 	cmpeq	r5, r1, lsl #12
    65f4:	01020000 	mrseq	r0, (UNDEF: 2)
    65f8:	00014308 	andeq	r4, r1, r8, lsl #6
    65fc:	05020200 	streq	r0, [r2, #-512]	; 0x200
    6600:	0000017f 	andeq	r0, r0, pc, ror r1
    6604:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    6608:	03000000 	movweq	r0, #0
    660c:	0000016f 	andeq	r0, r0, pc, ror #2
    6610:	004c3f02 	subeq	r3, ip, r2, lsl #30
    6614:	04020000 	streq	r0, [r2], #-0
    6618:	00000505 	andeq	r0, r0, r5, lsl #10
    661c:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
    6620:	41020000 	mrsmi	r0, (UNDEF: 2)
    6624:	0000005e 	andeq	r0, r0, lr, asr r0
    6628:	26070402 	strcs	r0, [r7], -r2, lsl #8
    662c:	02000001 	andeq	r0, r0, #1
    6630:	00000508 	andeq	r0, r0, r8, lsl #10
    6634:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6638:	00012107 	andeq	r2, r1, r7, lsl #2
    663c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    6640:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6644:	2b070402 	blcs	1c7654 <_Min_Stack_Size+0x1c7254>
    6648:	03000001 	movweq	r0, #1
    664c:	00000171 	andeq	r0, r0, r1, ror r1
    6650:	00414103 	subeq	r4, r1, r3, lsl #2
    6654:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    6658:	03000004 	movweq	r0, #4
    665c:	00005342 	andeq	r5, r0, r2, asr #6
    6660:	008c0500 	addeq	r0, ip, r0, lsl #10
    6664:	00a70000 	adceq	r0, r7, r0
    6668:	a7060000 	strge	r0, [r6, -r0]
    666c:	07000000 	streq	r0, [r0, -r0]
    6670:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6674:	00000192 	muleq	r0, r2, r1
    6678:	00008c07 	andeq	r8, r0, r7, lsl #24
    667c:	008c0500 	addeq	r0, ip, r0, lsl #10
    6680:	00c30000 	sbceq	r0, r3, r0
    6684:	a7060000 	strge	r0, [r6, -r0]
    6688:	01000000 	mrseq	r0, (UNDEF: 0)
    668c:	00810700 	addeq	r0, r1, r0, lsl #14
    6690:	01080000 	mrseq	r0, (UNDEF: 8)
    6694:	de01f704 	cdple	7, 0, cr15, cr1, cr4, {0}
    6698:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    669c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    66a0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    66a4:	00010054 	andeq	r0, r1, r4, asr r0
    66a8:	001dc80b 	andseq	ip, sp, fp, lsl #16
    66ac:	01f70400 	mvnseq	r0, r0, lsl #8
    66b0:	000000c8 	andeq	r0, r0, r8, asr #1
    66b4:	004d160b 	subeq	r1, sp, fp, lsl #12
    66b8:	01f70400 	mvnseq	r0, r0, lsl #8
    66bc:	000000c8 	andeq	r0, r0, r8, asr #1
    66c0:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    66c4:	00010c01 	andeq	r0, r1, r1, lsl #24
    66c8:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    66cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    66d0:	0000071e 	andeq	r0, r0, lr, lsl r7
    66d4:	ef0b0001 	svc	0x000b0001
    66d8:	04000006 	streq	r0, [r0], #-6
    66dc:	00f601f9 	ldrshteq	r0, [r6], #25
    66e0:	200c0000 	andcs	r0, ip, r0
    66e4:	2f038b04 	svccs	0x00038b04
    66e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    66ec:	00003a7d 	andeq	r3, r0, sp, ror sl
    66f0:	2f038d04 	svccs	0x00038d04
    66f4:	00000001 	andeq	r0, r0, r1
    66f8:	00970700 	addseq	r0, r7, r0, lsl #14
    66fc:	da0b0000 	ble	2c6704 <_Min_Stack_Size+0x2c6304>
    6700:	04000032 	streq	r0, [r0], #-50	; 0x32
    6704:	0118038e 	tsteq	r8, lr, lsl #7
    6708:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    670c:	57039404 	strpl	r9, [r3, -r4, lsl #8]
    6710:	0d000001 	stceq	0, cr0, [r0, #-4]
    6714:	00003817 	andeq	r3, r0, r7, lsl r8
    6718:	67039604 	strvs	r9, [r3, -r4, lsl #12]
    671c:	00000001 	andeq	r0, r0, r1
    6720:	008c0500 	addeq	r0, ip, r0, lsl #10
    6724:	01670000 	cmneq	r7, r0
    6728:	a7060000 	strge	r0, [r6, -r0]
    672c:	06000000 	streq	r0, [r0], -r0
    6730:	01570700 	cmpeq	r7, r0, lsl #14
    6734:	130b0000 	movwne	r0, #45056	; 0xb000
    6738:	04000037 	streq	r0, [r0], #-55	; 0x37
    673c:	01400397 			; <UNDEFINED> instruction: 0x01400397
    6740:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    6744:	d0039d04 	andle	r9, r3, r4, lsl #26
    6748:	0d000001 	stceq	0, cr0, [r0, #-4]
    674c:	00003617 	andeq	r3, r0, r7, lsl r6
    6750:	ae039f04 	cdpge	15, 0, cr9, cr3, cr4, {0}
    6754:	00000000 	andeq	r0, r0, r0
    6758:	3252530e 	subscc	r5, r2, #939524096	; 0x38000000
    675c:	03a00400 	moveq	r0, #0, 8
    6760:	000000ae 	andeq	r0, r0, lr, lsr #1
    6764:	31b20d04 			; <UNDEFINED> instruction: 0x31b20d04
    6768:	a1040000 	mrsge	r0, (UNDEF: 4)
    676c:	0000ae03 	andeq	sl, r0, r3, lsl #28
    6770:	810d0800 	tsthi	sp, r0, lsl #16
    6774:	04000036 	streq	r0, [r0], #-54	; 0x36
    6778:	00ae03a2 	adceq	r0, lr, r2, lsr #7
    677c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6780:	000004ac 	andeq	r0, r0, ip, lsr #9
    6784:	8c03a304 	stchi	3, cr10, [r3], {4}
    6788:	10000000 	andne	r0, r0, r0
    678c:	00335d0d 	eorseq	r5, r3, sp, lsl #26
    6790:	03a40400 			; <UNDEFINED> instruction: 0x03a40400
    6794:	000000ae 	andeq	r0, r0, lr, lsr #1
    6798:	860b0014 			; <UNDEFINED> instruction: 0x860b0014
    679c:	04000034 	streq	r0, [r0], #-52	; 0x34
    67a0:	017803a5 	cmneq	r8, r5, lsr #7
    67a4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    67a8:	3403ab04 	strcc	sl, [r3], #-2820	; 0xb04
    67ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    67b0:	0000361c 	andeq	r3, r0, ip, lsl r6
    67b4:	ae03ad04 	cdpge	13, 0, cr10, cr3, cr4, {0}
    67b8:	00000000 	andeq	r0, r0, r0
    67bc:	3352530e 	cmpcc	r2, #939524096	; 0x38000000
    67c0:	03ae0400 			; <UNDEFINED> instruction: 0x03ae0400
    67c4:	000000ae 	andeq	r0, r0, lr, lsr #1
    67c8:	322e0d04 	eorcc	r0, lr, #4, 26	; 0x100
    67cc:	af040000 	svcge	0x00040000
    67d0:	0000ae03 	andeq	sl, r0, r3, lsl #28
    67d4:	870d0800 	strhi	r0, [sp, -r0, lsl #16]
    67d8:	04000036 	streq	r0, [r0], #-54	; 0x36
    67dc:	00ae03b0 	strhteq	r0, [lr], r0
    67e0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    67e4:	000004ac 	andeq	r0, r0, ip, lsr #9
    67e8:	8c03b104 	stfhid	f3, [r3], {4}
    67ec:	10000000 	andne	r0, r0, r0
    67f0:	0033300d 	eorseq	r3, r3, sp
    67f4:	03b20400 			; <UNDEFINED> instruction: 0x03b20400
    67f8:	000000ae 	andeq	r0, r0, lr, lsr #1
    67fc:	de0b0014 	mcrle	0, 0, r0, cr11, cr4, {0}
    6800:	04000036 	streq	r0, [r0], #-54	; 0x36
    6804:	01dc03b3 	ldrheq	r0, [ip, #51]	; 0x33
    6808:	140c0000 	strne	r0, [ip], #-0
    680c:	8b03b904 	blhi	f4c24 <_Min_Stack_Size+0xf4824>
    6810:	0d000002 	stceq	0, cr0, [r0, #-8]
    6814:	00003621 	andeq	r3, r0, r1, lsr #12
    6818:	ae03bb04 	vmlage.f64	d11, d3, d4
    681c:	00000000 	andeq	r0, r0, r0
    6820:	3452530e 	ldrbcc	r5, [r2], #-782	; 0x30e
    6824:	03bc0400 			; <UNDEFINED> instruction: 0x03bc0400
    6828:	000000ae 	andeq	r0, r0, lr, lsr #1
    682c:	31c90d04 	biccc	r0, r9, r4, lsl #26
    6830:	bd040000 	stclt	0, cr0, [r4, #-0]
    6834:	0000ae03 	andeq	sl, r0, r3, lsl #28
    6838:	e80d0800 	stmda	sp, {fp}
    683c:	04000037 	streq	r0, [r0], #-55	; 0x37
    6840:	00ae03be 	strhteq	r0, [lr], lr
    6844:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6848:	00003a55 	andeq	r3, r0, r5, asr sl
    684c:	ae03bf04 	cdpge	15, 0, cr11, cr3, cr4, {0}
    6850:	10000000 	andne	r0, r0, r0
    6854:	37510b00 	ldrbcc	r0, [r1, -r0, lsl #22]
    6858:	c0040000 	andgt	r0, r4, r0
    685c:	00024003 	andeq	r4, r2, r3
    6860:	041c0c00 	ldreq	r0, [ip], #-3072	; 0xc00
    6864:	02e203c6 	rsceq	r0, r2, #402653187	; 0x18000003
    6868:	dd0d0000 	stcle	0, cr0, [sp, #-0]
    686c:	04000031 	streq	r0, [r0], #-49	; 0x31
    6870:	02e203c8 	rsceq	r0, r2, #200, 6	; 0x20000003
    6874:	0d000000 	stceq	0, cr0, [r0, #-0]
    6878:	000032f1 	strdeq	r3, [r0], -r1
    687c:	e703c904 	str	ip, [r3, -r4, lsl #18]
    6880:	08000002 	stmdaeq	r0, {r1}
    6884:	0034d70d 	eorseq	sp, r4, sp, lsl #14
    6888:	03ca0400 	biceq	r0, sl, #0, 8
    688c:	000000ae 	andeq	r0, r0, lr, lsr #1
    6890:	32660d10 	rsbcc	r0, r6, #16, 26	; 0x400
    6894:	cb040000 	blgt	10689c <_Min_Stack_Size+0x10649c>
    6898:	0000ae03 	andeq	sl, r0, r3, lsl #28
    689c:	ec0d1400 	cfstrs	mvf1, [sp], {-0}
    68a0:	04000032 	streq	r0, [r0], #-50	; 0x32
    68a4:	00ae03cc 	adceq	r0, lr, ip, asr #7
    68a8:	00180000 	andseq	r0, r8, r0
    68ac:	0000b307 	andeq	fp, r0, r7, lsl #6
    68b0:	00b30700 	adcseq	r0, r3, r0, lsl #14
    68b4:	e20b0000 	and	r0, fp, #0
    68b8:	04000031 	streq	r0, [r0], #-49	; 0x31
    68bc:	029703cd 	addseq	r0, r7, #872415235	; 0x34000003
    68c0:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    68c4:	03552f05 	cmpeq	r5, #5, 30
    68c8:	c1100000 	tstgt	r0, r0
    68cc:	05000037 	streq	r0, [r0, #-55]	; 0x37
    68d0:	00008c31 	andeq	r8, r0, r1, lsr ip
    68d4:	f8100000 			; <UNDEFINED> instruction: 0xf8100000
    68d8:	05000035 	streq	r0, [r0, #-53]	; 0x35
    68dc:	00008c36 	andeq	r8, r0, r6, lsr ip
    68e0:	43100400 	tstmi	r0, #0, 8
    68e4:	05000034 	streq	r0, [r0, #-52]	; 0x34
    68e8:	00008c3b 	andeq	r8, r0, fp, lsr ip
    68ec:	b0100800 	andslt	r0, r0, r0, lsl #16
    68f0:	05000035 	streq	r0, [r0, #-53]	; 0x35
    68f4:	00008c40 	andeq	r8, r0, r0, asr #24
    68f8:	6d100c00 	ldcvs	12, cr0, [r0, #-0]
    68fc:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6900:	00008c45 	andeq	r8, r0, r5, asr #24
    6904:	62101000 	andsvs	r1, r0, #0
    6908:	05000038 	streq	r0, [r0, #-56]	; 0x38
    690c:	00008c49 	andeq	r8, r0, r9, asr #24
    6910:	a2101400 	andsge	r1, r0, #0, 8
    6914:	05000036 	streq	r0, [r0, #-54]	; 0x36
    6918:	00008c51 	andeq	r8, r0, r1, asr ip
    691c:	03001800 	movweq	r1, #2048	; 0x800
    6920:	000036c1 	andeq	r3, r0, r1, asr #13
    6924:	02f85305 	rscseq	r5, r8, #335544320	; 0x14000000
    6928:	400f0000 	andmi	r0, pc, r0
    692c:	04295805 	strteq	r5, [r9], #-2053	; 0x805
    6930:	3b100000 	blcc	406938 <_Min_Stack_Size+0x406538>
    6934:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6938:	00008c5a 	andeq	r8, r0, sl, asr ip
    693c:	5a100000 	bpl	406944 <_Min_Stack_Size+0x406544>
    6940:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6944:	00008c5d 	andeq	r8, r0, sp, asr ip
    6948:	ee100400 	cfmuls	mvf0, mvf0, mvf0
    694c:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6950:	00008c61 	andeq	r8, r0, r1, ror #24
    6954:	76100800 	ldrvc	r0, [r0], -r0, lsl #16
    6958:	05000039 	streq	r0, [r0, #-57]	; 0x39
    695c:	00008c65 	andeq	r8, r0, r5, ror #24
    6960:	aa100c00 	bge	409968 <_Min_Stack_Size+0x409568>
    6964:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6968:	00008c68 	andeq	r8, r0, r8, ror #24
    696c:	34101000 	ldrcc	r1, [r0], #-0
    6970:	05000032 	streq	r0, [r0, #-50]	; 0x32
    6974:	00008c6c 	andeq	r8, r0, ip, ror #24
    6978:	44101400 	ldrmi	r1, [r0], #-1024	; 0x400
    697c:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6980:	00008c70 	andeq	r8, r0, r0, ror ip
    6984:	fe101800 	cdp2	8, 1, cr1, cr0, cr0, {0}
    6988:	05000034 	streq	r0, [r0, #-52]	; 0x34
    698c:	00008c74 	andeq	r8, r0, r4, ror ip
    6990:	90101c00 	andsls	r1, r0, r0, lsl #24
    6994:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6998:	00008c79 	andeq	r8, r0, r9, ror ip
    699c:	e9102000 	ldmdb	r0, {sp}
    69a0:	05000035 	streq	r0, [r0, #-53]	; 0x35
    69a4:	00008c7c 	andeq	r8, r0, ip, ror ip
    69a8:	b8102400 	ldmdalt	r0, {sl, sp}
    69ac:	05000031 	streq	r0, [r0, #-49]	; 0x31
    69b0:	00008c80 	andeq	r8, r0, r0, lsl #25
    69b4:	c9102800 	ldmdbgt	r0, {fp, sp}
    69b8:	05000039 	streq	r0, [r0, #-57]	; 0x39
    69bc:	00008c83 	andeq	r8, r0, r3, lsl #25
    69c0:	f0102c00 			; <UNDEFINED> instruction: 0xf0102c00
    69c4:	05000036 	streq	r0, [r0, #-54]	; 0x36
    69c8:	00008c87 	andeq	r8, r0, r7, lsl #25
    69cc:	88103000 	ldmdahi	r0, {ip, sp}
    69d0:	05000032 	streq	r0, [r0, #-50]	; 0x32
    69d4:	00008c8a 	andeq	r8, r0, sl, lsl #25
    69d8:	fd103400 	ldc2	4, cr3, [r0, #-0]
    69dc:	05000037 	streq	r0, [r0, #-55]	; 0x37
    69e0:	00042990 	muleq	r4, r0, r9
    69e4:	96103800 	ldrls	r3, [r0], -r0, lsl #16
    69e8:	05000033 	streq	r0, [r0, #-51]	; 0x33
    69ec:	00042992 	muleq	r4, r2, r9
    69f0:	11003c00 	tstne	r0, r0, lsl #24
    69f4:	00035504 	andeq	r5, r3, r4, lsl #10
    69f8:	32f60300 	rscscc	r0, r6, #0, 6
    69fc:	93050000 	movwls	r0, #20480	; 0x5000
    6a00:	00000360 	andeq	r0, r0, r0, ror #6
    6a04:	9805100f 	stmdals	r5, {r0, r1, r2, r3, ip}
    6a08:	00000473 	andeq	r0, r0, r3, ror r4
    6a0c:	00351310 	eorseq	r1, r5, r0, lsl r3
    6a10:	8c9a0500 	cfldr32hi	mvfx0, [sl], {0}
    6a14:	00000000 	andeq	r0, r0, r0
    6a18:	00384110 	eorseq	r4, r8, r0, lsl r1
    6a1c:	8ca00500 	cfstr32hi	mvfx0, [r0]
    6a20:	04000000 	streq	r0, [r0], #-0
    6a24:	00376310 	eorseq	r6, r7, r0, lsl r3
    6a28:	8ca60500 	cfstr32hi	mvfx0, [r6]
    6a2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a30:	00330d10 	eorseq	r0, r3, r0, lsl sp
    6a34:	8cad0500 	cfstr32hi	mvfx0, [sp]
    6a38:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a3c:	33750300 	cmncc	r5, #0, 6
    6a40:	b2050000 	andlt	r0, r5, #0
    6a44:	0000043a 	andeq	r0, r0, sl, lsr r4
    6a48:	b705240f 	strlt	r2, [r5, -pc, lsl #8]
    6a4c:	000004f3 	strdeq	r0, [r0], -r3
    6a50:	00373b10 	eorseq	r3, r7, r0, lsl fp
    6a54:	8cb90500 	cfldr32hi	mvfx0, [r9]
    6a58:	00000000 	andeq	r0, r0, r0
    6a5c:	003a4510 	eorseq	r4, sl, r0, lsl r5
    6a60:	8cbc0500 	cfldr32hi	mvfx0, [ip]
    6a64:	04000000 	streq	r0, [r0], #-0
    6a68:	00397610 	eorseq	r7, r9, r0, lsl r6
    6a6c:	8cbf0500 	cfldr32hi	mvfx0, [pc]	; 6a74 <_Min_Stack_Size+0x6674>
    6a70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a74:	00391e10 	eorseq	r1, r9, r0, lsl lr
    6a78:	8cc20500 	cfstr64hi	mvdx0, [r2], {0}
    6a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a80:	0038d110 	eorseq	sp, r8, r0, lsl r1
    6a84:	8cc50500 	cfstr64hi	mvdx0, [r5], {0}
    6a88:	10000000 	andne	r0, r0, r0
    6a8c:	00349810 	eorseq	r9, r4, r0, lsl r8
    6a90:	8cc80500 	cfstr64hi	mvdx0, [r8], {0}
    6a94:	14000000 	strne	r0, [r0], #-0
    6a98:	00354e10 	eorseq	r4, r5, r0, lsl lr
    6a9c:	8ccc0500 	cfstr64hi	mvdx0, [ip], {0}
    6aa0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6aa4:	00326c10 	eorseq	r6, r2, r0, lsl ip
    6aa8:	f3d00500 	vabal.u16	q8, d0, d0
    6aac:	1c000004 	stcne	0, cr0, [r0], {4}
    6ab0:	00340510 	eorseq	r0, r4, r0, lsl r5
    6ab4:	f3d20500 	vabal.u16	q8, d2, d0
    6ab8:	20000004 	andcs	r0, r0, r4
    6abc:	73041100 	movwvc	r1, #16640	; 0x4100
    6ac0:	03000004 	movweq	r0, #4
    6ac4:	000036ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    6ac8:	047ed305 	ldrbteq	sp, [lr], #-773	; 0x305
    6acc:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    6ad0:	0555d905 	ldrbeq	sp, [r5, #-2309]	; 0x905
    6ad4:	45100000 	ldrmi	r0, [r0, #-0]
    6ad8:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6adc:	00008cdb 	ldrdeq	r8, [r0], -fp
    6ae0:	98100000 	ldmdals	r0, {}	; <UNPREDICTABLE>
    6ae4:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6ae8:	00008cde 	ldrdeq	r8, [r0], -lr
    6aec:	4e100400 	cfmulsmi	mvf0, mvf0, mvf0
    6af0:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6af4:	00008ce2 	andeq	r8, r0, r2, ror #25
    6af8:	6c100800 	ldcvs	8, cr0, [r0], {-0}
    6afc:	05000032 	streq	r0, [r0, #-50]	; 0x32
    6b00:	0004f3e7 	andeq	pc, r4, r7, ror #7
    6b04:	05100c00 	ldreq	r0, [r0, #-3072]	; 0xc00
    6b08:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6b0c:	0004f3e9 	andeq	pc, r4, r9, ror #7
    6b10:	f7101000 			; <UNDEFINED> instruction: 0xf7101000
    6b14:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6b18:	0004f3eb 	andeq	pc, r4, fp, ror #7
    6b1c:	03001400 	movweq	r1, #1024	; 0x400
    6b20:	00003626 	andeq	r3, r0, r6, lsr #12
    6b24:	0504ec05 	streq	lr, [r4, #-3077]	; 0xc05
    6b28:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    6b2c:	05c1f205 	strbeq	pc, [r1, #517]	; 0x205	; <UNPREDICTABLE>
    6b30:	8a100000 	bhi	406b38 <_Min_Stack_Size+0x406738>
    6b34:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6b38:	00008cf4 	strdeq	r8, [r0], -r4
    6b3c:	ac100000 	ldcge	0, cr0, [r0], {-0}
    6b40:	05000033 	streq	r0, [r0, #-51]	; 0x33
    6b44:	00008cf8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    6b48:	1a100400 	bne	407b50 <_Min_Stack_Size+0x407750>
    6b4c:	05000032 	streq	r0, [r0, #-50]	; 0x32
    6b50:	00008cfc 	strdeq	r8, [r0], -ip
    6b54:	5f0d0800 	svcpl	0x000d0800
    6b58:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6b5c:	008c0100 	addeq	r0, ip, r0, lsl #2
    6b60:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6b64:	000032b0 			; <UNDEFINED> instruction: 0x000032b0
    6b68:	8c010505 	cfstr32hi	mvfx0, [r1], {5}
    6b6c:	10000000 	andne	r0, r0, r0
    6b70:	00363c0d 	eorseq	r3, r6, sp, lsl #24
    6b74:	01080500 	tsteq	r8, r0, lsl #10
    6b78:	0000008c 	andeq	r0, r0, ip, lsl #1
    6b7c:	34dd0d14 	ldrbcc	r0, [sp], #3348	; 0xd14
    6b80:	0c050000 	stceq	0, cr0, [r5], {-0}
    6b84:	00008c01 	andeq	r8, r0, r1, lsl #24
    6b88:	0b001800 	bleq	cb90 <_Min_Stack_Size+0xc790>
    6b8c:	00003903 	andeq	r3, r0, r3, lsl #18
    6b90:	60011005 	andvs	r1, r1, r5
    6b94:	0c000005 	stceq	0, cr0, [r0], {5}
    6b98:	01170510 	tsteq	r7, r0, lsl r5
    6b9c:	0000060b 	andeq	r0, r0, fp, lsl #12
    6ba0:	0039de0d 	eorseq	sp, r9, sp, lsl #28
    6ba4:	01190500 	tsteq	r9, r0, lsl #10
    6ba8:	0000008c 	andeq	r0, r0, ip, lsl #1
    6bac:	379d0d00 	ldrcc	r0, [sp, r0, lsl #26]
    6bb0:	1c050000 	stcne	0, cr0, [r5], {-0}
    6bb4:	00008c01 	andeq	r8, r0, r1, lsl #24
    6bb8:	700d0400 	andvc	r0, sp, r0, lsl #8
    6bbc:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6bc0:	008c011f 	addeq	r0, ip, pc, lsl r1
    6bc4:	0d080000 	stceq	0, cr0, [r8, #-0]
    6bc8:	0000324b 	andeq	r3, r0, fp, asr #4
    6bcc:	8c012305 	stchi	3, cr2, [r1], {5}
    6bd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    6bd4:	38720b00 	ldmdacc	r2!, {r8, r9, fp}^
    6bd8:	25050000 	strcs	r0, [r5, #-0]
    6bdc:	0005cd01 	andeq	ip, r5, r1, lsl #26
    6be0:	052c0c00 	streq	r0, [ip, #-3072]!	; 0xc00
    6be4:	06b0012b 	ldrteq	r0, [r0], fp, lsr #2
    6be8:	3b0d0000 	blcc	346bf0 <_Min_Stack_Size+0x3467f0>
    6bec:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6bf0:	008c012d 	addeq	r0, ip, sp, lsr #2
    6bf4:	0d000000 	stceq	0, cr0, [r0, #-0]
    6bf8:	0000368d 	andeq	r3, r0, sp, lsl #13
    6bfc:	8c013005 	stchi	0, cr3, [r1], {5}
    6c00:	04000000 	streq	r0, [r0], #-0
    6c04:	0037d60d 	eorseq	sp, r7, sp, lsl #12
    6c08:	01330500 	teqeq	r3, r0, lsl #10
    6c0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6c10:	33e00d08 	mvncc	r0, #8, 26	; 0x200
    6c14:	36050000 	strcc	r0, [r5], -r0
    6c18:	00008c01 	andeq	r8, r0, r1, lsl #24
    6c1c:	ca0d0c00 	bgt	349c24 <_Min_Stack_Size+0x349824>
    6c20:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6c24:	008c0139 	addeq	r0, ip, r9, lsr r1
    6c28:	0d100000 	ldceq	0, cr0, [r0, #-0]
    6c2c:	00003204 	andeq	r3, r0, r4, lsl #4
    6c30:	8c013c05 	stchi	12, cr3, [r1], {5}
    6c34:	14000000 	strne	r0, [r0], #-0
    6c38:	0039ae0d 	eorseq	sl, r9, sp, lsl #28
    6c3c:	013f0500 	teqeq	pc, r0, lsl #10
    6c40:	0000008c 	andeq	r0, r0, ip, lsl #1
    6c44:	38a00d18 	stmiacc	r0!, {r3, r4, r8, sl, fp}
    6c48:	42050000 	andmi	r0, r5, #0
    6c4c:	00008c01 	andeq	r8, r0, r1, lsl #24
    6c50:	c30d1c00 	movwgt	r1, #56320	; 0xdc00
    6c54:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6c58:	008c0146 	addeq	r0, ip, r6, asr #2
    6c5c:	0d200000 	stceq	0, cr0, [r0, #-0]
    6c60:	000034be 			; <UNDEFINED> instruction: 0x000034be
    6c64:	8c014a05 	stchi	10, cr4, [r1], {5}
    6c68:	24000000 	strcs	r0, [r0], #-0
    6c6c:	003a0f0d 	eorseq	r0, sl, sp, lsl #30
    6c70:	014d0500 	cmpeq	sp, r0, lsl #10
    6c74:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    6c78:	04110028 	ldreq	r0, [r1], #-40	; 0x28
    6c7c:	000005c1 	andeq	r0, r0, r1, asr #11
    6c80:	00329b0b 	eorseq	r9, r2, fp, lsl #22
    6c84:	014f0500 	cmpeq	pc, r0, lsl #10
    6c88:	00000617 	andeq	r0, r0, r7, lsl r6
    6c8c:	00336312 	eorseq	r6, r3, r2, lsl r3
    6c90:	b8820100 	stmlt	r2, {r8}
    6c94:	5808005c 	stmdapl	r8, {r2, r3, r4, r6}
    6c98:	01000000 	mrseq	r0, (UNDEF: 0)
    6c9c:	0006e69c 	muleq	r6, ip, r6
    6ca0:	373b1300 	ldrcc	r1, [fp, -r0, lsl #6]!
    6ca4:	82010000 	andhi	r0, r1, #0
    6ca8:	0000008c 	andeq	r0, r0, ip, lsl #1
    6cac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6cb0:	0036b112 	eorseq	fp, r6, r2, lsl r1
    6cb4:	109d0100 	addsne	r0, sp, r0, lsl #2
    6cb8:	9408005d 	strls	r0, [r8], #-93	; 0x5d
    6cbc:	01000001 	tsteq	r0, r1
    6cc0:	0007189c 	muleq	r7, ip, r8
    6cc4:	34551300 	ldrbcc	r1, [r5], #-768	; 0x300
    6cc8:	9d010000 	stcls	0, cr0, [r1, #-0]
    6ccc:	00000718 	andeq	r0, r0, r8, lsl r7
    6cd0:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    6cd4:	0000346b 	andeq	r3, r0, fp, ror #8
    6cd8:	008c9f01 	addeq	r9, ip, r1, lsl #30
    6cdc:	91020000 	mrsls	r0, (UNDEF: 2)
    6ce0:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    6ce4:	0000042f 	andeq	r0, r0, pc, lsr #8
    6ce8:	00333615 	eorseq	r3, r3, r5, lsl r6
    6cec:	01010100 	mrseq	r0, (UNDEF: 17)
    6cf0:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
    6cf4:	000000da 	ldrdeq	r0, [r0], -sl
    6cf8:	07449c01 	strbeq	r9, [r4, -r1, lsl #24]
    6cfc:	55160000 	ldrpl	r0, [r6, #-0]
    6d00:	01000034 	tsteq	r0, r4, lsr r0
    6d04:	07180101 	ldreq	r0, [r8, -r1, lsl #2]
    6d08:	91020000 	mrsls	r0, (UNDEF: 2)
    6d0c:	71150074 	tstvc	r5, r4, ror r0
    6d10:	01000035 	tsteq	r0, r5, lsr r0
    6d14:	5f80012e 	svcpl	0x0080012e
    6d18:	00540800 	subseq	r0, r4, r0, lsl #16
    6d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d20:	00000779 	andeq	r0, r0, r9, ror r7
    6d24:	00373b16 	eorseq	r3, r7, r6, lsl fp
    6d28:	012e0100 	teqeq	lr, r0, lsl #2
    6d2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6d30:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    6d34:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    6d38:	0c012e01 	stceq	14, cr2, [r1], {1}
    6d3c:	02000001 	andeq	r0, r0, #1
    6d40:	15007391 	strne	r7, [r0, #-913]	; 0x391
    6d44:	00003832 	andeq	r3, r0, r2, lsr r8
    6d48:	d4017701 	strle	r7, [r1], #-1793	; 0x701
    6d4c:	5c08005f 	stcpl	0, cr0, [r8], {95}	; 0x5f
    6d50:	01000000 	mrseq	r0, (UNDEF: 0)
    6d54:	00079f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    6d58:	373b1600 	ldrcc	r1, [fp, -r0, lsl #12]!
    6d5c:	77010000 	strvc	r0, [r1, -r0]
    6d60:	00008c01 	andeq	r8, r0, r1, lsl #24
    6d64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6d68:	35a31500 	strcc	r1, [r3, #1280]!	; 0x500
    6d6c:	96010000 	strls	r0, [r1], -r0
    6d70:	00603001 	rsbeq	r3, r0, r1
    6d74:	0000cc08 	andeq	ip, r0, r8, lsl #24
    6d78:	f29c0100 	vaddw.s16	q0, q6, d0
    6d7c:	16000007 	strne	r0, [r0], -r7
    6d80:	00003775 	andeq	r3, r0, r5, ror r7
    6d84:	f2019601 	vmax.s8	d9, d1, d1
    6d88:	02000007 	andeq	r0, r0, #7
    6d8c:	d0176491 	mulsle	r7, r1, r4
    6d90:	01000034 	tsteq	r0, r4, lsr r0
    6d94:	008c0198 	umulleq	r0, ip, r8, r1
    6d98:	91020000 	mrsls	r0, (UNDEF: 2)
    6d9c:	35e11774 	strbcc	r1, [r1, #1908]!	; 0x774
    6da0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    6da4:	00008c01 	andeq	r8, r0, r1, lsl #24
    6da8:	70910200 	addsvc	r0, r1, r0, lsl #4
    6dac:	0033c517 	eorseq	ip, r3, r7, lsl r5
    6db0:	01980100 	orrseq	r0, r8, r0, lsl #2
    6db4:	0000008c 	andeq	r0, r0, ip, lsl #1
    6db8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    6dbc:	04f90411 	ldrbteq	r0, [r9], #1041	; 0x411
    6dc0:	3b150000 	blcc	546dc8 <_Min_Stack_Size+0x5469c8>
    6dc4:	01000035 	tsteq	r0, r5, lsr r0
    6dc8:	60fc01d7 	ldrsbtvs	r0, [ip], #23
    6dcc:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    6dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    6dd4:	0000081e 	andeq	r0, r0, lr, lsl r8
    6dd8:	00377516 	eorseq	r7, r7, r6, lsl r5
    6ddc:	01d70100 	bicseq	r0, r7, r0, lsl #2
    6de0:	000007f2 	strdeq	r0, [r0], -r2
    6de4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6de8:	003a2e15 	eorseq	r2, sl, r5, lsl lr
    6dec:	01f40100 	mvnseq	r0, r0, lsl #2
    6df0:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    6df4:	0000006c 	andeq	r0, r0, ip, rrx
    6df8:	08539c01 	ldmdaeq	r3, {r0, sl, fp, ip, pc}^
    6dfc:	3b160000 	blcc	586e04 <_Min_Stack_Size+0x586a04>
    6e00:	01000037 	tsteq	r0, r7, lsr r0
    6e04:	008c01f4 	strdeq	r0, [ip], r4
    6e08:	91020000 	mrsls	r0, (UNDEF: 2)
    6e0c:	05b81674 	ldreq	r1, [r8, #1652]!	; 0x674
    6e10:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    6e14:	00010c01 	andeq	r0, r1, r1, lsl #24
    6e18:	73910200 	orrsvc	r0, r1, #0, 4
    6e1c:	38531500 	ldmdacc	r3, {r8, sl, ip}^
    6e20:	1c010000 	stcne	0, cr0, [r1], {-0}
    6e24:	0061e402 	rsbeq	lr, r1, r2, lsl #8
    6e28:	00006c08 	andeq	r6, r0, r8, lsl #24
    6e2c:	889c0100 	ldmhi	ip, {r8}
    6e30:	16000008 	strne	r0, [r0], -r8
    6e34:	0000373b 	andeq	r3, r0, fp, lsr r7
    6e38:	8c021c01 	stchi	12, cr1, [r2], {1}
    6e3c:	02000000 	andeq	r0, r0, #0
    6e40:	b8167491 	ldmdalt	r6, {r0, r4, r7, sl, ip, sp, lr}
    6e44:	01000005 	tsteq	r0, r5
    6e48:	010c021c 	tsteq	ip, ip, lsl r2
    6e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    6e50:	b8180073 	ldmdalt	r8, {r0, r1, r4, r5, r6}
    6e54:	01000038 	tsteq	r0, r8, lsr r0
    6e58:	008c0243 	addeq	r0, ip, r3, asr #4
    6e5c:	62500000 	subsvs	r0, r0, #0
    6e60:	00380800 	eorseq	r0, r8, r0, lsl #16
    6e64:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e68:	000008c1 	andeq	r0, r0, r1, asr #17
    6e6c:	00373b16 	eorseq	r3, r7, r6, lsl fp
    6e70:	02430100 	subeq	r0, r3, #0, 2
    6e74:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e78:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    6e7c:	00003213 	andeq	r3, r0, r3, lsl r2
    6e80:	8c024501 	cfstr32hi	mvfx4, [r2], {1}
    6e84:	02000000 	andeq	r0, r0, #0
    6e88:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    6e8c:	0000334c 	andeq	r3, r0, ip, asr #6
    6e90:	88028301 	stmdahi	r2, {r0, r8, r9, pc}
    6e94:	34080062 	strcc	r0, [r8], #-98	; 0x62
    6e98:	01000000 	mrseq	r0, (UNDEF: 0)
    6e9c:	33f6159c 	mvnscc	r1, #156, 10	; 0x27000000
    6ea0:	94010000 	strls	r0, [r1], #-0
    6ea4:	0062bc02 	rsbeq	fp, r2, r2, lsl #24
    6ea8:	0000ac08 	andeq	sl, r0, r8, lsl #24
    6eac:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    6eb0:	16000008 	strne	r0, [r0], -r8
    6eb4:	000038ee 	andeq	r3, r0, lr, ror #17
    6eb8:	f9029401 			; <UNDEFINED> instruction: 0xf9029401
    6ebc:	02000008 	andeq	r0, r0, #8
    6ec0:	11007491 			; <UNDEFINED> instruction: 0x11007491
    6ec4:	00055504 	andeq	r5, r5, r4, lsl #10
    6ec8:	37261500 	strcc	r1, [r6, -r0, lsl #10]!
    6ecc:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    6ed0:	00636802 	rsbeq	r6, r3, r2, lsl #16
    6ed4:	00008408 	andeq	r8, r0, r8, lsl #8
    6ed8:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    6edc:	16000009 	strne	r0, [r0], -r9
    6ee0:	000038ee 	andeq	r3, r0, lr, ror #17
    6ee4:	f902c801 			; <UNDEFINED> instruction: 0xf902c801
    6ee8:	02000008 	andeq	r0, r0, #8
    6eec:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    6ef0:	00003788 	andeq	r3, r0, r8, lsl #15
    6ef4:	ec02e201 	sfm	f6, 1, [r2], {1}
    6ef8:	3c080063 	stccc	0, cr0, [r8], {99}	; 0x63
    6efc:	01000000 	mrseq	r0, (UNDEF: 0)
    6f00:	00094b9c 	muleq	r9, ip, fp
    6f04:	05b81600 	ldreq	r1, [r8, #1536]!	; 0x600
    6f08:	e2010000 	and	r0, r1, #0
    6f0c:	00010c02 	andeq	r0, r1, r2, lsl #24
    6f10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    6f14:	35801500 	strcc	r1, [r0, #1280]	; 0x500
    6f18:	2a010000 	bcs	46f20 <_Min_Stack_Size+0x46b20>
    6f1c:	00642803 	rsbeq	r2, r4, r3, lsl #16
    6f20:	00004408 	andeq	r4, r0, r8, lsl #8
    6f24:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    6f28:	16000009 	strne	r0, [r0], -r9
    6f2c:	0000373b 	andeq	r3, r0, fp, lsr r7
    6f30:	8c032a01 	stchi	10, cr2, [r3], {1}
    6f34:	02000000 	andeq	r0, r0, #0
    6f38:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    6f3c:	000031f6 	strdeq	r3, [r0], -r6
    6f40:	6c033e01 	stcvs	14, cr3, [r3], {1}
    6f44:	5c080064 	stcpl	0, cr0, [r8], {100}	; 0x64
    6f48:	01000001 	tsteq	r0, r1
    6f4c:	0009d39c 	muleq	r9, ip, r3
    6f50:	32c61600 	sbccc	r1, r6, #0, 12
    6f54:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6f58:	0009d303 	andeq	sp, r9, r3, lsl #6
    6f5c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6f60:	00365817 	eorseq	r5, r6, r7, lsl r8
    6f64:	03410100 	movteq	r0, #4352	; 0x1100
    6f68:	0000008c 	andeq	r0, r0, ip, lsl #1
    6f6c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6f70:	0000365e 	andeq	r3, r0, lr, asr r6
    6f74:	8c034201 	sfmhi	f4, 4, [r3], {1}
    6f78:	02000000 	andeq	r0, r0, #0
    6f7c:	64177091 	ldrvs	r7, [r7], #-145	; 0x91
    6f80:	01000036 	tsteq	r0, r6, lsr r0
    6f84:	008c0343 	addeq	r0, ip, r3, asr #6
    6f88:	91020000 	mrsls	r0, (UNDEF: 2)
    6f8c:	3994176c 	ldmibcc	r4, {r2, r3, r5, r6, r8, r9, sl, ip}
    6f90:	44010000 	strmi	r0, [r1], #-0
    6f94:	00008c03 	andeq	r8, r0, r3, lsl #24
    6f98:	68910200 	ldmvs	r1, {r9}
    6f9c:	b6041100 	strlt	r1, [r4], -r0, lsl #2
    6fa0:	15000006 	strne	r0, [r0, #-6]
    6fa4:	0000399a 	muleq	r0, sl, r9
    6fa8:	c8039801 	stmdagt	r3, {r0, fp, ip, pc}
    6fac:	88080065 	stmdahi	r8, {r0, r2, r5, r6}
    6fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6fb4:	0009ff9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    6fb8:	32c61600 	sbccc	r1, r6, #0, 12
    6fbc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    6fc0:	0009d303 	andeq	sp, r9, r3, lsl #6
    6fc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6fc8:	33cd1500 	biccc	r1, sp, #0, 10
    6fcc:	b6010000 	strlt	r0, [r1], -r0
    6fd0:	00665003 	rsbeq	r5, r6, r3
    6fd4:	00004008 	andeq	r4, r0, r8
    6fd8:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    6fdc:	1600000a 	strne	r0, [r0], -sl
    6fe0:	0000366a 	andeq	r3, r0, sl, ror #12
    6fe4:	3403b601 	strcc	fp, [r3], #-1537	; 0x601
    6fe8:	0200000a 	andeq	r0, r0, #10
    6fec:	6b176c91 	blvs	5e2238 <_Min_Stack_Size+0x5e1e38>
    6ff0:	01000034 	tsteq	r0, r4, lsr r0
    6ff4:	008c03b8 			; <UNDEFINED> instruction: 0x008c03b8
    6ff8:	91020000 	mrsls	r0, (UNDEF: 2)
    6ffc:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    7000:	0000060b 	andeq	r0, r0, fp, lsl #12
    7004:	00331e18 	eorseq	r1, r3, r8, lsl lr
    7008:	03d00100 	bicseq	r0, r0, #0, 2
    700c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7010:	08006690 	stmdaeq	r0, {r4, r7, r9, sl, sp, lr}
    7014:	0000003c 	andeq	r0, r0, ip, lsr r0
    7018:	0a739c01 	beq	1cee024 <_Min_Stack_Size+0x1cedc24>
    701c:	3a160000 	bcc	587024 <_Min_Stack_Size+0x586c24>
    7020:	0100003a 	tsteq	r0, sl, lsr r0
    7024:	008c03d0 	ldrdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7028:	91020000 	mrsls	r0, (UNDEF: 2)
    702c:	02be176c 	adcseq	r1, lr, #108, 14	; 0x1b00000
    7030:	d2010000 	andle	r0, r1, #0
    7034:	00008c03 	andeq	r8, r0, r3, lsl #24
    7038:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    703c:	34ea1500 	strbtcc	r1, [sl], #1280	; 0x500
    7040:	ea010000 	b	47048 <_Min_Stack_Size+0x46c48>
    7044:	0066cc03 	rsbeq	ip, r6, r3, lsl #24
    7048:	00002408 	andeq	r2, r0, r8, lsl #8
    704c:	999c0100 	ldmibls	ip, {r8}
    7050:	1600000a 	strne	r0, [r0], -sl
    7054:	0000398a 	andeq	r3, r0, sl, lsl #19
    7058:	8c03ea01 	stchi	10, cr14, [r3], {1}
    705c:	02000000 	andeq	r0, r0, #0
    7060:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    7064:	00003521 	andeq	r3, r0, r1, lsr #10
    7068:	f003f801 			; <UNDEFINED> instruction: 0xf003f801
    706c:	24080066 	strcs	r0, [r8], #-102	; 0x66
    7070:	01000000 	mrseq	r0, (UNDEF: 0)
    7074:	000abf9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    7078:	360c1600 	strcc	r1, [ip], -r0, lsl #12
    707c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    7080:	00008c03 	andeq	r8, r0, r3, lsl #24
    7084:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7088:	34241500 	strtcc	r1, [r4], #-1280	; 0x500
    708c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7090:	00671404 	rsbeq	r1, r7, r4, lsl #8
    7094:	00004c08 	andeq	r4, r0, r8, lsl #24
    7098:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    709c:	1600000a 	strne	r0, [r0], -sl
    70a0:	00003a3a 	andeq	r3, r0, sl, lsr sl
    70a4:	8c040801 	stchi	8, cr0, [r4], {1}
    70a8:	02000000 	andeq	r0, r0, #0
    70ac:	b8167491 	ldmdalt	r6, {r0, r4, r7, sl, ip, sp, lr}
    70b0:	01000005 	tsteq	r0, r5
    70b4:	010c0408 	tsteq	ip, r8, lsl #8
    70b8:	91020000 	mrsls	r0, (UNDEF: 2)
    70bc:	e1150073 	tst	r5, r3, ror r0
    70c0:	01000038 	tsteq	r0, r8, lsr r0
    70c4:	6760043c 			; <UNDEFINED> instruction: 0x6760043c
    70c8:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    70cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    70d0:	00000b38 	andeq	r0, r0, r8, lsr fp
    70d4:	00373b16 	eorseq	r3, r7, r6, lsl fp
    70d8:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    70dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    70e0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    70e4:	000039c2 	andeq	r3, r0, r2, asr #19
    70e8:	8c043c01 	stchi	12, cr3, [r4], {1}
    70ec:	02000000 	andeq	r0, r0, #0
    70f0:	b8167091 	ldmdalt	r6, {r0, r4, r7, ip, sp, lr}
    70f4:	01000005 	tsteq	r0, r5
    70f8:	010c043c 	tsteq	ip, ip, lsr r4
    70fc:	91020000 	mrsls	r0, (UNDEF: 2)
    7100:	af18006f 	svcge	0x0018006f
    7104:	01000037 	tsteq	r0, r7, lsr r0
    7108:	00de0489 	sbcseq	r0, lr, r9, lsl #9
    710c:	68300000 	ldmdavs	r0!, {}	; <UNPREDICTABLE>
    7110:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    7114:	9c010000 	stcls	0, cr0, [r1], {-0}
    7118:	00000b8f 	andeq	r0, r0, pc, lsl #23
    711c:	00373b16 	eorseq	r3, r7, r6, lsl fp
    7120:	04890100 	streq	r0, [r9], #256	; 0x100
    7124:	0000008c 	andeq	r0, r0, ip, lsl #1
    7128:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    712c:	00003a25 	andeq	r3, r0, r5, lsr #20
    7130:	8c048901 	stchi	9, cr8, [r4], {1}
    7134:	02000000 	andeq	r0, r0, #0
    7138:	a3176891 	tstge	r7, #9502720	; 0x910000
    713c:	01000008 	tsteq	r0, r8
    7140:	00de048b 	sbcseq	r0, lr, fp, lsl #9
    7144:	91020000 	mrsls	r0, (UNDEF: 2)
    7148:	38b21777 	ldmcc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip}
    714c:	8c010000 	stchi	0, cr0, [r1], {-0}
    7150:	00008c04 	andeq	r8, r0, r4, lsl #24
    7154:	70910200 	addsvc	r0, r1, r0, lsl #4
    7158:	31cf1500 	biccc	r1, pc, r0, lsl #10
    715c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    7160:	0068ac04 	rsbeq	sl, r8, r4, lsl #24
    7164:	00007808 	andeq	r7, r0, r8, lsl #16
    7168:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    716c:	1600000b 	strne	r0, [r0], -fp
    7170:	0000373b 	andeq	r3, r0, fp, lsr r7
    7174:	8c04c101 	stfhid	f4, [r4], {1}
    7178:	02000000 	andeq	r0, r0, #0
    717c:	25167491 	ldrcs	r7, [r6, #-1169]	; 0x491
    7180:	0100003a 	tsteq	r0, sl, lsr r0
    7184:	008c04c1 	addeq	r0, ip, r1, asr #9
    7188:	91020000 	mrsls	r0, (UNDEF: 2)
    718c:	48180070 	ldmdami	r8, {r4, r5, r6}
    7190:	01000036 	tsteq	r0, r6, lsr r0
    7194:	00ea04ec 	rsceq	r0, sl, ip, ror #9
    7198:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    719c:	00b40800 	adcseq	r0, r4, r0, lsl #16
    71a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    71a4:	00000c48 	andeq	r0, r0, r8, asr #24
    71a8:	00373b16 	eorseq	r3, r7, r6, lsl fp
    71ac:	04ec0100 	strbteq	r0, [ip], #256	; 0x100
    71b0:	0000008c 	andeq	r0, r0, ip, lsl #1
    71b4:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    71b8:	000039c2 	andeq	r3, r0, r2, asr #19
    71bc:	8c04ec01 	stchi	12, cr14, [r4], {1}
    71c0:	02000000 	andeq	r0, r0, #0
    71c4:	a3175891 	tstge	r7, #9502720	; 0x910000
    71c8:	01000008 	tsteq	r0, r8
    71cc:	00ea04ee 	rsceq	r0, sl, lr, ror #9
    71d0:	91020000 	mrsls	r0, (UNDEF: 2)
    71d4:	38b21777 	ldmcc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip}
    71d8:	ef010000 	svc	0x00010000
    71dc:	00008c04 	andeq	r8, r0, r4, lsl #24
    71e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    71e4:	00379617 	eorseq	r9, r7, r7, lsl r6
    71e8:	04f00100 	ldrbteq	r0, [r0], #256	; 0x100
    71ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    71f0:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    71f4:	000008a4 	andeq	r0, r0, r4, lsr #17
    71f8:	8c04f101 	stfhid	f7, [r4], {1}
    71fc:	02000000 	andeq	r0, r0, #0
    7200:	ee176891 	mrc	8, 0, r6, cr7, cr1, {4}
    7204:	01000039 	tsteq	r0, r9, lsr r0
    7208:	008c04f2 	strdeq	r0, [ip], r2
    720c:	91020000 	mrsls	r0, (UNDEF: 2)
    7210:	1c150064 	ldcne	0, cr0, [r5], {100}	; 0x64
    7214:	01000038 	tsteq	r0, r8, lsr r0
    7218:	69d80534 	ldmibvs	r8, {r2, r4, r5, r8, sl}^
    721c:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    7220:	9c010000 	stcls	0, cr0, [r1], {-0}
    7224:	00000c7d 	andeq	r0, r0, sp, ror ip
    7228:	00373b16 	eorseq	r3, r7, r6, lsl fp
    722c:	05340100 	ldreq	r0, [r4, #-256]!	; 0x100
    7230:	0000008c 	andeq	r0, r0, ip, lsl #1
    7234:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    7238:	000039c2 	andeq	r3, r0, r2, asr #19
    723c:	8c053401 	cfstrshi	mvf3, [r5], {1}
    7240:	02000000 	andeq	r0, r0, #0
    7244:	1a007091 	bne	23490 <_Min_Stack_Size+0x23090>
    7248:	00000156 	andeq	r0, r0, r6, asr r1
    724c:	c306a706 	movwgt	sl, #26374	; 0x6706
    7250:	00000000 	andeq	r0, r0, r0
    7254:	0000027f 	andeq	r0, r0, pc, ror r2
    7258:	147a0004 	ldrbtne	r0, [sl], #-4
    725c:	01040000 	mrseq	r0, (UNDEF: 4)
    7260:	00000021 	andeq	r0, r0, r1, lsr #32
    7264:	003ad201 	eorseq	sp, sl, r1, lsl #4
    7268:	00010c00 	andeq	r0, r1, r0, lsl #24
    726c:	00094000 	andeq	r4, r9, r0
    7270:	00000000 	andeq	r0, r0, r0
    7274:	00320a00 	eorseq	r0, r2, r0, lsl #20
    7278:	06010200 	streq	r0, [r1], -r0, lsl #4
    727c:	00000145 	andeq	r0, r0, r5, asr #2
    7280:	0001ae03 	andeq	sl, r1, r3, lsl #28
    7284:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    7288:	02000000 	andeq	r0, r0, #0
    728c:	01430801 	cmpeq	r3, r1, lsl #16
    7290:	02020000 	andeq	r0, r2, #0
    7294:	00017f05 	andeq	r7, r1, r5, lsl #30
    7298:	07020200 	streq	r0, [r2, -r0, lsl #4]
    729c:	0000000e 	andeq	r0, r0, lr
    72a0:	00016f03 	andeq	r6, r1, r3, lsl #30
    72a4:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    72a8:	02000000 	andeq	r0, r0, #0
    72ac:	00050504 	andeq	r0, r5, r4, lsl #10
    72b0:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    72b4:	02000004 	andeq	r0, r0, #4
    72b8:	00006941 	andeq	r6, r0, r1, asr #18
    72bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    72c0:	00000126 	andeq	r0, r0, r6, lsr #2
    72c4:	00050802 	andeq	r0, r5, r2, lsl #16
    72c8:	02000000 	andeq	r0, r0, #0
    72cc:	01210708 	teqeq	r1, r8, lsl #14
    72d0:	04040000 	streq	r0, [r4], #-0
    72d4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    72d8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    72dc:	0000012b 	andeq	r0, r0, fp, lsr #2
    72e0:	0001b003 	andeq	fp, r1, r3
    72e4:	2c2a0300 	stccs	3, cr0, [sl], #-0
    72e8:	03000000 	movweq	r0, #0
    72ec:	00000171 	andeq	r0, r0, r1, ror r1
    72f0:	004c4103 	subeq	r4, ip, r3, lsl #2
    72f4:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    72f8:	03000004 	movweq	r0, #4
    72fc:	00005e42 	andeq	r5, r0, r2, asr #28
    7300:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7304:	00000192 	muleq	r0, r2, r1
    7308:	0000a205 	andeq	sl, r0, r5, lsl #4
    730c:	00970500 	addseq	r0, r7, r0, lsl #10
    7310:	01060000 	mrseq	r0, (UNDEF: 6)
    7314:	d401f704 	strle	pc, [r1], #-1796	; 0x704
    7318:	07000000 	streq	r0, [r0, -r0]
    731c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    7320:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    7324:	00010054 	andeq	r0, r1, r4, asr r0
    7328:	001dc809 	andseq	ip, sp, r9, lsl #16
    732c:	01f70400 	mvnseq	r0, r0, lsl #8
    7330:	000000be 	strheq	r0, [r0], -lr
    7334:	004d1609 	subeq	r1, sp, r9, lsl #12
    7338:	01f70400 	mvnseq	r0, r0, lsl #8
    733c:	000000be 	strheq	r0, [r0], -lr
    7340:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    7344:	00010201 	andeq	r0, r1, r1, lsl #4
    7348:	05c60700 	strbeq	r0, [r6, #1792]	; 0x700
    734c:	07000000 	streq	r0, [r0, -r0]
    7350:	0000071e 	andeq	r0, r0, lr, lsl r7
    7354:	ef090001 	svc	0x00090001
    7358:	04000006 	streq	r0, [r0], #-6
    735c:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    7360:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    7364:	3c058c04 	stccc	12, cr8, [r5], {4}
    7368:	0b000001 	bleq	7374 <_Min_Stack_Size+0x6f74>
    736c:	04005243 	streq	r5, [r0], #-579	; 0x243
    7370:	00b4058e 	adcseq	r0, r4, lr, lsl #11
    7374:	0b000000 	bleq	737c <_Min_Stack_Size+0x6f7c>
    7378:	04005253 	streq	r5, [r0], #-595	; 0x253
    737c:	00b4058f 	adcseq	r0, r4, pc, lsl #11
    7380:	0b040000 	bleq	107388 <_Min_Stack_Size+0x106f88>
    7384:	04005244 	streq	r5, [r0], #-580	; 0x244
    7388:	00b40590 	umlalseq	r0, r4, r0, r5
    738c:	00080000 	andeq	r0, r8, r0
    7390:	003abd09 	eorseq	fp, sl, r9, lsl #26
    7394:	05910400 	ldreq	r0, [r1, #1024]	; 0x400
    7398:	0000010e 	andeq	r0, r0, lr, lsl #2
    739c:	003ab20c 	eorseq	fp, sl, ip, lsl #4
    73a0:	54630100 	strbtpl	r0, [r3], #-256	; 0x100
    73a4:	1608006a 	strne	r0, [r8], -sl, rrx
    73a8:	01000000 	mrseq	r0, (UNDEF: 0)
    73ac:	3a8f0d9c 	bcc	fe3caa24 <_estack+0xde39aa24>
    73b0:	72010000 	andvc	r0, r1, #0
    73b4:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
    73b8:	00000038 	andeq	r0, r0, r8, lsr r0
    73bc:	017d9c01 	cmneq	sp, r1, lsl #24
    73c0:	b80e0000 	stmdalt	lr, {}	; <UNPREDICTABLE>
    73c4:	01000005 	tsteq	r0, r5
    73c8:	00010272 	andeq	r0, r1, r2, ror r2
    73cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    73d0:	3a9e0f00 	bcc	fe78afd8 <_estack+0xde75afd8>
    73d4:	b0010000 	andlt	r0, r1, r0
    73d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    73dc:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
    73e0:	00000018 	andeq	r0, r0, r8, lsl r0
    73e4:	82109c01 	andshi	r9, r0, #256	; 0x100
    73e8:	0100003a 	tsteq	r0, sl, lsr r0
    73ec:	6abc010b 	bvs	fef07820 <_estack+0xdeed7820>
    73f0:	00380800 	eorseq	r0, r8, r0, lsl #16
    73f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    73f8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    73fc:	0005b811 	andeq	fp, r5, r1, lsl r8
    7400:	010b0100 	mrseq	r0, (UNDEF: 27)
    7404:	00000102 	andeq	r0, r0, r2, lsl #2
    7408:	00779102 	rsbseq	r9, r7, r2, lsl #2
    740c:	003b5612 	eorseq	r5, fp, r2, lsl r6
    7410:	01250100 	teqeq	r5, r0, lsl #2
    7414:	000000d4 	ldrdeq	r0, [r0], -r4
    7418:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
    741c:	00000038 	andeq	r0, r0, r8, lsr r0
    7420:	01f19c01 	mvnseq	r9, r1, lsl #24
    7424:	c9110000 	ldmdbgt	r1, {}	; <UNPREDICTABLE>
    7428:	0100003a 	tsteq	r0, sl, lsr r0
    742c:	008c0125 	addeq	r0, ip, r5, lsr #2
    7430:	91020000 	mrsls	r0, (UNDEF: 2)
    7434:	08a3136f 	stmiaeq	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip}
    7438:	27010000 	strcs	r0, [r1, -r0]
    743c:	0000d401 	andeq	sp, r0, r1, lsl #8
    7440:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7444:	3b221000 	blcc	88b44c <_Min_Stack_Size+0x88b04c>
    7448:	46010000 	strmi	r0, [r1], -r0
    744c:	006b2c01 	rsbeq	r2, fp, r1, lsl #24
    7450:	00002408 	andeq	r2, r0, r8, lsl #8
    7454:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    7458:	11000002 	tstne	r0, r2
    745c:	00003ac9 	andeq	r3, r0, r9, asr #21
    7460:	8c014601 	stchi	6, cr4, [r1], {1}
    7464:	02000000 	andeq	r0, r0, #0
    7468:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    746c:	00003b30 	andeq	r3, r0, r0, lsr fp
    7470:	e0015601 	and	r5, r1, r1, lsl #12
    7474:	50000000 	andpl	r0, r0, r0
    7478:	3808006b 	stmdacc	r8, {r0, r1, r3, r5, r6}
    747c:	01000000 	mrseq	r0, (UNDEF: 0)
    7480:	0002509c 	muleq	r2, ip, r0
    7484:	3a971100 	bcc	fe5cb88c <_estack+0xde59b88c>
    7488:	56010000 	strpl	r0, [r1], -r0
    748c:	00008c01 	andeq	r8, r0, r1, lsl #24
    7490:	6f910200 	svcvs	0x00910200
    7494:	0008a313 	andeq	sl, r8, r3, lsl r3
    7498:	01580100 	cmpeq	r8, r0, lsl #2
    749c:	000000e0 	andeq	r0, r0, r0, ror #1
    74a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    74a4:	003b4010 	eorseq	r4, fp, r0, lsl r0
    74a8:	01740100 	cmneq	r4, r0, lsl #2
    74ac:	08006b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, sp, lr}
    74b0:	00000024 	andeq	r0, r0, r4, lsr #32
    74b4:	02769c01 	rsbseq	r9, r6, #256	; 0x100
    74b8:	97110000 	ldrls	r0, [r1, -r0]
    74bc:	0100003a 	tsteq	r0, sl, lsr r0
    74c0:	008c0174 	addeq	r0, ip, r4, ror r1
    74c4:	91020000 	mrsls	r0, (UNDEF: 2)
    74c8:	56140077 			; <UNDEFINED> instruction: 0x56140077
    74cc:	05000001 	streq	r0, [r0, #-1]
    74d0:	00b906a7 	adcseq	r0, r9, r7, lsr #13
    74d4:	8f000000 	svchi	0x00000000
    74d8:	0400000b 	streq	r0, [r0], #-11
    74dc:	0015c000 	andseq	ip, r5, r0
    74e0:	21010400 	tstcs	r1, r0, lsl #8
    74e4:	01000000 	mrseq	r0, (UNDEF: 0)
    74e8:	000040e8 	andeq	r4, r0, r8, ror #1
    74ec:	0000010c 	andeq	r0, r0, ip, lsl #2
    74f0:	00000988 	andeq	r0, r0, r8, lsl #19
    74f4:	00000000 	andeq	r0, r0, r0
    74f8:	000033f6 	strdeq	r3, [r0], -r6
    74fc:	00420202 	subeq	r0, r2, r2, lsl #4
    7500:	ab040100 	blge	107908 <_Min_Stack_Size+0x107508>
    7504:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    7508:	003e5303 	eorseq	r5, lr, r3, lsl #6
    750c:	82037200 	andhi	r7, r3, #0, 4
    7510:	7400003e 	strvc	r0, [r0], #-62	; 0x3e
    7514:	003ee603 	eorseq	lr, lr, r3, lsl #12
    7518:	56037500 	strpl	r7, [r3], -r0, lsl #10
    751c:	7600003d 			; <UNDEFINED> instruction: 0x7600003d
    7520:	003f4003 	eorseq	r4, pc, r3
    7524:	99037b00 	stmdbls	r3, {r8, r9, fp, ip, sp, lr}
    7528:	7c000041 	stcvc	0, cr0, [r0], {65}	; 0x41
    752c:	0042ae03 	subeq	sl, r2, r3, lsl #28
    7530:	bf037e00 	svclt	0x00037e00
    7534:	7f00003c 	svcvc	0x0000003c
    7538:	003e6703 	eorseq	r6, lr, r3, lsl #14
    753c:	61030000 	mrsvs	r0, (UNDEF: 3)
    7540:	01000041 	tsteq	r0, r1, asr #32
    7544:	003e9803 	eorseq	r9, lr, r3, lsl #16
    7548:	78030200 	stmdavc	r3, {r9}
    754c:	0300003b 	movweq	r0, #59	; 0x3b
    7550:	003c0703 	eorseq	r0, ip, r3, lsl #14
    7554:	d9030400 	stmdble	r3, {sl}
    7558:	05000041 	streq	r0, [r0, #-65]	; 0x41
    755c:	00416a03 	subeq	r6, r1, r3, lsl #20
    7560:	f3030600 	vmax.u8	d0, d3, d0
    7564:	0700003d 	smladxeq	r0, sp, r0, r0
    7568:	003b8603 	eorseq	r8, fp, r3, lsl #12
    756c:	a3030800 	movwge	r0, #14336	; 0x3800
    7570:	09000042 	stmdbeq	r0, {r1, r6}
    7574:	003faa03 	eorseq	sl, pc, r3, lsl #20
    7578:	5a030a00 	bpl	c9d80 <_Min_Stack_Size+0xc9980>
    757c:	0b000040 	bleq	7684 <_Min_Stack_Size+0x7284>
    7580:	003ff903 	eorseq	pc, pc, r3, lsl #18
    7584:	f0030c00 			; <UNDEFINED> instruction: 0xf0030c00
    7588:	0d00003c 	stceq	0, cr0, [r0, #-240]	; 0xffffff10
    758c:	0041e203 	subeq	lr, r1, r3, lsl #4
    7590:	75030e00 	strvc	r0, [r3, #-3584]	; 0xe00
    7594:	0f000041 	svceq	0x00000041
    7598:	003e0b03 	eorseq	r0, lr, r3, lsl #22
    759c:	91031000 	mrsls	r1, (UNDEF: 3)
    75a0:	1100003b 	tstne	r0, fp, lsr r0
    75a4:	00414c03 	subeq	r4, r1, r3, lsl #24
    75a8:	fe031200 	cdp2	2, 0, cr1, cr3, cr0, {0}
    75ac:	1300003d 	movwne	r0, #61	; 0x3d
    75b0:	003d7003 	eorseq	r7, sp, r3
    75b4:	50031400 	andpl	r1, r3, r0, lsl #8
    75b8:	15000042 	strne	r0, [r0, #-66]	; 0x42
    75bc:	003ea803 	eorseq	sl, lr, r3, lsl #16
    75c0:	7f031600 	svcvc	0x00031600
    75c4:	17000042 	strne	r0, [r0, -r2, asr #32]
    75c8:	003eff03 	eorseq	pc, lr, r3, lsl #30
    75cc:	f4031800 	vst2.8	{d1-d2}, [r3], r0
    75d0:	19000041 	stmdbne	r0, {r0, r6}
    75d4:	003c9d03 	eorseq	r9, ip, r3, lsl #26
    75d8:	d8031a00 	stmdale	r3, {r9, fp, ip}
    75dc:	1b00003d 	blne	76d8 <_Min_Stack_Size+0x72d8>
    75e0:	003c2703 	eorseq	r2, ip, r3, lsl #14
    75e4:	c7031c00 	strgt	r1, [r3, -r0, lsl #24]
    75e8:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
    75ec:	003d9203 	eorseq	r9, sp, r3, lsl #4
    75f0:	c3031e00 	movwgt	r1, #15872	; 0x3e00
    75f4:	1f00003d 	svcne	0x0000003d
    75f8:	003d1e03 	eorseq	r1, sp, r3, lsl #28
    75fc:	ce032000 	cdpgt	0, 0, cr2, cr3, cr0, {0}
    7600:	2100003f 	tstcs	r0, pc, lsr r0
    7604:	003ed903 	eorseq	sp, lr, r3, lsl #18
    7608:	36032200 	strcc	r2, [r3], -r0, lsl #4
    760c:	2300003f 	movwcs	r0, #63	; 0x3f
    7610:	003c5e03 	eorseq	r5, ip, r3, lsl #28
    7614:	d1032400 	tstle	r3, r0, lsl #8
    7618:	25000040 	strcs	r0, [r0, #-64]	; 0x40
    761c:	003d9c03 	eorseq	r9, sp, r3, lsl #24
    7620:	cc032600 	stcgt	6, cr2, [r3], {-0}
    7624:	2700003c 	smladxcs	r0, ip, r0, r0
    7628:	0040b803 	subeq	fp, r0, r3, lsl #16
    762c:	7f032800 	svcvc	0x00032800
    7630:	29000040 	stmdbcs	r0, {r6}
    7634:	003f8803 	eorseq	r8, pc, r3, lsl #16
    7638:	68032a00 	stmdavs	r3, {r9, fp, sp}
    763c:	2b00003c 	blcs	7734 <_Min_Stack_Size+0x7334>
    7640:	003ba303 	eorseq	sl, fp, r3, lsl #6
    7644:	1d032c00 	stcne	12, cr2, [r3, #-0]
    7648:	2d00003e 	stccs	0, cr0, [r0, #-248]	; 0xffffff08
    764c:	00428c03 	subeq	r8, r2, r3, lsl #24
    7650:	cd032e00 	stcgt	14, cr2, [r3, #-0]
    7654:	2f000042 	svccs	0x00000042
    7658:	00409803 	subeq	r9, r0, r3, lsl #16
    765c:	99033000 	stmdbls	r3, {ip, sp}
    7660:	31000042 	tstcc	r0, r2, asr #32
    7664:	003d4c03 	eorseq	r4, sp, r3, lsl #24
    7668:	fd033200 	stc2	2, cr3, [r3, #-0]
    766c:	3300003b 	movwcc	r0, #59	; 0x3b
    7670:	003f7d03 	eorseq	r7, pc, r3, lsl #26
    7674:	f4033400 	vst3.8	{d3-d5}, [r3], r0
    7678:	3500003e 	strcc	r0, [r0, #-62]	; 0x3e
    767c:	003fb503 	eorseq	fp, pc, r3, lsl #10
    7680:	12033600 	andne	r3, r3, #0, 12
    7684:	3700003f 	smladxcc	r0, pc, r0, r0	; <UNPREDICTABLE>
    7688:	003eb603 	eorseq	fp, lr, r3, lsl #12
    768c:	eb033800 	bl	d5694 <_Min_Stack_Size+0xd5294>
    7690:	3900003b 	stmdbcc	r0, {r0, r1, r3, r4, r5}
    7694:	0042df03 	subeq	sp, r2, r3, lsl #30
    7698:	15033a00 	strne	r3, [r3, #-2560]	; 0xa00
    769c:	3b000040 	blcc	77a4 <_Min_Stack_Size+0x73a4>
    76a0:	003d0203 	eorseq	r0, sp, r3, lsl #4
    76a4:	c4033c00 	strgt	r3, [r3], #-3072	; 0xc00
    76a8:	3d000041 	stccc	0, cr0, [r0, #-260]	; 0xfffffefc
    76ac:	003f1c03 	eorseq	r1, pc, r3, lsl #24
    76b0:	27033e00 	strcs	r3, [r3, -r0, lsl #28]
    76b4:	3f000040 	svccc	0x00000040
    76b8:	003c4403 	eorseq	r4, ip, r3, lsl #8
    76bc:	0300c000 	movweq	ip, #0
    76c0:	0000413e 	andeq	r4, r0, lr, lsr r1
    76c4:	2b0300c1 	blcs	c79d0 <_Min_Stack_Size+0xc75d0>
    76c8:	c200003d 	andgt	r0, r0, #61	; 0x3d
    76cc:	3e470300 	cdpcc	3, 4, cr0, cr7, cr0, {0}
    76d0:	00c30000 	sbceq	r0, r3, r0
    76d4:	003c8b03 	eorseq	r8, ip, r3, lsl #22
    76d8:	0300c400 	movweq	ip, #1024	; 0x400
    76dc:	00004187 	andeq	r4, r0, r7, lsl #3
    76e0:	350300c5 	strcc	r0, [r3, #-197]	; 0xc5
    76e4:	c600003e 			; <UNDEFINED> instruction: 0xc600003e
    76e8:	3c520300 	mrrccc	3, 0, r0, r2, cr0
    76ec:	00c70000 	sbceq	r0, r7, r0
    76f0:	0041b703 	subeq	fp, r1, r3, lsl #14
    76f4:	0300c800 	movweq	ip, #2048	; 0x800
    76f8:	000040a1 	andeq	r4, r0, r1, lsr #1
    76fc:	3c0300c9 	stccc	0, cr0, [r3], {201}	; 0xc9
    7700:	ca000042 	bgt	7810 <_Min_Stack_Size+0x7410>
    7704:	42ba0300 	adcsmi	r0, sl, #0, 6
    7708:	00cb0000 	sbceq	r0, fp, r0
    770c:	003e7103 	eorseq	r7, lr, r3, lsl #2
    7710:	0300cc00 	movweq	ip, #3072	; 0xc00
    7714:	00003f2a 	andeq	r3, r0, sl, lsr #30
    7718:	1d0300cd 	stcne	0, cr0, [r3, #-820]	; 0xfffffccc
    771c:	ce00003c 	mcrgt	0, 0, r0, cr0, cr12, {1}
    7720:	40ae0300 	adcmi	r0, lr, r0, lsl #6
    7724:	00cf0000 	sbceq	r0, pc, r0
    7728:	003de503 	eorseq	lr, sp, r3, lsl #10
    772c:	0300d000 	movweq	sp, #0
    7730:	00003f74 	andeq	r3, r0, r4, ror pc
    7734:	dd0300d1 	stcle	0, cr0, [r3, #-836]	; 0xfffffcbc
    7738:	d2000040 	andle	r0, r0, #64	; 0x40
    773c:	3da80300 	stccc	3, cr0, [r8]
    7740:	00d30000 	sbcseq	r0, r3, r0
    7744:	00408e03 	subeq	r8, r0, r3, lsl #28
    7748:	0300d400 	movweq	sp, #1024	; 0x400
    774c:	00003d7e 	andeq	r3, r0, lr, ror sp
    7750:	140300d5 	strne	r0, [r3], #-213	; 0xd5
    7754:	d600003d 			; <UNDEFINED> instruction: 0xd600003d
    7758:	3d880300 	stccc	3, cr0, [r8]
    775c:	00d70000 	sbcseq	r0, r7, r0
    7760:	003d6603 	eorseq	r6, sp, r3, lsl #12
    7764:	0300d800 	movweq	sp, #2048	; 0x800
    7768:	0000422f 	andeq	r4, r0, pc, lsr #4
    776c:	c30300d9 	movwgt	r0, #12505	; 0x30d9
    7770:	da00003f 	ble	7874 <_Min_Stack_Size+0x7474>
    7774:	01040000 	mrseq	r0, (UNDEF: 4)
    7778:	00014506 	andeq	r4, r1, r6, lsl #10
    777c:	01ae0500 			; <UNDEFINED> instruction: 0x01ae0500
    7780:	1d020000 	stcne	0, cr0, [r2, #-0]
    7784:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    7788:	43080104 	movwmi	r0, #33028	; 0x8104
    778c:	04000001 	streq	r0, [r0], #-1
    7790:	017f0502 	cmneq	pc, r2, lsl #10
    7794:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    7798:	02000003 	andeq	r0, r0, #3
    779c:	0002ca2b 	andeq	ip, r2, fp, lsr #20
    77a0:	07020400 	streq	r0, [r2, -r0, lsl #8]
    77a4:	0000000e 	andeq	r0, r0, lr
    77a8:	00016f05 	andeq	r6, r1, r5, lsl #30
    77ac:	dc3f0200 	lfmle	f0, 4, [pc], #-0	; 77b4 <_Min_Stack_Size+0x73b4>
    77b0:	04000002 	streq	r0, [r0], #-2
    77b4:	00050504 	andeq	r0, r5, r4, lsl #10
    77b8:	f4050000 	vst4.8	{d0-d3}, [r5], r0
    77bc:	02000004 	andeq	r0, r0, #4
    77c0:	0002ee41 	andeq	lr, r2, r1, asr #28
    77c4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    77c8:	00000126 	andeq	r0, r0, r6, lsr #2
    77cc:	00050804 	andeq	r0, r5, r4, lsl #16
    77d0:	04000000 	streq	r0, [r0], #-0
    77d4:	01210708 	teqeq	r1, r8, lsl #14
    77d8:	04060000 	streq	r0, [r6], #-0
    77dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    77e0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    77e4:	0000012b 	andeq	r0, r0, fp, lsr #2
    77e8:	0001b005 	andeq	fp, r1, r5
    77ec:	a62a0300 	strtge	r0, [sl], -r0, lsl #6
    77f0:	05000002 	streq	r0, [r0, #-2]
    77f4:	0000037a 	andeq	r0, r0, sl, ror r3
    77f8:	02bf3603 	adcseq	r3, pc, #3145728	; 0x300000
    77fc:	71050000 	mrsvc	r0, (UNDEF: 5)
    7800:	03000001 	movweq	r0, #1
    7804:	0002d141 	andeq	sp, r2, r1, asr #2
    7808:	04f60500 	ldrbteq	r0, [r6], #1280	; 0x500
    780c:	42030000 	andmi	r0, r3, #0
    7810:	000002e3 	andeq	r0, r0, r3, ror #5
    7814:	92070404 	andls	r0, r7, #4, 8	; 0x4000000
    7818:	07000001 	streq	r0, [r0, -r1]
    781c:	00000332 	andeq	r0, r0, r2, lsr r3
    7820:	00033208 	andeq	r3, r3, r8, lsl #4
    7824:	00035900 	andeq	r5, r3, r0, lsl #18
    7828:	033d0900 	teqeq	sp, #0, 18
    782c:	00010000 	andeq	r0, r1, r0
    7830:	00033208 	andeq	r3, r3, r8, lsl #4
    7834:	00036900 	andeq	r6, r3, r0, lsl #18
    7838:	033d0900 	teqeq	sp, #0, 18
    783c:	00000000 	andeq	r0, r0, r0
    7840:	00031c07 	andeq	r1, r3, r7, lsl #24
    7844:	03270700 	teqeq	r7, #0, 14
    7848:	010a0000 	mrseq	r0, (UNDEF: 10)
    784c:	8901f904 	stmdbhi	r1, {r2, r8, fp, ip, sp, lr, pc}
    7850:	03000003 	movweq	r0, #3
    7854:	000005c6 	andeq	r0, r0, r6, asr #11
    7858:	071e0300 	ldreq	r0, [lr, -r0, lsl #6]
    785c:	00010000 	andeq	r0, r1, r0
    7860:	0006ef0b 	andeq	lr, r6, fp, lsl #30
    7864:	01f90400 	mvnseq	r0, r0, lsl #8
    7868:	00000373 	andeq	r0, r0, r3, ror r3
    786c:	b104180c 	tstlt	r4, ip, lsl #16
    7870:	0003ec02 	andeq	lr, r3, r2, lsl #24
    7874:	52430d00 	subpl	r0, r3, #0, 26
    7878:	02b30400 	adcseq	r0, r3, #0, 8
    787c:	00000344 	andeq	r0, r0, r4, asr #6
    7880:	1dde0e00 	ldclne	14, cr0, [lr]
    7884:	b4040000 	strlt	r0, [r4], #-0
    7888:	00034402 	andeq	r4, r3, r2, lsl #8
    788c:	500d0400 	andpl	r0, sp, r0, lsl #8
    7890:	04005241 	streq	r5, [r0], #-577	; 0x241
    7894:	034402b5 	movteq	r0, #17077	; 0x42b5
    7898:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    789c:	00001dd9 	ldrdeq	r1, [r0], -r9
    78a0:	4402b604 	strmi	fp, [r2], #-1540	; 0x604
    78a4:	0c000003 	stceq	0, cr0, [r0], {3}
    78a8:	001d670e 	andseq	r6, sp, lr, lsl #14
    78ac:	02b70400 	adcseq	r0, r7, #0, 8
    78b0:	00000344 	andeq	r0, r0, r4, asr #6
    78b4:	43460d10 	movtmi	r0, #27920	; 0x6d10
    78b8:	b8040052 	stmdalt	r4, {r1, r4, r6}
    78bc:	00034402 	andeq	r4, r3, r2, lsl #8
    78c0:	0b001400 	bleq	c8c8 <_Min_Stack_Size+0xc4c8>
    78c4:	00001b25 	andeq	r1, r0, r5, lsr #22
    78c8:	9502b904 	strls	fp, [r2, #-2308]	; 0x904
    78cc:	0c000003 	stceq	0, cr0, [r0], {3}
    78d0:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    78d4:	00000484 	andeq	r0, r0, r4, lsl #9
    78d8:	0008790e 	andeq	r7, r8, lr, lsl #18
    78dc:	03d60400 	bicseq	r0, r6, #0, 8
    78e0:	00000344 	andeq	r0, r0, r4, asr #6
    78e4:	083f0e00 	ldmdaeq	pc!, {r9, sl, fp}	; <UNPREDICTABLE>
    78e8:	d7040000 	strle	r0, [r4, -r0]
    78ec:	00034403 	andeq	r4, r3, r3, lsl #8
    78f0:	550e0400 	strpl	r0, [lr, #-1024]	; 0x400
    78f4:	04000009 	streq	r0, [r0], #-9
    78f8:	034403d8 	movteq	r0, #17368	; 0x43d8
    78fc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    7900:	00000854 	andeq	r0, r0, r4, asr r8
    7904:	4403d904 	strmi	sp, [r3], #-2308	; 0x904
    7908:	0c000003 	stceq	0, cr0, [r0], {3}
    790c:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    7910:	03da0400 	bicseq	r0, sl, #0, 8
    7914:	00000344 	andeq	r0, r0, r4, asr #6
    7918:	444f0d10 	strbmi	r0, [pc], #-3344	; 7920 <_Min_Stack_Size+0x7520>
    791c:	db040052 	blle	107a6c <_Min_Stack_Size+0x10766c>
    7920:	00034403 	andeq	r4, r3, r3, lsl #8
    7924:	470e1400 	strmi	r1, [lr, -r0, lsl #8]
    7928:	0400000a 	streq	r0, [r0], #-10
    792c:	036903dc 	cmneq	r9, #220, 6	; 0x70000003
    7930:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    7934:	00000873 	andeq	r0, r0, r3, ror r8
    7938:	6903dd04 	stmdbvs	r3, {r2, r8, sl, fp, ip, lr, pc}
    793c:	1a000003 	bne	7950 <_Min_Stack_Size+0x7550>
    7940:	0008280e 	andeq	r2, r8, lr, lsl #16
    7944:	03de0400 	bicseq	r0, lr, #0, 8
    7948:	00000344 	andeq	r0, r0, r4, asr #6
    794c:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    7950:	df040052 	svcle	0x00040052
    7954:	00048403 	andeq	r8, r4, r3, lsl #8
    7958:	07002000 	streq	r2, [r0, -r0]
    795c:	00000349 	andeq	r0, r0, r9, asr #6
    7960:	00073e0b 	andeq	r3, r7, fp, lsl #28
    7964:	03e00400 	mvneq	r0, #0, 8
    7968:	000003f8 	strdeq	r0, [r0], -r8
    796c:	f304280c 	vsub.i8	d2, d4, d12
    7970:	0005a203 	andeq	sl, r5, r3, lsl #4
    7974:	52430d00 	subpl	r0, r3, #0, 26
    7978:	f5040031 			; <UNDEFINED> instruction: 0xf5040031
    797c:	00036903 	andeq	r6, r3, r3, lsl #18
    7980:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    7984:	04000004 	streq	r0, [r0], #-4
    7988:	031c03f6 	tsteq	ip, #-671088637	; 0xd8000003
    798c:	0d020000 	stceq	0, cr0, [r2, #-0]
    7990:	00325243 	eorseq	r5, r2, r3, asr #4
    7994:	6903f704 	stmdbvs	r3, {r2, r8, r9, sl, ip, sp, lr, pc}
    7998:	04000003 	streq	r0, [r0], #-3
    799c:	0004b60e 	andeq	fp, r4, lr, lsl #12
    79a0:	03f80400 	mvnseq	r0, #0, 8
    79a4:	0000031c 	andeq	r0, r0, ip, lsl r3
    79a8:	17c60e06 	strbne	r0, [r6, r6, lsl #28]
    79ac:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    79b0:	00036903 	andeq	r6, r3, r3, lsl #18
    79b4:	c00e0800 	andgt	r0, lr, r0, lsl #16
    79b8:	04000004 	streq	r0, [r0], #-4
    79bc:	031c03fa 	tsteq	ip, #-402653181	; 0xe8000003
    79c0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    79c4:	00001abf 			; <UNDEFINED> instruction: 0x00001abf
    79c8:	6903fb04 	stmdbvs	r3, {r2, r8, r9, fp, ip, sp, lr, pc}
    79cc:	0c000003 	stceq	0, cr0, [r0], {3}
    79d0:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    79d4:	03fc0400 	mvnseq	r0, #0, 8
    79d8:	0000031c 	andeq	r0, r0, ip, lsl r3
    79dc:	52440d0e 	subpl	r0, r4, #896	; 0x380
    79e0:	03fd0400 	mvnseq	r0, #0, 8
    79e4:	00000369 	andeq	r0, r0, r9, ror #6
    79e8:	04d60e10 	ldrbeq	r0, [r6], #3600	; 0xe10
    79ec:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    79f0:	00031c03 	andeq	r1, r3, r3, lsl #24
    79f4:	530d1200 	movwpl	r1, #53760	; 0xd200
    79f8:	04003152 	streq	r3, [r0], #-338	; 0x152
    79fc:	036903ff 	cmneq	r9, #-67108861	; 0xfc000003
    7a00:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    7a04:	000004e0 	andeq	r0, r0, r0, ror #9
    7a08:	1c040004 	stcne	0, cr0, [r4], {4}
    7a0c:	16000003 	strne	r0, [r0], -r3
    7a10:	3252530d 	subscc	r5, r2, #872415232	; 0x34000000
    7a14:	04010400 	streq	r0, [r1], #-1024	; 0x400
    7a18:	00000369 	andeq	r0, r0, r9, ror #6
    7a1c:	04ea0e18 	strbteq	r0, [sl], #3608	; 0xe18
    7a20:	02040000 	andeq	r0, r4, #0
    7a24:	00031c04 	andeq	r1, r3, r4, lsl #24
    7a28:	430d1a00 	movwmi	r1, #55808	; 0xda00
    7a2c:	04005243 	streq	r5, [r0], #-579	; 0x243
    7a30:	03690403 	cmneq	r9, #50331648	; 0x3000000
    7a34:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    7a38:	00001971 	andeq	r1, r0, r1, ror r9
    7a3c:	1c040404 	cfstrsne	mvf0, [r4], {4}
    7a40:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    7a44:	0017280e 	andseq	r2, r7, lr, lsl #16
    7a48:	04050400 	streq	r0, [r5], #-1024	; 0x400
    7a4c:	00000369 	andeq	r0, r0, r9, ror #6
    7a50:	197b0e20 	ldmdbne	fp!, {r5, r9, sl, fp}^
    7a54:	06040000 	streq	r0, [r4], -r0
    7a58:	00031c04 	andeq	r1, r3, r4, lsl #24
    7a5c:	cb0e2200 	blgt	390264 <_Min_Stack_Size+0x38fe64>
    7a60:	04000017 	streq	r0, [r0], #-23
    7a64:	03690407 	cmneq	r9, #117440512	; 0x7000000
    7a68:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    7a6c:	00001985 	andeq	r1, r0, r5, lsl #19
    7a70:	1c040804 	stcne	8, cr0, [r4], {4}
    7a74:	26000003 	strcs	r0, [r0], -r3
    7a78:	17fc0b00 	ldrbne	r0, [ip, r0, lsl #22]!
    7a7c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7a80:	00049504 	andeq	r9, r4, r4, lsl #10
    7a84:	053c0f00 	ldreq	r0, [ip, #-3840]!	; 0xf00
    7a88:	00066b36 	andeq	r6, r6, r6, lsr fp
    7a8c:	1e111000 	cdpne	0, 1, cr1, cr1, cr0, {0}
    7a90:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    7a94:	00000332 	andeq	r0, r0, r2, lsr r3
    7a98:	1bdc1000 	blne	ff70baa0 <_estack+0xdf6dbaa0>
    7a9c:	3b050000 	blcc	147aa4 <_Min_Stack_Size+0x1476a4>
    7aa0:	00000332 	andeq	r0, r0, r2, lsr r3
    7aa4:	1e2c1004 	cdpne	0, 2, cr1, cr12, cr4, {0}
    7aa8:	3d050000 	stccc	0, cr0, [r5, #-0]
    7aac:	00000332 	andeq	r0, r0, r2, lsr r3
    7ab0:	1bd41008 	blne	ff50bad8 <_estack+0xdf4dbad8>
    7ab4:	41050000 	mrsmi	r0, (UNDEF: 5)
    7ab8:	00000332 	andeq	r0, r0, r2, lsr r3
    7abc:	1e40100c 	cdpne	0, 4, cr1, cr0, cr12, {0}
    7ac0:	45050000 	strmi	r0, [r5, #-0]
    7ac4:	00000332 	andeq	r0, r0, r2, lsr r3
    7ac8:	1c371010 	ldcne	0, cr1, [r7], #-64	; 0xffffffc0
    7acc:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    7ad0:	00000332 	andeq	r0, r0, r2, lsr r3
    7ad4:	1bf31014 	blne	ffccbb2c <_estack+0xdfc9bb2c>
    7ad8:	4c050000 	stcmi	0, cr0, [r5], {-0}
    7adc:	00000332 	andeq	r0, r0, r2, lsr r3
    7ae0:	1ce41018 	stclne	0, cr1, [r4], #96	; 0x60
    7ae4:	4f050000 	svcmi	0x00050000
    7ae8:	00000332 	andeq	r0, r0, r2, lsr r3
    7aec:	1e83101c 	mcrne	0, 4, r1, cr3, cr12, {0}
    7af0:	52050000 	andpl	r0, r5, #0
    7af4:	00000332 	andeq	r0, r0, r2, lsr r3
    7af8:	1e4f1020 	cdpne	0, 4, cr1, cr15, cr0, {1}
    7afc:	55050000 	strpl	r0, [r5, #-0]
    7b00:	00000332 	andeq	r0, r0, r2, lsr r3
    7b04:	1b381024 	blne	e0bb9c <_Min_Stack_Size+0xe0b79c>
    7b08:	5a050000 	bpl	147b10 <_Min_Stack_Size+0x147710>
    7b0c:	00000332 	andeq	r0, r0, r2, lsr r3
    7b10:	1df31028 	ldclne	0, cr1, [r3, #160]!	; 0xa0
    7b14:	5d050000 	stcpl	0, cr0, [r5, #-0]
    7b18:	00000332 	andeq	r0, r0, r2, lsr r3
    7b1c:	1d26102c 	stcne	0, cr1, [r6, #-176]!	; 0xffffff50
    7b20:	62050000 	andvs	r0, r5, #0
    7b24:	00000332 	andeq	r0, r0, r2, lsr r3
    7b28:	1b451030 	blne	114bbf0 <_Min_Stack_Size+0x114b7f0>
    7b2c:	65050000 	strvs	r0, [r5, #-0]
    7b30:	00000332 	andeq	r0, r0, r2, lsr r3
    7b34:	1b641034 	blne	190bc0c <_Min_Stack_Size+0x190b80c>
    7b38:	6a050000 	bvs	147b40 <_Min_Stack_Size+0x147740>
    7b3c:	00000332 	andeq	r0, r0, r2, lsr r3
    7b40:	fb050038 	blx	147c2a <_Min_Stack_Size+0x14782a>
    7b44:	0500001c 	streq	r0, [r0, #-28]
    7b48:	0005ae6e 	andeq	sl, r5, lr, ror #28
    7b4c:	06011100 	streq	r1, [r1], -r0, lsl #2
    7b50:	00068b37 	andeq	r8, r6, r7, lsr fp
    7b54:	22ae0300 	adccs	r0, lr, #0, 6
    7b58:	03000000 	movweq	r0, #0
    7b5c:	00002264 	andeq	r2, r0, r4, ror #4
    7b60:	d1050004 	tstle	r5, r4
    7b64:	06000022 	streq	r0, [r0], -r2, lsr #32
    7b68:	0006763a 	andeq	r7, r6, sl, lsr r6
    7b6c:	06011100 	streq	r1, [r1], -r0, lsl #2
    7b70:	0006b143 	andeq	fp, r6, r3, asr #2
    7b74:	22f40300 	rscscs	r0, r4, #0, 6
    7b78:	03080000 	movweq	r0, #32768	; 0x8000
    7b7c:	00002379 	andeq	r2, r0, r9, ror r3
    7b80:	2308030c 	movwcs	r0, #33548	; 0x830c
    7b84:	00100000 	andseq	r0, r0, r0
    7b88:	0023e405 	eoreq	lr, r3, r5, lsl #8
    7b8c:	96470600 	strbls	r0, [r7], -r0, lsl #12
    7b90:	0f000006 	svceq	0x00000006
    7b94:	f5500608 			; <UNDEFINED> instruction: 0xf5500608
    7b98:	10000006 	andne	r0, r0, r6
    7b9c:	00002236 	andeq	r2, r0, r6, lsr r2
    7ba0:	03325206 	teqeq	r2, #1610612736	; 0x60000000
    7ba4:	10000000 	andne	r0, r0, r0
    7ba8:	00002240 	andeq	r2, r0, r0, asr #4
    7bac:	068b5506 	streq	r5, [fp], r6, lsl #10
    7bb0:	10040000 	andne	r0, r4, r0
    7bb4:	00002257 	andeq	r2, r0, r7, asr r2
    7bb8:	06b15806 	ldrteq	r5, [r1], r6, lsl #16
    7bbc:	10050000 	andne	r0, r5, r0
    7bc0:	0000224a 	andeq	r2, r0, sl, asr #4
    7bc4:	03895b06 	orreq	r5, r9, #6144	; 0x1800
    7bc8:	00060000 	andeq	r0, r6, r0
    7bcc:	00228d05 	eoreq	r8, r2, r5, lsl #26
    7bd0:	bc5d0600 	mrrclt	6, 0, r0, sp, cr0
    7bd4:	11000006 	tstne	r0, r6
    7bd8:	21420701 	cmpcs	r2, r1, lsl #14
    7bdc:	03000007 	movweq	r0, #7
    7be0:	0000085a 	andeq	r0, r0, sl, asr r8
    7be4:	08460300 	stmdaeq	r6, {r8, r9}^
    7be8:	03010000 	movweq	r0, #4096	; 0x1000
    7bec:	000007dd 	ldrdeq	r0, [r0], -sp
    7bf0:	080c0302 	stmdaeq	ip, {r1, r8, r9}
    7bf4:	00030000 	andeq	r0, r3, r0
    7bf8:	00077705 	andeq	r7, r7, r5, lsl #14
    7bfc:	00470700 	subeq	r0, r7, r0, lsl #14
    7c00:	11000007 	tstne	r0, r7
    7c04:	414f0701 	cmpmi	pc, r1, lsl #14
    7c08:	03000007 	movweq	r0, #7
    7c0c:	00000895 	muleq	r0, r5, r8
    7c10:	07ac0300 	streq	r0, [ip, r0, lsl #6]!
    7c14:	00010000 	andeq	r0, r1, r0
    7c18:	00082d05 	andeq	r2, r8, r5, lsl #26
    7c1c:	2c520700 	mrrccs	7, 0, r0, r2, cr0
    7c20:	11000007 	tstne	r0, r7
    7c24:	6d5a0701 	ldclvs	7, cr0, [sl, #-4]
    7c28:	03000007 	movweq	r0, #7
    7c2c:	00000934 	andeq	r0, r0, r4, lsr r9
    7c30:	09430300 	stmdbeq	r3, {r8, r9}^
    7c34:	03010000 	movweq	r0, #4096	; 0x1000
    7c38:	000008f1 	strdeq	r0, [r0], -r1
    7c3c:	09b70302 	ldmibeq	r7!, {r1, r8, r9}
    7c40:	00030000 	andeq	r0, r3, r0
    7c44:	00095d05 	andeq	r5, r9, r5, lsl #26
    7c48:	4c5f0700 	mrrcmi	7, 0, r0, pc, cr0	; <UNPREDICTABLE>
    7c4c:	11000007 	tstne	r0, r7
    7c50:	936e0701 	cmnls	lr, #262144	; 0x40000
    7c54:	03000007 	movweq	r0, #7
    7c58:	0000097e 	andeq	r0, r0, lr, ror r9
    7c5c:	09d80300 	ldmibeq	r8, {r8, r9}^
    7c60:	03010000 	movweq	r0, #4096	; 0x1000
    7c64:	0000096f 	andeq	r0, r0, pc, ror #18
    7c68:	c7050002 	strgt	r0, [r5, -r2]
    7c6c:	07000009 	streq	r0, [r0, -r9]
    7c70:	00077872 	andeq	r7, r7, r2, ror r8
    7c74:	07080f00 	streq	r0, [r8, -r0, lsl #30]
    7c78:	0007e384 	andeq	lr, r7, r4, lsl #7
    7c7c:	07521000 	ldrbeq	r1, [r2, -r0]
    7c80:	86070000 	strhi	r0, [r7], -r0
    7c84:	00000332 	andeq	r0, r0, r2, lsr r3
    7c88:	0a641000 	beq	190bc90 <_Min_Stack_Size+0x190b890>
    7c8c:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    7c90:	00000721 	andeq	r0, r0, r1, lsr #14
    7c94:	07f71004 	ldrbeq	r1, [r7, r4]!
    7c98:	8c070000 	stchi	0, cr0, [r7], {-0}
    7c9c:	0000076d 	andeq	r0, r0, sp, ror #14
    7ca0:	07d21005 	ldrbeq	r1, [r2, r5]
    7ca4:	8f070000 	svchi	0x00070000
    7ca8:	00000741 	andeq	r0, r0, r1, asr #14
    7cac:	08ad1006 	stmiaeq	sp!, {r1, r2, ip}
    7cb0:	92070000 	andls	r0, r7, #0
    7cb4:	00000793 	muleq	r0, r3, r7
    7cb8:	a6050007 	strge	r0, [r5], -r7
    7cbc:	07000009 	streq	r0, [r0, -r9]
    7cc0:	00079e94 	muleq	r7, r4, lr
    7cc4:	08040f00 	stmdaeq	r4, {r8, r9, sl, fp}
    7cc8:	00082736 	andeq	r2, r8, r6, lsr r7
    7ccc:	06981000 	ldreq	r1, [r8], r0
    7cd0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    7cd4:	00000311 	andeq	r0, r0, r1, lsl r3
    7cd8:	06cd1000 	strbeq	r1, [sp], r0
    7cdc:	3d080000 	stccc	0, cr0, [r8, #-0]
    7ce0:	00000311 	andeq	r0, r0, r1, lsl r3
    7ce4:	06a81001 	strteq	r1, [r8], r1
    7ce8:	42080000 	andmi	r0, r8, #0
    7cec:	00000311 	andeq	r0, r0, r1, lsl r3
    7cf0:	055a1002 	ldrbeq	r1, [sl, #-2]
    7cf4:	47080000 	strmi	r0, [r8, -r0]
    7cf8:	00000389 	andeq	r0, r0, r9, lsl #7
    7cfc:	49050003 	stmdbmi	r5, {r0, r1}
    7d00:	08000005 	stmdaeq	r0, {r0, r2}
    7d04:	0007ee4a 	andeq	lr, r7, sl, asr #28
    7d08:	09011100 	stmdbeq	r1, {r8, ip}
    7d0c:	0008473c 	andeq	r4, r8, ip, lsr r7
    7d10:	400b0300 	andmi	r0, fp, r0, lsl #6
    7d14:	03000000 	movweq	r0, #0
    7d18:	00004010 	andeq	r4, r0, r0, lsl r0
    7d1c:	cd050001 	stcgt	0, cr0, [r5, #-4]
    7d20:	09000041 	stmdbeq	r0, {r0, r6}
    7d24:	0008323f 	andeq	r3, r8, pc, lsr r2
    7d28:	09011100 	stmdbeq	r1, {r8, ip}
    7d2c:	00086142 	andeq	r6, r8, r2, asr #2
    7d30:	404e0300 	submi	r0, lr, r0, lsl #6
    7d34:	00000000 	andeq	r0, r0, r0
    7d38:	003ce105 	eorseq	lr, ip, r5, lsl #2
    7d3c:	52440900 	subpl	r0, r4, #0, 18
    7d40:	11000008 	tstne	r0, r8
    7d44:	81470901 	cmphi	r7, r1, lsl #18
    7d48:	03000008 	movweq	r0, #8
    7d4c:	00003f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    7d50:	3f4c0300 	svccc	0x004c0300
    7d54:	00010000 	andeq	r0, r1, r0
    7d58:	00406c05 	subeq	r6, r0, r5, lsl #24
    7d5c:	6c4a0900 	mcrrvs	9, 0, r0, sl, cr0
    7d60:	12000008 	andne	r0, r0, #8
    7d64:	00003ec8 	andeq	r3, r0, r8, asr #29
    7d68:	6bac7a01 	blvs	feb26574 <_estack+0xdeaf6574>
    7d6c:	005c0800 	subseq	r0, ip, r0, lsl #16
    7d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    7d74:	000008be 			; <UNDEFINED> instruction: 0x000008be
    7d78:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    7d7c:	477a0100 	ldrbmi	r0, [sl, -r0, lsl #2]!
    7d80:	02000008 	andeq	r0, r0, #8
    7d84:	2b146f91 	blcs	523bd0 <_Min_Stack_Size+0x5237d0>
    7d88:	01000041 	tsteq	r0, r1, asr #32
    7d8c:	0007e37c 	andeq	lr, r7, ip, ror r3
    7d90:	70910200 	addsvc	r0, r1, r0, lsl #4
    7d94:	3c7c1500 	cfldr64cc	mvdx1, [ip], #-0
    7d98:	92010000 	andls	r0, r1, #0
    7d9c:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
    7da0:	00000030 	andeq	r0, r0, r0, lsr r0
    7da4:	08e29c01 	stmiaeq	r2!, {r0, sl, fp, ip, pc}^
    7da8:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    7dac:	01006465 	tsteq	r0, r5, ror #8
    7db0:	00084792 	muleq	r8, r2, r7
    7db4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7db8:	3db31500 	cfldr32cc	mvfx1, [r3]
    7dbc:	9f010000 	svcls	0x00010000
    7dc0:	08006c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, lr}
    7dc4:	00000030 	andeq	r0, r0, r0, lsr r0
    7dc8:	09069c01 	stmdbeq	r6, {r0, sl, fp, ip, pc}
    7dcc:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    7dd0:	01006465 	tsteq	r0, r5, ror #8
    7dd4:	0008479f 	muleq	r8, pc, r7	; <UNPREDICTABLE>
    7dd8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7ddc:	3fdb1500 	svccc	0x00db1500
    7de0:	ac010000 	stcge	0, cr0, [r1], {-0}
    7de4:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
    7de8:	0000003c 	andeq	r0, r0, ip, lsr r0
    7dec:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    7df0:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    7df4:	01006465 	tsteq	r0, r5, ror #8
    7df8:	000847ac 	andeq	r4, r8, ip, lsr #15
    7dfc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7e00:	3b681200 	blcc	1a0c608 <_Min_Stack_Size+0x1a0c208>
    7e04:	bc010000 	stclt	0, cr0, [r1], {-0}
    7e08:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
    7e0c:	00000094 	muleq	r0, r4, r0
    7e10:	09869c01 	stmibeq	r6, {r0, sl, fp, ip, pc}
    7e14:	47160000 	ldrmi	r0, [r6, -r0]
    7e18:	01000040 	tsteq	r0, r0, asr #32
    7e1c:	000861bc 			; <UNDEFINED> instruction: 0x000861bc
    7e20:	5f910200 	svcpl	0x00910200
    7e24:	00425e16 	subeq	r5, r2, r6, lsl lr
    7e28:	81bc0100 			; <UNDEFINED> instruction: 0x81bc0100
    7e2c:	02000008 	andeq	r0, r0, #8
    7e30:	2b145e91 	blcs	51f87c <_Min_Stack_Size+0x51f47c>
    7e34:	01000041 	tsteq	r0, r1, asr #32
    7e38:	0007e3be 			; <UNDEFINED> instruction: 0x0007e3be
    7e3c:	70910200 	addsvc	r0, r1, r0, lsl #4
    7e40:	00403414 	subeq	r3, r0, r4, lsl r4
    7e44:	f5bf0100 			; <UNDEFINED> instruction: 0xf5bf0100
    7e48:	02000006 	andeq	r0, r0, #6
    7e4c:	31146891 			; <UNDEFINED> instruction: 0x31146891
    7e50:	0100003c 	tsteq	r0, ip, lsr r0
    7e54:	000827c0 	andeq	r2, r8, r0, asr #15
    7e58:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7e5c:	421b1700 	andsmi	r1, fp, #0, 14
    7e60:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    7e64:	00000332 	andeq	r0, r0, r2, lsr r3
    7e68:	08006d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, lr}
    7e6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7e70:	09ae9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}
    7e74:	47160000 	ldrmi	r0, [r6, -r0]
    7e78:	01000040 	tsteq	r0, r0, asr #32
    7e7c:	000861e8 	andeq	r6, r8, r8, ror #3
    7e80:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7e84:	42071200 	andmi	r1, r7, #0, 4
    7e88:	f2010000 	vhadd.s8	d0, d1, d0
    7e8c:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
    7e90:	000000b8 	strheq	r0, [r0], -r8
    7e94:	09d29c01 	ldmibeq	r2, {r0, sl, fp, ip, pc}^
    7e98:	2b140000 	blcs	507ea0 <_Min_Stack_Size+0x507aa0>
    7e9c:	01000041 	tsteq	r0, r1, asr #32
    7ea0:	0007e3f4 	strdeq	lr, [r7], -r4
    7ea4:	70910200 	addsvc	r0, r1, r0, lsl #4
    7ea8:	3bb61800 	blcc	fed8deb0 <_estack+0xded5deb0>
    7eac:	23010000 	movwcs	r0, #4096	; 0x1000
    7eb0:	006e1c01 	rsbeq	r1, lr, r1, lsl #24
    7eb4:	00019808 	andeq	r9, r1, r8, lsl #16
    7eb8:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    7ebc:	19000009 	stmdbne	r0, {r0, r3}
    7ec0:	0000412b 	andeq	r4, r0, fp, lsr #2
    7ec4:	e3012501 	movw	r2, #5377	; 0x1501
    7ec8:	02000007 	andeq	r0, r0, #7
    7ecc:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    7ed0:	00003f5d 	andeq	r3, r0, sp, asr pc
    7ed4:	b4018301 	strlt	r8, [r1], #-769	; 0x301
    7ed8:	5c08006f 	stcpl	0, cr0, [r8], {111}	; 0x6f
    7edc:	01000000 	mrseq	r0, (UNDEF: 0)
    7ee0:	000a3c9c 	muleq	sl, ip, ip
    7ee4:	3dd01a00 	vldrcc	s3, [r0]
    7ee8:	83010000 	movwhi	r0, #4096	; 0x1000
    7eec:	00033201 	andeq	r3, r3, r1, lsl #4
    7ef0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7ef4:	001e441a 	andseq	r4, lr, sl, lsl r4
    7ef8:	01830100 	orreq	r0, r3, r0, lsl #2
    7efc:	00000332 	andeq	r0, r0, r2, lsr r3
    7f00:	1a709102 	bne	1c2c310 <_Min_Stack_Size+0x1c2bf10>
    7f04:	0000188f 	andeq	r1, r0, pc, lsl #17
    7f08:	32018301 	andcc	r8, r1, #67108864	; 0x4000000
    7f0c:	02000003 	andeq	r0, r0, #3
    7f10:	1b006c91 	blne	2315c <_Min_Stack_Size+0x22d5c>
    7f14:	00000156 	andeq	r0, r0, r6, asr r1
    7f18:	6e06a70a 	cdpvs	7, 0, cr10, cr6, cr10, {0}
    7f1c:	08000003 	stmdaeq	r0, {r0, r1}
    7f20:	00000a58 	andeq	r0, r0, r8, asr sl
    7f24:	00000a58 	andeq	r0, r0, r8, asr sl
    7f28:	00033d09 	andeq	r3, r3, r9, lsl #26
    7f2c:	1c000100 	stfnes	f0, [r0], {-0}
    7f30:	00048904 	andeq	r8, r4, r4, lsl #18
    7f34:	3cb51d00 	ldccc	13, cr1, [r5]
    7f38:	4d010000 	stcmi	0, cr0, [r1, #-0]
    7f3c:	00000a48 	andeq	r0, r0, r8, asr #20
    7f40:	00240305 	eoreq	r0, r4, r5, lsl #6
    7f44:	1c082000 	stcne	0, cr2, [r8], {-0}
    7f48:	7f000003 	svcvc	0x00000003
    7f4c:	0900000a 	stmdbeq	r0, {r1, r3}
    7f50:	0000033d 	andeq	r0, r0, sp, lsr r3
    7f54:	221d0001 	andscs	r0, sp, #1
    7f58:	01000041 	tsteq	r0, r1, asr #32
    7f5c:	000a904e 	andeq	r9, sl, lr, asr #32
    7f60:	20030500 	andcs	r0, r3, r0, lsl #10
    7f64:	1e0800c8 	cdpne	0, 0, cr0, cr8, cr8, {6}
    7f68:	00000a6f 	andeq	r0, r0, pc, ror #20
    7f6c:	003cd81d 	eorseq	sp, ip, sp, lsl r8
    7f70:	a64f0100 	strbge	r0, [pc], -r0, lsl #2
    7f74:	0500000a 	streq	r0, [r0, #-10]
    7f78:	00c82403 	sbceq	r2, r8, r3, lsl #8
    7f7c:	03491e08 	movteq	r1, #40456	; 0x9e08
    7f80:	58080000 	stmdapl	r8, {}	; <UNPREDICTABLE>
    7f84:	bb00000a 	bllt	7fb4 <_Min_Stack_Size+0x7bb4>
    7f88:	0900000a 	stmdbeq	r0, {r1, r3}
    7f8c:	0000033d 	andeq	r0, r0, sp, lsr r3
    7f90:	551d0000 	ldrpl	r0, [sp, #-0]
    7f94:	01000041 	tsteq	r0, r1, asr #32
    7f98:	000aab51 	andeq	sl, sl, r1, asr fp
    7f9c:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    7fa0:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    7fa4:	0000031c 	andeq	r0, r0, ip, lsl r3
    7fa8:	00000adc 	ldrdeq	r0, [r0], -ip
    7fac:	00033d09 	andeq	r3, r3, r9, lsl #26
    7fb0:	1d000000 	stcne	0, cr0, [r0, #-0]
    7fb4:	00003fee 	andeq	r3, r0, lr, ror #31
    7fb8:	0aed5301 	beq	ffb5cbc4 <_estack+0xdfb2cbc4>
    7fbc:	03050000 	movweq	r0, #20480	; 0x5000
    7fc0:	0800c82c 	stmdaeq	r0, {r2, r3, r5, fp, lr, pc}
    7fc4:	000acc1e 	andeq	ip, sl, lr, lsl ip
    7fc8:	3c121d00 	ldccc	13, cr1, [r2], {-0}
    7fcc:	55010000 	strpl	r0, [r1, #-0]
    7fd0:	00000b03 	andeq	r0, r0, r3, lsl #22
    7fd4:	c8300305 	ldmdagt	r0!, {r0, r2, r8, r9}
    7fd8:	591e0800 	ldmdbpl	lr, {fp}
    7fdc:	1d000003 	stcne	0, cr0, [r0, #-12]
    7fe0:	00003bc8 	andeq	r3, r0, r8, asr #23
    7fe4:	0b195701 	bleq	65dbf0 <_Min_Stack_Size+0x65d7f0>
    7fe8:	03050000 	movweq	r0, #20480	; 0x5000
    7fec:	0800c834 	stmdaeq	r0, {r2, r4, r5, fp, lr, pc}
    7ff0:	000acc1e 	andeq	ip, sl, lr, lsl ip
    7ff4:	03110800 	tsteq	r1, #0, 16
    7ff8:	0b2e0000 	bleq	b88000 <_Min_Stack_Size+0xb87c00>
    7ffc:	3d090000 	stccc	0, cr0, [r9, #-0]
    8000:	00000003 	andeq	r0, r0, r3
    8004:	3d391d00 	ldccc	13, cr1, [r9, #-0]
    8008:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    800c:	00000b3f 	andeq	r0, r0, pc, lsr fp
    8010:	c8380305 	ldmdagt	r8!, {r0, r2, r8, r9}
    8014:	1e1e0800 	cdpne	8, 1, cr0, cr14, cr0, {0}
    8018:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    801c:	00003bd9 	ldrdeq	r3, [r0], -r9
    8020:	0b555b01 	bleq	155ec2c <_Min_Stack_Size+0x155e82c>
    8024:	03050000 	movweq	r0, #20480	; 0x5000
    8028:	0800c83c 	stmdaeq	r0, {r2, r3, r4, r5, fp, lr, pc}
    802c:	000b1e1e 	andeq	r1, fp, lr, lsl lr
    8030:	41ab1d00 			; <UNDEFINED> instruction: 0x41ab1d00
    8034:	5c010000 	stcpl	0, cr0, [r1], {-0}
    8038:	00000b6b 	andeq	r0, r0, fp, ror #22
    803c:	c8400305 	stmdagt	r0, {r0, r2, r8, r9}^
    8040:	1e1e0800 	cdpne	8, 1, cr0, cr14, cr0, {0}
    8044:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    8048:	0000426a 	andeq	r4, r0, sl, ror #4
    804c:	066b5e01 	strbteq	r5, [fp], -r1, lsl #28
    8050:	03050000 	movweq	r0, #20480	; 0x5000
    8054:	20000494 	mulcs	r0, r4, r4
    8058:	003c311d 	eorseq	r3, ip, sp, lsl r1
    805c:	275f0100 	ldrbcs	r0, [pc, -r0, lsl #2]
    8060:	05000008 	streq	r0, [r0, #-8]
    8064:	0004d003 	andeq	sp, r4, r3
    8068:	05750020 	ldrbeq	r0, [r5, #-32]!
    806c:	00040000 	andeq	r0, r4, r0
    8070:	0000177d 	andeq	r1, r0, sp, ror r7
    8074:	00210104 	eoreq	r0, r1, r4, lsl #2
    8078:	ab010000 	blge	48080 <_Min_Stack_Size+0x47c80>
    807c:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
    8080:	d8000001 	stmdale	r0, {r0}
    8084:	00000009 	andeq	r0, r0, r9
    8088:	d5000000 	strle	r0, [r0, #-0]
    808c:	02000036 	andeq	r0, r0, #54	; 0x36
    8090:	01450601 	cmpeq	r5, r1, lsl #12
    8094:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    8098:	02000001 	andeq	r0, r0, #1
    809c:	0000371d 	andeq	r3, r0, sp, lsl r7
    80a0:	08010200 	stmdaeq	r1, {r9}
    80a4:	00000143 	andeq	r0, r0, r3, asr #2
    80a8:	7f050202 	svcvc	0x00050202
    80ac:	03000001 	movweq	r0, #1
    80b0:	00000378 	andeq	r0, r0, r8, ror r3
    80b4:	00502b02 	subseq	r2, r0, r2, lsl #22
    80b8:	02020000 	andeq	r0, r2, #0
    80bc:	00000e07 	andeq	r0, r0, r7, lsl #28
    80c0:	016f0300 	cmneq	pc, r0, lsl #6
    80c4:	3f020000 	svccc	0x00020000
    80c8:	00000062 	andeq	r0, r0, r2, rrx
    80cc:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    80d0:	03000000 	movweq	r0, #0
    80d4:	000004f4 	strdeq	r0, [r0], -r4
    80d8:	00744102 	rsbseq	r4, r4, r2, lsl #2
    80dc:	04020000 	streq	r0, [r2], #-0
    80e0:	00012607 	andeq	r2, r1, r7, lsl #12
    80e4:	05080200 	streq	r0, [r8, #-512]	; 0x200
    80e8:	00000000 	andeq	r0, r0, r0
    80ec:	21070802 	tstcs	r7, r2, lsl #16
    80f0:	04000001 	streq	r0, [r0], #-1
    80f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    80f8:	04020074 	streq	r0, [r2], #-116	; 0x74
    80fc:	00012b07 	andeq	r2, r1, r7, lsl #22
    8100:	01b00300 	lslseq	r0, r0, #6
    8104:	2a030000 	bcs	c810c <_Min_Stack_Size+0xc7d0c>
    8108:	0000002c 	andeq	r0, r0, ip, lsr #32
    810c:	00037a03 	andeq	r7, r3, r3, lsl #20
    8110:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    8114:	03000000 	movweq	r0, #0
    8118:	00000171 	andeq	r0, r0, r1, ror r1
    811c:	00574103 	subseq	r4, r7, r3, lsl #2
    8120:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    8124:	03000004 	movweq	r0, #4
    8128:	00006942 	andeq	r6, r0, r2, asr #18
    812c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8130:	00000192 	muleq	r0, r2, r1
    8134:	0000b805 	andeq	fp, r0, r5, lsl #16
    8138:	00b80600 	adcseq	r0, r8, r0, lsl #12
    813c:	00df0000 	sbcseq	r0, pc, r0
    8140:	c3070000 	movwgt	r0, #28672	; 0x7000
    8144:	01000000 	mrseq	r0, (UNDEF: 0)
    8148:	00a20500 	adceq	r0, r2, r0, lsl #10
    814c:	ad050000 	stcge	0, cr0, [r5, #-0]
    8150:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8154:	01f70401 	mvnseq	r0, r1, lsl #8
    8158:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    815c:	0007be09 	andeq	fp, r7, r9, lsl #28
    8160:	530a0000 	movwpl	r0, #40960	; 0xa000
    8164:	01005445 	tsteq	r0, r5, asr #8
    8168:	04010800 	streq	r0, [r1], #-2048	; 0x800
    816c:	011501f9 			; <UNDEFINED> instruction: 0x011501f9
    8170:	c6090000 	strgt	r0, [r9], -r0
    8174:	00000005 	andeq	r0, r0, r5
    8178:	00071e09 	andeq	r1, r7, r9, lsl #28
    817c:	0b000100 	bleq	8584 <_Min_Stack_Size+0x8184>
    8180:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    8184:	000001a1 	andeq	r0, r0, r1, lsr #3
    8188:	0008790c 	andeq	r7, r8, ip, lsl #18
    818c:	03d60400 	bicseq	r0, r6, #0, 8
    8190:	000000ca 	andeq	r0, r0, sl, asr #1
    8194:	083f0c00 	ldmdaeq	pc!, {sl, fp}	; <UNPREDICTABLE>
    8198:	d7040000 	strle	r0, [r4, -r0]
    819c:	0000ca03 	andeq	ip, r0, r3, lsl #20
    81a0:	550c0400 	strpl	r0, [ip, #-1024]	; 0x400
    81a4:	04000009 	streq	r0, [r0], #-9
    81a8:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    81ac:	0c080000 	stceq	0, cr0, [r8], {-0}
    81b0:	00000854 	andeq	r0, r0, r4, asr r8
    81b4:	ca03d904 	bgt	fe5cc <_Min_Stack_Size+0xfe1cc>
    81b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    81bc:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    81c0:	03da0400 	bicseq	r0, sl, #0, 8
    81c4:	000000ca 	andeq	r0, r0, sl, asr #1
    81c8:	444f0d10 	strbmi	r0, [pc], #-3344	; 81d0 <_Min_Stack_Size+0x7dd0>
    81cc:	db040052 	blle	10831c <_Min_Stack_Size+0x107f1c>
    81d0:	0000ca03 	andeq	ip, r0, r3, lsl #20
    81d4:	470c1400 	strmi	r1, [ip, -r0, lsl #8]
    81d8:	0400000a 	streq	r0, [r0], #-10
    81dc:	00df03dc 	ldrsbeq	r0, [pc], #60	; <UNPREDICTABLE>
    81e0:	0c180000 	ldceq	0, cr0, [r8], {-0}
    81e4:	00000873 	andeq	r0, r0, r3, ror r8
    81e8:	df03dd04 	svcle	0x0003dd04
    81ec:	1a000000 	bne	81f4 <_Min_Stack_Size+0x7df4>
    81f0:	0008280c 	andeq	r2, r8, ip, lsl #16
    81f4:	03de0400 	bicseq	r0, lr, #0, 8
    81f8:	000000ca 	andeq	r0, r0, sl, asr #1
    81fc:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    8200:	df040052 	svcle	0x00040052
    8204:	0001a103 	andeq	sl, r1, r3, lsl #2
    8208:	05002000 	streq	r2, [r0, #-0]
    820c:	000000cf 	andeq	r0, r0, pc, asr #1
    8210:	00073e0e 	andeq	r3, r7, lr, lsl #28
    8214:	03e00400 	mvneq	r0, #0, 8
    8218:	00000115 	andeq	r0, r0, r5, lsl r1
    821c:	f2051c0f 			; <UNDEFINED> instruction: 0xf2051c0f
    8220:	00000213 	andeq	r0, r0, r3, lsl r2
    8224:	00388a10 	eorseq	r8, r8, r0, lsl sl
    8228:	b8f40500 	ldmlt	r4!, {r8, sl}^
    822c:	00000000 	andeq	r0, r0, r0
    8230:	0033ac10 	eorseq	sl, r3, r0, lsl ip
    8234:	b8f80500 	ldmlt	r8!, {r8, sl}^
    8238:	04000000 	streq	r0, [r0], #-0
    823c:	00321a10 	eorseq	r1, r2, r0, lsl sl
    8240:	b8fc0500 	ldmlt	ip!, {r8, sl}^
    8244:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8248:	00355f0c 	eorseq	r5, r5, ip, lsl #30
    824c:	01000500 	tsteq	r0, r0, lsl #10
    8250:	000000b8 	strheq	r0, [r0], -r8
    8254:	32b00c0c 	adcscc	r0, r0, #12, 24	; 0xc00
    8258:	05050000 	streq	r0, [r5, #-0]
    825c:	0000b801 	andeq	fp, r0, r1, lsl #16
    8260:	3c0c1000 	stccc	0, cr1, [ip], {-0}
    8264:	05000036 	streq	r0, [r0, #-54]	; 0x36
    8268:	00b80108 	adcseq	r0, r8, r8, lsl #2
    826c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8270:	000034dd 	ldrdeq	r3, [r0], -sp
    8274:	b8010c05 	stmdalt	r1, {r0, r2, sl, fp}
    8278:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    827c:	39030e00 	stmdbcc	r3, {r9, sl, fp}
    8280:	10050000 	andne	r0, r5, r0
    8284:	0001b201 	andeq	fp, r1, r1, lsl #4
    8288:	05100b00 	ldreq	r0, [r0, #-2816]	; 0xb00
    828c:	025d0117 	subseq	r0, sp, #-1073741819	; 0xc0000005
    8290:	de0c0000 	cdple	0, 0, cr0, cr12, cr0, {0}
    8294:	05000039 	streq	r0, [r0, #-57]	; 0x39
    8298:	00b80119 	adcseq	r0, r8, r9, lsl r1
    829c:	0c000000 	stceq	0, cr0, [r0], {-0}
    82a0:	0000379d 	muleq	r0, sp, r7
    82a4:	b8011c05 	stmdalt	r1, {r0, r2, sl, fp, ip}
    82a8:	04000000 	streq	r0, [r0], #-0
    82ac:	0034700c 	eorseq	r7, r4, ip
    82b0:	011f0500 	tsteq	pc, r0, lsl #10
    82b4:	000000b8 	strheq	r0, [r0], -r8
    82b8:	324b0c08 	subcc	r0, fp, #8, 24	; 0x800
    82bc:	23050000 	movwcs	r0, #20480	; 0x5000
    82c0:	0000b801 	andeq	fp, r0, r1, lsl #16
    82c4:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    82c8:	00003872 	andeq	r3, r0, r2, ror r8
    82cc:	1f012505 	svcne	0x00012505
    82d0:	0b000002 	bleq	82e0 <_Min_Stack_Size+0x7ee0>
    82d4:	012b052c 	teqeq	fp, ip, lsr #10
    82d8:	00000302 	andeq	r0, r0, r2, lsl #6
    82dc:	00373b0c 	eorseq	r3, r7, ip, lsl #22
    82e0:	012d0500 	teqeq	sp, r0, lsl #10
    82e4:	000000b8 	strheq	r0, [r0], -r8
    82e8:	368d0c00 	strcc	r0, [sp], r0, lsl #24
    82ec:	30050000 	andcc	r0, r5, r0
    82f0:	0000b801 	andeq	fp, r0, r1, lsl #16
    82f4:	d60c0400 	strle	r0, [ip], -r0, lsl #8
    82f8:	05000037 	streq	r0, [r0, #-55]	; 0x37
    82fc:	00b80133 	adcseq	r0, r8, r3, lsr r1
    8300:	0c080000 	stceq	0, cr0, [r8], {-0}
    8304:	000033e0 	andeq	r3, r0, r0, ror #7
    8308:	b8013605 	stmdalt	r1, {r0, r2, r9, sl, ip, sp}
    830c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8310:	0035ca0c 	eorseq	ip, r5, ip, lsl #20
    8314:	01390500 	teqeq	r9, r0, lsl #10
    8318:	000000b8 	strheq	r0, [r0], -r8
    831c:	32040c10 	andcc	r0, r4, #16, 24	; 0x1000
    8320:	3c050000 	stccc	0, cr0, [r5], {-0}
    8324:	0000b801 	andeq	fp, r0, r1, lsl #16
    8328:	ae0c1400 	cfcpysge	mvf1, mvf12
    832c:	05000039 	streq	r0, [r0, #-57]	; 0x39
    8330:	00b8013f 	adcseq	r0, r8, pc, lsr r1
    8334:	0c180000 	ldceq	0, cr0, [r8], {-0}
    8338:	000038a0 	andeq	r3, r0, r0, lsr #17
    833c:	b8014205 	stmdalt	r1, {r0, r2, r9, lr}
    8340:	1c000000 	stcne	0, cr0, [r0], {-0}
    8344:	0038c30c 	eorseq	ip, r8, ip, lsl #6
    8348:	01460500 	cmpeq	r6, r0, lsl #10
    834c:	000000b8 	strheq	r0, [r0], -r8
    8350:	34be0c20 	ldrtcc	r0, [lr], #3104	; 0xc20
    8354:	4a050000 	bmi	14835c <_Min_Stack_Size+0x147f5c>
    8358:	0000b801 	andeq	fp, r0, r1, lsl #16
    835c:	0f0c2400 	svceq	0x000c2400
    8360:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    8364:	0302014d 	movweq	r0, #8525	; 0x214d
    8368:	00280000 	eoreq	r0, r8, r0
    836c:	02130411 	andseq	r0, r3, #285212672	; 0x11000000
    8370:	9b0e0000 	blls	388378 <_Min_Stack_Size+0x387f78>
    8374:	05000032 	streq	r0, [r0, #-50]	; 0x32
    8378:	0269014f 	rsbeq	r0, r9, #-1073741805	; 0xc0000013
    837c:	01120000 	tsteq	r2, r0
    8380:	03354206 	teqeq	r5, #1610612736	; 0x60000000
    8384:	5a090000 	bpl	24838c <_Min_Stack_Size+0x247f8c>
    8388:	00000008 	andeq	r0, r0, r8
    838c:	00084609 	andeq	r4, r8, r9, lsl #12
    8390:	dd090100 	stfles	f0, [r9, #-0]
    8394:	02000007 	andeq	r0, r0, #7
    8398:	00080c09 	andeq	r0, r8, r9, lsl #24
    839c:	03000300 	movweq	r0, #768	; 0x300
    83a0:	00000777 	andeq	r0, r0, r7, ror r7
    83a4:	03144706 	tsteq	r4, #1572864	; 0x180000
    83a8:	01120000 	tsteq	r2, r0
    83ac:	03554f06 	cmpeq	r5, #6, 30
    83b0:	95090000 	strls	r0, [r9, #-0]
    83b4:	00000008 	andeq	r0, r0, r8
    83b8:	0007ac09 	andeq	sl, r7, r9, lsl #24
    83bc:	03000100 	movweq	r0, #256	; 0x100
    83c0:	0000082d 	andeq	r0, r0, sp, lsr #16
    83c4:	03405206 	movteq	r5, #518	; 0x206
    83c8:	01120000 	tsteq	r2, r0
    83cc:	03815a06 	orreq	r5, r1, #24576	; 0x6000
    83d0:	34090000 	strcc	r0, [r9], #-0
    83d4:	00000009 	andeq	r0, r0, r9
    83d8:	00094309 	andeq	r4, r9, r9, lsl #6
    83dc:	f1090100 			; <UNDEFINED> instruction: 0xf1090100
    83e0:	02000008 	andeq	r0, r0, #8
    83e4:	0009b709 	andeq	fp, r9, r9, lsl #14
    83e8:	03000300 	movweq	r0, #768	; 0x300
    83ec:	0000095d 	andeq	r0, r0, sp, asr r9
    83f0:	03605f06 	cmneq	r0, #6, 30
    83f4:	01120000 	tsteq	r2, r0
    83f8:	03a76e06 			; <UNDEFINED> instruction: 0x03a76e06
    83fc:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    8400:	00000009 	andeq	r0, r0, r9
    8404:	0009d809 	andeq	sp, r9, r9, lsl #16
    8408:	6f090100 	svcvs	0x00090100
    840c:	02000009 	andeq	r0, r0, #9
    8410:	09c70300 	stmibeq	r7, {r8, r9}^
    8414:	72060000 	andvc	r0, r6, #0
    8418:	0000038c 	andeq	r0, r0, ip, lsl #7
    841c:	8406080f 	strhi	r0, [r6], #-2063	; 0x80f
    8420:	000003f7 	strdeq	r0, [r0], -r7
    8424:	00075210 	andeq	r5, r7, r0, lsl r2
    8428:	b8860600 	stmlt	r6, {r9, sl}
    842c:	00000000 	andeq	r0, r0, r0
    8430:	000a6410 	andeq	r6, sl, r0, lsl r4
    8434:	35890600 	strcc	r0, [r9, #1536]	; 0x600
    8438:	04000003 	streq	r0, [r0], #-3
    843c:	0007f710 	andeq	pc, r7, r0, lsl r7	; <UNPREDICTABLE>
    8440:	818c0600 	orrhi	r0, ip, r0, lsl #12
    8444:	05000003 	streq	r0, [r0, #-3]
    8448:	0007d210 	andeq	sp, r7, r0, lsl r2
    844c:	558f0600 	strpl	r0, [pc, #1536]	; 8a54 <_Min_Stack_Size+0x8654>
    8450:	06000003 	streq	r0, [r0], -r3
    8454:	0008ad10 	andeq	sl, r8, r0, lsl sp
    8458:	a7920600 	ldrge	r0, [r2, r0, lsl #12]
    845c:	07000003 	streq	r0, [r0, -r3]
    8460:	09a60300 	stmibeq	r6!, {r8, r9}
    8464:	94060000 	strls	r0, [r6], #-0
    8468:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    846c:	00436f13 	subeq	r6, r3, r3, lsl pc
    8470:	10410100 	subne	r0, r1, r0, lsl #2
    8474:	74080070 	strvc	r0, [r8], #-112	; 0x70
    8478:	01000000 	mrseq	r0, (UNDEF: 0)
    847c:	0004359c 	muleq	r4, ip, r5
    8480:	44051400 	strmi	r1, [r5], #-1024	; 0x400
    8484:	43010000 	movwmi	r0, #4096	; 0x1000
    8488:	00000308 	andeq	r0, r0, r8, lsl #6
    848c:	144c9102 	strbne	r9, [ip], #-258	; 0x102
    8490:	0000431a 	andeq	r4, r0, sl, lsl r3
    8494:	02134401 	andseq	r4, r3, #16777216	; 0x1000000
    8498:	91030000 	mrsls	r0, (UNDEF: 3)
    849c:	13007fb0 	movwne	r7, #4016	; 0xfb0
    84a0:	0000434b 	andeq	r4, r0, fp, asr #6
    84a4:	70847a01 	addvc	r7, r4, r1, lsl #20
    84a8:	02140800 	andseq	r0, r4, #0, 16
    84ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    84b0:	00000459 	andeq	r0, r0, r9, asr r4
    84b4:	00412b14 	subeq	r2, r1, r4, lsl fp
    84b8:	f77c0100 			; <UNDEFINED> instruction: 0xf77c0100
    84bc:	02000003 	andeq	r0, r0, #3
    84c0:	13007091 	movwne	r7, #145	; 0x91
    84c4:	0000435c 	andeq	r4, r0, ip, asr r3
    84c8:	7298fa01 	addsvc	pc, r8, #4096	; 0x1000
    84cc:	00ec0800 	rsceq	r0, ip, r0, lsl #16
    84d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    84d4:	0000048b 	andeq	r0, r0, fp, lsl #9
    84d8:	0043eb14 	subeq	lr, r3, r4, lsl fp
    84dc:	5dfc0100 	ldfple	f0, [ip]
    84e0:	02000002 	andeq	r0, r0, #2
    84e4:	6b146491 	blvs	521730 <_Min_Stack_Size+0x521330>
    84e8:	01000034 	tsteq	r0, r4, lsr r0
    84ec:	0000b8fd 	strdeq	fp, [r0], -sp
    84f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    84f4:	43021500 	movwmi	r1, #9472	; 0x2500
    84f8:	5a010000 	bpl	48500 <_Min_Stack_Size+0x48100>
    84fc:	00738401 	rsbseq	r8, r3, r1, lsl #8
    8500:	00005408 	andeq	r5, r0, r8, lsl #8
    8504:	de9c0100 	fmllee	f0, f4, f0
    8508:	16000004 	strne	r0, [r0], -r4
    850c:	00003dd0 	ldrdeq	r3, [r0], -r0
    8510:	de015a01 	vmlale.f32	s10, s2, s2
    8514:	02000004 	andeq	r0, r0, #4
    8518:	7a166c91 	bvc	5a3764 <_Min_Stack_Size+0x5a3364>
    851c:	01000043 	tsteq	r0, r3, asr #32
    8520:	00b8015a 	adcseq	r0, r8, sl, asr r1
    8524:	91020000 	mrsls	r0, (UNDEF: 2)
    8528:	43891668 	orrmi	r1, r9, #104, 12	; 0x6800000
    852c:	5a010000 	bpl	48534 <_Min_Stack_Size+0x48134>
    8530:	0000b801 	andeq	fp, r0, r1, lsl #16
    8534:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8538:	00433d17 	subeq	r3, r3, r7, lsl sp
    853c:	015c0100 	cmpeq	ip, r0, lsl #2
    8540:	000000ca 	andeq	r0, r0, sl, asr #1
    8544:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8548:	00b80411 	adcseq	r0, r8, r1, lsl r4
    854c:	f1150000 			; <UNDEFINED> instruction: 0xf1150000
    8550:	01000042 	tsteq	r0, r2, asr #32
    8554:	73d8017a 	bicsvc	r0, r8, #-2147483618	; 0x8000001e
    8558:	004a0800 	subeq	r0, sl, r0, lsl #16
    855c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8560:	00000537 	andeq	r0, r0, r7, lsr r5
    8564:	003dd016 	eorseq	sp, sp, r6, lsl r0
    8568:	017a0100 	cmneq	sl, r0, lsl #2
    856c:	000004de 	ldrdeq	r0, [r0], -lr
    8570:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    8574:	00004396 	muleq	r0, r6, r3
    8578:	b8017a01 	stmdalt	r1, {r0, r9, fp, ip, sp, lr}
    857c:	02000000 	andeq	r0, r0, #0
    8580:	89166891 	ldmdbhi	r6, {r0, r4, r7, fp, sp, lr}
    8584:	01000043 	tsteq	r0, r3, asr #32
    8588:	00b8017a 	adcseq	r0, r8, sl, ror r1
    858c:	91020000 	mrsls	r0, (UNDEF: 2)
    8590:	433d1764 	teqmi	sp, #100, 14	; 0x1900000
    8594:	7c010000 	stcvc	0, cr0, [r1], {-0}
    8598:	0000ca01 	andeq	ip, r0, r1, lsl #20
    859c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    85a0:	43371800 	teqmi	r7, #0, 16
    85a4:	94010000 	strls	r0, [r1], #-0
    85a8:	00742401 	rsbseq	r2, r4, r1, lsl #8
    85ac:	00003408 	andeq	r3, r0, r8, lsl #8
    85b0:	6c9c0100 	ldfvss	f0, [ip], {0}
    85b4:	16000005 	strne	r0, [r0], -r5
    85b8:	000043a4 	andeq	r4, r0, r4, lsr #7
    85bc:	ca019401 	bgt	6d5c8 <_Min_Stack_Size+0x6d1c8>
    85c0:	02000000 	andeq	r0, r0, #0
    85c4:	14176c91 	ldrne	r6, [r7], #-3217	; 0xc91
    85c8:	01000043 	tsteq	r0, r3, asr #32
    85cc:	00ca0196 	smulleq	r0, sl, r6, r1
    85d0:	91020000 	mrsls	r0, (UNDEF: 2)
    85d4:	56190074 			; <UNDEFINED> instruction: 0x56190074
    85d8:	07000001 	streq	r0, [r0, -r1]
    85dc:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    85e0:	af000000 	svcge	0x00000000
    85e4:	04000007 	streq	r0, [r0], #-7
    85e8:	0018e000 	andseq	lr, r8, r0
    85ec:	21010400 	tstcs	r1, r0, lsl #8
    85f0:	01000000 	mrseq	r0, (UNDEF: 0)
    85f4:	000045ed 	andeq	r4, r0, sp, ror #11
    85f8:	0000010c 	andeq	r0, r0, ip, lsl #2
    85fc:	00000a10 	andeq	r0, r0, r0, lsl sl
    8600:	00000000 	andeq	r0, r0, r0
    8604:	000039cc 	andeq	r3, r0, ip, asr #19
    8608:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    860c:	03000001 	movweq	r0, #1
    8610:	000001ae 	andeq	r0, r0, lr, lsr #3
    8614:	00371d02 	eorseq	r1, r7, r2, lsl #26
    8618:	01020000 	mrseq	r0, (UNDEF: 2)
    861c:	00014308 	andeq	r4, r1, r8, lsl #6
    8620:	05020200 	streq	r0, [r2, #-512]	; 0x200
    8624:	0000017f 	andeq	r0, r0, pc, ror r1
    8628:	00037803 	andeq	r7, r3, r3, lsl #16
    862c:	502b0200 	eorpl	r0, fp, r0, lsl #4
    8630:	02000000 	andeq	r0, r0, #0
    8634:	000e0702 	andeq	r0, lr, r2, lsl #14
    8638:	6f030000 	svcvs	0x00030000
    863c:	02000001 	andeq	r0, r0, #1
    8640:	0000623f 	andeq	r6, r0, pc, lsr r2
    8644:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8648:	00000005 	andeq	r0, r0, r5
    864c:	0004f403 	andeq	pc, r4, r3, lsl #8
    8650:	74410200 	strbvc	r0, [r1], #-512	; 0x200
    8654:	02000000 	andeq	r0, r0, #0
    8658:	01260704 	teqeq	r6, r4, lsl #14
    865c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8660:	00000005 	andeq	r0, r0, r5
    8664:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8668:	00000121 	andeq	r0, r0, r1, lsr #2
    866c:	69050404 	stmdbvs	r5, {r2, sl}
    8670:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8674:	012b0704 	teqeq	fp, r4, lsl #14
    8678:	b0030000 	andlt	r0, r3, r0
    867c:	03000001 	movweq	r0, #1
    8680:	00002c2a 	andeq	r2, r0, sl, lsr #24
    8684:	037a0300 	cmneq	sl, #0, 6
    8688:	36030000 	strcc	r0, [r3], -r0
    868c:	00000045 	andeq	r0, r0, r5, asr #32
    8690:	00017103 	andeq	r7, r1, r3, lsl #2
    8694:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    8698:	03000000 	movweq	r0, #0
    869c:	000004f6 	strdeq	r0, [r0], -r6
    86a0:	00694203 	rsbeq	r4, r9, r3, lsl #4
    86a4:	04020000 	streq	r0, [r2], #-0
    86a8:	00019207 	andeq	r9, r1, r7, lsl #4
    86ac:	00b80500 	adcseq	r0, r8, r0, lsl #10
    86b0:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    86b4:	df000000 	svcle	0x00000000
    86b8:	07000000 	streq	r0, [r0, -r0]
    86bc:	000000c3 	andeq	r0, r0, r3, asr #1
    86c0:	a2050001 	andge	r0, r5, #1
    86c4:	05000000 	streq	r0, [r0, #-0]
    86c8:	000000ad 	andeq	r0, r0, sp, lsr #1
    86cc:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    86d0:	0000ff01 	andeq	pc, r0, r1, lsl #30
    86d4:	07be0900 	ldreq	r0, [lr, r0, lsl #18]!
    86d8:	0a000000 	beq	86e0 <_Min_Stack_Size+0x82e0>
    86dc:	00544553 	subseq	r4, r4, r3, asr r5
    86e0:	01080001 	tsteq	r8, r1
    86e4:	1501f904 	strne	pc, [r1, #-2308]	; 0x904
    86e8:	09000001 	stmdbeq	r0, {r0}
    86ec:	000005c6 	andeq	r0, r0, r6, asr #11
    86f0:	071e0900 	ldreq	r0, [lr, -r0, lsl #18]
    86f4:	00010000 	andeq	r0, r1, r0
    86f8:	d404280b 	strle	r2, [r4], #-2059	; 0x80b
    86fc:	0001a103 	andeq	sl, r1, r3, lsl #2
    8700:	08790c00 	ldmdaeq	r9!, {sl, fp}^
    8704:	d6040000 	strle	r0, [r4], -r0
    8708:	0000ca03 	andeq	ip, r0, r3, lsl #20
    870c:	3f0c0000 	svccc	0x000c0000
    8710:	04000008 	streq	r0, [r0], #-8
    8714:	00ca03d7 	ldrdeq	r0, [sl], #55	; 0x37
    8718:	0c040000 	stceq	0, cr0, [r4], {-0}
    871c:	00000955 	andeq	r0, r0, r5, asr r9
    8720:	ca03d804 	bgt	fe738 <_Min_Stack_Size+0xfe338>
    8724:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8728:	0008540c 	andeq	r5, r8, ip, lsl #8
    872c:	03d90400 	bicseq	r0, r9, #0, 8
    8730:	000000ca 	andeq	r0, r0, sl, asr #1
    8734:	44490d0c 	strbmi	r0, [r9], #-3340	; 0xd0c
    8738:	da040052 	ble	108888 <_Min_Stack_Size+0x108488>
    873c:	0000ca03 	andeq	ip, r0, r3, lsl #20
    8740:	4f0d1000 	svcmi	0x000d1000
    8744:	04005244 	streq	r5, [r0], #-580	; 0x244
    8748:	00ca03db 	ldrdeq	r0, [sl], #59	; 0x3b
    874c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8750:	00000a47 	andeq	r0, r0, r7, asr #20
    8754:	df03dc04 	svcle	0x0003dc04
    8758:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    875c:	0008730c 	andeq	r7, r8, ip, lsl #6
    8760:	03dd0400 	bicseq	r0, sp, #0, 8
    8764:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8768:	08280c1a 	stmdaeq	r8!, {r1, r3, r4, sl, fp}
    876c:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    8770:	0000ca03 	andeq	ip, r0, r3, lsl #20
    8774:	410d1c00 	tstmi	sp, r0, lsl #24
    8778:	04005246 	streq	r5, [r0], #-582	; 0x246
    877c:	01a103df 	ldrdeq	r0, [r1, pc]!
    8780:	00200000 	eoreq	r0, r0, r0
    8784:	0000cf05 	andeq	ip, r0, r5, lsl #30
    8788:	073e0e00 	ldreq	r0, [lr, -r0, lsl #28]!
    878c:	e0040000 	and	r0, r4, r0
    8790:	00011503 	andeq	r1, r1, r3, lsl #10
    8794:	04240b00 	strteq	r0, [r4], #-2816	; 0xb00
    8798:	02a404e0 	adceq	r0, r4, #224, 8	; 0xe0000000
    879c:	430d0000 	movwmi	r0, #53248	; 0xd000
    87a0:	04003152 	streq	r3, [r0], #-338	; 0x152
    87a4:	00df04e2 	sbcseq	r0, pc, r2, ror #9
    87a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    87ac:	000004ac 	andeq	r0, r0, ip, lsr #9
    87b0:	a204e304 	andge	lr, r4, #4, 6	; 0x10000000
    87b4:	02000000 	andeq	r0, r0, #0
    87b8:	3252430d 	subscc	r4, r2, #872415232	; 0x34000000
    87bc:	04e40400 	strbteq	r0, [r4], #1024	; 0x400
    87c0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    87c4:	04b60c04 	ldrteq	r0, [r6], #3076	; 0xc04
    87c8:	e5040000 	str	r0, [r4, #-0]
    87cc:	0000a204 	andeq	sl, r0, r4, lsl #4
    87d0:	530d0600 	movwpl	r0, #54784	; 0xd600
    87d4:	e6040052 			; <UNDEFINED> instruction: 0xe6040052
    87d8:	0000df04 	andeq	sp, r0, r4, lsl #30
    87dc:	c00c0800 	andgt	r0, ip, r0, lsl #16
    87e0:	04000004 	streq	r0, [r0], #-4
    87e4:	00a204e7 	adceq	r0, r2, r7, ror #9
    87e8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    87ec:	04005244 	streq	r5, [r0], #-580	; 0x244
    87f0:	00df04e8 	sbcseq	r0, pc, r8, ror #9
    87f4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    87f8:	000003ac 	andeq	r0, r0, ip, lsr #7
    87fc:	a204e904 	andge	lr, r4, #4, 18	; 0x10000
    8800:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8804:	001ebf0c 	andseq	fp, lr, ip, lsl #30
    8808:	04ea0400 	strbteq	r0, [sl], #1024	; 0x400
    880c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8810:	04d60c10 	ldrbeq	r0, [r6], #3088	; 0xc10
    8814:	eb040000 	bl	10881c <_Min_Stack_Size+0x10841c>
    8818:	0000a204 	andeq	sl, r0, r4, lsl #4
    881c:	960c1200 	strls	r1, [ip], -r0, lsl #4
    8820:	0400001e 	streq	r0, [r0], #-30
    8824:	00df04ec 	sbcseq	r0, pc, ip, ror #9
    8828:	0c140000 	ldceq	0, cr0, [r4], {-0}
    882c:	000004e0 	andeq	r0, r0, r0, ror #9
    8830:	a204ed04 	andge	lr, r4, #4, 26	; 0x100
    8834:	16000000 	strne	r0, [r0], -r0
    8838:	001fb80c 	andseq	fp, pc, ip, lsl #16
    883c:	04ee0400 	strbteq	r0, [lr], #1024	; 0x400
    8840:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8844:	04ea0c18 	strbteq	r0, [sl], #3096	; 0xc18
    8848:	ef040000 	svc	0x00040000
    884c:	0000a204 	andeq	sl, r0, r4, lsl #4
    8850:	320c1a00 	andcc	r1, ip, #0, 20
    8854:	04000003 	streq	r0, [r0], #-3
    8858:	00df04f0 	ldrsheq	r0, [pc], #64	; <UNPREDICTABLE>
    885c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    8860:	00001971 	andeq	r1, r0, r1, ror r9
    8864:	a204f104 	andge	pc, r4, #4, 2
    8868:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    886c:	0020990c 	eoreq	r9, r0, ip, lsl #18
    8870:	04f20400 	ldrbteq	r0, [r2], #1024	; 0x400
    8874:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8878:	197b0c20 	ldmdbne	fp!, {r5, sl, fp}^
    887c:	f3040000 	vhadd.u8	d0, d4, d0
    8880:	0000a204 	andeq	sl, r0, r4, lsl #4
    8884:	0e002200 	cdpeq	2, 0, cr2, cr0, cr0, {0}
    8888:	00002121 	andeq	r2, r0, r1, lsr #2
    888c:	b204f404 	andlt	pc, r4, #4, 8	; 0x4000000
    8890:	0f000001 	svceq	0x00000001
    8894:	d1420501 	cmple	r2, r1, lsl #10
    8898:	09000002 	stmdbeq	r0, {r1}
    889c:	0000085a 	andeq	r0, r0, sl, asr r8
    88a0:	08460900 	stmdaeq	r6, {r8, fp}^
    88a4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    88a8:	000007dd 	ldrdeq	r0, [r0], -sp
    88ac:	080c0902 	stmdaeq	ip, {r1, r8, fp}
    88b0:	00030000 	andeq	r0, r3, r0
    88b4:	00077703 	andeq	r7, r7, r3, lsl #14
    88b8:	b0470500 	sublt	r0, r7, r0, lsl #10
    88bc:	0f000002 	svceq	0x00000002
    88c0:	f14f0501 			; <UNDEFINED> instruction: 0xf14f0501
    88c4:	09000002 	stmdbeq	r0, {r1}
    88c8:	00000895 	muleq	r0, r5, r8
    88cc:	07ac0900 	streq	r0, [ip, r0, lsl #18]!
    88d0:	00010000 	andeq	r0, r1, r0
    88d4:	00082d03 	andeq	r2, r8, r3, lsl #26
    88d8:	dc520500 	cfldr64le	mvdx0, [r2], {-0}
    88dc:	0f000002 	svceq	0x00000002
    88e0:	1d5a0501 	cfldr64ne	mvdx0, [sl, #-4]
    88e4:	09000003 	stmdbeq	r0, {r0, r1}
    88e8:	00000934 	andeq	r0, r0, r4, lsr r9
    88ec:	09430900 	stmdbeq	r3, {r8, fp}^
    88f0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    88f4:	000008f1 	strdeq	r0, [r0], -r1
    88f8:	09b70902 	ldmibeq	r7!, {r1, r8, fp}
    88fc:	00030000 	andeq	r0, r3, r0
    8900:	00095d03 	andeq	r5, r9, r3, lsl #26
    8904:	fc5f0500 	mrrc2	5, 0, r0, pc, cr0	; <UNPREDICTABLE>
    8908:	0f000002 	svceq	0x00000002
    890c:	436e0501 	cmnmi	lr, #4194304	; 0x400000
    8910:	09000003 	stmdbeq	r0, {r0, r1}
    8914:	0000097e 	andeq	r0, r0, lr, ror r9
    8918:	09d80900 	ldmibeq	r8, {r8, fp}^
    891c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8920:	0000096f 	andeq	r0, r0, pc, ror #18
    8924:	c7030002 	strgt	r0, [r3, -r2]
    8928:	05000009 	streq	r0, [r0, #-9]
    892c:	00032872 	andeq	r2, r3, r2, ror r8
    8930:	05081000 	streq	r1, [r8, #-0]
    8934:	00039384 	andeq	r9, r3, r4, lsl #7
    8938:	07521100 	ldrbeq	r1, [r2, -r0, lsl #2]
    893c:	86050000 	strhi	r0, [r5], -r0
    8940:	000000b8 	strheq	r0, [r0], -r8
    8944:	0a641100 	beq	190cd4c <_Min_Stack_Size+0x190c94c>
    8948:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
    894c:	000002d1 	ldrdeq	r0, [r0], -r1
    8950:	07f71104 	ldrbeq	r1, [r7, r4, lsl #2]!
    8954:	8c050000 	stchi	0, cr0, [r5], {-0}
    8958:	0000031d 	andeq	r0, r0, sp, lsl r3
    895c:	07d21105 	ldrbeq	r1, [r2, r5, lsl #2]
    8960:	8f050000 	svchi	0x00050000
    8964:	000002f1 	strdeq	r0, [r0], -r1
    8968:	08ad1106 	stmiaeq	sp!, {r1, r2, r8, ip}
    896c:	92050000 	andls	r0, r5, #0
    8970:	00000343 	andeq	r0, r0, r3, asr #6
    8974:	a6030007 	strge	r0, [r3], -r7
    8978:	05000009 	streq	r0, [r0, #-9]
    897c:	00034e94 	muleq	r3, r4, lr
    8980:	06121000 	ldreq	r1, [r2], -r0
    8984:	00041336 	andeq	r1, r4, r6, lsr r3
    8988:	1fbf1100 	svcne	0x00bf1100
    898c:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    8990:	000000a2 	andeq	r0, r0, r2, lsr #1
    8994:	212d1100 	teqcs	sp, r0, lsl #2
    8998:	3b060000 	blcc	1889a0 <_Min_Stack_Size+0x1885a0>
    899c:	000000a2 	andeq	r0, r0, r2, lsr #1
    89a0:	21991102 	orrscs	r1, r9, r2, lsl #2
    89a4:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    89a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    89ac:	20df1104 	sbcscs	r1, pc, r4, lsl #2
    89b0:	41060000 	mrsmi	r0, (UNDEF: 6)
    89b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    89b8:	20fd1106 	rscscs	r1, sp, r6, lsl #2
    89bc:	44060000 	strmi	r0, [r6], #-0
    89c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    89c4:	21481108 	cmpcs	r8, r8, lsl #2
    89c8:	47060000 	strmi	r0, [r6, -r0]
    89cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    89d0:	210b110a 	tstcs	fp, sl, lsl #2
    89d4:	4b060000 	blmi	1889dc <_Min_Stack_Size+0x1885dc>
    89d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    89dc:	20f0110c 	rscscs	r1, r0, ip, lsl #2
    89e0:	51060000 	mrspl	r0, (UNDEF: 6)
    89e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    89e8:	2033110e 	eorscs	r1, r3, lr, lsl #2
    89ec:	54060000 	strpl	r0, [r6], #-0
    89f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    89f4:	4e030010 	mcrmi	0, 0, r0, cr3, cr0, {0}
    89f8:	06000020 	streq	r0, [r0], -r0, lsr #32
    89fc:	00039e55 	andeq	r9, r3, r5, asr lr
    8a00:	07071000 	streq	r1, [r7, -r0]
    8a04:	00047b40 	andeq	r7, r4, r0, asr #22
    8a08:	02191100 	andseq	r1, r9, #0, 2
    8a0c:	42070000 	andmi	r0, r7, #0
    8a10:	00000097 	muleq	r0, r7, r0
    8a14:	02671100 	rsbeq	r1, r7, #0, 2
    8a18:	43070000 	movwmi	r0, #28672	; 0x7000
    8a1c:	00000097 	muleq	r0, r7, r0
    8a20:	022f1101 	eoreq	r1, pc, #1073741824	; 0x40000000
    8a24:	44070000 	strmi	r0, [r7], #-0
    8a28:	00000097 	muleq	r0, r7, r0
    8a2c:	01e01102 	mvneq	r1, r2, lsl #2
    8a30:	45070000 	strmi	r0, [r7, #-0]
    8a34:	00000097 	muleq	r0, r7, r0
    8a38:	028c1103 	addeq	r1, ip, #-1073741824	; 0xc0000000
    8a3c:	46070000 	strmi	r0, [r7], -r0
    8a40:	00000097 	muleq	r0, r7, r0
    8a44:	02241104 	eoreq	r1, r4, #4, 2
    8a48:	47070000 	strmi	r0, [r7, -r0]
    8a4c:	00000097 	muleq	r0, r7, r0
    8a50:	01f41105 	mvnseq	r1, r5, lsl #2
    8a54:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    8a58:	00000097 	muleq	r0, r7, r0
    8a5c:	9b030006 	blls	c8a7c <_Min_Stack_Size+0xc867c>
    8a60:	07000001 	streq	r0, [r0, -r1]
    8a64:	00041e49 	andeq	r1, r4, r9, asr #28
    8a68:	07021000 	streq	r1, [r2, -r0]
    8a6c:	0004a74c 	andeq	sl, r4, ip, asr #14
    8a70:	02e01100 	rsceq	r1, r0, #0, 2
    8a74:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    8a78:	00000097 	muleq	r0, r7, r0
    8a7c:	01b81100 			; <UNDEFINED> instruction: 0x01b81100
    8a80:	4f070000 	svcmi	0x00070000
    8a84:	00000097 	muleq	r0, r7, r0
    8a88:	c5030001 	strgt	r0, [r3, #-1]
    8a8c:	07000002 	streq	r0, [r0, -r2]
    8a90:	00048650 	andeq	r8, r4, r0, asr r6
    8a94:	07031000 	streq	r1, [r3, -r0]
    8a98:	0004df53 	andeq	sp, r4, r3, asr pc
    8a9c:	443e1100 	ldrtmi	r1, [lr], #-256	; 0x100
    8aa0:	55070000 	strpl	r0, [r7, #-0]
    8aa4:	00000097 	muleq	r0, r7, r0
    8aa8:	462e1100 	strtmi	r1, [lr], -r0, lsl #2
    8aac:	56070000 	strpl	r0, [r7], -r0
    8ab0:	00000097 	muleq	r0, r7, r0
    8ab4:	449d1101 	ldrmi	r1, [sp], #257	; 0x101
    8ab8:	57070000 	strpl	r0, [r7, -r0]
    8abc:	00000097 	muleq	r0, r7, r0
    8ac0:	f4030002 	vst4.8	{d0-d3}, [r3], r2
    8ac4:	07000044 	streq	r0, [r0, -r4, asr #32]
    8ac8:	0004b258 	andeq	fp, r4, r8, asr r2
    8acc:	45d21200 	ldrbmi	r1, [r2, #512]	; 0x200
    8ad0:	62010000 	andvs	r0, r1, #0
    8ad4:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
    8ad8:	00000076 	andeq	r0, r0, r6, ror r0
    8adc:	052a9c01 	streq	r9, [sl, #-3073]!	; 0xc01
    8ae0:	1c130000 	ldcne	0, cr0, [r3], {-0}
    8ae4:	01000044 	tsteq	r0, r4, asr #32
    8ae8:	00052a62 	andeq	r2, r5, r2, ror #20
    8aec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8af0:	00454414 	subeq	r4, r5, r4, lsl r4
    8af4:	97640100 	strbls	r0, [r4, -r0, lsl #2]!
    8af8:	02000000 	andeq	r0, r0, #0
    8afc:	50147791 	mulspl	r4, r1, r7
    8b00:	01000045 	tsteq	r0, r5, asr #32
    8b04:	00009764 	andeq	r9, r0, r4, ror #14
    8b08:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    8b0c:	7b041500 	blvc	10df14 <_Min_Stack_Size+0x10db14>
    8b10:	12000004 	andne	r0, r0, #4
    8b14:	00004461 	andeq	r4, r0, r1, ror #8
    8b18:	74d07c01 	ldrbvc	r7, [r0], #3073	; 0xc01
    8b1c:	002e0800 	eoreq	r0, lr, r0, lsl #16
    8b20:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b24:	00000554 	andeq	r0, r0, r4, asr r5
    8b28:	0002be14 	andeq	fp, r2, r4, lsl lr
    8b2c:	977e0100 	ldrbls	r0, [lr, -r0, lsl #2]!
    8b30:	02000000 	andeq	r0, r0, #0
    8b34:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    8b38:	00004655 	andeq	r4, r0, r5, asr r6
    8b3c:	75009001 	strvc	r9, [r0, #-1]
    8b40:	00820800 	addeq	r0, r2, r0, lsl #16
    8b44:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b48:	00000594 	muleq	r0, r4, r5
    8b4c:	00457713 	subeq	r7, r5, r3, lsl r7
    8b50:	94900100 	ldrls	r0, [r0], #256	; 0x100
    8b54:	02000005 	andeq	r0, r0, #5
    8b58:	72146c91 	andsvc	r6, r4, #37120	; 0x9100
    8b5c:	01000044 	tsteq	r0, r4, asr #32
    8b60:	00009792 	muleq	r0, r2, r7
    8b64:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8b68:	00454a14 	subeq	r4, r5, r4, lsl sl
    8b6c:	97920100 	ldrls	r0, [r2, r0, lsl #2]
    8b70:	02000000 	andeq	r0, r0, #0
    8b74:	15007691 	strne	r7, [r0, #-1681]	; 0x691
    8b78:	0004df04 	andeq	sp, r4, r4, lsl #30
    8b7c:	44c61200 	strbmi	r1, [r6], #512	; 0x200
    8b80:	b3010000 	movwlt	r0, #4096	; 0x1000
    8b84:	08007584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp, lr}
    8b88:	00000040 	andeq	r0, r0, r0, asr #32
    8b8c:	05cc9c01 	strbeq	r9, [ip, #3073]	; 0xc01
    8b90:	de130000 	cdple	0, 1, cr0, cr3, cr0, {0}
    8b94:	01000045 	tsteq	r0, r5, asr #32
    8b98:	000097b3 			; <UNDEFINED> instruction: 0x000097b3
    8b9c:	6f910200 	svcvs	0x00910200
    8ba0:	0002be14 	andeq	fp, r2, r4, lsl lr
    8ba4:	97b50100 	ldrls	r0, [r5, r0, lsl #2]!
    8ba8:	02000000 	andeq	r0, r0, #0
    8bac:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    8bb0:	0000463d 	andeq	r4, r0, sp, lsr r6
    8bb4:	75c4c901 	strbvc	ip, [r4, #2305]	; 0x901
    8bb8:	00400800 	subeq	r0, r0, r0, lsl #16
    8bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8bc0:	000005fe 	strdeq	r0, [r0], -lr
    8bc4:	0045de13 	subeq	sp, r5, r3, lsl lr
    8bc8:	97c90100 	strbls	r0, [r9, r0, lsl #2]
    8bcc:	02000000 	andeq	r0, r0, #0
    8bd0:	be146f91 	mrclt	15, 0, r6, cr4, cr1, {4}
    8bd4:	01000002 	tsteq	r0, r2
    8bd8:	000097cb 	andeq	r9, r0, fp, asr #15
    8bdc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8be0:	45561200 	ldrbmi	r1, [r6, #-512]	; 0x200
    8be4:	dd010000 	stcle	0, cr0, [r1, #-0]
    8be8:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
    8bec:	00000048 	andeq	r0, r0, r8, asr #32
    8bf0:	06309c01 	ldrteq	r9, [r0], -r1, lsl #24
    8bf4:	b2130000 	andslt	r0, r3, #0
    8bf8:	01000044 	tsteq	r0, r4, asr #32
    8bfc:	000630dd 	ldrdeq	r3, [r6], -sp
    8c00:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8c04:	0002be14 	andeq	fp, r2, r4, lsl lr
    8c08:	97df0100 	ldrbls	r0, [pc, r0, lsl #2]
    8c0c:	02000000 	andeq	r0, r0, #0
    8c10:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    8c14:	0004a704 	andeq	sl, r4, r4, lsl #14
    8c18:	458e1200 	strmi	r1, [lr, #512]	; 0x200
    8c1c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    8c20:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
    8c24:	00000040 	andeq	r0, r0, r0, asr #32
    8c28:	06689c01 	strbteq	r9, [r8], -r1, lsl #24
    8c2c:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    8c30:	01000044 	tsteq	r0, r4, asr #32
    8c34:	000097f6 	strdeq	r9, [r0], -r6
    8c38:	6f910200 	svcvs	0x00910200
    8c3c:	0002be14 	andeq	fp, r2, r4, lsl lr
    8c40:	97f80100 	ldrbls	r0, [r8, r0, lsl #2]!
    8c44:	02000000 	andeq	r0, r0, #0
    8c48:	16007791 			; <UNDEFINED> instruction: 0x16007791
    8c4c:	0000444c 	andeq	r4, r0, ip, asr #8
    8c50:	97010a01 	strls	r0, [r1, -r1, lsl #20]
    8c54:	8c000000 	stchi	0, cr0, [r0], {-0}
    8c58:	1c080076 	stcne	0, cr0, [r8], {118}	; 0x76
    8c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    8c60:	0006929c 	muleq	r6, ip, r2
    8c64:	02be1700 	adcseq	r1, lr, #0, 14
    8c68:	0c010000 	stceq	0, cr0, [r1], {-0}
    8c6c:	00009701 	andeq	r9, r0, r1, lsl #14
    8c70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8c74:	456a1800 	strbmi	r1, [sl, #-2048]!	; 0x800
    8c78:	1b010000 	blne	48c80 <_Min_Stack_Size+0x48880>
    8c7c:	0076a801 	rsbseq	sl, r6, r1, lsl #16
    8c80:	00006008 	andeq	r6, r0, r8
    8c84:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    8c88:	19000006 	stmdbne	r0, {r1, r2}
    8c8c:	00003dd0 	ldrdeq	r3, [r0], -r0
    8c90:	d6011b01 	strle	r1, [r1], -r1, lsl #22
    8c94:	02000006 	andeq	r0, r0, #6
    8c98:	ea197491 	b	665ee4 <_Min_Stack_Size+0x665ae4>
    8c9c:	01000044 	tsteq	r0, r4, asr #32
    8ca0:	0097011b 	addseq	r0, r7, fp, lsl r1
    8ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    8ca8:	45271973 	strmi	r1, [r7, #-2419]!	; 0x973
    8cac:	1b010000 	blne	48cb4 <_Min_Stack_Size+0x488b4>
    8cb0:	0000a201 	andeq	sl, r0, r1, lsl #4
    8cb4:	70910200 	addsvc	r0, r1, r0, lsl #4
    8cb8:	97041500 	strls	r1, [r4, -r0, lsl #10]
    8cbc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8cc0:	000044de 	ldrdeq	r4, [r0], -lr
    8cc4:	08013e01 	stmdaeq	r1, {r0, r9, sl, fp, ip, sp}
    8cc8:	6c080077 	stcvs	0, cr0, [r8], {119}	; 0x77
    8ccc:	01000000 	mrseq	r0, (UNDEF: 0)
    8cd0:	0007209c 	muleq	r7, ip, r0
    8cd4:	3dd01900 	ldclcc	9, cr1, [r0]
    8cd8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8cdc:	0006d601 	andeq	sp, r6, r1, lsl #12
    8ce0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8ce4:	00467019 	subeq	r7, r6, r9, lsl r0
    8ce8:	013e0100 	teqeq	lr, r0, lsl #2
    8cec:	00000097 	muleq	r0, r7, r0
    8cf0:	19739102 	ldmdbne	r3!, {r1, r8, ip, pc}^
    8cf4:	0000447b 	andeq	r4, r0, fp, ror r4
    8cf8:	a2013e01 	andge	r3, r1, #1, 28
    8cfc:	02000000 	andeq	r0, r0, #0
    8d00:	1a007091 	bne	24f4c <_Min_Stack_Size+0x24b4c>
    8d04:	00004512 	andeq	r4, r0, r2, lsl r5
    8d08:	74016001 	strvc	r6, [r1], #-1
    8d0c:	38080077 	stmdacc	r8, {r0, r1, r2, r4, r5, r6}
    8d10:	01000001 	tsteq	r0, r1
    8d14:	0007559c 	muleq	r7, ip, r5
    8d18:	412b1700 	teqmi	fp, r0, lsl #14
    8d1c:	62010000 	andvs	r0, r1, #0
    8d20:	00039301 	andeq	r9, r3, r1, lsl #6
    8d24:	70910200 	addsvc	r0, r1, r0, lsl #4
    8d28:	0045bb17 	subeq	fp, r5, r7, lsl fp
    8d2c:	01630100 	cmneq	r3, r0, lsl #2
    8d30:	00000413 	andeq	r0, r0, r3, lsl r4
    8d34:	005c9102 	subseq	r9, ip, r2, lsl #2
    8d38:	00442e1b 	subeq	r2, r4, fp, lsl lr
    8d3c:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    8d40:	00000097 	muleq	r0, r7, r0
    8d44:	080078ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp, lr}
    8d48:	00000090 	muleq	r0, r0, r0
    8d4c:	077f9c01 	ldrbeq	r9, [pc, -r1, lsl #24]!
    8d50:	cd190000 	ldcgt	0, cr0, [r9, #-0]
    8d54:	01000045 	tsteq	r0, r5, asr #32
    8d58:	009701ba 			; <UNDEFINED> instruction: 0x009701ba
    8d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    8d60:	9f1c0077 	svcls	0x001c0077
    8d64:	01000045 	tsteq	r0, r5, asr #32
    8d68:	00b801d6 	ldrsbteq	r0, [r8], r6
    8d6c:	793c0000 	ldmdbvc	ip!, {}	; <UNPREDICTABLE>
    8d70:	00060800 	andeq	r0, r6, r0, lsl #16
    8d74:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d78:	0001561d 	andeq	r5, r1, sp, lsl r6
    8d7c:	06a70800 	strteq	r0, [r7], r0, lsl #16
    8d80:	000000e4 	andeq	r0, r0, r4, ror #1
    8d84:	0045361e 	subeq	r3, r5, lr, lsl r6
    8d88:	ca4a0100 	bgt	1289190 <_Min_Stack_Size+0x1288d90>
    8d8c:	05000000 	streq	r0, [r0, #-0]
    8d90:	00003003 	andeq	r3, r0, r3
    8d94:	190a0020 	stmdbne	sl, {r5}
    8d98:	00040000 	andeq	r0, r4, r0
    8d9c:	00001ab3 			; <UNDEFINED> instruction: 0x00001ab3
    8da0:	00210104 	eoreq	r0, r1, r4, lsl #2
    8da4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    8da8:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
    8dac:	80000001 	andhi	r0, r0, r1
    8db0:	0000000a 	andeq	r0, r0, sl
    8db4:	0d000000 	stceq	0, cr0, [r0, #-0]
    8db8:	0200003d 	andeq	r0, r0, #61	; 0x3d
    8dbc:	01450601 	cmpeq	r5, r1, lsl #12
    8dc0:	01020000 	mrseq	r0, (UNDEF: 2)
    8dc4:	00014308 	andeq	r4, r1, r8, lsl #6
    8dc8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    8dcc:	0000017f 	andeq	r0, r0, pc, ror r1
    8dd0:	00037803 	andeq	r7, r3, r3, lsl #16
    8dd4:	452b0200 	strmi	r0, [fp, #-512]!	; 0x200
    8dd8:	02000000 	andeq	r0, r0, #0
    8ddc:	000e0702 	andeq	r0, lr, r2, lsl #14
    8de0:	6f030000 	svcvs	0x00030000
    8de4:	02000001 	andeq	r0, r0, #1
    8de8:	0000573f 	andeq	r5, r0, pc, lsr r7
    8dec:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8df0:	00000005 	andeq	r0, r0, r5
    8df4:	0004f403 	andeq	pc, r4, r3, lsl #8
    8df8:	69410200 	stmdbvs	r1, {r9}^
    8dfc:	02000000 	andeq	r0, r0, #0
    8e00:	01260704 	teqeq	r6, r4, lsl #14
    8e04:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8e08:	00000005 	andeq	r0, r0, r5
    8e0c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8e10:	00000121 	andeq	r0, r0, r1, lsr #2
    8e14:	69050404 	stmdbvs	r5, {r2, sl}
    8e18:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8e1c:	012b0704 	teqeq	fp, r4, lsl #14
    8e20:	7a030000 	bvc	c8e28 <_Min_Stack_Size+0xc8a28>
    8e24:	03000003 	movweq	r0, #3
    8e28:	00003a36 	andeq	r3, r0, r6, lsr sl
    8e2c:	01710300 	cmneq	r1, r0, lsl #6
    8e30:	41030000 	mrsmi	r0, (UNDEF: 3)
    8e34:	0000004c 	andeq	r0, r0, ip, asr #32
    8e38:	0004f603 	andeq	pc, r4, r3, lsl #12
    8e3c:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    8e40:	02000000 	andeq	r0, r0, #0
    8e44:	01920704 	orrseq	r0, r2, r4, lsl #14
    8e48:	a2050000 	andge	r0, r5, #0
    8e4c:	06000000 	streq	r0, [r0], -r0
    8e50:	000000a2 	andeq	r0, r0, r2, lsr #1
    8e54:	000000c9 	andeq	r0, r0, r9, asr #1
    8e58:	0000ad07 	andeq	sl, r0, r7, lsl #26
    8e5c:	05000100 	streq	r0, [r0, #-256]	; 0x100
    8e60:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e64:	00009705 	andeq	r9, r0, r5, lsl #14
    8e68:	008c0800 	addeq	r0, ip, r0, lsl #16
    8e6c:	01090000 	mrseq	r0, (UNDEF: 9)
    8e70:	ee01f704 	cdp	7, 0, cr15, cr1, cr4, {0}
    8e74:	0a000000 	beq	8e7c <_Min_Stack_Size+0x8a7c>
    8e78:	000007be 			; <UNDEFINED> instruction: 0x000007be
    8e7c:	45530b00 	ldrbmi	r0, [r3, #-2816]	; 0xb00
    8e80:	00010054 	andeq	r0, r1, r4, asr r0
    8e84:	f9040109 			; <UNDEFINED> instruction: 0xf9040109
    8e88:	00010401 	andeq	r0, r1, r1, lsl #8
    8e8c:	05c60a00 	strbeq	r0, [r6, #2560]	; 0xa00
    8e90:	0a000000 	beq	8e98 <_Min_Stack_Size+0x8a98>
    8e94:	0000071e 	andeq	r0, r0, lr, lsl r7
    8e98:	ef0c0001 	svc	0x000c0001
    8e9c:	04000006 	streq	r0, [r0], #-6
    8ea0:	00ee01f9 	strdeq	r0, [lr], #25	; <UNPREDICTABLE>
    8ea4:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
    8ea8:	9c03d404 	cfstrsls	mvf13, [r3], {4}
    8eac:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    8eb0:	00000879 	andeq	r0, r0, r9, ror r8
    8eb4:	b403d604 	strlt	sp, [r3], #-1540	; 0x604
    8eb8:	00000000 	andeq	r0, r0, r0
    8ebc:	00083f0e 	andeq	r3, r8, lr, lsl #30
    8ec0:	03d70400 	bicseq	r0, r7, #0, 8
    8ec4:	000000b4 	strheq	r0, [r0], -r4
    8ec8:	09550e04 	ldmdbeq	r5, {r2, r9, sl, fp}^
    8ecc:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    8ed0:	0000b403 	andeq	fp, r0, r3, lsl #8
    8ed4:	540e0800 	strpl	r0, [lr], #-2048	; 0x800
    8ed8:	04000008 	streq	r0, [r0], #-8
    8edc:	00b403d9 	ldrsbteq	r0, [r4], r9
    8ee0:	0f0c0000 	svceq	0x000c0000
    8ee4:	00524449 	subseq	r4, r2, r9, asr #8
    8ee8:	b403da04 	strlt	sp, [r3], #-2564	; 0xa04
    8eec:	10000000 	andne	r0, r0, r0
    8ef0:	52444f0f 	subpl	r4, r4, #15, 30	; 0x3c
    8ef4:	03db0400 	bicseq	r0, fp, #0, 8
    8ef8:	000000b4 	strheq	r0, [r0], -r4
    8efc:	0a470e14 	beq	11cc754 <_Min_Stack_Size+0x11cc354>
    8f00:	dc040000 	stcle	0, cr0, [r4], {-0}
    8f04:	0000c903 	andeq	ip, r0, r3, lsl #18
    8f08:	730e1800 	movwvc	r1, #59392	; 0xe800
    8f0c:	04000008 	streq	r0, [r0], #-8
    8f10:	00c903dd 	ldrdeq	r0, [r9], #61	; 0x3d
    8f14:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    8f18:	00000828 	andeq	r0, r0, r8, lsr #16
    8f1c:	b403de04 	strlt	sp, [r3], #-3588	; 0xe04
    8f20:	1c000000 	stcne	0, cr0, [r0], {-0}
    8f24:	5246410f 	subpl	r4, r6, #-1073741821	; 0xc0000003
    8f28:	03df0400 	bicseq	r0, pc, #0, 8
    8f2c:	0000019c 	muleq	r0, ip, r1
    8f30:	b9050020 	stmdblt	r5, {r5}
    8f34:	0c000000 	stceq	0, cr0, [r0], {-0}
    8f38:	0000073e 	andeq	r0, r0, lr, lsr r7
    8f3c:	1003e004 	andne	lr, r3, r4
    8f40:	0d000001 	stceq	0, cr0, [r0, #-4]
    8f44:	04340444 	ldrteq	r0, [r4], #-1092	; 0x444
    8f48:	0000026c 	andeq	r0, r0, ip, ror #4
    8f4c:	0052430f 	subseq	r4, r2, pc, lsl #6
    8f50:	b4043604 	strlt	r3, [r4], #-1540	; 0x604
    8f54:	00000000 	andeq	r0, r0, r0
    8f58:	002cc40e 	eoreq	ip, ip, lr, lsl #8
    8f5c:	04370400 	ldrteq	r0, [r7], #-1024	; 0x400
    8f60:	000000b4 	strheq	r0, [r0], -r4
    8f64:	2ac60e04 	bcs	ff18c77c <_estack+0xdf15c77c>
    8f68:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    8f6c:	0000b404 	andeq	fp, r0, r4, lsl #8
    8f70:	7f0e0800 	svcvc	0x000e0800
    8f74:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    8f78:	00b40439 	adcseq	r0, r4, r9, lsr r4
    8f7c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    8f80:	0000313a 	andeq	r3, r0, sl, lsr r1
    8f84:	b4043a04 	strlt	r3, [r4], #-2564	; 0xa04
    8f88:	10000000 	andne	r0, r0, r0
    8f8c:	002bc80e 	eoreq	ip, fp, lr, lsl #16
    8f90:	043b0400 	ldrteq	r0, [fp], #-1024	; 0x400
    8f94:	000000b4 	strheq	r0, [r0], -r4
    8f98:	308c0e14 	addcc	r0, ip, r4, lsl lr
    8f9c:	3c040000 	stccc	0, cr0, [r4], {-0}
    8fa0:	0000b404 	andeq	fp, r0, r4, lsl #8
    8fa4:	a10e1800 	tstge	lr, r0, lsl #16
    8fa8:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    8fac:	00b4043d 	adcseq	r0, r4, sp, lsr r4
    8fb0:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    8fb4:	000004ac 	andeq	r0, r0, ip, lsr #9
    8fb8:	b9043e04 	stmdblt	r4, {r2, r9, sl, fp, ip, sp}
    8fbc:	20000000 	andcs	r0, r0, r0
    8fc0:	002e990e 	eoreq	r9, lr, lr, lsl #18
    8fc4:	043f0400 	ldrteq	r0, [pc], #-1024	; 8fcc <_Min_Stack_Size+0x8bcc>
    8fc8:	000000b4 	strheq	r0, [r0], -r4
    8fcc:	29f50e28 	ldmibcs	r5!, {r3, r5, r9, sl, fp}^
    8fd0:	40040000 	andmi	r0, r4, r0
    8fd4:	0000b404 	andeq	fp, r0, r4, lsl #8
    8fd8:	b10e2c00 	tstlt	lr, r0, lsl #24
    8fdc:	04000029 	streq	r0, [r0], #-41	; 0x29
    8fe0:	00b40441 	adcseq	r0, r4, r1, asr #8
    8fe4:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    8fe8:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    8fec:	6c044204 	sfmvs	f4, 4, [r4], {4}
    8ff0:	34000002 	strcc	r0, [r0], #-2
    8ff4:	002d450e 	eoreq	r4, sp, lr, lsl #10
    8ff8:	04430400 	strbeq	r0, [r3], #-1024	; 0x400
    8ffc:	000000b4 	strheq	r0, [r0], -r4
    9000:	a2060040 	andge	r0, r6, #64	; 0x40
    9004:	7c000000 	stcvc	0, cr0, [r0], {-0}
    9008:	07000002 	streq	r0, [r0, -r2]
    900c:	000000ad 	andeq	r0, r0, sp, lsr #1
    9010:	a90c0002 	stmdbge	ip, {r1}
    9014:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    9018:	01ad0445 			; <UNDEFINED> instruction: 0x01ad0445
    901c:	240d0000 	strcs	r0, [sp], #-0
    9020:	7a04e004 	bvc	141038 <_Min_Stack_Size+0x140c38>
    9024:	0f000003 	svceq	0x00000003
    9028:	00315243 	eorseq	r5, r1, r3, asr #4
    902c:	c904e204 	stmdbgt	r4, {r2, r9, sp, lr, pc}
    9030:	00000000 	andeq	r0, r0, r0
    9034:	0004ac0e 	andeq	sl, r4, lr, lsl #24
    9038:	04e30400 	strbteq	r0, [r3], #1024	; 0x400
    903c:	0000008c 	andeq	r0, r0, ip, lsl #1
    9040:	52430f02 	subpl	r0, r3, #2, 30
    9044:	e4040032 	str	r0, [r4], #-50	; 0x32
    9048:	0000c904 	andeq	ip, r0, r4, lsl #18
    904c:	b60e0400 	strlt	r0, [lr], -r0, lsl #8
    9050:	04000004 	streq	r0, [r0], #-4
    9054:	008c04e5 	addeq	r0, ip, r5, ror #9
    9058:	0f060000 	svceq	0x00060000
    905c:	04005253 	streq	r5, [r0], #-595	; 0x253
    9060:	00c904e6 	sbceq	r0, r9, r6, ror #9
    9064:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    9068:	000004c0 	andeq	r0, r0, r0, asr #9
    906c:	8c04e704 	stchi	7, cr14, [r4], {4}
    9070:	0a000000 	beq	9078 <_Min_Stack_Size+0x8c78>
    9074:	0052440f 	subseq	r4, r2, pc, lsl #8
    9078:	c904e804 	stmdbgt	r4, {r2, fp, sp, lr, pc}
    907c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9080:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    9084:	04e90400 	strbteq	r0, [r9], #1024	; 0x400
    9088:	0000008c 	andeq	r0, r0, ip, lsl #1
    908c:	1ebf0e0e 	cdpne	14, 11, cr0, cr15, cr14, {0}
    9090:	ea040000 	b	109098 <_Min_Stack_Size+0x108c98>
    9094:	0000c904 	andeq	ip, r0, r4, lsl #18
    9098:	d60e1000 	strle	r1, [lr], -r0
    909c:	04000004 	streq	r0, [r0], #-4
    90a0:	008c04eb 	addeq	r0, ip, fp, ror #9
    90a4:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
    90a8:	00001e96 	muleq	r0, r6, lr
    90ac:	c904ec04 	stmdbgt	r4, {r2, sl, fp, sp, lr, pc}
    90b0:	14000000 	strne	r0, [r0], #-0
    90b4:	0004e00e 	andeq	lr, r4, lr
    90b8:	04ed0400 	strbteq	r0, [sp], #1024	; 0x400
    90bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    90c0:	1fb80e16 	svcne	0x00b80e16
    90c4:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    90c8:	0000c904 	andeq	ip, r0, r4, lsl #18
    90cc:	ea0e1800 	b	38f0d4 <_Min_Stack_Size+0x38ecd4>
    90d0:	04000004 	streq	r0, [r0], #-4
    90d4:	008c04ef 	addeq	r0, ip, pc, ror #9
    90d8:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    90dc:	00000332 	andeq	r0, r0, r2, lsr r3
    90e0:	c904f004 	stmdbgt	r4, {r2, ip, sp, lr, pc}
    90e4:	1c000000 	stcne	0, cr0, [r0], {-0}
    90e8:	0019710e 	andseq	r7, r9, lr, lsl #2
    90ec:	04f10400 	ldrbteq	r0, [r1], #1024	; 0x400
    90f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    90f4:	20990e1e 	addscs	r0, r9, lr, lsl lr
    90f8:	f2040000 	vhadd.s8	d0, d4, d0
    90fc:	0000c904 	andeq	ip, r0, r4, lsl #18
    9100:	7b0e2000 	blvc	391108 <_Min_Stack_Size+0x390d08>
    9104:	04000019 	streq	r0, [r0], #-25
    9108:	008c04f3 	strdeq	r0, [ip], r3
    910c:	00220000 	eoreq	r0, r2, r0
    9110:	0021210c 	eoreq	r2, r1, ip, lsl #2
    9114:	04f40400 	ldrbteq	r0, [r4], #1024	; 0x400
    9118:	00000288 	andeq	r0, r0, r8, lsl #5
    911c:	30053c10 	andcc	r3, r5, r0, lsl ip
    9120:	00000443 	andeq	r0, r0, r3, asr #8
    9124:	002acc11 	eoreq	ip, sl, r1, lsl ip
    9128:	a2320500 	eorsge	r0, r2, #0, 10
    912c:	00000000 	andeq	r0, r0, r0
    9130:	0030f311 	eorseq	pc, r0, r1, lsl r3	; <UNPREDICTABLE>
    9134:	a2350500 	eorsge	r0, r5, #0, 10
    9138:	04000000 	streq	r0, [r0], #-0
    913c:	00301911 	eorseq	r1, r0, r1, lsl r9
    9140:	a2380500 	eorsge	r0, r8, #0, 10
    9144:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9148:	002d8411 	eoreq	r8, sp, r1, lsl r4
    914c:	a23b0500 	eorsge	r0, fp, #0, 10
    9150:	0c000000 	stceq	0, cr0, [r0], {-0}
    9154:	002b9511 	eoreq	r9, fp, r1, lsl r5
    9158:	a23e0500 	eorsge	r0, lr, #0, 10
    915c:	10000000 	andne	r0, r0, r0
    9160:	002c4311 	eoreq	r4, ip, r1, lsl r3
    9164:	a2410500 	subge	r0, r1, #0, 10
    9168:	14000000 	strne	r0, [r0], #-0
    916c:	002fbb11 	eoreq	fp, pc, r1, lsl fp	; <UNPREDICTABLE>
    9170:	a2440500 	subge	r0, r4, #0, 10
    9174:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9178:	002b0611 	eoreq	r0, fp, r1, lsl r6
    917c:	a2470500 	subge	r0, r7, #0, 10
    9180:	1c000000 	stcne	0, cr0, [r0], {-0}
    9184:	002b3111 	eoreq	r3, fp, r1, lsl r1
    9188:	a24a0500 	subge	r0, sl, #0, 10
    918c:	20000000 	andcs	r0, r0, r0
    9190:	002a7511 	eoreq	r7, sl, r1, lsl r5
    9194:	a24d0500 	subge	r0, sp, #0, 10
    9198:	24000000 	strcs	r0, [r0], #-0
    919c:	002d6211 	eoreq	r6, sp, r1, lsl r2
    91a0:	a2500500 	subsge	r0, r0, #0, 10
    91a4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    91a8:	002fcf11 	eoreq	ip, pc, r1, lsl pc	; <UNPREDICTABLE>
    91ac:	a2530500 	subsge	r0, r3, #0, 10
    91b0:	2c000000 	stccs	0, cr0, [r0], {-0}
    91b4:	002f9211 	eoreq	r9, pc, r1, lsl r2	; <UNPREDICTABLE>
    91b8:	a2560500 	subsge	r0, r6, #0, 10
    91bc:	30000000 	andcc	r0, r0, r0
    91c0:	002aec11 	eoreq	lr, sl, r1, lsl ip
    91c4:	a2590500 	subsge	r0, r9, #0, 10
    91c8:	34000000 	strcc	r0, [r0], #-0
    91cc:	002c9c11 	eoreq	r9, ip, r1, lsl ip
    91d0:	a25c0500 	subsge	r0, ip, #0, 10
    91d4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    91d8:	31a10300 			; <UNDEFINED> instruction: 0x31a10300
    91dc:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    91e0:	00000386 	andeq	r0, r0, r6, lsl #7
    91e4:	64054010 	strvs	r4, [r5], #-16
    91e8:	00000517 	andeq	r0, r0, r7, lsl r5
    91ec:	002d2511 	eoreq	r2, sp, r1, lsl r5
    91f0:	a2660500 	rsbge	r0, r6, #0, 10
    91f4:	00000000 	andeq	r0, r0, r0
    91f8:	002c6611 	eoreq	r6, ip, r1, lsl r6
    91fc:	a2690500 	rsbge	r0, r9, #0, 10
    9200:	04000000 	streq	r0, [r0], #-0
    9204:	002a6211 	eoreq	r6, sl, r1, lsl r2
    9208:	a26c0500 	rsbge	r0, ip, #0, 10
    920c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9210:	002cf611 	eoreq	pc, ip, r1, lsl r6	; <UNPREDICTABLE>
    9214:	a26f0500 	rsbge	r0, pc, #0, 10
    9218:	0c000000 	stceq	0, cr0, [r0], {-0}
    921c:	00302911 	eorseq	r2, r0, r1, lsl r9
    9220:	a2720500 	rsbsge	r0, r2, #0, 10
    9224:	10000000 	andne	r0, r0, r0
    9228:	002e0111 	eoreq	r0, lr, r1, lsl r1
    922c:	a2750500 	rsbsge	r0, r5, #0, 10
    9230:	14000000 	strne	r0, [r0], #-0
    9234:	002c1a11 	eoreq	r1, ip, r1, lsl sl
    9238:	a2780500 	rsbsge	r0, r8, #0, 10
    923c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9240:	002cca11 	eoreq	ip, ip, r1, lsl sl
    9244:	a27b0500 	rsbsge	r0, fp, #0, 10
    9248:	1c000000 	stcne	0, cr0, [r0], {-0}
    924c:	002a4d11 	eoreq	r4, sl, r1, lsl sp
    9250:	a27e0500 	rsbsge	r0, lr, #0, 10
    9254:	20000000 	andcs	r0, r0, r0
    9258:	002f0411 	eoreq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
    925c:	a2810500 	addge	r0, r1, #0, 10
    9260:	24000000 	strcs	r0, [r0], #-0
    9264:	00306011 	eorseq	r6, r0, r1, lsl r0
    9268:	a2840500 	addge	r0, r4, #0, 10
    926c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9270:	00307611 	eorseq	r7, r0, r1, lsl r6
    9274:	a2870500 	addge	r0, r7, #0, 10
    9278:	2c000000 	stccs	0, cr0, [r0], {-0}
    927c:	002a3911 	eoreq	r3, sl, r1, lsl r9
    9280:	a28a0500 	addge	r0, sl, #0, 10
    9284:	30000000 	andcc	r0, r0, r0
    9288:	002c3011 	eoreq	r3, ip, r1, lsl r0
    928c:	a28c0500 	addge	r0, ip, #0, 10
    9290:	34000000 	strcc	r0, [r0], #-0
    9294:	00310311 	eorseq	r0, r1, r1, lsl r3
    9298:	a28f0500 	addge	r0, pc, #0, 10
    929c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    92a0:	002f5511 	eoreq	r5, pc, r1, lsl r5	; <UNPREDICTABLE>
    92a4:	a2920500 	addsge	r0, r2, #0, 10
    92a8:	3c000000 	stccc	0, cr0, [r0], {-0}
    92ac:	299a0300 	ldmibcs	sl, {r8, r9}
    92b0:	94050000 	strls	r0, [r5], #-0
    92b4:	0000044e 	andeq	r0, r0, lr, asr #8
    92b8:	a7050c10 	smladge	r5, r0, ip, r0
    92bc:	0000054f 	andeq	r0, r0, pc, asr #10
    92c0:	002fe711 	eoreq	lr, pc, r1, lsl r7	; <UNPREDICTABLE>
    92c4:	a2a90500 	adcge	r0, r9, #0, 10
    92c8:	00000000 	andeq	r0, r0, r0
    92cc:	002bdc11 	eoreq	sp, fp, r1, lsl ip
    92d0:	a2ac0500 	adcge	r0, ip, #0, 10
    92d4:	04000000 	streq	r0, [r0], #-0
    92d8:	002d4c11 	eoreq	r4, sp, r1, lsl ip
    92dc:	a2af0500 	adcge	r0, pc, #0, 10
    92e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    92e4:	2d080300 	stccs	3, cr0, [r8, #-0]
    92e8:	b1050000 	mrslt	r0, (UNDEF: 5)
    92ec:	00000522 	andeq	r0, r0, r2, lsr #10
    92f0:	30062810 	andcc	r2, r6, r0, lsl r8
    92f4:	000005db 	ldrdeq	r0, [r0], -fp
    92f8:	00259411 	eoreq	r9, r5, r1, lsl r4
    92fc:	a2320600 	eorsge	r0, r2, #0, 12
    9300:	00000000 	andeq	r0, r0, r0
    9304:	00262511 	eoreq	r2, r6, r1, lsl r5
    9308:	a2350600 	eorsge	r0, r5, #0, 12
    930c:	04000000 	streq	r0, [r0], #-0
    9310:	00244511 	eoreq	r4, r4, r1, lsl r5
    9314:	a2380600 	eorsge	r0, r8, #0, 12
    9318:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    931c:	00289d11 	eoreq	r9, r8, r1, lsl sp
    9320:	a2400600 	subge	r0, r0, #0, 12
    9324:	0c000000 	stceq	0, cr0, [r0], {-0}
    9328:	00287f11 	eoreq	r7, r8, r1, lsl pc
    932c:	a2480600 	subge	r0, r8, #0, 12
    9330:	10000000 	andne	r0, r0, r0
    9334:	00294211 	eoreq	r4, r9, r1, lsl r2
    9338:	a2500600 	subsge	r0, r0, #0, 12
    933c:	14000000 	strne	r0, [r0], #-0
    9340:	00285a11 	eoreq	r5, r8, r1, lsl sl
    9344:	a2560600 	subsge	r0, r6, #0, 12
    9348:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    934c:	00291d11 	eoreq	r1, r9, r1, lsl sp
    9350:	a2590600 	subsge	r0, r9, #0, 12
    9354:	1c000000 	stcne	0, cr0, [r0], {-0}
    9358:	00264c11 	eoreq	r4, r6, r1, lsl ip
    935c:	a25c0600 	subsge	r0, ip, #0, 12
    9360:	20000000 	andcs	r0, r0, r0
    9364:	00257211 	eoreq	r7, r5, r1, lsl r2
    9368:	a25f0600 	subsge	r0, pc, #0, 12
    936c:	24000000 	strcs	r0, [r0], #-0
    9370:	27350300 	ldrcs	r0, [r5, -r0, lsl #6]!
    9374:	61060000 	mrsvs	r0, (UNDEF: 6)
    9378:	0000055a 	andeq	r0, r0, sl, asr r5
    937c:	42070112 	andmi	r0, r7, #-2147483644	; 0x80000004
    9380:	00000607 	andeq	r0, r0, r7, lsl #12
    9384:	00085a0a 	andeq	r5, r8, sl, lsl #20
    9388:	460a0000 	strmi	r0, [sl], -r0
    938c:	01000008 	tsteq	r0, r8
    9390:	0007dd0a 	andeq	sp, r7, sl, lsl #26
    9394:	0c0a0200 	sfmeq	f0, 4, [sl], {-0}
    9398:	03000008 	movweq	r0, #8
    939c:	07770300 	ldrbeq	r0, [r7, -r0, lsl #6]!
    93a0:	47070000 	strmi	r0, [r7, -r0]
    93a4:	000005e6 	andeq	r0, r0, r6, ror #11
    93a8:	4f070112 	svcmi	0x00070112
    93ac:	00000627 	andeq	r0, r0, r7, lsr #12
    93b0:	0008950a 	andeq	r9, r8, sl, lsl #10
    93b4:	ac0a0000 	stcge	0, cr0, [sl], {-0}
    93b8:	01000007 	tsteq	r0, r7
    93bc:	082d0300 	stmdaeq	sp!, {r8, r9}
    93c0:	52070000 	andpl	r0, r7, #0
    93c4:	00000612 	andeq	r0, r0, r2, lsl r6
    93c8:	5a070112 	bpl	1c9818 <_Min_Stack_Size+0x1c9418>
    93cc:	00000653 	andeq	r0, r0, r3, asr r6
    93d0:	0009340a 	andeq	r3, r9, sl, lsl #8
    93d4:	430a0000 	movwmi	r0, #40960	; 0xa000
    93d8:	01000009 	tsteq	r0, r9
    93dc:	0008f10a 	andeq	pc, r8, sl, lsl #2
    93e0:	b70a0200 	strlt	r0, [sl, -r0, lsl #4]
    93e4:	03000009 	movweq	r0, #9
    93e8:	095d0300 	ldmdbeq	sp, {r8, r9}^
    93ec:	5f070000 	svcpl	0x00070000
    93f0:	00000632 	andeq	r0, r0, r2, lsr r6
    93f4:	6e070112 	mcrvs	1, 0, r0, cr7, cr2, {0}
    93f8:	00000679 	andeq	r0, r0, r9, ror r6
    93fc:	00097e0a 	andeq	r7, r9, sl, lsl #28
    9400:	d80a0000 	stmdale	sl, {}	; <UNPREDICTABLE>
    9404:	01000009 	tsteq	r0, r9
    9408:	00096f0a 	andeq	r6, r9, sl, lsl #30
    940c:	03000200 	movweq	r0, #512	; 0x200
    9410:	000009c7 	andeq	r0, r0, r7, asr #19
    9414:	065e7207 	ldrbeq	r7, [lr], -r7, lsl #4
    9418:	01120000 	tsteq	r2, r0
    941c:	06997a07 	ldreq	r7, [r9], r7, lsl #20
    9420:	ba0a0000 	blt	289428 <_Min_Stack_Size+0x289028>
    9424:	00000007 	andeq	r0, r0, r7
    9428:	00075b0a 	andeq	r5, r7, sl, lsl #22
    942c:	03000100 	movweq	r0, #256	; 0x100
    9430:	00000914 	andeq	r0, r0, r4, lsl r9
    9434:	06847d07 	streq	r7, [r4], r7, lsl #26
    9438:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    943c:	06e98407 	strbteq	r8, [r9], r7, lsl #8
    9440:	52110000 	andspl	r0, r1, #0
    9444:	07000007 	streq	r0, [r0, -r7]
    9448:	0000a286 	andeq	sl, r0, r6, lsl #5
    944c:	64110000 	ldrvs	r0, [r1], #-0
    9450:	0700000a 	streq	r0, [r0, -sl]
    9454:	00060789 	andeq	r0, r6, r9, lsl #15
    9458:	f7110400 			; <UNDEFINED> instruction: 0xf7110400
    945c:	07000007 	streq	r0, [r0, -r7]
    9460:	0006538c 	andeq	r5, r6, ip, lsl #7
    9464:	d2110500 	andsle	r0, r1, #0, 10
    9468:	07000007 	streq	r0, [r0, -r7]
    946c:	0006278f 	andeq	r2, r6, pc, lsl #15
    9470:	ad110600 	ldcge	6, cr0, [r1, #-0]
    9474:	07000008 	streq	r0, [r0, -r8]
    9478:	00067992 	muleq	r6, r2, r9
    947c:	03000700 	movweq	r0, #1792	; 0x700
    9480:	000009a6 	andeq	r0, r0, r6, lsr #19
    9484:	06a49407 	strteq	r9, [r4], r7, lsl #8
    9488:	12100000 	andsne	r0, r0, #0
    948c:	07693608 	strbeq	r3, [r9, -r8, lsl #12]!
    9490:	bf110000 	svclt	0x00110000
    9494:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    9498:	00008c38 	andeq	r8, r0, r8, lsr ip
    949c:	2d110000 	ldccs	0, cr0, [r1, #-0]
    94a0:	08000021 	stmdaeq	r0, {r0, r5}
    94a4:	00008c3b 	andeq	r8, r0, fp, lsr ip
    94a8:	99110200 	ldmdbls	r1, {r9}
    94ac:	08000021 	stmdaeq	r0, {r0, r5}
    94b0:	00008c3e 	andeq	r8, r0, lr, lsr ip
    94b4:	df110400 	svcle	0x00110400
    94b8:	08000020 	stmdaeq	r0, {r5}
    94bc:	00008c41 	andeq	r8, r0, r1, asr #24
    94c0:	fd110600 	ldc2	6, cr0, [r1, #-0]
    94c4:	08000020 	stmdaeq	r0, {r5}
    94c8:	00008c44 	andeq	r8, r0, r4, asr #24
    94cc:	48110800 	ldmdami	r1, {fp}
    94d0:	08000021 	stmdaeq	r0, {r0, r5}
    94d4:	00008c47 	andeq	r8, r0, r7, asr #24
    94d8:	0b110a00 	bleq	44bce0 <_Min_Stack_Size+0x44b8e0>
    94dc:	08000021 	stmdaeq	r0, {r0, r5}
    94e0:	00008c4b 	andeq	r8, r0, fp, asr #24
    94e4:	f0110c00 			; <UNDEFINED> instruction: 0xf0110c00
    94e8:	08000020 	stmdaeq	r0, {r5}
    94ec:	00008c51 	andeq	r8, r0, r1, asr ip
    94f0:	33110e00 	tstcc	r1, #0, 28
    94f4:	08000020 	stmdaeq	r0, {r5}
    94f8:	00008c54 	andeq	r8, r0, r4, asr ip
    94fc:	03001000 	movweq	r1, #0
    9500:	0000204e 	andeq	r2, r0, lr, asr #32
    9504:	06f45508 	ldrbteq	r5, [r4], r8, lsl #10
    9508:	df130000 	svcle	0x00130000
    950c:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    9510:	07a53a09 	streq	r3, [r5, r9, lsl #20]!
    9514:	a0110000 	andsge	r0, r1, r0
    9518:	09000047 	stmdbeq	r0, {r0, r1, r2, r6}
    951c:	0007a53c 	andeq	sl, r7, ip, lsr r5
    9520:	4a110000 	bmi	449528 <_Min_Stack_Size+0x449128>
    9524:	09000031 	stmdbeq	r0, {r0, r4, r5}
    9528:	00008c3d 	andeq	r8, r0, sp, lsr ip
    952c:	cf110400 	svcgt	0x00110400
    9530:	09000029 	stmdbeq	r0, {r0, r3, r5}
    9534:	00008c3e 	andeq	r8, r0, lr, lsr ip
    9538:	14000600 	strne	r0, [r0], #-1536	; 0x600
    953c:	0000d304 	andeq	sp, r0, r4, lsl #6
    9540:	4be50300 	blmi	ff94a148 <_estack+0xdf91a148>
    9544:	40090000 	andmi	r0, r9, r0
    9548:	00000774 	andeq	r0, r0, r4, ror r7
    954c:	3f0a0410 	svccc	0x000a0410
    9550:	000007d3 	ldrdeq	r0, [r0], -r3
    9554:	0a005815 	beq	1f5b0 <_Min_Stack_Size+0x1f1b0>
    9558:	00003341 	andeq	r3, r0, r1, asr #6
    955c:	59150000 	ldmdbpl	r5, {}	; <UNPREDICTABLE>
    9560:	33420a00 	movtcc	r0, #10752	; 0x2a00
    9564:	02000000 	andeq	r0, r0, #0
    9568:	48e60300 	stmiami	r6!, {r8, r9}^
    956c:	430a0000 	movwmi	r0, #40960	; 0xa000
    9570:	000007de 	ldrdeq	r0, [r0], -lr
    9574:	07b60414 			; <UNDEFINED> instruction: 0x07b60414
    9578:	80160000 	andshi	r0, r6, r0
    957c:	01000047 	tsteq	r0, r7, asr #32
    9580:	00794472 	rsbseq	r4, r9, r2, ror r4
    9584:	00022408 	andeq	r2, r2, r8, lsl #8
    9588:	089c0100 	ldmeq	ip, {r8}
    958c:	17000008 	strne	r0, [r0, -r8]
    9590:	0000412b 	andeq	r4, r0, fp, lsr #2
    9594:	06e97401 	strbteq	r7, [r9], r1, lsl #8
    9598:	91020000 	mrsls	r0, (UNDEF: 2)
    959c:	eb160070 	bl	589764 <_Min_Stack_Size+0x589364>
    95a0:	01000046 	tsteq	r0, r6, asr #32
    95a4:	007b68e7 	rsbseq	r6, fp, r7, ror #17
    95a8:	0000b208 	andeq	fp, r0, r8, lsl #4
    95ac:	2d9c0100 	ldfcss	f0, [ip]
    95b0:	17000008 	strne	r0, [r0, -r8]
    95b4:	00002adc 	ldrdeq	r2, [r0], -ip
    95b8:	0443e901 	strbeq	lr, [r3], #-2305	; 0x901
    95bc:	91030000 	mrsls	r0, (UNDEF: 3)
    95c0:	18007fbc 	stmdane	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    95c4:	0000470e 	andeq	r4, r0, lr, lsl #14
    95c8:	1c013c01 	stcne	12, cr3, [r1], {1}
    95cc:	b408007c 	strlt	r0, [r8], #-124	; 0x7c
    95d0:	01000000 	mrseq	r0, (UNDEF: 0)
    95d4:	0008549c 	muleq	r8, ip, r4
    95d8:	2ea71900 	cdpcs	9, 10, cr1, cr7, cr0, {0}
    95dc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    95e0:	00051701 	andeq	r1, r5, r1, lsl #14
    95e4:	b8910300 	ldmlt	r1, {r8, r9}
    95e8:	6918007f 	ldmdbvs	r8, {r0, r1, r2, r3, r4, r5, r6}
    95ec:	01000048 	tsteq	r0, r8, asr #32
    95f0:	7cd0018d 	ldfvce	f0, [r0], {141}	; 0x8d
    95f4:	002c0800 	eoreq	r0, ip, r0, lsl #16
    95f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    95fc:	0000087a 	andeq	r0, r0, sl, ror r8
    9600:	0005b81a 	andeq	fp, r5, sl, lsl r8
    9604:	018d0100 	orreq	r0, sp, r0, lsl #2
    9608:	00000104 	andeq	r0, r0, r4, lsl #2
    960c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    9610:	004b521b 	subeq	r5, fp, fp, lsl r2
    9614:	019e0100 	orrseq	r0, lr, r0, lsl #2
    9618:	08007cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
    961c:	00000040 	andeq	r0, r0, r0, asr #32
    9620:	08a09c01 	stmiaeq	r0!, {r0, sl, fp, ip, pc}
    9624:	c11a0000 	tstgt	sl, r0
    9628:	0100002b 	tsteq	r0, fp, lsr #32
    962c:	0069019e 	mlseq	r9, lr, r1, r0
    9630:	91020000 	mrsls	r0, (UNDEF: 2)
    9634:	8d1b0074 	ldchi	0, cr0, [fp, #-464]	; 0xfffffe30
    9638:	01000048 	tsteq	r0, r8, asr #32
    963c:	7d3c01b2 	ldfvcs	f0, [ip, #-712]!	; 0xfffffd38
    9640:	002c0800 	eoreq	r0, ip, r0, lsl #16
    9644:	9c010000 	stcls	0, cr0, [r1], {-0}
    9648:	000008d5 	ldrdeq	r0, [r0], -r5
    964c:	00468c1a 	subeq	r8, r6, sl, lsl ip
    9650:	01b20100 			; <UNDEFINED> instruction: 0x01b20100
    9654:	00000045 	andeq	r0, r0, r5, asr #32
    9658:	1a769102 	bne	1dada68 <_Min_Stack_Size+0x1dad668>
    965c:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    9660:	4501b201 	strmi	fp, [r1, #-513]	; 0x201
    9664:	02000000 	andeq	r0, r0, #0
    9668:	1b007491 	blne	268b4 <_Min_Stack_Size+0x264b4>
    966c:	00004aa3 	andeq	r4, r0, r3, lsr #21
    9670:	6801c001 	stmdavs	r1, {r0, lr, pc}
    9674:	2c08007d 	stccs	0, cr0, [r8], {125}	; 0x7d
    9678:	01000000 	mrseq	r0, (UNDEF: 0)
    967c:	00090a9c 	muleq	r9, ip, sl
    9680:	468c1a00 	strmi	r1, [ip], r0, lsl #20
    9684:	c0010000 	andgt	r0, r1, r0
    9688:	00090a01 	andeq	r0, r9, r1, lsl #20
    968c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9690:	0048f41a 	subeq	pc, r8, sl, lsl r4	; <UNPREDICTABLE>
    9694:	01c00100 	biceq	r0, r0, r0, lsl #2
    9698:	0000090a 	andeq	r0, r0, sl, lsl #18
    969c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    96a0:	00450414 	subeq	r0, r5, r4, lsl r4
    96a4:	851b0000 	ldrhi	r0, [fp, #-0]
    96a8:	01000046 	tsteq	r0, r6, asr #32
    96ac:	7d9401cb 	ldfvcs	f0, [r4, #812]	; 0x32c
    96b0:	00200800 	eoreq	r0, r0, r0, lsl #16
    96b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    96b8:	00000936 	andeq	r0, r0, r6, lsr r9
    96bc:	0048f81a 	subeq	pc, r8, sl, lsl r8	; <UNPREDICTABLE>
    96c0:	01cb0100 	biceq	r0, fp, r0, lsl #2
    96c4:	00000045 	andeq	r0, r0, r5, asr #32
    96c8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    96cc:	0048ed1b 	subeq	lr, r8, fp, lsl sp
    96d0:	01d50100 	bicseq	r0, r5, r0, lsl #2
    96d4:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    96d8:	00000020 	andeq	r0, r0, r0, lsr #32
    96dc:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    96e0:	f81a0000 			; <UNDEFINED> instruction: 0xf81a0000
    96e4:	01000048 	tsteq	r0, r8, asr #32
    96e8:	004501d5 	ldrdeq	r0, [r5], #-21	; 0xffffffeb
    96ec:	91020000 	mrsls	r0, (UNDEF: 2)
    96f0:	8c1b0076 	ldchi	0, cr0, [fp], {118}	; 0x76
    96f4:	0100004b 	tsteq	r0, fp, asr #32
    96f8:	7dd401df 	ldfvce	f0, [r4, #892]	; 0x37c
    96fc:	001c0800 	andseq	r0, ip, r0, lsl #16
    9700:	9c010000 	stcls	0, cr0, [r1], {-0}
    9704:	00000982 	andeq	r0, r0, r2, lsl #19
    9708:	004c2c1a 	subeq	r2, ip, sl, lsl ip
    970c:	01df0100 	bicseq	r0, pc, r0, lsl #2
    9710:	00000982 	andeq	r0, r0, r2, lsl #19
    9714:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9718:	07ab0414 			; <UNDEFINED> instruction: 0x07ab0414
    971c:	e6180000 	ldr	r0, [r8], -r0
    9720:	01000047 	tsteq	r0, r7, asr #32
    9724:	7df001ea 	ldfvce	f0, [r0, #936]!	; 0x3a8
    9728:	00400800 	subeq	r0, r0, r0, lsl #16
    972c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9730:	000009ae 	andeq	r0, r0, lr, lsr #19
    9734:	0047fa1a 	subeq	pc, r7, sl, lsl sl	; <UNPREDICTABLE>
    9738:	01ea0100 	mvneq	r0, r0, lsl #2
    973c:	0000002c 	andeq	r0, r0, ip, lsr #32
    9740:	00779102 	rsbseq	r9, r7, r2, lsl #2
    9744:	004bfa1c 	subeq	pc, fp, ip, lsl sl	; <UNPREDICTABLE>
    9748:	01fc0100 	mvnseq	r0, r0, lsl #2
    974c:	00000982 	andeq	r0, r0, r2, lsl #19
    9750:	08007e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp, lr}
    9754:	00000018 	andeq	r0, r0, r8, lsl r0
    9758:	96189c01 	ldrls	r9, [r8], -r1, lsl #24
    975c:	01000046 	tsteq	r0, r6, asr #32
    9760:	7e48020a 	cdpvc	2, 4, cr0, cr8, cr10, {0}
    9764:	00500800 	subseq	r0, r0, r0, lsl #16
    9768:	9c010000 	stcls	0, cr0, [r1], {-0}
    976c:	000009f9 	strdeq	r0, [r0], -r9
    9770:	00223b1a 	eoreq	r3, r2, sl, lsl fp
    9774:	020a0100 	andeq	r0, sl, #0, 2
    9778:	00000045 	andeq	r0, r0, r5, asr #32
    977c:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    9780:	000049b8 			; <UNDEFINED> instruction: 0x000049b8
    9784:	45020c01 	strmi	r0, [r2, #-3073]	; 0xc01
    9788:	02000000 	andeq	r0, r0, #0
    978c:	1b007691 	blne	271d8 <_Min_Stack_Size+0x26dd8>
    9790:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
    9794:	98021c01 	stmdals	r2, {r0, sl, fp, ip}
    9798:	4008007e 	andmi	r0, r8, lr, ror r0
    979c:	01000000 	mrseq	r0, (UNDEF: 0)
    97a0:	000a2e9c 	muleq	sl, ip, lr
    97a4:	48f81a00 	ldmmi	r8!, {r9, fp, ip}^
    97a8:	1c010000 	stcne	0, cr0, [r1], {-0}
    97ac:	00004502 	andeq	r4, r0, r2, lsl #10
    97b0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    97b4:	00431419 	subeq	r1, r3, r9, lsl r4
    97b8:	021e0100 	andseq	r0, lr, #0, 2
    97bc:	00000069 	andeq	r0, r0, r9, rrx
    97c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    97c4:	00478b1d 	subeq	r8, r7, sp, lsl fp
    97c8:	022d0100 	eoreq	r0, sp, #0, 2
    97cc:	00000069 	andeq	r0, r0, r9, rrx
    97d0:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    97d4:	00000038 	andeq	r0, r0, r8, lsr r0
    97d8:	0a679c01 	beq	19f07e4 <_Min_Stack_Size+0x19f03e4>
    97dc:	b11a0000 	tstlt	sl, r0
    97e0:	0100004a 	tsteq	r0, sl, asr #32
    97e4:	0045022d 	subeq	r0, r5, sp, lsr #4
    97e8:	91020000 	mrsls	r0, (UNDEF: 2)
    97ec:	47da1a76 			; <UNDEFINED> instruction: 0x47da1a76
    97f0:	2d010000 	stccs	0, cr0, [r1, #-0]
    97f4:	00004502 	andeq	r4, r0, r2, lsl #10
    97f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    97fc:	47641800 	strbmi	r1, [r4, -r0, lsl #16]!
    9800:	37010000 	strcc	r0, [r1, -r0]
    9804:	007f1002 	rsbseq	r1, pc, r2
    9808:	00006808 	andeq	r6, r0, r8, lsl #16
    980c:	9c9c0100 	ldflss	f0, [ip], {0}
    9810:	1a00000a 	bne	9840 <_Min_Stack_Size+0x9440>
    9814:	0000482d 	andeq	r4, r0, sp, lsr #16
    9818:	69023701 	stmdbvs	r2, {r0, r8, r9, sl, ip, sp}
    981c:	02000000 	andeq	r0, r0, #0
    9820:	1d196491 	cfldrsne	mvf6, [r9, #-580]	; 0xfffffdbc
    9824:	0100002a 	tsteq	r0, sl, lsr #32
    9828:	054f0239 	strbeq	r0, [pc, #-569]	; 95f7 <_Min_Stack_Size+0x91f7>
    982c:	91020000 	mrsls	r0, (UNDEF: 2)
    9830:	ab18006c 	blge	6099e8 <_Min_Stack_Size+0x6095e8>
    9834:	0100004b 	tsteq	r0, fp, asr #32
    9838:	7f780253 	svcvc	0x00780253
    983c:	00480800 	subeq	r0, r8, r0, lsl #16
    9840:	9c010000 	stcls	0, cr0, [r1], {-0}
    9844:	00000ac2 	andeq	r0, r0, r2, asr #21
    9848:	002a1d19 	eoreq	r1, sl, r9, lsl sp
    984c:	02550100 	subseq	r0, r5, #0, 2
    9850:	0000054f 	andeq	r0, r0, pc, asr #10
    9854:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    9858:	0049c21b 	subeq	ip, r9, fp, lsl r2
    985c:	026c0100 	rsbeq	r0, ip, #0, 2
    9860:	08007fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9864:	00000120 	andeq	r0, r0, r0, lsr #2
    9868:	0b409c01 	bleq	1030874 <_Min_Stack_Size+0x1030474>
    986c:	b11a0000 	tstlt	sl, r0
    9870:	0100004a 	tsteq	r0, sl, asr #32
    9874:	0045026c 	subeq	r0, r5, ip, ror #4
    9878:	91020000 	mrsls	r0, (UNDEF: 2)
    987c:	47da1a66 	ldrbmi	r1, [sl, r6, ror #20]
    9880:	6c010000 	stcvs	0, cr0, [r1], {-0}
    9884:	00004502 	andeq	r4, r0, r2, lsl #10
    9888:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    988c:	0100631e 	tsteq	r0, lr, lsl r3
    9890:	0b40026c 	bleq	100a248 <_Min_Stack_Size+0x1009e48>
    9894:	91020000 	mrsls	r0, (UNDEF: 2)
    9898:	43141960 	tstmi	r4, #96, 18	; 0x180000
    989c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    98a0:	00006902 	andeq	r6, r0, r2, lsl #18
    98a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    98a8:	000feb19 	andeq	lr, pc, r9, lsl fp	; <UNPREDICTABLE>
    98ac:	026e0100 	rsbeq	r0, lr, #0, 2
    98b0:	00000069 	andeq	r0, r0, r9, rrx
    98b4:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    98b8:	000047c4 	andeq	r4, r0, r4, asr #15
    98bc:	69026e01 	stmdbvs	r2, {r0, r9, sl, fp, sp, lr}
    98c0:	02000000 	andeq	r0, r0, #0
    98c4:	34196891 	ldrcc	r6, [r9], #-2193	; 0x891
    98c8:	01000049 	tsteq	r0, r9, asr #32
    98cc:	0069026f 	rsbeq	r0, r9, pc, ror #4
    98d0:	91020000 	mrsls	r0, (UNDEF: 2)
    98d4:	0414006c 	ldreq	r0, [r4], #-108	; 0x6c
    98d8:	00000b46 	andeq	r0, r0, r6, asr #22
    98dc:	00004508 	andeq	r4, r0, r8, lsl #10
    98e0:	47391800 	ldrmi	r1, [r9, -r0, lsl #16]!
    98e4:	94010000 	strls	r0, [r1], #-0
    98e8:	0080e002 	addeq	lr, r0, r2
    98ec:	00004808 	andeq	r4, r0, r8, lsl #16
    98f0:	8f9c0100 	svchi	0x009c0100
    98f4:	1a00000b 	bne	9928 <_Min_Stack_Size+0x9528>
    98f8:	0000223b 	andeq	r2, r0, fp, lsr r2
    98fc:	45029401 	strmi	r9, [r2, #-1025]	; 0x401
    9900:	02000000 	andeq	r0, r0, #0
    9904:	c91a7691 	ldmdbgt	sl, {r0, r4, r7, r9, sl, ip, sp, lr}
    9908:	01000047 	tsteq	r0, r7, asr #32
    990c:	00450294 	umaaleq	r0, r5, r4, r2
    9910:	91020000 	mrsls	r0, (UNDEF: 2)
    9914:	46d31a74 			; <UNDEFINED> instruction: 0x46d31a74
    9918:	94010000 	strls	r0, [r1], #-0
    991c:	00002c02 	andeq	r2, r0, r2, lsl #24
    9920:	73910200 	orrsvc	r0, r1, #0, 4
    9924:	48171800 	ldmdami	r7, {fp, ip}
    9928:	a3010000 	movwge	r0, #4096	; 0x1000
    992c:	00812802 	addeq	r2, r1, r2, lsl #16
    9930:	00007808 	andeq	r7, r0, r8, lsl #16
    9934:	d39c0100 	orrsle	r0, ip, #0, 2
    9938:	1a00000b 	bne	996c <_Min_Stack_Size+0x956c>
    993c:	0000223b 	andeq	r2, r0, fp, lsr r2
    9940:	4502a301 	strmi	sl, [r2, #-769]	; 0x301
    9944:	02000000 	andeq	r0, r0, #0
    9948:	701e6e91 	mulsvc	lr, r1, lr
    994c:	01007274 	tsteq	r0, r4, ror r2
    9950:	0bd302a3 	bleq	ff4ca3e4 <_estack+0xdf49a3e4>
    9954:	91020000 	mrsls	r0, (UNDEF: 2)
    9958:	49b81968 	ldmibmi	r8!, {r3, r5, r6, r8, fp, ip}
    995c:	a5010000 	strge	r0, [r1, #-0]
    9960:	00004502 	andeq	r4, r0, r2, lsl #10
    9964:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9968:	2c041400 	cfstrscs	mvf1, [r4], {-0}
    996c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9970:	0000471c 	andeq	r4, r0, ip, lsl r7
    9974:	a002ba01 	andge	fp, r2, r1, lsl #20
    9978:	7c080081 	stcvc	0, cr0, [r8], {129}	; 0x81
    997c:	01000000 	mrseq	r0, (UNDEF: 0)
    9980:	000c2c9c 	muleq	ip, ip, ip
    9984:	4ab11a00 	bmi	fec5018c <_estack+0xdec2018c>
    9988:	ba010000 	blt	49990 <_Min_Stack_Size+0x49590>
    998c:	00004502 	andeq	r4, r0, r2, lsl #10
    9990:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9994:	0047da1a 	subeq	sp, r7, sl, lsl sl
    9998:	02ba0100 	adcseq	r0, sl, #0, 2
    999c:	00000045 	andeq	r0, r0, r5, asr #32
    99a0:	1a749102 	bne	1d2ddb0 <_Min_Stack_Size+0x1d2d9b0>
    99a4:	000029cf 	andeq	r2, r0, pc, asr #19
    99a8:	4502ba01 	strmi	fp, [r2, #-2561]	; 0xa01
    99ac:	02000000 	andeq	r0, r0, #0
    99b0:	4a1a7291 	bmi	6a63fc <_Min_Stack_Size+0x6a5ffc>
    99b4:	01000031 	tsteq	r0, r1, lsr r0
    99b8:	004502ba 	strheq	r0, [r5], #-42	; 0xffffffd6
    99bc:	91020000 	mrsls	r0, (UNDEF: 2)
    99c0:	f91f0070 			; <UNDEFINED> instruction: 0xf91f0070
    99c4:	01000049 	tsteq	r0, r9, asr #32
    99c8:	821c02d8 	andshi	r0, ip, #216, 4	; 0x8000000d
    99cc:	00140800 	andseq	r0, r4, r0, lsl #16
    99d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    99d4:	004a9618 	subeq	r9, sl, r8, lsl r6
    99d8:	02e60100 	rsceq	r0, r6, #0, 2
    99dc:	08008230 	stmdaeq	r0, {r4, r5, r9, pc}
    99e0:	000000c8 	andeq	r0, r0, r8, asr #1
    99e4:	0ce09c01 	stcleq	12, cr9, [r0], #4
    99e8:	b11a0000 	tstlt	sl, r0
    99ec:	0100004a 	tsteq	r0, sl, asr #32
    99f0:	004502e6 	subeq	r0, r5, r6, ror #5
    99f4:	91030000 	mrsls	r0, (UNDEF: 3)
    99f8:	da1a7fbe 	ble	6a98f8 <_Min_Stack_Size+0x6a94f8>
    99fc:	01000047 	tsteq	r0, r7, asr #32
    9a00:	004502e6 	subeq	r0, r5, r6, ror #5
    9a04:	91030000 	mrsls	r0, (UNDEF: 3)
    9a08:	e61a7fbc 			; <UNDEFINED> instruction: 0xe61a7fbc
    9a0c:	01000011 	tsteq	r0, r1, lsl r0
    9a10:	004502e6 	subeq	r0, r5, r6, ror #5
    9a14:	91030000 	mrsls	r0, (UNDEF: 3)
    9a18:	8f1a7fba 	svchi	0x001a7fba
    9a1c:	01000018 	tsteq	r0, r8, lsl r0
    9a20:	002c02e6 	eoreq	r0, ip, r6, ror #5
    9a24:	91030000 	mrsls	r0, (UNDEF: 3)
    9a28:	ba197fb9 	blt	669914 <_Min_Stack_Size+0x669514>
    9a2c:	01000025 	tsteq	r0, r5, lsr #32
    9a30:	05db02e8 	ldrbeq	r0, [fp, #744]	; 0x2e8
    9a34:	91020000 	mrsls	r0, (UNDEF: 2)
    9a38:	49341944 	ldmdbmi	r4!, {r2, r6, r8, fp, ip}
    9a3c:	ea010000 	b	49a44 <_Min_Stack_Size+0x49644>
    9a40:	00006902 	andeq	r6, r0, r2, lsl #18
    9a44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9a48:	00487819 	subeq	r7, r8, r9, lsl r8
    9a4c:	02eb0100 	rsceq	r0, fp, #0, 2
    9a50:	00000045 	andeq	r0, r0, r5, asr #32
    9a54:	19729102 	ldmdbne	r2!, {r1, r8, ip, pc}^
    9a58:	00004969 	andeq	r4, r0, r9, ror #18
    9a5c:	4502eb01 	strmi	lr, [r2, #-2817]	; 0xb01
    9a60:	02000000 	andeq	r0, r0, #0
    9a64:	fe197091 	mrc2	0, 0, r7, cr9, cr1, {4}
    9a68:	01000048 	tsteq	r0, r8, asr #32
    9a6c:	004502eb 	subeq	r0, r5, fp, ror #5
    9a70:	91020000 	mrsls	r0, (UNDEF: 2)
    9a74:	1b18006e 	blne	609c34 <_Min_Stack_Size+0x609834>
    9a78:	0100004a 	tsteq	r0, sl, asr #32
    9a7c:	82f8031c 	rscshi	r0, r8, #28, 6	; 0x70000000
    9a80:	00680800 	rsbeq	r0, r8, r0, lsl #16
    9a84:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a88:	00000d33 	andeq	r0, r0, r3, lsr sp
    9a8c:	004ab11a 	subeq	fp, sl, sl, lsl r1
    9a90:	031c0100 	tsteq	ip, #0, 2
    9a94:	00000045 	andeq	r0, r0, r5, asr #32
    9a98:	1a769102 	bne	1dadea8 <_Min_Stack_Size+0x1dadaa8>
    9a9c:	000047da 	ldrdeq	r4, [r0], -sl
    9aa0:	45031c01 	strmi	r1, [r3, #-3073]	; 0xc01
    9aa4:	02000000 	andeq	r0, r0, #0
    9aa8:	cf1a7491 	svcgt	0x001a7491
    9aac:	01000029 	tsteq	r0, r9, lsr #32
    9ab0:	0045031c 	subeq	r0, r5, ip, lsl r3
    9ab4:	91020000 	mrsls	r0, (UNDEF: 2)
    9ab8:	314a1a72 	hvccc	41378	; 0xa1a2
    9abc:	1c010000 	stcne	0, cr0, [r1], {-0}
    9ac0:	00004503 	andeq	r4, r0, r3, lsl #10
    9ac4:	70910200 	addsvc	r0, r1, r0, lsl #4
    9ac8:	4a871b00 	bmi	fe1d06d0 <_estack+0xde1a06d0>
    9acc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9ad0:	00836003 	addeq	r6, r3, r3
    9ad4:	00012808 	andeq	r2, r1, r8, lsl #16
    9ad8:	ae9c0100 	fmlgee	f0, f4, f0
    9adc:	1a00000d 	bne	9b18 <_Min_Stack_Size+0x9718>
    9ae0:	00004ab1 			; <UNDEFINED> instruction: 0x00004ab1
    9ae4:	45032e01 	strmi	r2, [r3, #-3585]	; 0xe01
    9ae8:	02000000 	andeq	r0, r0, #0
    9aec:	da1a6691 	ble	6a3538 <_Min_Stack_Size+0x6a3138>
    9af0:	01000047 	tsteq	r0, r7, asr #32
    9af4:	0045032e 	subeq	r0, r5, lr, lsr #6
    9af8:	91020000 	mrsls	r0, (UNDEF: 2)
    9afc:	47071a64 	strmi	r1, [r7, -r4, ror #20]
    9b00:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9b04:	00004503 	andeq	r4, r0, r3, lsl #10
    9b08:	62910200 	addsvs	r0, r1, #0, 4
    9b0c:	01007820 	tsteq	r0, r0, lsr #16
    9b10:	007e0330 	rsbseq	r0, lr, r0, lsr r3
    9b14:	91020000 	mrsls	r0, (UNDEF: 2)
    9b18:	00792074 	rsbseq	r2, r9, r4, ror r0
    9b1c:	7e033001 	cdpvc	0, 0, cr3, cr3, cr1, {0}
    9b20:	02000000 	andeq	r0, r0, #0
    9b24:	65207091 	strvs	r7, [r0, #-145]!	; 0x91
    9b28:	01007272 	tsteq	r0, r2, ror r2
    9b2c:	007e0330 	rsbseq	r0, lr, r0, lsr r3
    9b30:	91020000 	mrsls	r0, (UNDEF: 2)
    9b34:	3265206c 	rsbcc	r2, r5, #108	; 0x6c
    9b38:	03300100 	teqeq	r0, #0, 2
    9b3c:	0000007e 	andeq	r0, r0, lr, ror r0
    9b40:	00689102 	rsbeq	r9, r8, r2, lsl #2
    9b44:	0047a618 	subeq	sl, r7, r8, lsl r6
    9b48:	03490100 	movteq	r0, #37120	; 0x9100
    9b4c:	08008488 	stmdaeq	r0, {r3, r7, sl, pc}
    9b50:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    9b54:	0e639c01 	cdpeq	12, 6, cr9, cr3, cr1, {0}
    9b58:	b11a0000 	tstlt	sl, r0
    9b5c:	0100004a 	tsteq	r0, sl, asr #32
    9b60:	007e0349 	rsbseq	r0, lr, r9, asr #6
    9b64:	91020000 	mrsls	r0, (UNDEF: 2)
    9b68:	47da1a54 			; <UNDEFINED> instruction: 0x47da1a54
    9b6c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    9b70:	00007e03 	andeq	r7, r0, r3, lsl #28
    9b74:	50910200 	addspl	r0, r1, r0, lsl #4
    9b78:	0047071a 	subeq	r0, r7, sl, lsl r7
    9b7c:	03490100 	movteq	r0, #37120	; 0x9100
    9b80:	0000007e 	andeq	r0, r0, lr, ror r0
    9b84:	1a4c9102 	bne	132df94 <_Min_Stack_Size+0x132db94>
    9b88:	00004731 	andeq	r4, r0, r1, lsr r7
    9b8c:	7e034901 	cdpvc	9, 0, cr4, cr3, cr1, {0}
    9b90:	02000000 	andeq	r0, r0, #0
    9b94:	78204891 	stmdavc	r0!, {r0, r4, r7, fp, lr}
    9b98:	034b0100 	movteq	r0, #45312	; 0xb100
    9b9c:	0000007e 	andeq	r0, r0, lr, ror r0
    9ba0:	20749102 	rsbscs	r9, r4, r2, lsl #2
    9ba4:	4b010079 	blmi	49d90 <_Min_Stack_Size+0x49990>
    9ba8:	00007e03 	andeq	r7, r0, r3, lsl #28
    9bac:	70910200 	addsvc	r0, r1, r0, lsl #4
    9bb0:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
    9bb4:	034b0100 	movteq	r0, #45312	; 0xb100
    9bb8:	0000007e 	andeq	r0, r0, lr, ror r0
    9bbc:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    9bc0:	01003265 	tsteq	r0, r5, ror #4
    9bc4:	007e034b 	rsbseq	r0, lr, fp, asr #6
    9bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    9bcc:	004b2068 	subeq	r2, fp, r8, rrx
    9bd0:	63034c01 	movwvs	r4, #15361	; 0x3c01
    9bd4:	0200000e 	andeq	r0, r0, #14
    9bd8:	37196491 			; <UNDEFINED> instruction: 0x37196491
    9bdc:	0100004b 	tsteq	r0, fp, asr #32
    9be0:	0e63034c 	cdpeq	3, 6, cr0, cr3, cr12, {2}
    9be4:	91020000 	mrsls	r0, (UNDEF: 2)
    9be8:	4b3c1960 	blmi	f10170 <_Min_Stack_Size+0xf0fd70>
    9bec:	4c010000 	stcmi	0, cr0, [r1], {-0}
    9bf0:	000e6303 	andeq	r6, lr, r3, lsl #6
    9bf4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    9bf8:	04040200 	streq	r0, [r4], #-512	; 0x200
    9bfc:	00000179 	andeq	r0, r0, r9, ror r1
    9c00:	0049861b 	subeq	r8, r9, fp, lsl r6
    9c04:	03820100 	orreq	r0, r2, #0, 2
    9c08:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
    9c0c:	00000350 	andeq	r0, r0, r0, asr r3
    9c10:	0f1f9c01 	svceq	0x001f9c01
    9c14:	b11a0000 	tstlt	sl, r0
    9c18:	0100004a 	tsteq	r0, sl, asr #32
    9c1c:	007e0382 	rsbseq	r0, lr, r2, lsl #7
    9c20:	91020000 	mrsls	r0, (UNDEF: 2)
    9c24:	47da1a54 			; <UNDEFINED> instruction: 0x47da1a54
    9c28:	82010000 	andhi	r0, r1, #0
    9c2c:	00007e03 	andeq	r7, r0, r3, lsl #28
    9c30:	50910200 	addspl	r0, r1, r0, lsl #4
    9c34:	0047071a 	subeq	r0, r7, sl, lsl r7
    9c38:	03820100 	orreq	r0, r2, #0, 2
    9c3c:	0000007e 	andeq	r0, r0, lr, ror r0
    9c40:	1a4c9102 	bne	132e050 <_Min_Stack_Size+0x132dc50>
    9c44:	00004731 	andeq	r4, r0, r1, lsr r7
    9c48:	7e038201 	cdpvc	2, 0, cr8, cr3, cr1, {0}
    9c4c:	02000000 	andeq	r0, r0, #0
    9c50:	78204891 	stmdavc	r0!, {r0, r4, r7, fp, lr}
    9c54:	03840100 	orreq	r0, r4, #0, 2
    9c58:	0000007e 	andeq	r0, r0, lr, ror r0
    9c5c:	20749102 	rsbscs	r9, r4, r2, lsl #2
    9c60:	84010079 	strhi	r0, [r1], #-121	; 0x79
    9c64:	00007e03 	andeq	r7, r0, r3, lsl #28
    9c68:	70910200 	addsvc	r0, r1, r0, lsl #4
    9c6c:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
    9c70:	03840100 	orreq	r0, r4, #0, 2
    9c74:	0000007e 	andeq	r0, r0, lr, ror r0
    9c78:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    9c7c:	01003265 	tsteq	r0, r5, ror #4
    9c80:	007e0384 	rsbseq	r0, lr, r4, lsl #7
    9c84:	91020000 	mrsls	r0, (UNDEF: 2)
    9c88:	004b2068 	subeq	r2, fp, r8, rrx
    9c8c:	63038501 	movwvs	r8, #13569	; 0x3501
    9c90:	0200000e 	andeq	r0, r0, #14
    9c94:	37196491 			; <UNDEFINED> instruction: 0x37196491
    9c98:	0100004b 	tsteq	r0, fp, asr #32
    9c9c:	0e630385 	cdpeq	3, 6, cr0, cr3, cr5, {4}
    9ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    9ca4:	4b3c1960 	blmi	f1022c <_Min_Stack_Size+0xf0fe2c>
    9ca8:	85010000 	strhi	r0, [r1, #-0]
    9cac:	000e6303 	andeq	r6, lr, r3, lsl #6
    9cb0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    9cb4:	4b411b00 	blmi	10508bc <_Min_Stack_Size+0x10504bc>
    9cb8:	b7010000 	strlt	r0, [r1, -r0]
    9cbc:	008a9403 	addeq	r9, sl, r3, lsl #8
    9cc0:	00007c08 	andeq	r7, r0, r8, lsl #24
    9cc4:	639c0100 	orrsvs	r0, ip, #0, 2
    9cc8:	1a00000f 	bne	9d0c <_Min_Stack_Size+0x990c>
    9ccc:	00004b4d 	andeq	r4, r0, sp, asr #22
    9cd0:	6303b701 	movwvs	fp, #14081	; 0x3701
    9cd4:	0200000f 	andeq	r0, r0, #15
    9cd8:	14196c91 	ldrne	r6, [r9], #-3217	; 0xc91
    9cdc:	01000043 	tsteq	r0, r3, asr #32
    9ce0:	006903b9 	strhteq	r0, [r9], #-57	; 0xffffffc7
    9ce4:	91020000 	mrsls	r0, (UNDEF: 2)
    9ce8:	0feb1974 	svceq	0x00eb1974
    9cec:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    9cf0:	00006903 	andeq	r6, r0, r3, lsl #18
    9cf4:	70910200 	addsvc	r0, r1, r0, lsl #4
    9cf8:	69041400 	stmdbvs	r4, {sl, ip}
    9cfc:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    9d00:	00000069 	andeq	r0, r0, r9, rrx
    9d04:	00493d18 	subeq	r3, r9, r8, lsl sp
    9d08:	03d10100 	bicseq	r0, r1, #0, 2
    9d0c:	08008b10 	stmdaeq	r0, {r4, r8, r9, fp, pc}
    9d10:	000001dc 	ldrdeq	r0, [r0], -ip
    9d14:	100c9c01 	andne	r9, ip, r1, lsl #24
    9d18:	821a0000 	andshi	r0, sl, #0
    9d1c:	01000048 	tsteq	r0, r8, asr #32
    9d20:	006903d1 	ldrdeq	r0, [r9], #-49	; 0xffffffcf	; <UNPREDICTABLE>
    9d24:	91020000 	mrsls	r0, (UNDEF: 2)
    9d28:	43141954 	tstmi	r4, #84, 18	; 0x150000
    9d2c:	d3010000 	movwle	r0, #4096	; 0x1000
    9d30:	00006903 	andeq	r6, r0, r3, lsl #18
    9d34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9d38:	0059d019 	subseq	sp, r9, r9, lsl r0
    9d3c:	03d30100 	bicseq	r0, r3, #0, 2
    9d40:	00000069 	andeq	r0, r0, r9, rrx
    9d44:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    9d48:	00002d3f 	andeq	r2, r0, pc, lsr sp
    9d4c:	6903d301 	stmdbvs	r3, {r0, r8, r9, ip, lr, pc}
    9d50:	02000000 	andeq	r0, r0, #0
    9d54:	7a196091 	bvc	661fa0 <_Min_Stack_Size+0x661ba0>
    9d58:	0100004a 	tsteq	r0, sl, asr #32
    9d5c:	006903d3 	ldrdeq	r0, [r9], #-51	; 0xffffffcd	; <UNPREDICTABLE>
    9d60:	91020000 	mrsls	r0, (UNDEF: 2)
    9d64:	4923195c 	stmdbmi	r3!, {r2, r3, r4, r6, r8, fp, ip}
    9d68:	d3010000 	movwle	r0, #4096	; 0x1000
    9d6c:	00006903 	andeq	r6, r0, r3, lsl #18
    9d70:	58910200 	ldmpl	r1, {r9}
    9d74:	0013b819 	andseq	fp, r3, r9, lsl r8
    9d78:	03d40100 	bicseq	r0, r4, #0, 2
    9d7c:	00000069 	andeq	r0, r0, r9, rrx
    9d80:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    9d84:	00004679 	andeq	r4, r0, r9, ror r6
    9d88:	6903d501 	stmdbvs	r3, {r0, r8, sl, ip, lr, pc}
    9d8c:	02000000 	andeq	r0, r0, #0
    9d90:	fc196c91 	ldc2	12, cr6, [r9], {145}	; 0x91
    9d94:	01000046 	tsteq	r0, r6, asr #32
    9d98:	006903d5 	ldrdeq	r0, [r9], #-53	; 0xffffffcb	; <UNPREDICTABLE>
    9d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    9da0:	b6180068 	ldrlt	r0, [r8], -r8, rrx
    9da4:	0100004a 	tsteq	r0, sl, asr #32
    9da8:	8cec0441 	cfstrdhi	mvd0, [ip], #260	; 0x104
    9dac:	00c00800 	sbceq	r0, r0, r0, lsl #16
    9db0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9db4:	000010ae 	andeq	r1, r0, lr, lsr #1
    9db8:	004ab11a 	subeq	fp, sl, sl, lsl r1
    9dbc:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9dc0:	00000045 	andeq	r0, r0, r5, asr #32
    9dc4:	7fbe9103 	svcvc	0x00be9103
    9dc8:	0047da1a 	subeq	sp, r7, sl, lsl sl
    9dcc:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9dd0:	00000045 	andeq	r0, r0, r5, asr #32
    9dd4:	7fbc9103 	svcvc	0x00bc9103
    9dd8:	00314a1a 	eorseq	r4, r1, sl, lsl sl
    9ddc:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9de0:	00000045 	andeq	r0, r0, r5, asr #32
    9de4:	7fba9103 	svcvc	0x00ba9103
    9de8:	0029cf1a 	eoreq	ip, r9, sl, lsl pc
    9dec:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9df0:	00000045 	andeq	r0, r0, r5, asr #32
    9df4:	7fb89103 	svcvc	0x00b89103
    9df8:	0025ba19 	eoreq	fp, r5, r9, lsl sl
    9dfc:	04430100 	strbeq	r0, [r3], #-256	; 0x100
    9e00:	000005db 	ldrdeq	r0, [r0], -fp
    9e04:	19449102 	stmdbne	r4, {r1, r8, ip, pc}^
    9e08:	00004934 	andeq	r4, r0, r4, lsr r9
    9e0c:	69044501 	stmdbvs	r4, {r0, r8, sl, lr}
    9e10:	02000000 	andeq	r0, r0, #0
    9e14:	78197491 	ldmdavc	r9, {r0, r4, r7, sl, ip, sp, lr}
    9e18:	01000048 	tsteq	r0, r8, asr #32
    9e1c:	00450446 	subeq	r0, r5, r6, asr #8
    9e20:	91020000 	mrsls	r0, (UNDEF: 2)
    9e24:	49691972 	stmdbmi	r9!, {r1, r4, r5, r6, r8, fp, ip}^
    9e28:	46010000 	strmi	r0, [r1], -r0
    9e2c:	00004504 	andeq	r4, r0, r4, lsl #10
    9e30:	70910200 	addsvc	r0, r1, r0, lsl #4
    9e34:	0048fe19 	subeq	pc, r8, r9, lsl lr	; <UNPREDICTABLE>
    9e38:	04460100 	strbeq	r0, [r6], #-256	; 0x100
    9e3c:	00000045 	andeq	r0, r0, r5, asr #32
    9e40:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    9e44:	004a2818 	subeq	r2, sl, r8, lsl r8
    9e48:	046e0100 	strbteq	r0, [lr], #-256	; 0x100
    9e4c:	08008dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, pc}
    9e50:	00000120 	andeq	r0, r0, r0, lsr #2
    9e54:	111d9c01 	tstne	sp, r1, lsl #24
    9e58:	b11a0000 	tstlt	sl, r0
    9e5c:	0100004a 	tsteq	r0, sl, asr #32
    9e60:	0045046e 	subeq	r0, r5, lr, ror #8
    9e64:	91020000 	mrsls	r0, (UNDEF: 2)
    9e68:	47da1a66 	ldrbmi	r1, [sl, r6, ror #20]
    9e6c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9e70:	00004504 	andeq	r4, r0, r4, lsl #10
    9e74:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9e78:	0047071a 	subeq	r0, r7, sl, lsl r7
    9e7c:	046e0100 	strbteq	r0, [lr], #-256	; 0x100
    9e80:	00000045 	andeq	r0, r0, r5, asr #32
    9e84:	20629102 	rsbcs	r9, r2, r2, lsl #2
    9e88:	70010044 	andvc	r0, r1, r4, asr #32
    9e8c:	00005704 	andeq	r5, r0, r4, lsl #14
    9e90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9e94:	0047ba19 	subeq	fp, r7, r9, lsl sl
    9e98:	04710100 	ldrbteq	r0, [r1], #-256	; 0x100
    9e9c:	00000069 	andeq	r0, r0, r9, rrx
    9ea0:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    9ea4:	000047bf 			; <UNDEFINED> instruction: 0x000047bf
    9ea8:	69047201 	stmdbvs	r4, {r0, r9, ip, sp, lr}
    9eac:	02000000 	andeq	r0, r0, #0
    9eb0:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    9eb4:	00004754 	andeq	r4, r0, r4, asr r7
    9eb8:	cc049d01 	stcgt	13, cr9, [r4], {1}
    9ebc:	6608008e 	strvs	r0, [r8], -lr, lsl #1
    9ec0:	01000001 	tsteq	r0, r1
    9ec4:	00122b9c 	mulseq	r2, ip, fp
    9ec8:	31781e00 	cmncc	r8, r0, lsl #28
    9ecc:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    9ed0:	00000045 	andeq	r0, r0, r5, asr #32
    9ed4:	1e569102 	lognes	f1, f2
    9ed8:	01003179 	tsteq	r0, r9, ror r1
    9edc:	0045049d 	umaaleq	r0, r5, sp, r4
    9ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    9ee4:	32781e54 	rsbscc	r1, r8, #84, 28	; 0x540
    9ee8:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    9eec:	00000045 	andeq	r0, r0, r5, asr #32
    9ef0:	1e529102 	lognes	f1, f2
    9ef4:	01003279 	tsteq	r0, r9, ror r2
    9ef8:	0045049d 	umaaleq	r0, r5, sp, r4
    9efc:	91020000 	mrsls	r0, (UNDEF: 2)
    9f00:	4ad61950 	bmi	ff590448 <_estack+0xdf560448>
    9f04:	9f010000 	svcls	0x00010000
    9f08:	00003304 	andeq	r3, r0, r4, lsl #6
    9f0c:	60910200 	addsvs	r0, r1, r0, lsl #4
    9f10:	004add19 	subeq	sp, sl, r9, lsl sp
    9f14:	049f0100 	ldreq	r0, [pc], #256	; 9f1c <_Min_Stack_Size+0x9b1c>
    9f18:	00000033 	andeq	r0, r0, r3, lsr r0
    9f1c:	205e9102 	subscs	r9, lr, r2, lsl #2
    9f20:	9f010078 	svcls	0x00010078
    9f24:	00003304 	andeq	r3, r0, r4, lsl #6
    9f28:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9f2c:	01007920 	tsteq	r0, r0, lsr #18
    9f30:	0033049f 	mlaseq	r3, pc, r4, r0	; <UNPREDICTABLE>
    9f34:	91020000 	mrsls	r0, (UNDEF: 2)
    9f38:	4a811974 	bmi	fe050510 <_estack+0xde020510>
    9f3c:	9f010000 	svcls	0x00010000
    9f40:	00003304 	andeq	r3, r0, r4, lsl #6
    9f44:	72910200 	addsvc	r0, r1, #0, 4
    9f48:	00480719 	subeq	r0, r8, r9, lsl r7
    9f4c:	049f0100 	ldreq	r0, [pc], #256	; 9f54 <_Min_Stack_Size+0x9b54>
    9f50:	00000033 	andeq	r0, r0, r3, lsr r0
    9f54:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    9f58:	000049dc 	ldrdeq	r4, [r0], -ip
    9f5c:	3304a001 	movwcc	sl, #16385	; 0x4001
    9f60:	02000000 	andeq	r0, r0, #0
    9f64:	e2196e91 	ands	r6, r9, #2320	; 0x910
    9f68:	01000049 	tsteq	r0, r9, asr #32
    9f6c:	003304a0 	eorseq	r0, r3, r0, lsr #9
    9f70:	91020000 	mrsls	r0, (UNDEF: 2)
    9f74:	6564206c 	strbvs	r2, [r4, #-108]!	; 0x6c
    9f78:	a001006e 	andge	r0, r1, lr, rrx
    9f7c:	00003304 	andeq	r3, r0, r4, lsl #6
    9f80:	6a910200 	bvs	fe44a788 <_estack+0xde41a788>
    9f84:	6d756e20 	ldclvs	14, cr6, [r5, #-128]!	; 0xffffff80
    9f88:	04a00100 	strteq	r0, [r0], #256	; 0x100
    9f8c:	00000033 	andeq	r0, r0, r3, lsr r0
    9f90:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    9f94:	0000492d 	andeq	r4, r0, sp, lsr #18
    9f98:	3304a001 	movwcc	sl, #16385	; 0x4001
    9f9c:	02000000 	andeq	r0, r0, #0
    9fa0:	d1196691 			; <UNDEFINED> instruction: 0xd1196691
    9fa4:	0100004b 	tsteq	r0, fp, asr #32
    9fa8:	003304a0 	eorseq	r0, r3, r0, lsr #9
    9fac:	91020000 	mrsls	r0, (UNDEF: 2)
    9fb0:	48601964 	stmdami	r0!, {r2, r5, r6, r8, fp, ip}^
    9fb4:	a1010000 	mrsge	r0, (UNDEF: 1)
    9fb8:	00003304 	andeq	r3, r0, r4, lsl #6
    9fbc:	62910200 	addsvs	r0, r1, #0, 4
    9fc0:	49cf1800 	stmibmi	pc, {fp, ip}^	; <UNPREDICTABLE>
    9fc4:	e5010000 	str	r0, [r1, #-0]
    9fc8:	00903404 	addseq	r3, r0, r4, lsl #8
    9fcc:	00007608 	andeq	r7, r0, r8, lsl #12
    9fd0:	899c0100 	ldmibhi	ip, {r8}
    9fd4:	1a000012 	bne	a024 <_Min_Stack_Size+0x9c24>
    9fd8:	00004b85 	andeq	r4, r0, r5, lsl #23
    9fdc:	d304e501 	movwle	lr, #17665	; 0x4501
    9fe0:	02000007 	andeq	r0, r0, #7
    9fe4:	ad1a6c91 	ldcge	12, cr6, [sl, #-580]	; 0xfffffdbc
    9fe8:	01000049 	tsteq	r0, r9, asr #32
    9fec:	004504e5 	subeq	r0, r5, r5, ror #9
    9ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    9ff4:	0058206a 	subseq	r2, r8, sl, rrx
    9ff8:	3304e701 	movwcc	lr, #18177	; 0x4701
    9ffc:	02000000 	andeq	r0, r0, #0
    a000:	59207691 	stmdbpl	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    a004:	04e70100 	strbteq	r0, [r7], #256	; 0x100
    a008:	00000033 	andeq	r0, r0, r3, lsr r0
    a00c:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    a010:	00004963 	andeq	r4, r0, r3, ror #18
    a014:	d304e801 	movwle	lr, #18433	; 0x4801
    a018:	02000007 	andeq	r0, r0, #7
    a01c:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    a020:	00004975 	andeq	r4, r0, r5, ror r9
    a024:	ac04ff01 	stcge	15, cr15, [r4], {1}
    a028:	62080090 	andvs	r0, r8, #144	; 0x90
    a02c:	01000001 	tsteq	r0, r1
    a030:	0013b39c 	mulseq	r3, ip, r3
    a034:	31781e00 	cmncc	r8, r0, lsl #28
    a038:	04ff0100 	ldrbteq	r0, [pc], #256	; a040 <_Min_Stack_Size+0x9c40>
    a03c:	00000045 	andeq	r0, r0, r5, asr #32
    a040:	1e569102 	lognes	f1, f2
    a044:	01003278 	tsteq	r0, r8, ror r2
    a048:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a04c:	91020000 	mrsls	r0, (UNDEF: 2)
    a050:	33781e54 	cmncc	r8, #84, 28	; 0x540
    a054:	04ff0100 	ldrbteq	r0, [pc], #256	; a05c <_Min_Stack_Size+0x9c5c>
    a058:	00000045 	andeq	r0, r0, r5, asr #32
    a05c:	1e529102 	lognes	f1, f2
    a060:	01003179 	tsteq	r0, r9, ror r1
    a064:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a068:	91020000 	mrsls	r0, (UNDEF: 2)
    a06c:	32791e50 	rsbscc	r1, r9, #80, 28	; 0x500
    a070:	04ff0100 	ldrbteq	r0, [pc], #256	; a078 <_Min_Stack_Size+0x9c78>
    a074:	00000045 	andeq	r0, r0, r5, asr #32
    a078:	1e009102 	mvfnes	f1, f2
    a07c:	01003379 	tsteq	r0, r9, ror r3
    a080:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a084:	91020000 	mrsls	r0, (UNDEF: 2)
    a088:	4ad61904 	bmi	ff5904a0 <_estack+0xdf5604a0>
    a08c:	02010000 	andeq	r0, r1, #0
    a090:	00003305 	andeq	r3, r0, r5, lsl #6
    a094:	60910200 	addsvs	r0, r1, r0, lsl #4
    a098:	004add19 	subeq	sp, sl, r9, lsl sp
    a09c:	05020100 	streq	r0, [r2, #-256]	; 0x100
    a0a0:	00000033 	andeq	r0, r0, r3, lsr r0
    a0a4:	205e9102 	subscs	r9, lr, r2, lsl #2
    a0a8:	02010078 	andeq	r0, r1, #120	; 0x78
    a0ac:	00003305 	andeq	r3, r0, r5, lsl #6
    a0b0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a0b4:	01007920 	tsteq	r0, r0, lsr #18
    a0b8:	00330502 	eorseq	r0, r3, r2, lsl #10
    a0bc:	91020000 	mrsls	r0, (UNDEF: 2)
    a0c0:	4a811974 	bmi	fe050698 <_estack+0xde020698>
    a0c4:	02010000 	andeq	r0, r1, #0
    a0c8:	00003305 	andeq	r3, r0, r5, lsl #6
    a0cc:	72910200 	addsvc	r0, r1, #0, 4
    a0d0:	00480719 	subeq	r0, r8, r9, lsl r7
    a0d4:	05020100 	streq	r0, [r2, #-256]	; 0x100
    a0d8:	00000033 	andeq	r0, r0, r3, lsr r0
    a0dc:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    a0e0:	000049dc 	ldrdeq	r4, [r0], -ip
    a0e4:	33050301 	movwcc	r0, #21249	; 0x5301
    a0e8:	02000000 	andeq	r0, r0, #0
    a0ec:	e2196e91 	ands	r6, r9, #2320	; 0x910
    a0f0:	01000049 	tsteq	r0, r9, asr #32
    a0f4:	00330503 	eorseq	r0, r3, r3, lsl #10
    a0f8:	91020000 	mrsls	r0, (UNDEF: 2)
    a0fc:	6564206c 	strbvs	r2, [r4, #-108]!	; 0x6c
    a100:	0301006e 	movweq	r0, #4206	; 0x106e
    a104:	00003305 	andeq	r3, r0, r5, lsl #6
    a108:	6a910200 	bvs	fe44a910 <_estack+0xde41a910>
    a10c:	6d756e20 	ldclvs	14, cr6, [r5, #-128]!	; 0xffffff80
    a110:	05030100 	streq	r0, [r3, #-256]	; 0x100
    a114:	00000033 	andeq	r0, r0, r3, lsr r0
    a118:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    a11c:	0000492d 	andeq	r4, r0, sp, lsr #18
    a120:	33050301 	movwcc	r0, #21249	; 0x5301
    a124:	02000000 	andeq	r0, r0, #0
    a128:	d1196691 			; <UNDEFINED> instruction: 0xd1196691
    a12c:	0100004b 	tsteq	r0, fp, asr #32
    a130:	00330503 	eorseq	r0, r3, r3, lsl #10
    a134:	91020000 	mrsls	r0, (UNDEF: 2)
    a138:	48601964 	stmdami	r0!, {r2, r5, r6, r8, fp, ip}^
    a13c:	04010000 	streq	r0, [r1], #-0
    a140:	00003305 	andeq	r3, r0, r5, lsl #6
    a144:	62910200 	addsvs	r0, r1, #0, 4
    a148:	48361800 	ldmdami	r6!, {fp, ip}
    a14c:	4b010000 	blmi	4a154 <_Min_Stack_Size+0x49d54>
    a150:	00921005 	addseq	r1, r2, r5
    a154:	00005608 	andeq	r5, r0, r8, lsl #12
    a158:	029c0100 	addseq	r0, ip, #0, 2
    a15c:	1a000014 	bne	a1b4 <_Min_Stack_Size+0x9db4>
    a160:	00004b85 	andeq	r4, r0, r5, lsl #23
    a164:	d3054b01 	movwle	r4, #23297	; 0x5b01
    a168:	02000007 	andeq	r0, r0, #7
    a16c:	ad1a6c91 	ldcge	12, cr6, [sl, #-580]	; 0xfffffdbc
    a170:	01000049 	tsteq	r0, r9, asr #32
    a174:	0045054b 	subeq	r0, r5, fp, asr #10
    a178:	91020000 	mrsls	r0, (UNDEF: 2)
    a17c:	0058206a 	subseq	r2, r8, sl, rrx
    a180:	33054d01 	movwcc	r4, #23809	; 0x5d01
    a184:	02000000 	andeq	r0, r0, #0
    a188:	59207691 	stmdbpl	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    a18c:	054d0100 	strbeq	r0, [sp, #-256]	; 0x100
    a190:	00000033 	andeq	r0, r0, r3, lsr r0
    a194:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a198:	004a4e21 	subeq	r4, sl, r1, lsr #28
    a19c:	05650100 	strbeq	r0, [r5, #-256]!	; 0x100
    a1a0:	08009268 	stmdaeq	r0, {r3, r5, r6, r9, ip, pc}
    a1a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1a8:	146f9c01 	strbtne	r9, [pc], #-3073	; a1b0 <_Min_Stack_Size+0x9db0>
    a1ac:	851a0000 	ldrhi	r0, [sl, #-0]
    a1b0:	0100004b 	tsteq	r0, fp, asr #32
    a1b4:	07d30565 	ldrbeq	r0, [r3, r5, ror #10]
    a1b8:	91020000 	mrsls	r0, (UNDEF: 2)
    a1bc:	49ad1a64 	stmibmi	sp!, {r2, r5, r6, r9, fp, ip}
    a1c0:	65010000 	strvs	r0, [r1, #-0]
    a1c4:	00004505 	andeq	r4, r0, r5, lsl #10
    a1c8:	62910200 	addsvs	r0, r1, #0, 4
    a1cc:	004a621a 	subeq	r6, sl, sl, lsl r2
    a1d0:	05650100 	strbeq	r0, [r5, #-256]!	; 0x100
    a1d4:	00000045 	andeq	r0, r0, r5, asr #32
    a1d8:	20609102 	rsbcs	r9, r0, r2, lsl #2
    a1dc:	67010058 	smlsdvs	r1, r8, r0, r0
    a1e0:	00003305 	andeq	r3, r0, r5, lsl #6
    a1e4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a1e8:	01005920 	tsteq	r0, r0, lsr #18
    a1ec:	00330567 	eorseq	r0, r3, r7, ror #10
    a1f0:	91020000 	mrsls	r0, (UNDEF: 2)
    a1f4:	4963196c 	stmdbmi	r3!, {r2, r3, r5, r6, r8, fp, ip}^
    a1f8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    a1fc:	0007d305 	andeq	sp, r7, r5, lsl #6
    a200:	68910200 	ldmvs	r1, {r9}
    a204:	4a3b1800 	bmi	ed020c <_Min_Stack_Size+0xecfe0c>
    a208:	83010000 	movwhi	r0, #4096	; 0x1000
    a20c:	00930805 	addseq	r0, r3, r5, lsl #16
    a210:	00005008 	andeq	r5, r0, r8
    a214:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    a218:	1a000014 	bne	a270 <_Min_Stack_Size+0x9e70>
    a21c:	00004b85 	andeq	r4, r0, r5, lsl #23
    a220:	d3058301 	movwle	r8, #21249	; 0x5301
    a224:	02000007 	andeq	r0, r0, #7
    a228:	ad1a6c91 	ldcge	12, cr6, [sl, #-580]	; 0xfffffdbc
    a22c:	01000049 	tsteq	r0, r9, asr #32
    a230:	00450583 	subeq	r0, r5, r3, lsl #11
    a234:	91020000 	mrsls	r0, (UNDEF: 2)
    a238:	e418006a 	ldr	r0, [r8], #-106	; 0x6a
    a23c:	0100004a 	tsteq	r0, sl, asr #32
    a240:	9358058f 	cmpls	r8, #599785472	; 0x23c00000
    a244:	001e0800 	andseq	r0, lr, r0, lsl #16
    a248:	9c010000 	stcls	0, cr0, [r1], {-0}
    a24c:	000014d9 	ldrdeq	r1, [r0], -r9
    a250:	004b851a 	subeq	r8, fp, sl, lsl r5
    a254:	058f0100 	streq	r0, [pc, #256]	; a35c <_Min_Stack_Size+0x9f5c>
    a258:	000007d3 	ldrdeq	r0, [r0], -r3
    a25c:	1a749102 	bne	1d2e66c <_Min_Stack_Size+0x1d2e26c>
    a260:	000049ad 	andeq	r4, r0, sp, lsr #19
    a264:	45058f01 	strmi	r8, [r5, #-3841]	; 0xf01
    a268:	02000000 	andeq	r0, r0, #0
    a26c:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    a270:	000048cb 	andeq	r4, r0, fp, asr #17
    a274:	78059a01 	stmdavc	r5, {r0, r9, fp, ip, pc}
    a278:	1e080093 	mcrne	0, 0, r0, cr8, cr3, {4}
    a27c:	01000000 	mrseq	r0, (UNDEF: 0)
    a280:	00150e9c 	mulseq	r5, ip, lr
    a284:	4b851a00 	blmi	fe150a8c <_estack+0xde120a8c>
    a288:	9a010000 	bls	4a290 <_Min_Stack_Size+0x49e90>
    a28c:	0007d305 	andeq	sp, r7, r5, lsl #6
    a290:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a294:	0049ad1a 	subeq	sl, r9, sl, lsl sp
    a298:	059a0100 	ldreq	r0, [sl, #256]	; 0x100
    a29c:	00000045 	andeq	r0, r0, r5, asr #32
    a2a0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    a2a4:	0049e818 	subeq	lr, r9, r8, lsl r8
    a2a8:	05a50100 	streq	r0, [r5, #256]!	; 0x100
    a2ac:	08009398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, pc}
    a2b0:	000001a0 	andeq	r0, r0, r0, lsr #3
    a2b4:	161e9c01 	ldrne	r9, [lr], -r1, lsl #24
    a2b8:	851a0000 	ldrhi	r0, [sl, #-0]
    a2bc:	0100004b 	tsteq	r0, fp, asr #32
    a2c0:	07d305a5 	ldrbeq	r0, [r3, r5, lsr #11]
    a2c4:	91020000 	mrsls	r0, (UNDEF: 2)
    a2c8:	49ad1a4c 	stmibmi	sp!, {r2, r3, r6, r9, fp, ip}
    a2cc:	a5010000 	strge	r0, [r1, #-0]
    a2d0:	00004505 	andeq	r4, r0, r5, lsl #10
    a2d4:	4a910200 	bmi	fe44aadc <_estack+0xde41aadc>
    a2d8:	01005820 	tsteq	r0, r0, lsr #16
    a2dc:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a2e0:	91020000 	mrsls	r0, (UNDEF: 2)
    a2e4:	00592060 	subseq	r2, r9, r0, rrx
    a2e8:	3305a801 	movwcc	sl, #22529	; 0x5801
    a2ec:	02000000 	andeq	r0, r0, #0
    a2f0:	58205e91 	stmdapl	r0!, {r0, r4, r7, r9, sl, fp, ip, lr}
    a2f4:	a8010032 	stmdage	r1, {r1, r4, r5}
    a2f8:	00003305 	andeq	r3, r0, r5, lsl #6
    a2fc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a300:	00325920 	eorseq	r5, r2, r0, lsr #18
    a304:	3305a801 	movwcc	sl, #22529	; 0x5801
    a308:	02000000 	andeq	r0, r0, #0
    a30c:	77196c91 			; <UNDEFINED> instruction: 0x77196c91
    a310:	01000047 	tsteq	r0, r7, asr #32
    a314:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a318:	91020000 	mrsls	r0, (UNDEF: 2)
    a31c:	4b5f195c 	blmi	17d0894 <_Min_Stack_Size+0x17d0494>
    a320:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    a324:	00003305 	andeq	r3, r0, r5, lsl #6
    a328:	5a910200 	bpl	fe44ab30 <_estack+0xde41ab30>
    a32c:	0046b019 	subeq	fp, r6, r9, lsl r0
    a330:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a334:	00000033 	andeq	r0, r0, r3, lsr r0
    a338:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
    a33c:	000046f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    a340:	3305a801 	movwcc	sl, #22529	; 0x5801
    a344:	02000000 	andeq	r0, r0, #0
    a348:	70195691 	mulsvc	r9, r1, r6
    a34c:	0100004b 	tsteq	r0, fp, asr #32
    a350:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a354:	91020000 	mrsls	r0, (UNDEF: 2)
    a358:	47991954 			; <UNDEFINED> instruction: 0x47991954
    a35c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    a360:	00003305 	andeq	r3, r0, r5, lsl #6
    a364:	52910200 	addspl	r0, r1, #0, 4
    a368:	000feb19 	andeq	lr, pc, r9, lsl fp	; <UNPREDICTABLE>
    a36c:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a370:	00000033 	andeq	r0, r0, r3, lsr r0
    a374:	196a9102 	stmdbne	sl!, {r1, r8, ip, pc}^
    a378:	00004749 	andeq	r4, r0, r9, asr #14
    a37c:	4505a901 	strmi	sl, [r5, #-2305]	; 0x901
    a380:	02000000 	andeq	r0, r0, #0
    a384:	a4196891 	ldrge	r6, [r9], #-2193	; 0x891
    a388:	01000046 	tsteq	r0, r6, asr #32
    a38c:	004505a9 	subeq	r0, r5, r9, lsr #11
    a390:	91020000 	mrsls	r0, (UNDEF: 2)
    a394:	4bdb1966 	blmi	ff6d0934 <_estack+0xdf6a0934>
    a398:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    a39c:	00004505 	andeq	r4, r0, r5, lsl #10
    a3a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    a3a4:	004c1419 	subeq	r1, ip, r9, lsl r4
    a3a8:	05a90100 	streq	r0, [r9, #256]!	; 0x100
    a3ac:	00000045 	andeq	r0, r0, r5, asr #32
    a3b0:	00629102 	rsbeq	r9, r2, r2, lsl #2
    a3b4:	0046c218 	subeq	ip, r6, r8, lsl r2
    a3b8:	05e70100 	strbeq	r0, [r7, #256]!	; 0x100
    a3bc:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    a3c0:	0000005c 	andeq	r0, r0, ip, asr r0
    a3c4:	16449c01 	strbne	r9, [r4], -r1, lsl #24
    a3c8:	4a1a0000 	bmi	68a3d0 <_Min_Stack_Size+0x689fd0>
    a3cc:	01000049 	tsteq	r0, r9, asr #32
    a3d0:	002c05e7 	eoreq	r0, ip, r7, ror #11
    a3d4:	91020000 	mrsls	r0, (UNDEF: 2)
    a3d8:	06180077 			; <UNDEFINED> instruction: 0x06180077
    a3dc:	0100004c 	tsteq	r0, ip, asr #32
    a3e0:	959405ff 	ldrls	r0, [r4, #1535]	; 0x5ff
    a3e4:	005c0800 	subseq	r0, ip, r0, lsl #16
    a3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3ec:	0000166a 	andeq	r1, r0, sl, ror #12
    a3f0:	0055fa1a 	subseq	pc, r5, sl, lsl sl	; <UNPREDICTABLE>
    a3f4:	05ff0100 	ldrbeq	r0, [pc, #256]!	; a4fc <_Min_Stack_Size+0xa0fc>
    a3f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    a3fc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    a400:	004a0f1f 	subeq	r0, sl, pc, lsl pc
    a404:	06160100 	ldreq	r0, [r6], -r0, lsl #2
    a408:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
    a40c:	0000028e 	andeq	r0, r0, lr, lsl #5
    a410:	9f1f9c01 	svcls	0x001f9c01
    a414:	01000049 	tsteq	r0, r9, asr #32
    a418:	98800693 	stmls	r0, {r0, r1, r4, r7, r9, sl}
    a41c:	000c0800 	andeq	r0, ip, r0, lsl #16
    a420:	9c010000 	stcls	0, cr0, [r1], {-0}
    a424:	004beb1f 	subeq	lr, fp, pc, lsl fp
    a428:	069d0100 	ldreq	r0, [sp], r0, lsl #2
    a42c:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
    a430:	0000000c 	andeq	r0, r0, ip
    a434:	ae189c01 	cdpge	12, 1, cr9, cr8, cr1, {0}
    a438:	01000048 	tsteq	r0, r8, asr #32
    a43c:	989806aa 	ldmls	r8, {r1, r3, r5, r7, r9, sl}
    a440:	00540800 	subseq	r0, r4, r0, lsl #16
    a444:	9c010000 	stcls	0, cr0, [r1], {-0}
    a448:	000016c6 	andeq	r1, r0, r6, asr #13
    a44c:	00412b19 	subeq	r2, r1, r9, lsl fp
    a450:	06ac0100 	strteq	r0, [ip], r0, lsl #2
    a454:	000006e9 	andeq	r0, r0, r9, ror #13
    a458:	00709102 	rsbseq	r9, r0, r2, lsl #2
    a45c:	004b9818 	subeq	r9, fp, r8, lsl r8
    a460:	06cf0100 	strbeq	r0, [pc], r0, lsl #2
    a464:	080098ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, pc}
    a468:	00000024 	andeq	r0, r0, r4, lsr #32
    a46c:	170a9c01 	strne	r9, [sl, -r1, lsl #24]
    a470:	b51a0000 	ldrlt	r0, [sl, #-0]
    a474:	01000016 	tsteq	r0, r6, lsl r0
    a478:	170a06cf 	strne	r0, [sl, -pc, asr #13]
    a47c:	91020000 	mrsls	r0, (UNDEF: 2)
    a480:	49091a74 	stmdbmi	r9, {r2, r4, r5, r6, r9, fp, ip}
    a484:	cf010000 	svcgt	0x00010000
    a488:	00004506 	andeq	r4, r0, r6, lsl #10
    a48c:	72910200 	addsvc	r0, r1, #0, 4
    a490:	0007a51a 	andeq	sl, r7, sl, lsl r5
    a494:	06cf0100 	strbeq	r0, [pc], r0, lsl #2
    a498:	00000699 	muleq	r0, r9, r6
    a49c:	00719102 	rsbseq	r9, r1, r2, lsl #2
    a4a0:	01a10414 			; <UNDEFINED> instruction: 0x01a10414
    a4a4:	77180000 	ldrvc	r0, [r8, -r0]
    a4a8:	0100004b 	tsteq	r0, fp, asr #32
    a4ac:	991006da 	ldmdbls	r0, {r1, r3, r4, r6, r7, r9, sl}
    a4b0:	00d40800 	sbcseq	r0, r4, r0, lsl #16
    a4b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4b8:	00001745 	andeq	r1, r0, r5, asr #14
    a4bc:	0045bb19 	subeq	fp, r5, r9, lsl fp
    a4c0:	06dc0100 	ldrbeq	r0, [ip], r0, lsl #2
    a4c4:	00000769 	andeq	r0, r0, r9, ror #14
    a4c8:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    a4cc:	0000412b 	andeq	r4, r0, fp, lsr #2
    a4d0:	e906dd01 	stmdb	r6, {r0, r8, sl, fp, ip, lr, pc}
    a4d4:	02000006 	andeq	r0, r0, #6
    a4d8:	21005c91 			; <UNDEFINED> instruction: 0x21005c91
    a4dc:	000046d9 	ldrdeq	r4, [r0], -r9
    a4e0:	e4071f01 	str	r1, [r7], #-3841	; 0xf01
    a4e4:	78080099 	stmdavc	r8, {r0, r3, r4, r7}
    a4e8:	01000001 	tsteq	r0, r1
    a4ec:	00176b9c 	mulseq	r7, ip, fp
    a4f0:	08b71900 	ldmeq	r7!, {r8, fp, ip}
    a4f4:	21010000 	mrscs	r0, (UNDEF: 1)
    a4f8:	0006e907 	andeq	lr, r6, r7, lsl #18
    a4fc:	70910200 	addsvc	r0, r1, r0, lsl #4
    a500:	49962100 	ldmibmi	r6, {r8, sp}
    a504:	83010000 	movwhi	r0, #4096	; 0x1000
    a508:	009b5c07 	addseq	r5, fp, r7, lsl #24
    a50c:	00004808 	andeq	r4, r0, r8, lsl #16
    a510:	9c9c0100 	ldflss	f0, [ip], {0}
    a514:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    a518:	83010078 	movwhi	r0, #4216	; 0x1078
    a51c:	00003307 	andeq	r3, r0, r7, lsl #6
    a520:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a524:	0100791e 	tsteq	r0, lr, lsl r9
    a528:	00330783 	eorseq	r0, r3, r3, lsl #15
    a52c:	91020000 	mrsls	r0, (UNDEF: 2)
    a530:	37220074 			; <UNDEFINED> instruction: 0x37220074
    a534:	01000043 	tsteq	r0, r3, asr #32
    a538:	9ba40792 	blls	fe90c388 <_estack+0xde8dc388>
    a53c:	00280800 	eoreq	r0, r8, r0, lsl #16
    a540:	9c010000 	stcls	0, cr0, [r1], {-0}
    a544:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    a548:	0043a41a 	subeq	sl, r3, sl, lsl r4
    a54c:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    a550:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    a554:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    a558:	00004314 	andeq	r4, r0, r4, lsl r3
    a55c:	d1079401 	tstle	r7, r1, lsl #8
    a560:	02000017 	andeq	r0, r0, #23
    a564:	05007491 	streq	r7, [r0, #-1169]	; 0x491
    a568:	00000069 	andeq	r0, r0, r9, rrx
    a56c:	004c2117 	subeq	r2, ip, r7, lsl r1
    a570:	824f0100 	subhi	r0, pc, #0, 2
    a574:	05000009 	streq	r0, [r0, #-9]
    a578:	0004d403 	andeq	sp, r4, r3, lsl #8
    a57c:	4bc01720 	blmi	ff010204 <_estack+0xdefe0204>
    a580:	51010000 	mrspl	r0, (UNDEF: 1)
    a584:	00000045 	andeq	r0, r0, r5, asr #32
    a588:	04d80305 	ldrbeq	r0, [r8], #773	; 0x305
    a58c:	12172000 	andsne	r2, r7, #0
    a590:	01000049 	tsteq	r0, r9, asr #32
    a594:	00004552 	andeq	r4, r0, r2, asr r5
    a598:	54030500 	strpl	r0, [r3], #-1280	; 0x500
    a59c:	17200000 	strne	r0, [r0, -r0]!
    a5a0:	0000489b 	muleq	r0, fp, r8
    a5a4:	00695401 	rsbeq	r5, r9, r1, lsl #8
    a5a8:	03050000 	movweq	r0, #20480	; 0x5000
    a5ac:	20000058 	andcs	r0, r0, r8, asr r0
    a5b0:	00484317 	subeq	r4, r8, r7, lsl r3
    a5b4:	69550100 	ldmdbvs	r5, {r8}^
    a5b8:	05000000 	streq	r0, [r0, #-0]
    a5bc:	0004dc03 	andeq	sp, r4, r3, lsl #24
    a5c0:	01562320 	cmpeq	r6, r0, lsr #6
    a5c4:	a70b0000 	strge	r0, [fp, -r0]
    a5c8:	0000ce06 	andeq	ip, r0, r6, lsl #28
    a5cc:	480d2400 	stmdami	sp, {sl, sp}
    a5d0:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
    a5d4:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a5d8:	34030500 	strcc	r0, [r3], #-1280	; 0x500
    a5dc:	24200000 	strtcs	r0, [r0], #-0
    a5e0:	000047d0 	ldrdeq	r4, [r0], -r0
    a5e4:	ab03b40c 	blge	f761c <_Min_Stack_Size+0xf721c>
    a5e8:	05000007 	streq	r0, [r0, #-7]
    a5ec:	00003c03 	andeq	r3, r0, r3, lsl #24
    a5f0:	48c22420 	stmiami	r2, {r5, sl, sp}^
    a5f4:	ba0c0000 	blt	30a5fc <_Min_Stack_Size+0x30a1fc>
    a5f8:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a5fc:	44030500 	strmi	r0, [r3], #-1280	; 0x500
    a600:	24200000 	strtcs	r0, [r0], #-0
    a604:	00004b68 	andeq	r4, r0, r8, ror #22
    a608:	ab03c10c 	blge	faa40 <_Min_Stack_Size+0xfa640>
    a60c:	05000007 	streq	r0, [r0, #-7]
    a610:	00004c03 	andeq	r4, r0, r3, lsl #24
    a614:	00450620 	subeq	r0, r5, r0, lsr #12
    a618:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    a61c:	ad250000 	stcge	0, cr0, [r5, #-0]
    a620:	e7000000 	str	r0, [r0, -r0]
    a624:	69260008 	stmdbvs	r6!, {r3}
    a628:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
    a62c:	0018a14b 	andseq	sl, r8, fp, asr #2
    a630:	44030500 	strmi	r0, [r3], #-1280	; 0x500
    a634:	080800c8 	stmdaeq	r8, {r3, r6, r7}
    a638:	0000187f 	andeq	r1, r0, pc, ror r8
    a63c:	00004506 	andeq	r4, r0, r6, lsl #10
    a640:	0018b700 	andseq	fp, r8, r0, lsl #14
    a644:	00ad2500 	adceq	r2, sp, r0, lsl #10
    a648:	047f0000 	ldrbteq	r0, [pc], #-0	; a650 <_Min_Stack_Size+0xa250>
    a64c:	49522400 	ldmdbmi	r2, {sl, sp}^
    a650:	870c0000 	strhi	r0, [ip, -r0]
    a654:	0018c902 	andseq	ip, r8, r2, lsl #18
    a658:	14030500 	strne	r0, [r3], #-1280	; 0x500
    a65c:	080800da 	stmdaeq	r8, {r1, r3, r4, r6, r7}
    a660:	000018a6 	andeq	r1, r0, r6, lsr #17
    a664:	00485024 	subeq	r5, r8, r4, lsr #32
    a668:	02e90c00 	rsceq	r0, r9, #0, 24
    a66c:	000018e0 	andeq	r1, r0, r0, ror #17
    a670:	e3140305 	tst	r4, #335544320	; 0x14000000
    a674:	a6080800 	strge	r0, [r8], -r0, lsl #16
    a678:	06000018 			; <UNDEFINED> instruction: 0x06000018
    a67c:	00000045 	andeq	r0, r0, r5, asr #32
    a680:	000018f6 	strdeq	r1, [r0], -r6
    a684:	0000ad25 	andeq	sl, r0, r5, lsr #26
    a688:	0002ff00 	andeq	pc, r2, r0, lsl #30
    a68c:	004ac724 	subeq	ip, sl, r4, lsr #14
    a690:	034b0c00 	movteq	r0, #48128	; 0xbc00
    a694:	00001908 	andeq	r1, r0, r8, lsl #18
    a698:	ec140305 	ldc	3, cr0, [r4], {5}
    a69c:	e5080800 	str	r0, [r8, #-2048]	; 0x800
    a6a0:	00000018 	andeq	r0, r0, r8, lsl r0
    a6a4:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    a6a8:	1d040004 	stcne	0, cr0, [r4, #-16]
    a6ac:	01040000 	mrseq	r0, (UNDEF: 4)
    a6b0:	00000021 	andeq	r0, r0, r1, lsr #32
    a6b4:	004de001 	subeq	lr, sp, r1
    a6b8:	00010c00 	andeq	r0, r1, r0, lsl #24
    a6bc:	000c2000 	andeq	r2, ip, r0
    a6c0:	00000000 	andeq	r0, r0, r0
    a6c4:	0046de00 	subeq	sp, r6, r0, lsl #28
    a6c8:	06010200 	streq	r0, [r1], -r0, lsl #4
    a6cc:	00000145 	andeq	r0, r0, r5, asr #2
    a6d0:	0001ae03 	andeq	sl, r1, r3, lsl #28
    a6d4:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    a6d8:	02000000 	andeq	r0, r0, #0
    a6dc:	01430801 	cmpeq	r3, r1, lsl #16
    a6e0:	02020000 	andeq	r0, r2, #0
    a6e4:	00017f05 	andeq	r7, r1, r5, lsl #30
    a6e8:	03780300 	cmneq	r8, #0, 6
    a6ec:	2b020000 	blcs	8a6f4 <_Min_Stack_Size+0x8a2f4>
    a6f0:	00000050 	andeq	r0, r0, r0, asr r0
    a6f4:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    a6f8:	03000000 	movweq	r0, #0
    a6fc:	0000016f 	andeq	r0, r0, pc, ror #2
    a700:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    a704:	04020000 	streq	r0, [r2], #-0
    a708:	00000505 	andeq	r0, r0, r5, lsl #10
    a70c:	04f40300 	ldrbteq	r0, [r4], #768	; 0x300
    a710:	41020000 	mrsmi	r0, (UNDEF: 2)
    a714:	00000074 	andeq	r0, r0, r4, ror r0
    a718:	26070402 	strcs	r0, [r7], -r2, lsl #8
    a71c:	02000001 	andeq	r0, r0, #1
    a720:	00000508 	andeq	r0, r0, r8, lsl #10
    a724:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a728:	00012107 	andeq	r2, r1, r7, lsl #2
    a72c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    a730:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a734:	2b070402 	blcs	1cb744 <_Min_Stack_Size+0x1cb344>
    a738:	03000001 	movweq	r0, #1
    a73c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    a740:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    a744:	7a030000 	bvc	ca74c <_Min_Stack_Size+0xca34c>
    a748:	03000003 	movweq	r0, #3
    a74c:	00004536 	andeq	r4, r0, r6, lsr r5
    a750:	01710300 	cmneq	r1, r0, lsl #6
    a754:	41030000 	mrsmi	r0, (UNDEF: 3)
    a758:	00000057 	andeq	r0, r0, r7, asr r0
    a75c:	0004f603 	andeq	pc, r4, r3, lsl #12
    a760:	69420300 	stmdbvs	r2, {r8, r9}^
    a764:	02000000 	andeq	r0, r0, #0
    a768:	01920704 	orrseq	r0, r2, r4, lsl #14
    a76c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    a770:	06000000 	streq	r0, [r0], -r0
    a774:	000000b8 	strheq	r0, [r0], -r8
    a778:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a77c:	0000c307 	andeq	ip, r0, r7, lsl #6
    a780:	05000100 	streq	r0, [r0, #-256]	; 0x100
    a784:	00000097 	muleq	r0, r7, r0
    a788:	0000a205 	andeq	sl, r0, r5, lsl #4
    a78c:	00ad0500 	adceq	r0, sp, r0, lsl #10
    a790:	01080000 	mrseq	r0, (UNDEF: 8)
    a794:	0401f704 	streq	pc, [r1], #-1796	; 0x704
    a798:	09000001 	stmdbeq	r0, {r0}
    a79c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    a7a0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    a7a4:	00010054 	andeq	r0, r1, r4, asr r0
    a7a8:	001dc80b 	andseq	ip, sp, fp, lsl #16
    a7ac:	01f70400 	mvnseq	r0, r0, lsl #8
    a7b0:	000000ee 	andeq	r0, r0, lr, ror #1
    a7b4:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    a7b8:	00012601 	andeq	r2, r1, r1, lsl #12
    a7bc:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    a7c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a7c4:	0000071e 	andeq	r0, r0, lr, lsl r7
    a7c8:	ef0b0001 	svc	0x000b0001
    a7cc:	04000006 	streq	r0, [r0], #-6
    a7d0:	011001f9 			; <UNDEFINED> instruction: 0x011001f9
    a7d4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    a7d8:	8902b104 	stmdbhi	r2, {r2, r8, ip, sp, pc}
    a7dc:	0d000001 	stceq	0, cr0, [r0, #-4]
    a7e0:	04005243 	streq	r5, [r0], #-579	; 0x243
    a7e4:	00ca02b3 	strheq	r0, [sl], #35	; 0x23
    a7e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a7ec:	00001dde 	ldrdeq	r1, [r0], -lr
    a7f0:	ca02b404 	bgt	b7808 <_Min_Stack_Size+0xb7408>
    a7f4:	04000000 	streq	r0, [r0], #-0
    a7f8:	5241500d 	subpl	r5, r1, #13
    a7fc:	02b50400 	adcseq	r0, r5, #0, 8
    a800:	000000ca 	andeq	r0, r0, sl, asr #1
    a804:	1dd90e08 	ldclne	14, cr0, [r9, #32]
    a808:	b6040000 	strlt	r0, [r4], -r0
    a80c:	0000ca02 	andeq	ip, r0, r2, lsl #20
    a810:	670e0c00 	strvs	r0, [lr, -r0, lsl #24]
    a814:	0400001d 	streq	r0, [r0], #-29
    a818:	00ca02b7 	strheq	r0, [sl], #39	; 0x27
    a81c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    a820:	00524346 	subseq	r4, r2, r6, asr #6
    a824:	ca02b804 	bgt	b883c <_Min_Stack_Size+0xb843c>
    a828:	14000000 	strne	r0, [r0], #-0
    a82c:	1b250b00 	blne	94d434 <_Min_Stack_Size+0x94d034>
    a830:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    a834:	00013202 	andeq	r3, r1, r2, lsl #4
    a838:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
    a83c:	022103d4 	eoreq	r0, r1, #212, 6	; 0x50000003
    a840:	790e0000 	stmdbvc	lr, {}	; <UNPREDICTABLE>
    a844:	04000008 	streq	r0, [r0], #-8
    a848:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    a84c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a850:	0000083f 	andeq	r0, r0, pc, lsr r8
    a854:	ca03d704 	bgt	10046c <_Min_Stack_Size+0x10006c>
    a858:	04000000 	streq	r0, [r0], #-0
    a85c:	0009550e 	andeq	r5, r9, lr, lsl #10
    a860:	03d80400 	bicseq	r0, r8, #0, 8
    a864:	000000ca 	andeq	r0, r0, sl, asr #1
    a868:	08540e08 	ldmdaeq	r4, {r3, r9, sl, fp}^
    a86c:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    a870:	0000ca03 	andeq	ip, r0, r3, lsl #20
    a874:	490d0c00 	stmdbmi	sp, {sl, fp}
    a878:	04005244 	streq	r5, [r0], #-580	; 0x244
    a87c:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    a880:	0d100000 	ldceq	0, cr0, [r0, #-0]
    a884:	0052444f 	subseq	r4, r2, pc, asr #8
    a888:	ca03db04 	bgt	1014a0 <_Min_Stack_Size+0x1010a0>
    a88c:	14000000 	strne	r0, [r0], #-0
    a890:	000a470e 	andeq	r4, sl, lr, lsl #14
    a894:	03dc0400 	bicseq	r0, ip, #0, 8
    a898:	000000e4 	andeq	r0, r0, r4, ror #1
    a89c:	08730e18 	ldmdaeq	r3!, {r3, r4, r9, sl, fp}^
    a8a0:	dd040000 	stcle	0, cr0, [r4, #-0]
    a8a4:	0000e403 	andeq	lr, r0, r3, lsl #8
    a8a8:	280e1a00 	stmdacs	lr, {r9, fp, ip}
    a8ac:	04000008 	streq	r0, [r0], #-8
    a8b0:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    a8b4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    a8b8:	00524641 	subseq	r4, r2, r1, asr #12
    a8bc:	2103df04 	tstcs	r3, r4, lsl #30
    a8c0:	20000002 	andcs	r0, r0, r2
    a8c4:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    a8c8:	3e0b0000 	cdpcc	0, 0, cr0, cr11, cr0, {0}
    a8cc:	04000007 	streq	r0, [r0], #-7
    a8d0:	019503e0 	orrseq	r0, r5, r0, ror #7
    a8d4:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    a8d8:	3f03f304 	svccc	0x0003f304
    a8dc:	0d000003 	stceq	0, cr0, [r0, #-12]
    a8e0:	00315243 	eorseq	r5, r1, r3, asr #4
    a8e4:	e403f504 	str	pc, [r3], #-1284	; 0x504
    a8e8:	00000000 	andeq	r0, r0, r0
    a8ec:	0004ac0e 	andeq	sl, r4, lr, lsl #24
    a8f0:	03f60400 	mvnseq	r0, #0, 8
    a8f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a8f8:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    a8fc:	f7040032 			; <UNDEFINED> instruction: 0xf7040032
    a900:	0000e403 	andeq	lr, r0, r3, lsl #8
    a904:	b60e0400 	strlt	r0, [lr], -r0, lsl #8
    a908:	04000004 	streq	r0, [r0], #-4
    a90c:	00a203f8 	strdeq	r0, [r2], r8	; <UNPREDICTABLE>
    a910:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    a914:	000017c6 	andeq	r1, r0, r6, asr #15
    a918:	e403f904 	str	pc, [r3], #-2308	; 0x904
    a91c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a920:	0004c00e 	andeq	ip, r4, lr
    a924:	03fa0400 	mvnseq	r0, #0, 8
    a928:	000000a2 	andeq	r0, r0, r2, lsr #1
    a92c:	1abf0e0a 	bne	fefce15c <_estack+0xdef9e15c>
    a930:	fb040000 	blx	10a93a <_Min_Stack_Size+0x10a53a>
    a934:	0000e403 	andeq	lr, r0, r3, lsl #8
    a938:	ac0e0c00 	stcge	12, cr0, [lr], {-0}
    a93c:	04000003 	streq	r0, [r0], #-3
    a940:	00a203fc 	strdeq	r0, [r2], ip	; <UNPREDICTABLE>
    a944:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    a948:	04005244 	streq	r5, [r0], #-580	; 0x244
    a94c:	00e403fd 	strdeq	r0, [r4], #61	; 0x3d	; <UNPREDICTABLE>
    a950:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    a954:	000004d6 	ldrdeq	r0, [r0], -r6
    a958:	a203fe04 	andge	pc, r3, #4, 28	; 0x40
    a95c:	12000000 	andne	r0, r0, #0
    a960:	3152530d 	cmpcc	r2, sp, lsl #6
    a964:	03ff0400 	mvnseq	r0, #0, 8
    a968:	000000e4 	andeq	r0, r0, r4, ror #1
    a96c:	04e00e14 	strbteq	r0, [r0], #3604	; 0xe14
    a970:	00040000 	andeq	r0, r4, r0
    a974:	0000a204 	andeq	sl, r0, r4, lsl #4
    a978:	530d1600 	movwpl	r1, #54784	; 0xd600
    a97c:	04003252 	streq	r3, [r0], #-594	; 0x252
    a980:	00e40401 	rsceq	r0, r4, r1, lsl #8
    a984:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    a988:	000004ea 	andeq	r0, r0, sl, ror #9
    a98c:	a2040204 	andge	r0, r4, #4, 4	; 0x40000000
    a990:	1a000000 	bne	a998 <_Min_Stack_Size+0xa598>
    a994:	5243430d 	subpl	r4, r3, #872415232	; 0x34000000
    a998:	04030400 	streq	r0, [r3], #-1024	; 0x400
    a99c:	000000e4 	andeq	r0, r0, r4, ror #1
    a9a0:	19710e1c 	ldmdbne	r1!, {r2, r3, r4, r9, sl, fp}^
    a9a4:	04040000 	streq	r0, [r4], #-0
    a9a8:	0000a204 	andeq	sl, r0, r4, lsl #4
    a9ac:	280e1e00 	stmdacs	lr, {r9, sl, fp, ip}
    a9b0:	04000017 	streq	r0, [r0], #-23
    a9b4:	00e40405 	rsceq	r0, r4, r5, lsl #8
    a9b8:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    a9bc:	0000197b 	andeq	r1, r0, fp, ror r9
    a9c0:	a2040604 	andge	r0, r4, #4, 12	; 0x400000
    a9c4:	22000000 	andcs	r0, r0, #0
    a9c8:	0017cb0e 	andseq	ip, r7, lr, lsl #22
    a9cc:	04070400 	streq	r0, [r7], #-1024	; 0x400
    a9d0:	000000e4 	andeq	r0, r0, r4, ror #1
    a9d4:	19850e24 	stmibne	r5, {r2, r5, r9, sl, fp}
    a9d8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    a9dc:	0000a204 	andeq	sl, r0, r4, lsl #4
    a9e0:	0b002600 	bleq	141e8 <_Min_Stack_Size+0x13de8>
    a9e4:	000017fc 	strdeq	r1, [r0], -ip
    a9e8:	32040904 	andcc	r0, r4, #4, 18	; 0x10000
    a9ec:	0f000002 	svceq	0x00000002
    a9f0:	0836053c 	ldmdaeq	r6!, {r2, r3, r4, r5, r8, sl}
    a9f4:	10000004 	andne	r0, r0, r4
    a9f8:	00001e11 	andeq	r1, r0, r1, lsl lr
    a9fc:	00b83805 	adcseq	r3, r8, r5, lsl #16
    aa00:	10000000 	andne	r0, r0, r0
    aa04:	00001bdc 	ldrdeq	r1, [r0], -ip
    aa08:	00b83b05 	adcseq	r3, r8, r5, lsl #22
    aa0c:	10040000 	andne	r0, r4, r0
    aa10:	00001e2c 	andeq	r1, r0, ip, lsr #28
    aa14:	00b83d05 	adcseq	r3, r8, r5, lsl #26
    aa18:	10080000 	andne	r0, r8, r0
    aa1c:	00001bd4 	ldrdeq	r1, [r0], -r4
    aa20:	00b84105 	adcseq	r4, r8, r5, lsl #2
    aa24:	100c0000 	andne	r0, ip, r0
    aa28:	00001e40 	andeq	r1, r0, r0, asr #28
    aa2c:	00b84505 	adcseq	r4, r8, r5, lsl #10
    aa30:	10100000 	andsne	r0, r0, r0
    aa34:	00001c37 	andeq	r1, r0, r7, lsr ip
    aa38:	00b84905 	adcseq	r4, r8, r5, lsl #18
    aa3c:	10140000 	andsne	r0, r4, r0
    aa40:	00001bf3 	strdeq	r1, [r0], -r3
    aa44:	00b84c05 	adcseq	r4, r8, r5, lsl #24
    aa48:	10180000 	andsne	r0, r8, r0
    aa4c:	00001ce4 	andeq	r1, r0, r4, ror #25
    aa50:	00b84f05 	adcseq	r4, r8, r5, lsl #30
    aa54:	101c0000 	andsne	r0, ip, r0
    aa58:	00001e83 	andeq	r1, r0, r3, lsl #29
    aa5c:	00b85205 	adcseq	r5, r8, r5, lsl #4
    aa60:	10200000 	eorne	r0, r0, r0
    aa64:	00001e4f 	andeq	r1, r0, pc, asr #28
    aa68:	00b85505 	adcseq	r5, r8, r5, lsl #10
    aa6c:	10240000 	eorne	r0, r4, r0
    aa70:	00001b38 	andeq	r1, r0, r8, lsr fp
    aa74:	00b85a05 	adcseq	r5, r8, r5, lsl #20
    aa78:	10280000 	eorne	r0, r8, r0
    aa7c:	00001df3 	strdeq	r1, [r0], -r3
    aa80:	00b85d05 	adcseq	r5, r8, r5, lsl #26
    aa84:	102c0000 	eorne	r0, ip, r0
    aa88:	00001d26 	andeq	r1, r0, r6, lsr #26
    aa8c:	00b86205 	adcseq	r6, r8, r5, lsl #4
    aa90:	10300000 	eorsne	r0, r0, r0
    aa94:	00001b45 	andeq	r1, r0, r5, asr #22
    aa98:	00b86505 	adcseq	r6, r8, r5, lsl #10
    aa9c:	10340000 	eorsne	r0, r4, r0
    aaa0:	00001b64 	andeq	r1, r0, r4, ror #22
    aaa4:	00b86a05 	adcseq	r6, r8, r5, lsl #20
    aaa8:	00380000 	eorseq	r0, r8, r0
    aaac:	001cfb03 	andseq	pc, ip, r3, lsl #22
    aab0:	4b6e0500 	blmi	1b8beb8 <_Min_Stack_Size+0x1b8bab8>
    aab4:	11000003 	tstne	r0, r3
    aab8:	34420601 	strbcc	r0, [r2], #-1537	; 0x601
    aabc:	09000004 	stmdbeq	r0, {r2}
    aac0:	0000085a 	andeq	r0, r0, sl, asr r8
    aac4:	08460900 	stmdaeq	r6, {r8, fp}^
    aac8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    aacc:	000007dd 	ldrdeq	r0, [r0], -sp
    aad0:	080c0902 	stmdaeq	ip, {r1, r8, fp}
    aad4:	00030000 	andeq	r0, r3, r0
    aad8:	00077703 	andeq	r7, r7, r3, lsl #14
    aadc:	13470600 	movtne	r0, #30208	; 0x7600
    aae0:	11000004 	tstne	r0, r4
    aae4:	544f0601 	strbpl	r0, [pc], #-1537	; aaec <_Min_Stack_Size+0xa6ec>
    aae8:	09000004 	stmdbeq	r0, {r2}
    aaec:	00000895 	muleq	r0, r5, r8
    aaf0:	07ac0900 	streq	r0, [ip, r0, lsl #18]!
    aaf4:	00010000 	andeq	r0, r1, r0
    aaf8:	00082d03 	andeq	r2, r8, r3, lsl #26
    aafc:	3f520600 	svccc	0x00520600
    ab00:	11000004 	tstne	r0, r4
    ab04:	805a0601 	subshi	r0, sl, r1, lsl #12
    ab08:	09000004 	stmdbeq	r0, {r2}
    ab0c:	00000934 	andeq	r0, r0, r4, lsr r9
    ab10:	09430900 	stmdbeq	r3, {r8, fp}^
    ab14:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    ab18:	000008f1 	strdeq	r0, [r0], -r1
    ab1c:	09b70902 	ldmibeq	r7!, {r1, r8, fp}
    ab20:	00030000 	andeq	r0, r3, r0
    ab24:	00095d03 	andeq	r5, r9, r3, lsl #26
    ab28:	5f5f0600 	svcpl	0x005f0600
    ab2c:	11000004 	tstne	r0, r4
    ab30:	a66e0601 	strbtge	r0, [lr], -r1, lsl #12
    ab34:	09000004 	stmdbeq	r0, {r2}
    ab38:	0000097e 	andeq	r0, r0, lr, ror r9
    ab3c:	09d80900 	ldmibeq	r8, {r8, fp}^
    ab40:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    ab44:	0000096f 	andeq	r0, r0, pc, ror #18
    ab48:	c7030002 	strgt	r0, [r3, -r2]
    ab4c:	06000009 	streq	r0, [r0], -r9
    ab50:	00048b72 	andeq	r8, r4, r2, ror fp
    ab54:	06080f00 	streq	r0, [r8], -r0, lsl #30
    ab58:	0004f684 	andeq	pc, r4, r4, lsl #13
    ab5c:	07521000 	ldrbeq	r1, [r2, -r0]
    ab60:	86060000 	strhi	r0, [r6], -r0
    ab64:	000000b8 	strheq	r0, [r0], -r8
    ab68:	0a641000 	beq	190eb70 <_Min_Stack_Size+0x190e770>
    ab6c:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    ab70:	00000434 	andeq	r0, r0, r4, lsr r4
    ab74:	07f71004 	ldrbeq	r1, [r7, r4]!
    ab78:	8c060000 	stchi	0, cr0, [r6], {-0}
    ab7c:	00000480 	andeq	r0, r0, r0, lsl #9
    ab80:	07d21005 	ldrbeq	r1, [r2, r5]
    ab84:	8f060000 	svchi	0x00060000
    ab88:	00000454 	andeq	r0, r0, r4, asr r4
    ab8c:	08ad1006 	stmiaeq	sp!, {r1, r2, ip}
    ab90:	92060000 	andls	r0, r6, #0
    ab94:	000004a6 	andeq	r0, r0, r6, lsr #9
    ab98:	a6030007 	strge	r0, [r3], -r7
    ab9c:	06000009 	streq	r0, [r0], -r9
    aba0:	0004b194 	muleq	r4, r4, r1
    aba4:	07100f00 	ldreq	r0, [r0, -r0, lsl #30]
    aba8:	00055236 	andeq	r5, r5, r6, lsr r2
    abac:	179f1000 	ldrne	r1, [pc, r0]
    abb0:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
    abb4:	000000b8 	strheq	r0, [r0], -r8
    abb8:	17ae1000 	strne	r1, [lr, r0]!
    abbc:	3b070000 	blcc	1cabc4 <_Min_Stack_Size+0x1ca7c4>
    abc0:	000000a2 	andeq	r0, r0, r2, lsr #1
    abc4:	18521004 	ldmdane	r2, {r2, ip}^
    abc8:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    abcc:	000000a2 	andeq	r0, r0, r2, lsr #1
    abd0:	198f1006 	stmibne	pc, {r1, r2, ip}	; <UNPREDICTABLE>
    abd4:	41070000 	mrsmi	r0, (UNDEF: 7)
    abd8:	000000a2 	andeq	r0, r0, r2, lsr #1
    abdc:	19aa1008 	stmibne	sl!, {r3, ip}
    abe0:	44070000 	strmi	r0, [r7], #-0
    abe4:	000000a2 	andeq	r0, r0, r2, lsr #1
    abe8:	19da100a 	ldmibne	sl, {r1, r3, ip}^
    abec:	47070000 	strmi	r0, [r7, -r0]
    abf0:	000000a2 	andeq	r0, r0, r2, lsr #1
    abf4:	4c03000c 	stcmi	0, cr0, [r3], {12}
    abf8:	07000019 	smladeq	r0, r9, r0, r0
    abfc:	00050149 	andeq	r0, r5, r9, asr #2
    ac00:	08080f00 	stmdaeq	r8, {r8, r9, sl, fp}
    ac04:	00059040 	andeq	r9, r5, r0, asr #32
    ac08:	4cdd1000 	ldclmi	0, cr1, [sp], {0}
    ac0c:	42080000 	andmi	r0, r8, #0
    ac10:	000000a2 	andeq	r0, r0, r2, lsr #1
    ac14:	00581200 	subseq	r1, r8, r0, lsl #4
    ac18:	00a24308 	adceq	r4, r2, r8, lsl #6
    ac1c:	12020000 	andne	r0, r2, #0
    ac20:	44080059 	strmi	r0, [r8], #-89	; 0x59
    ac24:	000000a2 	andeq	r0, r0, r2, lsr #1
    ac28:	005a1204 	subseq	r1, sl, r4, lsl #4
    ac2c:	00a24508 	adceq	r4, r2, r8, lsl #10
    ac30:	00060000 	andeq	r0, r6, r0
    ac34:	004c7303 	subeq	r7, ip, r3, lsl #6
    ac38:	5d460800 	stclpl	8, cr0, [r6, #-0]
    ac3c:	11000005 	tstne	r0, r5
    ac40:	c24c0801 	subgt	r0, ip, #65536	; 0x10000
    ac44:	09000005 	stmdbeq	r0, {r0, r2}
    ac48:	00004d5a 	andeq	r4, r0, sl, asr sp
    ac4c:	4e430900 	cdpmi	9, 4, cr0, cr3, cr0, {0}
    ac50:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    ac54:	00004da0 	andeq	r4, r0, r0, lsr #27
    ac58:	4eee0902 	cdpmi	9, 14, cr0, cr14, cr2, {0}
    ac5c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    ac60:	00004eae 	andeq	r4, r0, lr, lsr #29
    ac64:	01110004 	tsteq	r1, r4
    ac68:	05d76108 	ldrbeq	r6, [r7, #264]	; 0x108
    ac6c:	dd090000 	stcle	0, cr0, [r9, #-0]
    ac70:	0000004e 	andeq	r0, r0, lr, asr #32
    ac74:	004e4f09 	subeq	r4, lr, r9, lsl #30
    ac78:	03000100 	movweq	r0, #256	; 0x100
    ac7c:	00004e2a 	andeq	r4, r0, sl, lsr #28
    ac80:	05c26408 	strbeq	r6, [r2, #1032]	; 0x408
    ac84:	90130000 	andsls	r0, r3, r0
    ac88:	0100004e 	tsteq	r0, lr, asr #32
    ac8c:	0000977f 	andeq	r9, r0, pc, ror r7
    ac90:	009bcc00 	addseq	ip, fp, r0, lsl #24
    ac94:	00003008 	andeq	r3, r0, r8
    ac98:	139c0100 	orrsne	r0, ip, #0, 2
    ac9c:	00004d87 	andeq	r4, r0, r7, lsl #27
    aca0:	00979e01 	addseq	r9, r7, r1, lsl #28
    aca4:	9bfc0000 	blls	fff0acac <_estack+0xdfedacac>
    aca8:	001e0800 	andseq	r0, lr, r0, lsl #16
    acac:	9c010000 	stcls	0, cr0, [r1], {-0}
    acb0:	004c3214 	subeq	r3, ip, r4, lsl r2
    acb4:	7ab20100 	bvc	fec8b0bc <_estack+0xdec5b0bc>
    acb8:	1c000006 	stcne	0, cr0, [r0], {6}
    acbc:	c808009c 	stmdagt	r8, {r2, r3, r4, r7}
    acc0:	01000000 	mrseq	r0, (UNDEF: 0)
    acc4:	00067a9c 	muleq	r6, ip, sl
    acc8:	4e731500 	cdpmi	5, 7, cr1, cr3, cr0, {0}
    accc:	b4010000 	strlt	r0, [r1], #-0
    acd0:	000000b8 	strheq	r0, [r0], -r8
    acd4:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    acd8:	00004ee8 	andeq	r4, r0, r8, ror #29
    acdc:	00b8b401 	adcseq	fp, r8, r1, lsl #8
    ace0:	91020000 	mrsls	r0, (UNDEF: 2)
    ace4:	00781668 	rsbseq	r1, r8, r8, ror #12
    ace8:	00b8b401 	adcseq	fp, r8, r1, lsl #8
    acec:	91020000 	mrsls	r0, (UNDEF: 2)
    acf0:	00791674 	rsbseq	r1, r9, r4, ror r6
    acf4:	00b8b401 	adcseq	fp, r8, r1, lsl #8
    acf8:	91020000 	mrsls	r0, (UNDEF: 2)
    acfc:	785f1670 	ldmdavc	pc, {r4, r5, r6, r9, sl, ip}^	; <UNPREDICTABLE>
    ad00:	b8b50100 	ldmlt	r5!, {r8}
    ad04:	05000000 	streq	r0, [r0, #-0]
    ad08:	0004e803 	andeq	lr, r4, r3, lsl #16
    ad0c:	795f1620 	ldmdbvc	pc, {r5, r9, sl, ip}^	; <UNPREDICTABLE>
    ad10:	b8b50100 	ldmlt	r5!, {r8}
    ad14:	05000000 	streq	r0, [r0, #-0]
    ad18:	0004ec03 	andeq	lr, r4, r3, lsl #24
    ad1c:	04170020 	ldreq	r0, [r7], #-32
    ad20:	00000590 	muleq	r0, r0, r5
    ad24:	004d0e14 	subeq	r0, sp, r4, lsl lr
    ad28:	04e10100 	strbteq	r0, [r1], #256	; 0x100
    ad2c:	e4000001 	str	r0, [r0], #-1
    ad30:	3408009c 	strcc	r0, [r8], #-156	; 0x9c
    ad34:	01000000 	mrseq	r0, (UNDEF: 0)
    ad38:	0006b69c 	muleq	r6, ip, r6
    ad3c:	4f201800 	svcmi	0x00201800
    ad40:	e1010000 	mrs	r0, (UNDEF: 1)
    ad44:	00000097 	muleq	r0, r7, r0
    ad48:	166f9102 	strbtne	r9, [pc], -r2, lsl #2
    ad4c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    ad50:	00dfe301 	sbcseq	lr, pc, r1, lsl #6
    ad54:	91020000 	mrsls	r0, (UNDEF: 2)
    ad58:	eb140077 	bl	50af3c <_Min_Stack_Size+0x50ab3c>
    ad5c:	0100004c 	tsteq	r0, ip, asr #32
    ad60:	000097fe 	strdeq	r9, [r0], -lr
    ad64:	009d1800 	addseq	r1, sp, r0, lsl #16
    ad68:	00001e08 	andeq	r1, r0, r8, lsl #28
    ad6c:	de9c0100 	fmllee	f0, f4, f0
    ad70:	18000006 	stmdane	r0, {r1, r2}
    ad74:	00004f20 	andeq	r4, r0, r0, lsr #30
    ad78:	0097fe01 	addseq	pc, r7, r1, lsl #28
    ad7c:	91020000 	mrsls	r0, (UNDEF: 2)
    ad80:	cb190077 	blgt	64af64 <_Min_Stack_Size+0x64ab64>
    ad84:	0100004c 	tsteq	r0, ip, asr #32
    ad88:	0097010e 	addseq	r0, r7, lr, lsl #2
    ad8c:	9d380000 	ldcls	0, cr0, [r8, #-0]
    ad90:	00340800 	eorseq	r0, r4, r0, lsl #16
    ad94:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad98:	004d9619 	subeq	r9, sp, r9, lsl r6
    ad9c:	01280100 	teqeq	r8, r0, lsl #2
    ada0:	00000097 	muleq	r0, r7, r0
    ada4:	08009d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, pc}
    ada8:	00000020 	andeq	r0, r0, r0, lsr #32
    adac:	1f1a9c01 	svcne	0x001a9c01
    adb0:	0100004d 	tsteq	r0, sp, asr #32
    adb4:	00a2013c 	adceq	r0, r2, ip, lsr r1
    adb8:	9d8c0000 	stcls	0, cr0, [ip]
    adbc:	00340800 	eorseq	r0, r4, r0, lsl #16
    adc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    adc4:	00000734 	andeq	r0, r0, r4, lsr r7
    adc8:	706d741b 	rsbvc	r7, sp, fp, lsl r4
    adcc:	013e0100 	teqeq	lr, r0, lsl #2
    add0:	000000a2 	andeq	r0, r0, r2, lsr #1
    add4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    add8:	004cb21a 	subeq	fp, ip, sl, lsl r2
    addc:	01530100 	cmpeq	r3, r0, lsl #2
    ade0:	00000097 	muleq	r0, r7, r0
    ade4:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
    ade8:	0000004e 	andeq	r0, r0, lr, asr #32
    adec:	077c9c01 	ldrbeq	r9, [ip, -r1, lsl #24]!
    adf0:	461c0000 	ldrmi	r0, [ip], -r0
    adf4:	01007463 	tsteq	r0, r3, ror #8
    adf8:	00970153 	addseq	r0, r7, r3, asr r1
    adfc:	91020000 	mrsls	r0, (UNDEF: 2)
    ae00:	05b81d6f 	ldreq	r1, [r8, #3439]!	; 0xd6f
    ae04:	53010000 	movwpl	r0, #4096	; 0x1000
    ae08:	00012601 	andeq	r2, r1, r1, lsl #12
    ae0c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    ae10:	706d741b 	rsbvc	r7, sp, fp, lsl r4
    ae14:	01550100 	cmpeq	r5, r0, lsl #2
    ae18:	00000097 	muleq	r0, r7, r0
    ae1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    ae20:	004c4b1a 	subeq	r4, ip, sl, lsl fp
    ae24:	01720100 	cmneq	r2, r0, lsl #2
    ae28:	00000097 	muleq	r0, r7, r0
    ae2c:	08009e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, pc}
    ae30:	00000044 	andeq	r0, r0, r4, asr #32
    ae34:	07b59c01 	ldreq	r9, [r5, r1, lsl #24]!
    ae38:	b81d0000 	ldmdalt	sp, {}	; <UNPREDICTABLE>
    ae3c:	01000005 	tsteq	r0, r5
    ae40:	01260172 	teqeq	r6, r2, ror r1
    ae44:	91020000 	mrsls	r0, (UNDEF: 2)
    ae48:	6d741b6f 	fldmdbxvs	r4!, {d17-d71}	;@ Deprecated
    ae4c:	74010070 	strvc	r0, [r1], #-112	; 0x70
    ae50:	00009701 	andeq	r9, r0, r1, lsl #14
    ae54:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    ae58:	4e5a1a00 	vnmlsmi.f32	s3, s20, s0
    ae5c:	97010000 	strls	r0, [r1, -r0]
    ae60:	00009701 	andeq	r9, r0, r1, lsl #14
    ae64:	009e5400 	addseq	r5, lr, r0, lsl #8
    ae68:	00004e08 	andeq	r4, r0, r8, lsl #28
    ae6c:	fd9c0100 	ldc2	1, cr0, [ip]
    ae70:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    ae74:	00004f20 	andeq	r4, r0, r0, lsr #30
    ae78:	97019701 	strls	r9, [r1, -r1, lsl #14]
    ae7c:	02000000 	andeq	r0, r0, #0
    ae80:	b81d6f91 	ldmdalt	sp, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    ae84:	01000005 	tsteq	r0, r5
    ae88:	01260197 			; <UNDEFINED> instruction: 0x01260197
    ae8c:	91020000 	mrsls	r0, (UNDEF: 2)
    ae90:	6d741b6e 	vldmdbvs	r4!, {d17-<overflow reg d71>}
    ae94:	99010070 	stmdbls	r1, {r4, r5, r6}
    ae98:	00009701 	andeq	r9, r0, r1, lsl #14
    ae9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    aea0:	4ec21900 	cdpmi	9, 12, cr1, cr2, cr0, {0}
    aea4:	b4010000 	strlt	r0, [r1], #-0
    aea8:	00009701 	andeq	r9, r0, r1, lsl #14
    aeac:	009ea400 	addseq	sl, lr, r0, lsl #8
    aeb0:	00009408 	andeq	r9, r0, r8, lsl #8
    aeb4:	1a9c0100 	bne	fe70b2bc <_estack+0xde6db2bc>
    aeb8:	00004c56 	andeq	r4, r0, r6, asr ip
    aebc:	9701ec01 	strls	lr, [r1, -r1, lsl #24]
    aec0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    aec4:	4e08009f 	mcrmi	0, 0, r0, cr8, cr15, {4}
    aec8:	01000000 	mrseq	r0, (UNDEF: 0)
    aecc:	00085b9c 	muleq	r8, ip, fp
    aed0:	07541d00 	ldrbeq	r1, [r4, -r0, lsl #26]
    aed4:	ec010000 	stc	0, cr0, [r1], {-0}
    aed8:	00009701 	andeq	r9, r0, r1, lsl #14
    aedc:	6f910200 	svcvs	0x00910200
    aee0:	0005b81d 	andeq	fp, r5, sp, lsl r8
    aee4:	01ec0100 	mvneq	r0, r0, lsl #2
    aee8:	00000126 	andeq	r0, r0, r6, lsr #2
    aeec:	1b6e9102 	blne	1baf2fc <_Min_Stack_Size+0x1baeefc>
    aef0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    aef4:	9701ee01 	strls	lr, [r1, -r1, lsl #28]
    aef8:	02000000 	andeq	r0, r0, #0
    aefc:	1a007791 	bne	28d48 <_Min_Stack_Size+0x28948>
    af00:	00004dc4 	andeq	r4, r0, r4, asr #27
    af04:	97020b01 	strls	r0, [r2, -r1, lsl #22]
    af08:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    af0c:	9408009f 	strls	r0, [r8], #-159	; 0x9f
    af10:	01000001 	tsteq	r0, r1
    af14:	0008b29c 	muleq	r8, ip, r2
    af18:	4c8a1d00 	stcmi	13, cr1, [sl], {0}
    af1c:	0b010000 	bleq	4af24 <_Min_Stack_Size+0x4ab24>
    af20:	00009702 	andeq	r9, r0, r2, lsl #14
    af24:	6f910200 	svcvs	0x00910200
    af28:	004d2a1d 	subeq	r2, sp, sp, lsl sl
    af2c:	020b0100 	andeq	r0, fp, #0, 2
    af30:	00000097 	muleq	r0, r7, r0
    af34:	1e6e9102 	lgnnee	f1, f2
    af38:	00004e68 	andeq	r4, r0, r8, ror #28
    af3c:	b8020d01 	stmdalt	r2, {r0, r8, sl, fp}
    af40:	02000000 	andeq	r0, r0, #0
    af44:	be1e7491 	cfcmpslt	r7, mvf14, mvf1
    af48:	0100004c 	tsteq	r0, ip, asr #32
    af4c:	0097020e 	addseq	r0, r7, lr, lsl #4
    af50:	91020000 	mrsls	r0, (UNDEF: 2)
    af54:	971a0073 			; <UNDEFINED> instruction: 0x971a0073
    af58:	0100004c 	tsteq	r0, ip, asr #32
    af5c:	0097026f 	addseq	r0, r7, pc, ror #4
    af60:	a11c0000 	tstge	ip, r0
    af64:	01d40800 	bicseq	r0, r4, r0, lsl #16
    af68:	9c010000 	stcls	0, cr0, [r1], {-0}
    af6c:	000008eb 	andeq	r0, r0, fp, ror #17
    af70:	004c8a1d 	subeq	r8, ip, sp, lsl sl
    af74:	026f0100 	rsbeq	r0, pc, #0, 2
    af78:	00000097 	muleq	r0, r7, r0
    af7c:	1e6f9102 	lgnnee	f1, f2
    af80:	00004ed0 	ldrdeq	r4, [r0], -r0
    af84:	eb027101 	bl	a7390 <_Min_Stack_Size+0xa6f90>
    af88:	02000008 	andeq	r0, r0, #8
    af8c:	06007491 			; <UNDEFINED> instruction: 0x06007491
    af90:	00000097 	muleq	r0, r7, r0
    af94:	000008fb 	strdeq	r0, [r0], -fp
    af98:	0000c307 	andeq	ip, r0, r7, lsl #6
    af9c:	1a000100 	bne	b3a4 <_Min_Stack_Size+0xafa4>
    afa0:	00004e79 	andeq	r4, r0, r9, ror lr
    afa4:	a202ce01 	andge	ip, r2, #1, 28
    afa8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    afac:	f40800a2 	vst4.32	{d0-d3}, [r8 :128], r2
    afb0:	01000001 	tsteq	r0, r1
    afb4:	0009439c 	muleq	r9, ip, r3
    afb8:	4c8a1d00 	stcmi	13, cr1, [sl], {0}
    afbc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    afc0:	0000b802 	andeq	fp, r0, r2, lsl #16
    afc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    afc8:	706d741b 	rsbvc	r7, sp, fp, lsl r4
    afcc:	02d00100 	sbcseq	r0, r0, #0, 2
    afd0:	00000097 	muleq	r0, r7, r0
    afd4:	1e779102 	expnes	f1, f2
    afd8:	00004ed0 	ldrdeq	r4, [r0], -r0
    afdc:	eb02d101 	bl	bf3e8 <_Min_Stack_Size+0xbefe8>
    afe0:	02000008 	andeq	r0, r0, #8
    afe4:	1f007491 	svcne	0x00007491
    afe8:	00004c65 	andeq	r4, r0, r5, ror #24
    afec:	a2033301 	andge	r3, r3, #67108864	; 0x4000000
    aff0:	e4000000 	str	r0, [r0], #-0
    aff4:	680800a4 	stmdavs	r8, {r2, r5, r7}
    aff8:	01000000 	mrseq	r0, (UNDEF: 0)
    affc:	0009799c 	muleq	r9, ip, r9
    b000:	00781b00 	rsbseq	r1, r8, r0, lsl #22
    b004:	ad033501 	cfstr32ge	mvfx3, [r3, #-4]
    b008:	02000000 	andeq	r0, r0, #0
    b00c:	781b7491 	ldmdavc	fp, {r0, r4, r7, sl, ip, sp, lr}
    b010:	35010072 	strcc	r0, [r1, #-114]	; 0x72
    b014:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b018:	70910200 	addsvc	r0, r1, r0, lsl #4
    b01c:	4d611f00 	stclmi	15, cr1, [r1, #-0]
    b020:	5a010000 	bpl	4b028 <_Min_Stack_Size+0x4ac28>
    b024:	0000a203 	andeq	sl, r0, r3, lsl #4
    b028:	00a54c00 	adceq	r4, r5, r0, lsl #24
    b02c:	00005408 	andeq	r5, r0, r8, lsl #8
    b030:	af9c0100 	svcge	0x009c0100
    b034:	1b000009 	blne	b060 <_Min_Stack_Size+0xac60>
    b038:	5c010079 	stcpl	0, cr0, [r1], {121}	; 0x79
    b03c:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b040:	70910200 	addsvc	r0, r1, r0, lsl #4
    b044:	0072791b 	rsbseq	r7, r2, fp, lsl r9
    b048:	ad035c01 	stcge	12, cr5, [r3, #-4]
    b04c:	02000000 	andeq	r0, r0, #0
    b050:	1f007491 	svcne	0x00007491
    b054:	00004c7c 	andeq	r4, r0, ip, ror ip
    b058:	a2037b01 	andge	r7, r3, #1024	; 0x400
    b05c:	a0000000 	andge	r0, r0, r0
    b060:	260800a5 	strcs	r0, [r8], -r5, lsr #1
    b064:	01000000 	mrseq	r0, (UNDEF: 0)
    b068:	0009d79c 	muleq	r9, ip, r7
    b06c:	007a1b00 	rsbseq	r1, sl, r0, lsl #22
    b070:	b8037d01 	stmdalt	r3, {r0, r8, sl, fp, ip, sp, lr}
    b074:	02000000 	andeq	r0, r0, #0
    b078:	20007491 	mulcs	r0, r1, r4
    b07c:	00004d4a 	andeq	r4, r0, sl, asr #26
    b080:	c8038d01 	stmdagt	r3, {r0, r8, sl, fp, pc}
    b084:	8c0800a5 	stchi	0, cr0, [r8], {165}	; 0xa5
    b088:	01000000 	mrseq	r0, (UNDEF: 0)
    b08c:	0009fd9c 	muleq	r9, ip, sp
    b090:	412b1e00 	teqmi	fp, r0, lsl #28
    b094:	8f010000 	svchi	0x00010000
    b098:	0004f603 	andeq	pc, r4, r3, lsl #12
    b09c:	70910200 	addsvc	r0, r1, r0, lsl #4
    b0a0:	4cff2000 	ldclmi	0, cr2, [pc]	; b0a8 <_Min_Stack_Size+0xaca8>
    b0a4:	b3010000 	movwlt	r0, #4096	; 0x1000
    b0a8:	00a65403 	adceq	r5, r6, r3, lsl #8
    b0ac:	00005408 	andeq	r5, r0, r8, lsl #8
    b0b0:	239c0100 	orrscs	r0, ip, #0, 2
    b0b4:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    b0b8:	00004d38 	andeq	r4, r0, r8, lsr sp
    b0bc:	5203b501 	andpl	fp, r3, #4194304	; 0x400000
    b0c0:	02000005 	andeq	r0, r0, #5
    b0c4:	20006891 	mulcs	r0, r1, r8
    b0c8:	00004efa 	strdeq	r4, [r0], -sl
    b0cc:	a803cf01 	stmdage	r3, {r0, r8, r9, sl, fp, lr, pc}
    b0d0:	a40800a6 	strge	r0, [r8], #-166	; 0xa6
    b0d4:	01000000 	mrseq	r0, (UNDEF: 0)
    b0d8:	000a6a9c 	muleq	sl, ip, sl
    b0dc:	188f1d00 	stmne	pc, {r8, sl, fp, ip}	; <UNPREDICTABLE>
    b0e0:	cf010000 	svcgt	0x00010000
    b0e4:	0005d703 	andeq	sp, r5, r3, lsl #14
    b0e8:	b7910300 	ldrlt	r0, [r1, r0, lsl #6]
    b0ec:	02b71d7f 	adcseq	r1, r7, #8128	; 0x1fc0
    b0f0:	cf010000 	svcgt	0x00010000
    b0f4:	000a6a03 	andeq	r6, sl, r3, lsl #20
    b0f8:	b0910300 	addslt	r0, r1, r0, lsl #6
    b0fc:	426d1e7f 	rsbmi	r1, sp, #2032	; 0x7f0
    b100:	d1010000 	mrsle	r0, (UNDEF: 1)
    b104:	00040803 	andeq	r0, r4, r3, lsl #16
    b108:	bc910300 	ldclt	3, cr0, [r1], {0}
    b10c:	0417007f 	ldreq	r0, [r7], #-127	; 0x7f
    b110:	00000097 	muleq	r0, r7, r0
    b114:	004dac1a 	subeq	sl, sp, sl, lsl ip
    b118:	041e0100 	ldreq	r0, [lr], #-256	; 0x100
    b11c:	00000097 	muleq	r0, r7, r0
    b120:	0800a74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp, pc}
    b124:	0000015c 	andeq	r0, r0, ip, asr r1
    b128:	0ab89c01 	beq	fee32134 <_estack+0xdee02134>
    b12c:	8a1d0000 	bhi	74b134 <_Min_Stack_Size+0x74ad34>
    b130:	0100004c 	tsteq	r0, ip, asr #32
    b134:	0097041e 	addseq	r0, r7, lr, lsl r4
    b138:	91020000 	mrsls	r0, (UNDEF: 2)
    b13c:	4d2a1d6f 	stcmi	13, cr1, [sl, #-444]!	; 0xfffffe44
    b140:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    b144:	00009704 	andeq	r9, r0, r4, lsl #14
    b148:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    b14c:	004e681e 	subeq	r6, lr, lr, lsl r8
    b150:	04200100 	strteq	r0, [r0], #-256	; 0x100
    b154:	000000b8 	strheq	r0, [r0], -r8
    b158:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b15c:	004f091a 	subeq	r0, pc, sl, lsl r9	; <UNPREDICTABLE>
    b160:	04740100 	ldrbteq	r0, [r4], #-256	; 0x100
    b164:	00000097 	muleq	r0, r7, r0
    b168:	0800a8a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, pc}
    b16c:	000001dc 	ldrdeq	r0, [r0], -ip
    b170:	0af19c01 	beq	ffc7217c <_estack+0xdfc4217c>
    b174:	8a1d0000 	bhi	74b17c <_Min_Stack_Size+0x74ad7c>
    b178:	0100004c 	tsteq	r0, ip, asr #32
    b17c:	00970474 	addseq	r0, r7, r4, ror r4
    b180:	91020000 	mrsls	r0, (UNDEF: 2)
    b184:	6d741b6f 	fldmdbxvs	r4!, {d17-d71}	;@ Deprecated
    b188:	76010070 			; <UNDEFINED> instruction: 0x76010070
    b18c:	00009704 	andeq	r9, r0, r4, lsl #14
    b190:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    b194:	4e9b1a00 	vfnmsmi.f32	s2, s22, s0
    b198:	d3010000 	movwle	r0, #4096	; 0x1000
    b19c:	0000a204 	andeq	sl, r0, r4, lsl #4
    b1a0:	00aa8400 	adceq	r8, sl, r0, lsl #8
    b1a4:	0001cc08 	andeq	ip, r1, r8, lsl #24
    b1a8:	2a9c0100 	bcs	fe70b5b0 <_estack+0xde6db5b0>
    b1ac:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    b1b0:	00004c8a 	andeq	r4, r0, sl, lsl #25
    b1b4:	b804d301 	stmdalt	r4, {r0, r8, r9, ip, lr, pc}
    b1b8:	02000000 	andeq	r0, r0, #0
    b1bc:	d01e6c91 	mulsle	lr, r1, ip
    b1c0:	0100004e 	tsteq	r0, lr, asr #32
    b1c4:	08eb04d5 	stmiaeq	fp!, {r0, r2, r4, r6, r7, sl}^
    b1c8:	91020000 	mrsls	r0, (UNDEF: 2)
    b1cc:	6f1a0074 	svcvs	0x001a0074
    b1d0:	0100004d 	tsteq	r0, sp, asr #32
    b1d4:	00970531 	addseq	r0, r7, r1, lsr r5
    b1d8:	ac500000 	mrage	r0, r0, acc0
    b1dc:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    b1e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b1e4:	00000b54 	andeq	r0, r0, r4, asr fp
    b1e8:	004d381e 	subeq	r3, sp, lr, lsl r8
    b1ec:	05330100 	ldreq	r0, [r3, #-256]!	; 0x100
    b1f0:	00000552 	andeq	r0, r0, r2, asr r5
    b1f4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    b1f8:	00433721 	subeq	r3, r3, r1, lsr #14
    b1fc:	05520100 	ldrbeq	r0, [r2, #-256]	; 0x100
    b200:	0800acbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
    b204:	00000034 	andeq	r0, r0, r4, lsr r0
    b208:	0b899c01 	bleq	fe272214 <_estack+0xde242214>
    b20c:	a41d0000 	ldrge	r0, [sp], #-0
    b210:	01000043 	tsteq	r0, r3, asr #32
    b214:	00ca0552 	sbceq	r0, sl, r2, asr r5
    b218:	91020000 	mrsls	r0, (UNDEF: 2)
    b21c:	43141e6c 	tstmi	r4, #108, 28	; 0x6c0
    b220:	54010000 	strpl	r0, [r1], #-0
    b224:	0000ca05 	andeq	ip, r0, r5, lsl #20
    b228:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b22c:	01562200 	cmpeq	r6, r0, lsl #4
    b230:	a7090000 	strge	r0, [r9, -r0]
    b234:	0000e906 	andeq	lr, r0, r6, lsl #18
    b238:	4c422300 	mcrrmi	3, 0, r2, r2, cr0
    b23c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    b240:	00000590 	muleq	r0, r0, r5
    b244:	04e00305 	strbteq	r0, [r0], #773	; 0x305
    b248:	1e232000 	cdpne	0, 2, cr2, cr3, cr0, {0}
    b24c:	0100004e 	tsteq	r0, lr, asr #32
    b250:	0000b85b 	andeq	fp, r0, fp, asr r8
    b254:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    b258:	00200000 	eoreq	r0, r0, r0
    b25c:	0000024c 	andeq	r0, r0, ip, asr #4
    b260:	1f2d0004 	svcne	0x002d0004
    b264:	01040000 	mrseq	r0, (UNDEF: 4)
    b268:	00004f5b 	andeq	r4, r0, fp, asr pc
    b26c:	00502001 	subseq	r2, r0, r1
    b270:	00505600 	subseq	r5, r0, r0, lsl #12
    b274:	000d1800 	andeq	r1, sp, r0, lsl #16
    b278:	00000000 	andeq	r0, r0, r0
    b27c:	004dee00 	subeq	lr, sp, r0, lsl #28
    b280:	04080200 	streq	r0, [r8], #-512	; 0x200
    b284:	00000168 	andeq	r0, r0, r8, ror #2
    b288:	69050403 	stmdbvs	r5, {r0, r1, sl}
    b28c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    b290:	012b0704 	teqeq	fp, r4, lsl #14
    b294:	01020000 	mrseq	r0, (UNDEF: 2)
    b298:	00014506 	andeq	r4, r1, r6, lsl #10
    b29c:	08010200 	stmdaeq	r1, {r9}
    b2a0:	00000143 	andeq	r0, r0, r3, asr #2
    b2a4:	7f050202 	svcvc	0x00050202
    b2a8:	02000001 	andeq	r0, r0, #1
    b2ac:	000e0702 	andeq	r0, lr, r2, lsl #14
    b2b0:	6f040000 	svcvs	0x00040000
    b2b4:	02000001 	andeq	r0, r0, #1
    b2b8:	0000613f 	andeq	r6, r0, pc, lsr r1
    b2bc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    b2c0:	00000005 	andeq	r0, r0, r5
    b2c4:	0004f404 	andeq	pc, r4, r4, lsl #8
    b2c8:	73410200 	movtvc	r0, #4608	; 0x1200
    b2cc:	02000000 	andeq	r0, r0, #0
    b2d0:	01260704 	teqeq	r6, r4, lsl #14
    b2d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b2d8:	00000005 	andeq	r0, r0, r5
    b2dc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b2e0:	00000121 	andeq	r0, r0, r1, lsr #2
    b2e4:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    b2e8:	02000001 	andeq	r0, r0, #1
    b2ec:	014c0801 	cmpeq	ip, r1, lsl #16
    b2f0:	04020000 	streq	r0, [r2], #-0
    b2f4:	00017904 	andeq	r7, r1, r4, lsl #18
    b2f8:	04080200 	streq	r0, [r8], #-512	; 0x200
    b2fc:	00000163 	andeq	r0, r0, r3, ror #2
    b300:	0f030805 	svceq	0x00030805
    b304:	0000c801 	andeq	ip, r0, r1, lsl #16
    b308:	736c0600 	cmnvc	ip, #0, 12
    b30c:	11030077 	tstne	r3, r7, ror r0
    b310:	00006801 	andeq	r6, r0, r1, lsl #16
    b314:	6d060000 	stcvs	0, cr0, [r6, #-0]
    b318:	03007773 	movweq	r7, #1907	; 0x773
    b31c:	00680112 	rsbeq	r0, r8, r2, lsl r1
    b320:	00040000 	andeq	r0, r4, r0
    b324:	0c030807 	stceq	8, cr0, [r3], {7}
    b328:	0000ea01 	andeq	lr, r0, r1, lsl #20
    b32c:	55fa0800 	ldrbpl	r0, [sl, #2048]!	; 0x800
    b330:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    b334:	00002501 	andeq	r2, r0, r1, lsl #10
    b338:	4f550800 	svcmi	0x00550800
    b33c:	13030000 	movwne	r0, #12288	; 0x3000
    b340:	0000a401 	andeq	sl, r0, r1, lsl #8
    b344:	2a090000 	bcs	24b34c <_Min_Stack_Size+0x24af4c>
    b348:	0300004f 	movweq	r0, #79	; 0x4f
    b34c:	00c80114 	sbceq	r0, r8, r4, lsl r1
    b350:	460a0000 	strmi	r0, [sl], -r0
    b354:	0400004f 	streq	r0, [r0], #-79	; 0x4f
    b358:	0000256c 	andeq	r2, r0, ip, ror #10
    b35c:	00acf000 	adceq	pc, ip, r0
    b360:	00038808 	andeq	r8, r3, r8, lsl #16
    b364:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    b368:	0b000001 	bleq	b374 <_Min_Stack_Size+0xaf74>
    b36c:	81010078 	tsthi	r1, r8, ror r0
    b370:	00000025 	andeq	r0, r0, r5, lsr #32
    b374:	00000000 	andeq	r0, r0, r0
    b378:	0100770c 	tsteq	r0, ip, lsl #14
    b37c:	00002587 	andeq	r2, r0, r7, lsl #11
    b380:	00014800 	andeq	r4, r1, r0, lsl #16
    b384:	31730c00 	cmncc	r3, r0, lsl #24
    b388:	25870100 	strcs	r0, [r7, #256]	; 0x100
    b38c:	70000000 	andvc	r0, r0, r0
    b390:	0c000001 	stceq	0, cr0, [r0], {1}
    b394:	01003273 	tsteq	r0, r3, ror r2
    b398:	00002587 	andeq	r2, r0, r7, lsl #11
    b39c:	00019800 	andeq	r9, r1, r0, lsl #16
    b3a0:	007a0c00 	rsbseq	r0, sl, r0, lsl #24
    b3a4:	00258701 	eoreq	r8, r5, r1, lsl #14
    b3a8:	01c00000 	biceq	r0, r0, r0
    b3ac:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    b3b0:	88010078 	stmdahi	r1, {r3, r4, r5, r6}
    b3b4:	00000056 	andeq	r0, r0, r6, asr r0
    b3b8:	000001e8 	andeq	r0, r0, r8, ror #3
    b3bc:	0078680d 	rsbseq	r6, r8, sp, lsl #16
    b3c0:	00568801 	subseq	r8, r6, r1, lsl #16
    b3c4:	57010000 	strpl	r0, [r1, -r0]
    b3c8:	0064690c 	rsbeq	r6, r4, ip, lsl #18
    b3cc:	00568801 	subseq	r8, r6, r1, lsl #16
    b3d0:	02860000 	addeq	r0, r6, #0
    b3d4:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    b3d8:	020800ad 	andeq	r0, r8, #173	; 0xad
    b3dc:	97000000 	strls	r0, [r0, -r0]
    b3e0:	0f000001 	svceq	0x00000001
    b3e4:	00004f50 	andeq	r4, r0, r0, asr pc
    b3e8:	00ea8a01 	rsceq	r8, sl, r1, lsl #20
    b3ec:	02df0000 	sbcseq	r0, pc, #0
    b3f0:	10000000 	andne	r0, r0, r0
    b3f4:	00000d00 	andeq	r0, r0, r0, lsl #26
    b3f8:	000001ac 	andeq	r0, r0, ip, lsr #3
    b3fc:	776f6c11 			; <UNDEFINED> instruction: 0x776f6c11
    b400:	688d0100 	stmvs	sp, {r8}
    b404:	00000000 	andeq	r0, r0, r0
    b408:	00aefe12 	adceq	pc, lr, r2, lsl lr	; <UNPREDICTABLE>
    b40c:	00023e08 	andeq	r3, r2, r8, lsl #28
    b410:	25130000 	ldrcs	r0, [r3, #-0]
    b414:	c6000000 	strgt	r0, [r0], -r0
    b418:	14000001 	strne	r0, [r0], #-1
    b41c:	00000088 	andeq	r0, r0, r8, lsl #1
    b420:	19150003 	ldmdbne	r5, {r0, r1}
    b424:	01000050 	qaddeq	r0, r0, r0
    b428:	0001d751 	andeq	sp, r1, r1, asr r7
    b42c:	38030500 	stmdacc	r3, {r8, sl}
    b430:	160800f2 			; <UNDEFINED> instruction: 0x160800f2
    b434:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    b438:	00504f15 	subseq	r4, r0, r5, lsl pc
    b43c:	ed5c0100 	ldfe	f0, [ip, #-0]
    b440:	05000001 	streq	r0, [r0, #-1]
    b444:	00f21803 	rscseq	r1, r2, r3, lsl #16
    b448:	01b61608 			; <UNDEFINED> instruction: 0x01b61608
    b44c:	25130000 	ldrcs	r0, [r3, #-0]
    b450:	02000000 	andeq	r0, r0, #0
    b454:	14000002 	strne	r0, [r0], #-2
    b458:	00000088 	andeq	r0, r0, r8, lsl #1
    b45c:	6111000a 	tstvs	r1, sl
    b460:	67010054 	smlsdvs	r1, r4, r0, r0
    b464:	0000020c 	andeq	r0, r0, ip, lsl #4
    b468:	0001f216 	andeq	pc, r1, r6, lsl r2	; <UNPREDICTABLE>
    b46c:	6e6f1700 	cdpvs	7, 6, cr1, cr15, cr0, {0}
    b470:	7d010065 	stcvc	0, cr0, [r1, #-404]	; 0xfffffe6c
    b474:	00000225 	andeq	r0, r0, r5, lsr #4
    b478:	00000008 	andeq	r0, r0, r8
    b47c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    b480:	0025163f 	eoreq	r1, r5, pc, lsr r6
    b484:	41180000 	tstmi	r8, r0
    b488:	0100004f 	tsteq	r0, pc, asr #32
    b48c:	0002257e 	andeq	r2, r2, lr, ror r5
    b490:	759c0800 	ldrvc	r0, [ip, #2048]	; 0x800
    b494:	e43c8800 	ldrt	r8, [ip], #-2048	; 0x800
    b498:	4b197e37 	blmi	66ad7c <_Min_Stack_Size+0x66a97c>
    b49c:	0400004f 	streq	r0, [r0], #-79	; 0x4f
    b4a0:	00002574 	andeq	r2, r0, r4, ror r5
    b4a4:	00251a00 	eoreq	r1, r5, r0, lsl #20
    b4a8:	00000000 	andeq	r0, r0, r0
    b4ac:	00000132 	andeq	r0, r0, r2, lsr r1
    b4b0:	208b0004 	addcs	r0, fp, r4
    b4b4:	01040000 	mrseq	r0, (UNDEF: 4)
    b4b8:	00004f5b 	andeq	r4, r0, fp, asr pc
    b4bc:	0050c401 	subseq	ip, r0, r1, lsl #8
    b4c0:	00505600 	subseq	r5, r0, r0, lsl #12
    b4c4:	000d2800 	andeq	r2, sp, r0, lsl #16
    b4c8:	00000000 	andeq	r0, r0, r0
    b4cc:	004f9200 	subeq	r9, pc, r0, lsl #4
    b4d0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    b4d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b4d8:	2b070403 	blcs	1cc4ec <_Min_Stack_Size+0x1cc0ec>
    b4dc:	03000001 	movweq	r0, #1
    b4e0:	01450601 	cmpeq	r5, r1, lsl #12
    b4e4:	01030000 	mrseq	r0, (UNDEF: 3)
    b4e8:	00014308 	andeq	r4, r1, r8, lsl #6
    b4ec:	05020300 	streq	r0, [r2, #-768]	; 0x300
    b4f0:	0000017f 	andeq	r0, r0, pc, ror r1
    b4f4:	0e070203 	cdpeq	2, 0, cr0, cr7, cr3, {0}
    b4f8:	03000000 	movweq	r0, #0
    b4fc:	00050504 	andeq	r0, r5, r4, lsl #10
    b500:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    b504:	03000004 	movweq	r0, #4
    b508:	00006141 	andeq	r6, r0, r1, asr #2
    b50c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    b510:	00000126 	andeq	r0, r0, r6, lsr #2
    b514:	00050803 	andeq	r0, r5, r3, lsl #16
    b518:	03000000 	movweq	r0, #0
    b51c:	01210708 	teqeq	r1, r8, lsl #14
    b520:	04030000 	streq	r0, [r3], #-0
    b524:	00019207 	andeq	r9, r1, r7, lsl #4
    b528:	08010300 	stmdaeq	r1, {r8, r9}
    b52c:	0000014c 	andeq	r0, r0, ip, asr #2
    b530:	68040803 	stmdavs	r4, {r0, r1, fp}
    b534:	03000001 	movweq	r0, #1
    b538:	01790404 	cmneq	r9, r4, lsl #8
    b53c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    b540:	00016304 	andeq	r6, r1, r4, lsl #6
    b544:	02080500 	andeq	r0, r8, #0, 10
    b548:	00bd010f 	adcseq	r0, sp, pc, lsl #2
    b54c:	6c060000 	stcvs	0, cr0, [r6], {-0}
    b550:	02007773 	andeq	r7, r0, #30146560	; 0x1cc0000
    b554:	00560111 	subseq	r0, r6, r1, lsl r1
    b558:	06000000 	streq	r0, [r0], -r0
    b55c:	0077736d 	rsbseq	r7, r7, sp, ror #6
    b560:	56011202 	strpl	r1, [r1], -r2, lsl #4
    b564:	04000000 	streq	r0, [r0], #-0
    b568:	02080700 	andeq	r0, r8, #0, 14
    b56c:	00df010c 	sbcseq	r0, pc, ip, lsl #2
    b570:	fa080000 	blx	20b578 <_Min_Stack_Size+0x20b178>
    b574:	02000055 	andeq	r0, r0, #85	; 0x55
    b578:	0084010e 	addeq	r0, r4, lr, lsl #2
    b57c:	55080000 	strpl	r0, [r8, #-0]
    b580:	0200004f 	andeq	r0, r0, #79	; 0x4f
    b584:	00990113 	addseq	r0, r9, r3, lsl r1
    b588:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b58c:	00004f2a 	andeq	r4, r0, sl, lsr #30
    b590:	bd011402 	cfstrslt	mvf1, [r1, #-8]
    b594:	0a000000 	beq	b59c <_Min_Stack_Size+0xb19c>
    b598:	00004f4b 	andeq	r4, r0, fp, asr #30
    b59c:	00847404 	addeq	r7, r4, r4, lsl #8
    b5a0:	b0780000 	rsbslt	r0, r8, r0
    b5a4:	00060800 	andeq	r0, r6, r0, lsl #16
    b5a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    b5ac:	0100780b 	tsteq	r0, fp, lsl #16
    b5b0:	0000843d 	andeq	r8, r0, sp, lsr r4
    b5b4:	93500600 	cmpls	r0, #0, 12
    b5b8:	04935104 	ldreq	r5, [r3], #260	; 0x104
    b5bc:	0050bf0c 	subseq	fp, r0, ip, lsl #30
    b5c0:	56430100 	strbpl	r0, [r3], -r0, lsl #2
    b5c4:	0d000000 	stceq	0, cr0, [r0, #-0]
    b5c8:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
    b5cc:	00000004 	andeq	r0, r0, r4
    b5d0:	0050ba0e 	subseq	fp, r0, lr, lsl #20
    b5d4:	df450100 	svcle	0x00450100
    b5d8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    b5dc:	00000002 	andeq	r0, r0, r2
    b5e0:	025c0000 	subseq	r0, ip, #0
    b5e4:	00040000 	andeq	r0, r4, r0
    b5e8:	00002153 	andeq	r2, r0, r3, asr r1
    b5ec:	4f5b0104 	svcmi	0x005b0104
    b5f0:	21010000 	mrscs	r0, (UNDEF: 1)
    b5f4:	56000051 			; <UNDEFINED> instruction: 0x56000051
    b5f8:	38000050 	stmdacc	r0, {r4, r6}
    b5fc:	0000000d 	andeq	r0, r0, sp
    b600:	db000000 	blle	b608 <_Min_Stack_Size+0xb208>
    b604:	02000050 	andeq	r0, r0, #80	; 0x50
    b608:	01680408 	cmneq	r8, r8, lsl #8
    b60c:	04030000 	streq	r0, [r3], #-0
    b610:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    b614:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b618:	0000012b 	andeq	r0, r0, fp, lsr #2
    b61c:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    b620:	02000001 	andeq	r0, r0, #1
    b624:	01430801 	cmpeq	r3, r1, lsl #16
    b628:	02020000 	andeq	r0, r2, #0
    b62c:	00017f05 	andeq	r7, r1, r5, lsl #30
    b630:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b634:	0000000e 	andeq	r0, r0, lr
    b638:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    b63c:	02000000 	andeq	r0, r0, #0
    b640:	01260704 	teqeq	r6, r4, lsl #14
    b644:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b648:	00000005 	andeq	r0, r0, r5
    b64c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b650:	00000121 	andeq	r0, r0, r1, lsr #2
    b654:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    b658:	04000001 	streq	r0, [r0], #-1
    b65c:	00007f04 	andeq	r7, r0, r4, lsl #30
    b660:	08010200 	stmdaeq	r1, {r9}
    b664:	0000014c 	andeq	r0, r0, ip, asr #2
    b668:	008c0404 	addeq	r0, ip, r4, lsl #8
    b66c:	7f050000 	svcvc	0x00050000
    b670:	02000000 	andeq	r0, r0, #0
    b674:	01790404 	cmneq	r9, r4, lsl #8
    b678:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b67c:	00016304 	andeq	r6, r1, r4, lsl #6
    b680:	518a0600 	orrpl	r0, sl, r0, lsl #12
    b684:	02280000 	eoreq	r0, r8, #0
    b688:	00fb0207 	rscseq	r0, fp, r7, lsl #4
    b68c:	3c070000 	stccc	0, cr0, [r7], {-0}
    b690:	0200004f 	andeq	r0, r0, #79	; 0x4f
    b694:	002c020a 	eoreq	r0, ip, sl, lsl #4
    b698:	07000000 	streq	r0, [r0, -r0]
    b69c:	000051a5 	andeq	r5, r0, r5, lsr #3
    b6a0:	79020b02 	stmdbvc	r2, {r1, r8, r9, fp}
    b6a4:	04000000 	streq	r0, [r0], #-0
    b6a8:	00511007 	subseq	r1, r1, r7
    b6ac:	020c0200 	andeq	r0, ip, #0, 4
    b6b0:	00000025 	andeq	r0, r0, r5, lsr #32
    b6b4:	51150708 	tstpl	r5, r8, lsl #14
    b6b8:	0d020000 	stceq	0, cr0, [r2, #-0]
    b6bc:	00002502 	andeq	r2, r0, r2, lsl #10
    b6c0:	1a071000 	bne	1cf6c8 <_Min_Stack_Size+0x1cf2c8>
    b6c4:	02000051 	andeq	r0, r0, #81	; 0x51
    b6c8:	0025020e 	eoreq	r0, r5, lr, lsl #4
    b6cc:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    b6d0:	00727265 	rsbseq	r7, r2, r5, ror #4
    b6d4:	2c020f02 	stccs	15, cr0, [r2], {2}
    b6d8:	20000000 	andcs	r0, r0, r0
    b6dc:	51940900 	orrspl	r0, r4, r0, lsl #18
    b6e0:	02010000 	andeq	r0, r1, #0
    b6e4:	01210247 	teqeq	r1, r7, asr #4
    b6e8:	500a0000 	andpl	r0, sl, r0
    b6ec:	7f000051 	svcvc	0x00000051
    b6f0:	00517c0a 	subseq	r7, r1, sl, lsl #24
    b6f4:	010a0000 	mrseq	r0, (UNDEF: 10)
    b6f8:	01000051 	qaddeq	r0, r1, r0
    b6fc:	00516d0a 	subseq	r6, r1, sl, lsl #26
    b700:	0b000200 	bleq	bf08 <_Min_Stack_Size+0xbb08>
    b704:	00005168 	andeq	r5, r0, r8, ror #2
    b708:	00257d02 	eoreq	r7, r5, r2, lsl #26
    b70c:	b0800000 	addlt	r0, r0, r0
    b710:	00aa0800 	adceq	r0, sl, r0, lsl #16
    b714:	9c010000 	stcls	0, cr0, [r1], {-0}
    b718:	000001d1 	ldrdeq	r0, [r0], -r1
    b71c:	0100780c 	tsteq	r0, ip, lsl #16
    b720:	00002558 	andeq	r2, r0, r8, asr r5
    b724:	00030f00 	andeq	r0, r3, r0, lsl #30
    b728:	007a0d00 	rsbseq	r0, sl, r0, lsl #26
    b72c:	00256101 	eoreq	r6, r5, r1, lsl #2
    b730:	56060000 	strpl	r0, [r6], -r0
    b734:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    b738:	78650d04 	stmdavc	r5!, {r2, r8, sl, fp}^
    b73c:	62010063 	andvs	r0, r1, #99	; 0x63
    b740:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    b744:	0e409102 	sqteqs	f1, f2
    b748:	0800b096 	stmdaeq	r0, {r1, r2, r4, r7, ip, sp, pc}
    b74c:	000001dd 	ldrdeq	r0, [r0], -sp
    b750:	00000181 	andeq	r0, r0, r1, lsl #3
    b754:	9350060f 	cmpls	r0, #15728640	; 0xf00000
    b758:	04935104 	ldreq	r5, [r3], #260	; 0x104
    b75c:	f503f305 			; <UNDEFINED> instruction: 0xf503f305
    b760:	10002500 	andne	r2, r0, r0, lsl #10
    b764:	0800b0aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, sp, pc}
    b768:	000001f2 	strdeq	r0, [r0], -r2
    b76c:	00b0be10 	adcseq	fp, r0, r0, lsl lr
    b770:	00020708 	andeq	r0, r2, r8, lsl #14
    b774:	b0f40e00 	rscslt	r0, r4, r0, lsl #28
    b778:	021c0800 	andseq	r0, ip, #0, 16
    b77c:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    b780:	010f0000 	mrseq	r0, CPSR
    b784:	5c030550 	cfstr32pl	mvfx0, [r3], {80}	; 0x50
    b788:	000800f2 	strdeq	r0, [r8], -r2
    b78c:	00b1060e 	adcseq	r0, r1, lr, lsl #12
    b790:	00023208 	andeq	r3, r2, r8, lsl #4
    b794:	0001be00 	andeq	fp, r1, r0, lsl #28
    b798:	50010f00 	andpl	r0, r1, r0, lsl #30
    b79c:	00007d02 	andeq	r7, r0, r2, lsl #26
    b7a0:	00b11a10 	adcseq	r1, r1, r0, lsl sl
    b7a4:	00024e08 	andeq	r4, r2, r8, lsl #28
    b7a8:	b1241000 	teqlt	r4, r0
    b7ac:	024e0800 	subeq	r0, lr, #0, 16
    b7b0:	11000000 	mrsne	r0, (UNDEF: 0)
    b7b4:	000051aa 	andeq	r5, r0, sl, lsr #3
    b7b8:	fb025202 	blx	9ffca <_Min_Stack_Size+0x9fbca>
    b7bc:	12000000 	andne	r0, r0, #0
    b7c0:	0000515e 	andeq	r5, r0, lr, asr r1
    b7c4:	00259b03 	eoreq	r9, r5, r3, lsl #22
    b7c8:	01f20000 	mvnseq	r0, r0
    b7cc:	25130000 	ldrcs	r0, [r3, #-0]
    b7d0:	00000000 	andeq	r0, r0, r0
    b7d4:	0050f312 	subseq	pc, r0, r2, lsl r3	; <UNPREDICTABLE>
    b7d8:	2ccb0200 	sfmcs	f0, 2, [fp], {0}
    b7dc:	07000000 	streq	r0, [r0, -r0]
    b7e0:	13000002 	movwne	r0, #2
    b7e4:	00000025 	andeq	r0, r0, r5, lsr #32
    b7e8:	4f4b1200 	svcmi	0x004b1200
    b7ec:	74020000 	strvc	r0, [r2], #-0
    b7f0:	00000025 	andeq	r0, r0, r5, lsr #32
    b7f4:	0000021c 	andeq	r0, r0, ip, lsl r2
    b7f8:	00002513 	andeq	r2, r0, r3, lsl r5
    b7fc:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    b800:	02006e61 	andeq	r6, r0, #1552	; 0x610
    b804:	00250103 	eoreq	r0, r5, r3, lsl #2
    b808:	02320000 	eorseq	r0, r2, #0
    b80c:	86130000 	ldrhi	r0, [r3], -r0
    b810:	00000000 	andeq	r0, r0, r0
    b814:	0051c215 	subseq	ip, r1, r5, lsl r2
    b818:	02150200 	andseq	r0, r5, #0, 4
    b81c:	0000002c 	andeq	r0, r0, ip, lsr #32
    b820:	00000248 	andeq	r0, r0, r8, asr #4
    b824:	00024813 	andeq	r4, r2, r3, lsl r8
    b828:	04040000 	streq	r0, [r4], #-0
    b82c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    b830:	0051ba16 	subseq	fp, r1, r6, lsl sl
    b834:	590f0400 	stmdbpl	pc, {sl}	; <UNPREDICTABLE>
    b838:	04000002 	streq	r0, [r0], #-2
    b83c:	00002c04 	andeq	r2, r0, r4, lsl #24
    b840:	02e00000 	rsceq	r0, r0, #0
    b844:	00040000 	andeq	r0, r4, r0
    b848:	0000229a 	muleq	r0, sl, r2
    b84c:	4f5b0104 	svcmi	0x005b0104
    b850:	e4010000 	str	r0, [r1], #-0
    b854:	56000051 			; <UNDEFINED> instruction: 0x56000051
    b858:	48000050 	stmdami	r0, {r4, r6}
    b85c:	0000000d 	andeq	r0, r0, sp
    b860:	41000000 	mrsmi	r0, (UNDEF: 0)
    b864:	02000052 	andeq	r0, r0, #82	; 0x52
    b868:	01680408 	cmneq	r8, r8, lsl #8
    b86c:	04030000 	streq	r0, [r3], #-0
    b870:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    b874:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b878:	0000012b 	andeq	r0, r0, fp, lsr #2
    b87c:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    b880:	02000001 	andeq	r0, r0, #1
    b884:	01430801 	cmpeq	r3, r1, lsl #16
    b888:	02020000 	andeq	r0, r2, #0
    b88c:	00017f05 	andeq	r7, r1, r5, lsl #30
    b890:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b894:	0000000e 	andeq	r0, r0, lr
    b898:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    b89c:	02000000 	andeq	r0, r0, #0
    b8a0:	01260704 	teqeq	r6, r4, lsl #14
    b8a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b8a8:	00000005 	andeq	r0, r0, r5
    b8ac:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b8b0:	00000121 	andeq	r0, r0, r1, lsr #2
    b8b4:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    b8b8:	04000001 	streq	r0, [r0], #-1
    b8bc:	00007f04 	andeq	r7, r0, r4, lsl #30
    b8c0:	08010200 	stmdaeq	r1, {r9}
    b8c4:	0000014c 	andeq	r0, r0, ip, asr #2
    b8c8:	79040402 	stmdbvc	r4, {r1, sl}
    b8cc:	02000001 	andeq	r0, r0, #1
    b8d0:	01630408 	cmneq	r3, r8, lsl #8
    b8d4:	8a050000 	bhi	14b8dc <_Min_Stack_Size+0x14b4dc>
    b8d8:	28000051 	stmdacs	r0, {r0, r4, r6}
    b8dc:	f0020702 			; <UNDEFINED> instruction: 0xf0020702
    b8e0:	06000000 	streq	r0, [r0], -r0
    b8e4:	00004f3c 	andeq	r4, r0, ip, lsr pc
    b8e8:	2c020a02 	stccs	10, cr0, [r2], {2}
    b8ec:	00000000 	andeq	r0, r0, r0
    b8f0:	0051a506 	subseq	sl, r1, r6, lsl #10
    b8f4:	020b0200 	andeq	r0, fp, #0, 4
    b8f8:	00000079 	andeq	r0, r0, r9, ror r0
    b8fc:	51100604 	tstpl	r0, r4, lsl #12
    b900:	0c020000 	stceq	0, cr0, [r2], {-0}
    b904:	00002502 	andeq	r2, r0, r2, lsl #10
    b908:	15060800 	strne	r0, [r6, #-2048]	; 0x800
    b90c:	02000051 	andeq	r0, r0, #81	; 0x51
    b910:	0025020d 	eoreq	r0, r5, sp, lsl #4
    b914:	06100000 	ldreq	r0, [r0], -r0
    b918:	0000511a 	andeq	r5, r0, sl, lsl r1
    b91c:	25020e02 	strcs	r0, [r2, #-3586]	; 0xe02
    b920:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    b924:	72726507 	rsbsvc	r6, r2, #29360128	; 0x1c00000
    b928:	020f0200 	andeq	r0, pc, #0, 4
    b92c:	0000002c 	andeq	r0, r0, ip, lsr #32
    b930:	94080020 	strls	r0, [r8], #-32
    b934:	01000051 	qaddeq	r0, r1, r0
    b938:	16024702 	strne	r4, [r2], -r2, lsl #14
    b93c:	09000001 	stmdbeq	r0, {r0}
    b940:	00005150 	andeq	r5, r0, r0, asr r1
    b944:	517c097f 	cmnpl	ip, pc, ror r9
    b948:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b94c:	00005101 	andeq	r5, r0, r1, lsl #2
    b950:	516d0901 	cmnpl	sp, r1, lsl #18
    b954:	00020000 	andeq	r0, r2, r0
    b958:	776f700a 	strbvc	r7, [pc, -sl]!
    b95c:	25850200 	strcs	r0, [r5, #512]	; 0x200
    b960:	2c000000 	stccs	0, cr0, [r0], {-0}
    b964:	320800b1 	andcc	r0, r8, #177	; 0xb1
    b968:	01000003 	tsteq	r0, r3
    b96c:	0002539c 	muleq	r2, ip, r3
    b970:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    b974:	00254401 	eoreq	r4, r5, r1, lsl #8
    b978:	03370000 	teqeq	r7, #0
    b97c:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
    b980:	25440100 	strbcs	r0, [r4, #-256]	; 0x100
    b984:	5f000000 	svcpl	0x00000000
    b988:	0c000003 	stceq	0, cr0, [r0], {3}
    b98c:	4d01007a 	stcmi	0, cr0, [r1, #-488]	; 0xfffffe18
    b990:	00000025 	andeq	r0, r0, r5, lsr #32
    b994:	00000415 	andeq	r0, r0, r5, lsl r4
    b998:	6378650d 	cmnvs	r8, #54525952	; 0x3400000
    b99c:	94540100 	ldrbls	r0, [r4], #-256	; 0x100
    b9a0:	03000000 	movweq	r0, #0
    b9a4:	0e7fb091 	mrceq	0, 3, fp, cr15, cr1, {4}
    b9a8:	0800b146 	stmdaeq	r0, {r1, r2, r6, r8, ip, sp, pc}
    b9ac:	0000025f 	andeq	r0, r0, pc, asr r2
    b9b0:	0000018f 	andeq	r0, r0, pc, lsl #3
    b9b4:	9352060f 	cmpls	r2, #15728640	; 0xf00000
    b9b8:	04935304 	ldreq	r5, [r3], #772	; 0x304
    b9bc:	f503f305 			; <UNDEFINED> instruction: 0xf503f305
    b9c0:	060f2502 	streq	r2, [pc], -r2, lsl #10
    b9c4:	51049350 	tstpl	r4, r0, asr r3
    b9c8:	f3050493 	vqshl.u8	d0, d3, d21
    b9cc:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    b9d0:	b15a1000 	cmplt	sl, r0
    b9d4:	02790800 	rsbseq	r0, r9, #0, 16
    b9d8:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    b9dc:	790800b1 	stmdbvc	r8, {r0, r4, r5, r7}
    b9e0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b9e4:	0800b222 	stmdaeq	r0, {r1, r5, r9, ip, sp, pc}
    b9e8:	0000028e 	andeq	r0, r0, lr, lsl #5
    b9ec:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    b9f0:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
    b9f4:	1000007d 	andne	r0, r0, sp, ror r0
    b9f8:	0800b230 	stmdaeq	r0, {r4, r5, r9, ip, sp, pc}
    b9fc:	000002aa 	andeq	r0, r0, sl, lsr #5
    ba00:	00b23e10 	adcseq	r3, r2, r0, lsl lr
    ba04:	0002bb08 	andeq	fp, r2, r8, lsl #22
    ba08:	b25c1000 	subslt	r1, ip, #0
    ba0c:	02bb0800 	adcseq	r0, fp, #0, 16
    ba10:	6a100000 	bvs	40ba18 <_Min_Stack_Size+0x40b618>
    ba14:	bb0800b2 	bllt	20bce4 <_Min_Stack_Size+0x20b8e4>
    ba18:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    ba1c:	0800b2a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip, sp, pc}
    ba20:	0000028e 	andeq	r0, r0, lr, lsl #5
    ba24:	000001ed 	andeq	r0, r0, sp, ror #3
    ba28:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
    ba2c:	1000007d 	andne	r0, r0, sp, ror r0
    ba30:	0800b2bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp, pc}
    ba34:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    ba38:	00b30a10 	adcseq	r0, r3, r0, lsl sl
    ba3c:	0002aa08 	andeq	sl, r2, r8, lsl #20
    ba40:	b3141000 	tstlt	r4, #0
    ba44:	02aa0800 	adceq	r0, sl, #0, 16
    ba48:	22100000 	andscs	r0, r0, #0
    ba4c:	bb0800b3 	bllt	20bd20 <_Min_Stack_Size+0x20b920>
    ba50:	10000002 	andne	r0, r0, r2
    ba54:	0800b32e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, ip, sp, pc}
    ba58:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    ba5c:	00b33a10 	adcseq	r3, r3, r0, lsl sl
    ba60:	00027908 	andeq	r7, r2, r8, lsl #18
    ba64:	b36a0e00 	cmnlt	sl, #0, 28
    ba68:	028e0800 	addeq	r0, lr, #0, 16
    ba6c:	02370000 	eorseq	r0, r7, #0
    ba70:	010f0000 	mrseq	r0, CPSR
    ba74:	007d0250 	rsbseq	r0, sp, r0, asr r2
    ba78:	b3be1000 			; <UNDEFINED> instruction: 0xb3be1000
    ba7c:	02aa0800 	adceq	r0, sl, #0, 16
    ba80:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    ba84:	d10800b4 	strhle	r0, [r8, -r4]
    ba88:	10000002 	andne	r0, r0, r2
    ba8c:	0800b440 	stmdaeq	r0, {r6, sl, ip, sp, pc}
    ba90:	000002d1 	ldrdeq	r0, [r0], -r1
    ba94:	51aa1100 			; <UNDEFINED> instruction: 0x51aa1100
    ba98:	52020000 	andpl	r0, r2, #0
    ba9c:	0000f002 	andeq	pc, r0, r2
    baa0:	51cf1200 	bicpl	r1, pc, r0, lsl #4
    baa4:	a0030000 	andge	r0, r3, r0
    baa8:	00000025 	andeq	r0, r0, r5, lsr #32
    baac:	00000279 	andeq	r0, r0, r9, ror r2
    bab0:	00002513 	andeq	r2, r0, r3, lsl r5
    bab4:	00251300 	eoreq	r1, r5, r0, lsl #6
    bab8:	12000000 	andne	r0, r0, #0
    babc:	000050f3 	strdeq	r5, [r0], -r3
    bac0:	002ccb02 	eoreq	ip, ip, r2, lsl #22
    bac4:	028e0000 	addeq	r0, lr, #0
    bac8:	25130000 	ldrcs	r0, [r3, #-0]
    bacc:	00000000 	andeq	r0, r0, r0
    bad0:	0051c214 	subseq	ip, r1, r4, lsl r2
    bad4:	02150200 	andseq	r0, r5, #0, 4
    bad8:	0000002c 	andeq	r0, r0, ip, lsr #32
    badc:	000002a4 	andeq	r0, r0, r4, lsr #5
    bae0:	0002a413 	andeq	sl, r2, r3, lsl r4
    bae4:	04040000 	streq	r0, [r4], #-0
    bae8:	00000094 	muleq	r0, r4, r0
    baec:	0051ba15 	subseq	fp, r1, r5, lsl sl
    baf0:	b50f0400 	strlt	r0, [pc, #-1024]	; b6f8 <_Min_Stack_Size+0xb2f8>
    baf4:	04000002 	streq	r0, [r0], #-2
    baf8:	00002c04 	andeq	r2, r0, r4, lsl #24
    bafc:	51dd1400 	bicspl	r1, sp, r0, lsl #8
    bb00:	04020000 	streq	r0, [r2], #-0
    bb04:	00002c01 	andeq	r2, r0, r1, lsl #24
    bb08:	0002d100 	andeq	sp, r2, r0, lsl #2
    bb0c:	00251300 	eoreq	r1, r5, r0, lsl #6
    bb10:	16000000 	strne	r0, [r0], -r0
    bb14:	000051ca 	andeq	r5, r0, sl, asr #3
    bb18:	25010c02 	strcs	r0, [r1, #-3074]	; 0xc02
    bb1c:	13000000 	movwne	r0, #0
    bb20:	00000025 	andeq	r0, r0, r5, lsr #32
    bb24:	03440000 	movteq	r0, #16384	; 0x4000
    bb28:	00040000 	andeq	r0, r4, r0
    bb2c:	000023e7 	andeq	r2, r0, r7, ror #7
    bb30:	4f5b0104 	svcmi	0x005b0104
    bb34:	36010000 	strcc	r0, [r1], -r0
    bb38:	56000052 			; <UNDEFINED> instruction: 0x56000052
    bb3c:	88000050 	stmdahi	r0, {r4, r6}
    bb40:	0000000d 	andeq	r0, r0, sp
    bb44:	4f000000 	svcmi	0x00000000
    bb48:	02000054 	andeq	r0, r0, #84	; 0x54
    bb4c:	01680408 	cmneq	r8, r8, lsl #8
    bb50:	04030000 	streq	r0, [r3], #-0
    bb54:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    bb58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bb5c:	0000012b 	andeq	r0, r0, fp, lsr #2
    bb60:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    bb64:	02000001 	andeq	r0, r0, #1
    bb68:	01430801 	cmpeq	r3, r1, lsl #16
    bb6c:	02020000 	andeq	r0, r2, #0
    bb70:	00017f05 	andeq	r7, r1, r5, lsl #30
    bb74:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bb78:	0000000e 	andeq	r0, r0, lr
    bb7c:	00016f04 	andeq	r6, r1, r4, lsl #30
    bb80:	613f0200 	teqvs	pc, r0, lsl #4
    bb84:	02000000 	andeq	r0, r0, #0
    bb88:	00050504 	andeq	r0, r5, r4, lsl #10
    bb8c:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    bb90:	02000004 	andeq	r0, r0, #4
    bb94:	00007341 	andeq	r7, r0, r1, asr #6
    bb98:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bb9c:	00000126 	andeq	r0, r0, r6, lsr #2
    bba0:	00050802 	andeq	r0, r5, r2, lsl #16
    bba4:	02000000 	andeq	r0, r0, #0
    bba8:	01210708 	teqeq	r1, r8, lsl #14
    bbac:	04020000 	streq	r0, [r2], #-0
    bbb0:	00019207 	andeq	r9, r1, r7, lsl #4
    bbb4:	08010200 	stmdaeq	r1, {r9}
    bbb8:	0000014c 	andeq	r0, r0, ip, asr #2
    bbbc:	79040402 	stmdbvc	r4, {r1, sl}
    bbc0:	02000001 	andeq	r0, r0, #1
    bbc4:	01630408 	cmneq	r3, r8, lsl #8
    bbc8:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    bbcc:	c8010f03 	stmdagt	r1, {r0, r1, r8, r9, sl, fp}
    bbd0:	06000000 	streq	r0, [r0], -r0
    bbd4:	0077736c 	rsbseq	r7, r7, ip, ror #6
    bbd8:	68011103 	stmdavs	r1, {r0, r1, r8, ip}
    bbdc:	00000000 	andeq	r0, r0, r0
    bbe0:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    bbe4:	01120300 	tsteq	r2, r0, lsl #6
    bbe8:	00000068 	andeq	r0, r0, r8, rrx
    bbec:	08070004 	stmdaeq	r7, {r2}
    bbf0:	ea010c03 	b	4ec04 <_Min_Stack_Size+0x4e804>
    bbf4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bbf8:	000055fa 	strdeq	r5, [r0], -sl
    bbfc:	25010e03 	strcs	r0, [r1, #-3587]	; 0xe03
    bc00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bc04:	00004f55 	andeq	r4, r0, r5, asr pc
    bc08:	a4011303 	strge	r1, [r1], #-771	; 0x303
    bc0c:	00000000 	andeq	r0, r0, r0
    bc10:	004f2a09 	subeq	r2, pc, r9, lsl #20
    bc14:	01140300 	tsteq	r4, r0, lsl #6
    bc18:	000000c8 	andeq	r0, r0, r8, asr #1
    bc1c:	00515e0a 	subseq	r5, r1, sl, lsl #28
    bc20:	25480100 	strbcs	r0, [r8, #-256]	; 0x100
    bc24:	60000000 	andvs	r0, r0, r0
    bc28:	280800b4 	stmdacs	r8, {r2, r4, r5, r7}
    bc2c:	01000004 	tsteq	r0, r4
    bc30:	0001f09c 	muleq	r1, ip, r0
    bc34:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    bc38:	00254801 	eoreq	r4, r5, r1, lsl #16
    bc3c:	048d0000 	streq	r0, [sp], #0
    bc40:	740c0000 	strvc	r0, [ip], #-0
    bc44:	254e0100 	strbcs	r0, [lr, #-256]	; 0x100
    bc48:	15000000 	strne	r0, [r0, #-0]
    bc4c:	0c000005 	stceq	0, cr0, [r0], {5}
    bc50:	4e010077 	mcrmi	0, 0, r0, cr1, cr7, {3}
    bc54:	00000025 	andeq	r0, r0, r5, lsr #32
    bc58:	0000056d 	andeq	r0, r0, sp, ror #10
    bc5c:	0100700c 	tsteq	r0, ip
    bc60:	0000254e 	andeq	r2, r0, lr, asr #10
    bc64:	00067b00 	andeq	r7, r6, r0, lsl #22
    bc68:	00710c00 	rsbseq	r0, r1, r0, lsl #24
    bc6c:	00254e01 	eoreq	r4, r5, r1, lsl #28
    bc70:	075b0000 	ldrbeq	r0, [fp, -r0]
    bc74:	630c0000 	movwvs	r0, #49152	; 0xc000
    bc78:	254e0100 	strbcs	r0, [lr, #-256]	; 0x100
    bc7c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    bc80:	0c000007 	stceq	0, cr0, [r0], {7}
    bc84:	4e010072 	mcrmi	0, 0, r0, cr1, cr2, {3}
    bc88:	00000025 	andeq	r0, r0, r5, lsr #32
    bc8c:	00000827 	andeq	r0, r0, r7, lsr #16
    bc90:	0100730c 	tsteq	r0, ip, lsl #6
    bc94:	0000254e 	andeq	r2, r0, lr, asr #10
    bc98:	00084500 	andeq	r4, r8, r0, lsl #10
    bc9c:	78680c00 	stmdavc	r8!, {sl, fp}^
    bca0:	564f0100 	strbpl	r0, [pc], -r0, lsl #2
    bca4:	a1000000 	mrsge	r0, (UNDEF: 0)
    bca8:	0c000008 	stceq	0, cr0, [r0], {8}
    bcac:	01007869 	tsteq	r0, r9, ror #16
    bcb0:	0000564f 	andeq	r5, r0, pc, asr #12
    bcb4:	0008b400 	andeq	fp, r8, r0, lsl #8
    bcb8:	b4780d00 	ldrbtlt	r0, [r8], #-3328	; 0xd00
    bcbc:	00020800 	andeq	r0, r2, r0, lsl #16
    bcc0:	01b00000 	movseq	r0, r0
    bcc4:	500e0000 	andpl	r0, lr, r0
    bcc8:	0100004f 	tsteq	r0, pc, asr #32
    bccc:	0000ea50 	andeq	lr, r0, r0, asr sl
    bcd0:	00095e00 	andeq	r5, r9, r0, lsl #28
    bcd4:	580f0000 	stmdapl	pc, {}	; <UNPREDICTABLE>
    bcd8:	c400000d 	strgt	r0, [r0], #-13
    bcdc:	10000001 	andne	r0, r0, r1
    bce0:	0100786c 	tsteq	r0, ip, ror #16
    bce4:	00006853 	andeq	r6, r0, r3, asr r8
    bce8:	700f0000 	andvc	r0, pc, r0
    bcec:	dd00000d 	stcle	0, cr0, [r0, #-52]	; 0xffffffcc
    bcf0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    bcf4:	00005212 	andeq	r5, r0, r2, lsl r2
    bcf8:	00ea6f01 	rsceq	r6, sl, r1, lsl #30
    bcfc:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    bd00:	11000000 	mrsne	r0, (UNDEF: 0)
    bd04:	0800b4e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, sp, pc}
    bd08:	00000321 	andeq	r0, r0, r1, lsr #6
    bd0c:	00b5c411 	adcseq	ip, r5, r1, lsl r4
    bd10:	00033608 	andeq	r3, r3, r8, lsl #12
    bd14:	6f120000 	svcvs	0x00120000
    bd18:	0100656e 	tsteq	r0, lr, ror #10
    bd1c:	00020436 	andeq	r0, r2, r6, lsr r4
    bd20:	00000800 	andeq	r0, r0, r0, lsl #16
    bd24:	00000000 	andeq	r0, r0, r0
    bd28:	25133ff0 	ldrcs	r3, [r3, #-4080]	; 0xff0
    bd2c:	14000000 	strne	r0, [r0], #-0
    bd30:	00004f41 	andeq	r4, r0, r1, asr #30
    bd34:	02043701 	andeq	r3, r4, #262144	; 0x40000
    bd38:	9c080000 	stcls	0, cr0, [r8], {-0}
    bd3c:	3c880075 	stccc	0, cr0, [r8], {117}	; 0x75
    bd40:	147e37e4 	ldrbtne	r3, [lr], #-2020	; 0x7e4
    bd44:	00005217 	andeq	r5, r0, r7, lsl r2
    bd48:	02043801 	andeq	r3, r4, #65536	; 0x10000
    bd4c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    bd50:	fb54442d 	blx	151ce0e <_Min_Stack_Size+0x151ca0e>
    bd54:	143ff921 	ldrtne	pc, [pc], #-2337	; bd5c <_Min_Stack_Size+0xb95c>	; <UNPREDICTABLE>
    bd58:	0000522e 	andeq	r5, r0, lr, lsr #4
    bd5c:	02043901 	andeq	r3, r4, #16384	; 0x4000
    bd60:	07080000 	streq	r0, [r8, -r0]
    bd64:	2633145c 			; <UNDEFINED> instruction: 0x2633145c
    bd68:	143c91a6 	ldrtne	r9, [ip], #-422	; 0x1a6
    bd6c:	00005265 	andeq	r5, r0, r5, ror #4
    bd70:	02043a01 	andeq	r3, r4, #4096	; 0x1000
    bd74:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    bd78:	fb54442d 	blx	151ce36 <_Min_Stack_Size+0x151ca36>
    bd7c:	123fe921 	eorsne	lr, pc, #540672	; 0x84000
    bd80:	00305370 	eorseq	r5, r0, r0, ror r3
    bd84:	02043c01 	andeq	r3, r4, #256	; 0x100
    bd88:	55080000 	strpl	r0, [r8, #-0]
    bd8c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
    bd90:	123fc555 	eorsne	ip, pc, #356515840	; 0x15400000
    bd94:	00315370 	eorseq	r5, r1, r0, ror r3
    bd98:	02043d01 	andeq	r3, r4, #1, 26	; 0x40
    bd9c:	7d080000 	stcvc	0, cr0, [r8, #-0]
    bda0:	1203eb6f 	andne	lr, r3, #113664	; 0x1bc00
    bda4:	12bfd4d6 	adcsne	sp, pc, #-704643072	; 0xd6000000
    bda8:	00325370 	eorseq	r5, r2, r0, ror r3
    bdac:	02043e01 	andeq	r3, r4, #1, 28
    bdb0:	55080000 	strpl	r0, [r8, #-0]
    bdb4:	550e8844 	strpl	r8, [lr, #-2116]	; 0x844
    bdb8:	123fc9c1 	eorsne	ip, pc, #3162112	; 0x304000
    bdbc:	00335370 	eorseq	r5, r3, r0, ror r3
    bdc0:	02043f01 	andeq	r3, r4, #1, 30
    bdc4:	3b080000 	blcc	20bdcc <_Min_Stack_Size+0x20b9cc>
    bdc8:	28b5688f 	ldmcs	r5!, {r0, r1, r2, r3, r7, fp, sp, lr}
    bdcc:	12bfa482 	adcsne	sl, pc, #-2113929216	; 0x82000000
    bdd0:	00345370 	eorseq	r5, r4, r0, ror r3
    bdd4:	02044001 	andeq	r4, r4, #1
    bdd8:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    bddc:	e07501b2 	ldrht	r0, [r5], #-18	; 0xffffffee
    bde0:	123f49ef 	eorsne	r4, pc, #3915776	; 0x3bc000
    bde4:	00355370 	eorseq	r5, r5, r0, ror r3
    bde8:	02044101 	andeq	r4, r4, #1073741824	; 0x40000000
    bdec:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    bdf0:	e10dfdf7 	strd	pc, [sp, -r7]
    bdf4:	123f023d 	eorsne	r0, pc, #-805306365	; 0xd0000003
    bdf8:	00315371 	eorseq	r5, r1, r1, ror r3
    bdfc:	02044201 	andeq	r4, r4, #268435456	; 0x10000000
    be00:	4b080000 	blmi	20be08 <_Min_Stack_Size+0x20ba08>
    be04:	271c8a2d 	ldrcs	r8, [ip, -sp, lsr #20]
    be08:	12c0033a 	sbcne	r0, r0, #-402653184	; 0xe8000000
    be0c:	00325371 	eorseq	r5, r2, r1, ror r3
    be10:	02044301 	andeq	r4, r4, #67108864	; 0x4000000
    be14:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    be18:	e59c598a 	ldr	r5, [ip, #2442]	; 0x98a
    be1c:	1240002a 	subne	r0, r0, #42	; 0x2a
    be20:	00335371 	eorseq	r5, r3, r1, ror r3
    be24:	02044401 	andeq	r4, r4, #16777216	; 0x1000000
    be28:	59080000 	stmdbpl	r8, {}	; <UNPREDICTABLE>
    be2c:	6c1b8d01 	ldcvs	13, cr8, [fp], {1}
    be30:	12bfe606 	adcsne	lr, pc, #6291456	; 0x600000
    be34:	00345371 	eorseq	r5, r4, r1, ror r3
    be38:	02044501 	andeq	r4, r4, #4194304	; 0x400000
    be3c:	82080000 	andhi	r0, r8, #0
    be40:	c5b12e92 	ldrgt	r2, [r1, #3730]!	; 0xe92
    be44:	153fb3b8 	ldrne	fp, [pc, #-952]!	; ba94 <_Min_Stack_Size+0xb694>
    be48:	00004f4b 	andeq	r4, r0, fp, asr #30
    be4c:	00257404 	eoreq	r7, r5, r4, lsl #8
    be50:	03360000 	teqeq	r6, #0
    be54:	25160000 	ldrcs	r0, [r6, #-0]
    be58:	00000000 	andeq	r0, r0, r0
    be5c:	00521f17 	subseq	r1, r2, r7, lsl pc
    be60:	25960300 	ldrcs	r0, [r6, #768]	; 0x300
    be64:	16000000 	strne	r0, [r0], -r0
    be68:	00000025 	andeq	r0, r0, r5, lsr #32
    be6c:	07700000 	ldrbeq	r0, [r0, -r0]!
    be70:	00040000 	andeq	r0, r4, r0
    be74:	0000252a 	andeq	r2, r0, sl, lsr #10
    be78:	4f5b0104 	svcmi	0x005b0104
    be7c:	b6010000 	strlt	r0, [r1], -r0
    be80:	56000052 			; <UNDEFINED> instruction: 0x56000052
    be84:	80000050 	andhi	r0, r0, r0, asr r0
    be88:	0000000e 	andeq	r0, r0, lr
    be8c:	eb000000 	bl	be94 <_Min_Stack_Size+0xba94>
    be90:	02000055 	andeq	r0, r0, #85	; 0x55
    be94:	01680408 	cmneq	r8, r8, lsl #8
    be98:	04030000 	streq	r0, [r3], #-0
    be9c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    bea0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bea4:	0000012b 	andeq	r0, r0, fp, lsr #2
    bea8:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    beac:	02000001 	andeq	r0, r0, #1
    beb0:	01430801 	cmpeq	r3, r1, lsl #16
    beb4:	02020000 	andeq	r0, r2, #0
    beb8:	00017f05 	andeq	r7, r1, r5, lsl #30
    bebc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bec0:	0000000e 	andeq	r0, r0, lr
    bec4:	00016f04 	andeq	r6, r1, r4, lsl #30
    bec8:	613f0200 	teqvs	pc, r0, lsl #4
    becc:	02000000 	andeq	r0, r0, #0
    bed0:	00050504 	andeq	r0, r5, r4, lsl #10
    bed4:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    bed8:	02000004 	andeq	r0, r0, #4
    bedc:	00007341 	andeq	r7, r0, r1, asr #6
    bee0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bee4:	00000126 	andeq	r0, r0, r6, lsr #2
    bee8:	00050802 	andeq	r0, r5, r2, lsl #16
    beec:	02000000 	andeq	r0, r0, #0
    bef0:	01210708 	teqeq	r1, r8, lsl #14
    bef4:	04020000 	streq	r0, [r2], #-0
    bef8:	00019207 	andeq	r9, r1, r7, lsl #4
    befc:	08010200 	stmdaeq	r1, {r9}
    bf00:	0000014c 	andeq	r0, r0, ip, asr #2
    bf04:	009c0405 	addseq	r0, ip, r5, lsl #8
    bf08:	8f060000 	svchi	0x00060000
    bf0c:	02000000 	andeq	r0, r0, #0
    bf10:	01790404 	cmneq	r9, r4, lsl #8
    bf14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bf18:	00016304 	andeq	r6, r1, r4, lsl #6
    bf1c:	03080700 	movweq	r0, #34560	; 0x8700
    bf20:	00d3010f 	sbcseq	r0, r3, pc, lsl #2
    bf24:	6c080000 	stcvs	0, cr0, [r8], {-0}
    bf28:	03007773 	movweq	r7, #1907	; 0x773
    bf2c:	00680111 	rsbeq	r0, r8, r1, lsl r1
    bf30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bf34:	0077736d 	rsbseq	r7, r7, sp, ror #6
    bf38:	68011203 	stmdavs	r1, {r0, r1, r9, ip}
    bf3c:	04000000 	streq	r0, [r0], #-0
    bf40:	03080900 	movweq	r0, #35072	; 0x8900
    bf44:	00f5010c 	rscseq	r0, r5, ip, lsl #2
    bf48:	fa0a0000 	blx	28bf50 <_Min_Stack_Size+0x28bb50>
    bf4c:	03000055 	movweq	r0, #85	; 0x55
    bf50:	0025010e 	eoreq	r0, r5, lr, lsl #2
    bf54:	550a0000 	strpl	r0, [sl, #-0]
    bf58:	0300004f 	movweq	r0, #79	; 0x4f
    bf5c:	00af0113 	adceq	r0, pc, r3, lsl r1	; <UNPREDICTABLE>
    bf60:	0b000000 	bleq	bf68 <_Min_Stack_Size+0xbb68>
    bf64:	00004f2a 	andeq	r4, r0, sl, lsr #30
    bf68:	d3011403 	movwle	r1, #5123	; 0x1403
    bf6c:	0c000000 	stceq	0, cr0, [r0], {-0}
    bf70:	000051cf 	andeq	r5, r0, pc, asr #3
    bf74:	00256601 	eoreq	r6, r5, r1, lsl #12
    bf78:	b8880000 	stmlt	r8, {}	; <UNPREDICTABLE>
    bf7c:	0b500800 	bleq	140df84 <_Min_Stack_Size+0x140db84>
    bf80:	9c010000 	stcls	0, cr0, [r1], {-0}
    bf84:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    bf88:	0100780d 	tsteq	r0, sp, lsl #16
    bf8c:	00002566 	andeq	r2, r0, r6, ror #10
    bf90:	00098e00 	andeq	r8, r9, r0, lsl #28
    bf94:	00790d00 	rsbseq	r0, r9, r0, lsl #26
    bf98:	00256601 	eoreq	r6, r5, r1, lsl #12
    bf9c:	09b60000 	ldmibeq	r6!, {}	; <UNPREDICTABLE>
    bfa0:	7a0e0000 	bvc	38bfa8 <_Min_Stack_Size+0x38bba8>
    bfa4:	256c0100 	strbcs	r0, [ip, #-256]!	; 0x100
    bfa8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    bfac:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    bfb0:	01007861 	tsteq	r0, r1, ror #16
    bfb4:	0000256c 	andeq	r2, r0, ip, ror #10
    bfb8:	000ad600 	andeq	sp, sl, r0, lsl #12
    bfbc:	5f7a0e00 	svcpl	0x007a0e00
    bfc0:	6c010068 	stcvs	0, cr0, [r1], {104}	; 0x68
    bfc4:	00000025 	andeq	r0, r0, r5, lsr #32
    bfc8:	00000b7e 	andeq	r0, r0, lr, ror fp
    bfcc:	6c5f7a0e 	mrrcvs	10, 0, r7, pc, cr14	; <UNPREDICTABLE>
    bfd0:	256c0100 	strbcs	r0, [ip, #-256]!	; 0x100
    bfd4:	a3000000 	movwge	r0, #0
    bfd8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    bfdc:	00685f70 	rsbeq	r5, r8, r0, ror pc
    bfe0:	00256c01 	eoreq	r6, r5, r1, lsl #24
    bfe4:	0bbb0000 	bleq	feecbfec <_estack+0xdee9bfec>
    bfe8:	700e0000 	andvc	r0, lr, r0
    bfec:	01006c5f 	tsteq	r0, pc, asr ip
    bff0:	0000256c 	andeq	r2, r0, ip, ror #10
    bff4:	000c2500 	andeq	r2, ip, r0, lsl #10
    bff8:	31790e00 	cmncc	r9, r0, lsl #28
    bffc:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c000:	87000000 	strhi	r0, [r0, -r0]
    c004:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    c008:	01003174 	tsteq	r0, r4, ror r1
    c00c:	0000256d 	andeq	r2, r0, sp, ror #10
    c010:	000ce600 	andeq	lr, ip, r0, lsl #12
    c014:	32740e00 	rsbscc	r0, r4, #0, 28
    c018:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c01c:	bd000000 	stclt	0, cr0, [r0, #-0]
    c020:	0e00000d 	cdpeq	0, 0, cr0, cr0, cr13, {0}
    c024:	6d010072 	stcvs	0, cr0, [r1, #-456]	; 0xfffffe38
    c028:	00000025 	andeq	r0, r0, r5, lsr #32
    c02c:	00000e19 	andeq	r0, r0, r9, lsl lr
    c030:	0100730e 	tsteq	r0, lr, lsl #6
    c034:	0000256d 	andeq	r2, r0, sp, ror #10
    c038:	000e7c00 	andeq	r7, lr, r0, lsl #24
    c03c:	00740e00 	rsbseq	r0, r4, r0, lsl #28
    c040:	00256d01 	eoreq	r6, r5, r1, lsl #26
    c044:	0f0f0000 	svceq	0x000f0000
    c048:	750e0000 	strvc	r0, [lr, #-0]
    c04c:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c050:	7b000000 	blvc	c058 <_Min_Stack_Size+0xbc58>
    c054:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    c058:	6d010076 	stcvs	0, cr0, [r1, #-472]	; 0xfffffe28
    c05c:	00000025 	andeq	r0, r0, r5, lsr #32
    c060:	00000fc3 	andeq	r0, r0, r3, asr #31
    c064:	0100770e 	tsteq	r0, lr, lsl #14
    c068:	0000256d 	andeq	r2, r0, sp, ror #10
    c06c:	00102700 	andseq	r2, r0, r0, lsl #14
    c070:	00690e00 	rsbeq	r0, r9, r0, lsl #28
    c074:	00566e01 	subseq	r6, r6, r1, lsl #28
    c078:	108d0000 	addne	r0, sp, r0
    c07c:	6a0e0000 	bvs	38c084 <_Min_Stack_Size+0x38bc84>
    c080:	566e0100 	strbtpl	r0, [lr], -r0, lsl #2
    c084:	b3000000 	movwlt	r0, #0
    c088:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
    c08c:	6e01006b 	cdpvs	0, 0, cr0, cr1, cr11, {3}
    c090:	00000056 	andeq	r0, r0, r6, asr r0
    c094:	0000116a 	andeq	r1, r0, sl, ror #2
    c098:	0052890f 	subseq	r8, r2, pc, lsl #18
    c09c:	566e0100 	strbtpl	r0, [lr], -r0, lsl #2
    c0a0:	83000000 	movwhi	r0, #0
    c0a4:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    c0a8:	6e01006e 	cdpvs	0, 0, cr0, cr1, cr14, {3}
    c0ac:	00000056 	andeq	r0, r0, r6, asr r0
    c0b0:	00001337 	andeq	r1, r0, r7, lsr r3
    c0b4:	0078680e 	rsbseq	r6, r8, lr, lsl #16
    c0b8:	00566f01 	subseq	r6, r6, r1, lsl #30
    c0bc:	13b30000 			; <UNDEFINED> instruction: 0x13b30000
    c0c0:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    c0c4:	6f010079 	svcvs	0x00010079
    c0c8:	00000056 	andeq	r0, r0, r6, asr r0
    c0cc:	00001455 	andeq	r1, r0, r5, asr r4
    c0d0:	0078690e 	rsbseq	r6, r8, lr, lsl #18
    c0d4:	00566f01 	subseq	r6, r6, r1, lsl #30
    c0d8:	14c00000 	strbne	r0, [r0], #0
    c0dc:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
    c0e0:	6f010079 	svcvs	0x00010079
    c0e4:	00000056 	andeq	r0, r0, r6, asr r0
    c0e8:	000015ea 	andeq	r1, r0, sl, ror #11
    c0ec:	00786c0e 	rsbseq	r6, r8, lr, lsl #24
    c0f0:	00687001 	rsbeq	r7, r8, r1
    c0f4:	16680000 	strbtne	r0, [r8], -r0
    c0f8:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    c0fc:	70010079 	andvc	r0, r1, r9, ror r0
    c100:	00000068 	andeq	r0, r0, r8, rrx
    c104:	0000170a 	andeq	r1, r0, sl, lsl #14
    c108:	000d9810 	andeq	r9, sp, r0, lsl r8
    c10c:	0002b300 	andeq	fp, r2, r0, lsl #6
    c110:	52960f00 	addspl	r0, r6, #0, 30
    c114:	72010000 	andvc	r0, r1, #0
    c118:	000000f5 	strdeq	r0, [r0], -r5
    c11c:	00001775 	andeq	r1, r0, r5, ror r7
    c120:	b89e1100 	ldmlt	lr, {r8, ip}
    c124:	00040800 	andeq	r0, r4, r0, lsl #16
    c128:	02d00000 	sbcseq	r0, r0, #0
    c12c:	960f0000 	strls	r0, [pc], -r0
    c130:	01000052 	qaddeq	r0, r2, r0
    c134:	0000f573 	andeq	pc, r0, r3, ror r5	; <UNPREDICTABLE>
    c138:	00186d00 	andseq	r6, r8, r0, lsl #26
    c13c:	c4110000 	ldrgt	r0, [r1], #-0
    c140:	6c0800ba 	stcvs	0, cr0, [r8], {186}	; 0xba
    c144:	da000003 	ble	c158 <_Min_Stack_Size+0xbd58>
    c148:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    c14c:	01003273 	tsteq	r0, r3, ror r2
    c150:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    c154:	00192500 	andseq	r2, r9, r0, lsl #10
    c158:	5f730e00 	svcpl	0x00730e00
    c15c:	d2010068 	andle	r0, r1, #104	; 0x68
    c160:	00000025 	andeq	r0, r0, r5, lsr #32
    c164:	00001959 	andeq	r1, r0, r9, asr r9
    c168:	6c5f730e 	mrrcvs	3, 0, r7, pc, cr14	; <UNPREDICTABLE>
    c16c:	25d20100 	ldrbcs	r0, [r2, #256]	; 0x100
    c170:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    c174:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    c178:	00685f74 	rsbeq	r5, r8, r4, ror pc
    c17c:	0025d201 	eoreq	sp, r5, r1, lsl #4
    c180:	19a60000 	stmibne	r6!, {}	; <UNPREDICTABLE>
    c184:	740e0000 	strvc	r0, [lr], #-0
    c188:	01006c5f 	tsteq	r0, pc, asr ip
    c18c:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    c190:	001a1200 	andseq	r1, sl, r0, lsl #4
    c194:	bae41100 	blt	ff91059c <_estack+0xdf8e059c>
    c198:	00020800 	andeq	r0, r2, r0, lsl #16
    c19c:	03400000 	movteq	r0, #0
    c1a0:	50120000 	andspl	r0, r2, r0
    c1a4:	0100004f 	tsteq	r0, pc, asr #32
    c1a8:	0000f5d6 	ldrdeq	pc, [r0], -r6
    c1ac:	4c110000 	ldcmi	0, cr0, [r1], {-0}
    c1b0:	080800bb 	stmdaeq	r8, {r0, r1, r3, r4, r5, r7}
    c1b4:	5d000000 	stcpl	0, cr0, [r0, #-0]
    c1b8:	0f000003 	svceq	0x00000003
    c1bc:	000050ba 	strheq	r5, [r0], -sl
    c1c0:	00f5de01 	rscseq	sp, r5, r1, lsl #28
    c1c4:	1a410000 	bne	104c1cc <_Min_Stack_Size+0x104bdcc>
    c1c8:	10000000 	andne	r0, r0, r0
    c1cc:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
    c1d0:	00000376 	andeq	r0, r0, r6, ror r3
    c1d4:	0050ba0f 	subseq	fp, r0, pc, lsl #20
    c1d8:	f5e80100 			; <UNDEFINED> instruction: 0xf5e80100
    c1dc:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    c1e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    c1e4:	000dd810 	andeq	sp, sp, r0, lsl r8
    c1e8:	00038e00 	andeq	r8, r3, r0, lsl #28
    c1ec:	52121300 	andspl	r1, r2, #0, 6
    c1f0:	e5010000 	str	r0, [r1, #-0]
    c1f4:	000000f5 	strdeq	r0, [r0], -r5
    c1f8:	00087d02 	andeq	r7, r8, r2, lsl #26
    c1fc:	00bcee11 	adcseq	lr, ip, r1, lsl lr
    c200:	00000608 	andeq	r0, r0, r8, lsl #12
    c204:	0003ab00 	andeq	sl, r3, r0, lsl #22
    c208:	52120f00 	andspl	r0, r2, #0, 30
    c20c:	f1010000 	setend	le
    c210:	000000f5 	strdeq	r0, [r0], -r5
    c214:	00001a71 	andeq	r1, r0, r1, ror sl
    c218:	0df01000 	ldcleq	0, cr1, [r0]
    c21c:	03c40000 	biceq	r0, r4, #0
    c220:	120f0000 	andne	r0, pc, #0
    c224:	01000052 	qaddeq	r0, r2, r0
    c228:	0000f5f8 	strdeq	pc, [r0], -r8
    c22c:	001a8900 	andseq	r8, sl, r0, lsl #18
    c230:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    c234:	0f00000e 	svceq	0x0000000e
    c238:	00005212 	andeq	r5, r0, r2, lsl r2
    c23c:	00f5ff01 	rscseq	pc, r5, r1, lsl #30
    c240:	1aa10000 	bne	fe84c248 <_estack+0xde81c248>
    c244:	00000000 	andeq	r0, r0, r0
    c248:	00be4411 	adcseq	r4, lr, r1, lsl r4
    c24c:	00001008 	andeq	r1, r0, r8
    c250:	0003f700 	andeq	pc, r3, r0, lsl #14
    c254:	52121500 	andspl	r1, r2, #0, 10
    c258:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    c25c:	0000f501 	andeq	pc, r0, r1, lsl #10
    c260:	087d0200 	ldmdaeq	sp!, {r9}^
    c264:	beba1100 	frdlte	f1, f2, f0
    c268:	00020800 	andeq	r0, r2, r0, lsl #16
    c26c:	04150000 	ldreq	r0, [r5], #-0
    c270:	96160000 	ldrls	r0, [r6], -r0
    c274:	01000052 	qaddeq	r0, r2, r0
    c278:	00f5010d 	rscseq	r0, r5, sp, lsl #2
    c27c:	1ab90000 	bne	fee4c284 <_estack+0xdee1c284>
    c280:	10000000 	andne	r0, r0, r0
    c284:	00000e20 	andeq	r0, r0, r0, lsr #28
    c288:	0000042f 	andeq	r0, r0, pc, lsr #8
    c28c:	0050ba16 	subseq	fp, r0, r6, lsl sl
    c290:	01250100 	teqeq	r5, r0, lsl #2
    c294:	000000f5 	strdeq	r0, [r0], -r5
    c298:	00001b31 	andeq	r1, r0, r1, lsr fp
    c29c:	0e501000 	cdpeq	0, 5, cr1, cr0, cr0, {0}
    c2a0:	04490000 	strbeq	r0, [r9], #-0
    c2a4:	12160000 	andsne	r0, r6, #0
    c2a8:	01000052 	qaddeq	r0, r2, r0
    c2ac:	00f5012b 	rscseq	r0, r5, fp, lsr #2
    c2b0:	1b490000 	blne	124c2b8 <_Min_Stack_Size+0x124beb8>
    c2b4:	11000000 	mrsne	r0, (UNDEF: 0)
    c2b8:	0800c0c4 	stmdaeq	r0, {r2, r6, r7, lr, pc}
    c2bc:	00000004 	andeq	r0, r0, r4
    c2c0:	00000463 	andeq	r0, r0, r3, ror #8
    c2c4:	0050ba17 	subseq	fp, r0, r7, lsl sl
    c2c8:	01370100 	teqeq	r7, r0, lsl #2
    c2cc:	000000f5 	strdeq	r0, [r0], -r5
    c2d0:	0e681000 	cdpeq	0, 6, cr1, cr8, cr0, {0}
    c2d4:	047c0000 	ldrbteq	r0, [ip], #-0
    c2d8:	120f0000 	andne	r0, pc, #0
    c2dc:	01000052 	qaddeq	r0, r2, r0
    c2e0:	0000f5cf 	andeq	pc, r0, pc, asr #11
    c2e4:	001b6100 	andseq	r6, fp, r0, lsl #2
    c2e8:	4e180000 	cdpmi	0, 1, cr0, cr8, cr0, {0}
    c2ec:	1c0800b9 	stcne	0, cr0, [r8], {185}	; 0xb9
    c2f0:	19000007 	stmdbne	r0, {r0, r1, r2}
    c2f4:	0800b9e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp, pc}
    c2f8:	00000731 	andeq	r0, r0, r1, lsr r7
    c2fc:	0000049c 	muleq	r0, ip, r4
    c300:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0x11a
    c304:	00f25c03 	rscseq	r5, r2, r3, lsl #24
    c308:	941b0008 	ldrls	r0, [fp], #-8
    c30c:	470800c1 	strmi	r0, [r8, -r1, asr #1]
    c310:	1c000007 	stcne	0, cr0, [r0], {7}
    c314:	0800c386 	stmdaeq	r0, {r1, r2, r7, r8, r9, lr, pc}
    c318:	0000075c 	andeq	r0, r0, ip, asr r7
    c31c:	0252011a 	subseq	r0, r2, #-2147483642	; 0x80000006
    c320:	0000007a 	andeq	r0, r0, sl, ror r0
    c324:	0000251d 	andeq	r2, r0, sp, lsl r5
    c328:	0004c600 	andeq	ip, r4, r0, lsl #12
    c32c:	00881e00 	addeq	r1, r8, r0, lsl #28
    c330:	00010000 	andeq	r0, r1, r0
    c334:	0070621f 	rsbseq	r6, r0, pc, lsl r2
    c338:	04d64501 	ldrbeq	r4, [r6], #1281	; 0x501
    c33c:	03050000 	movweq	r0, #20480	; 0x5000
    c340:	0800f288 	stmdaeq	r0, {r3, r7, r9, ip, sp, lr, pc}
    c344:	0004b606 	andeq	fp, r4, r6, lsl #12
    c348:	52ac1300 	adcpl	r1, ip, #0, 6
    c34c:	46010000 	strmi	r0, [r1], -r0
    c350:	000004ec 	andeq	r0, r0, ip, ror #9
    c354:	f2680305 	vcgt.s32	d16, d8, d5
    c358:	b6060800 	strlt	r0, [r6], -r0, lsl #16
    c35c:	13000004 	movwne	r0, #4
    c360:	000052b1 			; <UNDEFINED> instruction: 0x000052b1
    c364:	05024701 	streq	r4, [r2, #-1793]	; 0x701
    c368:	03050000 	movweq	r0, #20480	; 0x5000
    c36c:	0800f278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp, lr, pc}
    c370:	0004b606 	andeq	fp, r4, r6, lsl #12
    c374:	52842000 	addpl	r2, r4, #0
    c378:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    c37c:	0000051b 	andeq	r0, r0, fp, lsl r5
    c380:	00000008 	andeq	r0, r0, r8
    c384:	00000000 	andeq	r0, r0, r0
    c388:	00250600 	eoreq	r0, r5, r0, lsl #12
    c38c:	6f210000 	svcvs	0x00210000
    c390:	0100656e 	tsteq	r0, lr, ror #10
    c394:	00051b49 	andeq	r1, r5, r9, asr #22
    c398:	00000800 	andeq	r0, r0, r0, lsl #16
    c39c:	00000000 	andeq	r0, r0, r0
    c3a0:	74213ff0 	strtvc	r3, [r1], #-4080	; 0xff0
    c3a4:	01006f77 	tsteq	r0, r7, ror pc
    c3a8:	00051b4a 	andeq	r1, r5, sl, asr #22
    c3ac:	00000800 	andeq	r0, r0, r0, lsl #16
    c3b0:	00000000 	andeq	r0, r0, r0
    c3b4:	90204000 	eorls	r4, r0, r0
    c3b8:	01000052 	qaddeq	r0, r2, r0
    c3bc:	00051b4b 	andeq	r1, r5, fp, asr #22
    c3c0:	00000800 	andeq	r0, r0, r0, lsl #16
    c3c4:	00000000 	andeq	r0, r0, r0
    c3c8:	41204340 	teqmi	r0, r0, asr #6
    c3cc:	0100004f 	tsteq	r0, pc, asr #32
    c3d0:	00051b4c 	andeq	r1, r5, ip, asr #22
    c3d4:	759c0800 	ldrvc	r0, [ip, #2048]	; 0x800
    c3d8:	e43c8800 	ldrt	r8, [ip], #-2048	; 0x800
    c3dc:	a7207e37 			; <UNDEFINED> instruction: 0xa7207e37
    c3e0:	01000052 	qaddeq	r0, r2, r0
    c3e4:	00051b4d 	andeq	r1, r5, sp, asr #22
    c3e8:	f3590800 	vsub.i16	d16, d9, d0
    c3ec:	6e1fc2f8 	mrcvs	2, 0, ip, cr15, cr8, {7}
    c3f0:	4c2101a5 	stfmis	f0, [r1], #-660	; 0xfffffd6c
    c3f4:	4f010031 	svcmi	0x00010031
    c3f8:	0000051b 	andeq	r0, r0, fp, lsl r5
    c3fc:	33330308 	teqcc	r3, #8, 6	; 0x20000000
    c400:	e3333333 	teq	r3, #-872415232	; 0xcc000000
    c404:	324c213f 	subcc	r2, ip, #-1073741809	; 0xc000000f
    c408:	1b500100 	blne	140c810 <_Min_Stack_Size+0x140c410>
    c40c:	08000005 	stmdaeq	r0, {r0, r2}
    c410:	db6fabff 	blle	1bf7414 <_Min_Stack_Size+0x1bf7014>
    c414:	3fdb6db6 	svccc	0x00db6db6
    c418:	00334c21 	eorseq	r4, r3, r1, lsr #24
    c41c:	051b5101 	ldreq	r5, [fp, #-257]	; 0x101
    c420:	4d080000 	stcmi	0, cr0, [r8, #-0]
    c424:	55518f26 	ldrbpl	r8, [r1, #-3878]	; 0xf26
    c428:	213fd555 	teqcs	pc, r5, asr r5	; <UNPREDICTABLE>
    c42c:	0100344c 	tsteq	r0, ip, asr #8
    c430:	00051b52 	andeq	r1, r5, r2, asr fp
    c434:	41010800 	tstmi	r1, r0, lsl #16
    c438:	7460a91d 	strbtvc	sl, [r0], #-2333	; 0x91d
    c43c:	4c213fd1 	stcmi	15, cr3, [r1], #-836	; 0xfffffcbc
    c440:	53010035 	movwpl	r0, #4149	; 0x1035
    c444:	0000051b 	andeq	r0, r0, fp, lsl r5
    c448:	c9db6508 	ldmibgt	fp, {r3, r8, sl, sp, lr}^
    c44c:	cd864a93 	vstrgt	s8, [r6, #588]	; 0x24c
    c450:	364c213f 			; <UNDEFINED> instruction: 0x364c213f
    c454:	1b540100 	blne	150c85c <_Min_Stack_Size+0x150c45c>
    c458:	08000005 	stmdaeq	r0, {r0, r2}
    c45c:	4a454eef 	bmi	1160020 <_Min_Stack_Size+0x115fc20>
    c460:	3fca7e28 	svccc	0x00ca7e28
    c464:	00315021 	eorseq	r5, r1, r1, lsr #32
    c468:	051b5501 	ldreq	r5, [fp, #-1281]	; 0x501
    c46c:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    c470:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
    c474:	213fc555 	teqcs	pc, r5, asr r5	; <UNPREDICTABLE>
    c478:	01003250 	tsteq	r0, r0, asr r2
    c47c:	00051b56 	andeq	r1, r5, r6, asr fp
    c480:	bd930800 	ldclt	8, cr0, [r3]
    c484:	c16c16be 	strhgt	r1, [ip, #-110]!	; 0xffffff92
    c488:	5021bf66 	eorpl	fp, r1, r6, ror #30
    c48c:	57010033 	smladxpl	r1, r3, r0, r0
    c490:	0000051b 	andeq	r0, r0, fp, lsl r5
    c494:	25de2c08 	ldrbcs	r2, [lr, #3080]	; 0xc08
    c498:	11566aaf 	cmpne	r6, pc, lsr #21
    c49c:	3450213f 	ldrbcc	r2, [r0], #-319	; 0x13f
    c4a0:	1b580100 	blne	160c8a8 <_Min_Stack_Size+0x160c4a8>
    c4a4:	08000005 	stmdaeq	r0, {r0, r2}
    c4a8:	c5d26bf1 	ldrbgt	r6, [r2, #3057]	; 0xbf1
    c4ac:	bebbbd41 	cdplt	13, 11, cr11, cr11, cr1, {2}
    c4b0:	00355021 	eorseq	r5, r5, r1, lsr #32
    c4b4:	051b5901 	ldreq	r5, [fp, #-2305]	; 0x901
    c4b8:	d0080000 	andle	r0, r8, r0
    c4bc:	6972bea4 	ldmdbvs	r2!, {r2, r5, r7, r9, sl, fp, ip, sp, pc}^
    c4c0:	213e6637 	teqcs	lr, r7, lsr r6
    c4c4:	0032676c 	eorseq	r6, r2, ip, ror #14
    c4c8:	051b5a01 	ldreq	r5, [fp, #-2561]	; 0xa01
    c4cc:	ef080000 	svc	0x00080000
    c4d0:	42fefa39 	rscsmi	pc, lr, #233472	; 0x39000
    c4d4:	203fe62e 	eorscs	lr, pc, lr, lsr #12
    c4d8:	0000529b 	muleq	r0, fp, r2
    c4dc:	051b5b01 	ldreq	r5, [fp, #-2817]	; 0xb01
    c4e0:	00080000 	andeq	r0, r8, r0
    c4e4:	43000000 	movwmi	r0, #0
    c4e8:	203fe62e 	eorscs	lr, pc, lr, lsr #12
    c4ec:	000052a1 	andeq	r5, r0, r1, lsr #5
    c4f0:	051b5c01 	ldreq	r5, [fp, #-3073]	; 0xc01
    c4f4:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    c4f8:	610ca86c 	tstvs	ip, ip, ror #16
    c4fc:	21be205c 			; <UNDEFINED> instruction: 0x21be205c
    c500:	0074766f 	rsbseq	r7, r4, pc, ror #12
    c504:	051b5d01 	ldreq	r5, [fp, #-3329]	; 0xd01
    c508:	fe080000 	cdp2	0, 0, cr0, cr8, cr0, {0}
    c50c:	47652b82 	strbmi	r2, [r5, -r2, lsl #23]!
    c510:	213c9715 	teqcs	ip, r5, lsl r7
    c514:	01007063 	tsteq	r0, r3, rrx
    c518:	00051b5e 	andeq	r1, r5, lr, asr fp
    c51c:	03fd0800 	mvnseq	r0, #0, 16
    c520:	c709dc3a 	smladxgt	r9, sl, ip, sp
    c524:	6d203fee 	stcvs	15, cr3, [r0, #-952]!	; 0xfffffc48
    c528:	01000052 	qaddeq	r0, r2, r0
    c52c:	00051b5f 	andeq	r1, r5, pc, asr fp
    c530:	00000800 	andeq	r0, r0, r0, lsl #16
    c534:	c709e000 	strgt	lr, [r9, -r0]
    c538:	72203fee 	eorvc	r3, r0, #952	; 0x3b8
    c53c:	01000052 	qaddeq	r0, r2, r0
    c540:	00051b60 	andeq	r1, r5, r0, ror #22
    c544:	01f50800 	mvnseq	r0, r0, lsl #16
    c548:	2fe0145b 	svccs	0x00e0145b
    c54c:	7e20be3e 	mcrvc	14, 1, fp, cr0, cr14, {1}
    c550:	01000052 	qaddeq	r0, r2, r0
    c554:	00051b61 	andeq	r1, r5, r1, ror #22
    c558:	82fe0800 	rscshi	r0, lr, #0, 16
    c55c:	1547652b 	strbne	r6, [r7, #-1323]	; 0x52b
    c560:	e4203ff7 	strt	r3, [r0], #-4087	; 0xff7
    c564:	01000052 	qaddeq	r0, r2, r0
    c568:	00051b62 	andeq	r1, r5, r2, ror #22
    c56c:	00000800 	andeq	r0, r0, r0, lsl #16
    c570:	15476000 	strbne	r6, [r7, #-0]
    c574:	ec203ff7 	stc	15, cr3, [r0], #-988	; 0xfffffc24
    c578:	01000052 	qaddeq	r0, r2, r0
    c57c:	00051b63 	andeq	r1, r5, r3, ror #22
    c580:	df440800 	svcle	0x00440800
    c584:	ae0bf85d 	mcrge	8, 0, pc, cr11, cr13, {2}	; <UNPREDICTABLE>
    c588:	4b223e54 	blmi	89bee0 <_Min_Stack_Size+0x89bae0>
    c58c:	0400004f 	streq	r0, [r0], #-79	; 0x4f
    c590:	00002574 	andeq	r2, r0, r4, ror r5
    c594:	00073100 	andeq	r3, r7, r0, lsl #2
    c598:	00252300 	eoreq	r2, r5, r0, lsl #6
    c59c:	24000000 	strcs	r0, [r0], #-0
    c5a0:	006e616e 	rsbeq	r6, lr, lr, ror #2
    c5a4:	25010304 	strcs	r0, [r1, #-772]	; 0x304
    c5a8:	47000000 	strmi	r0, [r0, -r0]
    c5ac:	23000007 	movwcs	r0, #7
    c5b0:	00000096 	muleq	r0, r6, r0
    c5b4:	521f2200 	andspl	r2, pc, #0, 4
    c5b8:	96030000 	strls	r0, [r3], -r0
    c5bc:	00000025 	andeq	r0, r0, r5, lsr #32
    c5c0:	0000075c 	andeq	r0, r0, ip, asr r7
    c5c4:	00002523 	andeq	r2, r0, r3, lsr #10
    c5c8:	77250000 	strvc	r0, [r5, -r0]!
    c5cc:	04000052 	streq	r0, [r0], #-82	; 0x52
    c5d0:	0025010d 	eoreq	r0, r5, sp, lsl #2
    c5d4:	25230000 	strcs	r0, [r3, #-0]!
    c5d8:	23000000 	movwcs	r0, #0
    c5dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    c5e0:	022d0000 	eoreq	r0, sp, #0
    c5e4:	00040000 	andeq	r0, r4, r0
    c5e8:	00002722 	andeq	r2, r0, r2, lsr #14
    c5ec:	4f5b0104 	svcmi	0x005b0104
    c5f0:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    c5f4:	56000052 			; <UNDEFINED> instruction: 0x56000052
    c5f8:	90000050 	andls	r0, r0, r0, asr r0
    c5fc:	0000000e 	andeq	r0, r0, lr
    c600:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    c604:	02000058 	andeq	r0, r0, #88	; 0x58
    c608:	01680408 	cmneq	r8, r8, lsl #8
    c60c:	04030000 	streq	r0, [r3], #-0
    c610:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    c614:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c618:	0000012b 	andeq	r0, r0, fp, lsr #2
    c61c:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    c620:	02000001 	andeq	r0, r0, #1
    c624:	01430801 	cmpeq	r3, r1, lsl #16
    c628:	02020000 	andeq	r0, r2, #0
    c62c:	00017f05 	andeq	r7, r1, r5, lsl #30
    c630:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c634:	0000000e 	andeq	r0, r0, lr
    c638:	00016f04 	andeq	r6, r1, r4, lsl #30
    c63c:	613f0200 	teqvs	pc, r0, lsl #4
    c640:	02000000 	andeq	r0, r0, #0
    c644:	00050504 	andeq	r0, r5, r4, lsl #10
    c648:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    c64c:	02000004 	andeq	r0, r0, #4
    c650:	00007341 	andeq	r7, r0, r1, asr #6
    c654:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c658:	00000126 	andeq	r0, r0, r6, lsr #2
    c65c:	00050802 	andeq	r0, r5, r2, lsl #16
    c660:	02000000 	andeq	r0, r0, #0
    c664:	01210708 	teqeq	r1, r8, lsl #14
    c668:	04020000 	streq	r0, [r2], #-0
    c66c:	00019207 	andeq	r9, r1, r7, lsl #4
    c670:	08010200 	stmdaeq	r1, {r9}
    c674:	0000014c 	andeq	r0, r0, ip, asr #2
    c678:	79040402 	stmdbvc	r4, {r1, sl}
    c67c:	02000001 	andeq	r0, r0, #1
    c680:	01630408 	cmneq	r3, r8, lsl #8
    c684:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    c688:	c8010f03 	stmdagt	r1, {r0, r1, r8, r9, sl, fp}
    c68c:	06000000 	streq	r0, [r0], -r0
    c690:	0077736c 	rsbseq	r7, r7, ip, ror #6
    c694:	68011103 	stmdavs	r1, {r0, r1, r8, ip}
    c698:	00000000 	andeq	r0, r0, r0
    c69c:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    c6a0:	01120300 	tsteq	r2, r0, lsl #6
    c6a4:	00000068 	andeq	r0, r0, r8, rrx
    c6a8:	08070004 	stmdaeq	r7, {r2}
    c6ac:	ea010c03 	b	4f6c0 <_Min_Stack_Size+0x4f2c0>
    c6b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c6b4:	000055fa 	strdeq	r5, [r0], -sl
    c6b8:	25010e03 	strcs	r0, [r1, #-3587]	; 0xe03
    c6bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c6c0:	00004f55 	andeq	r4, r0, r5, asr pc
    c6c4:	a4011303 	strge	r1, [r1], #-771	; 0x303
    c6c8:	00000000 	andeq	r0, r0, r0
    c6cc:	004f2a09 	subeq	r2, pc, r9, lsl #20
    c6d0:	01140300 	tsteq	r4, r0, lsl #6
    c6d4:	000000c8 	andeq	r0, r0, r8, asr #1
    c6d8:	00521f0a 	subseq	r1, r2, sl, lsl #30
    c6dc:	255f0100 	ldrbcs	r0, [pc, #-256]	; c5e4 <_Min_Stack_Size+0xc1e4>
    c6e0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    c6e4:	7e0800c3 	cdpvc	0, 0, cr0, cr8, cr3, {6}
    c6e8:	01000001 	tsteq	r0, r1
    c6ec:	0002039c 	muleq	r2, ip, r3
    c6f0:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    c6f4:	00255f01 	eoreq	r5, r5, r1, lsl #30
    c6f8:	1b790000 	blne	1e4c700 <_Min_Stack_Size+0x1e4c300>
    c6fc:	7a0c0000 	bvc	30c704 <_Min_Stack_Size+0x30c304>
    c700:	25650100 	strbcs	r0, [r5, #-256]!	; 0x100
    c704:	21000000 	mrscs	r0, (UNDEF: 0)
    c708:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    c70c:	0000598c 	andeq	r5, r0, ip, lsl #19
    c710:	00566601 	subseq	r6, r6, r1, lsl #12
    c714:	80800000 	addhi	r0, r0, r0
    c718:	0c788080 	ldcleq	0, cr8, [r8], #-512	; 0xfffffe00
    c71c:	67010072 	smlsdxvs	r1, r2, r0, r0
    c720:	00000068 	andeq	r0, r0, r8, rrx
    c724:	00001c3d 	andeq	r1, r0, sp, lsr ip
    c728:	0031740c 	eorseq	r7, r1, ip, lsl #8
    c72c:	00686701 	rsbeq	r6, r8, r1, lsl #14
    c730:	1c740000 	ldclne	0, cr0, [r4], #-0
    c734:	730c0000 	movwvc	r0, #49152	; 0xc000
    c738:	67010031 	smladxvs	r1, r1, r0, r0
    c73c:	00000068 	andeq	r0, r0, r8, rrx
    c740:	00001c92 	muleq	r0, r2, ip
    c744:	3178690c 	cmncc	r8, ip, lsl #18
    c748:	68670100 	stmdavs	r7!, {r8}^
    c74c:	b1000000 	mrslt	r0, (UNDEF: 0)
    c750:	0c00001c 	stceq	0, cr0, [r0], {28}
    c754:	01003171 	tsteq	r0, r1, ror r1
    c758:	00006867 	andeq	r6, r0, r7, ror #16
    c75c:	001cfb00 	andseq	pc, ip, r0, lsl #22
    c760:	78690c00 	stmdavc	r9!, {sl, fp}^
    c764:	68010030 	stmdavs	r1, {r4, r5}
    c768:	00000056 	andeq	r0, r0, r6, asr r0
    c76c:	00001d35 	andeq	r1, r0, r5, lsr sp
    c770:	0030730c 	eorseq	r7, r0, ip, lsl #6
    c774:	00566801 	subseq	r6, r6, r1, lsl #16
    c778:	1db30000 	ldcne	0, cr0, [r3]
    c77c:	710c0000 	mrsvc	r0, (UNDEF: 12)
    c780:	56680100 	strbtpl	r0, [r8], -r0, lsl #2
    c784:	e2000000 	and	r0, r0, #0
    c788:	0c00001d 	stceq	0, cr0, [r0], {29}
    c78c:	6801006d 	stmdavs	r1, {r0, r2, r3, r5, r6}
    c790:	00000056 	andeq	r0, r0, r6, asr r0
    c794:	00001e0c 	andeq	r1, r0, ip, lsl #28
    c798:	0100740c 	tsteq	r0, ip, lsl #8
    c79c:	00005668 	andeq	r5, r0, r8, ror #12
    c7a0:	001e4100 	andseq	r4, lr, r0, lsl #2
    c7a4:	00690c00 	rsbeq	r0, r9, r0, lsl #24
    c7a8:	00566801 	subseq	r6, r6, r1, lsl #16
    c7ac:	1e5f0000 	cdpne	0, 5, cr0, cr15, cr0, {0}
    c7b0:	f60e0000 			; <UNDEFINED> instruction: 0xf60e0000
    c7b4:	040800c3 	streq	r0, [r8], #-195	; 0xc3
    c7b8:	ed000000 	stc	0, cr0, [r0, #-0]
    c7bc:	0f000001 	svceq	0x00000001
    c7c0:	00005296 	muleq	r0, r6, r2
    c7c4:	00ea6a01 	rsceq	r6, sl, r1, lsl #20
    c7c8:	1e8a0000 	cdpne	0, 8, cr0, cr10, cr0, {0}
    c7cc:	10000000 	andne	r0, r0, r0
    c7d0:	0800c4de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, lr, pc}
    c7d4:	00000006 	andeq	r0, r0, r6
    c7d8:	0052f411 	subseq	pc, r2, r1, lsl r4	; <UNPREDICTABLE>
    c7dc:	eabf0100 	b	fefccbe4 <_estack+0xdef9cbe4>
    c7e0:	00000000 	andeq	r0, r0, r0
    c7e4:	6e6f1200 	cdpvs	2, 6, cr1, cr15, cr0, {0}
    c7e8:	59010065 	stmdbpl	r1, {r0, r2, r5, r6}
    c7ec:	00000217 	andeq	r0, r0, r7, lsl r2
    c7f0:	00000008 	andeq	r0, r0, r8
    c7f4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    c7f8:	0025133f 	eoreq	r1, r5, pc, lsr r3
    c7fc:	a7140000 	ldrge	r0, [r4, -r0]
    c800:	01000052 	qaddeq	r0, r2, r0
    c804:	00021759 	andeq	r1, r2, r9, asr r7
    c808:	f3590800 	vsub.i16	d16, d9, d0
    c80c:	6e1fc2f8 	mrcvs	2, 0, ip, cr15, cr8, {7}
    c810:	d30001a5 	movwle	r0, #421	; 0x1a5
    c814:	04000000 	streq	r0, [r0], #-0
    c818:	00283a00 	eoreq	r3, r8, r0, lsl #20
    c81c:	5b010400 	blpl	4d824 <_Min_Stack_Size+0x4d424>
    c820:	0100004f 	tsteq	r0, pc, asr #32
    c824:	0000538e 	andeq	r5, r0, lr, lsl #7
    c828:	00005328 	andeq	r5, r0, r8, lsr #6
    c82c:	00000ea0 	andeq	r0, r0, r0, lsr #29
    c830:	00000000 	andeq	r0, r0, r0
    c834:	00005a4c 	andeq	r5, r0, ip, asr #20
    c838:	68040802 	stmdavs	r4, {r1, fp}
    c83c:	03000001 	movweq	r0, #1
    c840:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c844:	04020074 	streq	r0, [r2], #-116	; 0x74
    c848:	00012b07 	andeq	r2, r1, r7, lsl #22
    c84c:	06010200 	streq	r0, [r1], -r0, lsl #4
    c850:	00000145 	andeq	r0, r0, r5, asr #2
    c854:	43080102 	movwmi	r0, #33026	; 0x8102
    c858:	02000001 	andeq	r0, r0, #1
    c85c:	017f0502 	cmneq	pc, r2, lsl #10
    c860:	02020000 	andeq	r0, r2, #0
    c864:	00000e07 	andeq	r0, r0, r7, lsl #28
    c868:	016f0400 	cmneq	pc, r0, lsl #8
    c86c:	3f020000 	svccc	0x00020000
    c870:	00000061 	andeq	r0, r0, r1, rrx
    c874:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    c878:	04000000 	streq	r0, [r0], #-0
    c87c:	000004f4 	strdeq	r0, [r0], -r4
    c880:	00734102 	rsbseq	r4, r3, r2, lsl #2
    c884:	04020000 	streq	r0, [r2], #-0
    c888:	00012607 	andeq	r2, r1, r7, lsl #12
    c88c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    c890:	00000000 	andeq	r0, r0, r0
    c894:	21070802 	tstcs	r7, r2, lsl #16
    c898:	02000001 	andeq	r0, r0, #1
    c89c:	01920704 	orrseq	r0, r2, r4, lsl #14
    c8a0:	01020000 	mrseq	r0, (UNDEF: 2)
    c8a4:	00014c08 	andeq	r4, r1, r8, lsl #24
    c8a8:	04040200 	streq	r0, [r4], #-512	; 0x200
    c8ac:	00000179 	andeq	r0, r0, r9, ror r1
    c8b0:	63040802 	movwvs	r0, #18434	; 0x4802
    c8b4:	05000001 	streq	r0, [r0, #-1]
    c8b8:	000051dd 	ldrdeq	r5, [r0], -sp
    c8bc:	2c010403 	cfstrscs	mvf0, [r1], {3}
    c8c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    c8c4:	0c0800c5 	stceq	0, cr0, [r8], {197}	; 0xc5
    c8c8:	01000000 	mrseq	r0, (UNDEF: 0)
    c8cc:	0078069c 			; <UNDEFINED> instruction: 0x0078069c
    c8d0:	00251801 	eoreq	r1, r5, r1, lsl #16
    c8d4:	1ee20000 	cdpne	0, 14, cr0, cr2, cr0, {0}
    c8d8:	68070000 	stmdavs	r7, {}	; <UNPREDICTABLE>
    c8dc:	1e010078 	mcrne	0, 0, r0, cr1, cr8, {3}
    c8e0:	00000056 	andeq	r0, r0, r6, asr r0
    c8e4:	00001f0a 	andeq	r1, r0, sl, lsl #30
    c8e8:	00d70000 	sbcseq	r0, r7, r0
    c8ec:	00040000 	andeq	r0, r4, r0
    c8f0:	000028a9 	andeq	r2, r0, r9, lsr #17
    c8f4:	4f5b0104 	svcmi	0x005b0104
    c8f8:	c1010000 	mrsgt	r0, (UNDEF: 1)
    c8fc:	28000053 	stmdacs	r0, {r0, r1, r4, r6}
    c900:	b0000053 	andlt	r0, r0, r3, asr r0
    c904:	0000000e 	andeq	r0, r0, lr
    c908:	5c000000 	stcpl	0, cr0, [r0], {-0}
    c90c:	0200005b 	andeq	r0, r0, #91	; 0x5b
    c910:	01680408 	cmneq	r8, r8, lsl #8
    c914:	04030000 	streq	r0, [r3], #-0
    c918:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    c91c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c920:	0000012b 	andeq	r0, r0, fp, lsr #2
    c924:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    c928:	02000001 	andeq	r0, r0, #1
    c92c:	01430801 	cmpeq	r3, r1, lsl #16
    c930:	02020000 	andeq	r0, r2, #0
    c934:	00017f05 	andeq	r7, r1, r5, lsl #30
    c938:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c93c:	0000000e 	andeq	r0, r0, lr
    c940:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    c944:	04000000 	streq	r0, [r0], #-0
    c948:	000004f4 	strdeq	r0, [r0], -r4
    c94c:	00684102 	rsbeq	r4, r8, r2, lsl #2
    c950:	04020000 	streq	r0, [r2], #-0
    c954:	00012607 	andeq	r2, r1, r7, lsl #12
    c958:	05080200 	streq	r0, [r8, #-512]	; 0x200
    c95c:	00000000 	andeq	r0, r0, r0
    c960:	21070802 	tstcs	r7, r2, lsl #16
    c964:	02000001 	andeq	r0, r0, #1
    c968:	01920704 	orrseq	r0, r2, r4, lsl #14
    c96c:	01020000 	mrseq	r0, (UNDEF: 2)
    c970:	00014c08 	andeq	r4, r1, r8, lsl #24
    c974:	04040200 	streq	r0, [r4], #-512	; 0x200
    c978:	00000179 	andeq	r0, r0, r9, ror r1
    c97c:	63040802 	movwvs	r0, #18434	; 0x4802
    c980:	05000001 	streq	r0, [r0, #-1]
    c984:	000050f3 	strdeq	r5, [r0], -r3
    c988:	002ccb03 	eoreq	ip, ip, r3, lsl #22
    c98c:	c5640000 	strbgt	r0, [r4, #-0]!
    c990:	00500800 	subseq	r0, r0, r0, lsl #16
    c994:	9c010000 	stcls	0, cr0, [r1], {-0}
    c998:	01007806 	tsteq	r0, r6, lsl #16
    c99c:	0000250a 	andeq	r2, r0, sl, lsl #10
    c9a0:	001f1d00 	andseq	r1, pc, r0, lsl #26
    c9a4:	736d0700 	cmnvc	sp, #0, 14
    c9a8:	0c010077 	stceq	0, cr0, [r1], {119}	; 0x77
    c9ac:	0000005d 	andeq	r0, r0, sp, asr r0
    c9b0:	00001f65 	andeq	r1, r0, r5, ror #30
    c9b4:	77736c07 	ldrbvc	r6, [r3, -r7, lsl #24]!
    c9b8:	5d0c0100 	stfpls	f0, [ip, #-0]
    c9bc:	83000000 	movwhi	r0, #0
    c9c0:	0000001f 	andeq	r0, r0, pc, lsl r0
    c9c4:	0000ba00 	andeq	fp, r0, r0, lsl #20
    c9c8:	18000400 	stmdane	r0, {sl}
    c9cc:	04000029 	streq	r0, [r0], #-41	; 0x29
    c9d0:	004f5b01 	subeq	r5, pc, r1, lsl #22
    c9d4:	53f80100 	mvnspl	r0, #0, 2
    c9d8:	53280000 	teqpl	r8, #0
    c9dc:	5c7e0000 	ldclpl	0, cr0, [lr], #-0
    c9e0:	04020000 	streq	r0, [r2], #-0
    c9e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    c9e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    c9ec:	0000012b 	andeq	r0, r0, fp, lsr #2
    c9f0:	45060103 	strmi	r0, [r6, #-259]	; 0x103
    c9f4:	03000001 	movweq	r0, #1
    c9f8:	01430801 	cmpeq	r3, r1, lsl #16
    c9fc:	02030000 	andeq	r0, r3, #0
    ca00:	00017f05 	andeq	r7, r1, r5, lsl #30
    ca04:	07020300 	streq	r0, [r2, -r0, lsl #6]
    ca08:	0000000e 	andeq	r0, r0, lr
    ca0c:	05050403 	streq	r0, [r5, #-1027]	; 0x403
    ca10:	03000000 	movweq	r0, #0
    ca14:	01260704 	teqeq	r6, r4, lsl #14
    ca18:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ca1c:	00000005 	andeq	r0, r0, r5
    ca20:	07080300 	streq	r0, [r8, -r0, lsl #6]
    ca24:	00000121 	andeq	r0, r0, r1, lsr #2
    ca28:	92070403 	andls	r0, r7, #50331648	; 0x3000000
    ca2c:	03000001 	movweq	r0, #1
    ca30:	014c0801 	cmpeq	ip, r1, lsl #16
    ca34:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ca38:	00016804 	andeq	r6, r1, r4, lsl #16
    ca3c:	04040300 	streq	r0, [r4], #-768	; 0x300
    ca40:	00000179 	andeq	r0, r0, r9, ror r1
    ca44:	63040803 	movwvs	r0, #18435	; 0x4803
    ca48:	04000001 	streq	r0, [r0], #-1
    ca4c:	00005194 	muleq	r0, r4, r1
    ca50:	02470101 	subeq	r0, r7, #1073741824	; 0x40000000
    ca54:	000000ac 	andeq	r0, r0, ip, lsr #1
    ca58:	00515005 	subseq	r5, r1, r5
    ca5c:	7c057f00 	stcvc	15, cr7, [r5], {-0}
    ca60:	00000051 	andeq	r0, r0, r1, asr r0
    ca64:	00510105 	subseq	r0, r1, r5, lsl #2
    ca68:	6d050100 	stfvss	f0, [r5, #-0]
    ca6c:	02000051 	andeq	r0, r0, #81	; 0x51
    ca70:	51aa0600 			; <UNDEFINED> instruction: 0x51aa0600
    ca74:	1b020000 	blne	8ca7c <_Min_Stack_Size+0x8c67c>
    ca78:	00000086 	andeq	r0, r0, r6, lsl #1
    ca7c:	00600305 	rsbeq	r0, r0, r5, lsl #6
    ca80:	25002000 	strcs	r2, [r0, #-0]
    ca84:	04000001 	streq	r0, [r0], #-1
    ca88:	00296700 	eoreq	r6, r9, r0, lsl #14
    ca8c:	5b010400 	blpl	4da94 <_Min_Stack_Size+0x4d694>
    ca90:	0100004f 	tsteq	r0, pc, asr #32
    ca94:	0000542c 	andeq	r5, r0, ip, lsr #8
    ca98:	00005328 	andeq	r5, r0, r8, lsr #6
    ca9c:	00000ec0 	andeq	r0, r0, r0, asr #29
    caa0:	00000000 	andeq	r0, r0, r0
    caa4:	00005d1f 	andeq	r5, r0, pc, lsl sp
    caa8:	69050402 	stmdbvs	r5, {r1, sl}
    caac:	0300746e 	movweq	r7, #1134	; 0x46e
    cab0:	012b0704 	teqeq	fp, r4, lsl #14
    cab4:	01030000 	mrseq	r0, (UNDEF: 3)
    cab8:	00014506 	andeq	r4, r1, r6, lsl #10
    cabc:	08010300 	stmdaeq	r1, {r8, r9}
    cac0:	00000143 	andeq	r0, r0, r3, asr #2
    cac4:	7f050203 	svcvc	0x00050203
    cac8:	03000001 	movweq	r0, #1
    cacc:	000e0702 	andeq	r0, lr, r2, lsl #14
    cad0:	04030000 	streq	r0, [r3], #-0
    cad4:	00000505 	andeq	r0, r0, r5, lsl #10
    cad8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    cadc:	00000126 	andeq	r0, r0, r6, lsr #2
    cae0:	00050803 	andeq	r0, r5, r3, lsl #16
    cae4:	03000000 	movweq	r0, #0
    cae8:	01210708 	teqeq	r1, r8, lsl #14
    caec:	04030000 	streq	r0, [r3], #-0
    caf0:	00019207 	andeq	r9, r1, r7, lsl #4
    caf4:	78040400 	stmdavc	r4, {sl}
    caf8:	03000000 	movweq	r0, #0
    cafc:	014c0801 	cmpeq	ip, r1, lsl #16
    cb00:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cb04:	00016804 	andeq	r6, r1, r4, lsl #16
    cb08:	04040300 	streq	r0, [r4], #-768	; 0x300
    cb0c:	00000179 	andeq	r0, r0, r9, ror r1
    cb10:	63040803 	movwvs	r0, #18435	; 0x4803
    cb14:	05000001 	streq	r0, [r0, #-1]
    cb18:	0000518a 	andeq	r5, r0, sl, lsl #3
    cb1c:	02070228 	andeq	r0, r7, #40, 4	; 0x80000002
    cb20:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    cb24:	004f3c06 	subeq	r3, pc, r6, lsl #24
    cb28:	020a0200 	andeq	r0, sl, #0, 4
    cb2c:	00000025 	andeq	r0, r0, r5, lsr #32
    cb30:	51a50600 			; <UNDEFINED> instruction: 0x51a50600
    cb34:	0b020000 	bleq	8cb3c <_Min_Stack_Size+0x8c73c>
    cb38:	00007202 	andeq	r7, r0, r2, lsl #4
    cb3c:	10060400 	andne	r0, r6, r0, lsl #8
    cb40:	02000051 	andeq	r0, r0, #81	; 0x51
    cb44:	007f020c 	rsbseq	r0, pc, ip, lsl #4
    cb48:	06080000 	streq	r0, [r8], -r0
    cb4c:	00005115 	andeq	r5, r0, r5, lsl r1
    cb50:	7f020d02 	svcvc	0x00020d02
    cb54:	10000000 	andne	r0, r0, r0
    cb58:	00511a06 	subseq	r1, r1, r6, lsl #20
    cb5c:	020e0200 	andeq	r0, lr, #0, 4
    cb60:	0000007f 	andeq	r0, r0, pc, ror r0
    cb64:	72650718 	rsbvc	r0, r5, #24, 14	; 0x600000
    cb68:	0f020072 	svceq	0x00020072
    cb6c:	00002502 	andeq	r2, r0, r2, lsl #10
    cb70:	08002000 	stmdaeq	r0, {sp}
    cb74:	000051c2 	andeq	r5, r0, r2, asr #3
    cb78:	25021502 	strcs	r1, [r2, #-1282]	; 0x502
    cb7c:	b4000000 	strlt	r0, [r0], #-0
    cb80:	040800c5 	streq	r0, [r8], #-197	; 0xc5
    cb84:	01000000 	mrseq	r0, (UNDEF: 0)
    cb88:	0001229c 	muleq	r1, ip, r2
    cb8c:	00780900 	rsbseq	r0, r8, r0, lsl #18
    cb90:	01227201 	teqeq	r2, r1, lsl #4
    cb94:	1fa10000 	svcne	0x00a10000
    cb98:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    cb9c:	25780100 	ldrbcs	r0, [r8, #-256]!	; 0x100
    cba0:	00000000 	andeq	r0, r0, r0
    cba4:	94040400 	strls	r0, [r4], #-1024	; 0x400
    cba8:	00000000 	andeq	r0, r0, r0
    cbac:	000000ce 	andeq	r0, r0, lr, asr #1
    cbb0:	2a010004 	bcs	4cbc8 <_Min_Stack_Size+0x4c7c8>
    cbb4:	01040000 	mrseq	r0, (UNDEF: 4)
    cbb8:	00004f5b 	andeq	r4, r0, fp, asr pc
    cbbc:	00546001 	subseq	r6, r4, r1
    cbc0:	00532800 	subseq	r2, r3, r0, lsl #16
    cbc4:	000ed000 	andeq	sp, lr, r0
    cbc8:	00000000 	andeq	r0, r0, r0
    cbcc:	005dd100 	subseq	sp, sp, r0, lsl #2
    cbd0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    cbd4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    cbd8:	2b070403 	blcs	1cdbec <_Min_Stack_Size+0x1cd7ec>
    cbdc:	03000001 	movweq	r0, #1
    cbe0:	01450601 	cmpeq	r5, r1, lsl #12
    cbe4:	01030000 	mrseq	r0, (UNDEF: 3)
    cbe8:	00014308 	andeq	r4, r1, r8, lsl #6
    cbec:	05020300 	streq	r0, [r2, #-768]	; 0x300
    cbf0:	0000017f 	andeq	r0, r0, pc, ror r1
    cbf4:	0e070203 	cdpeq	2, 0, cr0, cr7, cr3, {0}
    cbf8:	03000000 	movweq	r0, #0
    cbfc:	00050504 	andeq	r0, r5, r4, lsl #10
    cc00:	04030000 	streq	r0, [r3], #-0
    cc04:	00012607 	andeq	r2, r1, r7, lsl #12
    cc08:	05080300 	streq	r0, [r8, #-768]	; 0x300
    cc0c:	00000000 	andeq	r0, r0, r0
    cc10:	21070803 	tstcs	r7, r3, lsl #16
    cc14:	03000001 	movweq	r0, #1
    cc18:	01920704 	orrseq	r0, r2, r4, lsl #14
    cc1c:	01030000 	mrseq	r0, (UNDEF: 3)
    cc20:	00014c08 	andeq	r4, r1, r8, lsl #24
    cc24:	7f040400 	svcvc	0x00040400
    cc28:	05000000 	streq	r0, [r0, #-0]
    cc2c:	00000072 	andeq	r0, r0, r2, ror r0
    cc30:	68040803 	stmdavs	r4, {r0, r1, fp}
    cc34:	03000001 	movweq	r0, #1
    cc38:	01790404 	cmneq	r9, r4, lsl #8
    cc3c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cc40:	00016304 	andeq	r6, r1, r4, lsl #6
    cc44:	616e0600 	cmnvs	lr, r0, lsl #12
    cc48:	0302006e 	movweq	r0, #8302	; 0x206e
    cc4c:	00008401 	andeq	r8, r0, r1, lsl #8
    cc50:	00c5b800 	sbceq	fp, r5, r0, lsl #16
    cc54:	00000a08 	andeq	r0, r0, r8, lsl #20
    cc58:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    cc5c:	000058ab 	andeq	r5, r0, fp, lsr #17
    cc60:	00792801 	rsbseq	r2, r9, r1, lsl #16
    cc64:	1fc20000 	svcne	0x00c20000
    cc68:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    cc6c:	842a0100 	strthi	r0, [sl], #-256	; 0x100
    cc70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    cc74:	00000000 	andeq	r0, r0, r0
    cc78:	7ff80000 	svcvc	0x00f80000
    cc7c:	020a0000 	andeq	r0, sl, #0
    cc80:	00040000 	andeq	r0, r4, r0
    cc84:	00002a73 	andeq	r2, r0, r3, ror sl
    cc88:	4f5b0104 	svcmi	0x005b0104
    cc8c:	01010000 	mrseq	r0, (UNDEF: 1)
    cc90:	90000055 	andls	r0, r0, r5, asr r0
    cc94:	f8000054 			; <UNDEFINED> instruction: 0xf8000054
    cc98:	0000000e 	andeq	r0, r0, lr
    cc9c:	80000000 	andhi	r0, r0, r0
    cca0:	0200005e 	andeq	r0, r0, #94	; 0x5e
    cca4:	01680408 	cmneq	r8, r8, lsl #8
    cca8:	04030000 	streq	r0, [r3], #-0
    ccac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    ccb0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ccb4:	0000012b 	andeq	r0, r0, fp, lsr #2
    ccb8:	45060102 	strmi	r0, [r6, #-258]	; 0x102
    ccbc:	02000001 	andeq	r0, r0, #1
    ccc0:	01430801 	cmpeq	r3, r1, lsl #16
    ccc4:	02020000 	andeq	r0, r2, #0
    ccc8:	00017f05 	andeq	r7, r1, r5, lsl #30
    cccc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    ccd0:	0000000e 	andeq	r0, r0, lr
    ccd4:	00016f04 	andeq	r6, r1, r4, lsl #30
    ccd8:	613f0200 	teqvs	pc, r0, lsl #4
    ccdc:	02000000 	andeq	r0, r0, #0
    cce0:	00050504 	andeq	r0, r5, r4, lsl #10
    cce4:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    cce8:	02000004 	andeq	r0, r0, #4
    ccec:	00007341 	andeq	r7, r0, r1, asr #6
    ccf0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ccf4:	00000126 	andeq	r0, r0, r6, lsr #2
    ccf8:	00050802 	andeq	r0, r5, r2, lsl #16
    ccfc:	02000000 	andeq	r0, r0, #0
    cd00:	01210708 	teqeq	r1, r8, lsl #14
    cd04:	04020000 	streq	r0, [r2], #-0
    cd08:	00019207 	andeq	r9, r1, r7, lsl #4
    cd0c:	08010200 	stmdaeq	r1, {r9}
    cd10:	0000014c 	andeq	r0, r0, ip, asr #2
    cd14:	79040402 	stmdbvc	r4, {r1, sl}
    cd18:	02000001 	andeq	r0, r0, #1
    cd1c:	01630408 	cmneq	r3, r8, lsl #8
    cd20:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    cd24:	c8010f03 	stmdagt	r1, {r0, r1, r8, r9, sl, fp}
    cd28:	06000000 	streq	r0, [r0], -r0
    cd2c:	0077736c 	rsbseq	r7, r7, ip, ror #6
    cd30:	68011103 	stmdavs	r1, {r0, r1, r8, ip}
    cd34:	00000000 	andeq	r0, r0, r0
    cd38:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    cd3c:	01120300 	tsteq	r2, r0, lsl #6
    cd40:	00000068 	andeq	r0, r0, r8, rrx
    cd44:	08070004 	stmdaeq	r7, {r2}
    cd48:	ea010c03 	b	4fd5c <_Min_Stack_Size+0x4f95c>
    cd4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    cd50:	000055fa 	strdeq	r5, [r0], -sl
    cd54:	25010e03 	strcs	r0, [r1, #-3587]	; 0xe03
    cd58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    cd5c:	00004f55 	andeq	r4, r0, r5, asr pc
    cd60:	a4011303 	strge	r1, [r1], #-771	; 0x303
    cd64:	00000000 	andeq	r0, r0, r0
    cd68:	004f2a09 	subeq	r2, pc, r9, lsl #20
    cd6c:	01140300 	tsteq	r4, r0, lsl #6
    cd70:	000000c8 	andeq	r0, r0, r8, asr #1
    cd74:	0051ca0a 	subseq	ip, r1, sl, lsl #20
    cd78:	010c0400 	tsteq	ip, r0, lsl #8
    cd7c:	00000025 	andeq	r0, r0, r5, lsr #32
    cd80:	0800c5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, lr, pc}
    cd84:	00000120 	andeq	r0, r0, r0, lsr #2
    cd88:	01e29c01 	mvneq	r9, r1, lsl #24
    cd8c:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    cd90:	25530100 	ldrbcs	r0, [r3, #-256]	; 0x100
    cd94:	e3000000 	movw	r0, #0
    cd98:	0c00001f 	stceq	0, cr0, [r0], {31}
    cd9c:	01003069 	tsteq	r0, r9, rrx
    cda0:	00005659 	andeq	r5, r0, r9, asr r6
    cda4:	00207b00 	eoreq	r7, r0, r0, lsl #22
    cda8:	306a0d00 	rsbcc	r0, sl, r0, lsl #26
    cdac:	56590100 	ldrbpl	r0, [r9], -r0, lsl #2
    cdb0:	01000000 	mrseq	r0, (UNDEF: 0)
    cdb4:	78730c56 	ldmdavc	r3!, {r1, r2, r4, r6, sl, fp}^
    cdb8:	56590100 	ldrbpl	r0, [r9], -r0, lsl #2
    cdbc:	ba000000 	blt	cdc4 <_Min_Stack_Size+0xc9c4>
    cdc0:	0c000020 	stceq	0, cr0, [r0], {32}
    cdc4:	5a010069 	bpl	4cf70 <_Min_Stack_Size+0x4cb70>
    cdc8:	00000068 	andeq	r0, r0, r8, rrx
    cdcc:	000020e7 	andeq	r2, r0, r7, ror #1
    cdd0:	0031690c 	eorseq	r6, r1, ip, lsl #18
    cdd4:	00685a01 	rsbeq	r5, r8, r1, lsl #20
    cdd8:	21290000 	teqcs	r9, r0
    cddc:	740c0000 	strvc	r0, [ip], #-0
    cde0:	255b0100 	ldrbcs	r0, [fp, #-256]	; 0x100
    cde4:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    cde8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    cdec:	5c010077 	stcpl	0, cr0, [r1], {119}	; 0x77
    cdf0:	000001e2 	andeq	r0, r0, r2, ror #3
    cdf4:	0e589102 	logeqe	f1, f2
    cdf8:	0800c5d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr, pc}
    cdfc:	00000006 	andeq	r0, r0, r6
    ce00:	00000196 	muleq	r0, r6, r1
    ce04:	0052960f 	subseq	r9, r2, pc, lsl #12
    ce08:	ea5d0100 	b	174d210 <_Min_Stack_Size+0x174ce10>
    ce0c:	96000000 	strls	r0, [r0], -r0
    ce10:	00000021 	andeq	r0, r0, r1, lsr #32
    ce14:	000ee010 	andeq	lr, lr, r0, lsl r0
    ce18:	0001af00 	andeq	sl, r1, r0, lsl #30
    ce1c:	52f40f00 	rscspl	r0, r4, #0, 30
    ce20:	7f010000 	svcvc	0x00010000
    ce24:	000000ea 	andeq	r0, r0, sl, ror #1
    ce28:	0000225e 	andeq	r2, r0, lr, asr r2
    ce2c:	c6b40e00 	ldrtgt	r0, [r4], r0, lsl #28
    ce30:	00040800 	andeq	r0, r4, r0, lsl #16
    ce34:	01cc0000 	biceq	r0, ip, r0
    ce38:	ba0f0000 	blt	3cce40 <_Min_Stack_Size+0x3cca40>
    ce3c:	01000050 	qaddeq	r0, r0, r0
    ce40:	0000ea66 	andeq	lr, r0, r6, ror #20
    ce44:	00227600 	eoreq	r7, r2, r0, lsl #12
    ce48:	d4110000 	ldrle	r0, [r1], #-0
    ce4c:	080800c6 	stmdaeq	r8, {r1, r2, r6, r7}
    ce50:	12000000 	andne	r0, r0, #0
    ce54:	000050ba 	strheq	r5, [r0], -sl
    ce58:	00ea6a01 	rsceq	r6, sl, r1, lsl #20
    ce5c:	00000000 	andeq	r0, r0, r0
    ce60:	00002513 	andeq	r2, r0, r3, lsl r5
    ce64:	00251400 	eoreq	r1, r5, r0, lsl #8
    ce68:	01f70000 	mvnseq	r0, r0
    ce6c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    ce70:	01000000 	mrseq	r0, (UNDEF: 0)
    ce74:	54fb1600 	ldrbtpl	r1, [fp], #1536	; 0x600
    ce78:	4d010000 	stcmi	0, cr0, [r1, #-0]
    ce7c:	00000208 	andeq	r0, r0, r8, lsl #4
    ce80:	f2980305 	vsubw.s16	q0, q4, d5
    ce84:	e7170800 	ldr	r0, [r7, -r0, lsl #16]
    ce88:	00000001 	andeq	r0, r0, r1
    ce8c:	0000028b 	andeq	r0, r0, fp, lsl #5
    ce90:	2b9e0004 	blcs	fe78cea8 <_estack+0xde75cea8>
    ce94:	01040000 	mrseq	r0, (UNDEF: 4)
    ce98:	00004f5b 	andeq	r4, r0, fp, asr pc
    ce9c:	00554001 	subseq	r4, r5, r1
    cea0:	00532800 	subseq	r2, r3, r0, lsl #16
    cea4:	000f2800 	andeq	r2, pc, r0, lsl #16
    cea8:	00000000 	andeq	r0, r0, r0
    ceac:	005ff000 	subseq	pc, pc, r0
    ceb0:	04080200 	streq	r0, [r8], #-512	; 0x200
    ceb4:	00000168 	andeq	r0, r0, r8, ror #2
    ceb8:	69050403 	stmdbvs	r5, {r0, r1, sl}
    cebc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    cec0:	012b0704 	teqeq	fp, r4, lsl #14
    cec4:	01020000 	mrseq	r0, (UNDEF: 2)
    cec8:	00014506 	andeq	r4, r1, r6, lsl #10
    cecc:	08010200 	stmdaeq	r1, {r9}
    ced0:	00000143 	andeq	r0, r0, r3, asr #2
    ced4:	7f050202 	svcvc	0x00050202
    ced8:	02000001 	andeq	r0, r0, #1
    cedc:	000e0702 	andeq	r0, lr, r2, lsl #14
    cee0:	6f040000 	svcvs	0x00040000
    cee4:	02000001 	andeq	r0, r0, #1
    cee8:	0000613f 	andeq	r6, r0, pc, lsr r1
    ceec:	05040200 	streq	r0, [r4, #-512]	; 0x200
    cef0:	00000005 	andeq	r0, r0, r5
    cef4:	0004f404 	andeq	pc, r4, r4, lsl #8
    cef8:	73410200 	movtvc	r0, #4608	; 0x1200
    cefc:	02000000 	andeq	r0, r0, #0
    cf00:	01260704 	teqeq	r6, r4, lsl #14
    cf04:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cf08:	00000005 	andeq	r0, r0, r5
    cf0c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    cf10:	00000121 	andeq	r0, r0, r1, lsr #2
    cf14:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    cf18:	02000001 	andeq	r0, r0, #1
    cf1c:	014c0801 	cmpeq	ip, r1, lsl #16
    cf20:	04020000 	streq	r0, [r2], #-0
    cf24:	00017904 	andeq	r7, r1, r4, lsl #18
    cf28:	04080200 	streq	r0, [r8], #-512	; 0x200
    cf2c:	00000163 	andeq	r0, r0, r3, ror #2
    cf30:	0f030805 	svceq	0x00030805
    cf34:	0000c801 	andeq	ip, r0, r1, lsl #16
    cf38:	736c0600 	cmnvc	ip, #0, 12
    cf3c:	11030077 	tstne	r3, r7, ror r0
    cf40:	00006801 	andeq	r6, r0, r1, lsl #16
    cf44:	6d060000 	stcvs	0, cr0, [r6, #-0]
    cf48:	03007773 	movweq	r7, #1907	; 0x773
    cf4c:	00680112 	rsbeq	r0, r8, r2, lsl r1
    cf50:	00040000 	andeq	r0, r4, r0
    cf54:	0c030807 	stceq	8, cr0, [r3], {7}
    cf58:	0000ea01 	andeq	lr, r0, r1, lsl #20
    cf5c:	55fa0800 	ldrbpl	r0, [sl, #2048]!	; 0x800
    cf60:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    cf64:	00002501 	andeq	r2, r0, r1, lsl #10
    cf68:	4f550800 	svcmi	0x00550800
    cf6c:	13030000 	movwne	r0, #12288	; 0x3000
    cf70:	0000a401 	andeq	sl, r0, r1, lsl #8
    cf74:	2a090000 	bcs	24cf7c <_Min_Stack_Size+0x24cb7c>
    cf78:	0300004f 	movweq	r0, #79	; 0x4f
    cf7c:	00c80114 	sbceq	r0, r8, r4, lsl r1
    cf80:	770a0000 	strvc	r0, [sl, -r0]
    cf84:	04000052 	streq	r0, [r0], #-82	; 0x52
    cf88:	0025010d 	eoreq	r0, r5, sp, lsl #2
    cf8c:	c6e80000 	strbtgt	r0, [r8], r0
    cf90:	01180800 	tsteq	r8, r0, lsl #16
    cf94:	9c010000 	stcls	0, cr0, [r1], {-0}
    cf98:	00000222 	andeq	r0, r0, r2, lsr #4
    cf9c:	0100780b 	tsteq	r0, fp, lsl #16
    cfa0:	0000254f 	andeq	r2, r0, pc, asr #10
    cfa4:	00228e00 	eoreq	r8, r2, r0, lsl #28
    cfa8:	006e0b00 	rsbeq	r0, lr, r0, lsl #22
    cfac:	002c4f01 	eoreq	r4, ip, r1, lsl #30
    cfb0:	22e60000 	rsccs	r0, r6, #0
    cfb4:	6b0c0000 	blvs	30cfbc <_Min_Stack_Size+0x30cbbc>
    cfb8:	56550100 	ldrbpl	r0, [r5], -r0, lsl #2
    cfbc:	12000000 	andne	r0, r0, #0
    cfc0:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    cfc4:	01007868 	tsteq	r0, r8, ror #16
    cfc8:	00005655 	andeq	r5, r0, r5, asr r6
    cfcc:	0023c800 	eoreq	ip, r3, r0, lsl #16
    cfd0:	786c0c00 	stmdavc	ip!, {sl, fp}^
    cfd4:	56550100 	ldrbpl	r0, [r5], -r0, lsl #2
    cfd8:	8b000000 	blhi	cfe0 <_Min_Stack_Size+0xcbe0>
    cfdc:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    cfe0:	0800c6f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, lr, pc}
    cfe4:	00000002 	andeq	r0, r0, r2
    cfe8:	00000170 	andeq	r0, r0, r0, ror r1
    cfec:	0052960e 	subseq	r9, r2, lr, lsl #12
    cff0:	ea560100 	b	158d3f8 <_Min_Stack_Size+0x158cff8>
    cff4:	bf000000 	svclt	0x00000000
    cff8:	00000024 	andeq	r0, r0, r4, lsr #32
    cffc:	00c7240d 	sbceq	r2, r7, sp, lsl #8
    d000:	00000208 	andeq	r0, r0, r8, lsl #4
    d004:	00018900 	andeq	r8, r1, r0, lsl #18
    d008:	4f500f00 	svcmi	0x00500f00
    d00c:	5b010000 	blpl	4d014 <_Min_Stack_Size+0x4cc14>
    d010:	000000ea 	andeq	r0, r0, sl, ror #1
    d014:	c7620d00 	strbgt	r0, [r2, -r0, lsl #26]!
    d018:	00100800 	andseq	r0, r0, r0, lsl #16
    d01c:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    d020:	ba0e0000 	blt	38d028 <_Min_Stack_Size+0x38cc28>
    d024:	01000050 	qaddeq	r0, r0, r0
    d028:	0000ea63 	andeq	lr, r0, r3, ror #20
    d02c:	0024e700 	eoreq	lr, r4, r0, lsl #14
    d030:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    d034:	bf00000f 	svclt	0x0000000f
    d038:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    d03c:	000050ba 	strheq	r5, [r0], -sl
    d040:	00ea6a01 	rsceq	r6, sl, r1, lsl #20
    d044:	24ff0000 	ldrbtcs	r0, [pc], #0	; d04c <_Min_Stack_Size+0xcc4c>
    d048:	11000000 	mrsne	r0, (UNDEF: 0)
    d04c:	0800c73e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, lr, pc}
    d050:	00000277 	andeq	r0, r0, r7, ror r2
    d054:	000001e1 	andeq	r0, r0, r1, ror #3
    d058:	93500612 	cmpls	r0, #18874368	; 0x1200000
    d05c:	04935104 	ldreq	r5, [r3], #260	; 0x104
    d060:	0825f40b 	stmdaeq	r5!, {r0, r1, r3, sl, ip, sp, lr, pc}
    d064:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    d068:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    d06c:	c7961100 	ldrgt	r1, [r6, r0, lsl #2]
    d070:	02770800 	rsbseq	r0, r7, #0, 16
    d074:	02030000 	andeq	r0, r3, #0
    d078:	06120000 	ldreq	r0, [r2], -r0
    d07c:	51049350 	tstpl	r4, r0, asr r3
    d080:	f40b0493 	vst3.32	{d0-d2}, [fp :64], r3
    d084:	f3590825 	vsub.i16	d16, d9, d21
    d088:	6e1fc2f8 	mrcvs	2, 0, ip, cr15, cr8, {7}
    d08c:	130001a5 	movwne	r0, #421	; 0x1a5
    d090:	0800c7dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, lr, pc}
    d094:	00000277 	andeq	r0, r0, r7, ror r2
    d098:	93500612 	cmpls	r0, #18874368	; 0x1200000
    d09c:	04935104 	ldreq	r5, [r3], #260	; 0x104
    d0a0:	0825f40b 	stmdaeq	r5!, {r0, r1, r3, sl, ip, sp, lr, pc}
    d0a4:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    d0a8:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    d0ac:	3a140000 	bcc	50d0b4 <_Min_Stack_Size+0x50ccb4>
    d0b0:	01000055 	qaddeq	r0, r5, r0
    d0b4:	00023649 	andeq	r3, r2, r9, asr #12
    d0b8:	00000800 	andeq	r0, r0, r0, lsl #16
    d0bc:	00000000 	andeq	r0, r0, r0
    d0c0:	25154350 	ldrcs	r4, [r5, #-848]	; 0x350
    d0c4:	14000000 	strne	r0, [r0], #-0
    d0c8:	0000557c 	andeq	r5, r0, ip, ror r5
    d0cc:	02364a01 	eorseq	r4, r6, #4096	; 0x1000
    d0d0:	00080000 	andeq	r0, r8, r0
    d0d4:	00000000 	andeq	r0, r0, r0
    d0d8:	143c9000 	ldrtne	r9, [ip], #-0
    d0dc:	00004f41 	andeq	r4, r0, r1, asr #30
    d0e0:	02364b01 	eorseq	r4, r6, #1024	; 0x400
    d0e4:	9c080000 	stcls	0, cr0, [r8], {-0}
    d0e8:	3c880075 	stccc	0, cr0, [r8], {117}	; 0x75
    d0ec:	147e37e4 	ldrbtne	r3, [lr], #-2020	; 0x7e4
    d0f0:	000052a7 	andeq	r5, r0, r7, lsr #5
    d0f4:	02364c01 	eorseq	r4, r6, #256	; 0x100
    d0f8:	59080000 	stmdbpl	r8, {}	; <UNPREDICTABLE>
    d0fc:	1fc2f8f3 	svcne	0x00c2f8f3
    d100:	1601a56e 	strne	sl, [r1], -lr, ror #10
    d104:	00005573 	andeq	r5, r0, r3, ror r5
    d108:	25010504 	strcs	r0, [r1, #-1284]	; 0x504
    d10c:	17000000 	strne	r0, [r0, -r0]
    d110:	00000025 	andeq	r0, r0, r5, lsr #32
    d114:	00002517 	andeq	r2, r0, r7, lsl r5
    d118:	4d000000 	stcmi	0, cr0, [r0, #-0]
    d11c:	04000001 	streq	r0, [r0], #-1
    d120:	002cd600 	eoreq	sp, ip, r0, lsl #12
    d124:	5b010400 	blpl	4e12c <_Min_Stack_Size+0x4dd2c>
    d128:	0100004f 	tsteq	r0, pc, asr #32
    d12c:	00005583 	andeq	r5, r0, r3, lsl #11
    d130:	00005328 	andeq	r5, r0, r8, lsr #6
    d134:	00000f38 	andeq	r0, r0, r8, lsr pc
    d138:	00000000 	andeq	r0, r0, r0
    d13c:	0000613f 	andeq	r6, r0, pc, lsr r1
    d140:	68040802 	stmdavs	r4, {r1, fp}
    d144:	03000001 	movweq	r0, #1
    d148:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d14c:	04020074 	streq	r0, [r2], #-116	; 0x74
    d150:	00012b07 	andeq	r2, r1, r7, lsl #22
    d154:	06010200 	streq	r0, [r1], -r0, lsl #4
    d158:	00000145 	andeq	r0, r0, r5, asr #2
    d15c:	43080102 	movwmi	r0, #33026	; 0x8102
    d160:	02000001 	andeq	r0, r0, #1
    d164:	017f0502 	cmneq	pc, r2, lsl #10
    d168:	02020000 	andeq	r0, r2, #0
    d16c:	00000e07 	andeq	r0, r0, r7, lsl #28
    d170:	05040200 	streq	r0, [r4, #-512]	; 0x200
    d174:	00000005 	andeq	r0, r0, r5
    d178:	0004f404 	andeq	pc, r4, r4, lsl #8
    d17c:	68410300 	stmdavs	r1, {r8, r9}^
    d180:	02000000 	andeq	r0, r0, #0
    d184:	01260704 	teqeq	r6, r4, lsl #14
    d188:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d18c:	00000005 	andeq	r0, r0, r5
    d190:	07080200 	streq	r0, [r8, -r0, lsl #4]
    d194:	00000121 	andeq	r0, r0, r1, lsr #2
    d198:	92070402 	andls	r0, r7, #33554432	; 0x2000000
    d19c:	02000001 	andeq	r0, r0, #1
    d1a0:	014c0801 	cmpeq	ip, r1, lsl #16
    d1a4:	04020000 	streq	r0, [r2], #-0
    d1a8:	00017904 	andeq	r7, r1, r4, lsl #18
    d1ac:	04080200 	streq	r0, [r8], #-512	; 0x200
    d1b0:	00000163 	andeq	r0, r0, r3, ror #2
    d1b4:	0f020805 	svceq	0x00020805
    d1b8:	0000bd01 	andeq	fp, r0, r1, lsl #26
    d1bc:	736c0600 	cmnvc	ip, #0, 12
    d1c0:	11020077 	tstne	r2, r7, ror r0
    d1c4:	00005d01 	andeq	r5, r0, r1, lsl #26
    d1c8:	6d060000 	stcvs	0, cr0, [r6, #-0]
    d1cc:	02007773 	andeq	r7, r0, #30146560	; 0x1cc0000
    d1d0:	005d0112 	subseq	r0, sp, r2, lsl r1
    d1d4:	00040000 	andeq	r0, r4, r0
    d1d8:	0c020807 	stceq	8, cr0, [r2], {7}
    d1dc:	0000df01 	andeq	sp, r0, r1, lsl #30
    d1e0:	55fa0800 	ldrbpl	r0, [sl, #2048]!	; 0x800
    d1e4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    d1e8:	00002501 	andeq	r2, r0, r1, lsl #10
    d1ec:	4f550800 	svcmi	0x00550800
    d1f0:	13020000 	movwne	r0, #8192	; 0x2000
    d1f4:	00009901 	andeq	r9, r0, r1, lsl #18
    d1f8:	2a090000 	bcs	24d200 <_Min_Stack_Size+0x24ce00>
    d1fc:	0200004f 	andeq	r0, r0, #79	; 0x4f
    d200:	00bd0114 	adcseq	r0, sp, r4, lsl r1
    d204:	730a0000 	movwvc	r0, #40960	; 0xa000
    d208:	04000055 	streq	r0, [r0], #-85	; 0x55
    d20c:	00250105 	eoreq	r0, r5, r5, lsl #2
    d210:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    d214:	00120800 	andseq	r0, r2, r0, lsl #16
    d218:	9c010000 	stcls	0, cr0, [r1], {-0}
    d21c:	0100780b 	tsteq	r0, fp, lsl #16
    d220:	00002545 	andeq	r2, r0, r5, asr #10
    d224:	93500600 	cmpls	r0, #0, 12
    d228:	04935104 	ldreq	r5, [r3], #260	; 0x104
    d22c:	0100790c 	tsteq	r0, ip, lsl #18
    d230:	00002545 	andeq	r2, r0, r5, asr #10
    d234:	00251700 	eoreq	r1, r5, r0, lsl #14
    d238:	78680d00 	stmdavc	r8!, {r8, sl, fp}^
    d23c:	5d4b0100 	stfple	f0, [fp, #-0]
    d240:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    d244:	01007968 	tsteq	r0, r8, ror #18
    d248:	00005d4b 	andeq	r5, r0, fp, asr #26
    d24c:	00253f00 	eoreq	r3, r5, r0, lsl #30
    d250:	c8020f00 	stmdagt	r2, {r8, r9, sl, fp}
    d254:	000c0800 	andeq	r0, ip, r0, lsl #16
    d258:	ba100000 	blt	40d260 <_Min_Stack_Size+0x40ce60>
    d25c:	01000050 	qaddeq	r0, r0, r0
    d260:	0000df4e 	andeq	sp, r0, lr, asr #30
    d264:	00255200 	eoreq	r5, r5, r0, lsl #4
    d268:	00000000 	andeq	r0, r0, r0
    d26c:	00000885 	andeq	r0, r0, r5, lsl #17
    d270:	2dbc0004 	ldccs	0, cr0, [ip, #16]!
    d274:	01040000 	mrseq	r0, (UNDEF: 4)
    d278:	00004f5b 	andeq	r4, r0, fp, asr pc
    d27c:	00580b01 	subseq	r0, r8, r1, lsl #22
    d280:	00560700 	subseq	r0, r6, r0, lsl #14
    d284:	000f4800 	andeq	r4, pc, r0, lsl #16
    d288:	00000000 	andeq	r0, r0, r0
    d28c:	00625e00 	rsbeq	r5, r2, r0, lsl #28
    d290:	05040200 	streq	r0, [r4, #-512]	; 0x200
    d294:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d298:	2b070403 	blcs	1ce2ac <_Min_Stack_Size+0x1cdeac>
    d29c:	03000001 	movweq	r0, #1
    d2a0:	01450601 	cmpeq	r5, r1, lsl #12
    d2a4:	01030000 	mrseq	r0, (UNDEF: 3)
    d2a8:	00014308 	andeq	r4, r1, r8, lsl #6
    d2ac:	05020300 	streq	r0, [r2, #-768]	; 0x300
    d2b0:	0000017f 	andeq	r0, r0, pc, ror r1
    d2b4:	0e070203 	cdpeq	2, 0, cr0, cr7, cr3, {0}
    d2b8:	03000000 	movweq	r0, #0
    d2bc:	00050504 	andeq	r0, r5, r4, lsl #10
    d2c0:	04030000 	streq	r0, [r3], #-0
    d2c4:	00012607 	andeq	r2, r1, r7, lsl #12
    d2c8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    d2cc:	00000000 	andeq	r0, r0, r0
    d2d0:	21070803 	tstcs	r7, r3, lsl #16
    d2d4:	04000001 	streq	r0, [r0], #-1
    d2d8:	00005714 	andeq	r5, r0, r4, lsl r7
    d2dc:	00250702 	eoreq	r0, r5, r2, lsl #14
    d2e0:	e2040000 	and	r0, r4, #0
    d2e4:	03000055 	movweq	r0, #85	; 0x55
    d2e8:	00004f10 	andeq	r4, r0, r0, lsl pc
    d2ec:	57bf0400 	ldrpl	r0, [pc, r0, lsl #8]!
    d2f0:	27030000 	strcs	r0, [r3, -r0]
    d2f4:	0000004f 	andeq	r0, r0, pc, asr #32
    d2f8:	0058c005 	subseq	ip, r8, r5
    d2fc:	01610400 	cmneq	r1, r0, lsl #8
    d300:	0000002c 	andeq	r0, r0, ip, lsr #32
    d304:	4a030406 	bmi	ce324 <_Min_Stack_Size+0xcdf24>
    d308:	000000b7 	strheq	r0, [r0], -r7
    d30c:	0055e907 	subseq	lr, r5, r7, lsl #18
    d310:	8c4c0300 	mcrrhi	3, 0, r0, ip, cr0
    d314:	07000000 	streq	r0, [r0, -r0]
    d318:	00005804 	andeq	r5, r0, r4, lsl #16
    d31c:	00b74d03 	adcseq	r4, r7, r3, lsl #26
    d320:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d324:	0000003a 	andeq	r0, r0, sl, lsr r0
    d328:	000000c7 	andeq	r0, r0, r7, asr #1
    d32c:	0000c709 	andeq	ip, r0, r9, lsl #14
    d330:	03000300 	movweq	r0, #768	; 0x300
    d334:	01920704 	orrseq	r0, r2, r4, lsl #14
    d338:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    d33c:	00ef4703 	rsceq	r4, pc, r3, lsl #14
    d340:	bd0b0000 	stclt	0, cr0, [fp, #-0]
    d344:	03000056 	movweq	r0, #86	; 0x56
    d348:	00002549 	andeq	r2, r0, r9, asr #10
    d34c:	f80b0000 			; <UNDEFINED> instruction: 0xf80b0000
    d350:	03000055 	movweq	r0, #85	; 0x55
    d354:	0000984e 	andeq	r9, r0, lr, asr #16
    d358:	04000400 	streq	r0, [r0], #-1024	; 0x400
    d35c:	000058f9 	strdeq	r5, [r0], -r9
    d360:	00ce4f03 	sbceq	r4, lr, r3, lsl #30
    d364:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    d368:	03000057 	movweq	r0, #87	; 0x57
    d36c:	00006b53 	andeq	r6, r0, r3, asr fp
    d370:	04040c00 	streq	r0, [r4], #-3072	; 0xc00
    d374:	00005943 	andeq	r5, r0, r3, asr #18
    d378:	00561605 	subseq	r1, r6, r5, lsl #12
    d37c:	040d0000 	streq	r0, [sp], #-0
    d380:	18000059 	stmdane	r0, {r0, r3, r4, r6}
    d384:	01652d05 	cmneq	r5, r5, lsl #26
    d388:	960b0000 	strls	r0, [fp], -r0
    d38c:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d390:	0001652f 	andeq	r6, r1, pc, lsr #10
    d394:	5f0e0000 	svcpl	0x000e0000
    d398:	3005006b 	andcc	r0, r5, fp, rrx
    d39c:	00000025 	andeq	r0, r0, r5, lsr #32
    d3a0:	590c0b04 	stmdbpl	ip, {r2, r8, r9, fp}
    d3a4:	30050000 	andcc	r0, r5, r0
    d3a8:	00000025 	andeq	r0, r0, r5, lsr #32
    d3ac:	598b0b08 	stmibpl	fp, {r3, r8, r9, fp}
    d3b0:	30050000 	andcc	r0, r5, r0
    d3b4:	00000025 	andeq	r0, r0, r5, lsr #32
    d3b8:	58a00b0c 	stmiapl	r0!, {r2, r3, r8, r9, fp}
    d3bc:	30050000 	andcc	r0, r5, r0
    d3c0:	00000025 	andeq	r0, r0, r5, lsr #32
    d3c4:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
    d3c8:	6b310500 	blvs	c4e7d0 <_Min_Stack_Size+0xc4e3d0>
    d3cc:	14000001 	strne	r0, [r0], #-1
    d3d0:	12040f00 	andne	r0, r4, #0, 30
    d3d4:	08000001 	stmdaeq	r0, {r0}
    d3d8:	00000107 	andeq	r0, r0, r7, lsl #2
    d3dc:	0000017b 	andeq	r0, r0, fp, ror r1
    d3e0:	0000c709 	andeq	ip, r0, r9, lsl #14
    d3e4:	0d000000 	stceq	0, cr0, [r0, #-0]
    d3e8:	000058a5 	andeq	r5, r0, r5, lsr #17
    d3ec:	f4350524 			; <UNDEFINED> instruction: 0xf4350524
    d3f0:	0b000001 	bleq	d3fc <_Min_Stack_Size+0xcffc>
    d3f4:	000057d7 	ldrdeq	r5, [r0], -r7
    d3f8:	00253705 	eoreq	r3, r5, r5, lsl #14
    d3fc:	0b000000 	bleq	d404 <_Min_Stack_Size+0xd004>
    d400:	00005741 	andeq	r5, r0, r1, asr #14
    d404:	00253805 	eoreq	r3, r5, r5, lsl #16
    d408:	0b040000 	bleq	10d410 <_Min_Stack_Size+0x10d010>
    d40c:	000057e0 	andeq	r5, r0, r0, ror #15
    d410:	00253905 	eoreq	r3, r5, r5, lsl #18
    d414:	0b080000 	bleq	20d41c <_Min_Stack_Size+0x20d01c>
    d418:	000056c5 	andeq	r5, r0, r5, asr #13
    d41c:	00253a05 	eoreq	r3, r5, r5, lsl #20
    d420:	0b0c0000 	bleq	30d428 <_Min_Stack_Size+0x30d028>
    d424:	00005959 	andeq	r5, r0, r9, asr r9
    d428:	00253b05 	eoreq	r3, r5, r5, lsl #22
    d42c:	0b100000 	bleq	40d434 <_Min_Stack_Size+0x40d034>
    d430:	00005914 	andeq	r5, r0, r4, lsl r9
    d434:	00253c05 	eoreq	r3, r5, r5, lsl #24
    d438:	0b140000 	bleq	50d440 <_Min_Stack_Size+0x50d040>
    d43c:	00005775 	andeq	r5, r0, r5, ror r7
    d440:	00253d05 	eoreq	r3, r5, r5, lsl #26
    d444:	0b180000 	bleq	60d44c <_Min_Stack_Size+0x60d04c>
    d448:	00005939 	andeq	r5, r0, r9, lsr r9
    d44c:	00253e05 	eoreq	r3, r5, r5, lsl #28
    d450:	0b1c0000 	bleq	70d458 <_Min_Stack_Size+0x70d058>
    d454:	00005799 	muleq	r0, r9, r7
    d458:	00253f05 	eoreq	r3, r5, r5, lsl #30
    d45c:	00200000 	eoreq	r0, r0, r0
    d460:	00584b10 	subseq	r4, r8, r0, lsl fp
    d464:	05010800 	streq	r0, [r1, #-2048]	; 0x800
    d468:	00023448 	andeq	r3, r2, r8, asr #8
    d46c:	577f0b00 	ldrbpl	r0, [pc, -r0, lsl #22]!
    d470:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    d474:	00000234 	andeq	r0, r0, r4, lsr r2
    d478:	597f0b00 	ldmdbpl	pc!, {r8, r9, fp}^	; <UNPREDICTABLE>
    d47c:	4a050000 	bmi	14d484 <_Min_Stack_Size+0x14d084>
    d480:	00000234 	andeq	r0, r0, r4, lsr r2
    d484:	57b61180 	ldrpl	r1, [r6, r0, lsl #3]!
    d488:	4c050000 	stcmi	0, cr0, [r5], {-0}
    d48c:	00000107 	andeq	r0, r0, r7, lsl #2
    d490:	e7110100 	ldr	r0, [r1, -r0, lsl #2]
    d494:	05000058 	streq	r0, [r0, #-88]	; 0x58
    d498:	0001074f 	andeq	r0, r1, pc, asr #14
    d49c:	00010400 	andeq	r0, r1, r0, lsl #8
    d4a0:	00010508 	andeq	r0, r1, r8, lsl #10
    d4a4:	00024400 	andeq	r4, r2, r0, lsl #8
    d4a8:	00c70900 	sbceq	r0, r7, r0, lsl #18
    d4ac:	001f0000 	andseq	r0, pc, r0
    d4b0:	0056f310 	subseq	pc, r6, r0, lsl r3	; <UNPREDICTABLE>
    d4b4:	05019000 	streq	r9, [r1, #-0]
    d4b8:	0002825b 	andeq	r8, r2, fp, asr r2
    d4bc:	59960b00 	ldmibpl	r6, {r8, r9, fp}
    d4c0:	5c050000 	stcpl	0, cr0, [r5], {-0}
    d4c4:	00000282 	andeq	r0, r0, r2, lsl #5
    d4c8:	596c0b00 	stmdbpl	ip!, {r8, r9, fp}^
    d4cc:	5d050000 	stcpl	0, cr0, [r5, #-0]
    d4d0:	00000025 	andeq	r0, r0, r5, lsr #32
    d4d4:	57670b04 	strbpl	r0, [r7, -r4, lsl #22]!
    d4d8:	5f050000 	svcpl	0x00050000
    d4dc:	00000288 	andeq	r0, r0, r8, lsl #5
    d4e0:	584b0b08 	stmdapl	fp, {r3, r8, r9, fp}^
    d4e4:	60050000 	andvs	r0, r5, r0
    d4e8:	000001f4 	strdeq	r0, [r0], -r4
    d4ec:	040f0088 	streq	r0, [pc], #-136	; d4f4 <_Min_Stack_Size+0xd0f4>
    d4f0:	00000244 	andeq	r0, r0, r4, asr #4
    d4f4:	00029808 	andeq	r9, r2, r8, lsl #16
    d4f8:	00029800 	andeq	r9, r2, r0, lsl #16
    d4fc:	00c70900 	sbceq	r0, r7, r0, lsl #18
    d500:	001f0000 	andseq	r0, pc, r0
    d504:	029e040f 	addseq	r0, lr, #251658240	; 0xf000000
    d508:	0d120000 	ldceq	0, cr0, [r2, #-0]
    d50c:	00005600 	andeq	r5, r0, r0, lsl #12
    d510:	c4730508 	ldrbtgt	r0, [r3], #-1288	; 0x508
    d514:	0b000002 	bleq	d524 <_Min_Stack_Size+0xd124>
    d518:	00005878 	andeq	r5, r0, r8, ror r8
    d51c:	02c47405 	sbceq	r7, r4, #83886080	; 0x5000000
    d520:	0b000000 	bleq	d528 <_Min_Stack_Size+0xd128>
    d524:	000059cf 	andeq	r5, r0, pc, asr #19
    d528:	00257505 	eoreq	r7, r5, r5, lsl #10
    d52c:	00040000 	andeq	r0, r4, r0
    d530:	003a040f 	eorseq	r0, sl, pc, lsl #8
    d534:	e20d0000 	and	r0, sp, #0
    d538:	68000059 	stmdavs	r0, {r0, r3, r4, r6}
    d53c:	03f4b305 	mvnseq	fp, #335544320	; 0x14000000
    d540:	5f0e0000 	svcpl	0x000e0000
    d544:	b4050070 	strlt	r0, [r5], #-112	; 0x70
    d548:	000002c4 	andeq	r0, r0, r4, asr #5
    d54c:	725f0e00 	subsvc	r0, pc, #0, 28
    d550:	25b50500 	ldrcs	r0, [r5, #1280]!	; 0x500
    d554:	04000000 	streq	r0, [r0], #-0
    d558:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
    d55c:	0025b605 	eoreq	fp, r5, r5, lsl #12
    d560:	0b080000 	bleq	20d568 <_Min_Stack_Size+0x20d168>
    d564:	000056a0 	andeq	r5, r0, r0, lsr #13
    d568:	0041b705 	subeq	fp, r1, r5, lsl #14
    d56c:	0b0c0000 	bleq	30d574 <_Min_Stack_Size+0x30d174>
    d570:	0000587e 	andeq	r5, r0, lr, ror r8
    d574:	0041b805 	subeq	fp, r1, r5, lsl #16
    d578:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    d57c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    d580:	029fb905 	addseq	fp, pc, #81920	; 0x14000
    d584:	0b100000 	bleq	40d58c <_Min_Stack_Size+0x40d18c>
    d588:	000055ef 	andeq	r5, r0, pc, ror #11
    d58c:	0025ba05 	eoreq	fp, r5, r5, lsl #20
    d590:	0b180000 	bleq	60d598 <_Min_Stack_Size+0x60d198>
    d594:	00005870 	andeq	r5, r0, r0, ror r8
    d598:	0105c105 	tsteq	r5, r5, lsl #2
    d59c:	0b1c0000 	bleq	70d5a4 <_Min_Stack_Size+0x70d1a4>
    d5a0:	000057ea 	andeq	r5, r0, sl, ror #15
    d5a4:	0557c305 	ldrbeq	ip, [r7, #-773]	; 0x305
    d5a8:	0b200000 	bleq	80d5b0 <_Min_Stack_Size+0x80d1b0>
    d5ac:	000056a7 	andeq	r5, r0, r7, lsr #13
    d5b0:	0586c505 	streq	ip, [r6, #1285]	; 0x505
    d5b4:	0b240000 	bleq	90d5bc <_Min_Stack_Size+0x90d1bc>
    d5b8:	0000594b 	andeq	r5, r0, fp, asr #18
    d5bc:	05aac805 	streq	ip, [sl, #2053]!	; 0x805
    d5c0:	0b280000 	bleq	a0d5c8 <_Min_Stack_Size+0xa0d1c8>
    d5c4:	000057c7 	andeq	r5, r0, r7, asr #15
    d5c8:	05c4c905 	strbeq	ip, [r4, #2309]	; 0x905
    d5cc:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
    d5d0:	0062755f 	rsbeq	r7, r2, pc, asr r5
    d5d4:	029fcc05 	addseq	ip, pc, #1280	; 0x500
    d5d8:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    d5dc:	0070755f 	rsbseq	r7, r0, pc, asr r5
    d5e0:	02c4cd05 	sbceq	ip, r4, #320	; 0x140
    d5e4:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    d5e8:	0072755f 	rsbseq	r7, r2, pc, asr r5
    d5ec:	0025ce05 	eoreq	ip, r5, r5, lsl #28
    d5f0:	0b3c0000 	bleq	f0d5f8 <_Min_Stack_Size+0xf0d1f8>
    d5f4:	000059c9 	andeq	r5, r0, r9, asr #19
    d5f8:	05cad105 	strbeq	sp, [sl, #261]	; 0x105
    d5fc:	0b400000 	bleq	100d604 <_Min_Stack_Size+0x100d204>
    d600:	0000570e 	andeq	r5, r0, lr, lsl #14
    d604:	05dad205 	ldrbeq	sp, [sl, #517]	; 0x205
    d608:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
    d60c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    d610:	029fd505 	addseq	sp, pc, #20971520	; 0x1400000
    d614:	0b440000 	bleq	110d61c <_Min_Stack_Size+0x110d21c>
    d618:	000057ad 	andeq	r5, r0, sp, lsr #15
    d61c:	0025d805 	eoreq	sp, r5, r5, lsl #16
    d620:	0b4c0000 	bleq	130d628 <_Min_Stack_Size+0x130d228>
    d624:	00005676 	andeq	r5, r0, r6, ror r6
    d628:	0076d905 	rsbseq	sp, r6, r5, lsl #18
    d62c:	0b500000 	bleq	140d634 <_Min_Stack_Size+0x140d234>
    d630:	000059f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    d634:	0412dc05 	ldreq	sp, [r2], #-3077	; 0xc05
    d638:	0b540000 	bleq	150d640 <_Min_Stack_Size+0x150d240>
    d63c:	0000578d 	andeq	r5, r0, sp, lsl #15
    d640:	00fae005 	rscseq	lr, sl, r5
    d644:	0b580000 	bleq	160d64c <_Min_Stack_Size+0x160d24c>
    d648:	0000576c 	andeq	r5, r0, ip, ror #14
    d64c:	00efe205 	rsceq	lr, pc, r5, lsl #4
    d650:	0b5c0000 	bleq	170d658 <_Min_Stack_Size+0x170d258>
    d654:	000055c3 	andeq	r5, r0, r3, asr #11
    d658:	0025e305 	eoreq	lr, r5, r5, lsl #6
    d65c:	00640000 	rsbeq	r0, r4, r0
    d660:	00002513 	andeq	r2, r0, r3, lsl r5
    d664:	00041200 	andeq	r1, r4, r0, lsl #4
    d668:	04121400 	ldreq	r1, [r2], #-1024	; 0x400
    d66c:	05140000 	ldreq	r0, [r4, #-0]
    d670:	14000001 	strne	r0, [r0], #-1
    d674:	0000054a 	andeq	r0, r0, sl, asr #10
    d678:	00002514 	andeq	r2, r0, r4, lsl r5
    d67c:	040f0000 	streq	r0, [pc], #-0	; d684 <_Min_Stack_Size+0xd284>
    d680:	00000418 	andeq	r0, r0, r8, lsl r4
    d684:	0059b315 	subseq	fp, r9, r5, lsl r3
    d688:	05042800 	streq	r2, [r4, #-2048]	; 0x800
    d68c:	054a0239 	strbeq	r0, [sl, #-569]	; 0x239
    d690:	bb160000 	bllt	58d698 <_Min_Stack_Size+0x58d298>
    d694:	05000051 	streq	r0, [r0, #-81]	; 0x51
    d698:	0025023b 	eoreq	r0, r5, fp, lsr r2
    d69c:	16000000 	strne	r0, [r0], -r0
    d6a0:	0000599c 	muleq	r0, ip, r9
    d6a4:	31024005 	tstcc	r2, r5
    d6a8:	04000006 	streq	r0, [r0], #-6
    d6ac:	0056eb16 	subseq	lr, r6, r6, lsl fp
    d6b0:	02400500 	subeq	r0, r0, #0, 10
    d6b4:	00000631 	andeq	r0, r0, r1, lsr r6
    d6b8:	57fc1608 	ldrbpl	r1, [ip, r8, lsl #12]!
    d6bc:	40050000 	andmi	r0, r5, r0
    d6c0:	00063102 	andeq	r3, r6, r2, lsl #2
    d6c4:	67160c00 	ldrvs	r0, [r6, -r0, lsl #24]
    d6c8:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d6cc:	00250242 	eoreq	r0, r5, r2, asr #4
    d6d0:	16100000 	ldrne	r0, [r0], -r0
    d6d4:	000056fb 	strdeq	r5, [r0], -fp
    d6d8:	13024305 	movwne	r4, #8965	; 0x2305
    d6dc:	14000008 	strne	r0, [r0], #-8
    d6e0:	0058d516 	subseq	sp, r8, r6, lsl r5
    d6e4:	02450500 	subeq	r0, r5, #0, 10
    d6e8:	00000025 	andeq	r0, r0, r5, lsr #32
    d6ec:	59a31630 	stmibpl	r3!, {r4, r5, r9, sl, ip}
    d6f0:	46050000 	strmi	r0, [r5], -r0
    d6f4:	00057b02 	andeq	r7, r5, r2, lsl #22
    d6f8:	b8163400 	ldmdalt	r6, {sl, ip, sp}
    d6fc:	05000055 	streq	r0, [r0, #-85]	; 0x55
    d700:	00250248 	eoreq	r0, r5, r8, asr #4
    d704:	16380000 	ldrtne	r0, [r8], -r0
    d708:	000058ef 	andeq	r5, r0, pc, ror #17
    d70c:	2e024a05 	vmlacs.f32	s8, s4, s10
    d710:	3c000008 	stccc	0, cr0, [r0], {8}
    d714:	00595116 	subseq	r5, r9, r6, lsl r1
    d718:	024d0500 	subeq	r0, sp, #0, 10
    d71c:	00000165 	andeq	r0, r0, r5, ror #2
    d720:	566c1640 	strbtpl	r1, [ip], -r0, asr #12
    d724:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    d728:	00002502 	andeq	r2, r0, r2, lsl #10
    d72c:	f7164400 			; <UNDEFINED> instruction: 0xf7164400
    d730:	05000057 	streq	r0, [r0, #-87]	; 0x57
    d734:	0165024f 	cmneq	r5, pc, asr #4
    d738:	16480000 	strbne	r0, [r8], -r0
    d73c:	0000575d 	andeq	r5, r0, sp, asr r7
    d740:	34025005 	strcc	r5, [r2], #-5
    d744:	4c000008 	stcmi	0, cr0, [r0], {8}
    d748:	00570616 	subseq	r0, r7, r6, lsl r6
    d74c:	02530500 	subseq	r0, r3, #0, 10
    d750:	00000025 	andeq	r0, r0, r5, lsr #32
    d754:	58681650 	stmdapl	r8!, {r4, r6, r9, sl, ip}^
    d758:	54050000 	strpl	r0, [r5], #-0
    d75c:	00054a02 	andeq	r4, r5, r2, lsl #20
    d760:	ea165400 	b	5a2768 <_Min_Stack_Size+0x5a2368>
    d764:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d768:	07f10277 			; <UNDEFINED> instruction: 0x07f10277
    d76c:	17580000 	ldrbne	r0, [r8, -r0]
    d770:	000056f3 	strdeq	r5, [r0], -r3
    d774:	82027b05 	andhi	r7, r2, #5120	; 0x1400
    d778:	48000002 	stmdami	r0, {r1}
    d77c:	57a41701 	strpl	r1, [r4, r1, lsl #14]!
    d780:	7c050000 	stcvc	0, cr0, [r5], {-0}
    d784:	00024402 	andeq	r4, r2, r2, lsl #8
    d788:	17014c00 	strne	r4, [r1, -r0, lsl #24]
    d78c:	0000574a 	andeq	r5, r0, sl, asr #14
    d790:	45028005 	strmi	r8, [r2, #-5]
    d794:	dc000008 	stcle	0, cr0, [r0], {8}
    d798:	58431702 	stmdapl	r3, {r1, r8, r9, sl, ip}^
    d79c:	85050000 	strhi	r0, [r5, #-0]
    d7a0:	0005f602 	andeq	pc, r5, r2, lsl #12
    d7a4:	1702e000 	strne	lr, [r2, -r0]
    d7a8:	0000567e 	andeq	r5, r0, lr, ror r6
    d7ac:	51028605 	tstpl	r2, r5, lsl #12
    d7b0:	ec000008 	stc	0, cr0, [r0], {8}
    d7b4:	040f0002 	streq	r0, [pc], #-2	; d7bc <_Min_Stack_Size+0xd3bc>
    d7b8:	00000550 	andeq	r0, r0, r0, asr r5
    d7bc:	4c080103 	stfmis	f0, [r8], {3}
    d7c0:	0f000001 	svceq	0x00000001
    d7c4:	0003f404 	andeq	pc, r3, r4, lsl #8
    d7c8:	00251300 	eoreq	r1, r5, r0, lsl #6
    d7cc:	057b0000 	ldrbeq	r0, [fp, #-0]!
    d7d0:	12140000 	andsne	r0, r4, #0
    d7d4:	14000004 	strne	r0, [r0], #-4
    d7d8:	00000105 	andeq	r0, r0, r5, lsl #2
    d7dc:	00057b14 	andeq	r7, r5, r4, lsl fp
    d7e0:	00251400 	eoreq	r1, r5, r0, lsl #8
    d7e4:	0f000000 	svceq	0x00000000
    d7e8:	00058104 	andeq	r8, r5, r4, lsl #2
    d7ec:	05501800 	ldrbeq	r1, [r0, #-2048]	; 0x800
    d7f0:	040f0000 	streq	r0, [pc], #-0	; d7f8 <_Min_Stack_Size+0xd3f8>
    d7f4:	0000055d 	andeq	r0, r0, sp, asr r5
    d7f8:	00008113 	andeq	r8, r0, r3, lsl r1
    d7fc:	0005aa00 	andeq	sl, r5, r0, lsl #20
    d800:	04121400 	ldreq	r1, [r2], #-1024	; 0x400
    d804:	05140000 	ldreq	r0, [r4, #-0]
    d808:	14000001 	strne	r0, [r0], #-1
    d80c:	00000081 	andeq	r0, r0, r1, lsl #1
    d810:	00002514 	andeq	r2, r0, r4, lsl r5
    d814:	040f0000 	streq	r0, [pc], #-0	; d81c <_Min_Stack_Size+0xd41c>
    d818:	0000058c 	andeq	r0, r0, ip, lsl #11
    d81c:	00002513 	andeq	r2, r0, r3, lsl r5
    d820:	0005c400 	andeq	ip, r5, r0, lsl #8
    d824:	04121400 	ldreq	r1, [r2], #-1024	; 0x400
    d828:	05140000 	ldreq	r0, [r4, #-0]
    d82c:	00000001 	andeq	r0, r0, r1
    d830:	05b0040f 	ldreq	r0, [r0, #1039]!	; 0x40f
    d834:	3a080000 	bcc	20d83c <_Min_Stack_Size+0x20d43c>
    d838:	da000000 	ble	d840 <_Min_Stack_Size+0xd440>
    d83c:	09000005 	stmdbeq	r0, {r0, r2}
    d840:	000000c7 	andeq	r0, r0, r7, asr #1
    d844:	3a080002 	bcc	20d854 <_Min_Stack_Size+0x20d454>
    d848:	ea000000 	b	d850 <_Min_Stack_Size+0xd450>
    d84c:	09000005 	stmdbeq	r0, {r0, r2}
    d850:	000000c7 	andeq	r0, r0, r7, asr #1
    d854:	2d050000 	stccs	0, cr0, [r5, #-0]
    d858:	05000057 	streq	r0, [r0, #-87]	; 0x57
    d85c:	02ca011d 	sbceq	r0, sl, #1073741831	; 0x40000007
    d860:	cf190000 	svcgt	0x00190000
    d864:	0c000056 	stceq	0, cr0, [r0], {86}	; 0x56
    d868:	2b012105 	blcs	55c84 <_Min_Stack_Size+0x55884>
    d86c:	16000006 	strne	r0, [r0], -r6
    d870:	00005996 	muleq	r0, r6, r9
    d874:	2b012305 	blcs	56490 <_Min_Stack_Size+0x56090>
    d878:	00000006 	andeq	r0, r0, r6
    d87c:	00572616 	subseq	r2, r7, r6, lsl r6
    d880:	01240500 	teqeq	r4, r0, lsl #10
    d884:	00000025 	andeq	r0, r0, r5, lsr #32
    d888:	57871604 	strpl	r1, [r7, r4, lsl #12]
    d88c:	25050000 	strcs	r0, [r5, #-0]
    d890:	00063101 	andeq	r3, r6, r1, lsl #2
    d894:	0f000800 	svceq	0x00000800
    d898:	0005f604 	andeq	pc, r5, r4, lsl #12
    d89c:	ea040f00 	b	1114a4 <_Min_Stack_Size+0x1110a4>
    d8a0:	19000005 	stmdbne	r0, {r0, r2}
    d8a4:	00005931 	andeq	r5, r0, r1, lsr r9
    d8a8:	013d050e 	teqeq	sp, lr, lsl #10
    d8ac:	0000066c 	andeq	r0, r0, ip, ror #12
    d8b0:	00592b16 	subseq	r2, r9, r6, lsl fp
    d8b4:	013e0500 	teqeq	lr, r0, lsl #10
    d8b8:	0000066c 	andeq	r0, r0, ip, ror #12
    d8bc:	57931600 	ldrpl	r1, [r3, r0, lsl #12]
    d8c0:	3f050000 	svccc	0x00050000
    d8c4:	00066c01 	andeq	r6, r6, r1, lsl #24
    d8c8:	62160600 	andsvs	r0, r6, #0, 12
    d8cc:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d8d0:	00480140 	subeq	r0, r8, r0, asr #2
    d8d4:	000c0000 	andeq	r0, ip, r0
    d8d8:	00004808 	andeq	r4, r0, r8, lsl #16
    d8dc:	00067c00 	andeq	r7, r6, r0, lsl #24
    d8e0:	00c70900 	sbceq	r0, r7, r0, lsl #18
    d8e4:	00020000 	andeq	r0, r2, r0
    d8e8:	5805d01a 	stmdapl	r5, {r1, r3, r4, ip, lr, pc}
    d8ec:	00077d02 	andeq	r7, r7, r2, lsl #26
    d8f0:	58931600 	ldmpl	r3, {r9, sl, ip}
    d8f4:	5a050000 	bpl	14d8fc <_Min_Stack_Size+0x14d4fc>
    d8f8:	00002c02 	andeq	r2, r0, r2, lsl #24
    d8fc:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
    d900:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d904:	054a025b 	strbeq	r0, [sl, #-603]	; 0x25b
    d908:	16040000 	strne	r0, [r4], -r0
    d90c:	000059d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    d910:	7d025c05 	stcvc	12, cr5, [r2, #-20]	; 0xffffffec
    d914:	08000007 	stmdaeq	r0, {r0, r1, r2}
    d918:	0056ae16 	subseq	sl, r6, r6, lsl lr
    d91c:	025d0500 	subseq	r0, sp, #0, 10
    d920:	0000017b 	andeq	r0, r0, fp, ror r1
    d924:	58841624 	stmpl	r4, {r2, r5, r9, sl, ip}
    d928:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    d92c:	00002502 	andeq	r2, r0, r2, lsl #10
    d930:	91164800 	tstls	r6, r0, lsl #16
    d934:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d938:	0064025f 	rsbeq	r0, r4, pc, asr r2
    d93c:	16500000 	ldrbne	r0, [r0], -r0
    d940:	000056e6 	andeq	r5, r0, r6, ror #13
    d944:	37026005 	strcc	r6, [r2, -r5]
    d948:	58000006 	stmdapl	r0, {r1, r2}
    d94c:	0055cb16 	subseq	ip, r5, r6, lsl fp
    d950:	02610500 	rsbeq	r0, r1, #0, 10
    d954:	000000ef 	andeq	r0, r0, pc, ror #1
    d958:	58b21668 	ldmpl	r2!, {r3, r5, r6, r9, sl, ip}
    d95c:	62050000 	andvs	r0, r5, #0
    d960:	0000ef02 	andeq	lr, r0, r2, lsl #30
    d964:	71167000 	tstvc	r6, r0
    d968:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d96c:	00ef0263 	rsceq	r0, pc, r3, ror #4
    d970:	16780000 	ldrbtne	r0, [r8], -r0
    d974:	000055d8 	ldrdeq	r5, [r0], -r8
    d978:	8d026405 	cfstrshi	mvf6, [r2, #-20]	; 0xffffffec
    d97c:	80000007 	andhi	r0, r0, r7
    d980:	00568316 	subseq	r8, r6, r6, lsl r3
    d984:	02650500 	rsbeq	r0, r5, #0, 10
    d988:	0000079d 	muleq	r0, sp, r7
    d98c:	57341688 	ldrpl	r1, [r4, -r8, lsl #13]!
    d990:	66050000 	strvs	r0, [r5], -r0
    d994:	00002502 	andeq	r2, r0, r2, lsl #10
    d998:	c716a000 	ldrgt	sl, [r6, -r0]
    d99c:	05000058 	streq	r0, [r0, #-88]	; 0x58
    d9a0:	00ef0267 	rsceq	r0, pc, r7, ror #4
    d9a4:	16a40000 	strtne	r0, [r4], r0
    d9a8:	00005859 	andeq	r5, r0, r9, asr r8
    d9ac:	ef026805 	svc	0x00026805
    d9b0:	ac000000 	stcge	0, cr0, [r0], {-0}
    d9b4:	0056d516 	subseq	sp, r6, r6, lsl r5
    d9b8:	02690500 	rsbeq	r0, r9, #0, 10
    d9bc:	000000ef 	andeq	r0, r0, pc, ror #1
    d9c0:	59ba16b4 	ldmibpl	sl!, {r2, r4, r5, r7, r9, sl, ip}
    d9c4:	6a050000 	bvs	14d9cc <_Min_Stack_Size+0x14d5cc>
    d9c8:	0000ef02 	andeq	lr, r0, r2, lsl #30
    d9cc:	8f16bc00 	svchi	0x0016bc00
    d9d0:	05000056 	streq	r0, [r0, #-86]	; 0x56
    d9d4:	00ef026b 	rsceq	r0, pc, fp, ror #4
    d9d8:	16c40000 	strbne	r0, [r4], r0
    d9dc:	0000583a 	andeq	r5, r0, sl, lsr r8
    d9e0:	25026c05 	strcs	r6, [r2, #-3077]	; 0xc05
    d9e4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    d9e8:	05500800 	ldrbeq	r0, [r0, #-2048]	; 0x800
    d9ec:	078d0000 	streq	r0, [sp, r0]
    d9f0:	c7090000 	strgt	r0, [r9, -r0]
    d9f4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    d9f8:	05500800 	ldrbeq	r0, [r0, #-2048]	; 0x800
    d9fc:	079d0000 	ldreq	r0, [sp, r0]
    da00:	c7090000 	strgt	r0, [r9, -r0]
    da04:	07000000 	streq	r0, [r0, -r0]
    da08:	05500800 	ldrbeq	r0, [r0, #-2048]	; 0x800
    da0c:	07ad0000 	streq	r0, [sp, r0]!
    da10:	c7090000 	strgt	r0, [r9, -r0]
    da14:	17000000 	strne	r0, [r0, -r0]
    da18:	05f01a00 	ldrbeq	r1, [r0, #2560]!	; 0xa00
    da1c:	07d10271 			; <UNDEFINED> instruction: 0x07d10271
    da20:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
    da24:	05000057 	streq	r0, [r0, #-87]	; 0x57
    da28:	07d10274 			; <UNDEFINED> instruction: 0x07d10274
    da2c:	16000000 	strne	r0, [r0], -r0
    da30:	00005754 	andeq	r5, r0, r4, asr r7
    da34:	e1027505 	tst	r2, r5, lsl #10
    da38:	78000007 	stmdavc	r0, {r0, r1, r2}
    da3c:	02c40800 	sbceq	r0, r4, #0, 16
    da40:	07e10000 	strbeq	r0, [r1, r0]!
    da44:	c7090000 	strgt	r0, [r9, -r0]
    da48:	1d000000 	stcne	0, cr0, [r0, #-0]
    da4c:	002c0800 	eoreq	r0, ip, r0, lsl #16
    da50:	07f10000 	ldrbeq	r0, [r1, r0]!
    da54:	c7090000 	strgt	r0, [r9, -r0]
    da58:	1d000000 	stcne	0, cr0, [r0, #-0]
    da5c:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    da60:	08130256 	ldmdaeq	r3, {r1, r2, r4, r6, r9}
    da64:	b31c0000 	tstlt	ip, #0
    da68:	05000059 	streq	r0, [r0, #-89]	; 0x59
    da6c:	067c026d 	ldrbteq	r0, [ip], -sp, ror #4
    da70:	aa1c0000 	bge	70da78 <_Min_Stack_Size+0x70d678>
    da74:	05000058 	streq	r0, [r0, #-88]	; 0x58
    da78:	07ad0276 			; <UNDEFINED> instruction: 0x07ad0276
    da7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    da80:	00000550 	andeq	r0, r0, r0, asr r5
    da84:	00000823 	andeq	r0, r0, r3, lsr #16
    da88:	0000c709 	andeq	ip, r0, r9, lsl #14
    da8c:	1d001800 	stcne	8, cr1, [r0, #-0]
    da90:	0000082e 	andeq	r0, r0, lr, lsr #16
    da94:	00041214 	andeq	r1, r4, r4, lsl r2
    da98:	040f0000 	streq	r0, [pc], #-0	; daa0 <_Min_Stack_Size+0xd6a0>
    da9c:	00000823 	andeq	r0, r0, r3, lsr #16
    daa0:	0165040f 	cmneq	r5, pc, lsl #8
    daa4:	451d0000 	ldrmi	r0, [sp, #-0]
    daa8:	14000008 	strne	r0, [r0], #-8
    daac:	00000025 	andeq	r0, r0, r5, lsr #32
    dab0:	4b040f00 	blmi	1116b8 <_Min_Stack_Size+0x1112b8>
    dab4:	0f000008 	svceq	0x00000008
    dab8:	00083a04 	andeq	r3, r8, r4, lsl #20
    dabc:	05ea0800 	strbeq	r0, [sl, #2048]!	; 0x800
    dac0:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
    dac4:	c7090000 	strgt	r0, [r9, -r0]
    dac8:	02000000 	andeq	r0, r0, #0
    dacc:	51ba1e00 			; <UNDEFINED> instruction: 0x51ba1e00
    dad0:	0f060000 	svceq	0x00060000
    dad4:	00000876 	andeq	r0, r0, r6, ror r8
    dad8:	0800c814 	stmdaeq	r0, {r2, r4, fp, lr, pc}
    dadc:	0000000c 	andeq	r0, r0, ip
    dae0:	040f9c01 	streq	r9, [pc], #-3073	; dae8 <_Min_Stack_Size+0xd6e8>
    dae4:	00000025 	andeq	r0, r0, r5, lsr #32
    dae8:	005a971f 	subseq	r9, sl, pc, lsl r7
    daec:	02fa0500 	rscseq	r0, sl, #0, 10
    daf0:	00000412 	andeq	r0, r0, r2, lsl r4
    daf4:	00089000 	andeq	r9, r8, r0
    daf8:	4b000400 	blmi	eb00 <_Min_Stack_Size+0xe700>
    dafc:	0400002f 	streq	r0, [r0], #-47	; 0x2f
    db00:	004f5b01 	subeq	r5, pc, r1, lsl #22
    db04:	5a600100 	bpl	180df0c <_Min_Stack_Size+0x180db0c>
    db08:	59fb0000 	ldmibpl	fp!, {}^	; <UNPREDICTABLE>
    db0c:	63640000 	cmnvs	r4, #0
    db10:	04020000 	streq	r0, [r2], #-0
    db14:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    db18:	07040300 	streq	r0, [r4, -r0, lsl #6]
    db1c:	0000012b 	andeq	r0, r0, fp, lsr #2
    db20:	45060103 	strmi	r0, [r6, #-259]	; 0x103
    db24:	03000001 	movweq	r0, #1
    db28:	01430801 	cmpeq	r3, r1, lsl #16
    db2c:	02030000 	andeq	r0, r3, #0
    db30:	00017f05 	andeq	r7, r1, r5, lsl #30
    db34:	07020300 	streq	r0, [r2, -r0, lsl #6]
    db38:	0000000e 	andeq	r0, r0, lr
    db3c:	05050403 	streq	r0, [r5, #-1027]	; 0x403
    db40:	03000000 	movweq	r0, #0
    db44:	01260704 	teqeq	r6, r4, lsl #14
    db48:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    db4c:	00000005 	andeq	r0, r0, r5
    db50:	07080300 	streq	r0, [r8, -r0, lsl #6]
    db54:	00000121 	andeq	r0, r0, r1, lsr #2
    db58:	00571404 	subseq	r1, r7, r4, lsl #8
    db5c:	1d070100 	stfnes	f0, [r7, #-0]
    db60:	04000000 	streq	r0, [r0], #-0
    db64:	000055e2 	andeq	r5, r0, r2, ror #11
    db68:	00471002 	subeq	r1, r7, r2
    db6c:	bf040000 	svclt	0x00040000
    db70:	02000057 	andeq	r0, r0, #87	; 0x57
    db74:	00004727 	andeq	r4, r0, r7, lsr #14
    db78:	58c00500 	stmiapl	r0, {r8, sl}^
    db7c:	61030000 	mrsvs	r0, (UNDEF: 3)
    db80:	00002401 	andeq	r2, r0, r1, lsl #8
    db84:	02040600 	andeq	r0, r4, #0, 12
    db88:	0000af4a 	andeq	sl, r0, sl, asr #30
    db8c:	55e90700 	strbpl	r0, [r9, #1792]!	; 0x700
    db90:	4c020000 	stcmi	0, cr0, [r2], {-0}
    db94:	00000084 	andeq	r0, r0, r4, lsl #1
    db98:	00580407 	subseq	r0, r8, r7, lsl #8
    db9c:	af4d0200 	svcge	0x004d0200
    dba0:	00000000 	andeq	r0, r0, r0
    dba4:	00003208 	andeq	r3, r0, r8, lsl #4
    dba8:	0000bf00 	andeq	fp, r0, r0, lsl #30
    dbac:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    dbb0:	00030000 	andeq	r0, r3, r0
    dbb4:	92070403 	andls	r0, r7, #50331648	; 0x3000000
    dbb8:	0a000001 	beq	dbc4 <_Min_Stack_Size+0xd7c4>
    dbbc:	e7470208 	strb	r0, [r7, -r8, lsl #4]
    dbc0:	0b000000 	bleq	dbc8 <_Min_Stack_Size+0xd7c8>
    dbc4:	000056bd 			; <UNDEFINED> instruction: 0x000056bd
    dbc8:	001d4902 	andseq	r4, sp, r2, lsl #18
    dbcc:	0b000000 	bleq	dbd4 <_Min_Stack_Size+0xd7d4>
    dbd0:	000055f8 	strdeq	r5, [r0], -r8
    dbd4:	00904e02 	addseq	r4, r0, r2, lsl #28
    dbd8:	00040000 	andeq	r0, r4, r0
    dbdc:	0058f904 	subseq	pc, r8, r4, lsl #18
    dbe0:	c64f0200 	strbgt	r0, [pc], -r0, lsl #4
    dbe4:	04000000 	streq	r0, [r0], #-0
    dbe8:	000057ce 	andeq	r5, r0, lr, asr #15
    dbec:	00635302 	rsbeq	r5, r3, r2, lsl #6
    dbf0:	040c0000 	streq	r0, [ip], #-0
    dbf4:	00594304 	subseq	r4, r9, r4, lsl #6
    dbf8:	4e160400 	cfmulsmi	mvf0, mvf6, mvf0
    dbfc:	0d000000 	stceq	0, cr0, [r0, #-0]
    dc00:	00005904 	andeq	r5, r0, r4, lsl #18
    dc04:	5d2d0418 	cfstrspl	mvf0, [sp, #-96]!	; 0xffffffa0
    dc08:	0b000001 	bleq	dc14 <_Min_Stack_Size+0xd814>
    dc0c:	00005996 	muleq	r0, r6, r9
    dc10:	015d2f04 	cmpeq	sp, r4, lsl #30
    dc14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    dc18:	04006b5f 	streq	r6, [r0], #-2911	; 0xb5f
    dc1c:	00001d30 	andeq	r1, r0, r0, lsr sp
    dc20:	0c0b0400 	cfstrseq	mvf0, [fp], {-0}
    dc24:	04000059 	streq	r0, [r0], #-89	; 0x59
    dc28:	00001d30 	andeq	r1, r0, r0, lsr sp
    dc2c:	8b0b0800 	blhi	2cfc34 <_Min_Stack_Size+0x2cf834>
    dc30:	04000059 	streq	r0, [r0], #-89	; 0x59
    dc34:	00001d30 	andeq	r1, r0, r0, lsr sp
    dc38:	a00b0c00 	andge	r0, fp, r0, lsl #24
    dc3c:	04000058 	streq	r0, [r0], #-88	; 0x58
    dc40:	00001d30 	andeq	r1, r0, r0, lsr sp
    dc44:	5f0e1000 	svcpl	0x000e1000
    dc48:	31040078 	tstcc	r4, r8, ror r0
    dc4c:	00000163 	andeq	r0, r0, r3, ror #2
    dc50:	040f0014 	streq	r0, [pc], #-20	; dc58 <_Min_Stack_Size+0xd858>
    dc54:	0000010a 	andeq	r0, r0, sl, lsl #2
    dc58:	0000ff08 	andeq	pc, r0, r8, lsl #30
    dc5c:	00017300 	andeq	r7, r1, r0, lsl #6
    dc60:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    dc64:	00000000 	andeq	r0, r0, r0
    dc68:	0058a50d 	subseq	sl, r8, sp, lsl #10
    dc6c:	35042400 	strcc	r2, [r4, #-1024]	; 0x400
    dc70:	000001ec 	andeq	r0, r0, ip, ror #3
    dc74:	0057d70b 	subseq	sp, r7, fp, lsl #14
    dc78:	1d370400 	cfldrsne	mvf0, [r7, #-0]
    dc7c:	00000000 	andeq	r0, r0, r0
    dc80:	0057410b 	subseq	r4, r7, fp, lsl #2
    dc84:	1d380400 	cfldrsne	mvf0, [r8, #-0]
    dc88:	04000000 	streq	r0, [r0], #-0
    dc8c:	0057e00b 	subseq	lr, r7, fp
    dc90:	1d390400 	cfldrsne	mvf0, [r9, #-0]
    dc94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dc98:	0056c50b 	subseq	ip, r6, fp, lsl #10
    dc9c:	1d3a0400 	cfldrsne	mvf0, [sl, #-0]
    dca0:	0c000000 	stceq	0, cr0, [r0], {-0}
    dca4:	0059590b 	subseq	r5, r9, fp, lsl #18
    dca8:	1d3b0400 	cfldrsne	mvf0, [fp, #-0]
    dcac:	10000000 	andne	r0, r0, r0
    dcb0:	0059140b 	subseq	r1, r9, fp, lsl #8
    dcb4:	1d3c0400 	cfldrsne	mvf0, [ip, #-0]
    dcb8:	14000000 	strne	r0, [r0], #-0
    dcbc:	0057750b 	subseq	r7, r7, fp, lsl #10
    dcc0:	1d3d0400 	cfldrsne	mvf0, [sp, #-0]
    dcc4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    dcc8:	0059390b 	subseq	r3, r9, fp, lsl #18
    dccc:	1d3e0400 	cfldrsne	mvf0, [lr, #-0]
    dcd0:	1c000000 	stcne	0, cr0, [r0], {-0}
    dcd4:	0057990b 	subseq	r9, r7, fp, lsl #18
    dcd8:	1d3f0400 	cfldrsne	mvf0, [pc, #-0]	; dce0 <_Min_Stack_Size+0xd8e0>
    dcdc:	20000000 	andcs	r0, r0, r0
    dce0:	584b1000 	stmdapl	fp, {ip}^
    dce4:	01080000 	mrseq	r0, (UNDEF: 8)
    dce8:	022c4804 	eoreq	r4, ip, #4, 16	; 0x40000
    dcec:	7f0b0000 	svcvc	0x000b0000
    dcf0:	04000057 	streq	r0, [r0], #-87	; 0x57
    dcf4:	00022c49 	andeq	r2, r2, r9, asr #24
    dcf8:	7f0b0000 	svcvc	0x000b0000
    dcfc:	04000059 	streq	r0, [r0], #-89	; 0x59
    dd00:	00022c4a 	andeq	r2, r2, sl, asr #24
    dd04:	b6118000 	ldrlt	r8, [r1], -r0
    dd08:	04000057 	streq	r0, [r0], #-87	; 0x57
    dd0c:	0000ff4c 	andeq	pc, r0, ip, asr #30
    dd10:	11010000 	mrsne	r0, (UNDEF: 1)
    dd14:	000058e7 	andeq	r5, r0, r7, ror #17
    dd18:	00ff4f04 	rscseq	r4, pc, r4, lsl #30
    dd1c:	01040000 	mrseq	r0, (UNDEF: 4)
    dd20:	00fd0800 	rscseq	r0, sp, r0, lsl #16
    dd24:	023c0000 	eorseq	r0, ip, #0
    dd28:	bf090000 	svclt	0x00090000
    dd2c:	1f000000 	svcne	0x00000000
    dd30:	56f31000 	ldrbtpl	r1, [r3], r0
    dd34:	01900000 	orrseq	r0, r0, r0
    dd38:	027a5b04 	rsbseq	r5, sl, #4, 22	; 0x1000
    dd3c:	960b0000 	strls	r0, [fp], -r0
    dd40:	04000059 	streq	r0, [r0], #-89	; 0x59
    dd44:	00027a5c 	andeq	r7, r2, ip, asr sl
    dd48:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    dd4c:	04000059 	streq	r0, [r0], #-89	; 0x59
    dd50:	00001d5d 	andeq	r1, r0, sp, asr sp
    dd54:	670b0400 	strvs	r0, [fp, -r0, lsl #8]
    dd58:	04000057 	streq	r0, [r0], #-87	; 0x57
    dd5c:	0002805f 	andeq	r8, r2, pc, asr r0
    dd60:	4b0b0800 	blmi	2cfd68 <_Min_Stack_Size+0x2cf968>
    dd64:	04000058 	streq	r0, [r0], #-88	; 0x58
    dd68:	0001ec60 	andeq	lr, r1, r0, ror #24
    dd6c:	0f008800 	svceq	0x00008800
    dd70:	00023c04 	andeq	r3, r2, r4, lsl #24
    dd74:	02900800 	addseq	r0, r0, #0, 16
    dd78:	02900000 	addseq	r0, r0, #0
    dd7c:	bf090000 	svclt	0x00090000
    dd80:	1f000000 	svcne	0x00000000
    dd84:	96040f00 	strls	r0, [r4], -r0, lsl #30
    dd88:	12000002 	andne	r0, r0, #2
    dd8c:	0056000d 	subseq	r0, r6, sp
    dd90:	73040800 	movwvc	r0, #18432	; 0x4800
    dd94:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    dd98:	0058780b 	subseq	r7, r8, fp, lsl #16
    dd9c:	bc740400 	cfldrdlt	mvd0, [r4], #-0
    dda0:	00000002 	andeq	r0, r0, r2
    dda4:	0059cf0b 	subseq	ip, r9, fp, lsl #30
    dda8:	1d750400 	cfldrdne	mvd0, [r5, #-0]
    ddac:	04000000 	streq	r0, [r0], #-0
    ddb0:	32040f00 	andcc	r0, r4, #0, 30
    ddb4:	0d000000 	stceq	0, cr0, [r0, #-0]
    ddb8:	000059e2 	andeq	r5, r0, r2, ror #19
    ddbc:	ecb30468 	cfldrs	mvf0, [r3], #416	; 0x1a0
    ddc0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    ddc4:	0400705f 	streq	r7, [r0], #-95	; 0x5f
    ddc8:	0002bcb4 			; <UNDEFINED> instruction: 0x0002bcb4
    ddcc:	5f0e0000 	svcpl	0x000e0000
    ddd0:	b5040072 	strlt	r0, [r4, #-114]	; 0x72
    ddd4:	0000001d 	andeq	r0, r0, sp, lsl r0
    ddd8:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    dddc:	1db60400 	cfldrsne	mvf0, [r6]
    dde0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dde4:	0056a00b 	subseq	sl, r6, fp
    dde8:	39b70400 	ldmibcc	r7!, {sl}
    ddec:	0c000000 	stceq	0, cr0, [r0], {-0}
    ddf0:	00587e0b 	subseq	r7, r8, fp, lsl #28
    ddf4:	39b80400 	ldmibcc	r8!, {sl}
    ddf8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ddfc:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    de00:	97b90400 	ldrls	r0, [r9, r0, lsl #8]!
    de04:	10000002 	andne	r0, r0, r2
    de08:	0055ef0b 	subseq	lr, r5, fp, lsl #30
    de0c:	1dba0400 	cfldrsne	mvf0, [sl]
    de10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    de14:	0058700b 	subseq	r7, r8, fp
    de18:	fdc10400 	stc2l	4, cr0, [r1]
    de1c:	1c000000 	stcne	0, cr0, [r0], {-0}
    de20:	0057ea0b 	subseq	lr, r7, fp, lsl #20
    de24:	4fc30400 	svcmi	0x00c30400
    de28:	20000005 	andcs	r0, r0, r5
    de2c:	0056a70b 	subseq	sl, r6, fp, lsl #14
    de30:	7ec50400 	cdpvc	4, 12, cr0, cr5, cr0, {0}
    de34:	24000005 	strcs	r0, [r0], #-5
    de38:	00594b0b 	subseq	r4, r9, fp, lsl #22
    de3c:	a2c80400 	sbcge	r0, r8, #0, 8
    de40:	28000005 	stmdacs	r0, {r0, r2}
    de44:	0057c70b 	subseq	ip, r7, fp, lsl #14
    de48:	bcc90400 	cfstrdlt	mvd0, [r9], {0}
    de4c:	2c000005 	stccs	0, cr0, [r0], {5}
    de50:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
    de54:	97cc0400 	strbls	r0, [ip, r0, lsl #8]
    de58:	30000002 	andcc	r0, r0, r2
    de5c:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
    de60:	bccd0400 	cfstrdlt	mvd0, [sp], {0}
    de64:	38000002 	stmdacc	r0, {r1}
    de68:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    de6c:	1dce0400 	cfstrdne	mvd0, [lr]
    de70:	3c000000 	stccc	0, cr0, [r0], {-0}
    de74:	0059c90b 	subseq	ip, r9, fp, lsl #18
    de78:	c2d10400 	sbcsgt	r0, r1, #0, 8
    de7c:	40000005 	andmi	r0, r0, r5
    de80:	00570e0b 	subseq	r0, r7, fp, lsl #28
    de84:	d2d20400 	sbcsle	r0, r2, #0, 8
    de88:	43000005 	movwmi	r0, #5
    de8c:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
    de90:	97d50400 	ldrbls	r0, [r5, r0, lsl #8]
    de94:	44000002 	strmi	r0, [r0], #-2
    de98:	0057ad0b 	subseq	sl, r7, fp, lsl #26
    de9c:	1dd80400 	cfldrdne	mvd0, [r8]
    dea0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    dea4:	0056760b 	subseq	r7, r6, fp, lsl #12
    dea8:	6ed90400 	cdpvs	4, 13, cr0, cr9, cr0, {0}
    deac:	50000000 	andpl	r0, r0, r0
    deb0:	0059f50b 	subseq	pc, r9, fp, lsl #10
    deb4:	0adc0400 	beq	ff70eebc <_estack+0xdf6deebc>
    deb8:	54000004 	strpl	r0, [r0], #-4
    debc:	00578d0b 	subseq	r8, r7, fp, lsl #26
    dec0:	f2e00400 	vaddhn.i64	d16, q0, q0
    dec4:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    dec8:	00576c0b 	subseq	r6, r7, fp, lsl #24
    decc:	e7e20400 	strb	r0, [r2, r0, lsl #8]!
    ded0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    ded4:	0055c30b 	subseq	ip, r5, fp, lsl #6
    ded8:	1de30400 	cfstrdne	mvd0, [r3]
    dedc:	64000000 	strvs	r0, [r0], #-0
    dee0:	001d1300 	andseq	r1, sp, r0, lsl #6
    dee4:	040a0000 	streq	r0, [sl], #-0
    dee8:	0a140000 	beq	50def0 <_Min_Stack_Size+0x50daf0>
    deec:	14000004 	strne	r0, [r0], #-4
    def0:	000000fd 	strdeq	r0, [r0], -sp
    def4:	00054214 	andeq	r4, r5, r4, lsl r2
    def8:	001d1400 	andseq	r1, sp, r0, lsl #8
    defc:	0f000000 	svceq	0x00000000
    df00:	00041004 	andeq	r1, r4, r4
    df04:	59b31500 	ldmibpl	r3!, {r8, sl, ip}
    df08:	04280000 	strteq	r0, [r8], #-0
    df0c:	42023904 	andmi	r3, r2, #4, 18	; 0x10000
    df10:	16000005 	strne	r0, [r0], -r5
    df14:	000051bb 			; <UNDEFINED> instruction: 0x000051bb
    df18:	1d023b04 	vstrne	d3, [r2, #-16]
    df1c:	00000000 	andeq	r0, r0, r0
    df20:	00599c16 	subseq	r9, r9, r6, lsl ip
    df24:	02400400 	subeq	r0, r0, #0, 8
    df28:	00000629 	andeq	r0, r0, r9, lsr #12
    df2c:	56eb1604 	strbtpl	r1, [fp], r4, lsl #12
    df30:	40040000 	andmi	r0, r4, r0
    df34:	00062902 	andeq	r2, r6, r2, lsl #18
    df38:	fc160800 	ldc2	8, cr0, [r6], {-0}
    df3c:	04000057 	streq	r0, [r0], #-87	; 0x57
    df40:	06290240 	strteq	r0, [r9], -r0, asr #4
    df44:	160c0000 	strne	r0, [ip], -r0
    df48:	00005967 	andeq	r5, r0, r7, ror #18
    df4c:	1d024204 	sfmne	f4, 4, [r2, #-16]
    df50:	10000000 	andne	r0, r0, r0
    df54:	0056fb16 	subseq	pc, r6, r6, lsl fp	; <UNPREDICTABLE>
    df58:	02430400 	subeq	r0, r3, #0, 8
    df5c:	0000080b 	andeq	r0, r0, fp, lsl #16
    df60:	58d51614 	ldmpl	r5, {r2, r4, r9, sl, ip}^
    df64:	45040000 	strmi	r0, [r4, #-0]
    df68:	00001d02 	andeq	r1, r0, r2, lsl #26
    df6c:	a3163000 	tstge	r6, #0
    df70:	04000059 	streq	r0, [r0], #-89	; 0x59
    df74:	05730246 	ldrbeq	r0, [r3, #-582]!	; 0x246
    df78:	16340000 	ldrtne	r0, [r4], -r0
    df7c:	000055b8 			; <UNDEFINED> instruction: 0x000055b8
    df80:	1d024804 	stcne	8, cr4, [r2, #-16]
    df84:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    df88:	0058ef16 	subseq	lr, r8, r6, lsl pc
    df8c:	024a0400 	subeq	r0, sl, #0, 8
    df90:	00000826 	andeq	r0, r0, r6, lsr #16
    df94:	5951163c 	ldmdbpl	r1, {r2, r3, r4, r5, r9, sl, ip}^
    df98:	4d040000 	stcmi	0, cr0, [r4, #-0]
    df9c:	00015d02 	andeq	r5, r1, r2, lsl #26
    dfa0:	6c164000 	ldcvs	0, cr4, [r6], {-0}
    dfa4:	04000056 	streq	r0, [r0], #-86	; 0x56
    dfa8:	001d024e 	andseq	r0, sp, lr, asr #4
    dfac:	16440000 	strbne	r0, [r4], -r0
    dfb0:	000057f7 	strdeq	r5, [r0], -r7
    dfb4:	5d024f04 	stcpl	15, cr4, [r2, #-16]
    dfb8:	48000001 	stmdami	r0, {r0}
    dfbc:	00575d16 	subseq	r5, r7, r6, lsl sp
    dfc0:	02500400 	subseq	r0, r0, #0, 8
    dfc4:	0000082c 	andeq	r0, r0, ip, lsr #16
    dfc8:	5706164c 	strpl	r1, [r6, -ip, asr #12]
    dfcc:	53040000 	movwpl	r0, #16384	; 0x4000
    dfd0:	00001d02 	andeq	r1, r0, r2, lsl #26
    dfd4:	68165000 	ldmdavs	r6, {ip, lr}
    dfd8:	04000058 	streq	r0, [r0], #-88	; 0x58
    dfdc:	05420254 	strbeq	r0, [r2, #-596]	; 0x254
    dfe0:	16540000 	ldrbne	r0, [r4], -r0
    dfe4:	000059ea 	andeq	r5, r0, sl, ror #19
    dfe8:	e9027704 	stmdb	r2, {r2, r8, r9, sl, ip, sp, lr}
    dfec:	58000007 	stmdapl	r0, {r0, r1, r2}
    dff0:	0056f317 	subseq	pc, r6, r7, lsl r3	; <UNPREDICTABLE>
    dff4:	027b0400 	rsbseq	r0, fp, #0, 8
    dff8:	0000027a 	andeq	r0, r0, sl, ror r2
    dffc:	a4170148 	ldrge	r0, [r7], #-328	; 0x148
    e000:	04000057 	streq	r0, [r0], #-87	; 0x57
    e004:	023c027c 	eorseq	r0, ip, #124, 4	; 0xc0000007
    e008:	014c0000 	mrseq	r0, (UNDEF: 76)
    e00c:	00574a17 	subseq	r4, r7, r7, lsl sl
    e010:	02800400 	addeq	r0, r0, #0, 8
    e014:	0000083d 	andeq	r0, r0, sp, lsr r8
    e018:	431702dc 	tstmi	r7, #220, 4	; 0xc000000d
    e01c:	04000058 	streq	r0, [r0], #-88	; 0x58
    e020:	05ee0285 	strbeq	r0, [lr, #645]!	; 0x285
    e024:	02e00000 	rsceq	r0, r0, #0
    e028:	00567e17 	subseq	r7, r6, r7, lsl lr
    e02c:	02860400 	addeq	r0, r6, #0, 8
    e030:	00000849 	andeq	r0, r0, r9, asr #16
    e034:	0f0002ec 	svceq	0x000002ec
    e038:	00054804 	andeq	r4, r5, r4, lsl #16
    e03c:	08010300 	stmdaeq	r1, {r8, r9}
    e040:	0000014c 	andeq	r0, r0, ip, asr #2
    e044:	03ec040f 	mvneq	r0, #251658240	; 0xf000000
    e048:	1d130000 	ldcne	0, cr0, [r3, #-0]
    e04c:	73000000 	movwvc	r0, #0
    e050:	14000005 	strne	r0, [r0], #-5
    e054:	0000040a 	andeq	r0, r0, sl, lsl #8
    e058:	0000fd14 	andeq	pc, r0, r4, lsl sp	; <UNPREDICTABLE>
    e05c:	05731400 	ldrbeq	r1, [r3, #-1024]!	; 0x400
    e060:	1d140000 	ldcne	0, cr0, [r4, #-0]
    e064:	00000000 	andeq	r0, r0, r0
    e068:	0579040f 	ldrbeq	r0, [r9, #-1039]!	; 0x40f
    e06c:	48180000 	ldmdami	r8, {}	; <UNPREDICTABLE>
    e070:	0f000005 	svceq	0x00000005
    e074:	00055504 	andeq	r5, r5, r4, lsl #10
    e078:	00791300 	rsbseq	r1, r9, r0, lsl #6
    e07c:	05a20000 	streq	r0, [r2, #0]!
    e080:	0a140000 	beq	50e088 <_Min_Stack_Size+0x50dc88>
    e084:	14000004 	strne	r0, [r0], #-4
    e088:	000000fd 	strdeq	r0, [r0], -sp
    e08c:	00007914 	andeq	r7, r0, r4, lsl r9
    e090:	001d1400 	andseq	r1, sp, r0, lsl #8
    e094:	0f000000 	svceq	0x00000000
    e098:	00058404 	andeq	r8, r5, r4, lsl #8
    e09c:	001d1300 	andseq	r1, sp, r0, lsl #6
    e0a0:	05bc0000 	ldreq	r0, [ip, #0]!
    e0a4:	0a140000 	beq	50e0ac <_Min_Stack_Size+0x50dcac>
    e0a8:	14000004 	strne	r0, [r0], #-4
    e0ac:	000000fd 	strdeq	r0, [r0], -sp
    e0b0:	a8040f00 	stmdage	r4, {r8, r9, sl, fp}
    e0b4:	08000005 	stmdaeq	r0, {r0, r2}
    e0b8:	00000032 	andeq	r0, r0, r2, lsr r0
    e0bc:	000005d2 	ldrdeq	r0, [r0], -r2
    e0c0:	0000bf09 	andeq	fp, r0, r9, lsl #30
    e0c4:	08000200 	stmdaeq	r0, {r9}
    e0c8:	00000032 	andeq	r0, r0, r2, lsr r0
    e0cc:	000005e2 	andeq	r0, r0, r2, ror #11
    e0d0:	0000bf09 	andeq	fp, r0, r9, lsl #30
    e0d4:	05000000 	streq	r0, [r0, #-0]
    e0d8:	0000572d 	andeq	r5, r0, sp, lsr #14
    e0dc:	c2011d04 	andgt	r1, r1, #4, 26	; 0x100
    e0e0:	19000002 	stmdbne	r0, {r1}
    e0e4:	000056cf 	andeq	r5, r0, pc, asr #13
    e0e8:	0121040c 	teqeq	r1, ip, lsl #8
    e0ec:	00000623 	andeq	r0, r0, r3, lsr #12
    e0f0:	00599616 	subseq	r9, r9, r6, lsl r6
    e0f4:	01230400 	teqeq	r3, r0, lsl #8
    e0f8:	00000623 	andeq	r0, r0, r3, lsr #12
    e0fc:	57261600 	strpl	r1, [r6, -r0, lsl #12]!
    e100:	24040000 	strcs	r0, [r4], #-0
    e104:	00001d01 	andeq	r1, r0, r1, lsl #26
    e108:	87160400 	ldrhi	r0, [r6, -r0, lsl #8]
    e10c:	04000057 	streq	r0, [r0], #-87	; 0x57
    e110:	06290125 	strteq	r0, [r9], -r5, lsr #2
    e114:	00080000 	andeq	r0, r8, r0
    e118:	05ee040f 	strbeq	r0, [lr, #1039]!	; 0x40f
    e11c:	040f0000 	streq	r0, [pc], #-0	; e124 <_Min_Stack_Size+0xdd24>
    e120:	000005e2 	andeq	r0, r0, r2, ror #11
    e124:	00593119 	subseq	r3, r9, r9, lsl r1
    e128:	3d040e00 	stccc	14, cr0, [r4, #-0]
    e12c:	00066401 	andeq	r6, r6, r1, lsl #8
    e130:	592b1600 	stmdbpl	fp!, {r9, sl, ip}
    e134:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    e138:	00066401 	andeq	r6, r6, r1, lsl #8
    e13c:	93160000 	tstls	r6, #0
    e140:	04000057 	streq	r0, [r0], #-87	; 0x57
    e144:	0664013f 			; <UNDEFINED> instruction: 0x0664013f
    e148:	16060000 	strne	r0, [r6], -r0
    e14c:	00005962 	andeq	r5, r0, r2, ror #18
    e150:	40014004 	andmi	r4, r1, r4
    e154:	0c000000 	stceq	0, cr0, [r0], {-0}
    e158:	00400800 	subeq	r0, r0, r0, lsl #16
    e15c:	06740000 	ldrbteq	r0, [r4], -r0
    e160:	bf090000 	svclt	0x00090000
    e164:	02000000 	andeq	r0, r0, #0
    e168:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    e16c:	07750258 			; <UNDEFINED> instruction: 0x07750258
    e170:	93160000 	tstls	r6, #0
    e174:	04000058 	streq	r0, [r0], #-88	; 0x58
    e178:	0024025a 	eoreq	r0, r4, sl, asr r2
    e17c:	16000000 	strne	r0, [r0], -r0
    e180:	0000591e 	andeq	r5, r0, lr, lsl r9
    e184:	42025b04 	andmi	r5, r2, #4, 22	; 0x1000
    e188:	04000005 	streq	r0, [r0], #-5
    e18c:	0059d516 	subseq	sp, r9, r6, lsl r5
    e190:	025c0400 	subseq	r0, ip, #0, 8
    e194:	00000775 	andeq	r0, r0, r5, ror r7
    e198:	56ae1608 	strtpl	r1, [lr], r8, lsl #12
    e19c:	5d040000 	stcpl	0, cr0, [r4, #-0]
    e1a0:	00017302 	andeq	r7, r1, r2, lsl #6
    e1a4:	84162400 	ldrhi	r2, [r6], #-1024	; 0x400
    e1a8:	04000058 	streq	r0, [r0], #-88	; 0x58
    e1ac:	001d025e 	andseq	r0, sp, lr, asr r2
    e1b0:	16480000 	strbne	r0, [r8], -r0
    e1b4:	00005991 	muleq	r0, r1, r9
    e1b8:	5c025f04 	stcpl	15, cr5, [r2], {4}
    e1bc:	50000000 	andpl	r0, r0, r0
    e1c0:	0056e616 	subseq	lr, r6, r6, lsl r6
    e1c4:	02600400 	rsbeq	r0, r0, #0, 8
    e1c8:	0000062f 	andeq	r0, r0, pc, lsr #12
    e1cc:	55cb1658 	strbpl	r1, [fp, #1624]	; 0x658
    e1d0:	61040000 	mrsvs	r0, (UNDEF: 4)
    e1d4:	0000e702 	andeq	lr, r0, r2, lsl #14
    e1d8:	b2166800 	andslt	r6, r6, #0, 16
    e1dc:	04000058 	streq	r0, [r0], #-88	; 0x58
    e1e0:	00e70262 	rsceq	r0, r7, r2, ror #4
    e1e4:	16700000 	ldrbtne	r0, [r0], -r0
    e1e8:	00005971 	andeq	r5, r0, r1, ror r9
    e1ec:	e7026304 	str	r6, [r2, -r4, lsl #6]
    e1f0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    e1f4:	0055d816 	subseq	sp, r5, r6, lsl r8
    e1f8:	02640400 	rsbeq	r0, r4, #0, 8
    e1fc:	00000785 	andeq	r0, r0, r5, lsl #15
    e200:	56831680 	strpl	r1, [r3], r0, lsl #13
    e204:	65040000 	strvs	r0, [r4, #-0]
    e208:	00079502 	andeq	r9, r7, r2, lsl #10
    e20c:	34168800 	ldrcc	r8, [r6], #-2048	; 0x800
    e210:	04000057 	streq	r0, [r0], #-87	; 0x57
    e214:	001d0266 	andseq	r0, sp, r6, ror #4
    e218:	16a00000 	strtne	r0, [r0], r0
    e21c:	000058c7 	andeq	r5, r0, r7, asr #17
    e220:	e7026704 	str	r6, [r2, -r4, lsl #14]
    e224:	a4000000 	strge	r0, [r0], #-0
    e228:	00585916 	subseq	r5, r8, r6, lsl r9
    e22c:	02680400 	rsbeq	r0, r8, #0, 8
    e230:	000000e7 	andeq	r0, r0, r7, ror #1
    e234:	56d516ac 	ldrbpl	r1, [r5], ip, lsr #13
    e238:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    e23c:	0000e702 	andeq	lr, r0, r2, lsl #14
    e240:	ba16b400 	blt	5bb248 <_Min_Stack_Size+0x5bae48>
    e244:	04000059 	streq	r0, [r0], #-89	; 0x59
    e248:	00e7026a 	rsceq	r0, r7, sl, ror #4
    e24c:	16bc0000 	ldrtne	r0, [ip], r0
    e250:	0000568f 	andeq	r5, r0, pc, lsl #13
    e254:	e7026b04 	str	r6, [r2, -r4, lsl #22]
    e258:	c4000000 	strgt	r0, [r0], #-0
    e25c:	00583a16 	subseq	r3, r8, r6, lsl sl
    e260:	026c0400 	rsbeq	r0, ip, #0, 8
    e264:	0000001d 	andeq	r0, r0, sp, lsl r0
    e268:	480800cc 	stmdami	r8, {r2, r3, r6, r7}
    e26c:	85000005 	strhi	r0, [r0, #-5]
    e270:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e274:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e278:	48080019 	stmdami	r8, {r0, r3, r4}
    e27c:	95000005 	strls	r0, [r0, #-5]
    e280:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e284:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e288:	48080007 	stmdami	r8, {r0, r1, r2}
    e28c:	a5000005 	strge	r0, [r0, #-5]
    e290:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e294:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e298:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    e29c:	c9027104 	stmdbgt	r2, {r2, r8, ip, sp, lr}
    e2a0:	16000007 	strne	r0, [r0], -r7
    e2a4:	000057f0 	strdeq	r5, [r0], -r0
    e2a8:	c9027404 	stmdbgt	r2, {r2, sl, ip, sp, lr}
    e2ac:	00000007 	andeq	r0, r0, r7
    e2b0:	00575416 	subseq	r5, r7, r6, lsl r4
    e2b4:	02750400 	rsbseq	r0, r5, #0, 8
    e2b8:	000007d9 	ldrdeq	r0, [r0], -r9
    e2bc:	bc080078 	stclt	0, cr0, [r8], {120}	; 0x78
    e2c0:	d9000002 	stmdble	r0, {r1}
    e2c4:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e2c8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e2cc:	2408001d 	strcs	r0, [r8], #-29
    e2d0:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    e2d4:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e2d8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e2dc:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
    e2e0:	0b025604 	bleq	a3af8 <_Min_Stack_Size+0xa36f8>
    e2e4:	1c000008 	stcne	0, cr0, [r0], {8}
    e2e8:	000059b3 			; <UNDEFINED> instruction: 0x000059b3
    e2ec:	74026d04 	strvc	r6, [r2], #-3332	; 0xd04
    e2f0:	1c000006 	stcne	0, cr0, [r0], {6}
    e2f4:	000058aa 	andeq	r5, r0, sl, lsr #17
    e2f8:	a5027604 	strge	r7, [r2, #-1540]	; 0x604
    e2fc:	00000007 	andeq	r0, r0, r7
    e300:	00054808 	andeq	r4, r5, r8, lsl #16
    e304:	00081b00 	andeq	r1, r8, r0, lsl #22
    e308:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e30c:	00180000 	andseq	r0, r8, r0
    e310:	0008261d 	andeq	r2, r8, sp, lsl r6
    e314:	040a1400 	streq	r1, [sl], #-1024	; 0x400
    e318:	0f000000 	svceq	0x00000000
    e31c:	00081b04 	andeq	r1, r8, r4, lsl #22
    e320:	5d040f00 	stcpl	15, cr0, [r4, #-0]
    e324:	1d000001 	stcne	0, cr0, [r0, #-4]
    e328:	0000083d 	andeq	r0, r0, sp, lsr r8
    e32c:	00001d14 	andeq	r1, r0, r4, lsl sp
    e330:	040f0000 	streq	r0, [pc], #-0	; e338 <_Min_Stack_Size+0xdf38>
    e334:	00000843 	andeq	r0, r0, r3, asr #16
    e338:	0832040f 	ldmdaeq	r2!, {r0, r1, r2, r3, sl}
    e33c:	e2080000 	and	r0, r8, #0
    e340:	59000005 	stmdbpl	r0, {r0, r2}
    e344:	09000008 	stmdbeq	r0, {r3}
    e348:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e34c:	ef1e0002 	svc	0x001e0002
    e350:	05000059 	streq	r0, [r0, #-89]	; 0x59
    e354:	00041017 	andeq	r1, r4, r7, lsl r0
    e358:	68030500 	stmdavs	r3, {r8, sl}
    e35c:	1f200000 	svcne	0x00200000
    e360:	00005a97 	muleq	r0, r7, sl
    e364:	0a02fa04 	beq	ccb7c <_Min_Stack_Size+0xcc77c>
    e368:	05000004 	streq	r0, [r0, #-4]
    e36c:	00049003 	andeq	r9, r4, r3
    e370:	5a901f20 	bpl	fe415ff8 <_estack+0xde3e5ff8>
    e374:	fb040000 	blx	10e37e <_Min_Stack_Size+0x10df7e>
    e378:	00088e02 	andeq	r8, r8, r2, lsl #28
    e37c:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    e380:	180800f2 	stmdane	r8, {r1, r4, r5, r6, r7}
    e384:	0000040a 	andeq	r0, r0, sl, lsl #8
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <_Min_Stack_Size+0x2bfcac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <_Min_Stack_Size+0x380828>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19
      2c:	0b0b0024 	bleq	2c00c4 <_Min_Stack_Size+0x2bfcc4>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	012e0600 	teqeq	lr, r0, lsl #12
      40:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      44:	0b3b0b3a 	bleq	ec2d34 <_Min_Stack_Size+0xec2934>
      48:	01111349 	tsteq	r1, r9, asr #6
      4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      50:	01194296 			; <UNDEFINED> instruction: 0x01194296
      54:	07000013 	smladeq	r0, r3, r0, r0
      58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      5c:	0b3b0b3a 	bleq	ec2d4c <_Min_Stack_Size+0xec294c>
      60:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      64:	0b080000 	bleq	20006c <_Min_Stack_Size+0x1ffc6c>
      68:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
      6c:	09000006 	stmdbeq	r0, {r1, r2}
      70:	08030034 	stmdaeq	r3, {r2, r4, r5}
      74:	0b3b0b3a 	bleq	ec2d64 <_Min_Stack_Size+0xec2964>
      78:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      7c:	010a0000 	mrseq	r0, (UNDEF: 10)
      80:	01134901 	tsteq	r3, r1, lsl #18
      84:	0b000013 	bleq	d8 <_Min_Heap_Size+0xd8>
      88:	13490021 	movtne	r0, #36897	; 0x9021
      8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
      90:	0300340c 	movweq	r3, #1036	; 0x40c
      94:	3b0b3a0e 	blcc	2ce8d4 <_Min_Stack_Size+0x2ce4d4>
      98:	3f134905 	svccc	0x00134905
      9c:	00193c19 	andseq	r3, r9, r9, lsl ip
      a0:	11010000 	mrsne	r0, (UNDEF: 1)
      a4:	130e2501 	movwne	r2, #58625	; 0xe501
      a8:	1b0e030b 	blne	380cdc <_Min_Stack_Size+0x3808dc>
      ac:	1117550e 	tstne	r7, lr, lsl #10
      b0:	00171001 	andseq	r1, r7, r1
      b4:	00240200 	eoreq	r0, r4, r0, lsl #4
      b8:	0b3e0b0b 	bleq	f82cec <_Min_Stack_Size+0xf828ec>
      bc:	00000e03 	andeq	r0, r0, r3, lsl #28
      c0:	03001603 	movweq	r1, #1539	; 0x603
      c4:	3b0b3a0e 	blcc	2ce904 <_Min_Stack_Size+0x2ce504>
      c8:	0013490b 	andseq	r4, r3, fp, lsl #18
      cc:	00240400 	eoreq	r0, r4, r0, lsl #8
      d0:	0b3e0b0b 	bleq	f82d04 <_Min_Stack_Size+0xf82904>
      d4:	00000803 	andeq	r0, r0, r3, lsl #16
      d8:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
      e0:	0b0b0113 	bleq	2c0534 <_Min_Stack_Size+0x2c0134>
      e4:	0b3b0b3a 	bleq	ec2dd4 <_Min_Stack_Size+0xec29d4>
      e8:	00001301 	andeq	r1, r0, r1, lsl #6
      ec:	03000d07 	movweq	r0, #3335	; 0xd07
      f0:	3b0b3a0e 	blcc	2ce930 <_Min_Stack_Size+0x2ce530>
      f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      f8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     100:	0b3a0e03 	bleq	e83914 <_Min_Stack_Size+0xe83514>
     104:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     108:	06120111 			; <UNDEFINED> instruction: 0x06120111
     10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     110:	00130119 	andseq	r0, r3, r9, lsl r1
     114:	00340900 	eorseq	r0, r4, r0, lsl #18
     118:	0b3a0e03 	bleq	e8392c <_Min_Stack_Size+0xe8352c>
     11c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     120:	00001802 	andeq	r1, r0, r2, lsl #16
     124:	0300050a 	movweq	r0, #1290	; 0x50a
     128:	3b0b3a0e 	blcc	2ce968 <_Min_Stack_Size+0x2ce568>
     12c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     130:	0b000018 	bleq	198 <_Min_Heap_Size+0x198>
     134:	08030034 	stmdaeq	r3, {r2, r4, r5}
     138:	0b3b0b3a 	bleq	ec2e28 <_Min_Stack_Size+0xec2a28>
     13c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     140:	0f0c0000 	svceq	0x000c0000
     144:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     148:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     14c:	13490101 	movtne	r0, #37121	; 0x9101
     150:	00001301 	andeq	r1, r0, r1, lsl #6
     154:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     158:	000b2f13 	andeq	r2, fp, r3, lsl pc
     15c:	010b0f00 	tsteq	fp, r0, lsl #30
     160:	06120111 			; <UNDEFINED> instruction: 0x06120111
     164:	34100000 	ldrcc	r0, [r0], #-0
     168:	3a0e0300 	bcc	380d70 <_Min_Stack_Size+0x380970>
     16c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     170:	3c193f13 	ldccc	15, cr3, [r9], {19}
     174:	00000019 	andeq	r0, r0, r9, lsl r0
     178:	10001101 	andne	r1, r0, r1, lsl #2
     17c:	03065506 	movweq	r5, #25862	; 0x6506
     180:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
     184:	00051308 	andeq	r1, r5, r8, lsl #6
     188:	11010000 	mrsne	r0, (UNDEF: 1)
     18c:	130e2501 	movwne	r2, #58625	; 0xe501
     190:	1b0e030b 	blne	380dc4 <_Min_Stack_Size+0x3809c4>
     194:	1117550e 	tstne	r7, lr, lsl #10
     198:	00171001 	andseq	r1, r7, r1
     19c:	00240200 	eoreq	r0, r4, r0, lsl #4
     1a0:	0b3e0b0b 	bleq	f82dd4 <_Min_Stack_Size+0xf829d4>
     1a4:	00000e03 	andeq	r0, r0, r3, lsl #28
     1a8:	03001603 	movweq	r1, #1539	; 0x603
     1ac:	3b0b3a0e 	blcc	2ce9ec <_Min_Stack_Size+0x2ce5ec>
     1b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     1b4:	00240400 	eoreq	r0, r4, r0, lsl #8
     1b8:	0b3e0b0b 	bleq	f82dec <_Min_Stack_Size+0xf829ec>
     1bc:	00000803 	andeq	r0, r0, r3, lsl #16
     1c0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     1c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     1c8:	0b0b0113 	bleq	2c061c <_Min_Stack_Size+0x2c021c>
     1cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     1d0:	00001301 	andeq	r1, r0, r1, lsl #6
     1d4:	03000d07 	movweq	r0, #3335	; 0xd07
     1d8:	3b0b3a0e 	blcc	2cea18 <_Min_Stack_Size+0x2ce618>
     1dc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     1e0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     1e4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     1e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     1ec:	0b381349 	bleq	e04f18 <_Min_Stack_Size+0xe04b18>
     1f0:	26090000 	strcs	r0, [r9], -r0
     1f4:	00134900 	andseq	r4, r3, r0, lsl #18
     1f8:	01010a00 	tsteq	r1, r0, lsl #20
     1fc:	13011349 	movwne	r1, #4937	; 0x1349
     200:	210b0000 	mrscs	r0, (UNDEF: 11)
     204:	2f134900 	svccs	0x00134900
     208:	0c00000b 	stceq	0, cr0, [r0], {11}
     20c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     210:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     214:	00001349 	andeq	r1, r0, r9, asr #6
     218:	0b01040d 	bleq	41254 <_Min_Stack_Size+0x40e54>
     21c:	3b0b3a0b 	blcc	2cea50 <_Min_Stack_Size+0x2ce650>
     220:	00130105 	andseq	r0, r3, r5, lsl #2
     224:	00280e00 	eoreq	r0, r8, r0, lsl #28
     228:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     22c:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
     230:	1c080300 	stcne	3, cr0, [r8], {-0}
     234:	1000000d 	andne	r0, r0, sp
     238:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     23c:	0b3a0e03 	bleq	e83a50 <_Min_Stack_Size+0xe83650>
     240:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     244:	06120111 			; <UNDEFINED> instruction: 0x06120111
     248:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     24c:	11000019 	tstne	r0, r9, lsl r0
     250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     254:	0b3a0e03 	bleq	e83a68 <_Min_Stack_Size+0xe83668>
     258:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     260:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     264:	00130119 	andseq	r0, r3, r9, lsl r1
     268:	00341200 	eorseq	r1, r4, r0, lsl #4
     26c:	0b3a0803 	bleq	e82280 <_Min_Stack_Size+0xe81e80>
     270:	1349053b 	movtne	r0, #38203	; 0x953b
     274:	00001802 	andeq	r1, r0, r2, lsl #16
     278:	03003413 	movweq	r3, #1043	; 0x413
     27c:	3b0b3a0e 	blcc	2ceabc <_Min_Stack_Size+0x2ce6bc>
     280:	02134905 	andseq	r4, r3, #81920	; 0x14000
     284:	14000018 	strne	r0, [r0], #-24
     288:	0e03012e 	adfeqsp	f0, f3, #0.5
     28c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     290:	01111927 	tsteq	r1, r7, lsr #18
     294:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     298:	01194297 			; <UNDEFINED> instruction: 0x01194297
     29c:	15000013 	strne	r0, [r0, #-19]
     2a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2a8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     2ac:	0000193c 	andeq	r1, r0, ip, lsr r9
     2b0:	03003416 	movweq	r3, #1046	; 0x416
     2b4:	3b0b3a0e 	blcc	2ceaf4 <_Min_Stack_Size+0x2ce6f4>
     2b8:	3f13490b 	svccc	0x0013490b
     2bc:	00180219 	andseq	r0, r8, r9, lsl r2
     2c0:	11010000 	mrsne	r0, (UNDEF: 1)
     2c4:	130e2501 	movwne	r2, #58625	; 0xe501
     2c8:	1b0e030b 	blne	380efc <_Min_Stack_Size+0x380afc>
     2cc:	1117550e 	tstne	r7, lr, lsl #10
     2d0:	00171001 	andseq	r1, r7, r1
     2d4:	00240200 	eoreq	r0, r4, r0, lsl #4
     2d8:	0b3e0b0b 	bleq	f82f0c <_Min_Stack_Size+0xf82b0c>
     2dc:	00000e03 	andeq	r0, r0, r3, lsl #28
     2e0:	03001603 	movweq	r1, #1539	; 0x603
     2e4:	3b0b3a0e 	blcc	2ceb24 <_Min_Stack_Size+0x2ce724>
     2e8:	0013490b 	andseq	r4, r3, fp, lsl #18
     2ec:	00240400 	eoreq	r0, r4, r0, lsl #8
     2f0:	0b3e0b0b 	bleq	f82f24 <_Min_Stack_Size+0xf82b24>
     2f4:	00000803 	andeq	r0, r0, r3, lsl #16
     2f8:	0b011305 	bleq	44f14 <_Min_Stack_Size+0x44b14>
     2fc:	3b0b3a05 	blcc	2ceb18 <_Min_Stack_Size+0x2ce718>
     300:	00130105 	andseq	r0, r3, r5, lsl #2
     304:	000d0600 	andeq	r0, sp, r0, lsl #12
     308:	0b3a0e03 	bleq	e83b1c <_Min_Stack_Size+0xe8371c>
     30c:	1349053b 	movtne	r0, #38203	; 0x953b
     310:	00000b38 	andeq	r0, r0, r8, lsr fp
     314:	03000d07 	movweq	r0, #3335	; 0xd07
     318:	3b0b3a0e 	blcc	2ceb58 <_Min_Stack_Size+0x2ce758>
     31c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     320:	08000005 	stmdaeq	r0, {r0, r2}
     324:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     328:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     32c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     330:	01090000 	mrseq	r0, (UNDEF: 9)
     334:	01134901 	tsteq	r3, r1, lsl #18
     338:	0a000013 	beq	38c <_Min_Heap_Size+0x38c>
     33c:	13490021 	movtne	r0, #36897	; 0x9021
     340:	00000b2f 	andeq	r0, r0, pc, lsr #22
     344:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     348:	0c000013 	stceq	0, cr0, [r0], {19}
     34c:	13490021 	movtne	r0, #36897	; 0x9021
     350:	0000052f 	andeq	r0, r0, pc, lsr #10
     354:	0300160d 	movweq	r1, #1549	; 0x60d
     358:	3b0b3a0e 	blcc	2ceb98 <_Min_Stack_Size+0x2ce798>
     35c:	00134905 	andseq	r4, r3, r5, lsl #18
     360:	01130e00 	tsteq	r3, r0, lsl #28
     364:	0b3a0b0b 	bleq	e82f98 <_Min_Stack_Size+0xe82b98>
     368:	1301053b 	movwne	r0, #5435	; 0x153b
     36c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 374 <_Min_Heap_Size+0x374>
     370:	3a080300 	bcc	200f78 <_Min_Stack_Size+0x200b78>
     374:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     378:	000b3813 	andeq	r3, fp, r3, lsl r8
     37c:	00261000 	eoreq	r1, r6, r0
     380:	00001349 	andeq	r1, r0, r9, asr #6
     384:	0b010411 	bleq	413d0 <_Min_Stack_Size+0x40fd0>
     388:	3b0b3a0b 	blcc	2cebbc <_Min_Stack_Size+0x2ce7bc>
     38c:	00130105 	andseq	r0, r3, r5, lsl #2
     390:	00281200 	eoreq	r1, r8, r0, lsl #4
     394:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     398:	13130000 	tstne	r3, #0
     39c:	3a0b0b01 	bcc	2c2fa8 <_Min_Stack_Size+0x2c2ba8>
     3a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     3a4:	14000013 	strne	r0, [r0], #-19
     3a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     3ac:	0b3b0b3a 	bleq	ec309c <_Min_Stack_Size+0xec2c9c>
     3b0:	0b381349 	bleq	e050dc <_Min_Stack_Size+0xe04cdc>
     3b4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     3b8:	03193f01 	tsteq	r9, #1, 30
     3bc:	3b0b3a0e 	blcc	2cebfc <_Min_Stack_Size+0x2ce7fc>
     3c0:	1119270b 	tstne	r9, fp, lsl #14
     3c4:	40061201 	andmi	r1, r6, r1, lsl #4
     3c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3cc:	00001301 	andeq	r1, r0, r1, lsl #6
     3d0:	03000516 	movweq	r0, #1302	; 0x516
     3d4:	3b0b3a0e 	blcc	2cec14 <_Min_Stack_Size+0x2ce814>
     3d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3dc:	17000018 	smladne	r0, r8, r0, r0
     3e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3e4:	0b3b0b3a 	bleq	ec30d4 <_Min_Stack_Size+0xec2cd4>
     3e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     3ec:	0f180000 	svceq	0x00180000
     3f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     3f4:	19000013 	stmdbne	r0, {r0, r1, r4}
     3f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     400:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     404:	0000193c 	andeq	r1, r0, ip, lsr r9
     408:	01110100 	tsteq	r1, r0, lsl #2
     40c:	0b130e25 	bleq	4c3ca8 <_Min_Stack_Size+0x4c38a8>
     410:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     414:	01111755 	tsteq	r1, r5, asr r7
     418:	00001710 	andeq	r1, r0, r0, lsl r7
     41c:	0b002402 	bleq	942c <_Min_Stack_Size+0x902c>
     420:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     424:	0300000e 	movweq	r0, #14
     428:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     42c:	0b3b0b3a 	bleq	ec311c <_Min_Stack_Size+0xec2d1c>
     430:	00001349 	andeq	r1, r0, r9, asr #6
     434:	0b002404 	bleq	944c <_Min_Stack_Size+0x904c>
     438:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     43c:	05000008 	streq	r0, [r0, #-8]
     440:	13490035 	movtne	r0, #36917	; 0x9035
     444:	01060000 	mrseq	r0, (UNDEF: 6)
     448:	01134901 	tsteq	r3, r1, lsl #18
     44c:	07000013 	smladeq	r0, r3, r0, r0
     450:	13490021 	movtne	r0, #36897	; 0x9021
     454:	00000b2f 	andeq	r0, r0, pc, lsr #22
     458:	0b010408 	bleq	41480 <_Min_Stack_Size+0x41080>
     45c:	3b0b3a0b 	blcc	2cec90 <_Min_Stack_Size+0x2ce890>
     460:	00130105 	andseq	r0, r3, r5, lsl #2
     464:	00280900 	eoreq	r0, r8, r0, lsl #18
     468:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     46c:	130a0000 	movwne	r0, #40960	; 0xa000
     470:	3a0b0b01 	bcc	2c307c <_Min_Stack_Size+0x2c2c7c>
     474:	01053b0b 	tsteq	r5, fp, lsl #22
     478:	0b000013 	bleq	4cc <_Min_Stack_Size+0xcc>
     47c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     480:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     484:	0b381349 	bleq	e051b0 <_Min_Stack_Size+0xe04db0>
     488:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     48c:	3a080300 	bcc	201094 <_Min_Stack_Size+0x200c94>
     490:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	000b3813 	andeq	r3, fp, r3, lsl r8
     498:	00160d00 	andseq	r0, r6, r0, lsl #26
     49c:	0b3a0e03 	bleq	e83cb0 <_Min_Stack_Size+0xe838b0>
     4a0:	1349053b 	movtne	r0, #38203	; 0x953b
     4a4:	040e0000 	streq	r0, [lr], #-0
     4a8:	3a0b0b01 	bcc	2c30b4 <_Min_Stack_Size+0x2c2cb4>
     4ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     4b0:	0f000013 	svceq	0x00000013
     4b4:	0b0b0113 	bleq	2c0908 <_Min_Stack_Size+0x2c0508>
     4b8:	0b3b0b3a 	bleq	ec31a8 <_Min_Stack_Size+0xec2da8>
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000d10 	movweq	r0, #3344	; 0xd10
     4c4:	3b0b3a0e 	blcc	2ced04 <_Min_Stack_Size+0x2ce904>
     4c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     4cc:	1100000b 	tstne	r0, fp
     4d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4d4:	0b3a0e03 	bleq	e83ce8 <_Min_Stack_Size+0xe838e8>
     4d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     4e4:	00130119 	andseq	r0, r3, r9, lsl r1
     4e8:	00051200 	andeq	r1, r5, r0, lsl #4
     4ec:	0b3a0e03 	bleq	e83d00 <_Min_Stack_Size+0xe83900>
     4f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4f4:	00001802 	andeq	r1, r0, r2, lsl #16
     4f8:	0b000f13 	bleq	414c <_Min_Stack_Size+0x3d4c>
     4fc:	0013490b 	andseq	r4, r3, fp, lsl #18
     500:	012e1400 	teqeq	lr, r0, lsl #8
     504:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     508:	0b3b0b3a 	bleq	ec31f8 <_Min_Stack_Size+0xec2df8>
     50c:	01111927 	tsteq	r1, r7, lsr #18
     510:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     514:	01194297 			; <UNDEFINED> instruction: 0x01194297
     518:	15000013 	strne	r0, [r0, #-19]
     51c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     520:	0b3b0b3a 	bleq	ec3210 <_Min_Stack_Size+0xec2e10>
     524:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     528:	34160000 	ldrcc	r0, [r6], #-0
     52c:	3a080300 	bcc	201134 <_Min_Stack_Size+0x200d34>
     530:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     534:	00180213 	andseq	r0, r8, r3, lsl r2
     538:	012e1700 	teqeq	lr, r0, lsl #14
     53c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     540:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     550:	18000013 	stmdane	r0, {r0, r1, r4}
     554:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     558:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     55c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     560:	34190000 	ldrcc	r0, [r9], #-0
     564:	3a080300 	bcc	20116c <_Min_Stack_Size+0x200d6c>
     568:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     56c:	00180213 	andseq	r0, r8, r3, lsl r2
     570:	012e1a00 	teqeq	lr, r0, lsl #20
     574:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     57c:	13491927 	movtne	r1, #39207	; 0x9927
     580:	06120111 			; <UNDEFINED> instruction: 0x06120111
     584:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     588:	00130119 	andseq	r0, r3, r9, lsl r1
     58c:	00341b00 	eorseq	r1, r4, r0, lsl #22
     590:	0b3a0e03 	bleq	e83da4 <_Min_Stack_Size+0xe839a4>
     594:	1349053b 	movtne	r0, #38203	; 0x953b
     598:	00001802 	andeq	r1, r0, r2, lsl #16
     59c:	0300341c 	movweq	r3, #1052	; 0x41c
     5a0:	3b0b3a0e 	blcc	2cede0 <_Min_Stack_Size+0x2ce9e0>
     5a4:	3f134905 	svccc	0x00134905
     5a8:	00193c19 	andseq	r3, r9, r9, lsl ip
     5ac:	11010000 	mrsne	r0, (UNDEF: 1)
     5b0:	130e2501 	movwne	r2, #58625	; 0xe501
     5b4:	1b0e030b 	blne	3811e8 <_Min_Stack_Size+0x380de8>
     5b8:	1117550e 	tstne	r7, lr, lsl #10
     5bc:	00171001 	andseq	r1, r7, r1
     5c0:	00240200 	eoreq	r0, r4, r0, lsl #4
     5c4:	0b3e0b0b 	bleq	f831f8 <_Min_Stack_Size+0xf82df8>
     5c8:	00000e03 	andeq	r0, r0, r3, lsl #28
     5cc:	03001603 	movweq	r1, #1539	; 0x603
     5d0:	3b0b3a0e 	blcc	2cee10 <_Min_Stack_Size+0x2cea10>
     5d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5d8:	00240400 	eoreq	r0, r4, r0, lsl #8
     5dc:	0b3e0b0b 	bleq	f83210 <_Min_Stack_Size+0xf82e10>
     5e0:	00000803 	andeq	r0, r0, r3, lsl #16
     5e4:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     5e8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     5ec:	13490101 	movtne	r0, #37121	; 0x9101
     5f0:	00001301 	andeq	r1, r0, r1, lsl #6
     5f4:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
     5f8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     5fc:	01040800 	tsteq	r4, r0, lsl #16
     600:	0b3a0b0b 	bleq	e83234 <_Min_Stack_Size+0xe82e34>
     604:	1301053b 	movwne	r0, #5435	; 0x153b
     608:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
     60c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     610:	0a00000d 	beq	64c <_Min_Stack_Size+0x24c>
     614:	08030028 	stmdaeq	r3, {r3, r5}
     618:	00000d1c 	andeq	r0, r0, ip, lsl sp
     61c:	0300160b 	movweq	r1, #1547	; 0x60b
     620:	3b0b3a0e 	blcc	2cee60 <_Min_Stack_Size+0x2cea60>
     624:	00134905 	andseq	r4, r3, r5, lsl #18
     628:	01130c00 	tsteq	r3, r0, lsl #24
     62c:	0b3a0b0b 	bleq	e83260 <_Min_Stack_Size+0xe82e60>
     630:	1301053b 	movwne	r0, #5435	; 0x153b
     634:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     638:	3a080300 	bcc	201240 <_Min_Stack_Size+0x200e40>
     63c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	000b3813 	andeq	r3, fp, r3, lsl r8
     644:	000d0e00 	andeq	r0, sp, r0, lsl #28
     648:	0b3a0e03 	bleq	e83e5c <_Min_Stack_Size+0xe83a5c>
     64c:	1349053b 	movtne	r0, #38203	; 0x953b
     650:	00000b38 	andeq	r0, r0, r8, lsr fp
     654:	0b01130f 	bleq	45298 <_Min_Stack_Size+0x44e98>
     658:	3b0b3a0b 	blcc	2cee8c <_Min_Stack_Size+0x2cea8c>
     65c:	0013010b 	andseq	r0, r3, fp, lsl #2
     660:	000d1000 	andeq	r1, sp, r0
     664:	0b3a0e03 	bleq	e83e78 <_Min_Stack_Size+0xe83a78>
     668:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     66c:	00000b38 	andeq	r0, r0, r8, lsr fp
     670:	3f002e11 	svccc	0x00002e11
     674:	3a0e0319 	bcc	3812e0 <_Min_Stack_Size+0x380ee0>
     678:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     67c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     680:	97184006 	ldrls	r4, [r8, -r6]
     684:	00001942 	andeq	r1, r0, r2, asr #18
     688:	3f012e12 	svccc	0x00012e12
     68c:	3a0e0319 	bcc	3812f8 <_Min_Stack_Size+0x380ef8>
     690:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     694:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     698:	97184006 	ldrls	r4, [r8, -r6]
     69c:	13011942 	movwne	r1, #6466	; 0x1942
     6a0:	05130000 	ldreq	r0, [r3, #-0]
     6a4:	3a0e0300 	bcc	3812ac <_Min_Stack_Size+0x380eac>
     6a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ac:	00180213 	andseq	r0, r8, r3, lsl r2
     6b0:	012e1400 	teqeq	lr, r0, lsl #8
     6b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6bc:	13491927 	movtne	r1, #39207	; 0x9927
     6c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     6c8:	00130119 	andseq	r0, r3, r9, lsl r1
     6cc:	00341500 	eorseq	r1, r4, r0, lsl #10
     6d0:	0b3a0e03 	bleq	e83ee4 <_Min_Stack_Size+0xe83ae4>
     6d4:	1349053b 	movtne	r0, #38203	; 0x953b
     6d8:	00001802 	andeq	r1, r0, r2, lsl #16
     6dc:	3f002e16 	svccc	0x00002e16
     6e0:	3a0e0319 	bcc	38134c <_Min_Stack_Size+0x380f4c>
     6e4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     6e8:	11134919 	tstne	r3, r9, lsl r9
     6ec:	40061201 	andmi	r1, r6, r1, lsl #4
     6f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     6f4:	34170000 	ldrcc	r0, [r7], #-0
     6f8:	3a080300 	bcc	201300 <_Min_Stack_Size+0x200f00>
     6fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     700:	00180213 	andseq	r0, r8, r3, lsl r2
     704:	000f1800 	andeq	r1, pc, r0, lsl #16
     708:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     70c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     710:	03193f01 	tsteq	r9, #1, 30
     714:	3b0b3a0e 	blcc	2cef54 <_Min_Stack_Size+0x2ceb54>
     718:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     71c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     720:	97184006 	ldrls	r4, [r8, -r6]
     724:	13011942 	movwne	r1, #6466	; 0x1942
     728:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     72c:	03193f00 	tsteq	r9, #0, 30
     730:	3b0b3a0e 	blcc	2cef70 <_Min_Stack_Size+0x2ceb70>
     734:	11192705 	tstne	r9, r5, lsl #14
     738:	40061201 	andmi	r1, r6, r1, lsl #4
     73c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     740:	341b0000 	ldrcc	r0, [fp], #-0
     744:	3a0e0300 	bcc	38134c <_Min_Stack_Size+0x380f4c>
     748:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     74c:	00180213 	andseq	r0, r8, r3, lsl r2
     750:	00261c00 	eoreq	r1, r6, r0, lsl #24
     754:	00001349 	andeq	r1, r0, r9, asr #6
     758:	0300341d 	movweq	r3, #1053	; 0x41d
     75c:	3b0b3a0e 	blcc	2cef9c <_Min_Stack_Size+0x2ceb9c>
     760:	3f134905 	svccc	0x00134905
     764:	00193c19 	andseq	r3, r9, r9, lsl ip
     768:	11010000 	mrsne	r0, (UNDEF: 1)
     76c:	130e2501 	movwne	r2, #58625	; 0xe501
     770:	1b0e030b 	blne	3813a4 <_Min_Stack_Size+0x380fa4>
     774:	1117550e 	tstne	r7, lr, lsl #10
     778:	00171001 	andseq	r1, r7, r1
     77c:	00240200 	eoreq	r0, r4, r0, lsl #4
     780:	0b3e0b0b 	bleq	f833b4 <_Min_Stack_Size+0xf82fb4>
     784:	00000e03 	andeq	r0, r0, r3, lsl #28
     788:	03001603 	movweq	r1, #1539	; 0x603
     78c:	3b0b3a0e 	blcc	2cefcc <_Min_Stack_Size+0x2cebcc>
     790:	0013490b 	andseq	r4, r3, fp, lsl #18
     794:	00240400 	eoreq	r0, r4, r0, lsl #8
     798:	0b3e0b0b 	bleq	f833cc <_Min_Stack_Size+0xf82fcc>
     79c:	00000803 	andeq	r0, r0, r3, lsl #16
     7a0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     7a4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     7a8:	0b0b0104 	bleq	2c0bc0 <_Min_Stack_Size+0x2c07c0>
     7ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     7b0:	00001301 	andeq	r1, r0, r1, lsl #6
     7b4:	03002807 	movweq	r2, #2055	; 0x807
     7b8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     7bc:	00280800 	eoreq	r0, r8, r0, lsl #16
     7c0:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     7c4:	16090000 	strne	r0, [r9], -r0
     7c8:	3a0e0300 	bcc	3813d0 <_Min_Stack_Size+0x380fd0>
     7cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d0:	0a000013 	beq	824 <_Min_Stack_Size+0x424>
     7d4:	0b0b0113 	bleq	2c0c28 <_Min_Stack_Size+0x2c0828>
     7d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     7dc:	00001301 	andeq	r1, r0, r1, lsl #6
     7e0:	03000d0b 	movweq	r0, #3339	; 0xd0b
     7e4:	3b0b3a08 	blcc	2cf00c <_Min_Stack_Size+0x2cec0c>
     7e8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     7ec:	0c00000b 	stceq	0, cr0, [r0], {11}
     7f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     7f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     7f8:	0b381349 	bleq	e05524 <_Min_Stack_Size+0xe05124>
     7fc:	130d0000 	movwne	r0, #53248	; 0xd000
     800:	3a0b0b01 	bcc	2c340c <_Min_Stack_Size+0x2c300c>
     804:	010b3b0b 	tsteq	fp, fp, lsl #22
     808:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     80c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     810:	0b3b0b3a 	bleq	ec3500 <_Min_Stack_Size+0xec3100>
     814:	0b381349 	bleq	e05540 <_Min_Stack_Size+0xe05140>
     818:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     81c:	03193f01 	tsteq	r9, #1, 30
     820:	3b0b3a0e 	blcc	2cf060 <_Min_Stack_Size+0x2cec60>
     824:	1119270b 	tstne	r9, fp, lsl #14
     828:	40061201 	andmi	r1, r6, r1, lsl #4
     82c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     830:	00001301 	andeq	r1, r0, r1, lsl #6
     834:	03000510 	movweq	r0, #1296	; 0x510
     838:	3b0b3a0e 	blcc	2cf078 <_Min_Stack_Size+0x2cec78>
     83c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     840:	11000018 	tstne	r0, r8, lsl r0
     844:	0b0b000f 	bleq	2c0888 <_Min_Stack_Size+0x2c0488>
     848:	00001349 	andeq	r1, r0, r9, asr #6
     84c:	03003412 	movweq	r3, #1042	; 0x412
     850:	3b0b3a0e 	blcc	2cf090 <_Min_Stack_Size+0x2cec90>
     854:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     858:	13000018 	movwne	r0, #24
     85c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     860:	0b3a0e03 	bleq	e84074 <_Min_Stack_Size+0xe83c74>
     864:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     868:	06120111 			; <UNDEFINED> instruction: 0x06120111
     86c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     870:	00130119 	andseq	r0, r3, r9, lsl r1
     874:	00051400 	andeq	r1, r5, r0, lsl #8
     878:	0b3a0e03 	bleq	e8408c <_Min_Stack_Size+0xe83c8c>
     87c:	1349053b 	movtne	r0, #38203	; 0x953b
     880:	00001802 	andeq	r1, r0, r2, lsl #16
     884:	03003415 	movweq	r3, #1045	; 0x415
     888:	3b0b3a0e 	blcc	2cf0c8 <_Min_Stack_Size+0x2cecc8>
     88c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     890:	16000018 			; <UNDEFINED> instruction: 0x16000018
     894:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     898:	0b3a0e03 	bleq	e840ac <_Min_Stack_Size+0xe83cac>
     89c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8a0:	01111349 	tsteq	r1, r9, asr #6
     8a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8ac:	17000013 	smladne	r0, r3, r0, r0
     8b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     8bc:	0000193c 	andeq	r1, r0, ip, lsr r9
     8c0:	01110100 	tsteq	r1, r0, lsl #2
     8c4:	0b130e25 	bleq	4c4160 <_Min_Stack_Size+0x4c3d60>
     8c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     8cc:	01111755 	tsteq	r1, r5, asr r7
     8d0:	00001710 	andeq	r1, r0, r0, lsl r7
     8d4:	0b002402 	bleq	98e4 <_Min_Stack_Size+0x94e4>
     8d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8dc:	0300000e 	movweq	r0, #14
     8e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     8e4:	0b3b0b3a 	bleq	ec35d4 <_Min_Stack_Size+0xec31d4>
     8e8:	00001349 	andeq	r1, r0, r9, asr #6
     8ec:	0b002404 	bleq	9904 <_Min_Stack_Size+0x9504>
     8f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8f4:	05000008 	streq	r0, [r0, #-8]
     8f8:	13490035 	movtne	r0, #36917	; 0x9035
     8fc:	01060000 	mrseq	r0, (UNDEF: 6)
     900:	01134901 	tsteq	r3, r1, lsl #18
     904:	07000013 	smladeq	r0, r3, r0, r0
     908:	13490021 	movtne	r0, #36897	; 0x9021
     90c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     910:	0b010408 	bleq	41938 <_Min_Stack_Size+0x41538>
     914:	3b0b3a0b 	blcc	2cf148 <_Min_Stack_Size+0x2ced48>
     918:	00130105 	andseq	r0, r3, r5, lsl #2
     91c:	00280900 	eoreq	r0, r8, r0, lsl #18
     920:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     924:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     928:	1c080300 	stcne	3, cr0, [r8], {-0}
     92c:	0b00000d 	bleq	968 <_Min_Stack_Size+0x568>
     930:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     934:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     938:	00001349 	andeq	r1, r0, r9, asr #6
     93c:	0b01130c 	bleq	45574 <_Min_Stack_Size+0x45174>
     940:	3b0b3a0b 	blcc	2cf174 <_Min_Stack_Size+0x2ced74>
     944:	00130105 	andseq	r0, r3, r5, lsl #2
     948:	000d0d00 	andeq	r0, sp, r0, lsl #26
     94c:	0b3a0e03 	bleq	e84160 <_Min_Stack_Size+0xe83d60>
     950:	1349053b 	movtne	r0, #38203	; 0x953b
     954:	00000b38 	andeq	r0, r0, r8, lsr fp
     958:	03000d0e 	movweq	r0, #3342	; 0xd0e
     95c:	3b0b3a08 	blcc	2cf184 <_Min_Stack_Size+0x2ced84>
     960:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     964:	0f00000b 	svceq	0x0000000b
     968:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     96c:	0b3a0e03 	bleq	e84180 <_Min_Stack_Size+0xe83d80>
     970:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     974:	06120111 			; <UNDEFINED> instruction: 0x06120111
     978:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     97c:	10000019 	andne	r0, r0, r9, lsl r0
     980:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     984:	0b3a0e03 	bleq	e84198 <_Min_Stack_Size+0xe83d98>
     988:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     98c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     990:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     994:	00130119 	andseq	r0, r3, r9, lsl r1
     998:	00051100 	andeq	r1, r5, r0, lsl #2
     99c:	0b3a0e03 	bleq	e841b0 <_Min_Stack_Size+0xe83db0>
     9a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9a4:	00001802 	andeq	r1, r0, r2, lsl #16
     9a8:	03003412 	movweq	r3, #1042	; 0x412
     9ac:	3b0b3a08 	blcc	2cf1d4 <_Min_Stack_Size+0x2cedd4>
     9b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9b4:	13000018 	movwne	r0, #24
     9b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9bc:	0b3a0e03 	bleq	e841d0 <_Min_Stack_Size+0xe83dd0>
     9c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9c4:	01111349 	tsteq	r1, r9, asr #6
     9c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9d0:	14000013 	strne	r0, [r0], #-19
     9d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9d8:	0b3b0b3a 	bleq	ec36c8 <_Min_Stack_Size+0xec32c8>
     9dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9e0:	34150000 	ldrcc	r0, [r5], #-0
     9e4:	3a0e0300 	bcc	3815ec <_Min_Stack_Size+0x3811ec>
     9e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ec:	3c193f13 	ldccc	15, cr3, [r9], {19}
     9f0:	00000019 	andeq	r0, r0, r9, lsl r0
     9f4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     9f8:	030b130e 	movweq	r1, #45838	; 0xb30e
     9fc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     a00:	10011117 	andne	r1, r1, r7, lsl r1
     a04:	02000017 	andeq	r0, r0, #23
     a08:	0b0b0024 	bleq	2c0aa0 <_Min_Stack_Size+0x2c06a0>
     a0c:	0e030b3e 	vmoveq.16	d3[0], r0
     a10:	16030000 	strne	r0, [r3], -r0
     a14:	3a0e0300 	bcc	38161c <_Min_Stack_Size+0x38121c>
     a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a1c:	04000013 	streq	r0, [r0], #-19
     a20:	0b0b0024 	bleq	2c0ab8 <_Min_Stack_Size+0x2c06b8>
     a24:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     a28:	35050000 	strcc	r0, [r5, #-0]
     a2c:	00134900 	andseq	r4, r3, r0, lsl #18
     a30:	01040600 	tsteq	r4, r0, lsl #12
     a34:	0b3a0b0b 	bleq	e83668 <_Min_Stack_Size+0xe83268>
     a38:	1301053b 	movwne	r0, #5435	; 0x153b
     a3c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     a40:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     a44:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     a48:	08030028 	stmdaeq	r3, {r3, r5}
     a4c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     a50:	03001609 	movweq	r1, #1545	; 0x609
     a54:	3b0b3a0e 	blcc	2cf294 <_Min_Stack_Size+0x2cee94>
     a58:	00134905 	andseq	r4, r3, r5, lsl #18
     a5c:	01130a00 	tsteq	r3, r0, lsl #20
     a60:	0b3a0b0b 	bleq	e83694 <_Min_Stack_Size+0xe83294>
     a64:	1301053b 	movwne	r0, #5435	; 0x153b
     a68:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     a6c:	3a080300 	bcc	201674 <_Min_Stack_Size+0x201274>
     a70:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a74:	000b3813 	andeq	r3, fp, r3, lsl r8
     a78:	000d0c00 	andeq	r0, sp, r0, lsl #24
     a7c:	0b3a0e03 	bleq	e84290 <_Min_Stack_Size+0xe83e90>
     a80:	1349053b 	movtne	r0, #38203	; 0x953b
     a84:	00000b38 	andeq	r0, r0, r8, lsr fp
     a88:	0b01130d 	bleq	456c4 <_Min_Stack_Size+0x452c4>
     a8c:	3b0b3a0b 	blcc	2cf2c0 <_Min_Stack_Size+0x2ceec0>
     a90:	0013010b 	andseq	r0, r3, fp, lsl #2
     a94:	000d0e00 	andeq	r0, sp, r0, lsl #28
     a98:	0b3a0e03 	bleq	e842ac <_Min_Stack_Size+0xe83eac>
     a9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     aa0:	00000b38 	andeq	r0, r0, r8, lsr fp
     aa4:	3f012e0f 	svccc	0x00012e0f
     aa8:	3a0e0319 	bcc	381714 <_Min_Stack_Size+0x381314>
     aac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ab0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ab4:	96184006 	ldrls	r4, [r8], -r6
     ab8:	13011942 	movwne	r1, #6466	; 0x1942
     abc:	05100000 	ldreq	r0, [r0, #-0]
     ac0:	3a0e0300 	bcc	3816c8 <_Min_Stack_Size+0x3812c8>
     ac4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac8:	00180213 	andseq	r0, r8, r3, lsl r2
     acc:	000f1100 	andeq	r1, pc, r0, lsl #2
     ad0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ad4:	34120000 	ldrcc	r0, [r2], #-0
     ad8:	3a0e0300 	bcc	3816e0 <_Min_Stack_Size+0x3812e0>
     adc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae0:	00180213 	andseq	r0, r8, r3, lsl r2
     ae4:	012e1300 	teqeq	lr, r0, lsl #6
     ae8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     aec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     af0:	01111927 	tsteq	r1, r7, lsr #18
     af4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     afc:	14000013 	strne	r0, [r0], #-19
     b00:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b0c:	34150000 	ldrcc	r0, [r5], #-0
     b10:	3a0e0300 	bcc	381718 <_Min_Stack_Size+0x381318>
     b14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	00180213 	andseq	r0, r8, r3, lsl r2
     b1c:	012e1600 	teqeq	lr, r0, lsl #12
     b20:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b28:	13491927 	movtne	r1, #39207	; 0x9927
     b2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b30:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b34:	00130119 	andseq	r0, r3, r9, lsl r1
     b38:	00341700 	eorseq	r1, r4, r0, lsl #14
     b3c:	0b3a0803 	bleq	e82b50 <_Min_Stack_Size+0xe82750>
     b40:	1349053b 	movtne	r0, #38203	; 0x953b
     b44:	00001802 	andeq	r1, r0, r2, lsl #16
     b48:	03003418 	movweq	r3, #1048	; 0x418
     b4c:	3b0b3a0e 	blcc	2cf38c <_Min_Stack_Size+0x2cef8c>
     b50:	3f134905 	svccc	0x00134905
     b54:	00193c19 	andseq	r3, r9, r9, lsl ip
     b58:	11010000 	mrsne	r0, (UNDEF: 1)
     b5c:	130e2501 	movwne	r2, #58625	; 0xe501
     b60:	1b0e030b 	blne	381794 <_Min_Stack_Size+0x381394>
     b64:	1117550e 	tstne	r7, lr, lsl #10
     b68:	00171001 	andseq	r1, r7, r1
     b6c:	00240200 	eoreq	r0, r4, r0, lsl #4
     b70:	0b3e0b0b 	bleq	f837a4 <_Min_Stack_Size+0xf833a4>
     b74:	00000e03 	andeq	r0, r0, r3, lsl #28
     b78:	03001603 	movweq	r1, #1539	; 0x603
     b7c:	3b0b3a0e 	blcc	2cf3bc <_Min_Stack_Size+0x2cefbc>
     b80:	0013490b 	andseq	r4, r3, fp, lsl #18
     b84:	00240400 	eoreq	r0, r4, r0, lsl #8
     b88:	0b3e0b0b 	bleq	f837bc <_Min_Stack_Size+0xf833bc>
     b8c:	00000803 	andeq	r0, r0, r3, lsl #16
     b90:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     b94:	06000013 			; <UNDEFINED> instruction: 0x06000013
     b98:	0b0b0104 	bleq	2c0fb0 <_Min_Stack_Size+0x2c0bb0>
     b9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ba0:	00001301 	andeq	r1, r0, r1, lsl #6
     ba4:	03002807 	movweq	r2, #2055	; 0x807
     ba8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     bac:	00280800 	eoreq	r0, r8, r0, lsl #16
     bb0:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     bb4:	16090000 	strne	r0, [r9], -r0
     bb8:	3a0e0300 	bcc	3817c0 <_Min_Stack_Size+0x3813c0>
     bbc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc0:	0a000013 	beq	c14 <_Min_Stack_Size+0x814>
     bc4:	0b0b0113 	bleq	2c1018 <_Min_Stack_Size+0x2c0c18>
     bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bcc:	00001301 	andeq	r1, r0, r1, lsl #6
     bd0:	03000d0b 	movweq	r0, #3339	; 0xd0b
     bd4:	3b0b3a08 	blcc	2cf3fc <_Min_Stack_Size+0x2ceffc>
     bd8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     bdc:	0c00000b 	stceq	0, cr0, [r0], {11}
     be0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     be4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     be8:	0b381349 	bleq	e05914 <_Min_Stack_Size+0xe05514>
     bec:	130d0000 	movwne	r0, #53248	; 0xd000
     bf0:	3a0b0b01 	bcc	2c37fc <_Min_Stack_Size+0x2c33fc>
     bf4:	010b3b0b 	tsteq	fp, fp, lsl #22
     bf8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     bfc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c00:	0b3b0b3a 	bleq	ec38f0 <_Min_Stack_Size+0xec34f0>
     c04:	0b381349 	bleq	e05930 <_Min_Stack_Size+0xe05530>
     c08:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     c0c:	03193f01 	tsteq	r9, #1, 30
     c10:	3b0b3a0e 	blcc	2cf450 <_Min_Stack_Size+0x2cf050>
     c14:	1119270b 	tstne	r9, fp, lsl #14
     c18:	40061201 	andmi	r1, r6, r1, lsl #4
     c1c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c20:	00001301 	andeq	r1, r0, r1, lsl #6
     c24:	03000510 	movweq	r0, #1296	; 0x510
     c28:	3b0b3a0e 	blcc	2cf468 <_Min_Stack_Size+0x2cf068>
     c2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c30:	11000018 	tstne	r0, r8, lsl r0
     c34:	0b0b000f 	bleq	2c0c78 <_Min_Stack_Size+0x2c0878>
     c38:	00001349 	andeq	r1, r0, r9, asr #6
     c3c:	3f012e12 	svccc	0x00012e12
     c40:	3a0e0319 	bcc	3818ac <_Min_Stack_Size+0x3814ac>
     c44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c48:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c4c:	97184006 	ldrls	r4, [r8, -r6]
     c50:	13011942 	movwne	r1, #6466	; 0x1942
     c54:	05130000 	ldreq	r0, [r3, #-0]
     c58:	3a0e0300 	bcc	381860 <_Min_Stack_Size+0x381460>
     c5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c60:	00180213 	andseq	r0, r8, r3, lsl r2
     c64:	00341400 	eorseq	r1, r4, r0, lsl #8
     c68:	0b3a0e03 	bleq	e8447c <_Min_Stack_Size+0xe8407c>
     c6c:	1349053b 	movtne	r0, #38203	; 0x953b
     c70:	00001802 	andeq	r1, r0, r2, lsl #16
     c74:	3f012e15 	svccc	0x00012e15
     c78:	3a0e0319 	bcc	3818e4 <_Min_Stack_Size+0x3814e4>
     c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c80:	11134919 	tstne	r3, r9, lsl r9
     c84:	40061201 	andmi	r1, r6, r1, lsl #4
     c88:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c8c:	00001301 	andeq	r1, r0, r1, lsl #6
     c90:	03003416 	movweq	r3, #1046	; 0x416
     c94:	3b0b3a08 	blcc	2cf4bc <_Min_Stack_Size+0x2cf0bc>
     c98:	02134905 	andseq	r4, r3, #81920	; 0x14000
     c9c:	17000018 	smladne	r0, r8, r0, r0
     ca0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ca4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ca8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     cac:	0000193c 	andeq	r1, r0, ip, lsr r9
     cb0:	01110100 	tsteq	r1, r0, lsl #2
     cb4:	0b130e25 	bleq	4c4550 <_Min_Stack_Size+0x4c4150>
     cb8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     cbc:	01111755 	tsteq	r1, r5, asr r7
     cc0:	00001710 	andeq	r1, r0, r0, lsl r7
     cc4:	0b002402 	bleq	9cd4 <_Min_Stack_Size+0x98d4>
     cc8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ccc:	0300000e 	movweq	r0, #14
     cd0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cd4:	0b3b0b3a 	bleq	ec39c4 <_Min_Stack_Size+0xec35c4>
     cd8:	00001349 	andeq	r1, r0, r9, asr #6
     cdc:	0b002404 	bleq	9cf4 <_Min_Stack_Size+0x98f4>
     ce0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ce4:	05000008 	streq	r0, [r0, #-8]
     ce8:	13490035 	movtne	r0, #36917	; 0x9035
     cec:	01060000 	mrseq	r0, (UNDEF: 6)
     cf0:	01134901 	tsteq	r3, r1, lsl #18
     cf4:	07000013 	smladeq	r0, r3, r0, r0
     cf8:	13490021 	movtne	r0, #36897	; 0x9021
     cfc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d00:	0b010408 	bleq	41d28 <_Min_Stack_Size+0x41928>
     d04:	3b0b3a0b 	blcc	2cf538 <_Min_Stack_Size+0x2cf138>
     d08:	00130105 	andseq	r0, r3, r5, lsl #2
     d0c:	00280900 	eoreq	r0, r8, r0, lsl #18
     d10:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     d14:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     d18:	1c080300 	stcne	3, cr0, [r8], {-0}
     d1c:	0b00000d 	bleq	d58 <_Min_Stack_Size+0x958>
     d20:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d28:	00001349 	andeq	r1, r0, r9, asr #6
     d2c:	0b01130c 	bleq	45964 <_Min_Stack_Size+0x45564>
     d30:	3b0b3a0b 	blcc	2cf564 <_Min_Stack_Size+0x2cf164>
     d34:	00130105 	andseq	r0, r3, r5, lsl #2
     d38:	000d0d00 	andeq	r0, sp, r0, lsl #26
     d3c:	0b3a0803 	bleq	e82d50 <_Min_Stack_Size+0xe82950>
     d40:	1349053b 	movtne	r0, #38203	; 0x953b
     d44:	00000b38 	andeq	r0, r0, r8, lsr fp
     d48:	03000d0e 	movweq	r0, #3342	; 0xd0e
     d4c:	3b0b3a0e 	blcc	2cf58c <_Min_Stack_Size+0x2cf18c>
     d50:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     d54:	0f00000b 	svceq	0x0000000b
     d58:	0b0b0113 	bleq	2c11ac <_Min_Stack_Size+0x2c0dac>
     d5c:	0b3b0b3a 	bleq	ec3a4c <_Min_Stack_Size+0xec364c>
     d60:	00001301 	andeq	r1, r0, r1, lsl #6
     d64:	03000d10 	movweq	r0, #3344	; 0xd10
     d68:	3b0b3a0e 	blcc	2cf5a8 <_Min_Stack_Size+0x2cf1a8>
     d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d70:	1100000b 	tstne	r0, fp
     d74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d78:	0b3a0e03 	bleq	e8458c <_Min_Stack_Size+0xe8418c>
     d7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d80:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d84:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     d88:	00130119 	andseq	r0, r3, r9, lsl r1
     d8c:	00051200 	andeq	r1, r5, r0, lsl #4
     d90:	0b3a0e03 	bleq	e845a4 <_Min_Stack_Size+0xe841a4>
     d94:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d98:	00001802 	andeq	r1, r0, r2, lsl #16
     d9c:	0b000f13 	bleq	49f0 <_Min_Stack_Size+0x45f0>
     da0:	0013490b 	andseq	r4, r3, fp, lsl #18
     da4:	012e1400 	teqeq	lr, r0, lsl #8
     da8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     db0:	01111927 	tsteq	r1, r7, lsr #18
     db4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     db8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     dbc:	15000013 	strne	r0, [r0, #-19]
     dc0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     dc8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dcc:	34160000 	ldrcc	r0, [r6], #-0
     dd0:	3a0e0300 	bcc	3819d8 <_Min_Stack_Size+0x3815d8>
     dd4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dd8:	00180213 	andseq	r0, r8, r3, lsl r2
     ddc:	00341700 	eorseq	r1, r4, r0, lsl #14
     de0:	0b3a0803 	bleq	e82df4 <_Min_Stack_Size+0xe829f4>
     de4:	1349053b 	movtne	r0, #38203	; 0x953b
     de8:	00001802 	andeq	r1, r0, r2, lsl #16
     dec:	3f012e18 	svccc	0x00012e18
     df0:	3a0e0319 	bcc	381a5c <_Min_Stack_Size+0x38165c>
     df4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     df8:	11134919 	tstne	r3, r9, lsl r9
     dfc:	40061201 	andmi	r1, r6, r1, lsl #4
     e00:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	03003419 	movweq	r3, #1049	; 0x419
     e0c:	3b0b3a0e 	blcc	2cf64c <_Min_Stack_Size+0x2cf24c>
     e10:	3f134905 	svccc	0x00134905
     e14:	00193c19 	andseq	r3, r9, r9, lsl ip
     e18:	11010000 	mrsne	r0, (UNDEF: 1)
     e1c:	130e2501 	movwne	r2, #58625	; 0xe501
     e20:	1b0e030b 	blne	381a54 <_Min_Stack_Size+0x381654>
     e24:	1117550e 	tstne	r7, lr, lsl #10
     e28:	00171001 	andseq	r1, r7, r1
     e2c:	00240200 	eoreq	r0, r4, r0, lsl #4
     e30:	0b3e0b0b 	bleq	f83a64 <_Min_Stack_Size+0xf83664>
     e34:	00000e03 	andeq	r0, r0, r3, lsl #28
     e38:	03001603 	movweq	r1, #1539	; 0x603
     e3c:	3b0b3a0e 	blcc	2cf67c <_Min_Stack_Size+0x2cf27c>
     e40:	0013490b 	andseq	r4, r3, fp, lsl #18
     e44:	00240400 	eoreq	r0, r4, r0, lsl #8
     e48:	0b3e0b0b 	bleq	f83a7c <_Min_Stack_Size+0xf8367c>
     e4c:	00000803 	andeq	r0, r0, r3, lsl #16
     e50:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     e54:	06000013 			; <UNDEFINED> instruction: 0x06000013
     e58:	0b0b0104 	bleq	2c1270 <_Min_Stack_Size+0x2c0e70>
     e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e60:	00001301 	andeq	r1, r0, r1, lsl #6
     e64:	03002807 	movweq	r2, #2055	; 0x807
     e68:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     e6c:	00280800 	eoreq	r0, r8, r0, lsl #16
     e70:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     e74:	16090000 	strne	r0, [r9], -r0
     e78:	3a0e0300 	bcc	381a80 <_Min_Stack_Size+0x381680>
     e7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e80:	0a000013 	beq	ed4 <_Min_Stack_Size+0xad4>
     e84:	0b0b0113 	bleq	2c12d8 <_Min_Stack_Size+0x2c0ed8>
     e88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e8c:	00001301 	andeq	r1, r0, r1, lsl #6
     e90:	03000d0b 	movweq	r0, #3339	; 0xd0b
     e94:	3b0b3a08 	blcc	2cf6bc <_Min_Stack_Size+0x2cf2bc>
     e98:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     e9c:	0c00000b 	stceq	0, cr0, [r0], {11}
     ea0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ea8:	0b381349 	bleq	e05bd4 <_Min_Stack_Size+0xe057d4>
     eac:	040d0000 	streq	r0, [sp], #-0
     eb0:	3a0b0b01 	bcc	2c3abc <_Min_Stack_Size+0x2c36bc>
     eb4:	010b3b0b 	tsteq	fp, fp, lsl #22
     eb8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     ebc:	0b0b0113 	bleq	2c1310 <_Min_Stack_Size+0x2c0f10>
     ec0:	0b3b0b3a 	bleq	ec3bb0 <_Min_Stack_Size+0xec37b0>
     ec4:	00001301 	andeq	r1, r0, r1, lsl #6
     ec8:	03000d0f 	movweq	r0, #3343	; 0xd0f
     ecc:	3b0b3a0e 	blcc	2cf70c <_Min_Stack_Size+0x2cf30c>
     ed0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ed4:	1000000b 	andne	r0, r0, fp
     ed8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     edc:	0b3a0e03 	bleq	e846f0 <_Min_Stack_Size+0xe842f0>
     ee0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ee4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ee8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     eec:	11000019 	tstne	r0, r9, lsl r0
     ef0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ef4:	0b3a0e03 	bleq	e84708 <_Min_Stack_Size+0xe84308>
     ef8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     efc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f04:	00130119 	andseq	r0, r3, r9, lsl r1
     f08:	00051200 	andeq	r1, r5, r0, lsl #4
     f0c:	0b3a0e03 	bleq	e84720 <_Min_Stack_Size+0xe84320>
     f10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f14:	00001802 	andeq	r1, r0, r2, lsl #16
     f18:	03003413 	movweq	r3, #1043	; 0x413
     f1c:	3b0b3a08 	blcc	2cf744 <_Min_Stack_Size+0x2cf344>
     f20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f24:	14000018 	strne	r0, [r0], #-24
     f28:	0b0b000f 	bleq	2c0f6c <_Min_Stack_Size+0x2c0b6c>
     f2c:	00001349 	andeq	r1, r0, r9, asr #6
     f30:	3f012e15 	svccc	0x00012e15
     f34:	3a0e0319 	bcc	381ba0 <_Min_Stack_Size+0x3817a0>
     f38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f3c:	11134919 	tstne	r3, r9, lsl r9
     f40:	40061201 	andmi	r1, r6, r1, lsl #4
     f44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f48:	00001301 	andeq	r1, r0, r1, lsl #6
     f4c:	03003416 	movweq	r3, #1046	; 0x416
     f50:	3b0b3a0e 	blcc	2cf790 <_Min_Stack_Size+0x2cf390>
     f54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f58:	17000018 	smladne	r0, r8, r0, r0
     f5c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f60:	0b3a0e03 	bleq	e84774 <_Min_Stack_Size+0xe84374>
     f64:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f68:	01111349 	tsteq	r1, r9, asr #6
     f6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f70:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f74:	18000013 	stmdane	r0, {r0, r1, r4}
     f78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f80:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f84:	34190000 	ldrcc	r0, [r9], #-0
     f88:	3a0e0300 	bcc	381b90 <_Min_Stack_Size+0x381790>
     f8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f90:	00180213 	andseq	r0, r8, r3, lsl r2
     f94:	012e1a00 	teqeq	lr, r0, lsl #20
     f98:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fa0:	01111927 	tsteq	r1, r7, lsr #18
     fa4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fa8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     fac:	1b000013 	blne	1000 <_Min_Stack_Size+0xc00>
     fb0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fb8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fbc:	0000193c 	andeq	r1, r0, ip, lsr r9
     fc0:	01110100 	tsteq	r1, r0, lsl #2
     fc4:	0b130e25 	bleq	4c4860 <_Min_Stack_Size+0x4c4460>
     fc8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     fcc:	01111755 	tsteq	r1, r5, asr r7
     fd0:	00001710 	andeq	r1, r0, r0, lsl r7
     fd4:	0b002402 	bleq	9fe4 <_Min_Stack_Size+0x9be4>
     fd8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     fdc:	0300000e 	movweq	r0, #14
     fe0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fe4:	0b3b0b3a 	bleq	ec3cd4 <_Min_Stack_Size+0xec38d4>
     fe8:	00001349 	andeq	r1, r0, r9, asr #6
     fec:	0b002404 	bleq	a004 <_Min_Stack_Size+0x9c04>
     ff0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ff4:	05000008 	streq	r0, [r0, #-8]
     ff8:	13490035 	movtne	r0, #36917	; 0x9035
     ffc:	04060000 	streq	r0, [r6], #-0
    1000:	3a0b0b01 	bcc	2c3c0c <_Min_Stack_Size+0x2c380c>
    1004:	01053b0b 	tsteq	r5, fp, lsl #22
    1008:	07000013 	smladeq	r0, r3, r0, r0
    100c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1010:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1014:	03002808 	movweq	r2, #2056	; 0x808
    1018:	000d1c08 	andeq	r1, sp, r8, lsl #24
    101c:	00160900 	andseq	r0, r6, r0, lsl #18
    1020:	0b3a0e03 	bleq	e84834 <_Min_Stack_Size+0xe84434>
    1024:	1349053b 	movtne	r0, #38203	; 0x953b
    1028:	130a0000 	movwne	r0, #40960	; 0xa000
    102c:	3a050b01 	bcc	143c38 <_Min_Stack_Size+0x143838>
    1030:	01053b0b 	tsteq	r5, fp, lsl #22
    1034:	0b000013 	bleq	1088 <_Min_Stack_Size+0xc88>
    1038:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    103c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1040:	0b381349 	bleq	e05d6c <_Min_Stack_Size+0xe0596c>
    1044:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1048:	3a0e0300 	bcc	381c50 <_Min_Stack_Size+0x381850>
    104c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1050:	000b3813 	andeq	r3, fp, r3, lsl r8
    1054:	000d0d00 	andeq	r0, sp, r0, lsl #26
    1058:	0b3a0e03 	bleq	e8486c <_Min_Stack_Size+0xe8446c>
    105c:	1349053b 	movtne	r0, #38203	; 0x953b
    1060:	00000538 	andeq	r0, r0, r8, lsr r5
    1064:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
    1068:	00130113 	andseq	r0, r3, r3, lsl r1
    106c:	00210f00 	eoreq	r0, r1, r0, lsl #30
    1070:	0b2f1349 	bleq	bc5d9c <_Min_Stack_Size+0xbc599c>
    1074:	13100000 	tstne	r0, #0
    1078:	3a0b0b01 	bcc	2c3c84 <_Min_Stack_Size+0x2c3884>
    107c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1080:	11000013 	tstne	r0, r3, lsl r0
    1084:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1088:	0b3b0b3a 	bleq	ec3d78 <_Min_Stack_Size+0xec3978>
    108c:	0b381349 	bleq	e05db8 <_Min_Stack_Size+0xe059b8>
    1090:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1094:	03193f00 	tsteq	r9, #0, 30
    1098:	3b0b3a0e 	blcc	2cf8d8 <_Min_Stack_Size+0x2cf4d8>
    109c:	1119270b 	tstne	r9, fp, lsl #14
    10a0:	40061201 	andmi	r1, r6, r1, lsl #4
    10a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    10a8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    10ac:	03193f01 	tsteq	r9, #1, 30
    10b0:	3b0b3a0e 	blcc	2cf8f0 <_Min_Stack_Size+0x2cf4f0>
    10b4:	1119270b 	tstne	r9, fp, lsl #14
    10b8:	40061201 	andmi	r1, r6, r1, lsl #4
    10bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    10c0:	00001301 	andeq	r1, r0, r1, lsl #6
    10c4:	03000514 	movweq	r0, #1300	; 0x514
    10c8:	3b0b3a0e 	blcc	2cf908 <_Min_Stack_Size+0x2cf508>
    10cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10d0:	15000018 	strne	r0, [r0, #-24]
    10d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10d8:	0b3b0b3a 	bleq	ec3dc8 <_Min_Stack_Size+0xec39c8>
    10dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10e0:	0f160000 	svceq	0x00160000
    10e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    10e8:	17000013 	smladne	r0, r3, r0, r0
    10ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    10f0:	0b3a0e03 	bleq	e84904 <_Min_Stack_Size+0xe84504>
    10f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1100:	18000019 	stmdane	r0, {r0, r3, r4}
    1104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1108:	0b3a0e03 	bleq	e8491c <_Min_Stack_Size+0xe8451c>
    110c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1110:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1114:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1118:	00130119 	andseq	r0, r3, r9, lsl r1
    111c:	00051900 	andeq	r1, r5, r0, lsl #18
    1120:	0b3a0e03 	bleq	e84934 <_Min_Stack_Size+0xe84534>
    1124:	1349053b 	movtne	r0, #38203	; 0x953b
    1128:	00001802 	andeq	r1, r0, r2, lsl #16
    112c:	0300341a 	movweq	r3, #1050	; 0x41a
    1130:	3b0b3a0e 	blcc	2cf970 <_Min_Stack_Size+0x2cf570>
    1134:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1138:	1b000018 	blne	11a0 <_Min_Stack_Size+0xda0>
    113c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1140:	0b3a0e03 	bleq	e84954 <_Min_Stack_Size+0xe84554>
    1144:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1148:	01111349 	tsteq	r1, r9, asr #6
    114c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1150:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1154:	1c000013 	stcne	0, cr0, [r0], {19}
    1158:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    115c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1160:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1164:	0000193c 	andeq	r1, r0, ip, lsr r9
    1168:	01110100 	tsteq	r1, r0, lsl #2
    116c:	0b130e25 	bleq	4c4a08 <_Min_Stack_Size+0x4c4608>
    1170:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1174:	01111755 	tsteq	r1, r5, asr r7
    1178:	00001710 	andeq	r1, r0, r0, lsl r7
    117c:	0b002402 	bleq	a18c <_Min_Stack_Size+0x9d8c>
    1180:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1184:	0300000e 	movweq	r0, #14
    1188:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    118c:	0b3b0b3a 	bleq	ec3e7c <_Min_Stack_Size+0xec3a7c>
    1190:	00001349 	andeq	r1, r0, r9, asr #6
    1194:	0b002404 	bleq	a1ac <_Min_Stack_Size+0x9dac>
    1198:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    119c:	05000008 	streq	r0, [r0, #-8]
    11a0:	13490035 	movtne	r0, #36917	; 0x9035
    11a4:	01060000 	mrseq	r0, (UNDEF: 6)
    11a8:	01134901 	tsteq	r3, r1, lsl #18
    11ac:	07000013 	smladeq	r0, r3, r0, r0
    11b0:	13490021 	movtne	r0, #36897	; 0x9021
    11b4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    11b8:	0b010408 	bleq	421e0 <_Min_Stack_Size+0x41de0>
    11bc:	3b0b3a0b 	blcc	2cf9f0 <_Min_Stack_Size+0x2cf5f0>
    11c0:	00130105 	andseq	r0, r3, r5, lsl #2
    11c4:	00280900 	eoreq	r0, r8, r0, lsl #18
    11c8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    11cc:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    11d0:	1c080300 	stcne	3, cr0, [r8], {-0}
    11d4:	0b00000d 	bleq	1210 <_Min_Stack_Size+0xe10>
    11d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    11dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11e0:	00001349 	andeq	r1, r0, r9, asr #6
    11e4:	0b01130c 	bleq	45e1c <_Min_Stack_Size+0x45a1c>
    11e8:	3b0b3a0b 	blcc	2cfa1c <_Min_Stack_Size+0x2cf61c>
    11ec:	00130105 	andseq	r0, r3, r5, lsl #2
    11f0:	000d0d00 	andeq	r0, sp, r0, lsl #26
    11f4:	0b3a0e03 	bleq	e84a08 <_Min_Stack_Size+0xe84608>
    11f8:	1349053b 	movtne	r0, #38203	; 0x953b
    11fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1200:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1204:	3b0b3a08 	blcc	2cfa2c <_Min_Stack_Size+0x2cf62c>
    1208:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    120c:	0f00000b 	svceq	0x0000000b
    1210:	0b0b0113 	bleq	2c1664 <_Min_Stack_Size+0x2c1264>
    1214:	0b3b0b3a 	bleq	ec3f04 <_Min_Stack_Size+0xec3b04>
    1218:	00001301 	andeq	r1, r0, r1, lsl #6
    121c:	03000d10 	movweq	r0, #3344	; 0xd10
    1220:	3b0b3a0e 	blcc	2cfa60 <_Min_Stack_Size+0x2cf660>
    1224:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1228:	1100000b 	tstne	r0, fp
    122c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1230:	0b3a0e03 	bleq	e84a44 <_Min_Stack_Size+0xe84644>
    1234:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1238:	06120111 			; <UNDEFINED> instruction: 0x06120111
    123c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1240:	12000019 	andne	r0, r0, #25
    1244:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1248:	0b3a0e03 	bleq	e84a5c <_Min_Stack_Size+0xe8465c>
    124c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1250:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1254:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1258:	00130119 	andseq	r0, r3, r9, lsl r1
    125c:	00051300 	andeq	r1, r5, r0, lsl #6
    1260:	0b3a0e03 	bleq	e84a74 <_Min_Stack_Size+0xe84674>
    1264:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1268:	00001802 	andeq	r1, r0, r2, lsl #16
    126c:	03003414 	movweq	r3, #1044	; 0x414
    1270:	3b0b3a0e 	blcc	2cfab0 <_Min_Stack_Size+0x2cf6b0>
    1274:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1278:	15000018 	strne	r0, [r0, #-24]
    127c:	0b0b000f 	bleq	2c12c0 <_Min_Stack_Size+0x2c0ec0>
    1280:	00001349 	andeq	r1, r0, r9, asr #6
    1284:	3f012e16 	svccc	0x00012e16
    1288:	3a0e0319 	bcc	381ef4 <_Min_Stack_Size+0x381af4>
    128c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1290:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1294:	97184006 	ldrls	r4, [r8, -r6]
    1298:	13011942 	movwne	r1, #6466	; 0x1942
    129c:	05170000 	ldreq	r0, [r7, #-0]
    12a0:	3a0e0300 	bcc	381ea8 <_Min_Stack_Size+0x381aa8>
    12a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12a8:	00180213 	andseq	r0, r8, r3, lsl r2
    12ac:	012e1800 	teqeq	lr, r0, lsl #16
    12b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12b8:	13491927 	movtne	r1, #39207	; 0x9927
    12bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12c4:	00130119 	andseq	r0, r3, r9, lsl r1
    12c8:	00341900 	eorseq	r1, r4, r0, lsl #18
    12cc:	0b3a0e03 	bleq	e84ae0 <_Min_Stack_Size+0xe846e0>
    12d0:	1349053b 	movtne	r0, #38203	; 0x953b
    12d4:	00001802 	andeq	r1, r0, r2, lsl #16
    12d8:	0300341a 	movweq	r3, #1050	; 0x41a
    12dc:	3b0b3a08 	blcc	2cfb04 <_Min_Stack_Size+0x2cf704>
    12e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    12e4:	1b000018 	blne	134c <_Min_Stack_Size+0xf4c>
    12e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12f4:	0000193c 	andeq	r1, r0, ip, lsr r9
    12f8:	01110100 	tsteq	r1, r0, lsl #2
    12fc:	0b130e25 	bleq	4c4b98 <_Min_Stack_Size+0x4c4798>
    1300:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1304:	01111755 	tsteq	r1, r5, asr r7
    1308:	00001710 	andeq	r1, r0, r0, lsl r7
    130c:	0b002402 	bleq	a31c <_Min_Stack_Size+0x9f1c>
    1310:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1314:	0300000e 	movweq	r0, #14
    1318:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    131c:	0b3b0b3a 	bleq	ec400c <_Min_Stack_Size+0xec3c0c>
    1320:	00001349 	andeq	r1, r0, r9, asr #6
    1324:	0b002404 	bleq	a33c <_Min_Stack_Size+0x9f3c>
    1328:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    132c:	05000008 	streq	r0, [r0, #-8]
    1330:	13490101 	movtne	r0, #37121	; 0x9101
    1334:	00001301 	andeq	r1, r0, r1, lsl #6
    1338:	49002106 	stmdbmi	r0, {r1, r2, r8, sp}
    133c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1340:	00350700 	eorseq	r0, r5, r0, lsl #14
    1344:	00001349 	andeq	r1, r0, r9, asr #6
    1348:	0b010408 	bleq	42370 <_Min_Stack_Size+0x41f70>
    134c:	3b0b3a0b 	blcc	2cfb80 <_Min_Stack_Size+0x2cf780>
    1350:	00130105 	andseq	r0, r3, r5, lsl #2
    1354:	00280900 	eoreq	r0, r8, r0, lsl #18
    1358:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    135c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1360:	1c080300 	stcne	3, cr0, [r8], {-0}
    1364:	0b00000d 	bleq	13a0 <_Min_Stack_Size+0xfa0>
    1368:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    136c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1370:	00001349 	andeq	r1, r0, r9, asr #6
    1374:	0b01130c 	bleq	45fac <_Min_Stack_Size+0x45bac>
    1378:	3b0b3a0b 	blcc	2cfbac <_Min_Stack_Size+0x2cf7ac>
    137c:	00130105 	andseq	r0, r3, r5, lsl #2
    1380:	000d0d00 	andeq	r0, sp, r0, lsl #26
    1384:	0b3a0e03 	bleq	e84b98 <_Min_Stack_Size+0xe84798>
    1388:	1349053b 	movtne	r0, #38203	; 0x953b
    138c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1390:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1394:	3b0b3a08 	blcc	2cfbbc <_Min_Stack_Size+0x2cf7bc>
    1398:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    139c:	0f00000b 	svceq	0x0000000b
    13a0:	0b0b0113 	bleq	2c17f4 <_Min_Stack_Size+0x2c13f4>
    13a4:	0b3b0b3a 	bleq	ec4094 <_Min_Stack_Size+0xec3c94>
    13a8:	00001301 	andeq	r1, r0, r1, lsl #6
    13ac:	03000d10 	movweq	r0, #3344	; 0xd10
    13b0:	3b0b3a0e 	blcc	2cfbf0 <_Min_Stack_Size+0x2cf7f0>
    13b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13b8:	1100000b 	tstne	r0, fp
    13bc:	0b0b000f 	bleq	2c1400 <_Min_Stack_Size+0x2c1000>
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
    13c4:	3f012e12 	svccc	0x00012e12
    13c8:	3a0e0319 	bcc	382034 <_Min_Stack_Size+0x381c34>
    13cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    13d4:	97184006 	ldrls	r4, [r8, -r6]
    13d8:	13011942 	movwne	r1, #6466	; 0x1942
    13dc:	05130000 	ldreq	r0, [r3, #-0]
    13e0:	3a0e0300 	bcc	381fe8 <_Min_Stack_Size+0x381be8>
    13e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13e8:	00180213 	andseq	r0, r8, r3, lsl r2
    13ec:	00341400 	eorseq	r1, r4, r0, lsl #8
    13f0:	0b3a0e03 	bleq	e84c04 <_Min_Stack_Size+0xe84804>
    13f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13f8:	00001802 	andeq	r1, r0, r2, lsl #16
    13fc:	3f012e15 	svccc	0x00012e15
    1400:	3a0e0319 	bcc	38206c <_Min_Stack_Size+0x381c6c>
    1404:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1408:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    140c:	97184006 	ldrls	r4, [r8, -r6]
    1410:	13011942 	movwne	r1, #6466	; 0x1942
    1414:	05160000 	ldreq	r0, [r6, #-0]
    1418:	3a0e0300 	bcc	382020 <_Min_Stack_Size+0x381c20>
    141c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1420:	00180213 	andseq	r0, r8, r3, lsl r2
    1424:	00341700 	eorseq	r1, r4, r0, lsl #14
    1428:	0b3a0e03 	bleq	e84c3c <_Min_Stack_Size+0xe8483c>
    142c:	1349053b 	movtne	r0, #38203	; 0x953b
    1430:	00001802 	andeq	r1, r0, r2, lsl #16
    1434:	3f012e18 	svccc	0x00012e18
    1438:	3a0e0319 	bcc	3820a4 <_Min_Stack_Size+0x381ca4>
    143c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1440:	11134919 	tstne	r3, r9, lsl r9
    1444:	40061201 	andmi	r1, r6, r1, lsl #4
    1448:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    144c:	00001301 	andeq	r1, r0, r1, lsl #6
    1450:	3f002e19 	svccc	0x00002e19
    1454:	3a0e0319 	bcc	3820c0 <_Min_Stack_Size+0x381cc0>
    1458:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    145c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1460:	97184006 	ldrls	r4, [r8, -r6]
    1464:	00001942 	andeq	r1, r0, r2, asr #18
    1468:	0300341a 	movweq	r3, #1050	; 0x41a
    146c:	3b0b3a0e 	blcc	2cfcac <_Min_Stack_Size+0x2cf8ac>
    1470:	3f134905 	svccc	0x00134905
    1474:	00193c19 	andseq	r3, r9, r9, lsl ip
    1478:	11010000 	mrsne	r0, (UNDEF: 1)
    147c:	130e2501 	movwne	r2, #58625	; 0xe501
    1480:	1b0e030b 	blne	3820b4 <_Min_Stack_Size+0x381cb4>
    1484:	1117550e 	tstne	r7, lr, lsl #10
    1488:	00171001 	andseq	r1, r7, r1
    148c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1490:	0b3e0b0b 	bleq	f840c4 <_Min_Stack_Size+0xf83cc4>
    1494:	00000e03 	andeq	r0, r0, r3, lsl #28
    1498:	03001603 	movweq	r1, #1539	; 0x603
    149c:	3b0b3a0e 	blcc	2cfcdc <_Min_Stack_Size+0x2cf8dc>
    14a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    14a4:	00240400 	eoreq	r0, r4, r0, lsl #8
    14a8:	0b3e0b0b 	bleq	f840dc <_Min_Stack_Size+0xf83cdc>
    14ac:	00000803 	andeq	r0, r0, r3, lsl #16
    14b0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    14b4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    14b8:	0b0b0104 	bleq	2c18d0 <_Min_Stack_Size+0x2c14d0>
    14bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14c0:	00001301 	andeq	r1, r0, r1, lsl #6
    14c4:	03002807 	movweq	r2, #2055	; 0x807
    14c8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    14cc:	00280800 	eoreq	r0, r8, r0, lsl #16
    14d0:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    14d4:	16090000 	strne	r0, [r9], -r0
    14d8:	3a0e0300 	bcc	3820e0 <_Min_Stack_Size+0x381ce0>
    14dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14e0:	0a000013 	beq	1534 <_Min_Stack_Size+0x1134>
    14e4:	0b0b0113 	bleq	2c1938 <_Min_Stack_Size+0x2c1538>
    14e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14ec:	00001301 	andeq	r1, r0, r1, lsl #6
    14f0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    14f4:	3b0b3a08 	blcc	2cfd1c <_Min_Stack_Size+0x2cf91c>
    14f8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    14fc:	0c00000b 	stceq	0, cr0, [r0], {11}
    1500:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1504:	0b3a0e03 	bleq	e84d18 <_Min_Stack_Size+0xe84918>
    1508:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    150c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1510:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1514:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    1518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    151c:	0b3a0e03 	bleq	e84d30 <_Min_Stack_Size+0xe84930>
    1520:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1524:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1528:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    152c:	00130119 	andseq	r0, r3, r9, lsl r1
    1530:	00050e00 	andeq	r0, r5, r0, lsl #28
    1534:	0b3a0e03 	bleq	e84d48 <_Min_Stack_Size+0xe84948>
    1538:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    153c:	00001802 	andeq	r1, r0, r2, lsl #16
    1540:	3f002e0f 	svccc	0x00002e0f
    1544:	3a0e0319 	bcc	3821b0 <_Min_Stack_Size+0x381db0>
    1548:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    154c:	11134919 	tstne	r3, r9, lsl r9
    1550:	40061201 	andmi	r1, r6, r1, lsl #4
    1554:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1558:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    155c:	03193f01 	tsteq	r9, #1, 30
    1560:	3b0b3a0e 	blcc	2cfda0 <_Min_Stack_Size+0x2cf9a0>
    1564:	11192705 	tstne	r9, r5, lsl #14
    1568:	40061201 	andmi	r1, r6, r1, lsl #4
    156c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1570:	00001301 	andeq	r1, r0, r1, lsl #6
    1574:	03000511 	movweq	r0, #1297	; 0x511
    1578:	3b0b3a0e 	blcc	2cfdb8 <_Min_Stack_Size+0x2cf9b8>
    157c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1580:	12000018 	andne	r0, r0, #24
    1584:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1588:	0b3a0e03 	bleq	e84d9c <_Min_Stack_Size+0xe8499c>
    158c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1590:	01111349 	tsteq	r1, r9, asr #6
    1594:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1598:	01194297 			; <UNDEFINED> instruction: 0x01194297
    159c:	13000013 	movwne	r0, #19
    15a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15ac:	34140000 	ldrcc	r0, [r4], #-0
    15b0:	3a0e0300 	bcc	3821b8 <_Min_Stack_Size+0x381db8>
    15b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    15bc:	00000019 	andeq	r0, r0, r9, lsl r0
    15c0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    15c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    15c8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    15cc:	10011117 	andne	r1, r1, r7, lsl r1
    15d0:	02000017 	andeq	r0, r0, #23
    15d4:	0e030104 	adfeqs	f0, f3, f4
    15d8:	0b3a0b0b 	bleq	e8420c <_Min_Stack_Size+0xe83e0c>
    15dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    15e0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    15e4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    15e8:	0400000d 	streq	r0, [r0], #-13
    15ec:	0b0b0024 	bleq	2c1684 <_Min_Stack_Size+0x2c1284>
    15f0:	0e030b3e 	vmoveq.16	d3[0], r0
    15f4:	16050000 	strne	r0, [r5], -r0
    15f8:	3a0e0300 	bcc	382200 <_Min_Stack_Size+0x381e00>
    15fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1600:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1604:	0b0b0024 	bleq	2c169c <_Min_Stack_Size+0x2c129c>
    1608:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    160c:	35070000 	strcc	r0, [r7, #-0]
    1610:	00134900 	andseq	r4, r3, r0, lsl #18
    1614:	01010800 	tsteq	r1, r0, lsl #16
    1618:	13011349 	movwne	r1, #4937	; 0x1349
    161c:	21090000 	mrscs	r0, (UNDEF: 9)
    1620:	2f134900 	svccs	0x00134900
    1624:	0a00000b 	beq	1658 <_Min_Stack_Size+0x1258>
    1628:	0b0b0104 	bleq	2c1a40 <_Min_Stack_Size+0x2c1640>
    162c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1630:	00001301 	andeq	r1, r0, r1, lsl #6
    1634:	0300160b 	movweq	r1, #1547	; 0x60b
    1638:	3b0b3a0e 	blcc	2cfe78 <_Min_Stack_Size+0x2cfa78>
    163c:	00134905 	andseq	r4, r3, r5, lsl #18
    1640:	01130c00 	tsteq	r3, r0, lsl #24
    1644:	0b3a0b0b 	bleq	e84278 <_Min_Stack_Size+0xe83e78>
    1648:	1301053b 	movwne	r0, #5435	; 0x153b
    164c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1650:	3a080300 	bcc	202258 <_Min_Stack_Size+0x201e58>
    1654:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1658:	000b3813 	andeq	r3, fp, r3, lsl r8
    165c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1660:	0b3a0e03 	bleq	e84e74 <_Min_Stack_Size+0xe84a74>
    1664:	1349053b 	movtne	r0, #38203	; 0x953b
    1668:	00000b38 	andeq	r0, r0, r8, lsr fp
    166c:	0b01130f 	bleq	462b0 <_Min_Stack_Size+0x45eb0>
    1670:	3b0b3a0b 	blcc	2cfea4 <_Min_Stack_Size+0x2cfaa4>
    1674:	0013010b 	andseq	r0, r3, fp, lsl #2
    1678:	000d1000 	andeq	r1, sp, r0
    167c:	0b3a0e03 	bleq	e84e90 <_Min_Stack_Size+0xe84a90>
    1680:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1684:	00000b38 	andeq	r0, r0, r8, lsr fp
    1688:	0b010411 	bleq	426d4 <_Min_Stack_Size+0x422d4>
    168c:	3b0b3a0b 	blcc	2cfec0 <_Min_Stack_Size+0x2cfac0>
    1690:	0013010b 	andseq	r0, r3, fp, lsl #2
    1694:	012e1200 	teqeq	lr, r0, lsl #4
    1698:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    169c:	0b3b0b3a 	bleq	ec438c <_Min_Stack_Size+0xec3f8c>
    16a0:	01111927 	tsteq	r1, r7, lsr #18
    16a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    16a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    16ac:	13000013 	movwne	r0, #19
    16b0:	08030005 	stmdaeq	r3, {r0, r2}
    16b4:	0b3b0b3a 	bleq	ec43a4 <_Min_Stack_Size+0xec3fa4>
    16b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    16bc:	34140000 	ldrcc	r0, [r4], #-0
    16c0:	3a0e0300 	bcc	3822c8 <_Min_Stack_Size+0x381ec8>
    16c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	00180213 	andseq	r0, r8, r3, lsl r2
    16cc:	012e1500 	teqeq	lr, r0, lsl #10
    16d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16d4:	0b3b0b3a 	bleq	ec43c4 <_Min_Stack_Size+0xec3fc4>
    16d8:	01111927 	tsteq	r1, r7, lsr #18
    16dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    16e0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    16e4:	16000013 			; <UNDEFINED> instruction: 0x16000013
    16e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    16ec:	0b3b0b3a 	bleq	ec43dc <_Min_Stack_Size+0xec3fdc>
    16f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    16f4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    16f8:	03193f01 	tsteq	r9, #1, 30
    16fc:	3b0b3a0e 	blcc	2cff3c <_Min_Stack_Size+0x2cfb3c>
    1700:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1704:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1708:	96184006 	ldrls	r4, [r8], -r6
    170c:	13011942 	movwne	r1, #6466	; 0x1942
    1710:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1714:	03193f01 	tsteq	r9, #1, 30
    1718:	3b0b3a0e 	blcc	2cff58 <_Min_Stack_Size+0x2cfb58>
    171c:	11192705 	tstne	r9, r5, lsl #14
    1720:	40061201 	andmi	r1, r6, r1, lsl #4
    1724:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1728:	00001301 	andeq	r1, r0, r1, lsl #6
    172c:	03003419 	movweq	r3, #1049	; 0x419
    1730:	3b0b3a0e 	blcc	2cff70 <_Min_Stack_Size+0x2cfb70>
    1734:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1738:	1a000018 	bne	17a0 <_Min_Stack_Size+0x13a0>
    173c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1744:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1748:	341b0000 	ldrcc	r0, [fp], #-0
    174c:	3a0e0300 	bcc	382354 <_Min_Stack_Size+0x381f54>
    1750:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1754:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1758:	1c000019 	stcne	0, cr0, [r0], {25}
    175c:	0b0b000f 	bleq	2c17a0 <_Min_Stack_Size+0x2c13a0>
    1760:	00001349 	andeq	r1, r0, r9, asr #6
    1764:	0300341d 	movweq	r3, #1053	; 0x41d
    1768:	3b0b3a0e 	blcc	2cffa8 <_Min_Stack_Size+0x2cfba8>
    176c:	3f13490b 	svccc	0x0013490b
    1770:	00180219 	andseq	r0, r8, r9, lsl r2
    1774:	00261e00 	eoreq	r1, r6, r0, lsl #28
    1778:	00001349 	andeq	r1, r0, r9, asr #6
    177c:	01110100 	tsteq	r1, r0, lsl #2
    1780:	0b130e25 	bleq	4c501c <_Min_Stack_Size+0x4c4c1c>
    1784:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1788:	01111755 	tsteq	r1, r5, asr r7
    178c:	00001710 	andeq	r1, r0, r0, lsl r7
    1790:	0b002402 	bleq	a7a0 <_Min_Stack_Size+0xa3a0>
    1794:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1798:	0300000e 	movweq	r0, #14
    179c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    17a0:	0b3b0b3a 	bleq	ec4490 <_Min_Stack_Size+0xec4090>
    17a4:	00001349 	andeq	r1, r0, r9, asr #6
    17a8:	0b002404 	bleq	a7c0 <_Min_Stack_Size+0xa3c0>
    17ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    17b0:	05000008 	streq	r0, [r0, #-8]
    17b4:	13490035 	movtne	r0, #36917	; 0x9035
    17b8:	01060000 	mrseq	r0, (UNDEF: 6)
    17bc:	01134901 	tsteq	r3, r1, lsl #18
    17c0:	07000013 	smladeq	r0, r3, r0, r0
    17c4:	13490021 	movtne	r0, #36897	; 0x9021
    17c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    17cc:	0b010408 	bleq	427f4 <_Min_Stack_Size+0x423f4>
    17d0:	3b0b3a0b 	blcc	2d0004 <_Min_Stack_Size+0x2cfc04>
    17d4:	00130105 	andseq	r0, r3, r5, lsl #2
    17d8:	00280900 	eoreq	r0, r8, r0, lsl #18
    17dc:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    17e0:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    17e4:	1c080300 	stcne	3, cr0, [r8], {-0}
    17e8:	0b00000d 	bleq	1824 <_Min_Stack_Size+0x1424>
    17ec:	0b0b0113 	bleq	2c1c40 <_Min_Stack_Size+0x2c1840>
    17f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    17f4:	00001301 	andeq	r1, r0, r1, lsl #6
    17f8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    17fc:	3b0b3a0e 	blcc	2d003c <_Min_Stack_Size+0x2cfc3c>
    1800:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1804:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1808:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    180c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1810:	0b381349 	bleq	e0653c <_Min_Stack_Size+0xe0613c>
    1814:	160e0000 	strne	r0, [lr], -r0
    1818:	3a0e0300 	bcc	382420 <_Min_Stack_Size+0x382020>
    181c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1820:	0f000013 	svceq	0x00000013
    1824:	0b0b0113 	bleq	2c1c78 <_Min_Stack_Size+0x2c1878>
    1828:	0b3b0b3a 	bleq	ec4518 <_Min_Stack_Size+0xec4118>
    182c:	00001301 	andeq	r1, r0, r1, lsl #6
    1830:	03000d10 	movweq	r0, #3344	; 0xd10
    1834:	3b0b3a0e 	blcc	2d0074 <_Min_Stack_Size+0x2cfc74>
    1838:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    183c:	1100000b 	tstne	r0, fp
    1840:	0b0b000f 	bleq	2c1884 <_Min_Stack_Size+0x2c1484>
    1844:	00001349 	andeq	r1, r0, r9, asr #6
    1848:	0b010412 	bleq	42898 <_Min_Stack_Size+0x42498>
    184c:	3b0b3a0b 	blcc	2d0080 <_Min_Stack_Size+0x2cfc80>
    1850:	0013010b 	andseq	r0, r3, fp, lsl #2
    1854:	012e1300 	teqeq	lr, r0, lsl #6
    1858:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    185c:	0b3b0b3a 	bleq	ec454c <_Min_Stack_Size+0xec414c>
    1860:	01111927 	tsteq	r1, r7, lsr #18
    1864:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1868:	01194296 			; <UNDEFINED> instruction: 0x01194296
    186c:	14000013 	strne	r0, [r0], #-19
    1870:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1874:	0b3b0b3a 	bleq	ec4564 <_Min_Stack_Size+0xec4164>
    1878:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    187c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    1880:	03193f01 	tsteq	r9, #1, 30
    1884:	3b0b3a0e 	blcc	2d00c4 <_Min_Stack_Size+0x2cfcc4>
    1888:	11192705 	tstne	r9, r5, lsl #14
    188c:	40061201 	andmi	r1, r6, r1, lsl #4
    1890:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1894:	00001301 	andeq	r1, r0, r1, lsl #6
    1898:	03000516 	movweq	r0, #1302	; 0x516
    189c:	3b0b3a0e 	blcc	2d00dc <_Min_Stack_Size+0x2cfcdc>
    18a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    18a4:	17000018 	smladne	r0, r8, r0, r0
    18a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    18b4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    18b8:	3a0e0301 	bcc	3824c4 <_Min_Stack_Size+0x3820c4>
    18bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    18c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18c4:	97184006 	ldrls	r4, [r8, -r6]
    18c8:	13011942 	movwne	r1, #6466	; 0x1942
    18cc:	34190000 	ldrcc	r0, [r9], #-0
    18d0:	3a0e0300 	bcc	3824d8 <_Min_Stack_Size+0x3820d8>
    18d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18d8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    18dc:	00000019 	andeq	r0, r0, r9, lsl r0
    18e0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    18e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    18e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    18ec:	10011117 	andne	r1, r1, r7, lsl r1
    18f0:	02000017 	andeq	r0, r0, #23
    18f4:	0b0b0024 	bleq	2c198c <_Min_Stack_Size+0x2c158c>
    18f8:	0e030b3e 	vmoveq.16	d3[0], r0
    18fc:	16030000 	strne	r0, [r3], -r0
    1900:	3a0e0300 	bcc	382508 <_Min_Stack_Size+0x382108>
    1904:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1908:	04000013 	streq	r0, [r0], #-19
    190c:	0b0b0024 	bleq	2c19a4 <_Min_Stack_Size+0x2c15a4>
    1910:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1914:	35050000 	strcc	r0, [r5, #-0]
    1918:	00134900 	andseq	r4, r3, r0, lsl #18
    191c:	01010600 	tsteq	r1, r0, lsl #12
    1920:	13011349 	movwne	r1, #4937	; 0x1349
    1924:	21070000 	mrscs	r0, (UNDEF: 7)
    1928:	2f134900 	svccs	0x00134900
    192c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1930:	0b0b0104 	bleq	2c1d48 <_Min_Stack_Size+0x2c1948>
    1934:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1938:	00001301 	andeq	r1, r0, r1, lsl #6
    193c:	03002809 	movweq	r2, #2057	; 0x809
    1940:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1944:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1948:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    194c:	130b0000 	movwne	r0, #45056	; 0xb000
    1950:	3a0b0b01 	bcc	2c455c <_Min_Stack_Size+0x2c415c>
    1954:	01053b0b 	tsteq	r5, fp, lsl #22
    1958:	0c000013 	stceq	0, cr0, [r0], {19}
    195c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1960:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1964:	0b381349 	bleq	e06690 <_Min_Stack_Size+0xe06290>
    1968:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    196c:	3a080300 	bcc	202574 <_Min_Stack_Size+0x202174>
    1970:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1974:	000b3813 	andeq	r3, fp, r3, lsl r8
    1978:	00160e00 	andseq	r0, r6, r0, lsl #28
    197c:	0b3a0e03 	bleq	e85190 <_Min_Stack_Size+0xe84d90>
    1980:	1349053b 	movtne	r0, #38203	; 0x953b
    1984:	040f0000 	streq	r0, [pc], #-0	; 198c <_Min_Stack_Size+0x158c>
    1988:	3a0b0b01 	bcc	2c4594 <_Min_Stack_Size+0x2c4194>
    198c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1990:	10000013 	andne	r0, r0, r3, lsl r0
    1994:	0b0b0113 	bleq	2c1de8 <_Min_Stack_Size+0x2c19e8>
    1998:	0b3b0b3a 	bleq	ec4688 <_Min_Stack_Size+0xec4288>
    199c:	00001301 	andeq	r1, r0, r1, lsl #6
    19a0:	03000d11 	movweq	r0, #3345	; 0xd11
    19a4:	3b0b3a0e 	blcc	2d01e4 <_Min_Stack_Size+0x2cfde4>
    19a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    19ac:	1200000b 	andne	r0, r0, #11
    19b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    19b4:	0b3a0e03 	bleq	e851c8 <_Min_Stack_Size+0xe84dc8>
    19b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    19bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    19c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    19c4:	00130119 	andseq	r0, r3, r9, lsl r1
    19c8:	00051300 	andeq	r1, r5, r0, lsl #6
    19cc:	0b3a0e03 	bleq	e851e0 <_Min_Stack_Size+0xe84de0>
    19d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19d4:	00001802 	andeq	r1, r0, r2, lsl #16
    19d8:	03003414 	movweq	r3, #1044	; 0x414
    19dc:	3b0b3a0e 	blcc	2d021c <_Min_Stack_Size+0x2cfe1c>
    19e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19e4:	15000018 	strne	r0, [r0, #-24]
    19e8:	0b0b000f 	bleq	2c1a2c <_Min_Stack_Size+0x2c162c>
    19ec:	00001349 	andeq	r1, r0, r9, asr #6
    19f0:	3f012e16 	svccc	0x00012e16
    19f4:	3a0e0319 	bcc	382660 <_Min_Stack_Size+0x382260>
    19f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    19fc:	11134919 	tstne	r3, r9, lsl r9
    1a00:	40061201 	andmi	r1, r6, r1, lsl #4
    1a04:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1a08:	00001301 	andeq	r1, r0, r1, lsl #6
    1a0c:	03003417 	movweq	r3, #1047	; 0x417
    1a10:	3b0b3a0e 	blcc	2d0250 <_Min_Stack_Size+0x2cfe50>
    1a14:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1a18:	18000018 	stmdane	r0, {r3, r4}
    1a1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a20:	0b3a0e03 	bleq	e85234 <_Min_Stack_Size+0xe84e34>
    1a24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1a28:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a2c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1a30:	00130119 	andseq	r0, r3, r9, lsl r1
    1a34:	00051900 	andeq	r1, r5, r0, lsl #18
    1a38:	0b3a0e03 	bleq	e8524c <_Min_Stack_Size+0xe84e4c>
    1a3c:	1349053b 	movtne	r0, #38203	; 0x953b
    1a40:	00001802 	andeq	r1, r0, r2, lsl #16
    1a44:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    1a48:	3b0b3a0e 	blcc	2d0288 <_Min_Stack_Size+0x2cfe88>
    1a4c:	11192705 	tstne	r9, r5, lsl #14
    1a50:	40061201 	andmi	r1, r6, r1, lsl #4
    1a54:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1a58:	00001301 	andeq	r1, r0, r1, lsl #6
    1a5c:	03012e1b 	movweq	r2, #7707	; 0x1e1b
    1a60:	3b0b3a0e 	blcc	2d02a0 <_Min_Stack_Size+0x2cfea0>
    1a64:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1a68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a6c:	96184006 	ldrls	r4, [r8], -r6
    1a70:	13011942 	movwne	r1, #6466	; 0x1942
    1a74:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    1a78:	03193f00 	tsteq	r9, #0, 30
    1a7c:	3b0b3a0e 	blcc	2d02bc <_Min_Stack_Size+0x2cfebc>
    1a80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1a84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a88:	97184006 	ldrls	r4, [r8, -r6]
    1a8c:	00001942 	andeq	r1, r0, r2, asr #18
    1a90:	0300341d 	movweq	r3, #1053	; 0x41d
    1a94:	3b0b3a0e 	blcc	2d02d4 <_Min_Stack_Size+0x2cfed4>
    1a98:	3f134905 	svccc	0x00134905
    1a9c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1aa0:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1aa4:	0b3a0e03 	bleq	e852b8 <_Min_Stack_Size+0xe84eb8>
    1aa8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1aac:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1ab8:	0e030b13 	vmoveq.32	d3[0], r0
    1abc:	17550e1b 	smmlane	r5, fp, lr, r0
    1ac0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1ac4:	24020000 	strcs	r0, [r2], #-0
    1ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1acc:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ad0:	00160300 	andseq	r0, r6, r0, lsl #6
    1ad4:	0b3a0e03 	bleq	e852e8 <_Min_Stack_Size+0xe84ee8>
    1ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1adc:	24040000 	strcs	r0, [r4], #-0
    1ae0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1ae4:	0008030b 	andeq	r0, r8, fp, lsl #6
    1ae8:	00350500 	eorseq	r0, r5, r0, lsl #10
    1aec:	00001349 	andeq	r1, r0, r9, asr #6
    1af0:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1af4:	00130113 	andseq	r0, r3, r3, lsl r1
    1af8:	00210700 	eoreq	r0, r1, r0, lsl #14
    1afc:	0b2f1349 	bleq	bc6828 <_Min_Stack_Size+0xbc6428>
    1b00:	26080000 	strcs	r0, [r8], -r0
    1b04:	00134900 	andseq	r4, r3, r0, lsl #18
    1b08:	01040900 	tsteq	r4, r0, lsl #18
    1b0c:	0b3a0b0b 	bleq	e84740 <_Min_Stack_Size+0xe84340>
    1b10:	1301053b 	movwne	r0, #5435	; 0x153b
    1b14:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1b18:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1b1c:	0b00000d 	bleq	1b58 <_Min_Stack_Size+0x1758>
    1b20:	08030028 	stmdaeq	r3, {r3, r5}
    1b24:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1b28:	0300160c 	movweq	r1, #1548	; 0x60c
    1b2c:	3b0b3a0e 	blcc	2d036c <_Min_Stack_Size+0x2cff6c>
    1b30:	00134905 	andseq	r4, r3, r5, lsl #18
    1b34:	01130d00 	tsteq	r3, r0, lsl #26
    1b38:	0b3a0b0b 	bleq	e8476c <_Min_Stack_Size+0xe8436c>
    1b3c:	1301053b 	movwne	r0, #5435	; 0x153b
    1b40:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1b44:	3a0e0300 	bcc	38274c <_Min_Stack_Size+0x38234c>
    1b48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b4c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1b50:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1b54:	0b3a0803 	bleq	e83b68 <_Min_Stack_Size+0xe83768>
    1b58:	1349053b 	movtne	r0, #38203	; 0x953b
    1b5c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1b60:	0b011310 	bleq	467a8 <_Min_Stack_Size+0x463a8>
    1b64:	3b0b3a0b 	blcc	2d0398 <_Min_Stack_Size+0x2cff98>
    1b68:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b6c:	000d1100 	andeq	r1, sp, r0, lsl #2
    1b70:	0b3a0e03 	bleq	e85384 <_Min_Stack_Size+0xe84f84>
    1b74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b78:	00000b38 	andeq	r0, r0, r8, lsr fp
    1b7c:	0b010412 	bleq	42bcc <_Min_Stack_Size+0x427cc>
    1b80:	3b0b3a0b 	blcc	2d03b4 <_Min_Stack_Size+0x2cffb4>
    1b84:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b88:	01131300 	tsteq	r3, r0, lsl #6
    1b8c:	0b0b0e03 	bleq	2c53a0 <_Min_Stack_Size+0x2c4fa0>
    1b90:	0b3b0b3a 	bleq	ec4880 <_Min_Stack_Size+0xec4480>
    1b94:	00001301 	andeq	r1, r0, r1, lsl #6
    1b98:	0b000f14 	bleq	57f0 <_Min_Stack_Size+0x53f0>
    1b9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ba0:	000d1500 	andeq	r1, sp, r0, lsl #10
    1ba4:	0b3a0803 	bleq	e83bb8 <_Min_Stack_Size+0xe837b8>
    1ba8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1bac:	00000b38 	andeq	r0, r0, r8, lsr fp
    1bb0:	3f012e16 	svccc	0x00012e16
    1bb4:	3a0e0319 	bcc	382820 <_Min_Stack_Size+0x382420>
    1bb8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1bbc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1bc0:	96184006 	ldrls	r4, [r8], -r6
    1bc4:	13011942 	movwne	r1, #6466	; 0x1942
    1bc8:	34170000 	ldrcc	r0, [r7], #-0
    1bcc:	3a0e0300 	bcc	3827d4 <_Min_Stack_Size+0x3823d4>
    1bd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bd4:	00180213 	andseq	r0, r8, r3, lsl r2
    1bd8:	012e1800 	teqeq	lr, r0, lsl #16
    1bdc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1be0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1be4:	01111927 	tsteq	r1, r7, lsr #18
    1be8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1bec:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1bf0:	19000013 	stmdbne	r0, {r0, r1, r4}
    1bf4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1bfc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1c00:	051a0000 	ldreq	r0, [sl, #-0]
    1c04:	3a0e0300 	bcc	38280c <_Min_Stack_Size+0x38240c>
    1c08:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c0c:	00180213 	andseq	r0, r8, r3, lsl r2
    1c10:	012e1b00 	teqeq	lr, r0, lsl #22
    1c14:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c1c:	01111927 	tsteq	r1, r7, lsr #18
    1c20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c24:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1c28:	1c000013 	stcne	0, cr0, [r0], {19}
    1c2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1c30:	0b3a0e03 	bleq	e85444 <_Min_Stack_Size+0xe85044>
    1c34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1c38:	01111349 	tsteq	r1, r9, asr #6
    1c3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c40:	00194297 	mulseq	r9, r7, r2
    1c44:	012e1d00 	teqeq	lr, r0, lsl #26
    1c48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c50:	13491927 	movtne	r1, #39207	; 0x9927
    1c54:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c58:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c5c:	00130119 	andseq	r0, r3, r9, lsl r1
    1c60:	00051e00 	andeq	r1, r5, r0, lsl #28
    1c64:	0b3a0803 	bleq	e83c78 <_Min_Stack_Size+0xe83878>
    1c68:	1349053b 	movtne	r0, #38203	; 0x953b
    1c6c:	00001802 	andeq	r1, r0, r2, lsl #16
    1c70:	3f002e1f 	svccc	0x00002e1f
    1c74:	3a0e0319 	bcc	3828e0 <_Min_Stack_Size+0x3824e0>
    1c78:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1c7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1c80:	96184006 	ldrls	r4, [r8], -r6
    1c84:	00001942 	andeq	r1, r0, r2, asr #18
    1c88:	03003420 	movweq	r3, #1056	; 0x420
    1c8c:	3b0b3a08 	blcc	2d04b4 <_Min_Stack_Size+0x2d00b4>
    1c90:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1c94:	21000018 	tstcs	r0, r8, lsl r0
    1c98:	0e03012e 	adfeqsp	f0, f3, #0.5
    1c9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1ca0:	01111927 	tsteq	r1, r7, lsr #18
    1ca4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1ca8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1cac:	22000013 	andcs	r0, r0, #19
    1cb0:	0e03012e 	adfeqsp	f0, f3, #0.5
    1cb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cb8:	01111927 	tsteq	r1, r7, lsr #18
    1cbc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1cc0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1cc4:	23000013 	movwcs	r0, #19
    1cc8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ccc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cd0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1cd4:	0000193c 	andeq	r1, r0, ip, lsr r9
    1cd8:	03003424 	movweq	r3, #1060	; 0x424
    1cdc:	3b0b3a0e 	blcc	2d051c <_Min_Stack_Size+0x2d011c>
    1ce0:	3f134905 	svccc	0x00134905
    1ce4:	00180219 	andseq	r0, r8, r9, lsl r2
    1ce8:	00212500 	eoreq	r2, r1, r0, lsl #10
    1cec:	052f1349 	streq	r1, [pc, #-841]!	; 19ab <_Min_Stack_Size+0x15ab>
    1cf0:	34260000 	strtcc	r0, [r6], #-0
    1cf4:	3a0e0300 	bcc	3828fc <_Min_Stack_Size+0x3824fc>
    1cf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cfc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1d00:	00000018 	andeq	r0, r0, r8, lsl r0
    1d04:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1d08:	030b130e 	movweq	r1, #45838	; 0xb30e
    1d0c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1d10:	10011117 	andne	r1, r1, r7, lsl r1
    1d14:	02000017 	andeq	r0, r0, #23
    1d18:	0b0b0024 	bleq	2c1db0 <_Min_Stack_Size+0x2c19b0>
    1d1c:	0e030b3e 	vmoveq.16	d3[0], r0
    1d20:	16030000 	strne	r0, [r3], -r0
    1d24:	3a0e0300 	bcc	38292c <_Min_Stack_Size+0x38252c>
    1d28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d2c:	04000013 	streq	r0, [r0], #-19
    1d30:	0b0b0024 	bleq	2c1dc8 <_Min_Stack_Size+0x2c19c8>
    1d34:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1d38:	35050000 	strcc	r0, [r5, #-0]
    1d3c:	00134900 	andseq	r4, r3, r0, lsl #18
    1d40:	01010600 	tsteq	r1, r0, lsl #12
    1d44:	13011349 	movwne	r1, #4937	; 0x1349
    1d48:	21070000 	mrscs	r0, (UNDEF: 7)
    1d4c:	2f134900 	svccs	0x00134900
    1d50:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1d54:	0b0b0104 	bleq	2c216c <_Min_Stack_Size+0x2c1d6c>
    1d58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d5c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d60:	03002809 	movweq	r2, #2057	; 0x809
    1d64:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1d68:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1d6c:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1d70:	160b0000 	strne	r0, [fp], -r0
    1d74:	3a0e0300 	bcc	38297c <_Min_Stack_Size+0x38257c>
    1d78:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d7c:	0c000013 	stceq	0, cr0, [r0], {19}
    1d80:	0b0b0113 	bleq	2c21d4 <_Min_Stack_Size+0x2c1dd4>
    1d84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d88:	00001301 	andeq	r1, r0, r1, lsl #6
    1d8c:	03000d0d 	movweq	r0, #3341	; 0xd0d
    1d90:	3b0b3a08 	blcc	2d05b8 <_Min_Stack_Size+0x2d01b8>
    1d94:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1d98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1d9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1da0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1da4:	0b381349 	bleq	e06ad0 <_Min_Stack_Size+0xe066d0>
    1da8:	130f0000 	movwne	r0, #61440	; 0xf000
    1dac:	3a0b0b01 	bcc	2c49b8 <_Min_Stack_Size+0x2c45b8>
    1db0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1db4:	10000013 	andne	r0, r0, r3, lsl r0
    1db8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1dbc:	0b3b0b3a 	bleq	ec4aac <_Min_Stack_Size+0xec46ac>
    1dc0:	0b381349 	bleq	e06aec <_Min_Stack_Size+0xe066ec>
    1dc4:	04110000 	ldreq	r0, [r1], #-0
    1dc8:	3a0b0b01 	bcc	2c49d4 <_Min_Stack_Size+0x2c45d4>
    1dcc:	010b3b0b 	tsteq	fp, fp, lsl #22
    1dd0:	12000013 	andne	r0, r0, #19
    1dd4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1dd8:	0b3b0b3a 	bleq	ec4ac8 <_Min_Stack_Size+0xec46c8>
    1ddc:	0b381349 	bleq	e06b08 <_Min_Stack_Size+0xe06708>
    1de0:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1de4:	03193f00 	tsteq	r9, #0, 30
    1de8:	3b0b3a0e 	blcc	2d0628 <_Min_Stack_Size+0x2d0228>
    1dec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1df0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1df4:	96184006 	ldrls	r4, [r8], -r6
    1df8:	00001942 	andeq	r1, r0, r2, asr #18
    1dfc:	3f012e14 	svccc	0x00012e14
    1e00:	3a0e0319 	bcc	382a6c <_Min_Stack_Size+0x38266c>
    1e04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1e08:	11134919 	tstne	r3, r9, lsl r9
    1e0c:	40061201 	andmi	r1, r6, r1, lsl #4
    1e10:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1e14:	00001301 	andeq	r1, r0, r1, lsl #6
    1e18:	03003415 	movweq	r3, #1045	; 0x415
    1e1c:	3b0b3a0e 	blcc	2d065c <_Min_Stack_Size+0x2d025c>
    1e20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e24:	16000018 			; <UNDEFINED> instruction: 0x16000018
    1e28:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1e2c:	0b3b0b3a 	bleq	ec4b1c <_Min_Stack_Size+0xec471c>
    1e30:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e34:	0f170000 	svceq	0x00170000
    1e38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1e3c:	18000013 	stmdane	r0, {r0, r1, r4}
    1e40:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e44:	0b3b0b3a 	bleq	ec4b34 <_Min_Stack_Size+0xec4734>
    1e48:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e4c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1e50:	03193f00 	tsteq	r9, #0, 30
    1e54:	3b0b3a0e 	blcc	2d0694 <_Min_Stack_Size+0x2d0294>
    1e58:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1e5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e60:	96184006 	ldrls	r4, [r8], -r6
    1e64:	00001942 	andeq	r1, r0, r2, asr #18
    1e68:	3f012e1a 	svccc	0x00012e1a
    1e6c:	3a0e0319 	bcc	382ad8 <_Min_Stack_Size+0x3826d8>
    1e70:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1e74:	11134919 	tstne	r3, r9, lsl r9
    1e78:	40061201 	andmi	r1, r6, r1, lsl #4
    1e7c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1e80:	00001301 	andeq	r1, r0, r1, lsl #6
    1e84:	0300341b 	movweq	r3, #1051	; 0x41b
    1e88:	3b0b3a08 	blcc	2d06b0 <_Min_Stack_Size+0x2d02b0>
    1e8c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e90:	1c000018 	stcne	0, cr0, [r0], {24}
    1e94:	08030005 	stmdaeq	r3, {r0, r2}
    1e98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e9c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1ea0:	051d0000 	ldreq	r0, [sp, #-0]
    1ea4:	3a0e0300 	bcc	382aac <_Min_Stack_Size+0x3826ac>
    1ea8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eac:	00180213 	andseq	r0, r8, r3, lsl r2
    1eb0:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1eb4:	0b3a0e03 	bleq	e856c8 <_Min_Stack_Size+0xe852c8>
    1eb8:	1349053b 	movtne	r0, #38203	; 0x953b
    1ebc:	00001802 	andeq	r1, r0, r2, lsl #16
    1ec0:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    1ec4:	3b0b3a0e 	blcc	2d0704 <_Min_Stack_Size+0x2d0304>
    1ec8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1ecc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1ed0:	96184006 	ldrls	r4, [r8], -r6
    1ed4:	13011942 	movwne	r1, #6466	; 0x1942
    1ed8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1edc:	3a0e0301 	bcc	382ae8 <_Min_Stack_Size+0x3826e8>
    1ee0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1ee4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ee8:	96184006 	ldrls	r4, [r8], -r6
    1eec:	13011942 	movwne	r1, #6466	; 0x1942
    1ef0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1ef4:	3a0e0301 	bcc	382b00 <_Min_Stack_Size+0x382700>
    1ef8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1efc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1f00:	97184006 	ldrls	r4, [r8, -r6]
    1f04:	13011942 	movwne	r1, #6466	; 0x1942
    1f08:	34220000 	strtcc	r0, [r2], #-0
    1f0c:	3a0e0300 	bcc	382b14 <_Min_Stack_Size+0x382714>
    1f10:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f14:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1f18:	23000019 	movwcs	r0, #25
    1f1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f20:	0b3b0b3a 	bleq	ec4c10 <_Min_Stack_Size+0xec4810>
    1f24:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1f28:	00001802 	andeq	r1, r0, r2, lsl #16
    1f2c:	01110100 	tsteq	r1, r0, lsl #2
    1f30:	0b130e25 	bleq	4c57cc <_Min_Stack_Size+0x4c53cc>
    1f34:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1f38:	01111755 	tsteq	r1, r5, asr r7
    1f3c:	00001710 	andeq	r1, r0, r0, lsl r7
    1f40:	0b002402 	bleq	af50 <_Min_Stack_Size+0xab50>
    1f44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1f48:	0300000e 	movweq	r0, #14
    1f4c:	0b0b0024 	bleq	2c1fe4 <_Min_Stack_Size+0x2c1be4>
    1f50:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1f54:	16040000 	strne	r0, [r4], -r0
    1f58:	3a0e0300 	bcc	382b60 <_Min_Stack_Size+0x382760>
    1f5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f60:	05000013 	streq	r0, [r0, #-19]
    1f64:	0b0b0113 	bleq	2c23b8 <_Min_Stack_Size+0x2c1fb8>
    1f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1f6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f70:	03000d06 	movweq	r0, #3334	; 0xd06
    1f74:	3b0b3a08 	blcc	2d079c <_Min_Stack_Size+0x2d039c>
    1f78:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1f7c:	0700000b 	streq	r0, [r0, -fp]
    1f80:	0b0b0117 	bleq	2c23e4 <_Min_Stack_Size+0x2c1fe4>
    1f84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1f88:	00001301 	andeq	r1, r0, r1, lsl #6
    1f8c:	03000d08 	movweq	r0, #3336	; 0xd08
    1f90:	3b0b3a0e 	blcc	2d07d0 <_Min_Stack_Size+0x2d03d0>
    1f94:	00134905 	andseq	r4, r3, r5, lsl #18
    1f98:	00160900 	andseq	r0, r6, r0, lsl #18
    1f9c:	0b3a0e03 	bleq	e857b0 <_Min_Stack_Size+0xe853b0>
    1fa0:	1349053b 	movtne	r0, #38203	; 0x953b
    1fa4:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    1fa8:	03193f01 	tsteq	r9, #1, 30
    1fac:	3b0b3a0e 	blcc	2d07ec <_Min_Stack_Size+0x2d03ec>
    1fb0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1fb4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1fb8:	96184006 	ldrls	r4, [r8], -r6
    1fbc:	13011942 	movwne	r1, #6466	; 0x1942
    1fc0:	050b0000 	streq	r0, [fp, #-0]
    1fc4:	3a080300 	bcc	202bcc <_Min_Stack_Size+0x2027cc>
    1fc8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fcc:	00170213 	andseq	r0, r7, r3, lsl r2
    1fd0:	00340c00 	eorseq	r0, r4, r0, lsl #24
    1fd4:	0b3a0803 	bleq	e83fe8 <_Min_Stack_Size+0xe83be8>
    1fd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fdc:	00001702 	andeq	r1, r0, r2, lsl #14
    1fe0:	0300340d 	movweq	r3, #1037	; 0x40d
    1fe4:	3b0b3a08 	blcc	2d080c <_Min_Stack_Size+0x2d040c>
    1fe8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fec:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    1ff0:	0111010b 	tsteq	r1, fp, lsl #2
    1ff4:	13010612 	movwne	r0, #5650	; 0x1612
    1ff8:	340f0000 	strcc	r0, [pc], #-0	; 2000 <_Min_Stack_Size+0x1c00>
    1ffc:	3a0e0300 	bcc	382c04 <_Min_Stack_Size+0x382804>
    2000:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2004:	00170213 	andseq	r0, r7, r3, lsl r2
    2008:	010b1000 	mrseq	r1, (UNDEF: 11)
    200c:	13011755 	movwne	r1, #5973	; 0x1755
    2010:	34110000 	ldrcc	r0, [r1], #-0
    2014:	3a080300 	bcc	202c1c <_Min_Stack_Size+0x20281c>
    2018:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    201c:	12000013 	andne	r0, r0, #19
    2020:	00018289 	andeq	r8, r1, r9, lsl #5
    2024:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2028:	01130000 	tsteq	r3, r0
    202c:	01134901 	tsteq	r3, r1, lsl #18
    2030:	14000013 	strne	r0, [r0], #-19
    2034:	13490021 	movtne	r0, #36897	; 0x9021
    2038:	00000b2f 	andeq	r0, r0, pc, lsr #22
    203c:	03003415 	movweq	r3, #1045	; 0x415
    2040:	3b0b3a0e 	blcc	2d0880 <_Min_Stack_Size+0x2d0480>
    2044:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2048:	16000018 			; <UNDEFINED> instruction: 0x16000018
    204c:	13490026 	movtne	r0, #36902	; 0x9026
    2050:	34170000 	ldrcc	r0, [r7], #-0
    2054:	3a080300 	bcc	202c5c <_Min_Stack_Size+0x20285c>
    2058:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    205c:	000a1c13 	andeq	r1, sl, r3, lsl ip
    2060:	00341800 	eorseq	r1, r4, r0, lsl #16
    2064:	0b3a0e03 	bleq	e85878 <_Min_Stack_Size+0xe85478>
    2068:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    206c:	00000a1c 	andeq	r0, r0, ip, lsl sl
    2070:	3f012e19 	svccc	0x00012e19
    2074:	3a0e0319 	bcc	382ce0 <_Min_Stack_Size+0x3828e0>
    2078:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    207c:	3c134919 	ldccc	9, cr4, [r3], {25}
    2080:	1a000019 	bne	20ec <_Min_Stack_Size+0x1cec>
    2084:	13490005 	movtne	r0, #36869	; 0x9005
    2088:	01000000 	mrseq	r0, (UNDEF: 0)
    208c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2090:	0e030b13 	vmoveq.32	d3[0], r0
    2094:	17550e1b 	smmlane	r5, fp, lr, r0
    2098:	17100111 			; <UNDEFINED> instruction: 0x17100111
    209c:	24020000 	strcs	r0, [r2], #-0
    20a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    20a4:	0008030b 	andeq	r0, r8, fp, lsl #6
    20a8:	00240300 	eoreq	r0, r4, r0, lsl #6
    20ac:	0b3e0b0b 	bleq	f84ce0 <_Min_Stack_Size+0xf848e0>
    20b0:	00000e03 	andeq	r0, r0, r3, lsl #28
    20b4:	03001604 	movweq	r1, #1540	; 0x604
    20b8:	3b0b3a0e 	blcc	2d08f8 <_Min_Stack_Size+0x2d04f8>
    20bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    20c0:	01130500 	tsteq	r3, r0, lsl #10
    20c4:	0b3a0b0b 	bleq	e84cf8 <_Min_Stack_Size+0xe848f8>
    20c8:	1301053b 	movwne	r0, #5435	; 0x153b
    20cc:	0d060000 	stceq	0, cr0, [r6, #-0]
    20d0:	3a080300 	bcc	202cd8 <_Min_Stack_Size+0x2028d8>
    20d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20d8:	000b3813 	andeq	r3, fp, r3, lsl r8
    20dc:	01170700 	tsteq	r7, r0, lsl #14
    20e0:	0b3a0b0b 	bleq	e84d14 <_Min_Stack_Size+0xe84914>
    20e4:	1301053b 	movwne	r0, #5435	; 0x153b
    20e8:	0d080000 	stceq	0, cr0, [r8, #-0]
    20ec:	3a0e0300 	bcc	382cf4 <_Min_Stack_Size+0x3828f4>
    20f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    20f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    20fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2100:	00001349 	andeq	r1, r0, r9, asr #6
    2104:	3f012e0a 	svccc	0x00012e0a
    2108:	3a0e0319 	bcc	382d74 <_Min_Stack_Size+0x382974>
    210c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2110:	11134919 	tstne	r3, r9, lsl r9
    2114:	40061201 	andmi	r1, r6, r1, lsl #4
    2118:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    211c:	050b0000 	streq	r0, [fp, #-0]
    2120:	3a080300 	bcc	202d28 <_Min_Stack_Size+0x202928>
    2124:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2128:	00180213 	andseq	r0, r8, r3, lsl r2
    212c:	00340c00 	eorseq	r0, r4, r0, lsl #24
    2130:	0b3a0e03 	bleq	e85944 <_Min_Stack_Size+0xe85544>
    2134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2138:	0b0d0000 	bleq	342140 <_Min_Stack_Size+0x341d40>
    213c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2140:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    2144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2148:	0b3b0b3a 	bleq	ec4e38 <_Min_Stack_Size+0xec4a38>
    214c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2150:	01000000 	mrseq	r0, (UNDEF: 0)
    2154:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2158:	0e030b13 	vmoveq.32	d3[0], r0
    215c:	17550e1b 	smmlane	r5, fp, lr, r0
    2160:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2164:	24020000 	strcs	r0, [r2], #-0
    2168:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    216c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2170:	00240300 	eoreq	r0, r4, r0, lsl #6
    2174:	0b3e0b0b 	bleq	f84da8 <_Min_Stack_Size+0xf849a8>
    2178:	00000803 	andeq	r0, r0, r3, lsl #16
    217c:	0b000f04 	bleq	5d94 <_Min_Stack_Size+0x5994>
    2180:	0013490b 	andseq	r4, r3, fp, lsl #18
    2184:	00260500 	eoreq	r0, r6, r0, lsl #10
    2188:	00001349 	andeq	r1, r0, r9, asr #6
    218c:	03011306 	movweq	r1, #4870	; 0x1306
    2190:	3a0b0b0e 	bcc	2c4dd0 <_Min_Stack_Size+0x2c49d0>
    2194:	01053b0b 	tsteq	r5, fp, lsl #22
    2198:	07000013 	smladeq	r0, r3, r0, r0
    219c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    21a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    21a4:	0b381349 	bleq	e06ed0 <_Min_Stack_Size+0xe06ad0>
    21a8:	0d080000 	stceq	0, cr0, [r8, #-0]
    21ac:	3a080300 	bcc	202db4 <_Min_Stack_Size+0x2029b4>
    21b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21b4:	000b3813 	andeq	r3, fp, r3, lsl r8
    21b8:	01040900 	tsteq	r4, r0, lsl #18
    21bc:	0b0b0e03 	bleq	2c59d0 <_Min_Stack_Size+0x2c55d0>
    21c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    21c4:	00001301 	andeq	r1, r0, r1, lsl #6
    21c8:	0300280a 	movweq	r2, #2058	; 0x80a
    21cc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    21d0:	012e0b00 	teqeq	lr, r0, lsl #22
    21d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    21d8:	0b3b0b3a 	bleq	ec4ec8 <_Min_Stack_Size+0xec4ac8>
    21dc:	13491927 	movtne	r1, #39207	; 0x9927
    21e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    21e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    21e8:	00130119 	andseq	r0, r3, r9, lsl r1
    21ec:	00050c00 	andeq	r0, r5, r0, lsl #24
    21f0:	0b3a0803 	bleq	e84204 <_Min_Stack_Size+0xe83e04>
    21f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21f8:	00001702 	andeq	r1, r0, r2, lsl #14
    21fc:	0300340d 	movweq	r3, #1037	; 0x40d
    2200:	3b0b3a08 	blcc	2d0a28 <_Min_Stack_Size+0x2d0628>
    2204:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2208:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    220c:	01018289 	smlabbeq	r1, r9, r2, r8
    2210:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2214:	00001301 	andeq	r1, r0, r1, lsl #6
    2218:	01828a0f 	orreq	r8, r2, pc, lsl #20
    221c:	91180200 	tstls	r8, r0, lsl #4
    2220:	00001842 	andeq	r1, r0, r2, asr #16
    2224:	01828910 	orreq	r8, r2, r0, lsl r9
    2228:	31011100 	mrscc	r1, (UNDEF: 17)
    222c:	11000013 	tstne	r0, r3, lsl r0
    2230:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2238:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    223c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2240:	3f012e12 	svccc	0x00012e12
    2244:	3a0e0319 	bcc	382eb0 <_Min_Stack_Size+0x382ab0>
    2248:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    224c:	3c134919 	ldccc	9, cr4, [r3], {25}
    2250:	00130119 	andseq	r0, r3, r9, lsl r1
    2254:	00051300 	andeq	r1, r5, r0, lsl #6
    2258:	00001349 	andeq	r1, r0, r9, asr #6
    225c:	3f012e14 	svccc	0x00012e14
    2260:	3a080319 	bcc	202ecc <_Min_Stack_Size+0x202acc>
    2264:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2268:	3c134919 	ldccc	9, cr4, [r3], {25}
    226c:	00130119 	andseq	r0, r3, r9, lsl r1
    2270:	012e1500 	teqeq	lr, r0, lsl #10
    2274:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2278:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    227c:	13491927 	movtne	r1, #39207	; 0x9927
    2280:	1301193c 	movwne	r1, #6460	; 0x193c
    2284:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    2288:	03193f00 	tsteq	r9, #0, 30
    228c:	3b0b3a0e 	blcc	2d0acc <_Min_Stack_Size+0x2d06cc>
    2290:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2294:	00193c13 	andseq	r3, r9, r3, lsl ip
    2298:	11010000 	mrsne	r0, (UNDEF: 1)
    229c:	130e2501 	movwne	r2, #58625	; 0xe501
    22a0:	1b0e030b 	blne	382ed4 <_Min_Stack_Size+0x382ad4>
    22a4:	1117550e 	tstne	r7, lr, lsl #10
    22a8:	00171001 	andseq	r1, r7, r1
    22ac:	00240200 	eoreq	r0, r4, r0, lsl #4
    22b0:	0b3e0b0b 	bleq	f84ee4 <_Min_Stack_Size+0xf84ae4>
    22b4:	00000e03 	andeq	r0, r0, r3, lsl #28
    22b8:	0b002403 	bleq	b2cc <_Min_Stack_Size+0xaecc>
    22bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    22c0:	04000008 	streq	r0, [r0], #-8
    22c4:	0b0b000f 	bleq	2c2308 <_Min_Stack_Size+0x2c1f08>
    22c8:	00001349 	andeq	r1, r0, r9, asr #6
    22cc:	03011305 	movweq	r1, #4869	; 0x1305
    22d0:	3a0b0b0e 	bcc	2c4f10 <_Min_Stack_Size+0x2c4b10>
    22d4:	01053b0b 	tsteq	r5, fp, lsl #22
    22d8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    22dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    22e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    22e4:	0b381349 	bleq	e07010 <_Min_Stack_Size+0xe06c10>
    22e8:	0d070000 	stceq	0, cr0, [r7, #-0]
    22ec:	3a080300 	bcc	202ef4 <_Min_Stack_Size+0x202af4>
    22f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22f4:	000b3813 	andeq	r3, fp, r3, lsl r8
    22f8:	01040800 	tsteq	r4, r0, lsl #16
    22fc:	0b0b0e03 	bleq	2c5b10 <_Min_Stack_Size+0x2c5710>
    2300:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2304:	00001301 	andeq	r1, r0, r1, lsl #6
    2308:	03002809 	movweq	r2, #2057	; 0x809
    230c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2310:	012e0a00 	teqeq	lr, r0, lsl #20
    2314:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2318:	0b3b0b3a 	bleq	ec5008 <_Min_Stack_Size+0xec4c08>
    231c:	13491927 	movtne	r1, #39207	; 0x9927
    2320:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2324:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2328:	00130119 	andseq	r0, r3, r9, lsl r1
    232c:	00050b00 	andeq	r0, r5, r0, lsl #22
    2330:	0b3a0803 	bleq	e84344 <_Min_Stack_Size+0xe83f44>
    2334:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2338:	00001702 	andeq	r1, r0, r2, lsl #14
    233c:	0300340c 	movweq	r3, #1036	; 0x40c
    2340:	3b0b3a08 	blcc	2d0b68 <_Min_Stack_Size+0x2d0768>
    2344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2348:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    234c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2350:	0b3b0b3a 	bleq	ec5040 <_Min_Stack_Size+0xec4c40>
    2354:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2358:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    235c:	11010182 	smlabbne	r1, r2, r1, r0
    2360:	01133101 	tsteq	r3, r1, lsl #2
    2364:	0f000013 	svceq	0x00000013
    2368:	0001828a 	andeq	r8, r1, sl, lsl #5
    236c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2370:	10000018 	andne	r0, r0, r8, lsl r0
    2374:	00018289 	andeq	r8, r1, r9, lsl #5
    2378:	13310111 	teqne	r1, #1073741828	; 0x40000004
    237c:	34110000 	ldrcc	r0, [r1], #-0
    2380:	3a0e0300 	bcc	382f88 <_Min_Stack_Size+0x382b88>
    2384:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2388:	3c193f13 	ldccc	15, cr3, [r9], {19}
    238c:	12000019 	andne	r0, r0, #25
    2390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2394:	0b3a0e03 	bleq	e85ba8 <_Min_Stack_Size+0xe857a8>
    2398:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    239c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    23a0:	00001301 	andeq	r1, r0, r1, lsl #6
    23a4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    23a8:	14000013 	strne	r0, [r0], #-19
    23ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    23b0:	0b3a0e03 	bleq	e85bc4 <_Min_Stack_Size+0xe857c4>
    23b4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    23b8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    23bc:	00001301 	andeq	r1, r0, r1, lsl #6
    23c0:	3f002e15 	svccc	0x00002e15
    23c4:	3a0e0319 	bcc	383030 <_Min_Stack_Size+0x382c30>
    23c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    23cc:	3c134919 	ldccc	9, cr4, [r3], {25}
    23d0:	16000019 			; <UNDEFINED> instruction: 0x16000019
    23d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    23d8:	0b3a0e03 	bleq	e85bec <_Min_Stack_Size+0xe857ec>
    23dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    23e0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    23e4:	01000000 	mrseq	r0, (UNDEF: 0)
    23e8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    23ec:	0e030b13 	vmoveq.32	d3[0], r0
    23f0:	17550e1b 	smmlane	r5, fp, lr, r0
    23f4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    23f8:	24020000 	strcs	r0, [r2], #-0
    23fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2400:	000e030b 	andeq	r0, lr, fp, lsl #6
    2404:	00240300 	eoreq	r0, r4, r0, lsl #6
    2408:	0b3e0b0b 	bleq	f8503c <_Min_Stack_Size+0xf84c3c>
    240c:	00000803 	andeq	r0, r0, r3, lsl #16
    2410:	03001604 	movweq	r1, #1540	; 0x604
    2414:	3b0b3a0e 	blcc	2d0c54 <_Min_Stack_Size+0x2d0854>
    2418:	0013490b 	andseq	r4, r3, fp, lsl #18
    241c:	01130500 	tsteq	r3, r0, lsl #10
    2420:	0b3a0b0b 	bleq	e85054 <_Min_Stack_Size+0xe84c54>
    2424:	1301053b 	movwne	r0, #5435	; 0x153b
    2428:	0d060000 	stceq	0, cr0, [r6, #-0]
    242c:	3a080300 	bcc	203034 <_Min_Stack_Size+0x202c34>
    2430:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2434:	000b3813 	andeq	r3, fp, r3, lsl r8
    2438:	01170700 	tsteq	r7, r0, lsl #14
    243c:	0b3a0b0b 	bleq	e85070 <_Min_Stack_Size+0xe84c70>
    2440:	1301053b 	movwne	r0, #5435	; 0x153b
    2444:	0d080000 	stceq	0, cr0, [r8, #-0]
    2448:	3a0e0300 	bcc	383050 <_Min_Stack_Size+0x382c50>
    244c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2450:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2454:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2458:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    245c:	00001349 	andeq	r1, r0, r9, asr #6
    2460:	3f012e0a 	svccc	0x00012e0a
    2464:	3a0e0319 	bcc	3830d0 <_Min_Stack_Size+0x382cd0>
    2468:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    246c:	11134919 	tstne	r3, r9, lsl r9
    2470:	40061201 	andmi	r1, r6, r1, lsl #4
    2474:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2478:	00001301 	andeq	r1, r0, r1, lsl #6
    247c:	0300050b 	movweq	r0, #1291	; 0x50b
    2480:	3b0b3a08 	blcc	2d0ca8 <_Min_Stack_Size+0x2d08a8>
    2484:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2488:	0c000017 	stceq	0, cr0, [r0], {23}
    248c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2490:	0b3b0b3a 	bleq	ec5180 <_Min_Stack_Size+0xec4d80>
    2494:	17021349 	strne	r1, [r2, -r9, asr #6]
    2498:	0b0d0000 	bleq	3424a0 <_Min_Stack_Size+0x3420a0>
    249c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    24a0:	00130106 	andseq	r0, r3, r6, lsl #2
    24a4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    24a8:	0b3a0e03 	bleq	e85cbc <_Min_Stack_Size+0xe858bc>
    24ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24b0:	00001702 	andeq	r1, r0, r2, lsl #14
    24b4:	55010b0f 	strpl	r0, [r1, #-2831]	; 0xb0f
    24b8:	00130117 	andseq	r0, r3, r7, lsl r1
    24bc:	00341000 	eorseq	r1, r4, r0
    24c0:	0b3a0803 	bleq	e844d4 <_Min_Stack_Size+0xe840d4>
    24c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24c8:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    24cc:	11000182 	smlabbne	r0, r2, r1, r0
    24d0:	00133101 	andseq	r3, r3, r1, lsl #2
    24d4:	00341200 	eorseq	r1, r4, r0, lsl #4
    24d8:	0b3a0803 	bleq	e844ec <_Min_Stack_Size+0xe840ec>
    24dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24e0:	00000a1c 	andeq	r0, r0, ip, lsl sl
    24e4:	49002613 	stmdbmi	r0, {r0, r1, r4, r9, sl, sp}
    24e8:	14000013 	strne	r0, [r0], #-19
    24ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    24f0:	0b3b0b3a 	bleq	ec51e0 <_Min_Stack_Size+0xec4de0>
    24f4:	0a1c1349 	beq	707220 <_Min_Stack_Size+0x706e20>
    24f8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    24fc:	03193f01 	tsteq	r9, #1, 30
    2500:	3b0b3a0e 	blcc	2d0d40 <_Min_Stack_Size+0x2d0940>
    2504:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2508:	01193c13 	tsteq	r9, r3, lsl ip
    250c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2510:	13490005 	movtne	r0, #36869	; 0x9005
    2514:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2518:	03193f01 	tsteq	r9, #1, 30
    251c:	3b0b3a0e 	blcc	2d0d5c <_Min_Stack_Size+0x2d095c>
    2520:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2524:	00193c13 	andseq	r3, r9, r3, lsl ip
    2528:	11010000 	mrsne	r0, (UNDEF: 1)
    252c:	130e2501 	movwne	r2, #58625	; 0xe501
    2530:	1b0e030b 	blne	383164 <_Min_Stack_Size+0x382d64>
    2534:	1117550e 	tstne	r7, lr, lsl #10
    2538:	00171001 	andseq	r1, r7, r1
    253c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2540:	0b3e0b0b 	bleq	f85174 <_Min_Stack_Size+0xf84d74>
    2544:	00000e03 	andeq	r0, r0, r3, lsl #28
    2548:	0b002403 	bleq	b55c <_Min_Stack_Size+0xb15c>
    254c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2550:	04000008 	streq	r0, [r0], #-8
    2554:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2558:	0b3b0b3a 	bleq	ec5248 <_Min_Stack_Size+0xec4e48>
    255c:	00001349 	andeq	r1, r0, r9, asr #6
    2560:	0b000f05 	bleq	617c <_Min_Stack_Size+0x5d7c>
    2564:	0013490b 	andseq	r4, r3, fp, lsl #18
    2568:	00260600 	eoreq	r0, r6, r0, lsl #12
    256c:	00001349 	andeq	r1, r0, r9, asr #6
    2570:	0b011307 	bleq	47194 <_Min_Stack_Size+0x46d94>
    2574:	3b0b3a0b 	blcc	2d0da8 <_Min_Stack_Size+0x2d09a8>
    2578:	00130105 	andseq	r0, r3, r5, lsl #2
    257c:	000d0800 	andeq	r0, sp, r0, lsl #16
    2580:	0b3a0803 	bleq	e84594 <_Min_Stack_Size+0xe84194>
    2584:	1349053b 	movtne	r0, #38203	; 0x953b
    2588:	00000b38 	andeq	r0, r0, r8, lsr fp
    258c:	0b011709 	bleq	481b8 <_Min_Stack_Size+0x47db8>
    2590:	3b0b3a0b 	blcc	2d0dc4 <_Min_Stack_Size+0x2d09c4>
    2594:	00130105 	andseq	r0, r3, r5, lsl #2
    2598:	000d0a00 	andeq	r0, sp, r0, lsl #20
    259c:	0b3a0e03 	bleq	e85db0 <_Min_Stack_Size+0xe859b0>
    25a0:	1349053b 	movtne	r0, #38203	; 0x953b
    25a4:	160b0000 	strne	r0, [fp], -r0
    25a8:	3a0e0300 	bcc	3831b0 <_Min_Stack_Size+0x382db0>
    25ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    25b0:	0c000013 	stceq	0, cr0, [r0], {19}
    25b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25b8:	0b3a0e03 	bleq	e85dcc <_Min_Stack_Size+0xe859cc>
    25bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    25c0:	01111349 	tsteq	r1, r9, asr #6
    25c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    25c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    25cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    25d0:	08030005 	stmdaeq	r3, {r0, r2}
    25d4:	0b3b0b3a 	bleq	ec52c4 <_Min_Stack_Size+0xec4ec4>
    25d8:	17021349 	strne	r1, [r2, -r9, asr #6]
    25dc:	340e0000 	strcc	r0, [lr], #-0
    25e0:	3a080300 	bcc	2031e8 <_Min_Stack_Size+0x202de8>
    25e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25e8:	00170213 	andseq	r0, r7, r3, lsl r2
    25ec:	00340f00 	eorseq	r0, r4, r0, lsl #30
    25f0:	0b3a0e03 	bleq	e85e04 <_Min_Stack_Size+0xe85a04>
    25f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25f8:	00001702 	andeq	r1, r0, r2, lsl #14
    25fc:	55010b10 	strpl	r0, [r1, #-2832]	; 0xb10
    2600:	00130117 	andseq	r0, r3, r7, lsl r1
    2604:	010b1100 	mrseq	r1, (UNDEF: 27)
    2608:	06120111 			; <UNDEFINED> instruction: 0x06120111
    260c:	00001301 	andeq	r1, r0, r1, lsl #6
    2610:	03003412 	movweq	r3, #1042	; 0x412
    2614:	3b0b3a0e 	blcc	2d0e54 <_Min_Stack_Size+0x2d0a54>
    2618:	0013490b 	andseq	r4, r3, fp, lsl #18
    261c:	00341300 	eorseq	r1, r4, r0, lsl #6
    2620:	0b3a0e03 	bleq	e85e34 <_Min_Stack_Size+0xe85a34>
    2624:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2628:	00001802 	andeq	r1, r0, r2, lsl #16
    262c:	55010b14 	strpl	r0, [r1, #-2836]	; 0xb14
    2630:	15000017 	strne	r0, [r0, #-23]
    2634:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    263c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2640:	34160000 	ldrcc	r0, [r6], #-0
    2644:	3a0e0300 	bcc	38324c <_Min_Stack_Size+0x382e4c>
    2648:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    264c:	00170213 	andseq	r0, r7, r3, lsl r2
    2650:	00341700 	eorseq	r1, r4, r0, lsl #14
    2654:	0b3a0e03 	bleq	e85e68 <_Min_Stack_Size+0xe85a68>
    2658:	1349053b 	movtne	r0, #38203	; 0x953b
    265c:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    2660:	11000182 	smlabbne	r0, r2, r1, r0
    2664:	00133101 	andseq	r3, r3, r1, lsl #2
    2668:	82891900 	addhi	r1, r9, #0, 18
    266c:	01110101 	tsteq	r1, r1, lsl #2
    2670:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2674:	00130113 	andseq	r0, r3, r3, lsl r1
    2678:	828a1a00 	addhi	r1, sl, #0, 20
    267c:	18020001 	stmdane	r2, {r0}
    2680:	00184291 	mulseq	r8, r1, r2
    2684:	82891b00 	addhi	r1, r9, #0, 22
    2688:	01110001 	tsteq	r1, r1
    268c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2690:	1c000013 	stcne	0, cr0, [r0], {19}
    2694:	01018289 	smlabbeq	r1, r9, r2, r8
    2698:	13310111 	teqne	r1, #1073741828	; 0x40000004
    269c:	011d0000 	tsteq	sp, r0
    26a0:	01134901 	tsteq	r3, r1, lsl #18
    26a4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    26a8:	13490021 	movtne	r0, #36897	; 0x9021
    26ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
    26b0:	0300341f 	movweq	r3, #1055	; 0x41f
    26b4:	3b0b3a08 	blcc	2d0edc <_Min_Stack_Size+0x2d0adc>
    26b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    26bc:	20000018 	andcs	r0, r0, r8, lsl r0
    26c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26c4:	0b3b0b3a 	bleq	ec53b4 <_Min_Stack_Size+0xec4fb4>
    26c8:	0a1c1349 	beq	7073f4 <_Min_Stack_Size+0x706ff4>
    26cc:	34210000 	strtcc	r0, [r1], #-0
    26d0:	3a080300 	bcc	2032d8 <_Min_Stack_Size+0x202ed8>
    26d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26d8:	000a1c13 	andeq	r1, sl, r3, lsl ip
    26dc:	012e2200 	teqeq	lr, r0, lsl #4
    26e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    26e4:	0b3b0b3a 	bleq	ec53d4 <_Min_Stack_Size+0xec4fd4>
    26e8:	13491927 	movtne	r1, #39207	; 0x9927
    26ec:	1301193c 	movwne	r1, #6460	; 0x193c
    26f0:	05230000 	streq	r0, [r3, #-0]!
    26f4:	00134900 	andseq	r4, r3, r0, lsl #18
    26f8:	012e2400 	teqeq	lr, r0, lsl #8
    26fc:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2704:	13491927 	movtne	r1, #39207	; 0x9927
    2708:	1301193c 	movwne	r1, #6460	; 0x193c
    270c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    2710:	03193f01 	tsteq	r9, #1, 30
    2714:	3b0b3a0e 	blcc	2d0f54 <_Min_Stack_Size+0x2d0b54>
    2718:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    271c:	00193c13 	andseq	r3, r9, r3, lsl ip
    2720:	11010000 	mrsne	r0, (UNDEF: 1)
    2724:	130e2501 	movwne	r2, #58625	; 0xe501
    2728:	1b0e030b 	blne	38335c <_Min_Stack_Size+0x382f5c>
    272c:	1117550e 	tstne	r7, lr, lsl #10
    2730:	00171001 	andseq	r1, r7, r1
    2734:	00240200 	eoreq	r0, r4, r0, lsl #4
    2738:	0b3e0b0b 	bleq	f8536c <_Min_Stack_Size+0xf84f6c>
    273c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2740:	0b002403 	bleq	b754 <_Min_Stack_Size+0xb354>
    2744:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2748:	04000008 	streq	r0, [r0], #-8
    274c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2750:	0b3b0b3a 	bleq	ec5440 <_Min_Stack_Size+0xec5040>
    2754:	00001349 	andeq	r1, r0, r9, asr #6
    2758:	0b011305 	bleq	47374 <_Min_Stack_Size+0x46f74>
    275c:	3b0b3a0b 	blcc	2d0f90 <_Min_Stack_Size+0x2d0b90>
    2760:	00130105 	andseq	r0, r3, r5, lsl #2
    2764:	000d0600 	andeq	r0, sp, r0, lsl #12
    2768:	0b3a0803 	bleq	e8477c <_Min_Stack_Size+0xe8437c>
    276c:	1349053b 	movtne	r0, #38203	; 0x953b
    2770:	00000b38 	andeq	r0, r0, r8, lsr fp
    2774:	0b011707 	bleq	48398 <_Min_Stack_Size+0x47f98>
    2778:	3b0b3a0b 	blcc	2d0fac <_Min_Stack_Size+0x2d0bac>
    277c:	00130105 	andseq	r0, r3, r5, lsl #2
    2780:	000d0800 	andeq	r0, sp, r0, lsl #16
    2784:	0b3a0e03 	bleq	e85f98 <_Min_Stack_Size+0xe85b98>
    2788:	1349053b 	movtne	r0, #38203	; 0x953b
    278c:	16090000 	strne	r0, [r9], -r0
    2790:	3a0e0300 	bcc	383398 <_Min_Stack_Size+0x382f98>
    2794:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2798:	0a000013 	beq	27ec <_Min_Stack_Size+0x23ec>
    279c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    27a0:	0b3a0e03 	bleq	e85fb4 <_Min_Stack_Size+0xe85bb4>
    27a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    27a8:	01111349 	tsteq	r1, r9, asr #6
    27ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    27b4:	0b000013 	bleq	2808 <_Min_Stack_Size+0x2408>
    27b8:	08030005 	stmdaeq	r3, {r0, r2}
    27bc:	0b3b0b3a 	bleq	ec54ac <_Min_Stack_Size+0xec50ac>
    27c0:	17021349 	strne	r1, [r2, -r9, asr #6]
    27c4:	340c0000 	strcc	r0, [ip], #-0
    27c8:	3a080300 	bcc	2033d0 <_Min_Stack_Size+0x202fd0>
    27cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27d0:	00170213 	andseq	r0, r7, r3, lsl r2
    27d4:	00340d00 	eorseq	r0, r4, r0, lsl #26
    27d8:	0b3a0e03 	bleq	e85fec <_Min_Stack_Size+0xe85bec>
    27dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27e0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    27e4:	11010b0e 	tstne	r1, lr, lsl #22
    27e8:	01061201 	tsteq	r6, r1, lsl #4
    27ec:	0f000013 	svceq	0x00000013
    27f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    27f4:	0b3b0b3a 	bleq	ec54e4 <_Min_Stack_Size+0xec50e4>
    27f8:	17021349 	strne	r1, [r2, -r9, asr #6]
    27fc:	0b100000 	bleq	402804 <_Min_Stack_Size+0x402404>
    2800:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2804:	11000006 	tstne	r0, r6
    2808:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    280c:	0b3b0b3a 	bleq	ec54fc <_Min_Stack_Size+0xec50fc>
    2810:	00001349 	andeq	r1, r0, r9, asr #6
    2814:	03003412 	movweq	r3, #1042	; 0x412
    2818:	3b0b3a08 	blcc	2d1040 <_Min_Stack_Size+0x2d0c40>
    281c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    2820:	1300000a 	movwne	r0, #10
    2824:	13490026 	movtne	r0, #36902	; 0x9026
    2828:	34140000 	ldrcc	r0, [r4], #-0
    282c:	3a0e0300 	bcc	383434 <_Min_Stack_Size+0x383034>
    2830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2834:	000a1c13 	andeq	r1, sl, r3, lsl ip
    2838:	11010000 	mrsne	r0, (UNDEF: 1)
    283c:	130e2501 	movwne	r2, #58625	; 0xe501
    2840:	1b0e030b 	blne	383474 <_Min_Stack_Size+0x383074>
    2844:	1117550e 	tstne	r7, lr, lsl #10
    2848:	00171001 	andseq	r1, r7, r1
    284c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2850:	0b3e0b0b 	bleq	f85484 <_Min_Stack_Size+0xf85084>
    2854:	00000e03 	andeq	r0, r0, r3, lsl #28
    2858:	0b002403 	bleq	b86c <_Min_Stack_Size+0xb46c>
    285c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2860:	04000008 	streq	r0, [r0], #-8
    2864:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2868:	0b3b0b3a 	bleq	ec5558 <_Min_Stack_Size+0xec5158>
    286c:	00001349 	andeq	r1, r0, r9, asr #6
    2870:	3f012e05 	svccc	0x00012e05
    2874:	3a0e0319 	bcc	3834e0 <_Min_Stack_Size+0x3830e0>
    2878:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    287c:	11134919 	tstne	r3, r9, lsl r9
    2880:	40061201 	andmi	r1, r6, r1, lsl #4
    2884:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2888:	05060000 	streq	r0, [r6, #-0]
    288c:	3a080300 	bcc	203494 <_Min_Stack_Size+0x203094>
    2890:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2894:	00170213 	andseq	r0, r7, r3, lsl r2
    2898:	00340700 	eorseq	r0, r4, r0, lsl #14
    289c:	0b3a0803 	bleq	e848b0 <_Min_Stack_Size+0xe844b0>
    28a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28a4:	00001702 	andeq	r1, r0, r2, lsl #14
    28a8:	01110100 	tsteq	r1, r0, lsl #2
    28ac:	0b130e25 	bleq	4c6148 <_Min_Stack_Size+0x4c5d48>
    28b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    28b4:	01111755 	tsteq	r1, r5, asr r7
    28b8:	00001710 	andeq	r1, r0, r0, lsl r7
    28bc:	0b002402 	bleq	b8cc <_Min_Stack_Size+0xb4cc>
    28c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    28c4:	0300000e 	movweq	r0, #14
    28c8:	0b0b0024 	bleq	2c2960 <_Min_Stack_Size+0x2c2560>
    28cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    28d0:	16040000 	strne	r0, [r4], -r0
    28d4:	3a0e0300 	bcc	3834dc <_Min_Stack_Size+0x3830dc>
    28d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28dc:	05000013 	streq	r0, [r0, #-19]
    28e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    28e4:	0b3a0e03 	bleq	e860f8 <_Min_Stack_Size+0xe85cf8>
    28e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    28ec:	01111349 	tsteq	r1, r9, asr #6
    28f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    28f4:	00194297 	mulseq	r9, r7, r2
    28f8:	00050600 	andeq	r0, r5, r0, lsl #12
    28fc:	0b3a0803 	bleq	e84910 <_Min_Stack_Size+0xe84510>
    2900:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2904:	00001702 	andeq	r1, r0, r2, lsl #14
    2908:	03003407 	movweq	r3, #1031	; 0x407
    290c:	3b0b3a08 	blcc	2d1134 <_Min_Stack_Size+0x2d0d34>
    2910:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2914:	00000017 	andeq	r0, r0, r7, lsl r0
    2918:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    291c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2920:	100e1b0e 	andne	r1, lr, lr, lsl #22
    2924:	02000017 	andeq	r0, r0, #23
    2928:	0b0b0024 	bleq	2c29c0 <_Min_Stack_Size+0x2c25c0>
    292c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2930:	24030000 	strcs	r0, [r3], #-0
    2934:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2938:	000e030b 	andeq	r0, lr, fp, lsl #6
    293c:	01040400 	tsteq	r4, r0, lsl #8
    2940:	0b0b0e03 	bleq	2c6154 <_Min_Stack_Size+0x2c5d54>
    2944:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2948:	00001301 	andeq	r1, r0, r1, lsl #6
    294c:	03002805 	movweq	r2, #2053	; 0x805
    2950:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2954:	00340600 	eorseq	r0, r4, r0, lsl #12
    2958:	0b3a0e03 	bleq	e8616c <_Min_Stack_Size+0xe85d6c>
    295c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2960:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2964:	01000000 	mrseq	r0, (UNDEF: 0)
    2968:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    296c:	0e030b13 	vmoveq.32	d3[0], r0
    2970:	17550e1b 	smmlane	r5, fp, lr, r0
    2974:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2978:	24020000 	strcs	r0, [r2], #-0
    297c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2980:	0008030b 	andeq	r0, r8, fp, lsl #6
    2984:	00240300 	eoreq	r0, r4, r0, lsl #6
    2988:	0b3e0b0b 	bleq	f855bc <_Min_Stack_Size+0xf851bc>
    298c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2990:	0b000f04 	bleq	65a8 <_Min_Stack_Size+0x61a8>
    2994:	0013490b 	andseq	r4, r3, fp, lsl #18
    2998:	01130500 	tsteq	r3, r0, lsl #10
    299c:	0b0b0e03 	bleq	2c61b0 <_Min_Stack_Size+0x2c5db0>
    29a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    29a4:	00001301 	andeq	r1, r0, r1, lsl #6
    29a8:	03000d06 	movweq	r0, #3334	; 0xd06
    29ac:	3b0b3a0e 	blcc	2d11ec <_Min_Stack_Size+0x2d0dec>
    29b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    29b4:	0700000b 	streq	r0, [r0, -fp]
    29b8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    29bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    29c0:	0b381349 	bleq	e076ec <_Min_Stack_Size+0xe072ec>
    29c4:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    29c8:	03193f01 	tsteq	r9, #1, 30
    29cc:	3b0b3a0e 	blcc	2d120c <_Min_Stack_Size+0x2d0e0c>
    29d0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    29d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    29d8:	97184006 	ldrls	r4, [r8, -r6]
    29dc:	13011942 	movwne	r1, #6466	; 0x1942
    29e0:	05090000 	streq	r0, [r9, #-0]
    29e4:	3a080300 	bcc	2035ec <_Min_Stack_Size+0x2031ec>
    29e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29ec:	00170213 	andseq	r0, r7, r3, lsl r2
    29f0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    29f4:	0b3a0803 	bleq	e84a08 <_Min_Stack_Size+0xe84608>
    29f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29fc:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2a00:	01110100 	tsteq	r1, r0, lsl #2
    2a04:	0b130e25 	bleq	4c62a0 <_Min_Stack_Size+0x4c5ea0>
    2a08:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2a0c:	01111755 	tsteq	r1, r5, asr r7
    2a10:	00001710 	andeq	r1, r0, r0, lsl r7
    2a14:	0b002402 	bleq	ba24 <_Min_Stack_Size+0xb624>
    2a18:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a1c:	03000008 	movweq	r0, #8
    2a20:	0b0b0024 	bleq	2c2ab8 <_Min_Stack_Size+0x2c26b8>
    2a24:	0e030b3e 	vmoveq.16	d3[0], r0
    2a28:	0f040000 	svceq	0x00040000
    2a2c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2a30:	05000013 	streq	r0, [r0, #-19]
    2a34:	13490026 	movtne	r0, #36902	; 0x9026
    2a38:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2a3c:	03193f01 	tsteq	r9, #1, 30
    2a40:	3b0b3a08 	blcc	2d1268 <_Min_Stack_Size+0x2d0e68>
    2a44:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2a48:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2a4c:	97184006 	ldrls	r4, [r8, -r6]
    2a50:	00001942 	andeq	r1, r0, r2, asr #18
    2a54:	03000507 	movweq	r0, #1287	; 0x507
    2a58:	3b0b3a0e 	blcc	2d1298 <_Min_Stack_Size+0x2d0e98>
    2a5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2a60:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    2a64:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2a68:	0b3b0b3a 	bleq	ec5758 <_Min_Stack_Size+0xec5358>
    2a6c:	0a1c1349 	beq	707798 <_Min_Stack_Size+0x707398>
    2a70:	01000000 	mrseq	r0, (UNDEF: 0)
    2a74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2a78:	0e030b13 	vmoveq.32	d3[0], r0
    2a7c:	17550e1b 	smmlane	r5, fp, lr, r0
    2a80:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2a84:	24020000 	strcs	r0, [r2], #-0
    2a88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a8c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2a90:	00240300 	eoreq	r0, r4, r0, lsl #6
    2a94:	0b3e0b0b 	bleq	f856c8 <_Min_Stack_Size+0xf852c8>
    2a98:	00000803 	andeq	r0, r0, r3, lsl #16
    2a9c:	03001604 	movweq	r1, #1540	; 0x604
    2aa0:	3b0b3a0e 	blcc	2d12e0 <_Min_Stack_Size+0x2d0ee0>
    2aa4:	0013490b 	andseq	r4, r3, fp, lsl #18
    2aa8:	01130500 	tsteq	r3, r0, lsl #10
    2aac:	0b3a0b0b 	bleq	e856e0 <_Min_Stack_Size+0xe852e0>
    2ab0:	1301053b 	movwne	r0, #5435	; 0x153b
    2ab4:	0d060000 	stceq	0, cr0, [r6, #-0]
    2ab8:	3a080300 	bcc	2036c0 <_Min_Stack_Size+0x2032c0>
    2abc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ac0:	000b3813 	andeq	r3, fp, r3, lsl r8
    2ac4:	01170700 	tsteq	r7, r0, lsl #14
    2ac8:	0b3a0b0b 	bleq	e856fc <_Min_Stack_Size+0xe852fc>
    2acc:	1301053b 	movwne	r0, #5435	; 0x153b
    2ad0:	0d080000 	stceq	0, cr0, [r8, #-0]
    2ad4:	3a0e0300 	bcc	3836dc <_Min_Stack_Size+0x3832dc>
    2ad8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2adc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2ae0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ae4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2ae8:	00001349 	andeq	r1, r0, r9, asr #6
    2aec:	3f012e0a 	svccc	0x00012e0a
    2af0:	3a0e0319 	bcc	38375c <_Min_Stack_Size+0x38335c>
    2af4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2af8:	11134919 	tstne	r3, r9, lsl r9
    2afc:	40061201 	andmi	r1, r6, r1, lsl #4
    2b00:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2b04:	00001301 	andeq	r1, r0, r1, lsl #6
    2b08:	0300050b 	movweq	r0, #1291	; 0x50b
    2b0c:	3b0b3a08 	blcc	2d1334 <_Min_Stack_Size+0x2d0f34>
    2b10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b14:	0c000017 	stceq	0, cr0, [r0], {23}
    2b18:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2b1c:	0b3b0b3a 	bleq	ec580c <_Min_Stack_Size+0xec540c>
    2b20:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b24:	340d0000 	strcc	r0, [sp], #-0
    2b28:	3a080300 	bcc	203730 <_Min_Stack_Size+0x203330>
    2b2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b30:	00180213 	andseq	r0, r8, r3, lsl r2
    2b34:	010b0e00 	tsteq	fp, r0, lsl #28
    2b38:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b40:	0300340f 	movweq	r3, #1039	; 0x40f
    2b44:	3b0b3a0e 	blcc	2d1384 <_Min_Stack_Size+0x2d0f84>
    2b48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b4c:	10000017 	andne	r0, r0, r7, lsl r0
    2b50:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2b54:	00001301 	andeq	r1, r0, r1, lsl #6
    2b58:	11010b11 	tstne	r1, r1, lsl fp
    2b5c:	00061201 	andeq	r1, r6, r1, lsl #4
    2b60:	00341200 	eorseq	r1, r4, r0, lsl #4
    2b64:	0b3a0e03 	bleq	e86378 <_Min_Stack_Size+0xe85f78>
    2b68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b6c:	35130000 	ldrcc	r0, [r3, #-0]
    2b70:	00134900 	andseq	r4, r3, r0, lsl #18
    2b74:	01011400 	tsteq	r1, r0, lsl #8
    2b78:	13011349 	movwne	r1, #4937	; 0x1349
    2b7c:	21150000 	tstcs	r5, r0
    2b80:	2f134900 	svccs	0x00134900
    2b84:	1600000b 	strne	r0, [r0], -fp
    2b88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b8c:	0b3b0b3a 	bleq	ec587c <_Min_Stack_Size+0xec547c>
    2b90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2b94:	26170000 	ldrcs	r0, [r7], -r0
    2b98:	00134900 	andseq	r4, r3, r0, lsl #18
    2b9c:	11010000 	mrsne	r0, (UNDEF: 1)
    2ba0:	130e2501 	movwne	r2, #58625	; 0xe501
    2ba4:	1b0e030b 	blne	3837d8 <_Min_Stack_Size+0x3833d8>
    2ba8:	1117550e 	tstne	r7, lr, lsl #10
    2bac:	00171001 	andseq	r1, r7, r1
    2bb0:	00240200 	eoreq	r0, r4, r0, lsl #4
    2bb4:	0b3e0b0b 	bleq	f857e8 <_Min_Stack_Size+0xf853e8>
    2bb8:	00000e03 	andeq	r0, r0, r3, lsl #28
    2bbc:	0b002403 	bleq	bbd0 <_Min_Stack_Size+0xb7d0>
    2bc0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2bc4:	04000008 	streq	r0, [r0], #-8
    2bc8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2bcc:	0b3b0b3a 	bleq	ec58bc <_Min_Stack_Size+0xec54bc>
    2bd0:	00001349 	andeq	r1, r0, r9, asr #6
    2bd4:	0b011305 	bleq	477f0 <_Min_Stack_Size+0x473f0>
    2bd8:	3b0b3a0b 	blcc	2d140c <_Min_Stack_Size+0x2d100c>
    2bdc:	00130105 	andseq	r0, r3, r5, lsl #2
    2be0:	000d0600 	andeq	r0, sp, r0, lsl #12
    2be4:	0b3a0803 	bleq	e84bf8 <_Min_Stack_Size+0xe847f8>
    2be8:	1349053b 	movtne	r0, #38203	; 0x953b
    2bec:	00000b38 	andeq	r0, r0, r8, lsr fp
    2bf0:	0b011707 	bleq	48814 <_Min_Stack_Size+0x48414>
    2bf4:	3b0b3a0b 	blcc	2d1428 <_Min_Stack_Size+0x2d1028>
    2bf8:	00130105 	andseq	r0, r3, r5, lsl #2
    2bfc:	000d0800 	andeq	r0, sp, r0, lsl #16
    2c00:	0b3a0e03 	bleq	e86414 <_Min_Stack_Size+0xe86014>
    2c04:	1349053b 	movtne	r0, #38203	; 0x953b
    2c08:	16090000 	strne	r0, [r9], -r0
    2c0c:	3a0e0300 	bcc	383814 <_Min_Stack_Size+0x383414>
    2c10:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c14:	0a000013 	beq	2c68 <_Min_Stack_Size+0x2868>
    2c18:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2c1c:	0b3a0e03 	bleq	e86430 <_Min_Stack_Size+0xe86030>
    2c20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2c24:	01111349 	tsteq	r1, r9, asr #6
    2c28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2c2c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2c30:	0b000013 	bleq	2c84 <_Min_Stack_Size+0x2884>
    2c34:	08030005 	stmdaeq	r3, {r0, r2}
    2c38:	0b3b0b3a 	bleq	ec5928 <_Min_Stack_Size+0xec5528>
    2c3c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c40:	340c0000 	strcc	r0, [ip], #-0
    2c44:	3a080300 	bcc	20384c <_Min_Stack_Size+0x20344c>
    2c48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c4c:	00170213 	andseq	r0, r7, r3, lsl r2
    2c50:	010b0d00 	tsteq	fp, r0, lsl #26
    2c54:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c58:	00001301 	andeq	r1, r0, r1, lsl #6
    2c5c:	0300340e 	movweq	r3, #1038	; 0x40e
    2c60:	3b0b3a0e 	blcc	2d14a0 <_Min_Stack_Size+0x2d10a0>
    2c64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c68:	0f000017 	svceq	0x00000017
    2c6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2c70:	0b3b0b3a 	bleq	ec5960 <_Min_Stack_Size+0xec5560>
    2c74:	00001349 	andeq	r1, r0, r9, asr #6
    2c78:	55010b10 	strpl	r0, [r1, #-2832]	; 0xb10
    2c7c:	00130117 	andseq	r0, r3, r7, lsl r1
    2c80:	82891100 	addhi	r1, r9, #0, 2
    2c84:	01110101 	tsteq	r1, r1, lsl #2
    2c88:	13011331 	movwne	r1, #4913	; 0x1331
    2c8c:	8a120000 	bhi	482c94 <_Min_Stack_Size+0x482894>
    2c90:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2c94:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2c98:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    2c9c:	11010182 	smlabbne	r1, r2, r1, r0
    2ca0:	00133101 	andseq	r3, r3, r1, lsl #2
    2ca4:	00341400 	eorseq	r1, r4, r0, lsl #8
    2ca8:	0b3a0e03 	bleq	e864bc <_Min_Stack_Size+0xe860bc>
    2cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2cb0:	00000a1c 	andeq	r0, r0, ip, lsl sl
    2cb4:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    2cb8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2cbc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2cc0:	0b3a0e03 	bleq	e864d4 <_Min_Stack_Size+0xe860d4>
    2cc4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2cc8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2ccc:	05170000 	ldreq	r0, [r7, #-0]
    2cd0:	00134900 	andseq	r4, r3, r0, lsl #18
    2cd4:	11010000 	mrsne	r0, (UNDEF: 1)
    2cd8:	130e2501 	movwne	r2, #58625	; 0xe501
    2cdc:	1b0e030b 	blne	383910 <_Min_Stack_Size+0x383510>
    2ce0:	1117550e 	tstne	r7, lr, lsl #10
    2ce4:	00171001 	andseq	r1, r7, r1
    2ce8:	00240200 	eoreq	r0, r4, r0, lsl #4
    2cec:	0b3e0b0b 	bleq	f85920 <_Min_Stack_Size+0xf85520>
    2cf0:	00000e03 	andeq	r0, r0, r3, lsl #28
    2cf4:	0b002403 	bleq	bd08 <_Min_Stack_Size+0xb908>
    2cf8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2cfc:	04000008 	streq	r0, [r0], #-8
    2d00:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d04:	0b3b0b3a 	bleq	ec59f4 <_Min_Stack_Size+0xec55f4>
    2d08:	00001349 	andeq	r1, r0, r9, asr #6
    2d0c:	0b011305 	bleq	47928 <_Min_Stack_Size+0x47528>
    2d10:	3b0b3a0b 	blcc	2d1544 <_Min_Stack_Size+0x2d1144>
    2d14:	00130105 	andseq	r0, r3, r5, lsl #2
    2d18:	000d0600 	andeq	r0, sp, r0, lsl #12
    2d1c:	0b3a0803 	bleq	e84d30 <_Min_Stack_Size+0xe84930>
    2d20:	1349053b 	movtne	r0, #38203	; 0x953b
    2d24:	00000b38 	andeq	r0, r0, r8, lsr fp
    2d28:	0b011707 	bleq	4894c <_Min_Stack_Size+0x4854c>
    2d2c:	3b0b3a0b 	blcc	2d1560 <_Min_Stack_Size+0x2d1160>
    2d30:	00130105 	andseq	r0, r3, r5, lsl #2
    2d34:	000d0800 	andeq	r0, sp, r0, lsl #16
    2d38:	0b3a0e03 	bleq	e8654c <_Min_Stack_Size+0xe8614c>
    2d3c:	1349053b 	movtne	r0, #38203	; 0x953b
    2d40:	16090000 	strne	r0, [r9], -r0
    2d44:	3a0e0300 	bcc	38394c <_Min_Stack_Size+0x38354c>
    2d48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d4c:	0a000013 	beq	2da0 <_Min_Stack_Size+0x29a0>
    2d50:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2d54:	0b3a0e03 	bleq	e86568 <_Min_Stack_Size+0xe86168>
    2d58:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2d5c:	01111349 	tsteq	r1, r9, asr #6
    2d60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d64:	00194297 	mulseq	r9, r7, r2
    2d68:	00050b00 	andeq	r0, r5, r0, lsl #22
    2d6c:	0b3a0803 	bleq	e84d80 <_Min_Stack_Size+0xe84980>
    2d70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d74:	00001802 	andeq	r1, r0, r2, lsl #16
    2d78:	0300050c 	movweq	r0, #1292	; 0x50c
    2d7c:	3b0b3a08 	blcc	2d15a4 <_Min_Stack_Size+0x2d11a4>
    2d80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d84:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    2d88:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2d8c:	0b3b0b3a 	bleq	ec5a7c <_Min_Stack_Size+0xec567c>
    2d90:	00001349 	andeq	r1, r0, r9, asr #6
    2d94:	0300340e 	movweq	r3, #1038	; 0x40e
    2d98:	3b0b3a08 	blcc	2d15c0 <_Min_Stack_Size+0x2d11c0>
    2d9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2da0:	0f000017 	svceq	0x00000017
    2da4:	0111010b 	tsteq	r1, fp, lsl #2
    2da8:	00000612 	andeq	r0, r0, r2, lsl r6
    2dac:	03003410 	movweq	r3, #1040	; 0x410
    2db0:	3b0b3a0e 	blcc	2d15f0 <_Min_Stack_Size+0x2d11f0>
    2db4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2db8:	00000017 	andeq	r0, r0, r7, lsl r0
    2dbc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2dc0:	030b130e 	movweq	r1, #45838	; 0xb30e
    2dc4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2dc8:	10011117 	andne	r1, r1, r7, lsl r1
    2dcc:	02000017 	andeq	r0, r0, #23
    2dd0:	0b0b0024 	bleq	2c2e68 <_Min_Stack_Size+0x2c2a68>
    2dd4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2dd8:	24030000 	strcs	r0, [r3], #-0
    2ddc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2de0:	000e030b 	andeq	r0, lr, fp, lsl #6
    2de4:	00160400 	andseq	r0, r6, r0, lsl #8
    2de8:	0b3a0e03 	bleq	e865fc <_Min_Stack_Size+0xe861fc>
    2dec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2df0:	16050000 	strne	r0, [r5], -r0
    2df4:	3a0e0300 	bcc	3839fc <_Min_Stack_Size+0x3835fc>
    2df8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dfc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2e00:	0b0b0117 	bleq	2c3264 <_Min_Stack_Size+0x2c2e64>
    2e04:	0b3b0b3a 	bleq	ec5af4 <_Min_Stack_Size+0xec56f4>
    2e08:	00001301 	andeq	r1, r0, r1, lsl #6
    2e0c:	03000d07 	movweq	r0, #3335	; 0xd07
    2e10:	3b0b3a0e 	blcc	2d1650 <_Min_Stack_Size+0x2d1250>
    2e14:	0013490b 	andseq	r4, r3, fp, lsl #18
    2e18:	01010800 	tsteq	r1, r0, lsl #16
    2e1c:	13011349 	movwne	r1, #4937	; 0x1349
    2e20:	21090000 	mrscs	r0, (UNDEF: 9)
    2e24:	2f134900 	svccs	0x00134900
    2e28:	0a00000b 	beq	2e5c <_Min_Stack_Size+0x2a5c>
    2e2c:	0b0b0113 	bleq	2c3280 <_Min_Stack_Size+0x2c2e80>
    2e30:	0b3b0b3a 	bleq	ec5b20 <_Min_Stack_Size+0xec5720>
    2e34:	00001301 	andeq	r1, r0, r1, lsl #6
    2e38:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2e3c:	3b0b3a0e 	blcc	2d167c <_Min_Stack_Size+0x2d127c>
    2e40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e44:	0c00000b 	stceq	0, cr0, [r0], {11}
    2e48:	0b0b000f 	bleq	2c2e8c <_Min_Stack_Size+0x2c2a8c>
    2e4c:	130d0000 	movwne	r0, #53248	; 0xd000
    2e50:	0b0e0301 	bleq	383a5c <_Min_Stack_Size+0x38365c>
    2e54:	3b0b3a0b 	blcc	2d1688 <_Min_Stack_Size+0x2d1288>
    2e58:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e5c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2e60:	0b3a0803 	bleq	e84e74 <_Min_Stack_Size+0xe84a74>
    2e64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e68:	00000b38 	andeq	r0, r0, r8, lsr fp
    2e6c:	0b000f0f 	bleq	6ab0 <_Min_Stack_Size+0x66b0>
    2e70:	0013490b 	andseq	r4, r3, fp, lsl #18
    2e74:	01131000 	tsteq	r3, r0
    2e78:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
    2e7c:	0b3b0b3a 	bleq	ec5b6c <_Min_Stack_Size+0xec576c>
    2e80:	00001301 	andeq	r1, r0, r1, lsl #6
    2e84:	03000d11 	movweq	r0, #3345	; 0xd11
    2e88:	3b0b3a0e 	blcc	2d16c8 <_Min_Stack_Size+0x2d12c8>
    2e8c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e90:	12000005 	andne	r0, r0, #5
    2e94:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2e98:	15130000 	ldrne	r0, [r3, #-0]
    2e9c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2ea0:	00130113 	andseq	r0, r3, r3, lsl r1
    2ea4:	00051400 	andeq	r1, r5, r0, lsl #8
    2ea8:	00001349 	andeq	r1, r0, r9, asr #6
    2eac:	03011315 	movweq	r1, #4885	; 0x1315
    2eb0:	3a050b0e 	bcc	145af0 <_Min_Stack_Size+0x1456f0>
    2eb4:	01053b0b 	tsteq	r5, fp, lsl #22
    2eb8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2ebc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ec0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2ec4:	0b381349 	bleq	e07bf0 <_Min_Stack_Size+0xe077f0>
    2ec8:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2ecc:	3a0e0300 	bcc	383ad4 <_Min_Stack_Size+0x3836d4>
    2ed0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ed4:	00053813 	andeq	r3, r5, r3, lsl r8
    2ed8:	00261800 	eoreq	r1, r6, r0, lsl #16
    2edc:	00001349 	andeq	r1, r0, r9, asr #6
    2ee0:	03011319 	movweq	r1, #4889	; 0x1319
    2ee4:	3a0b0b0e 	bcc	2c5b24 <_Min_Stack_Size+0x2c5724>
    2ee8:	01053b0b 	tsteq	r5, fp, lsl #22
    2eec:	1a000013 	bne	2f40 <_Min_Stack_Size+0x2b40>
    2ef0:	0b0b0113 	bleq	2c3344 <_Min_Stack_Size+0x2c2f44>
    2ef4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2ef8:	00001301 	andeq	r1, r0, r1, lsl #6
    2efc:	0b01171b 	bleq	48b70 <_Min_Stack_Size+0x48770>
    2f00:	3b0b3a0b 	blcc	2d1734 <_Min_Stack_Size+0x2d1334>
    2f04:	00130105 	andseq	r0, r3, r5, lsl #2
    2f08:	000d1c00 	andeq	r1, sp, r0, lsl #24
    2f0c:	0b3a0e03 	bleq	e86720 <_Min_Stack_Size+0xe86320>
    2f10:	1349053b 	movtne	r0, #38203	; 0x953b
    2f14:	151d0000 	ldrne	r0, [sp, #-0]
    2f18:	01192701 	tsteq	r9, r1, lsl #14
    2f1c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2f20:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2f24:	0b3a0e03 	bleq	e86738 <_Min_Stack_Size+0xe86338>
    2f28:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f2c:	01111349 	tsteq	r1, r9, asr #6
    2f30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f34:	00194297 	mulseq	r9, r7, r2
    2f38:	00341f00 	eorseq	r1, r4, r0, lsl #30
    2f3c:	0b3a0e03 	bleq	e86750 <_Min_Stack_Size+0xe86350>
    2f40:	1349053b 	movtne	r0, #38203	; 0x953b
    2f44:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2f48:	01000000 	mrseq	r0, (UNDEF: 0)
    2f4c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2f50:	0e030b13 	vmoveq.32	d3[0], r0
    2f54:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
    2f58:	24020000 	strcs	r0, [r2], #-0
    2f5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2f60:	0008030b 	andeq	r0, r8, fp, lsl #6
    2f64:	00240300 	eoreq	r0, r4, r0, lsl #6
    2f68:	0b3e0b0b 	bleq	f85b9c <_Min_Stack_Size+0xf8579c>
    2f6c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2f70:	03001604 	movweq	r1, #1540	; 0x604
    2f74:	3b0b3a0e 	blcc	2d17b4 <_Min_Stack_Size+0x2d13b4>
    2f78:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f7c:	00160500 	andseq	r0, r6, r0, lsl #10
    2f80:	0b3a0e03 	bleq	e86794 <_Min_Stack_Size+0xe86394>
    2f84:	1349053b 	movtne	r0, #38203	; 0x953b
    2f88:	17060000 	strne	r0, [r6, -r0]
    2f8c:	3a0b0b01 	bcc	2c5b98 <_Min_Stack_Size+0x2c5798>
    2f90:	010b3b0b 	tsteq	fp, fp, lsl #22
    2f94:	07000013 	smladeq	r0, r3, r0, r0
    2f98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f9c:	0b3b0b3a 	bleq	ec5c8c <_Min_Stack_Size+0xec588c>
    2fa0:	00001349 	andeq	r1, r0, r9, asr #6
    2fa4:	49010108 	stmdbmi	r1, {r3, r8}
    2fa8:	00130113 	andseq	r0, r3, r3, lsl r1
    2fac:	00210900 	eoreq	r0, r1, r0, lsl #18
    2fb0:	0b2f1349 	bleq	bc7cdc <_Min_Stack_Size+0xbc78dc>
    2fb4:	130a0000 	movwne	r0, #40960	; 0xa000
    2fb8:	3a0b0b01 	bcc	2c5bc4 <_Min_Stack_Size+0x2c57c4>
    2fbc:	010b3b0b 	tsteq	fp, fp, lsl #22
    2fc0:	0b000013 	bleq	3014 <_Min_Stack_Size+0x2c14>
    2fc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fc8:	0b3b0b3a 	bleq	ec5cb8 <_Min_Stack_Size+0xec58b8>
    2fcc:	0b381349 	bleq	e07cf8 <_Min_Stack_Size+0xe078f8>
    2fd0:	0f0c0000 	svceq	0x000c0000
    2fd4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2fd8:	01130d00 	tsteq	r3, r0, lsl #26
    2fdc:	0b0b0e03 	bleq	2c67f0 <_Min_Stack_Size+0x2c63f0>
    2fe0:	0b3b0b3a 	bleq	ec5cd0 <_Min_Stack_Size+0xec58d0>
    2fe4:	00001301 	andeq	r1, r0, r1, lsl #6
    2fe8:	03000d0e 	movweq	r0, #3342	; 0xd0e
    2fec:	3b0b3a08 	blcc	2d1814 <_Min_Stack_Size+0x2d1414>
    2ff0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2ff4:	0f00000b 	svceq	0x0000000b
    2ff8:	0b0b000f 	bleq	2c303c <_Min_Stack_Size+0x2c2c3c>
    2ffc:	00001349 	andeq	r1, r0, r9, asr #6
    3000:	03011310 	movweq	r1, #4880	; 0x1310
    3004:	3a050b0e 	bcc	145c44 <_Min_Stack_Size+0x145844>
    3008:	010b3b0b 	tsteq	fp, fp, lsl #22
    300c:	11000013 	tstne	r0, r3, lsl r0
    3010:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3014:	0b3b0b3a 	bleq	ec5d04 <_Min_Stack_Size+0xec5904>
    3018:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
    301c:	15120000 	ldrne	r0, [r2, #-0]
    3020:	00192700 	andseq	r2, r9, r0, lsl #14
    3024:	01151300 	tsteq	r5, r0, lsl #6
    3028:	13491927 	movtne	r1, #39207	; 0x9927
    302c:	00001301 	andeq	r1, r0, r1, lsl #6
    3030:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    3034:	15000013 	strne	r0, [r0, #-19]
    3038:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    303c:	0b3a050b 	bleq	e84470 <_Min_Stack_Size+0xe84070>
    3040:	1301053b 	movwne	r0, #5435	; 0x153b
    3044:	0d160000 	ldceq	0, cr0, [r6, #-0]
    3048:	3a0e0300 	bcc	383c50 <_Min_Stack_Size+0x383850>
    304c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3050:	000b3813 	andeq	r3, fp, r3, lsl r8
    3054:	000d1700 	andeq	r1, sp, r0, lsl #14
    3058:	0b3a0e03 	bleq	e8686c <_Min_Stack_Size+0xe8646c>
    305c:	1349053b 	movtne	r0, #38203	; 0x953b
    3060:	00000538 	andeq	r0, r0, r8, lsr r5
    3064:	49002618 	stmdbmi	r0, {r3, r4, r9, sl, sp}
    3068:	19000013 	stmdbne	r0, {r0, r1, r4}
    306c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3070:	0b3a0b0b 	bleq	e85ca4 <_Min_Stack_Size+0xe858a4>
    3074:	1301053b 	movwne	r0, #5435	; 0x153b
    3078:	131a0000 	tstne	sl, #0
    307c:	3a0b0b01 	bcc	2c5c88 <_Min_Stack_Size+0x2c5888>
    3080:	01053b0b 	tsteq	r5, fp, lsl #22
    3084:	1b000013 	blne	30d8 <_Min_Stack_Size+0x2cd8>
    3088:	0b0b0117 	bleq	2c34ec <_Min_Stack_Size+0x2c30ec>
    308c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    3090:	00001301 	andeq	r1, r0, r1, lsl #6
    3094:	03000d1c 	movweq	r0, #3356	; 0xd1c
    3098:	3b0b3a0e 	blcc	2d18d8 <_Min_Stack_Size+0x2d14d8>
    309c:	00134905 	andseq	r4, r3, r5, lsl #18
    30a0:	01151d00 	tsteq	r5, r0, lsl #26
    30a4:	13011927 	movwne	r1, #6439	; 0x1927
    30a8:	341e0000 	ldrcc	r0, [lr], #-0
    30ac:	3a0e0300 	bcc	383cb4 <_Min_Stack_Size+0x3838b4>
    30b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30b4:	00180213 	andseq	r0, r8, r3, lsl r2
    30b8:	00341f00 	eorseq	r1, r4, r0, lsl #30
    30bc:	0b3a0e03 	bleq	e868d0 <_Min_Stack_Size+0xe864d0>
    30c0:	1349053b 	movtne	r0, #38203	; 0x953b
    30c4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    30c8:	Address 0x00000000000030c8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
       0:	0000001c 	andeq	r0, r0, ip, lsl r0
       4:	00000002 	andeq	r0, r0, r2
       8:	00040000 	andeq	r0, r4, r0
       c:	00000000 	andeq	r0, r0, r0
      10:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      14:	00000040 	andeq	r0, r0, r0, asr #32
	...
      20:	0000002c 	andeq	r0, r0, ip, lsr #32
      24:	01040002 	tsteq	r4, r2
      28:	00040000 	andeq	r0, r4, r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
      34:	00000048 	andeq	r0, r0, r8, asr #32
      38:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
      3c:	00000124 	andeq	r0, r0, r4, lsr #2
      40:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
      44:	000003ec 	andeq	r0, r0, ip, ror #7
	...
      50:	00000024 	andeq	r0, r0, r4, lsr #32
      54:	03a70002 			; <UNDEFINED> instruction: 0x03a70002
      58:	00040000 	andeq	r0, r4, r0
      5c:	00000000 	andeq	r0, r0, r0
      60:	080010a0 	stmdaeq	r0, {r5, r7, ip}
      64:	00000044 	andeq	r0, r0, r4, asr #32
      68:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
      6c:	00000002 	andeq	r0, r0, r2
	...
      78:	0000002c 	andeq	r0, r0, ip, lsr #32
      7c:	04120002 	ldreq	r0, [r2], #-2
      80:	00040000 	andeq	r0, r4, r0
      84:	00000000 	andeq	r0, r0, r0
      88:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
      8c:	00000068 	andeq	r0, r0, r8, rrx
      90:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
      94:	000000f8 	strdeq	r0, [r0], -r8
      98:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
      9c:	000000f4 	strdeq	r0, [r0], -r4
	...
      a8:	0000003c 	andeq	r0, r0, ip, lsr r0
      ac:	09cf0002 	stmibeq	pc, {r1}^	; <UNPREDICTABLE>
      b0:	00040000 	andeq	r0, r4, r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
      bc:	00000024 	andeq	r0, r0, r4, lsr #32
      c0:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
      c4:	000000bc 	strheq	r0, [r0], -ip
      c8:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
      cc:	0000002c 	andeq	r0, r0, ip, lsr #32
      d0:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
      d4:	00000040 	andeq	r0, r0, r0, asr #32
      d8:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
      dc:	00000038 	andeq	r0, r0, r8, lsr r0
	...
      e8:	00000084 	andeq	r0, r0, r4, lsl #1
      ec:	0f100002 	svceq	0x00100002
      f0:	00040000 	andeq	r0, r4, r0
      f4:	00000000 	andeq	r0, r0, r0
      f8:	080014c0 	stmdaeq	r0, {r6, r7, sl, ip}
      fc:	00000164 	andeq	r0, r0, r4, ror #2
     100:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     104:	0000011a 	andeq	r0, r0, sl, lsl r1
     108:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
     10c:	00000032 	andeq	r0, r0, r2, lsr r0
     110:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     114:	00000042 	andeq	r0, r0, r2, asr #32
     118:	080017b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip}
     11c:	00000034 	andeq	r0, r0, r4, lsr r0
     120:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
     124:	0000001a 	andeq	r0, r0, sl, lsl r0
     128:	08001808 	stmdaeq	r0, {r3, fp, ip}
     12c:	00000034 	andeq	r0, r0, r4, lsr r0
     130:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
     134:	0000001a 	andeq	r0, r0, sl, lsl r0
     138:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
     13c:	0000001c 	andeq	r0, r0, ip, lsl r0
     140:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
     144:	0000001c 	andeq	r0, r0, ip, lsl r0
     148:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
     14c:	0000002e 	andeq	r0, r0, lr, lsr #32
     150:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
     154:	0000001c 	andeq	r0, r0, ip, lsl r0
     158:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
     15c:	00000022 	andeq	r0, r0, r2, lsr #32
     160:	08001900 	stmdaeq	r0, {r8, fp, ip}
     164:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
     170:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     174:	15190002 	ldrne	r0, [r9, #-2]
     178:	00040000 	andeq	r0, r4, r0
     17c:	00000000 	andeq	r0, r0, r0
     180:	0800198c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip}
     184:	00000070 	andeq	r0, r0, r0, ror r0
     188:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     18c:	00000024 	andeq	r0, r0, r4, lsr #32
     190:	08001a20 	stmdaeq	r0, {r5, r9, fp, ip}
     194:	00000050 	andeq	r0, r0, r0, asr r0
     198:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     19c:	0000003c 	andeq	r0, r0, ip, lsr r0
     1a0:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
     1a4:	00000020 	andeq	r0, r0, r0, lsr #32
     1a8:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
     1ac:	00000040 	andeq	r0, r0, r0, asr #32
     1b0:	08001b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip}
     1b4:	00000020 	andeq	r0, r0, r0, lsr #32
     1b8:	08001b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip}
     1bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     1c0:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
     1c4:	00000020 	andeq	r0, r0, r0, lsr #32
     1c8:	08001b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip}
     1cc:	00000030 	andeq	r0, r0, r0, lsr r0
     1d0:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
     1d4:	00000020 	andeq	r0, r0, r0, lsr #32
     1d8:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
     1dc:	00000030 	andeq	r0, r0, r0, lsr r0
     1e0:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
     1e4:	00000020 	andeq	r0, r0, r0, lsr #32
     1e8:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
     1ec:	00000020 	andeq	r0, r0, r0, lsr #32
     1f0:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
     1f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     1f8:	08001c84 	stmdaeq	r0, {r2, r7, sl, fp, ip}
     1fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     200:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
     204:	00000038 	andeq	r0, r0, r8, lsr r0
     208:	08001cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip}
     20c:	00000020 	andeq	r0, r0, r0, lsr #32
     210:	08001d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip}
     214:	00000038 	andeq	r0, r0, r8, lsr r0
     218:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
     21c:	00000038 	andeq	r0, r0, r8, lsr r0
     220:	08001d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip}
     224:	00000038 	andeq	r0, r0, r8, lsr r0
     228:	08001dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip}
     22c:	00000154 	andeq	r0, r0, r4, asr r1
     230:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
     234:	0000005c 	andeq	r0, r0, ip, asr r0
     238:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
     23c:	00000020 	andeq	r0, r0, r0, lsr #32
     240:	08001f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip}
     244:	00000020 	andeq	r0, r0, r0, lsr #32
     248:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
     24c:	0000001c 	andeq	r0, r0, ip, lsl r0
     250:	08001fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip}
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	08002008 	stmdaeq	r0, {r3, sp}
     25c:	00000040 	andeq	r0, r0, r0, asr #32
     260:	08002048 	stmdaeq	r0, {r3, r6, sp}
     264:	0000003c 	andeq	r0, r0, ip, lsr r0
     268:	08002084 	stmdaeq	r0, {r2, r7, sp}
     26c:	0000003c 	andeq	r0, r0, ip, lsr r0
     270:	080020c0 	stmdaeq	r0, {r6, r7, sp}
     274:	0000003c 	andeq	r0, r0, ip, lsr r0
     278:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
     27c:	0000001c 	andeq	r0, r0, ip, lsl r0
     280:	08002118 	stmdaeq	r0, {r3, r4, r8, sp}
     284:	0000003c 	andeq	r0, r0, ip, lsr r0
     288:	08002154 	stmdaeq	r0, {r2, r4, r6, r8, sp}
     28c:	0000003c 	andeq	r0, r0, ip, lsr r0
     290:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     294:	0000003c 	andeq	r0, r0, ip, lsr r0
     298:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
     29c:	0000003c 	andeq	r0, r0, ip, lsr r0
     2a0:	08002208 	stmdaeq	r0, {r3, r9, sp}
     2a4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2a8:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
     2ac:	0000003c 	andeq	r0, r0, ip, lsr r0
     2b0:	08002280 	stmdaeq	r0, {r7, r9, sp}
     2b4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2b8:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
     2bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2c0:	080022f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp}
     2c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2c8:	08002334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp}
     2cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2d0:	08002370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp}
     2d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2d8:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
     2dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2e0:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
     2e4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2e8:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     2ec:	0000003c 	andeq	r0, r0, ip, lsr r0
     2f0:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
     2f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2f8:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
     2fc:	00000048 	andeq	r0, r0, r8, asr #32
     300:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
     304:	00000074 	andeq	r0, r0, r4, ror r0
     308:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	08002574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp}
     314:	00000038 	andeq	r0, r0, r8, lsr r0
     318:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
     31c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     328:	000000fc 	strdeq	r0, [r0], -ip
     32c:	232e0002 	teqcs	lr, #2
     330:	00040000 	andeq	r0, r4, r0
     334:	00000000 	andeq	r0, r0, r0
     338:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     33c:	00000114 	andeq	r0, r0, r4, lsl r1
     340:	080026e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, sp}
     344:	00000174 	andeq	r0, r0, r4, ror r1
     348:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
     34c:	00000038 	andeq	r0, r0, r8, lsr r0
     350:	0800288c 	stmdaeq	r0, {r2, r3, r7, fp, sp}
     354:	00000052 	andeq	r0, r0, r2, asr r0
     358:	080028e0 	stmdaeq	r0, {r5, r6, r7, fp, sp}
     35c:	0000002a 	andeq	r0, r0, sl, lsr #32
     360:	0800290c 	stmdaeq	r0, {r2, r3, r8, fp, sp}
     364:	0000003e 	andeq	r0, r0, lr, lsr r0
     368:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
     36c:	00000038 	andeq	r0, r0, r8, lsr r0
     370:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
     374:	00000042 	andeq	r0, r0, r2, asr #32
     378:	080029c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, sp}
     37c:	0000003e 	andeq	r0, r0, lr, lsr r0
     380:	08002a08 	stmdaeq	r0, {r3, r9, fp, sp}
     384:	00000022 	andeq	r0, r0, r2, lsr #32
     388:	08002a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, sp}
     38c:	00000020 	andeq	r0, r0, r0, lsr #32
     390:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
     394:	00000038 	andeq	r0, r0, r8, lsr r0
     398:	08002a84 	stmdaeq	r0, {r2, r7, r9, fp, sp}
     39c:	0000003e 	andeq	r0, r0, lr, lsr r0
     3a0:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
     3a4:	00000036 	andeq	r0, r0, r6, lsr r0
     3a8:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     3ac:	00000036 	andeq	r0, r0, r6, lsr r0
     3b0:	08002b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, sp}
     3b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     3b8:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
     3bc:	00000022 	andeq	r0, r0, r2, lsr #32
     3c0:	08002b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, sp}
     3c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     3c8:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
     3cc:	0000003a 	andeq	r0, r0, sl, lsr r0
     3d0:	08002c14 	stmdaeq	r0, {r2, r4, sl, fp, sp}
     3d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     3d8:	08002c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, sp}
     3dc:	0000003e 	andeq	r0, r0, lr, lsr r0
     3e0:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
     3e4:	00000036 	andeq	r0, r0, r6, lsr r0
     3e8:	08002ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, sp}
     3ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     3f0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     3f4:	00000046 	andeq	r0, r0, r6, asr #32
     3f8:	08002d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, sp}
     3fc:	0000008e 	andeq	r0, r0, lr, lsl #1
     400:	08002de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp}
     404:	00000038 	andeq	r0, r0, r8, lsr r0
     408:	08002e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp}
     40c:	00000020 	andeq	r0, r0, r0, lsr #32
     410:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
     414:	000000ae 	andeq	r0, r0, lr, lsr #1
     418:	08002eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp}
     41c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
     428:	0000004c 	andeq	r0, r0, ip, asr #32
     42c:	2cf40002 	ldclcs	0, cr0, [r4], #8
     430:	00040000 	andeq	r0, r4, r0
     434:	00000000 	andeq	r0, r0, r0
     438:	08002f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, sp}
     43c:	0000001a 	andeq	r0, r0, sl, lsl r0
     440:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     444:	00000020 	andeq	r0, r0, r0, lsr #32
     448:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
     44c:	00000020 	andeq	r0, r0, r0, lsr #32
     450:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
     454:	0000007c 	andeq	r0, r0, ip, ror r0
     458:	08002ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
     45c:	0000001c 	andeq	r0, r0, ip, lsl r0
     460:	08003018 	stmdaeq	r0, {r3, r4, ip, sp}
     464:	00000020 	andeq	r0, r0, r0, lsr #32
     468:	08003038 	stmdaeq	r0, {r3, r4, r5, ip, sp}
     46c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     478:	0000012c 	andeq	r0, r0, ip, lsr #2
     47c:	2f880002 	svccs	0x00880002
     480:	00040000 	andeq	r0, r4, r0
     484:	00000000 	andeq	r0, r0, r0
     488:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
     48c:	00000074 	andeq	r0, r0, r4, ror r0
     490:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
     494:	00000184 	andeq	r0, r0, r4, lsl #3
     498:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     49c:	0000003c 	andeq	r0, r0, ip, lsr r0
     4a0:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
     4a4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4a8:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
     4ac:	0000003e 	andeq	r0, r0, lr, lsr r0
     4b0:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
     4b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4b8:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
     4bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     4c0:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     4c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4c8:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
     4cc:	0000003a 	andeq	r0, r0, sl, lsr r0
     4d0:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
     4d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4d8:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
     4dc:	00000040 	andeq	r0, r0, r0, asr #32
     4e0:	0800349c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp}
     4e4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4e8:	080034dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp}
     4ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     4f0:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
     4f4:	00000042 	andeq	r0, r0, r2, asr #32
     4f8:	08003560 	stmdaeq	r0, {r5, r6, r8, sl, ip, sp}
     4fc:	0000003e 	andeq	r0, r0, lr, lsr r0
     500:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
     504:	00000040 	andeq	r0, r0, r0, asr #32
     508:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
     50c:	00000040 	andeq	r0, r0, r0, asr #32
     510:	08003620 	stmdaeq	r0, {r5, r9, sl, ip, sp}
     514:	00000040 	andeq	r0, r0, r0, asr #32
     518:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
     51c:	0000003e 	andeq	r0, r0, lr, lsr r0
     520:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
     524:	0000001e 	andeq	r0, r0, lr, lsl r0
     528:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
     52c:	0000001c 	andeq	r0, r0, ip, lsl r0
     530:	080036dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, sp}
     534:	0000003e 	andeq	r0, r0, lr, lsr r0
     538:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     53c:	00000040 	andeq	r0, r0, r0, asr #32
     540:	0800375c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, sp}
     544:	0000003e 	andeq	r0, r0, lr, lsr r0
     548:	0800379c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp}
     54c:	00000020 	andeq	r0, r0, r0, lsr #32
     550:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
     554:	0000003e 	andeq	r0, r0, lr, lsr r0
     558:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     55c:	0000003e 	andeq	r0, r0, lr, lsr r0
     560:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
     564:	0000002e 	andeq	r0, r0, lr, lsr #32
     568:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
     56c:	00000046 	andeq	r0, r0, r6, asr #32
     570:	080038b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, sp}
     574:	00000060 	andeq	r0, r0, r0, rrx
     578:	08003914 	stmdaeq	r0, {r2, r4, r8, fp, ip, sp}
     57c:	00000044 	andeq	r0, r0, r4, asr #32
     580:	08003958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, sp}
     584:	00000066 	andeq	r0, r0, r6, rrx
     588:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
     58c:	0000002c 	andeq	r0, r0, ip, lsr #32
     590:	080039ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip, sp}
     594:	0000005a 	andeq	r0, r0, sl, asr r0
     598:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     59c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
     5a8:	000000ac 	andeq	r0, r0, ip, lsr #1
     5ac:	3b130002 	blcc	4c05bc <_Min_Stack_Size+0x4c01bc>
     5b0:	00040000 	andeq	r0, r4, r0
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
     5bc:	000001a4 	andeq	r0, r0, r4, lsr #3
     5c0:	08003c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, sp}
     5c4:	000000ac 	andeq	r0, r0, ip, lsr #1
     5c8:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
     5cc:	0000006c 	andeq	r0, r0, ip, rrx
     5d0:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
     5d4:	00000036 	andeq	r0, r0, r6, lsr r0
     5d8:	08003d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp}
     5dc:	00000034 	andeq	r0, r0, r4, lsr r0
     5e0:	08003d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, sp}
     5e4:	00000034 	andeq	r0, r0, r4, lsr r0
     5e8:	08003dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, sp}
     5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     5f0:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
     5f4:	0000001a 	andeq	r0, r0, sl, lsl r0
     5f8:	08003e08 	stmdaeq	r0, {r3, r9, sl, fp, ip, sp}
     5fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     600:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
     604:	00000036 	andeq	r0, r0, r6, lsr r0
     608:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
     60c:	0000002a 	andeq	r0, r0, sl, lsr #32
     610:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
     614:	00000030 	andeq	r0, r0, r0, lsr r0
     618:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
     61c:	00000030 	andeq	r0, r0, r0, lsr r0
     620:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
     624:	00000024 	andeq	r0, r0, r4, lsr #32
     628:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
     62c:	00000078 	andeq	r0, r0, r8, ror r0
     630:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
     634:	0000005c 	andeq	r0, r0, ip, asr r0
     638:	08004000 	stmdaeq	r0, {lr}
     63c:	00000072 	andeq	r0, r0, r2, ror r0
     640:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
     644:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     648:	08004124 	stmdaeq	r0, {r2, r5, r8, lr}
     64c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
     658:	000000dc 	ldrdeq	r0, [r0], -ip
     65c:	42500002 	subsmi	r0, r0, #2
     660:	00040000 	andeq	r0, r4, r0
     664:	00000000 	andeq	r0, r0, r0
     668:	08004180 	stmdaeq	r0, {r7, r8, lr}
     66c:	000000d8 	ldrdeq	r0, [r0], -r8
     670:	08004258 	stmdaeq	r0, {r3, r4, r6, r9, lr}
     674:	00000086 	andeq	r0, r0, r6, lsl #1
     678:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
     67c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     680:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
     684:	00000048 	andeq	r0, r0, r8, asr #32
     688:	080044d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr}
     68c:	00000036 	andeq	r0, r0, r6, lsr r0
     690:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
     694:	0000003e 	andeq	r0, r0, lr, lsr r0
     698:	08004550 	stmdaeq	r0, {r4, r6, r8, sl, lr}
     69c:	0000003e 	andeq	r0, r0, lr, lsr r0
     6a0:	08004590 	stmdaeq	r0, {r4, r7, r8, sl, lr}
     6a4:	00000036 	andeq	r0, r0, r6, lsr r0
     6a8:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
     6ac:	00000040 	andeq	r0, r0, r0, asr #32
     6b0:	08004608 	stmdaeq	r0, {r3, r9, sl, lr}
     6b4:	00000042 	andeq	r0, r0, r2, asr #32
     6b8:	0800464c 	stmdaeq	r0, {r2, r3, r6, r9, sl, lr}
     6bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     6c0:	0800468c 	stmdaeq	r0, {r2, r3, r7, r9, sl, lr}
     6c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     6c8:	080046cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, lr}
     6cc:	0000009a 	muleq	r0, sl, r0
     6d0:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
     6d4:	0000001a 	andeq	r0, r0, sl, lsl r0
     6d8:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
     6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e0:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
     6e4:	0000003e 	andeq	r0, r0, lr, lsr r0
     6e8:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
     6ec:	00000022 	andeq	r0, r0, r2, lsr #32
     6f0:	08004804 	stmdaeq	r0, {r2, fp, lr}
     6f4:	00000032 	andeq	r0, r0, r2, lsr r0
     6f8:	08004838 	stmdaeq	r0, {r3, r4, r5, fp, lr}
     6fc:	0000001a 	andeq	r0, r0, sl, lsl r0
     700:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
     704:	00000046 	andeq	r0, r0, r6, asr #32
     708:	0800489c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr}
     70c:	00000060 	andeq	r0, r0, r0, rrx
     710:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
     714:	00000038 	andeq	r0, r0, r8, lsr r0
     718:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
     71c:	00000020 	andeq	r0, r0, r0, lsr #32
     720:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
     724:	00000076 	andeq	r0, r0, r6, ror r0
     728:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
     72c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
     738:	00000054 	andeq	r0, r0, r4, asr r0
     73c:	4d750002 	ldclmi	0, cr0, [r5, #-8]!
     740:	00040000 	andeq	r0, r4, r0
     744:	00000000 	andeq	r0, r0, r0
     748:	08004a00 	stmdaeq	r0, {r9, fp, lr}
     74c:	00000034 	andeq	r0, r0, r4, lsr r0
     750:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
     754:	000000dc 	ldrdeq	r0, [r0], -ip
     758:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
     75c:	0000002a 	andeq	r0, r0, sl, lsr #32
     760:	08004b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, lr}
     764:	00000024 	andeq	r0, r0, r4, lsr #32
     768:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
     76c:	00000034 	andeq	r0, r0, r4, lsr r0
     770:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
     774:	0000001c 	andeq	r0, r0, ip, lsl r0
     778:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
     77c:	00000034 	andeq	r0, r0, r4, lsr r0
     780:	08004be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, lr}
     784:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     790:	000000ac 	andeq	r0, r0, ip, lsr #1
     794:	50b10002 	adcspl	r0, r1, r2
     798:	00040000 	andeq	r0, r4, r0
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	08004c00 	stmdaeq	r0, {sl, fp, lr}
     7a4:	0000001a 	andeq	r0, r0, sl, lsl r0
     7a8:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
     7ac:	0000015c 	andeq	r0, r0, ip, asr r1
     7b0:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
     7b4:	0000004e 	andeq	r0, r0, lr, asr #32
     7b8:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
     7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c0:	08004de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, lr}
     7c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c8:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
     7cc:	00000038 	andeq	r0, r0, r8, lsr r0
     7d0:	08004e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, lr}
     7d4:	000000dc 	ldrdeq	r0, [r0], -ip
     7d8:	08004f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, lr}
     7dc:	00000054 	andeq	r0, r0, r4, asr r0
     7e0:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
     7e4:	000000dc 	ldrdeq	r0, [r0], -ip
     7e8:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
     7ec:	00000054 	andeq	r0, r0, r4, asr r0
     7f0:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
     7f4:	00000038 	andeq	r0, r0, r8, lsr r0
     7f8:	080050d0 	stmdaeq	r0, {r4, r6, r7, ip, lr}
     7fc:	00000038 	andeq	r0, r0, r8, lsr r0
     800:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
     804:	00000054 	andeq	r0, r0, r4, asr r0
     808:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
     810:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
     814:	0000003c 	andeq	r0, r0, ip, lsr r0
     818:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
     81c:	00000034 	andeq	r0, r0, r4, lsr r0
     820:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
     824:	0000001c 	andeq	r0, r0, ip, lsl r0
     828:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
     82c:	00000058 	andeq	r0, r0, r8, asr r0
     830:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
     834:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     840:	00000104 	andeq	r0, r0, r4, lsl #2
     844:	58ce0002 	stmiapl	lr, {r1}^
     848:	00040000 	andeq	r0, r4, r0
     84c:	00000000 	andeq	r0, r0, r0
     850:	08005280 	stmdaeq	r0, {r7, r9, ip, lr}
     854:	0000001a 	andeq	r0, r0, sl, lsl r0
     858:	0800529c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, lr}
     85c:	0000012c 	andeq	r0, r0, ip, lsr #2
     860:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
     864:	0000006c 	andeq	r0, r0, ip, rrx
     868:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
     86c:	00000038 	andeq	r0, r0, r8, lsr r0
     870:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
     874:	00000038 	andeq	r0, r0, r8, lsr r0
     878:	080054a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, lr}
     87c:	00000058 	andeq	r0, r0, r8, asr r0
     880:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
     884:	00000024 	andeq	r0, r0, r4, lsr #32
     888:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
     88c:	0000001c 	andeq	r0, r0, ip, lsl r0
     890:	0800553c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, lr}
     894:	0000001c 	andeq	r0, r0, ip, lsl r0
     898:	08005558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, lr}
     89c:	00000132 	andeq	r0, r0, r2, lsr r1
     8a0:	0800568c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, lr}
     8a4:	00000074 	andeq	r0, r0, r4, ror r0
     8a8:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
     8ac:	00000036 	andeq	r0, r0, r6, lsr r0
     8b0:	08005738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, lr}
     8b4:	00000040 	andeq	r0, r0, r0, asr #32
     8b8:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
     8bc:	0000001e 	andeq	r0, r0, lr, lsl r0
     8c0:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
     8c4:	00000030 	andeq	r0, r0, r0, lsr r0
     8c8:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
     8cc:	0000007c 	andeq	r0, r0, ip, ror r0
     8d0:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
     8d4:	00000024 	andeq	r0, r0, r4, lsr #32
     8d8:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
     8dc:	00000040 	andeq	r0, r0, r0, asr #32
     8e0:	080058a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, lr}
     8e4:	0000004c 	andeq	r0, r0, ip, asr #32
     8e8:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     8ec:	0000002a 	andeq	r0, r0, sl, lsr #32
     8f0:	08005920 	stmdaeq	r0, {r5, r8, fp, ip, lr}
     8f4:	000000dc 	ldrdeq	r0, [r0], -ip
     8f8:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
     8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     900:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
     904:	0000001a 	andeq	r0, r0, sl, lsl r0
     908:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
     90c:	000000ca 	andeq	r0, r0, sl, asr #1
     910:	08005b00 	stmdaeq	r0, {r8, r9, fp, ip, lr}
     914:	000000c0 	andeq	r0, r0, r0, asr #1
     918:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
     91c:	0000003c 	andeq	r0, r0, ip, lsr r0
     920:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
     924:	00000034 	andeq	r0, r0, r4, lsr r0
     928:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
     934:	00000050 	andeq	r0, r0, r0, asr r0
     938:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
     93c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     948:	000000ec 	andeq	r0, r0, ip, ror #1
     94c:	65ca0002 	strbvs	r0, [sl, #2]
     950:	00040000 	andeq	r0, r4, r0
     954:	00000000 	andeq	r0, r0, r0
     958:	08005cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, lr}
     95c:	00000058 	andeq	r0, r0, r8, asr r0
     960:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
     964:	00000194 	muleq	r0, r4, r1
     968:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
     96c:	000000da 	ldrdeq	r0, [r0], -sl
     970:	08005f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, lr}
     974:	00000054 	andeq	r0, r0, r4, asr r0
     978:	08005fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, ip, lr}
     97c:	0000005c 	andeq	r0, r0, ip, asr r0
     980:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
     984:	000000cc 	andeq	r0, r0, ip, asr #1
     988:	080060fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp, lr}
     98c:	0000007c 	andeq	r0, r0, ip, ror r0
     990:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
     994:	0000006c 	andeq	r0, r0, ip, rrx
     998:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
     99c:	0000006c 	andeq	r0, r0, ip, rrx
     9a0:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
     9a4:	00000038 	andeq	r0, r0, r8, lsr r0
     9a8:	08006288 	stmdaeq	r0, {r3, r7, r9, sp, lr}
     9ac:	00000034 	andeq	r0, r0, r4, lsr r0
     9b0:	080062bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp, lr}
     9b4:	000000ac 	andeq	r0, r0, ip, lsr #1
     9b8:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
     9bc:	00000084 	andeq	r0, r0, r4, lsl #1
     9c0:	080063ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, lr}
     9c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     9c8:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
     9cc:	00000044 	andeq	r0, r0, r4, asr #32
     9d0:	0800646c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp, lr}
     9d4:	0000015c 	andeq	r0, r0, ip, asr r1
     9d8:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
     9dc:	00000088 	andeq	r0, r0, r8, lsl #1
     9e0:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
     9e4:	00000040 	andeq	r0, r0, r0, asr #32
     9e8:	08006690 	stmdaeq	r0, {r4, r7, r9, sl, sp, lr}
     9ec:	0000003c 	andeq	r0, r0, ip, lsr r0
     9f0:	080066cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp, lr}
     9f4:	00000024 	andeq	r0, r0, r4, lsr #32
     9f8:	080066f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp, lr}
     9fc:	00000024 	andeq	r0, r0, r4, lsr #32
     a00:	08006714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp, lr}
     a04:	0000004c 	andeq	r0, r0, ip, asr #32
     a08:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
     a0c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a10:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
     a14:	0000007c 	andeq	r0, r0, ip, ror r0
     a18:	080068ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, sp, lr}
     a1c:	00000078 	andeq	r0, r0, r8, ror r0
     a20:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
     a24:	000000b4 	strheq	r0, [r0], -r4
     a28:	080069d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, sp, lr}
     a2c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
     a38:	00000054 	andeq	r0, r0, r4, asr r0
     a3c:	72540002 	subsvc	r0, r4, #2
     a40:	00040000 	andeq	r0, r4, r0
     a44:	00000000 	andeq	r0, r0, r0
     a48:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}
     a4c:	00000016 	andeq	r0, r0, r6, lsl r0
     a50:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
     a54:	00000038 	andeq	r0, r0, r8, lsr r0
     a58:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
     a5c:	00000018 	andeq	r0, r0, r8, lsl r0
     a60:	08006abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, sp, lr}
     a64:	00000038 	andeq	r0, r0, r8, lsr r0
     a68:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
     a6c:	00000038 	andeq	r0, r0, r8, lsr r0
     a70:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
     a74:	00000024 	andeq	r0, r0, r4, lsr #32
     a78:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
     a7c:	00000038 	andeq	r0, r0, r8, lsr r0
     a80:	08006b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, sp, lr}
     a84:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     a90:	0000005c 	andeq	r0, r0, ip, asr r0
     a94:	74d70002 	ldrbvc	r0, [r7], #2
     a98:	00040000 	andeq	r0, r4, r0
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
     aa4:	0000005c 	andeq	r0, r0, ip, asr r0
     aa8:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
     aac:	00000030 	andeq	r0, r0, r0, lsr r0
     ab0:	08006c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, lr}
     ab4:	00000030 	andeq	r0, r0, r0, lsr r0
     ab8:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
     abc:	0000003c 	andeq	r0, r0, ip, lsr r0
     ac0:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
     ac4:	00000094 	muleq	r0, r4, r0
     ac8:	08006d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, lr}
     acc:	0000002c 	andeq	r0, r0, ip, lsr #32
     ad0:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
     ad4:	000000b8 	strheq	r0, [r0], -r8
     ad8:	08006e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, lr}
     adc:	00000198 	muleq	r0, r8, r1
     ae0:	08006fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
     ae4:	0000005c 	andeq	r0, r0, ip, asr r0
	...
     af0:	00000044 	andeq	r0, r0, r4, asr #32
     af4:	806a0002 	rsbhi	r0, sl, r2
     af8:	00040000 	andeq	r0, r4, r0
     afc:	00000000 	andeq	r0, r0, r0
     b00:	08007010 	stmdaeq	r0, {r4, ip, sp, lr}
     b04:	00000074 	andeq	r0, r0, r4, ror r0
     b08:	08007084 	stmdaeq	r0, {r2, r7, ip, sp, lr}
     b0c:	00000214 	andeq	r0, r0, r4, lsl r2
     b10:	08007298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp, lr}
     b14:	000000ec 	andeq	r0, r0, ip, ror #1
     b18:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
     b1c:	00000054 	andeq	r0, r0, r4, asr r0
     b20:	080073d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, lr}
     b24:	0000004a 	andeq	r0, r0, sl, asr #32
     b28:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
     b2c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     b38:	0000007c 	andeq	r0, r0, ip, ror r0
     b3c:	85e30002 	strbhi	r0, [r3, #2]!
     b40:	00040000 	andeq	r0, r4, r0
     b44:	00000000 	andeq	r0, r0, r0
     b48:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
     b4c:	00000076 	andeq	r0, r0, r6, ror r0
     b50:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
     b54:	0000002e 	andeq	r0, r0, lr, lsr #32
     b58:	08007500 	stmdaeq	r0, {r8, sl, ip, sp, lr}
     b5c:	00000082 	andeq	r0, r0, r2, lsl #1
     b60:	08007584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp, lr}
     b64:	00000040 	andeq	r0, r0, r0, asr #32
     b68:	080075c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, lr}
     b6c:	00000040 	andeq	r0, r0, r0, asr #32
     b70:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
     b74:	00000048 	andeq	r0, r0, r8, asr #32
     b78:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
     b7c:	00000040 	andeq	r0, r0, r0, asr #32
     b80:	0800768c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, sp, lr}
     b84:	0000001c 	andeq	r0, r0, ip, lsl r0
     b88:	080076a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp, lr}
     b8c:	00000060 	andeq	r0, r0, r0, rrx
     b90:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}
     b94:	0000006c 	andeq	r0, r0, ip, rrx
     b98:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
     b9c:	00000138 	andeq	r0, r0, r8, lsr r1
     ba0:	080078ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp, lr}
     ba4:	00000090 	muleq	r0, r0, r0
     ba8:	0800793c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp, lr}
     bac:	00000006 	andeq	r0, r0, r6
	...
     bb8:	000001ac 	andeq	r0, r0, ip, lsr #3
     bbc:	8d960002 	ldchi	0, cr0, [r6, #8]
     bc0:	00040000 	andeq	r0, r4, r0
     bc4:	00000000 	andeq	r0, r0, r0
     bc8:	08007944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp, lr}
     bcc:	00000224 	andeq	r0, r0, r4, lsr #4
     bd0:	08007b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, sp, lr}
     bd4:	000000b2 	strheq	r0, [r0], -r2
     bd8:	08007c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp, lr}
     bdc:	000000b4 	strheq	r0, [r0], -r4
     be0:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
     be4:	0000002c 	andeq	r0, r0, ip, lsr #32
     be8:	08007cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
     bec:	00000040 	andeq	r0, r0, r0, asr #32
     bf0:	08007d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
     bf4:	0000002c 	andeq	r0, r0, ip, lsr #32
     bf8:	08007d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, lr}
     bfc:	0000002c 	andeq	r0, r0, ip, lsr #32
     c00:	08007d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, sp, lr}
     c04:	00000020 	andeq	r0, r0, r0, lsr #32
     c08:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
     c0c:	00000020 	andeq	r0, r0, r0, lsr #32
     c10:	08007dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}
     c14:	0000001c 	andeq	r0, r0, ip, lsl r0
     c18:	08007df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
     c1c:	00000040 	andeq	r0, r0, r0, asr #32
     c20:	08007e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp, lr}
     c24:	00000018 	andeq	r0, r0, r8, lsl r0
     c28:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
     c2c:	00000050 	andeq	r0, r0, r0, asr r0
     c30:	08007e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
     c34:	00000040 	andeq	r0, r0, r0, asr #32
     c38:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     c3c:	00000038 	andeq	r0, r0, r8, lsr r0
     c40:	08007f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp, lr}
     c44:	00000068 	andeq	r0, r0, r8, rrx
     c48:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
     c4c:	00000048 	andeq	r0, r0, r8, asr #32
     c50:	08007fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, sp, lr}
     c54:	00000120 	andeq	r0, r0, r0, lsr #2
     c58:	080080e0 	stmdaeq	r0, {r5, r6, r7, pc}
     c5c:	00000048 	andeq	r0, r0, r8, asr #32
     c60:	08008128 	stmdaeq	r0, {r3, r5, r8, pc}
     c64:	00000078 	andeq	r0, r0, r8, ror r0
     c68:	080081a0 	stmdaeq	r0, {r5, r7, r8, pc}
     c6c:	0000007c 	andeq	r0, r0, ip, ror r0
     c70:	0800821c 	stmdaeq	r0, {r2, r3, r4, r9, pc}
     c74:	00000014 	andeq	r0, r0, r4, lsl r0
     c78:	08008230 	stmdaeq	r0, {r4, r5, r9, pc}
     c7c:	000000c8 	andeq	r0, r0, r8, asr #1
     c80:	080082f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, pc}
     c84:	00000068 	andeq	r0, r0, r8, rrx
     c88:	08008360 	stmdaeq	r0, {r5, r6, r8, r9, pc}
     c8c:	00000128 	andeq	r0, r0, r8, lsr #2
     c90:	08008488 	stmdaeq	r0, {r3, r7, sl, pc}
     c94:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
     c98:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
     c9c:	00000350 	andeq	r0, r0, r0, asr r3
     ca0:	08008a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, pc}
     ca4:	0000007c 	andeq	r0, r0, ip, ror r0
     ca8:	08008b10 	stmdaeq	r0, {r4, r8, r9, fp, pc}
     cac:	000001dc 	ldrdeq	r0, [r0], -ip
     cb0:	08008cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, pc}
     cb4:	000000c0 	andeq	r0, r0, r0, asr #1
     cb8:	08008dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, pc}
     cbc:	00000120 	andeq	r0, r0, r0, lsr #2
     cc0:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
     cc4:	00000166 	andeq	r0, r0, r6, ror #2
     cc8:	08009034 	stmdaeq	r0, {r2, r4, r5, ip, pc}
     ccc:	00000076 	andeq	r0, r0, r6, ror r0
     cd0:	080090ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, pc}
     cd4:	00000162 	andeq	r0, r0, r2, ror #2
     cd8:	08009210 	stmdaeq	r0, {r4, r9, ip, pc}
     cdc:	00000056 	andeq	r0, r0, r6, asr r0
     ce0:	08009268 	stmdaeq	r0, {r3, r5, r6, r9, ip, pc}
     ce4:	000000a0 	andeq	r0, r0, r0, lsr #1
     ce8:	08009308 	stmdaeq	r0, {r3, r8, r9, ip, pc}
     cec:	00000050 	andeq	r0, r0, r0, asr r0
     cf0:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
     cf4:	0000001e 	andeq	r0, r0, lr, lsl r0
     cf8:	08009378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, pc}
     cfc:	0000001e 	andeq	r0, r0, lr, lsl r0
     d00:	08009398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, pc}
     d04:	000001a0 	andeq	r0, r0, r0, lsr #3
     d08:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
     d0c:	0000005c 	andeq	r0, r0, ip, asr r0
     d10:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
     d14:	0000005c 	andeq	r0, r0, ip, asr r0
     d18:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
     d1c:	0000028e 	andeq	r0, r0, lr, lsl #5
     d20:	08009880 	stmdaeq	r0, {r7, fp, ip, pc}
     d24:	0000000c 	andeq	r0, r0, ip
     d28:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
     d2c:	0000000c 	andeq	r0, r0, ip
     d30:	08009898 	stmdaeq	r0, {r3, r4, r7, fp, ip, pc}
     d34:	00000054 	andeq	r0, r0, r4, asr r0
     d38:	080098ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, pc}
     d3c:	00000024 	andeq	r0, r0, r4, lsr #32
     d40:	08009910 	stmdaeq	r0, {r4, r8, fp, ip, pc}
     d44:	000000d4 	ldrdeq	r0, [r0], -r4
     d48:	080099e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, pc}
     d4c:	00000178 	andeq	r0, r0, r8, ror r1
     d50:	08009b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, pc}
     d54:	00000048 	andeq	r0, r0, r8, asr #32
     d58:	08009ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, pc}
     d5c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
     d68:	000000ec 	andeq	r0, r0, ip, ror #1
     d6c:	a6a40002 	strtge	r0, [r4], r2
     d70:	00040000 	andeq	r0, r4, r0
     d74:	00000000 	andeq	r0, r0, r0
     d78:	08009bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, pc}
     d7c:	00000030 	andeq	r0, r0, r0, lsr r0
     d80:	08009bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
     d84:	0000001e 	andeq	r0, r0, lr, lsl r0
     d88:	08009c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, pc}
     d8c:	000000c8 	andeq	r0, r0, r8, asr #1
     d90:	08009ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, pc}
     d94:	00000034 	andeq	r0, r0, r4, lsr r0
     d98:	08009d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, pc}
     d9c:	0000001e 	andeq	r0, r0, lr, lsl r0
     da0:	08009d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, pc}
     da4:	00000034 	andeq	r0, r0, r4, lsr r0
     da8:	08009d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, pc}
     dac:	00000020 	andeq	r0, r0, r0, lsr #32
     db0:	08009d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, pc}
     db4:	00000034 	andeq	r0, r0, r4, lsr r0
     db8:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
     dbc:	0000004e 	andeq	r0, r0, lr, asr #32
     dc0:	08009e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, pc}
     dc4:	00000044 	andeq	r0, r0, r4, asr #32
     dc8:	08009e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, pc}
     dcc:	0000004e 	andeq	r0, r0, lr, asr #32
     dd0:	08009ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, pc}
     dd4:	00000094 	muleq	r0, r4, r0
     dd8:	08009f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, pc}
     ddc:	0000004e 	andeq	r0, r0, lr, asr #32
     de0:	08009f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, pc}
     de4:	00000194 	muleq	r0, r4, r1
     de8:	0800a11c 	stmdaeq	r0, {r2, r3, r4, r8, sp, pc}
     dec:	000001d4 	ldrdeq	r0, [r0], -r4
     df0:	0800a2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, pc}
     df4:	000001f4 	strdeq	r0, [r0], -r4
     df8:	0800a4e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, pc}
     dfc:	00000068 	andeq	r0, r0, r8, rrx
     e00:	0800a54c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, pc}
     e04:	00000054 	andeq	r0, r0, r4, asr r0
     e08:	0800a5a0 	stmdaeq	r0, {r5, r7, r8, sl, sp, pc}
     e0c:	00000026 	andeq	r0, r0, r6, lsr #32
     e10:	0800a5c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, pc}
     e14:	0000008c 	andeq	r0, r0, ip, lsl #1
     e18:	0800a654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, pc}
     e1c:	00000054 	andeq	r0, r0, r4, asr r0
     e20:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
     e24:	000000a4 	andeq	r0, r0, r4, lsr #1
     e28:	0800a74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp, pc}
     e2c:	0000015c 	andeq	r0, r0, ip, asr r1
     e30:	0800a8a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, pc}
     e34:	000001dc 	ldrdeq	r0, [r0], -ip
     e38:	0800aa84 	stmdaeq	r0, {r2, r7, r9, fp, sp, pc}
     e3c:	000001cc 	andeq	r0, r0, ip, asr #3
     e40:	0800ac50 	stmdaeq	r0, {r4, r6, sl, fp, sp, pc}
     e44:	0000006c 	andeq	r0, r0, ip, rrx
     e48:	0800acbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
     e4c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     e58:	0000001c 	andeq	r0, r0, ip, lsl r0
     e5c:	b25c0002 	subslt	r0, ip, #2
     e60:	00040000 	andeq	r0, r4, r0
     e64:	00000000 	andeq	r0, r0, r0
     e68:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
     e6c:	00000388 	andeq	r0, r0, r8, lsl #7
	...
     e78:	0000001c 	andeq	r0, r0, ip, lsl r0
     e7c:	b4ac0002 	strtlt	r0, [ip], #2
     e80:	00040000 	andeq	r0, r4, r0
     e84:	00000000 	andeq	r0, r0, r0
     e88:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
     e8c:	00000006 	andeq	r0, r0, r6
	...
     e98:	0000001c 	andeq	r0, r0, ip, lsl r0
     e9c:	b5e20002 	strblt	r0, [r2, #2]!
     ea0:	00040000 	andeq	r0, r4, r0
     ea4:	00000000 	andeq	r0, r0, r0
     ea8:	0800b080 	stmdaeq	r0, {r7, ip, sp, pc}
     eac:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
     eb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ebc:	b8420002 	stmdalt	r2, {r1}^
     ec0:	00040000 	andeq	r0, r4, r0
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	0800b12c 	stmdaeq	r0, {r2, r3, r5, r8, ip, sp, pc}
     ecc:	00000332 	andeq	r0, r0, r2, lsr r3
	...
     ed8:	0000001c 	andeq	r0, r0, ip, lsl r0
     edc:	bb260002 	bllt	980eec <_Min_Stack_Size+0x980aec>
     ee0:	00040000 	andeq	r0, r4, r0
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	0800b460 	stmdaeq	r0, {r5, r6, sl, ip, sp, pc}
     eec:	00000428 	andeq	r0, r0, r8, lsr #8
	...
     ef8:	0000001c 	andeq	r0, r0, ip, lsl r0
     efc:	be6e0002 	cdplt	0, 6, cr0, cr14, cr2, {0}
     f00:	00040000 	andeq	r0, r4, r0
     f04:	00000000 	andeq	r0, r0, r0
     f08:	0800b888 	stmdaeq	r0, {r3, r7, fp, ip, sp, pc}
     f0c:	00000b50 	andeq	r0, r0, r0, asr fp
	...
     f18:	0000001c 	andeq	r0, r0, ip, lsl r0
     f1c:	c5e20002 	strbgt	r0, [r2, #2]!
     f20:	00040000 	andeq	r0, r4, r0
     f24:	00000000 	andeq	r0, r0, r0
     f28:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
     f2c:	0000017e 	andeq	r0, r0, lr, ror r1
	...
     f38:	0000001c 	andeq	r0, r0, ip, lsl r0
     f3c:	c8130002 	ldmdagt	r3, {r1}
     f40:	00040000 	andeq	r0, r4, r0
     f44:	00000000 	andeq	r0, r0, r0
     f48:	0800c558 	stmdaeq	r0, {r3, r4, r6, r8, sl, lr, pc}
     f4c:	0000000c 	andeq	r0, r0, ip
	...
     f58:	0000001c 	andeq	r0, r0, ip, lsl r0
     f5c:	c8ea0002 	stmiagt	sl!, {r1}^
     f60:	00040000 	andeq	r0, r4, r0
     f64:	00000000 	andeq	r0, r0, r0
     f68:	0800c564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr, pc}
     f6c:	00000050 	andeq	r0, r0, r0, asr r0
	...
     f78:	00000014 	andeq	r0, r0, r4, lsl r0
     f7c:	c9c50002 	stmibgt	r5, {r1}^
     f80:	00040000 	andeq	r0, r4, r0
	...
     f90:	0000001c 	andeq	r0, r0, ip, lsl r0
     f94:	ca830002 	bgt	fe0c0fa4 <_estack+0xde090fa4>
     f98:	00040000 	andeq	r0, r4, r0
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	0800c5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, lr, pc}
     fa4:	00000004 	andeq	r0, r0, r4
	...
     fb0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb4:	cbac0002 	blgt	feb00fc4 <_estack+0xdead0fc4>
     fb8:	00040000 	andeq	r0, r4, r0
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	0800c5b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr, pc}
     fc4:	0000000a 	andeq	r0, r0, sl
	...
     fd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd4:	cc7e0002 	ldclgt	0, cr0, [lr], #-8
     fd8:	00040000 	andeq	r0, r4, r0
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	0800c5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, lr, pc}
     fe4:	00000120 	andeq	r0, r0, r0, lsr #2
	...
     ff0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff4:	ce8c0002 	cdpgt	0, 8, cr0, cr12, cr2, {0}
     ff8:	00040000 	andeq	r0, r4, r0
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	0800c6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, lr, pc}
    1004:	00000118 	andeq	r0, r0, r8, lsl r1
	...
    1010:	0000001c 	andeq	r0, r0, ip, lsl r0
    1014:	d11b0002 	tstle	fp, r2
    1018:	00040000 	andeq	r0, r4, r0
    101c:	00000000 	andeq	r0, r0, r0
    1020:	0800c800 	stmdaeq	r0, {fp, lr, pc}
    1024:	00000012 	andeq	r0, r0, r2, lsl r0
	...
    1030:	0000001c 	andeq	r0, r0, ip, lsl r0
    1034:	d26c0002 	rsble	r0, ip, #2
    1038:	00040000 	andeq	r0, r4, r0
    103c:	00000000 	andeq	r0, r0, r0
    1040:	0800c814 	stmdaeq	r0, {r2, r4, fp, lr, pc}
    1044:	0000000c 	andeq	r0, r0, ip
	...
    1050:	00000014 	andeq	r0, r0, r4, lsl r0
    1054:	daf50002 	ble	ffd41064 <_estack+0xdfd11064>
    1058:	00040000 	andeq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
   4:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
	...
  10:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
  14:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
  18:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
  1c:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
  20:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
  24:	080010a0 	stmdaeq	r0, {r5, r7, ip}
	...
  30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  34:	00000000 	andeq	r0, r0, r0
  38:	080010a0 	stmdaeq	r0, {r5, r7, ip}
  3c:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
  40:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
  44:	080010e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip}
	...
  50:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
  54:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
  58:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
  5c:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
  60:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
  64:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
	...
  70:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
  74:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
  78:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
  7c:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
  80:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
  84:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
  88:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
  8c:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
  90:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
  94:	080014c0 	stmdaeq	r0, {r6, r7, sl, ip}
	...
  a0:	080014c0 	stmdaeq	r0, {r6, r7, sl, ip}
  a4:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
  a8:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
  ac:	0800173e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, ip}
  b0:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
  b4:	08001772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, ip}
  b8:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
  bc:	080017b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip}
  c0:	080017b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip}
  c4:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
  c8:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
  cc:	08001806 	stmdaeq	r0, {r1, r2, fp, ip}
  d0:	08001808 	stmdaeq	r0, {r3, fp, ip}
  d4:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
  d8:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
  dc:	08001856 	stmdaeq	r0, {r1, r2, r4, r6, fp, ip}
  e0:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
  e4:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
  e8:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
  ec:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
  f0:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
  f4:	080018be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip}
  f8:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
  fc:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
 100:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
 104:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
 108:	08001900 	stmdaeq	r0, {r8, fp, ip}
 10c:	0800198c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip}
	...
 118:	0800198c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip}
 11c:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
 120:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
 124:	08001a20 	stmdaeq	r0, {r5, r9, fp, ip}
 128:	08001a20 	stmdaeq	r0, {r5, r9, fp, ip}
 12c:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
 130:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
 134:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
 138:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
 13c:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
 140:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
 144:	08001b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip}
 148:	08001b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip}
 14c:	08001b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip}
 150:	08001b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip}
 154:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
 158:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
 15c:	08001b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip}
 160:	08001b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip}
 164:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
 168:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
 16c:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
 170:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
 174:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
 178:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
 17c:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 180:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 184:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
 188:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
 18c:	08001c84 	stmdaeq	r0, {r2, r7, sl, fp, ip}
 190:	08001c84 	stmdaeq	r0, {r2, r7, sl, fp, ip}
 194:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
 198:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
 19c:	08001cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip}
 1a0:	08001cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip}
 1a4:	08001d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip}
 1a8:	08001d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip}
 1ac:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 1b0:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 1b4:	08001d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip}
 1b8:	08001d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip}
 1bc:	08001dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip}
 1c0:	08001dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip}
 1c4:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
 1c8:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
 1cc:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
 1d0:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
 1d4:	08001f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip}
 1d8:	08001f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip}
 1dc:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
 1e0:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
 1e4:	08001fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip}
 1e8:	08001fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip}
 1ec:	08002008 	stmdaeq	r0, {r3, sp}
 1f0:	08002008 	stmdaeq	r0, {r3, sp}
 1f4:	08002048 	stmdaeq	r0, {r3, r6, sp}
 1f8:	08002048 	stmdaeq	r0, {r3, r6, sp}
 1fc:	08002084 	stmdaeq	r0, {r2, r7, sp}
 200:	08002084 	stmdaeq	r0, {r2, r7, sp}
 204:	080020c0 	stmdaeq	r0, {r6, r7, sp}
 208:	080020c0 	stmdaeq	r0, {r6, r7, sp}
 20c:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
 210:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
 214:	08002118 	stmdaeq	r0, {r3, r4, r8, sp}
 218:	08002118 	stmdaeq	r0, {r3, r4, r8, sp}
 21c:	08002154 	stmdaeq	r0, {r2, r4, r6, r8, sp}
 220:	08002154 	stmdaeq	r0, {r2, r4, r6, r8, sp}
 224:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 228:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 22c:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
 230:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
 234:	08002208 	stmdaeq	r0, {r3, r9, sp}
 238:	08002208 	stmdaeq	r0, {r3, r9, sp}
 23c:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
 240:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
 244:	08002280 	stmdaeq	r0, {r7, r9, sp}
 248:	08002280 	stmdaeq	r0, {r7, r9, sp}
 24c:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
 250:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
 254:	080022f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp}
 258:	080022f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp}
 25c:	08002334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp}
 260:	08002334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp}
 264:	08002370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp}
 268:	08002370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp}
 26c:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
 270:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
 274:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
 278:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
 27c:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
 280:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
 284:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
 288:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
 28c:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
 290:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
 294:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
 298:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
 29c:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
 2a0:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
 2a4:	08002574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp}
 2a8:	08002574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp}
 2ac:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
 2b0:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
 2b4:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
	...
 2c0:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
 2c4:	080026e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, sp}
 2c8:	080026e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, sp}
 2cc:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
 2d0:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
 2d4:	0800288c 	stmdaeq	r0, {r2, r3, r7, fp, sp}
 2d8:	0800288c 	stmdaeq	r0, {r2, r3, r7, fp, sp}
 2dc:	080028de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, sp}
 2e0:	080028e0 	stmdaeq	r0, {r5, r6, r7, fp, sp}
 2e4:	0800290a 	stmdaeq	r0, {r1, r3, r8, fp, sp}
 2e8:	0800290c 	stmdaeq	r0, {r2, r3, r8, fp, sp}
 2ec:	0800294a 	stmdaeq	r0, {r1, r3, r6, r8, fp, sp}
 2f0:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
 2f4:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
 2f8:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
 2fc:	080029c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, sp}
 300:	080029c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, sp}
 304:	08002a06 	stmdaeq	r0, {r1, r2, r9, fp, sp}
 308:	08002a08 	stmdaeq	r0, {r3, r9, fp, sp}
 30c:	08002a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, sp}
 310:	08002a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, sp}
 314:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
 318:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
 31c:	08002a84 	stmdaeq	r0, {r2, r7, r9, fp, sp}
 320:	08002a84 	stmdaeq	r0, {r2, r7, r9, fp, sp}
 324:	08002ac2 	stmdaeq	r0, {r1, r6, r7, r9, fp, sp}
 328:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
 32c:	08002afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, sp}
 330:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
 334:	08002b32 	stmdaeq	r0, {r1, r4, r5, r8, r9, fp, sp}
 338:	08002b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, sp}
 33c:	08002b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp}
 340:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
 344:	08002b96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, sp}
 348:	08002b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, sp}
 34c:	08002bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, sp}
 350:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
 354:	08002c12 	stmdaeq	r0, {r1, r4, sl, fp, sp}
 358:	08002c14 	stmdaeq	r0, {r2, r4, sl, fp, sp}
 35c:	08002c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, sp}
 360:	08002c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, sp}
 364:	08002c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, sp}
 368:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
 36c:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
 370:	08002ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, sp}
 374:	08002d0a 	stmdaeq	r0, {r1, r3, r8, sl, fp, sp}
 378:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
 37c:	08002d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, sp}
 380:	08002d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, sp}
 384:	08002de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, sp}
 388:	08002de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp}
 38c:	08002e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp}
 390:	08002e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp}
 394:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
 398:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
 39c:	08002eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, sp}
 3a0:	08002eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp}
 3a4:	08002f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, sp}
	...
 3b0:	08002f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, sp}
 3b4:	08002f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 3b8:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
 3bc:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
 3c0:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
 3c4:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
 3c8:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
 3cc:	08002ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
 3d0:	08002ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
 3d4:	08003018 	stmdaeq	r0, {r3, r4, ip, sp}
 3d8:	08003018 	stmdaeq	r0, {r3, r4, ip, sp}
 3dc:	08003038 	stmdaeq	r0, {r3, r4, r5, ip, sp}
 3e0:	08003038 	stmdaeq	r0, {r3, r4, r5, ip, sp}
 3e4:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
	...
 3f0:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
 3f4:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
 3f8:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
 3fc:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
 400:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
 404:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
 408:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
 40c:	080032de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, ip, sp}
 410:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
 414:	0800331e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip, sp}
 418:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
 41c:	0800335e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, ip, sp}
 420:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
 424:	0800339e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, sp}
 428:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
 42c:	080033de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, sp}
 430:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
 434:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
 438:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
 43c:	0800345a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip, sp}
 440:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
 444:	0800349c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp}
 448:	0800349c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp}
 44c:	080034da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, ip, sp}
 450:	080034dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp}
 454:	0800351a 	stmdaeq	r0, {r1, r3, r4, r8, sl, ip, sp}
 458:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
 45c:	0800355e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, ip, sp}
 460:	08003560 	stmdaeq	r0, {r5, r6, r8, sl, ip, sp}
 464:	0800359e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, ip, sp}
 468:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
 46c:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
 470:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
 474:	08003620 	stmdaeq	r0, {r5, r9, sl, ip, sp}
 478:	08003620 	stmdaeq	r0, {r5, r9, sl, ip, sp}
 47c:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
 480:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
 484:	0800369e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip, sp}
 488:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
 48c:	080036be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, sp}
 490:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
 494:	080036dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, sp}
 498:	080036dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, sp}
 49c:	0800371a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip, sp}
 4a0:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
 4a4:	0800375c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, sp}
 4a8:	0800375c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, sp}
 4ac:	0800379a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, ip, sp}
 4b0:	0800379c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp}
 4b4:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
 4b8:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
 4bc:	080037fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 4c0:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 4c4:	0800383a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip, sp}
 4c8:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
 4cc:	0800386a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip, sp}
 4d0:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
 4d4:	080038b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip, sp}
 4d8:	080038b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, sp}
 4dc:	08003914 	stmdaeq	r0, {r2, r4, r8, fp, ip, sp}
 4e0:	08003914 	stmdaeq	r0, {r2, r4, r8, fp, ip, sp}
 4e4:	08003958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, sp}
 4e8:	08003958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, sp}
 4ec:	080039be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, sp}
 4f0:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
 4f4:	080039ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip, sp}
 4f8:	080039ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip, sp}
 4fc:	08003a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip, sp}
 500:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
 504:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
	...
 510:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
 514:	08003c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, sp}
 518:	08003c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, sp}
 51c:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
 520:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
 524:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
 528:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
 52c:	08003d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, ip, sp}
 530:	08003d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp}
 534:	08003d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, sp}
 538:	08003d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, sp}
 53c:	08003dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, sp}
 540:	08003dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, sp}
 544:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
 548:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
 54c:	08003e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, ip, sp}
 550:	08003e08 	stmdaeq	r0, {r3, r9, sl, fp, ip, sp}
 554:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
 558:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
 55c:	08003e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 560:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 564:	08003ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, sp}
 568:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
 56c:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
 570:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
 574:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
 578:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
 57c:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
 580:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
 584:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
 588:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
 58c:	08004000 	stmdaeq	r0, {lr}
 590:	08004000 	stmdaeq	r0, {lr}
 594:	08004072 	stmdaeq	r0, {r1, r4, r5, r6, lr}
 598:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
 59c:	08004124 	stmdaeq	r0, {r2, r5, r8, lr}
 5a0:	08004124 	stmdaeq	r0, {r2, r5, r8, lr}
 5a4:	08004180 	stmdaeq	r0, {r7, r8, lr}
	...
 5b0:	08004180 	stmdaeq	r0, {r7, r8, lr}
 5b4:	08004258 	stmdaeq	r0, {r3, r4, r6, r9, lr}
 5b8:	08004258 	stmdaeq	r0, {r3, r4, r6, r9, lr}
 5bc:	080042de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, lr}
 5c0:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
 5c4:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
 5c8:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
 5cc:	080044d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr}
 5d0:	080044d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr}
 5d4:	0800450e 	stmdaeq	r0, {r1, r2, r3, r8, sl, lr}
 5d8:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
 5dc:	0800454e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, lr}
 5e0:	08004550 	stmdaeq	r0, {r4, r6, r8, sl, lr}
 5e4:	0800458e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, lr}
 5e8:	08004590 	stmdaeq	r0, {r4, r7, r8, sl, lr}
 5ec:	080045c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, lr}
 5f0:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
 5f4:	08004608 	stmdaeq	r0, {r3, r9, sl, lr}
 5f8:	08004608 	stmdaeq	r0, {r3, r9, sl, lr}
 5fc:	0800464a 	stmdaeq	r0, {r1, r3, r6, r9, sl, lr}
 600:	0800464c 	stmdaeq	r0, {r2, r3, r6, r9, sl, lr}
 604:	0800468a 	stmdaeq	r0, {r1, r3, r7, r9, sl, lr}
 608:	0800468c 	stmdaeq	r0, {r2, r3, r7, r9, sl, lr}
 60c:	080046ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, lr}
 610:	080046cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, lr}
 614:	08004766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, lr}
 618:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
 61c:	08004782 	stmdaeq	r0, {r1, r7, r8, r9, sl, lr}
 620:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
 624:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
 628:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
 62c:	080047de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, lr}
 630:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
 634:	08004802 	stmdaeq	r0, {r1, fp, lr}
 638:	08004804 	stmdaeq	r0, {r2, fp, lr}
 63c:	08004836 	stmdaeq	r0, {r1, r2, r4, r5, fp, lr}
 640:	08004838 	stmdaeq	r0, {r3, r4, r5, fp, lr}
 644:	08004852 	stmdaeq	r0, {r1, r4, r6, fp, lr}
 648:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
 64c:	0800489a 	stmdaeq	r0, {r1, r3, r4, r7, fp, lr}
 650:	0800489c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr}
 654:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
 658:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
 65c:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
 660:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
 664:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
 668:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
 66c:	080049ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, lr}
 670:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
 674:	080049fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, lr}
	...
 680:	08004a00 	stmdaeq	r0, {r9, fp, lr}
 684:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
 688:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
 68c:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
 690:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
 694:	08004b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, lr}
 698:	08004b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, lr}
 69c:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
 6a0:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
 6a4:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
 6a8:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
 6ac:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
 6b0:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
 6b4:	08004be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, lr}
 6b8:	08004be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, lr}
 6bc:	08004c00 	stmdaeq	r0, {sl, fp, lr}
	...
 6c8:	08004c00 	stmdaeq	r0, {sl, fp, lr}
 6cc:	08004c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, lr}
 6d0:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
 6d4:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
 6d8:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
 6dc:	08004dc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, fp, lr}
 6e0:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
 6e4:	08004de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, lr}
 6e8:	08004de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, lr}
 6ec:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
 6f0:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
 6f4:	08004e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, lr}
 6f8:	08004e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, lr}
 6fc:	08004f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, lr}
 700:	08004f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, lr}
 704:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
 708:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
 70c:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
 710:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
 714:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
 718:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
 71c:	080050d0 	stmdaeq	r0, {r4, r6, r7, ip, lr}
 720:	080050d0 	stmdaeq	r0, {r4, r6, r7, ip, lr}
 724:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
 728:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
 72c:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
 730:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
 734:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
 738:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
 73c:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
 740:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
 744:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
 748:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
 74c:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
 750:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
 754:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
 758:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
 75c:	08005280 	stmdaeq	r0, {r7, r9, ip, lr}
	...
 768:	08005280 	stmdaeq	r0, {r7, r9, ip, lr}
 76c:	0800529a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip, lr}
 770:	0800529c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, lr}
 774:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
 778:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
 77c:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
 780:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
 784:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
 788:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
 78c:	080054a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, lr}
 790:	080054a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, lr}
 794:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
 798:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
 79c:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
 7a0:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
 7a4:	0800553c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, lr}
 7a8:	0800553c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, lr}
 7ac:	08005558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, lr}
 7b0:	08005558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, lr}
 7b4:	0800568a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip, lr}
 7b8:	0800568c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, lr}
 7bc:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
 7c0:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
 7c4:	08005736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, lr}
 7c8:	08005738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, lr}
 7cc:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
 7d0:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
 7d4:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
 7d8:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
 7dc:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
 7e0:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
 7e4:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
 7e8:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
 7ec:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
 7f0:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
 7f4:	080058a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, lr}
 7f8:	080058a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, lr}
 7fc:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 800:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 804:	0800591e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp, ip, lr}
 808:	08005920 	stmdaeq	r0, {r5, r8, fp, ip, lr}
 80c:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 810:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 814:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
 818:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
 81c:	08005a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, lr}
 820:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
 824:	08005afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 828:	08005b00 	stmdaeq	r0, {r8, r9, fp, ip, lr}
 82c:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
 830:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
 834:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 838:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 83c:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
 840:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
 844:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
 848:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
 84c:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
 850:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
 854:	08005cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, lr}
	...
 860:	08005cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, lr}
 864:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
 868:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
 86c:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
 870:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
 874:	08005f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 878:	08005f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, lr}
 87c:	08005fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 880:	08005fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 884:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
 888:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
 88c:	080060fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp, lr}
 890:	080060fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp, lr}
 894:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
 898:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
 89c:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
 8a0:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
 8a4:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
 8a8:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
 8ac:	08006288 	stmdaeq	r0, {r3, r7, r9, sp, lr}
 8b0:	08006288 	stmdaeq	r0, {r3, r7, r9, sp, lr}
 8b4:	080062bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp, lr}
 8b8:	080062bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp, lr}
 8bc:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
 8c0:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
 8c4:	080063ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, lr}
 8c8:	080063ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, lr}
 8cc:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
 8d0:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
 8d4:	0800646c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp, lr}
 8d8:	0800646c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp, lr}
 8dc:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
 8e0:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
 8e4:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
 8e8:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
 8ec:	08006690 	stmdaeq	r0, {r4, r7, r9, sl, sp, lr}
 8f0:	08006690 	stmdaeq	r0, {r4, r7, r9, sl, sp, lr}
 8f4:	080066cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp, lr}
 8f8:	080066cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp, lr}
 8fc:	080066f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp, lr}
 900:	080066f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp, lr}
 904:	08006714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp, lr}
 908:	08006714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp, lr}
 90c:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
 910:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
 914:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
 918:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
 91c:	080068ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, sp, lr}
 920:	080068ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, sp, lr}
 924:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
 928:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
 92c:	080069d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, sp, lr}
 930:	080069d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, sp, lr}
 934:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}
	...
 940:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}
 944:	08006a6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp, sp, lr}
 948:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
 94c:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
 950:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
 954:	08006abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, sp, lr}
 958:	08006abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, sp, lr}
 95c:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
 960:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
 964:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
 968:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
 96c:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
 970:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
 974:	08006b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, sp, lr}
 978:	08006b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, sp, lr}
 97c:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
	...
 988:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
 98c:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
 990:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
 994:	08006c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, lr}
 998:	08006c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, lr}
 99c:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
 9a0:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
 9a4:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
 9a8:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
 9ac:	08006d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, lr}
 9b0:	08006d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, lr}
 9b4:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
 9b8:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
 9bc:	08006e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, lr}
 9c0:	08006e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, lr}
 9c4:	08006fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
 9c8:	08006fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
 9cc:	08007010 	stmdaeq	r0, {r4, ip, sp, lr}
	...
 9d8:	08007010 	stmdaeq	r0, {r4, ip, sp, lr}
 9dc:	08007084 	stmdaeq	r0, {r2, r7, ip, sp, lr}
 9e0:	08007084 	stmdaeq	r0, {r2, r7, ip, sp, lr}
 9e4:	08007298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp, lr}
 9e8:	08007298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp, lr}
 9ec:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
 9f0:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
 9f4:	080073d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, lr}
 9f8:	080073d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, lr}
 9fc:	08007422 	stmdaeq	r0, {r1, r5, sl, ip, sp, lr}
 a00:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
 a04:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
	...
 a10:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
 a14:	080074ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp, lr}
 a18:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
 a1c:	080074fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, ip, sp, lr}
 a20:	08007500 	stmdaeq	r0, {r8, sl, ip, sp, lr}
 a24:	08007582 	stmdaeq	r0, {r1, r7, r8, sl, ip, sp, lr}
 a28:	08007584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp, lr}
 a2c:	080075c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, lr}
 a30:	080075c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, lr}
 a34:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
 a38:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
 a3c:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
 a40:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
 a44:	0800768c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, sp, lr}
 a48:	0800768c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, sp, lr}
 a4c:	080076a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp, lr}
 a50:	080076a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp, lr}
 a54:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}
 a58:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}
 a5c:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 a60:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 a64:	080078ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp, lr}
 a68:	080078ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp, lr}
 a6c:	0800793c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp, lr}
 a70:	0800793c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp, lr}
 a74:	08007942 	stmdaeq	r0, {r1, r6, r8, fp, ip, sp, lr}
	...
 a80:	08007944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp, lr}
 a84:	08007b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, sp, lr}
 a88:	08007b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, sp, lr}
 a8c:	08007c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, ip, sp, lr}
 a90:	08007c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp, lr}
 a94:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
 a98:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
 a9c:	08007cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 aa0:	08007cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 aa4:	08007d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 aa8:	08007d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 aac:	08007d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, lr}
 ab0:	08007d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, lr}
 ab4:	08007d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, sp, lr}
 ab8:	08007d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, sp, lr}
 abc:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 ac0:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 ac4:	08007dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 ac8:	08007dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 acc:	08007df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 ad0:	08007df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 ad4:	08007e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp, lr}
 ad8:	08007e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp, lr}
 adc:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
 ae0:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
 ae4:	08007e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
 ae8:	08007e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
 aec:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 af0:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 af4:	08007f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp, lr}
 af8:	08007f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp, lr}
 afc:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 b00:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 b04:	08007fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, sp, lr}
 b08:	08007fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, sp, lr}
 b0c:	080080e0 	stmdaeq	r0, {r5, r6, r7, pc}
 b10:	080080e0 	stmdaeq	r0, {r5, r6, r7, pc}
 b14:	08008128 	stmdaeq	r0, {r3, r5, r8, pc}
 b18:	08008128 	stmdaeq	r0, {r3, r5, r8, pc}
 b1c:	080081a0 	stmdaeq	r0, {r5, r7, r8, pc}
 b20:	080081a0 	stmdaeq	r0, {r5, r7, r8, pc}
 b24:	0800821c 	stmdaeq	r0, {r2, r3, r4, r9, pc}
 b28:	0800821c 	stmdaeq	r0, {r2, r3, r4, r9, pc}
 b2c:	08008230 	stmdaeq	r0, {r4, r5, r9, pc}
 b30:	08008230 	stmdaeq	r0, {r4, r5, r9, pc}
 b34:	080082f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, pc}
 b38:	080082f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, pc}
 b3c:	08008360 	stmdaeq	r0, {r5, r6, r8, r9, pc}
 b40:	08008360 	stmdaeq	r0, {r5, r6, r8, r9, pc}
 b44:	08008488 	stmdaeq	r0, {r3, r7, sl, pc}
 b48:	08008488 	stmdaeq	r0, {r3, r7, sl, pc}
 b4c:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
 b50:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
 b54:	08008a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, pc}
 b58:	08008a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, pc}
 b5c:	08008b10 	stmdaeq	r0, {r4, r8, r9, fp, pc}
 b60:	08008b10 	stmdaeq	r0, {r4, r8, r9, fp, pc}
 b64:	08008cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, pc}
 b68:	08008cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, pc}
 b6c:	08008dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, pc}
 b70:	08008dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, pc}
 b74:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
 b78:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
 b7c:	08009032 	stmdaeq	r0, {r1, r4, r5, ip, pc}
 b80:	08009034 	stmdaeq	r0, {r2, r4, r5, ip, pc}
 b84:	080090aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, pc}
 b88:	080090ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, pc}
 b8c:	0800920e 	stmdaeq	r0, {r1, r2, r3, r9, ip, pc}
 b90:	08009210 	stmdaeq	r0, {r4, r9, ip, pc}
 b94:	08009266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip, pc}
 b98:	08009268 	stmdaeq	r0, {r3, r5, r6, r9, ip, pc}
 b9c:	08009308 	stmdaeq	r0, {r3, r8, r9, ip, pc}
 ba0:	08009308 	stmdaeq	r0, {r3, r8, r9, ip, pc}
 ba4:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
 ba8:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
 bac:	08009376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, pc}
 bb0:	08009378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, pc}
 bb4:	08009396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip, pc}
 bb8:	08009398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, pc}
 bbc:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
 bc0:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
 bc4:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
 bc8:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
 bcc:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
 bd0:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
 bd4:	0800987e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip, pc}
 bd8:	08009880 	stmdaeq	r0, {r7, fp, ip, pc}
 bdc:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
 be0:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
 be4:	08009898 	stmdaeq	r0, {r3, r4, r7, fp, ip, pc}
 be8:	08009898 	stmdaeq	r0, {r3, r4, r7, fp, ip, pc}
 bec:	080098ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, pc}
 bf0:	080098ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, pc}
 bf4:	08009910 	stmdaeq	r0, {r4, r8, fp, ip, pc}
 bf8:	08009910 	stmdaeq	r0, {r4, r8, fp, ip, pc}
 bfc:	080099e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, pc}
 c00:	080099e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, pc}
 c04:	08009b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, pc}
 c08:	08009b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, pc}
 c0c:	08009ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, pc}
 c10:	08009ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, pc}
 c14:	08009bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, pc}
	...
 c20:	08009bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, pc}
 c24:	08009bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
 c28:	08009bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
 c2c:	08009c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, ip, pc}
 c30:	08009c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, pc}
 c34:	08009ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, pc}
 c38:	08009ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, pc}
 c3c:	08009d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, pc}
 c40:	08009d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, pc}
 c44:	08009d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, ip, pc}
 c48:	08009d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, pc}
 c4c:	08009d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, pc}
 c50:	08009d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, pc}
 c54:	08009d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, pc}
 c58:	08009d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, pc}
 c5c:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
 c60:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
 c64:	08009e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp, ip, pc}
 c68:	08009e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, pc}
 c6c:	08009e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, pc}
 c70:	08009e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, pc}
 c74:	08009ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, ip, pc}
 c78:	08009ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, pc}
 c7c:	08009f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, pc}
 c80:	08009f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, pc}
 c84:	08009f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, pc}
 c88:	08009f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, pc}
 c8c:	0800a11c 	stmdaeq	r0, {r2, r3, r4, r8, sp, pc}
 c90:	0800a11c 	stmdaeq	r0, {r2, r3, r4, r8, sp, pc}
 c94:	0800a2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, pc}
 c98:	0800a2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, pc}
 c9c:	0800a4e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, pc}
 ca0:	0800a4e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, pc}
 ca4:	0800a54c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, pc}
 ca8:	0800a54c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, pc}
 cac:	0800a5a0 	stmdaeq	r0, {r5, r7, r8, sl, sp, pc}
 cb0:	0800a5a0 	stmdaeq	r0, {r5, r7, r8, sl, sp, pc}
 cb4:	0800a5c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, sp, pc}
 cb8:	0800a5c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, pc}
 cbc:	0800a654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, pc}
 cc0:	0800a654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, pc}
 cc4:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
 cc8:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
 ccc:	0800a74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp, pc}
 cd0:	0800a74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp, pc}
 cd4:	0800a8a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, pc}
 cd8:	0800a8a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, pc}
 cdc:	0800aa84 	stmdaeq	r0, {r2, r7, r9, fp, sp, pc}
 ce0:	0800aa84 	stmdaeq	r0, {r2, r7, r9, fp, sp, pc}
 ce4:	0800ac50 	stmdaeq	r0, {r4, r6, sl, fp, sp, pc}
 ce8:	0800ac50 	stmdaeq	r0, {r4, r6, sl, fp, sp, pc}
 cec:	0800acbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
 cf0:	0800acbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
 cf4:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
	...
 d00:	0800ad0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp, pc}
 d04:	0800ad4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, sp, pc}
 d08:	0800aeba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, sp, pc}
 d0c:	0800aeca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp, pc}
	...
 d18:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
 d1c:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
	...
 d28:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
 d2c:	0800b07e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, ip, sp, pc}
	...
 d38:	0800b080 	stmdaeq	r0, {r7, ip, sp, pc}
 d3c:	0800b12a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp, pc}
	...
 d48:	0800b12c 	stmdaeq	r0, {r2, r3, r5, r8, ip, sp, pc}
 d4c:	0800b45e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, ip, sp, pc}
	...
 d58:	0800b47c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp, pc}
 d5c:	0800b4a0 	stmdaeq	r0, {r5, r7, sl, ip, sp, pc}
 d60:	0800b6aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, ip, sp, pc}
 d64:	0800b6d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip, sp, pc}
	...
 d70:	0800b5d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp, pc}
 d74:	0800b5da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 d78:	0800b5fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 d7c:	0800b602 	stmdaeq	r0, {r1, r9, sl, ip, sp, pc}
	...
 d88:	0800b460 	stmdaeq	r0, {r5, r6, sl, ip, sp, pc}
 d8c:	0800b888 	stmdaeq	r0, {r3, r7, fp, ip, sp, pc}
	...
 d98:	0800b892 	stmdaeq	r0, {r1, r4, r7, fp, ip, sp, pc}
 d9c:	0800b894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, pc}
 da0:	0800b8a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, sp, pc}
 da4:	0800b8a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, ip, sp, pc}
	...
 db0:	0800bb9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
 db4:	0800bb9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
 db8:	0800bba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp, ip, sp, pc}
 dbc:	0800bbac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp, pc}
 dc0:	0800bbb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 dc4:	0800bbba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 dc8:	0800bbbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 dcc:	0800bbc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip, sp, pc}
	...
 dd8:	0800bb9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
 ddc:	0800bba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp, ip, sp, pc}
 de0:	0800bbac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp, pc}
 de4:	0800bbb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
	...
 df0:	0800bd5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, ip, sp, pc}
 df4:	0800bd5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, ip, sp, pc}
 df8:	0800bd64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, sp, pc}
 dfc:	0800bd68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, pc}
	...
 e08:	0800bdfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 e0c:	0800be00 	stmdaeq	r0, {r9, sl, fp, ip, sp, pc}
 e10:	0800be04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp, pc}
 e14:	0800be08 	stmdaeq	r0, {r3, r9, sl, fp, ip, sp, pc}
	...
 e20:	0800bf14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, sp, pc}
 e24:	0800bf18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp, pc}
 e28:	0800bf20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, sp, pc}
 e2c:	0800bf24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp, pc}
 e30:	0800bf28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, sp, pc}
 e34:	0800bf2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp, pc}
 e38:	0800bf32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 e3c:	0800bf36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 e40:	0800bf38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 e44:	0800bf3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, sp, pc}
	...
 e50:	0800bf62 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 e54:	0800bf64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 e58:	0800bf6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 e5c:	0800bf6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, pc}
	...
 e68:	0800c2dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, lr, pc}
 e6c:	0800c2de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, lr, pc}
 e70:	0800c2e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, lr, pc}
 e74:	0800c2e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, lr, pc}
	...
 e80:	0800b888 	stmdaeq	r0, {r3, r7, fp, ip, sp, pc}
 e84:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
	...
 e90:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
 e94:	0800c556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, lr, pc}
	...
 ea0:	0800c558 	stmdaeq	r0, {r3, r4, r6, r8, sl, lr, pc}
 ea4:	0800c564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr, pc}
	...
 eb0:	0800c564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr, pc}
 eb4:	0800c5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, lr, pc}
	...
 ec0:	0800c5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, lr, pc}
 ec4:	0800c5b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr, pc}
	...
 ed0:	0800c5b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr, pc}
 ed4:	0800c5c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, lr, pc}
	...
 ee0:	0800c62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, lr, pc}
 ee4:	0800c62e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, lr, pc}
 ee8:	0800c632 	stmdaeq	r0, {r1, r4, r5, r9, sl, lr, pc}
 eec:	0800c636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, lr, pc}
	...
 ef8:	0800c5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, lr, pc}
 efc:	0800c6e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr, pc}
	...
 f08:	0800c7b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, lr, pc}
 f0c:	0800c7b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, lr, pc}
 f10:	0800c7ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, lr, pc}
 f14:	0800c7be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, lr, pc}
 f18:	0800c7c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, lr, pc}
 f1c:	0800c7c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr, pc}
	...
 f28:	0800c6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, lr, pc}
 f2c:	0800c800 	stmdaeq	r0, {fp, lr, pc}
	...
 f38:	0800c800 	stmdaeq	r0, {fp, lr, pc}
 f3c:	0800c812 	stmdaeq	r0, {r1, r4, fp, lr, pc}
	...
 f48:	0800c814 	stmdaeq	r0, {r2, r4, fp, lr, pc}
 f4c:	0800c820 	stmdaeq	r0, {r5, fp, lr, pc}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000d4 	ldrdeq	r0, [r0], -r4
       4:	00ae0002 	adceq	r0, lr, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	2f006372 	svccs	0x00006372
      20:	2f727375 	svccs	0x00727375
      24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      28:	2f656475 	svccs	0x00656475
      2c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      30:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe94 <_estack+0xdffcfe94>
      34:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      38:	2f00656e 	svccs	0x0000656e
      3c:	2f727375 	svccs	0x00727375
      40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      44:	2f656475 	svccs	0x00656475
      48:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      4c:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
      50:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
      54:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      58:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      5c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      60:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      64:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
      68:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
      6c:	2f736569 	svccs	0x00736569
      70:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      74:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
      78:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
      7c:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
      80:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
      84:	00010063 	andeq	r0, r1, r3, rrx
      88:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
      8c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      90:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      94:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      98:	00020068 	andeq	r0, r2, r8, rrx
      9c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
      a0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
      a4:	00030068 	andeq	r0, r3, r8, rrx
      a8:	726f6300 	rsbvc	r6, pc, #0, 6
      ac:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
      b0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
      b4:	00000004 	andeq	r0, r0, r4
      b8:	08020500 	stmdaeq	r2, {r8, sl}
      bc:	0308000b 	movweq	r0, #32779	; 0x800b
      c0:	a03e011a 	eorsge	r0, lr, sl, lsl r1
      c4:	02004c34 	andeq	r4, r0, #52, 24	; 0x3400
      c8:	3c060204 	sfmcc	f0, 4, [r6], {4}
      cc:	01040200 	mrseq	r0, R12_usr
      d0:	024b063c 	subeq	r0, fp, #60, 12	; 0x3c00000
      d4:	01010003 	tsteq	r1, r3
      d8:	000001aa 	andeq	r0, r0, sl, lsr #3
      dc:	00f60002 	rscseq	r0, r6, r2
      e0:	01020000 	mrseq	r0, (UNDEF: 2)
      e4:	000d0efb 	strdeq	r0, [sp], -fp
      e8:	01010101 	tsteq	r1, r1, lsl #2
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	73010000 	movwvc	r0, #4096	; 0x1000
      f4:	2f006372 	svccs	0x00006372
      f8:	2f727375 	svccs	0x00727375
      fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     100:	2f656475 	svccs	0x00656475
     104:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     108:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; ffffff6c <_estack+0xdffcff6c>
     10c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     110:	2f00656e 	svccs	0x0000656e
     114:	2f727375 	svccs	0x00727375
     118:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     11c:	2f656475 	svccs	0x00656475
     120:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     124:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
     128:	552f636e 	strpl	r6, [pc, #-878]!	; fffffdc2 <_estack+0xdffcfdc2>
     12c:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     130:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
     134:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     138:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     13c:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
     140:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     144:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     148:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
     14c:	4f432f63 	svcmi	0x00432f63
     150:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     154:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     158:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     15c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     160:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     164:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     168:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     16c:	5349534d 	movtpl	r5, #37709	; 0x934d
     170:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     174:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     178:	74610000 	strbtvc	r0, [r1], #-0
     17c:	75746974 	ldrbvc	r6, [r4, #-2420]!	; 0x974
     180:	632e6564 	teqvs	lr, #100, 10	; 0x19000000
     184:	00000100 	andeq	r0, r0, r0, lsl #2
     188:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     18c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     190:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     194:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     198:	00000200 	andeq	r0, r0, r0, lsl #4
     19c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     1a0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     1a4:	00000300 	andeq	r0, r0, r0, lsl #6
     1a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1ac:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     1b0:	645f6939 	ldrbvs	r6, [pc], #-2361	; 1b8 <_Min_Heap_Size+0x1b8>
     1b4:	6f637369 	svcvs	0x00637369
     1b8:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     1bc:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
     1c0:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
     1c4:	00040068 	andeq	r0, r4, r8, rrx
     1c8:	726f6300 	rsbvc	r6, pc, #0, 6
     1cc:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     1d0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     1d4:	00000005 	andeq	r0, r0, r5
     1d8:	48020500 	stmdami	r2, {r8, sl}
     1dc:	0308000b 	movweq	r0, #32779	; 0x800b
     1e0:	2f420116 	svccs	0x00420116
     1e4:	2f2f2f2f 	svccs	0x002f2f2f
     1e8:	2f5b2f2f 	svccs	0x005b2f2f
     1ec:	023d4d2f 	eorseq	r4, sp, #3008	; 0xbc0
     1f0:	01010003 	tsteq	r1, r3
     1f4:	90020500 	andls	r0, r2, r0, lsl #10
     1f8:	0308000b 	movweq	r0, #32779	; 0x800b
     1fc:	674b0130 	smlaldxvs	r0, fp, r0, r1
     200:	75312f4b 	ldrvc	r2, [r1, #-3915]!	; 0xf4b
     204:	02005a78 	andeq	r5, r0, #120, 20	; 0x78000
     208:	003e0204 	eorseq	r0, lr, r4, lsl #4
     20c:	08020402 	stmdaeq	r2, {r1, sl}
     210:	0402009c 	streq	r0, [r2], #-156	; 0x9c
     214:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     218:	04020051 	streq	r0, [r2], #-81	; 0x51
     21c:	02003e02 	andeq	r3, r0, #2, 28
     220:	9c080204 	sfmls	f0, 4, [r8], {4}
     224:	01040200 	mrseq	r0, R12_usr
     228:	43063c06 	movwmi	r3, #27654	; 0x6c06
     22c:	02040200 	andeq	r0, r4, #0, 4
     230:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     234:	00560802 	subseq	r0, r6, r2, lsl #16
     238:	06010402 	streq	r0, [r1], -r2, lsl #8
     23c:	0240063c 	subeq	r0, r0, #60, 12	; 0x3c00000
     240:	01010005 	tsteq	r1, r5
     244:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
     248:	0308000c 	movweq	r0, #32780	; 0x800c
     24c:	590100d3 	stmdbpl	r1, {r0, r1, r4, r6, r7}
     250:	d8d72fad 	ldmle	r7, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}^
     254:	08c9085b 	stmiaeq	r9, {r0, r1, r3, r4, r6, fp}^
     258:	08ad08ad 	stmiaeq	sp!, {r0, r2, r3, r5, r7, fp}
     25c:	040200af 	streq	r0, [r2], #-175	; 0xaf
     260:	02005a02 	andeq	r5, r0, #8192	; 0x2000
     264:	c6080204 	strgt	r0, [r8], -r4, lsl #4
     268:	01040200 	mrseq	r0, R12_usr
     26c:	42063c06 	andmi	r3, r6, #1536	; 0x600
     270:	56025908 	strpl	r5, [r2], -r8, lsl #18
     274:	08300811 	ldmdaeq	r0!, {r0, r4, fp}
     278:	11560275 	cmpne	r6, r5, ror r2
     27c:	25022208 	strcs	r2, [r2, #-520]	; 0x208
     280:	00040214 	andeq	r0, r4, r4, lsl r2
     284:	00880101 	addeq	r0, r8, r1, lsl #2
     288:	00020000 	andeq	r0, r2, r0
     28c:	00000047 	andeq	r0, r0, r7, asr #32
     290:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     294:	0101000d 	tsteq	r1, sp
     298:	00000101 	andeq	r0, r0, r1, lsl #2
     29c:	00000100 	andeq	r0, r0, r0, lsl #2
     2a0:	636e6901 	cmnvs	lr, #16384	; 0x4000
     2a4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     2a8:	5f584554 	svcpl	0x00584554
     2ac:	5f46344d 	svcpl	0x0046344d
     2b0:	334d5453 	movtcc	r5, #54355	; 0xd453
     2b4:	00344632 	eorseq	r4, r4, r2, lsr r6
     2b8:	61747300 	cmnvs	r4, r0, lsl #6
     2bc:	70757472 	rsbsvc	r7, r5, r2, ror r4
     2c0:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     2c4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     2c8:	345f3932 	ldrbcc	r3, [pc], #-2354	; 2d0 <_Min_Heap_Size+0x2d0>
     2cc:	78783933 	ldmdavc	r8!, {r0, r1, r4, r5, r8, fp, ip, sp}^
     2d0:	0100732e 	tsteq	r0, lr, lsr #6
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	10a00205 	adcne	r0, r0, r5, lsl #4
     2dc:	ca030800 	bgt	c22e4 <_Min_Stack_Size+0xc1ee4>
     2e0:	23210100 	teqcs	r1, #0, 2
     2e4:	23212121 	teqcs	r1, #1073741832	; 0x40000008
     2e8:	21212121 	teqcs	r1, r1, lsr #2
     2ec:	21232121 	teqcs	r3, r1, lsr #2
     2f0:	23212131 	teqcs	r1, #1073741836	; 0x4000000c
     2f4:	65032f30 	strvs	r2, [r3, #-3888]	; 0xf30
     2f8:	322f3420 	eorcc	r3, pc, #32, 8	; 0x20000000
     2fc:	00020236 	andeq	r0, r2, r6, lsr r2
     300:	05000101 	streq	r0, [r0, #-257]	; 0x101
     304:	0010e402 	andseq	lr, r0, r2, lsl #8
     308:	00f60308 	rscseq	r0, r6, r8, lsl #6
     30c:	00010201 	andeq	r0, r1, r1, lsl #4
     310:	01ad0101 			; <UNDEFINED> instruction: 0x01ad0101
     314:	00020000 	andeq	r0, r2, r0
     318:	00000127 	andeq	r0, r0, r7, lsr #2
     31c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     320:	0101000d 	tsteq	r1, sp
     324:	00000101 	andeq	r0, r0, r1, lsl #2
     328:	00000100 	andeq	r0, r0, r0, lsl #2
     32c:	636e6901 	cmnvs	lr, #16384	; 0x4000
     330:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     334:	5f584554 	svcpl	0x00584554
     338:	5f46344d 	svcpl	0x0046344d
     33c:	334d5453 	movtcc	r5, #54355	; 0xd453
     340:	2f344632 	svccs	0x00344632
     344:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     348:	00707574 	rsbseq	r7, r0, r4, ror r5
     34c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     350:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     354:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     358:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     35c:	2f62696c 	svccs	0x0062696c
     360:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     364:	00656e69 	rsbeq	r6, r5, r9, ror #28
     368:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     36c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     370:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     374:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     378:	0062696c 	rsbeq	r6, r2, ip, ror #18
     37c:	2f636e69 	svccs	0x00636e69
     380:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     384:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 278 <_Min_Heap_Size+0x278>
     388:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     38c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     390:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 280 <_Min_Heap_Size+0x280>
     394:	61726269 	cmnvs	r2, r9, ror #4
     398:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     39c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     3a0:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     3a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     3a8:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
     3ac:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
     3b0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     3b4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     3b8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     3bc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     3c0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     3c4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     3c8:	2f736569 	svccs	0x00736569
     3cc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     3d0:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
     3d4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     3d8:	2f54532f 	svccs	0x0054532f
     3dc:	334d5453 	movtcc	r5, #54355	; 0xd453
     3e0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     3e4:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
     3e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     3ec:	73000065 	movwvc	r0, #101	; 0x65
     3f0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     3f4:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xf6d
     3f8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     3fc:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     400:	00010063 	andeq	r0, r1, r3, rrx
     404:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     408:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     40c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     410:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     414:	00020068 	andeq	r0, r2, r8, rrx
     418:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     41c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     420:	00030068 	andeq	r0, r3, r8, rrx
     424:	726f6300 	rsbvc	r6, pc, #0, 6
     428:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     42c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     430:	73000004 	movwvc	r0, #4
     434:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     438:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     43c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     440:	00000000 	andeq	r0, r0, r0
     444:	10e80205 	rscne	r0, r8, r5, lsl #4
     448:	d0030800 	andle	r0, r3, r0, lsl #16
     44c:	86310101 	ldrthi	r0, [r1], -r1, lsl #2
     450:	3f853f69 	svccc	0x00853f69
     454:	4c344469 	cfldrsmi	mvf4, [r4], #-420	; 0xfffffe5c
     458:	01000702 	tsteq	r0, r2, lsl #14
     45c:	02050001 	andeq	r0, r5, #1
     460:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
     464:	01029d03 	tsteq	r2, r3, lsl #26
     468:	775aa13d 	smmlarvc	sl, sp, r1, sl
     46c:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
     470:	db3f5a67 	blle	fd6e14 <_Min_Stack_Size+0xfd6a14>
     474:	226783cb 	rsbcs	r8, r7, #738197507	; 0x2c000003
     478:	6792243d 			; <UNDEFINED> instruction: 0x6792243d
     47c:	01001002 	tsteq	r0, r2
     480:	02050001 	andeq	r0, r5, #1
     484:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
     488:	0102d503 	tsteq	r2, r3, lsl #10
     48c:	02004d40 	andeq	r4, r0, #64, 26	; 0x1000
     490:	006b0104 	rsbeq	r0, fp, r4, lsl #2
     494:	59010402 	stmdbpl	r1, {r1, sl}
     498:	01040200 	mrseq	r0, R12_usr
     49c:	4068763d 	rsbmi	r7, r8, sp, lsr r6
     4a0:	69673f31 	stmdbvs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, sp}^
     4a4:	4069694d 	rsbmi	r6, r9, sp, asr #18
     4a8:	04020069 	streq	r0, [r2], #-105	; 0x69
     4ac:	06200601 	strteq	r0, [r0], -r1, lsl #12
     4b0:	69674d6b 	stmdbvs	r7!, {r0, r1, r3, r5, r6, r8, sl, fp, lr}^
     4b4:	01040200 	mrseq	r0, R12_usr
     4b8:	03062006 	movweq	r2, #24582	; 0x6006
     4bc:	0d026609 	stceq	6, cr6, [r2, #-36]	; 0xffffffdc
     4c0:	f8010100 			; <UNDEFINED> instruction: 0xf8010100
     4c4:	02000001 	andeq	r0, r0, #1
     4c8:	00018600 	andeq	r8, r1, r0, lsl #12
     4cc:	fb010200 	blx	40cd6 <_Min_Stack_Size+0x408d6>
     4d0:	01000d0e 	tsteq	r0, lr, lsl #26
     4d4:	00010101 	andeq	r0, r1, r1, lsl #2
     4d8:	00010000 	andeq	r0, r1, r0
     4dc:	6e690100 	powvse	f0, f1, f0
     4e0:	4f432f63 	svcmi	0x00432f63
     4e4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     4e8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     4ec:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     4f0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     4f4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     4f8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     4fc:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     500:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     504:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     508:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     50c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     510:	445f6870 	ldrbmi	r6, [pc], #-2160	; 518 <_Min_Stack_Size+0x118>
     514:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     518:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     51c:	752f0063 	strvc	r0, [pc, #-99]!	; 4c1 <_Min_Stack_Size+0xc1>
     520:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     524:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     528:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     52c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     530:	616d2f62 	cmnvs	sp, r2, ror #30
     534:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     538:	752f0065 	strvc	r0, [pc, #-101]!	; 4db <_Min_Stack_Size+0xdb>
     53c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     540:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     544:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     548:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     54c:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
     550:	4f432f63 	svcmi	0x00432f63
     554:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     558:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     55c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     560:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     564:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     568:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     56c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     570:	5349534d 	movtpl	r5, #37709	; 0x934d
     574:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     578:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     57c:	636e6900 	cmnvs	lr, #0, 18
     580:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     584:	5f584554 	svcpl	0x00584554
     588:	5f46344d 	svcpl	0x0046344d
     58c:	334d5453 	movtcc	r5, #54355	; 0xd453
     590:	2f344632 	svccs	0x00344632
     594:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     598:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     59c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     5a0:	2f534953 	svccs	0x00534953
     5a4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5a8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     5ac:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     5b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5b4:	2f787834 	svccs	0x00787834
     5b8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     5bc:	00656475 	rsbeq	r6, r5, r5, ror r4
     5c0:	2f636e69 	svccs	0x00636e69
     5c4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     5c8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4bc <_Min_Stack_Size+0xbc>
     5cc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     5d0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     5d4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4c4 <_Min_Stack_Size+0xc4>
     5d8:	61726269 	cmnvs	r2, r9, ror #4
     5dc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     5e0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     5e4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     5e8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     5ec:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     5f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     5f4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     5f8:	2f726576 	svccs	0x00726576
     5fc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     600:	73696d00 	cmnvc	r9, #0, 26
     604:	00632e63 	rsbeq	r2, r3, r3, ror #28
     608:	5f000001 	svcpl	0x00000001
     60c:	61666564 	cmnvs	r6, r4, ror #10
     610:	5f746c75 	svcpl	0x00746c75
     614:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     618:	00682e73 	rsbeq	r2, r8, r3, ror lr
     61c:	73000002 	movwvc	r0, #2
     620:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     624:	00682e74 	rsbeq	r2, r8, r4, ror lr
     628:	63000003 	movwvs	r0, #3
     62c:	5f65726f 	svcpl	0x0065726f
     630:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     634:	00040068 	andeq	r0, r4, r8, rrx
     638:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     63c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     640:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     644:	00000500 	andeq	r0, r0, r0, lsl #10
     648:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     64c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     650:	00000000 	andeq	r0, r0, r0
     654:	133c0205 	teqne	ip, #1342177280	; 0x50000000
     658:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     65c:	754f0100 	strbvc	r0, [pc, #-256]	; 564 <_Min_Stack_Size+0x164>
     660:	01000702 	tsteq	r0, r2, lsl #14
     664:	02050001 	andeq	r0, r5, #1
     668:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
     66c:	01018803 	tsteq	r1, r3, lsl #16
     670:	754d6d4b 	strbvc	r6, [sp, #-3403]	; 0xd4b
     674:	84755a4b 	ldrbthi	r5, [r5], #-2635	; 0xa4b
     678:	7359773e 	cmpvc	r9, #16252928	; 0xf80000
     67c:	3f735942 	svccc	0x00735942
     680:	01000902 	tsteq	r0, r2, lsl #18
     684:	02050001 	andeq	r0, r5, #1
     688:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
     68c:	0101b403 	tsteq	r1, r3, lsl #8
     690:	0802915d 	stmdaeq	r2, {r0, r2, r3, r4, r6, r8, ip, pc}
     694:	00010100 	andeq	r0, r1, r0, lsl #2
     698:	14480205 	strbne	r0, [r8], #-517	; 0x205
     69c:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
     6a0:	3e790101 	rpwcce	f0, f1, f1
     6a4:	08027678 	stmdaeq	r2, {r3, r4, r5, r6, r9, sl, ip, sp, lr}
     6a8:	00010100 	andeq	r0, r1, r0, lsl #2
     6ac:	14880205 	strne	r0, [r8], #517	; 0x205
     6b0:	df030800 	svcle	0x00030800
     6b4:	3e4d0101 	dvfcce	f0, f5, f1
     6b8:	08026878 	stmdaeq	r2, {r3, r4, r5, r6, fp, sp, lr}
     6bc:	f8010100 			; <UNDEFINED> instruction: 0xf8010100
     6c0:	02000002 	andeq	r0, r0, #2
     6c4:	00019a00 	andeq	r9, r1, r0, lsl #20
     6c8:	fb010200 	blx	40ed2 <_Min_Stack_Size+0x40ad2>
     6cc:	01000d0e 	tsteq	r0, lr, lsl #26
     6d0:	00010101 	andeq	r0, r1, r1, lsl #2
     6d4:	00010000 	andeq	r0, r1, r0
     6d8:	6e690100 	powvse	f0, f1, f0
     6dc:	4f432f63 	svcmi	0x00432f63
     6e0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     6e4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     6e8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     6ec:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     6f0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     6f4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     6f8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     6fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     700:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     704:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     708:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     70c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 714 <_Min_Stack_Size+0x314>
     710:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     714:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     718:	752f0063 	strvc	r0, [pc, #-99]!	; 6bd <_Min_Stack_Size+0x2bd>
     71c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     720:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     724:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     728:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     72c:	616d2f62 	cmnvs	sp, r2, ror #30
     730:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     734:	752f0065 	strvc	r0, [pc, #-101]!	; 6d7 <_Min_Stack_Size+0x2d7>
     738:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     73c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     740:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     744:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     748:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
     74c:	4f432f63 	svcmi	0x00432f63
     750:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     754:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     758:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     75c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     760:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     764:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     768:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     76c:	5349534d 	movtpl	r5, #37709	; 0x934d
     770:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     774:	2f656369 	svccs	0x00656369
     778:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     77c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     780:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     784:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     788:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     78c:	636e6900 	cmnvs	lr, #0, 18
     790:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     794:	5f584554 	svcpl	0x00584554
     798:	5f46344d 	svcpl	0x0046344d
     79c:	334d5453 	movtcc	r5, #54355	; 0xd453
     7a0:	2f344632 	svccs	0x00344632
     7a4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     7a8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     7ac:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     7b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     7b4:	5f787834 	svcpl	0x00787834
     7b8:	50647453 	rsbpl	r7, r4, r3, asr r4
     7bc:	70697265 	rsbvc	r7, r9, r5, ror #4
     7c0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     7c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     7c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     7cc:	636e6900 	cmnvs	lr, #0, 18
     7d0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     7d4:	5f584554 	svcpl	0x00584554
     7d8:	5f46344d 	svcpl	0x0046344d
     7dc:	334d5453 	movtcc	r5, #54355	; 0xd453
     7e0:	2f344632 	svccs	0x00344632
     7e4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     7e8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     7ec:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     7f0:	2f534953 	svccs	0x00534953
     7f4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     7f8:	00656475 	rsbeq	r6, r5, r5, ror r4
     7fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     800:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     804:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     808:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     80c:	00010063 	andeq	r0, r1, r3, rrx
     810:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     814:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     818:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     81c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     820:	00020068 	andeq	r0, r2, r8, rrx
     824:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     828:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     82c:	00030068 	andeq	r0, r3, r8, rrx
     830:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     834:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     838:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     83c:	00000400 	andeq	r0, r0, r0, lsl #8
     840:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     844:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     848:	70675f78 	rsbvc	r5, r7, r8, ror pc
     84c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     850:	00000500 	andeq	r0, r0, r0, lsl #10
     854:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     858:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     85c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     860:	00000000 	andeq	r0, r0, r0
     864:	14c00205 	strbne	r0, [r0], #517	; 0x205
     868:	ff030800 			; <UNDEFINED> instruction: 0xff030800
     86c:	4c4e0100 	stfmie	f0, [lr], {-0}
     870:	4b4c5a4b 	blmi	13171a4 <_Min_Stack_Size+0x1316da4>
     874:	5a4b4c5a 	bpl	12d39e4 <_Min_Stack_Size+0x12d35e4>
     878:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
     87c:	4b4c5a4b 	blmi	13171b0 <_Min_Stack_Size+0x1316db0>
     880:	5a4b4c5a 	bpl	12d39f0 <_Min_Stack_Size+0x12d35f0>
     884:	4c5b4b4c 	mrrcmi	11, 4, r4, fp, cr12
     888:	594c6859 	stmdbpl	ip, {r0, r3, r4, r6, fp, sp, lr}^
     88c:	5b594c6a 	blpl	1653a3c <_Min_Stack_Size+0x165363c>
     890:	01001a02 	tsteq	r0, r2, lsl #20
     894:	02050001 	andeq	r0, r5, #1
     898:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     89c:	0101ca03 	tsteq	r1, r3, lsl #20
     8a0:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
     8a4:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
     8a8:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
     8ac:	4a060104 	bmi	180cc4 <_Min_Stack_Size+0x1808c4>
     8b0:	c0ad5006 	adcgt	r5, sp, r6
     8b4:	03bbccad 			; <UNDEFINED> instruction: 0x03bbccad
     8b8:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
     8bc:	3c060104 	stfccs	f0, [r6], {4}
     8c0:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
     8c4:	01000502 	tsteq	r0, r2, lsl #10
     8c8:	02050001 	andeq	r0, r5, #1
     8cc:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
     8d0:	0101fe03 	tsteq	r1, r3, lsl #28
     8d4:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
     8d8:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
     8dc:	00010100 	andeq	r0, r1, r0, lsl #2
     8e0:	17740205 	ldrbne	r0, [r4, -r5, lsl #4]!
     8e4:	95030800 	strls	r0, [r3, #-2048]	; 0x800
     8e8:	42670102 	rsbmi	r0, r7, #-2147483648	; 0x80000000
     8ec:	3e3e3e4c 	cdpcc	14, 3, cr3, cr14, cr12, {2}
     8f0:	05023d3e 	streq	r3, [r2, #-3390]	; 0xd3e
     8f4:	00010100 	andeq	r0, r1, r0, lsl #2
     8f8:	17b80205 	ldrne	r0, [r8, r5, lsl #4]!
     8fc:	c3030800 	movwgt	r0, #14336	; 0x3800
     900:	34670102 	strbtcc	r0, [r7], #-258	; 0x102
     904:	21304068 	teqcs	r0, r8, rrx
     908:	01000602 	tsteq	r0, r2, lsl #12
     90c:	02050001 	andeq	r0, r5, #1
     910:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
     914:	0102dd03 	tsteq	r2, r3, lsl #26
     918:	06023d4e 	streq	r3, [r2], -lr, asr #26
     91c:	00010100 	andeq	r0, r1, r0, lsl #2
     920:	18080205 	stmdane	r8, {r0, r2, r9}
     924:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     928:	34670102 	strbtcc	r0, [r7], #-258	; 0x102
     92c:	21304068 	teqcs	r0, r8, rrx
     930:	01000602 	tsteq	r0, r2, lsl #12
     934:	02050001 	andeq	r0, r5, #1
     938:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
     93c:	01038803 	tsteq	r3, r3, lsl #16
     940:	06023d4e 	streq	r3, [r2], -lr, asr #26
     944:	00010100 	andeq	r0, r1, r0, lsl #2
     948:	18580205 	ldmdane	r8, {r0, r2, r9}^
     94c:	9c030800 	stcls	8, cr0, [r3], {-0}
     950:	3d6b0103 	stfcce	f0, [fp, #-12]!
     954:	01000502 	tsteq	r0, r2, lsl #10
     958:	02050001 	andeq	r0, r5, #1
     95c:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
     960:	0103b103 	tsteq	r3, r3, lsl #2
     964:	05023d6b 	streq	r3, [r2, #-3435]	; 0xd6b
     968:	00010100 	andeq	r0, r1, r0, lsl #2
     96c:	18900205 	ldmne	r0, {r0, r2, r9}
     970:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
     974:	3e880103 	rmfcce	f0, f0, f3
     978:	05023e4e 	streq	r3, [r2, #-3662]	; 0xe4e
     97c:	00010100 	andeq	r0, r1, r0, lsl #2
     980:	18c00205 	stmiane	r0, {r0, r2, r9}^
     984:	e0030800 	and	r0, r3, r0, lsl #16
     988:	3d6a0103 	stfcce	f0, [sl, #-12]!
     98c:	01000502 	tsteq	r0, r2, lsl #10
     990:	02050001 	andeq	r0, r5, #1
     994:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
     998:	0103f003 	tsteq	r3, r3
     99c:	0502676a 	streq	r6, [r2, #-1898]	; 0x76a
     9a0:	00010100 	andeq	r0, r1, r0, lsl #2
     9a4:	19000205 	stmdbne	r0, {r0, r2, r9}
     9a8:	c3030800 	movwgt	r0, #14336	; 0x3800
     9ac:	2f830104 	svccs	0x00830104
     9b0:	83088335 	movwhi	r8, #33589	; 0x8335
     9b4:	050291ad 	streq	r9, [r2, #-429]	; 0x1ad
     9b8:	f4010100 	vst4.8	{d0,d2,d4,d6}, [r1], r0
     9bc:	02000005 	andeq	r0, r0, #5
     9c0:	00019800 	andeq	r9, r1, r0, lsl #16
     9c4:	fb010200 	blx	411ce <_Min_Stack_Size+0x40dce>
     9c8:	01000d0e 	tsteq	r0, lr, lsl #26
     9cc:	00010101 	andeq	r0, r1, r1, lsl #2
     9d0:	00010000 	andeq	r0, r1, r0
     9d4:	6e690100 	powvse	f0, f1, f0
     9d8:	4f432f63 	svcmi	0x00432f63
     9dc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     9e0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     9e4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     9e8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     9ec:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     9f0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     9f4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     9f8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     9fc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     a00:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     a04:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a08:	445f6870 	ldrbmi	r6, [pc], #-2160	; a10 <_Min_Stack_Size+0x610>
     a0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     a10:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     a14:	752f0063 	strvc	r0, [pc, #-99]!	; 9b9 <_Min_Stack_Size+0x5b9>
     a18:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     a1c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     a20:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     a24:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     a28:	616d2f62 	cmnvs	sp, r2, ror #30
     a2c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     a30:	752f0065 	strvc	r0, [pc, #-101]!	; 9d3 <_Min_Stack_Size+0x5d3>
     a34:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     a38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     a3c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     a40:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     a44:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
     a48:	4f432f63 	svcmi	0x00432f63
     a4c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     a50:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     a54:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     a58:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a5c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     a60:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     a64:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     a68:	5349534d 	movtpl	r5, #37709	; 0x934d
     a6c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     a70:	2f656369 	svccs	0x00656369
     a74:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     a78:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a7c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     a80:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     a84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     a88:	636e6900 	cmnvs	lr, #0, 18
     a8c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     a90:	5f584554 	svcpl	0x00584554
     a94:	5f46344d 	svcpl	0x0046344d
     a98:	334d5453 	movtcc	r5, #54355	; 0xd453
     a9c:	2f344632 	svccs	0x00344632
     aa0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     aa4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     aa8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     aac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ab0:	5f787834 	svcpl	0x00787834
     ab4:	50647453 	rsbpl	r7, r4, r3, asr r4
     ab8:	70697265 	rsbvc	r7, r9, r5, ror #4
     abc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     ac0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     ac4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ac8:	636e6900 	cmnvs	lr, #0, 18
     acc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     ad0:	5f584554 	svcpl	0x00584554
     ad4:	5f46344d 	svcpl	0x0046344d
     ad8:	334d5453 	movtcc	r5, #54355	; 0xd453
     adc:	2f344632 	svccs	0x00344632
     ae0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     ae4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     ae8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     aec:	2f534953 	svccs	0x00534953
     af0:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     af4:	00656475 	rsbeq	r6, r5, r5, ror r4
     af8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     afc:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     b00:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     b04:	632e6363 	teqvs	lr, #-1946157055	; 0x8c000001
     b08:	00000100 	andeq	r0, r0, r0, lsl #2
     b0c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     b10:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     b14:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     b18:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     b1c:	00000200 	andeq	r0, r0, r0, lsl #4
     b20:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     b24:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     b28:	00000300 	andeq	r0, r0, r0, lsl #6
     b2c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b30:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     b34:	00682e78 	rsbeq	r2, r8, r8, ror lr
     b38:	73000004 	movwvc	r0, #4
     b3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b40:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     b44:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     b48:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     b4c:	6f630000 	svcvs	0x00630000
     b50:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     b54:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     b58:	00000600 	andeq	r0, r0, r0, lsl #12
     b5c:	02050000 	andeq	r0, r5, #0
     b60:	0800198c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip}
     b64:	0101d503 	tsteq	r1, r3, lsl #10
     b68:	853f6930 	ldrhi	r6, [pc, #-2352]!	; 240 <_Min_Heap_Size+0x240>
     b6c:	694d4d3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, sl, fp, lr}^
     b70:	0d024c3f 	stceq	12, cr4, [r2, #-252]	; 0xffffff04
     b74:	00010100 	andeq	r0, r1, r0, lsl #2
     b78:	19fc0205 	ldmibne	ip!, {r0, r2, r9}^
     b7c:	88030800 	stmdahi	r3, {fp}
     b80:	3f5d0102 	svccc	0x005d0102
     b84:	0007023d 	andeq	r0, r7, sp, lsr r2
     b88:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b8c:	001a2002 	andseq	r2, sl, r2
     b90:	02a00308 	adceq	r0, r0, #8, 6	; 0x20000000
     b94:	2f2f3d01 	svccs	0x002f3d01
     b98:	01040200 	mrseq	r0, R12_usr
     b9c:	04020032 	streq	r0, [r2], #-50	; 0x32
     ba0:	02005901 	andeq	r5, r0, #16384	; 0x4000
     ba4:	763d0104 	ldrtvc	r0, [sp], -r4, lsl #2
     ba8:	21304068 	teqcs	r0, r8, rrx
     bac:	01000402 	tsteq	r0, r2, lsl #8
     bb0:	02050001 	andeq	r0, r5, #1
     bb4:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     bb8:	0102bf03 	tsteq	r2, r3, lsl #30
     bbc:	4d3f3259 	lfmmi	f3, 4, [pc, #-356]!	; a60 <_Min_Stack_Size+0x660>
     bc0:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
     bc4:	00010100 	andeq	r0, r1, r0, lsl #2
     bc8:	1aac0205 	bne	feb013e4 <_estack+0xdead13e4>
     bcc:	e3030800 	movw	r0, #14336	; 0x3800
     bd0:	3d5c0102 	ldfcce	f0, [ip, #-8]
     bd4:	01000802 	tsteq	r0, r2, lsl #16
     bd8:	02050001 	andeq	r0, r5, #1
     bdc:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
     be0:	0102fc03 	tsteq	r2, r3, lsl #24
     be4:	033f3f5e 	teqeq	pc, #376	; 0x178
     be8:	7903580b 	stmdbvc	r3, {r0, r1, r3, fp, ip, lr}
     bec:	3d233d20 	stccc	13, cr3, [r3, #-128]!	; 0xffffff80
     bf0:	00070224 	andeq	r0, r7, r4, lsr #4
     bf4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bf8:	001b0c02 	andseq	r0, fp, r2, lsl #24
     bfc:	03a40308 			; <UNDEFINED> instruction: 0x03a40308
     c00:	023d5c01 	eorseq	r5, sp, #256	; 0x100
     c04:	01010008 	tsteq	r1, r8
     c08:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
     c0c:	0308001b 	movweq	r0, #32795	; 0x801b
     c10:	7c0103cf 	stcvc	3, cr0, [r1], {207}	; 0xcf
     c14:	02302dbb 	eorseq	r2, r0, #11968	; 0x2ec0
     c18:	01010007 	tsteq	r1, r7
     c1c:	68020500 	stmdavs	r2, {r8, sl}
     c20:	0308001b 	movweq	r0, #32795	; 0x801b
     c24:	5b0103e6 	blpl	41bc4 <_Min_Stack_Size+0x417c4>
     c28:	0008023d 	andeq	r0, r8, sp, lsr r2
     c2c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c30:	001b8802 	andseq	r8, fp, r2, lsl #16
     c34:	04a80308 	strteq	r0, [r8], #776	; 0x308
     c38:	02ad6c01 	adceq	r6, sp, #256	; 0x100
     c3c:	01010007 	tsteq	r1, r7
     c40:	b8020500 	stmdalt	r2, {r8, sl}
     c44:	0308001b 	movweq	r0, #32795	; 0x801b
     c48:	5b0104b9 	blpl	41f34 <_Min_Stack_Size+0x41b34>
     c4c:	0008023d 	andeq	r0, r8, sp, lsr r2
     c50:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c54:	001bd802 	andseq	sp, fp, r2, lsl #16
     c58:	04d60308 	ldrbeq	r0, [r6], #776	; 0x308
     c5c:	02ad6b01 	adceq	r6, sp, #1024	; 0x400
     c60:	01010007 	tsteq	r1, r7
     c64:	08020500 	stmdaeq	r2, {r8, sl}
     c68:	0308001c 	movweq	r0, #32796	; 0x801c
     c6c:	5b0104e8 	blpl	42014 <_Min_Stack_Size+0x41c14>
     c70:	0008023d 	andeq	r0, r8, sp, lsr r2
     c74:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c78:	001c2802 	andseq	r2, ip, r2, lsl #16
     c7c:	04fa0308 	ldrbteq	r0, [sl], #776	; 0x308
     c80:	023d5b01 	eorseq	r5, sp, #1024	; 0x400
     c84:	01010008 	tsteq	r1, r8
     c88:	48020500 	stmdami	r2, {r8, sl}
     c8c:	0308001c 	movweq	r0, #32796	; 0x801c
     c90:	59010593 	stmdbpl	r1, {r0, r1, r4, r7, r8, sl}
     c94:	694d3f34 	stmdbvs	sp, {r2, r4, r5, r8, r9, sl, fp, ip, sp}^
     c98:	0007023d 	andeq	r0, r7, sp, lsr r2
     c9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ca0:	001c8402 	andseq	r8, ip, r2, lsl #8
     ca4:	05b90308 	ldreq	r0, [r9, #776]!	; 0x308
     ca8:	3f345901 	svccc	0x00345901
     cac:	023d694d 	eorseq	r6, sp, #1261568	; 0x134000
     cb0:	01010007 	tsteq	r1, r7
     cb4:	c0020500 	andgt	r0, r2, r0, lsl #10
     cb8:	0308001c 	movweq	r0, #32796	; 0x801c
     cbc:	4b0106df 	blmi	42840 <_Min_Stack_Size+0x42440>
     cc0:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     cc4:	0008023d 	andeq	r0, r8, sp, lsr r2
     cc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ccc:	001cf802 	andseq	pc, ip, r2, lsl #16
     cd0:	06fb0308 	ldrbteq	r0, [fp], r8, lsl #6
     cd4:	02672f01 	rsbeq	r2, r7, #1, 30
     cd8:	01010008 	tsteq	r1, r8
     cdc:	18020500 	stmdane	r2, {r8, sl}
     ce0:	0308001d 	movweq	r0, #32797	; 0x801d
     ce4:	4b010794 	blmi	42b3c <_Min_Stack_Size+0x4273c>
     ce8:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
     cec:	0008023d 	andeq	r0, r8, sp, lsr r2
     cf0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cf4:	001d5002 	andseq	r5, sp, r2
     cf8:	07b40308 	ldreq	r0, [r4, r8, lsl #6]!
     cfc:	3f334b01 	svccc	0x00334b01
     d00:	023d4d4d 	eorseq	r4, sp, #4928	; 0x1340
     d04:	01010008 	tsteq	r1, r8
     d08:	88020500 	stmdahi	r2, {r8, sl}
     d0c:	0308001d 	movweq	r0, #32797	; 0x801d
     d10:	4b0107d3 	blmi	42c64 <_Min_Stack_Size+0x42864>
     d14:	5b4d3f33 	blpl	13509e8 <_Min_Stack_Size+0x13505e8>
     d18:	0007023d 	andeq	r0, r7, sp, lsr r2
     d1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d20:	001dc002 	andseq	ip, sp, r2
     d24:	08870308 	stmeq	r7, {r3, r8, r9}
     d28:	5abd4b01 	bpl	fef53934 <_estack+0xdef23934>
     d2c:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
     d30:	3f5a6726 	svccc	0x005a6726
     d34:	6783cbdb 			; <UNDEFINED> instruction: 0x6783cbdb
     d38:	59253d22 	stmdbpl	r5!, {r1, r5, r8, sl, fp, ip, sp}
     d3c:	5969683d 	stmdbpl	r9!, {r0, r2, r3, r4, r5, fp, sp, lr}^
     d40:	5969683d 	stmdbpl	r9!, {r0, r2, r3, r4, r5, fp, sp, lr}^
     d44:	0267683d 	rsbeq	r6, r7, #3997696	; 0x3d0000
     d48:	0101000e 	tsteq	r1, lr
     d4c:	14020500 	strne	r0, [r2], #-1280	; 0x500
     d50:	0308001f 	movweq	r0, #32799	; 0x801f
     d54:	4b010984 	blmi	4336c <_Min_Stack_Size+0x42f6c>
     d58:	4d3f6833 	ldcmi	8, cr6, [pc, #-204]!	; c94 <_Min_Stack_Size+0x894>
     d5c:	02834085 	addeq	r4, r3, #133	; 0x85
     d60:	01010008 	tsteq	r1, r8
     d64:	70020500 	andvc	r0, r2, r0, lsl #10
     d68:	0308001f 	movweq	r0, #32799	; 0x801f
     d6c:	5c0109a4 	stcpl	9, cr0, [r1], {164}	; 0xa4
     d70:	0008023d 	andeq	r0, r8, sp, lsr r2
     d74:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d78:	001f9002 	andseq	r9, pc, r2
     d7c:	09b50308 	ldmibeq	r5!, {r3, r8, r9}
     d80:	023d5b01 	eorseq	r5, sp, #1024	; 0x400
     d84:	01010008 	tsteq	r1, r8
     d88:	b0020500 	andlt	r0, r2, r0, lsl #10
     d8c:	0308001f 	movweq	r0, #32799	; 0x801f
     d90:	4e0109c6 	cdpmi	9, 0, cr0, cr1, cr6, {6}
     d94:	0007023d 	andeq	r0, r7, sp, lsr r2
     d98:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d9c:	001fcc02 	andseq	ip, pc, r2, lsl #24
     da0:	09db0308 	ldmibeq	fp, {r3, r8, r9}^
     da4:	4d334b01 	fldmdbxmi	r3!, {d4-d3}	;@ Deprecated
     da8:	024b5b4d 	subeq	r5, fp, #78848	; 0x13400
     dac:	01010007 	tsteq	r1, r7
     db0:	08020500 	stmdaeq	r2, {r8, sl}
     db4:	03080020 	movweq	r0, #32800	; 0x8020
     db8:	4b0109fb 	blmi	435ac <_Min_Stack_Size+0x431ac>
     dbc:	694d4d33 	stmdbvs	sp, {r0, r1, r4, r5, r8, sl, fp, lr}^
     dc0:	0008024b 	andeq	r0, r8, fp, asr #4
     dc4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dc8:	00204802 	eoreq	r4, r0, r2, lsl #16
     dcc:	0a9f0308 	beq	fe7c19f4 <_estack+0xde7919f4>
     dd0:	4d334b01 	fldmdbxmi	r3!, {d4-d3}	;@ Deprecated
     dd4:	024b4d4d 	subeq	r4, fp, #4928	; 0x1340
     dd8:	01010008 	tsteq	r1, r8
     ddc:	84020500 	strhi	r0, [r2], #-1280	; 0x500
     de0:	03080020 	movweq	r0, #32800	; 0x8020
     de4:	4b010ac3 	blmi	438f8 <_Min_Stack_Size+0x434f8>
     de8:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
     dec:	0008024b 	andeq	r0, r8, fp, asr #4
     df0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     df4:	0020c002 	eoreq	ip, r0, r2
     df8:	0ae40308 	beq	ff901a20 <_estack+0xdf8d1a20>
     dfc:	4d334b01 	fldmdbxmi	r3!, {d4-d3}	;@ Deprecated
     e00:	024b4d4d 	subeq	r4, fp, #4928	; 0x1340
     e04:	01010008 	tsteq	r1, r8
     e08:	fc020500 	stc2	5, cr0, [r2], {-0}
     e0c:	03080020 	movweq	r0, #32800	; 0x8020
     e10:	4e010b89 	vmlami.f64	d0, d17, d9
     e14:	0007023e 	andeq	r0, r7, lr, lsr r2
     e18:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e1c:	00211802 	eoreq	r1, r1, r2, lsl #16
     e20:	0bb40308 	bleq	fed01a48 <_estack+0xdecd1a48>
     e24:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e28:	00070276 	andeq	r0, r7, r6, ror r2
     e2c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e30:	00215402 	eoreq	r5, r1, r2, lsl #8
     e34:	0bd40308 	bleq	ff501a5c <_estack+0xdf4d1a5c>
     e38:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e3c:	00070276 	andeq	r0, r7, r6, ror r2
     e40:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e44:	00219002 	eoreq	r9, r1, r2
     e48:	0bf00308 	bleq	ffc01a70 <_estack+0xdfbd1a70>
     e4c:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e50:	00070276 	andeq	r0, r7, r6, ror r2
     e54:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e58:	0021cc02 	eoreq	ip, r1, r2, lsl #24
     e5c:	0ca40308 	stceq	3, cr0, [r4], #32
     e60:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e64:	00070276 	andeq	r0, r7, r6, ror r2
     e68:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e6c:	00220802 	eoreq	r0, r2, r2, lsl #16
     e70:	0cd10308 	ldcleq	3, cr0, [r1], {8}
     e74:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e78:	00070276 	andeq	r0, r7, r6, ror r2
     e7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e80:	00224402 	eoreq	r4, r2, r2, lsl #8
     e84:	0cfb0308 	ldcleq	3, cr0, [fp], #32
     e88:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     e8c:	00070276 	andeq	r0, r7, r6, ror r2
     e90:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e94:	00228002 	eoreq	r8, r2, r2
     e98:	0d980308 	ldceq	3, cr0, [r8, #32]
     e9c:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     ea0:	00070276 	andeq	r0, r7, r6, ror r2
     ea4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ea8:	0022bc02 	eoreq	fp, r2, r2, lsl #24
     eac:	0db10308 	ldceq	3, cr0, [r1, #32]!
     eb0:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
     eb4:	00070276 	andeq	r0, r7, r6, ror r2
     eb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ebc:	0022f802 	eoreq	pc, r2, r2, lsl #16
     ec0:	0de20308 	stcleq	3, cr0, [r2, #32]!
     ec4:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     ec8:	00070276 	andeq	r0, r7, r6, ror r2
     ecc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ed0:	00233402 	eoreq	r3, r3, r2, lsl #8
     ed4:	0e8b0308 	cdpeq	3, 8, cr0, cr11, cr8, {0}
     ed8:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     edc:	00070276 	andeq	r0, r7, r6, ror r2
     ee0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ee4:	00237002 	eoreq	r7, r3, r2
     ee8:	0ebc0308 	cdpeq	3, 11, cr0, cr12, cr8, {0}
     eec:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     ef0:	00070276 	andeq	r0, r7, r6, ror r2
     ef4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ef8:	0023ac02 	eoreq	sl, r3, r2, lsl #24
     efc:	0edc0308 	cdpeq	3, 13, cr0, cr12, cr8, {0}
     f00:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     f04:	00070276 	andeq	r0, r7, r6, ror r2
     f08:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f0c:	0023e802 	eoreq	lr, r3, r2, lsl #16
     f10:	0ef80308 	cdpeq	3, 15, cr0, cr8, cr8, {0}
     f14:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     f18:	00070276 	andeq	r0, r7, r6, ror r2
     f1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f20:	00242402 	eoreq	r2, r4, r2, lsl #8
     f24:	0fac0308 	svceq	0x00ac0308
     f28:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     f2c:	00070276 	andeq	r0, r7, r6, ror r2
     f30:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f34:	00246002 	eoreq	r6, r4, r2
     f38:	0fd90308 	svceq	0x00d90308
     f3c:	783e6a01 	ldmdavc	lr!, {r0, r9, fp, sp, lr}
     f40:	00070276 	andeq	r0, r7, r6, ror r2
     f44:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f48:	00249c02 	eoreq	r9, r4, r2, lsl #24
     f4c:	10870308 	addne	r0, r7, r8, lsl #6
     f50:	953f7801 	ldrls	r7, [pc, #-2049]!	; 757 <_Min_Stack_Size+0x357>
     f54:	000702a0 	andeq	r0, r7, r0, lsr #5
     f58:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f5c:	0024e402 	eoreq	lr, r4, r2, lsl #8
     f60:	10ac0308 	adcne	r0, ip, r8, lsl #6
     f64:	2f2f5901 	svccs	0x002f5901
     f68:	4c3e4b34 	ldcmi	11, cr4, [lr], #-208	; 0xffffff30
     f6c:	4b404e3e 	blmi	101486c <_Min_Stack_Size+0x101446c>
     f70:	21314084 	teqcs	r1, r4, lsl #1
     f74:	01000802 	tsteq	r0, r2, lsl #16
     f78:	02050001 	andeq	r0, r5, #1
     f7c:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
     f80:	0110d903 	tsteq	r0, r3, lsl #18
     f84:	06026730 			; <UNDEFINED> instruction: 0x06026730
     f88:	00010100 	andeq	r0, r1, r0, lsl #2
     f8c:	25740205 	ldrbcs	r0, [r4, #-517]!	; 0x205
     f90:	ed030800 	stc	8, cr0, [r3, #-0]
     f94:	34590110 	ldrbcc	r0, [r9], #-272	; 0x110
     f98:	21314068 	teqcs	r1, r8, rrx
     f9c:	01000902 	tsteq	r0, r2, lsl #18
     fa0:	02050001 	andeq	r0, r5, #1
     fa4:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
     fa8:	01118f03 	tsteq	r1, r3, lsl #30
     fac:	08023d5e 	stmdaeq	r2, {r1, r2, r3, r4, r6, r8, sl, fp, ip, sp}
     fb0:	5b010100 	blpl	413b8 <_Min_Stack_Size+0x40fb8>
     fb4:	02000004 	andeq	r0, r0, #4
     fb8:	0001af00 	andeq	sl, r1, r0, lsl #30
     fbc:	fb010200 	blx	417c6 <_Min_Stack_Size+0x413c6>
     fc0:	01000d0e 	tsteq	r0, lr, lsl #26
     fc4:	00010101 	andeq	r0, r1, r1, lsl #2
     fc8:	00010000 	andeq	r0, r1, r0
     fcc:	6e690100 	powvse	f0, f1, f0
     fd0:	4f432f63 	svcmi	0x00432f63
     fd4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     fd8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     fdc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     fe0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     fe4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     fe8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     fec:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     ff0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ff4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     ff8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     ffc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1000:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1008 <_Min_Stack_Size+0xc08>
    1004:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1008:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    100c:	752f0063 	strvc	r0, [pc, #-99]!	; fb1 <_Min_Stack_Size+0xbb1>
    1010:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1014:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1018:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    101c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1020:	616d2f62 	cmnvs	sp, r2, ror #30
    1024:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1028:	752f0065 	strvc	r0, [pc, #-101]!	; fcb <_Min_Stack_Size+0xbcb>
    102c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1030:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1034:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1038:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    103c:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    1040:	4f432f63 	svcmi	0x00432f63
    1044:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1048:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    104c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1050:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1054:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1058:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    105c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1060:	5349534d 	movtpl	r5, #37709	; 0x934d
    1064:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1068:	2f656369 	svccs	0x00656369
    106c:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1070:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1074:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1078:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    107c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1080:	636e6900 	cmnvs	lr, #0, 18
    1084:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1088:	5f584554 	svcpl	0x00584554
    108c:	5f46344d 	svcpl	0x0046344d
    1090:	334d5453 	movtcc	r5, #54355	; 0xd453
    1094:	2f344632 	svccs	0x00344632
    1098:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    109c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    10a0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    10a4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10a8:	5f787834 	svcpl	0x00787834
    10ac:	50647453 	rsbpl	r7, r4, r3, asr r4
    10b0:	70697265 	rsbvc	r7, r9, r5, ror #4
    10b4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    10b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    10bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10c0:	636e6900 	cmnvs	lr, #0, 18
    10c4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    10c8:	5f584554 	svcpl	0x00584554
    10cc:	5f46344d 	svcpl	0x0046344d
    10d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    10d4:	2f344632 	svccs	0x00344632
    10d8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    10dc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    10e0:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    10e4:	2f534953 	svccs	0x00534953
    10e8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    10ec:	00656475 	rsbeq	r6, r5, r5, ror r4
    10f0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    10f4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    10f8:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 888 <_Min_Stack_Size+0x488>
    10fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1100:	0100632e 	tsteq	r0, lr, lsr #6
    1104:	645f0000 	ldrbvs	r0, [pc], #-0	; 110c <_Min_Stack_Size+0xd0c>
    1108:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    110c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1114 <_Min_Stack_Size+0xd14>
    1110:	73657079 	cmnvc	r5, #121	; 0x79
    1114:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1118:	74730000 	ldrbtvc	r0, [r3], #-0
    111c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    1120:	0300682e 	movweq	r6, #2094	; 0x82e
    1124:	74730000 	ldrbtvc	r0, [r3], #-0
    1128:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    112c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1130:	00040068 	andeq	r0, r4, r8, rrx
    1134:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1138:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    113c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    1140:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1144:	00000500 	andeq	r0, r0, r0, lsl #10
    1148:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    114c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1150:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1154:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1158:	00050068 	andeq	r0, r5, r8, rrx
    115c:	726f6300 	rsbvc	r6, pc, #0, 6
    1160:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1164:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1168:	00000006 	andeq	r0, r0, r6
    116c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1170:	03080025 	movweq	r0, #32805	; 0x8025
    1174:	4e0101bb 	mcrmi	1, 0, r0, cr1, cr11, {5}
    1178:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
    117c:	594c6859 	stmdbpl	ip, {r0, r3, r4, r6, fp, sp, lr}^
    1180:	68594c68 	ldmdavs	r9, {r3, r5, r6, sl, fp, lr}^
    1184:	4c68594c 	stclmi	9, cr5, [r8], #-304	; 0xfffffed0
    1188:	594c5a4b 	stmdbpl	ip, {r0, r1, r3, r6, r9, fp, ip, lr}^
    118c:	5b594c6a 	blpl	165433c <_Min_Stack_Size+0x1653f3c>
    1190:	01001302 	tsteq	r0, r2, lsl #6
    1194:	02050001 	andeq	r0, r5, #1
    1198:	080026e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, sp}
    119c:	0101f603 	tsteq	r1, r3, lsl #12
    11a0:	032f4b59 	teqeq	pc, #91136	; 0x16400
    11a4:	4e4d2e13 	mcrmi	14, 2, r2, cr13, cr3, {0}
    11a8:	6c4d4d5b 	mcrrvs	13, 5, r4, sp, cr11
    11ac:	4d5c2d67 	ldclmi	13, cr2, [ip, #-412]	; 0xfffffe64
    11b0:	4e5b4e4d 	cdpmi	14, 5, cr4, cr11, cr13, {2}
    11b4:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    11b8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    11bc:	7732404c 	ldrvc	r4, [r2, -ip, asr #32]!
    11c0:	8577bccd 	ldrbhi	fp, [r7, #-3277]!	; 0xccd
    11c4:	4bccda76 	blmi	ff337ba4 <_estack+0xdf307ba4>
    11c8:	01000902 	tsteq	r0, r2, lsl #18
    11cc:	02050001 	andeq	r0, r5, #1
    11d0:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
    11d4:	0102e703 	tsteq	r2, r3, lsl #14
    11d8:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
    11dc:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    11e0:	01010005 	tsteq	r1, r5
    11e4:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    11e8:	03080028 	movweq	r0, #32808	; 0x8028
    11ec:	590102fb 	stmdbpl	r1, {r0, r1, r3, r4, r5, r6, r7, r9}
    11f0:	4c2e0903 	stcmi	9, cr0, [lr], #-12
    11f4:	3f9d4b50 	svccc	0x009d4b50
    11f8:	0005024b 	andeq	r0, r5, fp, asr #4
    11fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1200:	0028e002 	eoreq	lr, r8, r2
    1204:	039a0308 	orrseq	r0, sl, #8, 6	; 0x20000000
    1208:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    120c:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    1210:	00010100 	andeq	r0, r1, r0, lsl #2
    1214:	290c0205 	stmdbcs	ip, {r0, r2, r9}
    1218:	ab030800 	blge	c3220 <_Min_Stack_Size+0xc2e20>
    121c:	3f6b0103 	svccc	0x006b0103
    1220:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1224:	00010100 	andeq	r0, r1, r0, lsl #2
    1228:	294c0205 	stmdbcs	ip, {r0, r2, r9}^
    122c:	c5030800 	strgt	r0, [r3, #-2048]	; 0x800
    1230:	846b0103 	strbthi	r0, [fp], #-259	; 0x103
    1234:	00050291 	muleq	r5, r1, r2
    1238:	05000101 	streq	r0, [r0, #-257]	; 0x101
    123c:	00298402 	eoreq	r8, r9, r2, lsl #8
    1240:	03da0308 	bicseq	r0, sl, #8, 6	; 0x20000000
    1244:	b13f6b01 	teqlt	pc, r1, lsl #22
    1248:	00050284 	andeq	r0, r5, r4, lsl #5
    124c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1250:	0029c802 	eoreq	ip, r9, r2, lsl #16
    1254:	03f40308 	mvnseq	r0, #8, 6	; 0x20000000
    1258:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 75f <_Min_Stack_Size+0x35f>
    125c:	00050284 	andeq	r0, r5, r4, lsl #5
    1260:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1264:	002a0802 	eoreq	r0, sl, r2, lsl #16
    1268:	04ad0308 	strteq	r0, [sp], #776	; 0x308
    126c:	02676c01 	rsbeq	r6, r7, #256	; 0x100
    1270:	01010005 	tsteq	r1, r5
    1274:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    1278:	0308002a 	movweq	r0, #32810	; 0x802a
    127c:	4f0104bd 	svcmi	0x000104bd
    1280:	00060267 	andeq	r0, r6, r7, ror #4
    1284:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1288:	002a4c02 	eoreq	r4, sl, r2, lsl #24
    128c:	04f10308 	ldrbteq	r0, [r1], #776	; 0x308
    1290:	91846c01 	orrls	r6, r4, r1, lsl #24
    1294:	01000502 	tsteq	r0, r2, lsl #10
    1298:	02050001 	andeq	r0, r5, #1
    129c:	08002a84 	stmdaeq	r0, {r2, r7, r9, fp, sp}
    12a0:	01058503 	tsteq	r5, r3, lsl #10
    12a4:	84953f6b 	ldrhi	r3, [r5], #3947	; 0xf6b
    12a8:	01000502 	tsteq	r0, r2, lsl #10
    12ac:	02050001 	andeq	r0, r5, #1
    12b0:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
    12b4:	0105a003 	tsteq	r5, r3
    12b8:	0283836b 	addeq	r8, r3, #-1409286143	; 0xac000001
    12bc:	01010005 	tsteq	r1, r5
    12c0:	fc020500 	stc2	5, cr0, [r2], {-0}
    12c4:	0308002a 	movweq	r0, #32810	; 0x802a
    12c8:	6b0105e5 	blvs	42a64 <_Min_Stack_Size+0x42664>
    12cc:	05028383 	streq	r8, [r2, #-899]	; 0x383
    12d0:	00010100 	andeq	r0, r1, r0, lsl #2
    12d4:	2b340205 	blcs	d01af0 <_Min_Stack_Size+0xd016f0>
    12d8:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    12dc:	3f6b0105 	svccc	0x006b0105
    12e0:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    12e4:	00010100 	andeq	r0, r1, r0, lsl #2
    12e8:	2b740205 	blcs	1d01b04 <_Min_Stack_Size+0x1d01704>
    12ec:	8f030800 	svchi	0x00030800
    12f0:	834f0106 	movthi	r0, #61702	; 0xf106
    12f4:	01000502 	tsteq	r0, r2, lsl #10
    12f8:	02050001 	andeq	r0, r5, #1
    12fc:	08002b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, sp}
    1300:	0106c403 	tsteq	r6, r3, lsl #8
    1304:	84953f6b 	ldrhi	r3, [r5], #3947	; 0xf6b
    1308:	01000502 	tsteq	r0, r2, lsl #10
    130c:	02050001 	andeq	r0, r5, #1
    1310:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
    1314:	01079803 	tsteq	r7, r3, lsl #16
    1318:	02ad766b 	adceq	r7, sp, #112197632	; 0x6b00000
    131c:	01010005 	tsteq	r1, r5
    1320:	14020500 	strne	r0, [r2], #-1280	; 0x500
    1324:	0308002c 	movweq	r0, #32812	; 0x802c
    1328:	6a0107ab 	bvs	431dc <_Min_Stack_Size+0x42ddc>
    132c:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1330:	01010005 	tsteq	r1, r5
    1334:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    1338:	0308002c 	movweq	r0, #32812	; 0x802c
    133c:	6a0107c4 	bvs	43254 <_Min_Stack_Size+0x42e54>
    1340:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1344:	01010005 	tsteq	r1, r5
    1348:	94020500 	strls	r0, [r2], #-1280	; 0x500
    134c:	0308002c 	movweq	r0, #32812	; 0x802c
    1350:	6b01088b 	blvs	43584 <_Min_Stack_Size+0x43184>
    1354:	05028383 	streq	r8, [r2, #-899]	; 0x383
    1358:	00010100 	andeq	r0, r1, r0, lsl #2
    135c:	2ccc0205 	sfmcs	f0, 2, [ip], {5}
    1360:	9d030800 	stcls	8, cr0, [r3, #-0]
    1364:	3f6b0108 	svccc	0x006b0108
    1368:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    136c:	00010100 	andeq	r0, r1, r0, lsl #2
    1370:	2d0c0205 	sfmcs	f0, 4, [ip, #-20]	; 0xffffffec
    1374:	cb030800 	blgt	c337c <_Min_Stack_Size+0xc2f7c>
    1378:	40880108 	addmi	r0, r8, r8, lsl #2
    137c:	0502a096 	streq	sl, [r2, #-150]	; 0x96
    1380:	00010100 	andeq	r0, r1, r0, lsl #2
    1384:	2d540205 	lfmcs	f0, 2, [r4, #-20]	; 0xffffffec
    1388:	cf030800 	svcgt	0x00030800
    138c:	67830109 	strvs	r0, [r3, r9, lsl #2]
    1390:	312e0c03 	teqcc	lr, r3, lsl #24
    1394:	3e5a4b5b 	vmovcc.s8	r4, d10[2]
    1398:	3e4e3e4c 	cdpcc	14, 4, cr3, cr14, cr12, {2}
    139c:	0276783e 	rsbseq	r7, r6, #4063232	; 0x3e0000
    13a0:	01010005 	tsteq	r1, r5
    13a4:	e4020500 	str	r0, [r2], #-1280	; 0x500
    13a8:	0308002d 	movweq	r0, #32813	; 0x802d
    13ac:	67010a8f 	strvs	r0, [r1, -pc, lsl #21]
    13b0:	842e0b03 	strthi	r0, [lr], #-2819	; 0xb03
    13b4:	02213040 	eoreq	r3, r1, #64	; 0x40
    13b8:	01010006 	tsteq	r1, r6
    13bc:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    13c0:	0308002e 	movweq	r0, #32814	; 0x802e
    13c4:	03010ac0 	movweq	r0, #6848	; 0x1ac0
    13c8:	0259660b 	subseq	r6, r9, #11534336	; 0xb00000
    13cc:	01010005 	tsteq	r1, r5
    13d0:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    13d4:	0308002e 	movweq	r0, #32814	; 0x802e
    13d8:	67010ae2 	strvs	r0, [r1, -r2, ror #21]
    13dc:	2e0c0367 	cdpcs	3, 0, cr0, cr12, cr7, {3}
    13e0:	3e5a4b5a 	vmovcc.s8	r4, d10[2]
    13e4:	69783e76 	ldmdbvs	r8!, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}^
    13e8:	0067594b 	rsbeq	r5, r7, fp, asr #18
    13ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    13f0:	403e063c 	eorsmi	r0, lr, ip, lsr r6
    13f4:	06022131 			; <UNDEFINED> instruction: 0x06022131
    13f8:	00010100 	andeq	r0, r1, r0, lsl #2
    13fc:	2eec0205 	cdpcs	2, 14, cr0, cr12, cr5, {0}
    1400:	ac030800 	stcge	8, cr0, [r3], {-0}
    1404:	0367010b 	cmneq	r7, #-1073741822	; 0xc0000002
    1408:	593d4a0b 	ldmdbpl	sp!, {r0, r1, r3, r9, fp, lr}
    140c:	00050259 	andeq	r0, r5, r9, asr r2
    1410:	01d60101 	bicseq	r0, r6, r1, lsl #2
    1414:	00020000 	andeq	r0, r2, r0
    1418:	00000148 	andeq	r0, r0, r8, asr #2
    141c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1420:	0101000d 	tsteq	r1, sp
    1424:	00000101 	andeq	r0, r0, r1, lsl #2
    1428:	00000100 	andeq	r0, r0, r0, lsl #2
    142c:	636e6901 	cmnvs	lr, #16384	; 0x4000
    1430:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1434:	5f584554 	svcpl	0x00584554
    1438:	5f46344d 	svcpl	0x0046344d
    143c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1440:	2f344632 	svccs	0x00344632
    1444:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1448:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    144c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1450:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1454:	5f787834 	svcpl	0x00787834
    1458:	50647453 	rsbpl	r7, r4, r3, asr r4
    145c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1460:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1464:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1468:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    146c:	73752f00 	cmnvc	r5, #0, 30
    1470:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1474:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1478:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    147c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1480:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1484:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1488:	73752f00 	cmnvc	r5, #0, 30
    148c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1490:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1494:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1498:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    149c:	636e6900 	cmnvs	lr, #0, 18
    14a0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    14a4:	5f584554 	svcpl	0x00584554
    14a8:	5f46344d 	svcpl	0x0046344d
    14ac:	334d5453 	movtcc	r5, #54355	; 0xd453
    14b0:	2f344632 	svccs	0x00344632
    14b4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    14b8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    14bc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    14c0:	2f534953 	svccs	0x00534953
    14c4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    14c8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    14cc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    14d0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    14d4:	2f787834 	svccs	0x00787834
    14d8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    14dc:	00656475 	rsbeq	r6, r5, r5, ror r4
    14e0:	2f636e69 	svccs	0x00636e69
    14e4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    14e8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 13dc <_Min_Stack_Size+0xfdc>
    14ec:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    14f0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14f4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 13e4 <_Min_Stack_Size+0xfe4>
    14f8:	61726269 	cmnvs	r2, r9, ror #4
    14fc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1500:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1504:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    1508:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    150c:	00006564 	andeq	r6, r0, r4, ror #10
    1510:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1514:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1518:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    151c:	67666373 			; <UNDEFINED> instruction: 0x67666373
    1520:	0100632e 	tsteq	r0, lr, lsr #6
    1524:	645f0000 	ldrbvs	r0, [pc], #-0	; 152c <_Min_Stack_Size+0x112c>
    1528:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    152c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1534 <_Min_Stack_Size+0x1134>
    1530:	73657079 	cmnvc	r5, #121	; 0x79
    1534:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1538:	74730000 	ldrbtvc	r0, [r3], #-0
    153c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    1540:	0300682e 	movweq	r6, #2094	; 0x82e
    1544:	74730000 	ldrbtvc	r0, [r3], #-0
    1548:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    154c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1550:	00040068 	andeq	r0, r4, r8, rrx
    1554:	726f6300 	rsbvc	r6, pc, #0, 6
    1558:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    155c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1560:	00000005 	andeq	r0, r0, r5
    1564:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    1568:	0308002f 	movweq	r0, #32815	; 0x802f
    156c:	2f0100e4 	svccs	0x000100e4
    1570:	01025959 	tsteq	r2, r9, asr r9
    1574:	00010100 	andeq	r0, r1, r0, lsl #2
    1578:	2f400205 	svccs	0x00400205
    157c:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    1580:	3d5c0100 	ldfcce	f0, [ip, #-0]
    1584:	01000802 	tsteq	r0, r2, lsl #16
    1588:	02050001 	andeq	r0, r5, #1
    158c:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
    1590:	01018b03 	tsteq	r1, r3, lsl #22
    1594:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    1598:	00010100 	andeq	r0, r1, r0, lsl #2
    159c:	2f800205 	svccs	0x00800205
    15a0:	a2030800 	andge	r0, r3, #0, 16
    15a4:	34750101 	ldrbtcc	r0, [r5], #-257	; 0x101
    15a8:	08130883 	ldmdaeq	r3, {r0, r1, r7, fp}
    15ac:	00060259 	andeq	r0, r6, r9, asr r2
    15b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    15b4:	002ffc02 	eoreq	pc, pc, r2, lsl #24
    15b8:	01b70308 			; <UNDEFINED> instruction: 0x01b70308
    15bc:	023d4d01 	eorseq	r4, sp, #1, 26	; 0x40
    15c0:	01010007 	tsteq	r1, r7
    15c4:	18020500 	stmdane	r2, {r8, sl}
    15c8:	03080030 	movweq	r0, #32816	; 0x8030
    15cc:	5c0101c8 	stfpls	f0, [r1], {200}	; 0xc8
    15d0:	0008023d 	andeq	r0, r8, sp, lsr r2
    15d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    15d8:	00303802 	eorseq	r3, r0, r2, lsl #16
    15dc:	01d50308 	bicseq	r0, r5, r8, lsl #6
    15e0:	68303d01 	ldmdavs	r0!, {r0, r8, sl, fp, ip, sp}
    15e4:	02213040 	eoreq	r3, r1, #64	; 0x40
    15e8:	01010009 	tsteq	r1, r9
    15ec:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    15f0:	01ab0002 			; <UNDEFINED> instruction: 0x01ab0002
    15f4:	01020000 	mrseq	r0, (UNDEF: 2)
    15f8:	000d0efb 	strdeq	r0, [sp], -fp
    15fc:	01010101 	tsteq	r1, r1, lsl #2
    1600:	01000000 	mrseq	r0, (UNDEF: 0)
    1604:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1608:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    160c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1610:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1614:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1618:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    161c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1620:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1624:	2f736569 	svccs	0x00736569
    1628:	334d5453 	movtcc	r5, #54355	; 0xd453
    162c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1630:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1634:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1638:	5f687069 	svcpl	0x00687069
    163c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1640:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1644:	2f006372 	svccs	0x00006372
    1648:	2f727375 	svccs	0x00727375
    164c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1650:	2f656475 	svccs	0x00656475
    1654:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1658:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 14bc <_Min_Stack_Size+0x10bc>
    165c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1660:	2f00656e 	svccs	0x0000656e
    1664:	2f727375 	svccs	0x00727375
    1668:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    166c:	2f656475 	svccs	0x00656475
    1670:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1674:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    1678:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    167c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1680:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1684:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1688:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    168c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1690:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1694:	2f736569 	svccs	0x00736569
    1698:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    169c:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    16a0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    16a4:	2f54532f 	svccs	0x0054532f
    16a8:	334d5453 	movtcc	r5, #54355	; 0xd453
    16ac:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    16b0:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    16b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    16b8:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    16bc:	4f432f63 	svcmi	0x00432f63
    16c0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    16c4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    16c8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    16cc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    16d0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    16d4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    16d8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    16dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16e0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    16e4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    16e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    16ec:	445f6870 	ldrbmi	r6, [pc], #-2160	; 16f4 <_Min_Stack_Size+0x12f4>
    16f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    16f4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    16f8:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    16fc:	4f432f63 	svcmi	0x00432f63
    1700:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1704:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1708:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    170c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1710:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1714:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1718:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    171c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1720:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1724:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1728:	74730000 	ldrbtvc	r0, [r3], #-0
    172c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1730:	5f787834 	svcpl	0x00787834
    1734:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    1738:	00010063 	andeq	r0, r1, r3, rrx
    173c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1740:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1744:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1748:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    174c:	00020068 	andeq	r0, r2, r8, rrx
    1750:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1754:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1758:	00030068 	andeq	r0, r3, r8, rrx
    175c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1760:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1764:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1768:	00000400 	andeq	r0, r0, r0, lsl #8
    176c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1770:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1774:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1778:	00682e63 	rsbeq	r2, r8, r3, ror #28
    177c:	73000005 	movwvc	r0, #5
    1780:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1784:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1788:	6332695f 	teqvs	r2, #1556480	; 0x17c000
    178c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1790:	6f630000 	svcvs	0x00630000
    1794:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1798:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    179c:	00000600 	andeq	r0, r0, r0, lsl #12
    17a0:	02050000 	andeq	r0, r5, #0
    17a4:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
    17a8:	01018903 	tsteq	r1, r3, lsl #18
    17ac:	685a4d4e 	ldmdavs	sl, {r1, r2, r3, r6, r8, sl, fp, lr}^
    17b0:	4d6a5a4d 	vstmdbmi	sl!, {s11-s87}
    17b4:	0a025b5a 	beq	98524 <_Min_Stack_Size+0x98124>
    17b8:	00010100 	andeq	r0, r1, r0, lsl #2
    17bc:	30e00205 	rsccc	r0, r0, r5, lsl #4
    17c0:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
    17c4:	4b590101 	blmi	1641bd0 <_Min_Stack_Size+0x16417d0>
    17c8:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    17cc:	30594c3e 	subscc	r4, r9, lr, lsr ip
    17d0:	85404c67 	strbhi	r4, [r0, #-3175]	; 0xc67
    17d4:	3f765b31 	svccc	0x00765b31
    17d8:	696d4c31 	stmdbvs	sp!, {r0, r4, r5, sl, fp, lr}^
    17dc:	5b4eaea3 	blpl	13ad270 <_Min_Stack_Size+0x13ace70>
    17e0:	3ef6924d 	cdpcc	2, 15, cr9, cr6, cr13, {2}
    17e4:	926a3e86 	rsbls	r3, sl, #2144	; 0x860
    17e8:	0c028340 	stceq	3, cr8, [r2], {64}	; 0x40
    17ec:	00010100 	andeq	r0, r1, r0, lsl #2
    17f0:	32640205 	rsbcc	r0, r4, #1342177280	; 0x50000000
    17f4:	a1030800 	tstge	r3, r0, lsl #16
    17f8:	4c4d0102 	stfmie	f0, [sp], {2}
    17fc:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    1800:	0005024b 	andeq	r0, r5, fp, asr #4
    1804:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1808:	0032a002 	eorseq	sl, r2, r2
    180c:	02b90308 	adcseq	r0, r9, #8, 6	; 0x20000000
    1810:	953f6a01 	ldrls	r6, [pc, #-2561]!	; e17 <_Min_Stack_Size+0xa17>
    1814:	00050284 	andeq	r0, r5, r4, lsl #5
    1818:	05000101 	streq	r0, [r0, #-257]	; 0x101
    181c:	0032e002 	eorseq	lr, r2, r2
    1820:	02d60308 	sbcseq	r0, r6, #8, 6	; 0x20000000
    1824:	953f6a01 	ldrls	r6, [pc, #-2561]!	; e2b <_Min_Stack_Size+0xa2b>
    1828:	00050284 	andeq	r0, r5, r4, lsl #5
    182c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1830:	00332002 	eorseq	r2, r3, r2
    1834:	02f30308 	rscseq	r0, r3, #8, 6	; 0x20000000
    1838:	3f356701 	svccc	0x00356701
    183c:	023d854d 	eorseq	r8, sp, #322961408	; 0x13400000
    1840:	01010005 	tsteq	r1, r5
    1844:	60020500 	andvs	r0, r2, r0, lsl #10
    1848:	03080033 	movweq	r0, #32819	; 0x8033
    184c:	6a01038f 	bvs	42690 <_Min_Stack_Size+0x42290>
    1850:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1854:	01010005 	tsteq	r1, r5
    1858:	a0020500 	andge	r0, r2, r0, lsl #10
    185c:	03080033 	movweq	r0, #32819	; 0x8033
    1860:	6a0103a7 	bvs	42704 <_Min_Stack_Size+0x42304>
    1864:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1868:	01010005 	tsteq	r1, r5
    186c:	e0020500 	and	r0, r2, r0, lsl #10
    1870:	03080033 	movweq	r0, #32819	; 0x8033
    1874:	870103c3 	strhi	r0, [r1, -r3, asr #7]
    1878:	4b4d5d3f 	blmi	1358d7c <_Min_Stack_Size+0x135897c>
    187c:	01000502 	tsteq	r0, r2, lsl #10
    1880:	02050001 	andeq	r0, r5, #1
    1884:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
    1888:	0103de03 	tsteq	r3, r3, lsl #28
    188c:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    1890:	01000502 	tsteq	r0, r2, lsl #10
    1894:	02050001 	andeq	r0, r5, #1
    1898:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
    189c:	0103f503 	tsteq	r3, r3, lsl #10
    18a0:	4d3f3467 	cfldrsmi	mvf3, [pc, #-412]!	; 170c <_Min_Stack_Size+0x130c>
    18a4:	05023d93 	streq	r3, [r2, #-3475]	; 0xd93
    18a8:	00010100 	andeq	r0, r1, r0, lsl #2
    18ac:	349c0205 	ldrcc	r0, [ip], #517	; 0x205
    18b0:	90030800 	andls	r0, r3, r0, lsl #16
    18b4:	3f6a0104 	svccc	0x006a0104
    18b8:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    18bc:	00010100 	andeq	r0, r1, r0, lsl #2
    18c0:	34dc0205 	ldrbcc	r0, [ip], #517	; 0x205
    18c4:	a8030800 	stmdage	r3, {fp}
    18c8:	3f6a0104 	svccc	0x006a0104
    18cc:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    18d0:	00010100 	andeq	r0, r1, r0, lsl #2
    18d4:	351c0205 	ldrcc	r0, [ip, #-517]	; 0x205
    18d8:	c2030800 	andgt	r0, r3, #0, 16
    18dc:	3f6a0104 	svccc	0x006a0104
    18e0:	050284b1 	streq	r8, [r2, #-1201]	; 0x4b1
    18e4:	00010100 	andeq	r0, r1, r0, lsl #2
    18e8:	35600205 	strbcc	r0, [r0, #-517]!	; 0x205
    18ec:	da030800 	ble	c38f4 <_Min_Stack_Size+0xc34f4>
    18f0:	3f6a0104 	svccc	0x006a0104
    18f4:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    18f8:	00010100 	andeq	r0, r1, r0, lsl #2
    18fc:	35a00205 	strcc	r0, [r0, #517]!	; 0x205
    1900:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    1904:	4d6a0104 	stfmie	f0, [sl, #-16]!
    1908:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    190c:	00010100 	andeq	r0, r1, r0, lsl #2
    1910:	35e00205 	strbcc	r0, [r0, #517]!	; 0x205
    1914:	9a030800 	bls	c391c <_Min_Stack_Size+0xc351c>
    1918:	4d6c0105 	stfmie	f0, [ip, #-20]!	; 0xffffffec
    191c:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1920:	00010100 	andeq	r0, r1, r0, lsl #2
    1924:	36200205 	strtcc	r0, [r0], -r5, lsl #4
    1928:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    192c:	4d6a0105 	stfmie	f0, [sl, #-20]!	; 0xffffffec
    1930:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1934:	00010100 	andeq	r0, r1, r0, lsl #2
    1938:	36600205 	strbtcc	r0, [r0], -r5, lsl #4
    193c:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
    1940:	3f6a0105 	svccc	0x006a0105
    1944:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1948:	00010100 	andeq	r0, r1, r0, lsl #2
    194c:	36a00205 	strtcc	r0, [r0], r5, lsl #4
    1950:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    1954:	4b6a0105 	blmi	1a81d70 <_Min_Stack_Size+0x1a81970>
    1958:	01000502 	tsteq	r0, r2, lsl #10
    195c:	02050001 	andeq	r0, r5, #1
    1960:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
    1964:	01068103 	tsteq	r6, r3, lsl #2
    1968:	06024b4e 	streq	r4, [r2], -lr, asr #22
    196c:	00010100 	andeq	r0, r1, r0, lsl #2
    1970:	36dc0205 	ldrbcc	r0, [ip], r5, lsl #4
    1974:	a0030800 	andge	r0, r3, r0, lsl #16
    1978:	3f6a0106 	svccc	0x006a0106
    197c:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1980:	00010100 	andeq	r0, r1, r0, lsl #2
    1984:	371c0205 	ldrcc	r0, [ip, -r5, lsl #4]
    1988:	bf030800 	svclt	0x00030800
    198c:	4d6a0106 	stfmie	f0, [sl, #-24]!	; 0xffffffe8
    1990:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1994:	00010100 	andeq	r0, r1, r0, lsl #2
    1998:	375c0205 	ldrbcc	r0, [ip, -r5, lsl #4]
    199c:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    19a0:	3f6a0106 	svccc	0x006a0106
    19a4:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    19a8:	00010100 	andeq	r0, r1, r0, lsl #2
    19ac:	379c0205 	ldrcc	r0, [ip, r5, lsl #4]
    19b0:	ed030800 	stc	8, cr0, [r3, #-0]
    19b4:	674e0106 	strbvs	r0, [lr, -r6, lsl #2]
    19b8:	01000602 	tsteq	r0, r2, lsl #12
    19bc:	02050001 	andeq	r0, r5, #1
    19c0:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
    19c4:	01078e03 	tsteq	r7, r3, lsl #28
    19c8:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    19cc:	01000502 	tsteq	r0, r2, lsl #10
    19d0:	02050001 	andeq	r0, r5, #1
    19d4:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    19d8:	0107a603 	tsteq	r7, r3, lsl #12
    19dc:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    19e0:	01000502 	tsteq	r0, r2, lsl #10
    19e4:	02050001 	andeq	r0, r5, #1
    19e8:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
    19ec:	0108b003 	tsteq	r8, r3
    19f0:	4d2f3467 	cfstrsmi	mvf3, [pc, #-412]!	; 185c <_Min_Stack_Size+0x145c>
    19f4:	0006023d 	andeq	r0, r6, sp, lsr r2
    19f8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19fc:	00386c02 	eorseq	r6, r8, r2, lsl #24
    1a00:	08cb0308 	stmiaeq	fp, {r3, r8, r9}^
    1a04:	953f8801 	ldrls	r8, [pc, #-2049]!	; 120b <_Min_Stack_Size+0xe0b>
    1a08:	000502a0 	andeq	r0, r5, r0, lsr #5
    1a0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a10:	0038b402 	eorseq	fp, r8, r2, lsl #8
    1a14:	09860308 	stmibeq	r6, {r3, r8, r9}
    1a18:	4b2f5901 	blmi	bd7e24 <_Min_Stack_Size+0xbd7a24>
    1a1c:	3f4b4b35 	svccc	0x004b4b35
    1a20:	31416969 	cmpcc	r1, r9, ror #18
    1a24:	00060221 	andeq	r0, r6, r1, lsr #4
    1a28:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a2c:	00391402 	eorseq	r1, r9, r2, lsl #8
    1a30:	09b60308 	ldmibeq	r6!, {r3, r8, r9}
    1a34:	502f4b01 	eorpl	r4, pc, r1, lsl #22
    1a38:	693f4b4b 	ldmdbvs	pc!, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
    1a3c:	00060221 	andeq	r0, r6, r1, lsr #4
    1a40:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a44:	00395802 	eorseq	r5, r9, r2, lsl #16
    1a48:	09ed0308 	stmibeq	sp!, {r3, r8, r9}^
    1a4c:	512f5901 	teqpl	pc, r1, lsl #18
    1a50:	3f4c3f31 	svccc	0x004c3f31
    1a54:	693f3e4f 	ldmdbvs	pc!, {r0, r1, r2, r3, r6, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    1a58:	02213241 	eoreq	r3, r1, #268435460	; 0x10000004
    1a5c:	01010006 	tsteq	r1, r6
    1a60:	c0020500 	andgt	r0, r2, r0, lsl #10
    1a64:	03080039 	movweq	r0, #32825	; 0x8039
    1a68:	59010aba 	stmdbpl	r1, {r1, r3, r4, r5, r7, r9, fp}
    1a6c:	02674c33 	rsbeq	r4, r7, #13056	; 0x3300
    1a70:	01010005 	tsteq	r1, r5
    1a74:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1a78:	03080039 	movweq	r0, #32825	; 0x8039
    1a7c:	59010adc 	stmdbpl	r1, {r2, r3, r4, r6, r7, r9, fp}
    1a80:	4d93352f 	cfldr32mi	mvfx3, [r3, #188]	; 0xbc
    1a84:	01040200 	mrseq	r0, R12_usr
    1a88:	3f068206 	svccc	0x00068206
    1a8c:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    1a90:	01010006 	tsteq	r1, r6
    1a94:	48020500 	stmdami	r2, {r8, sl}
    1a98:	0308003a 	movweq	r0, #32826	; 0x803a
    1a9c:	59010b98 	stmdbpl	r1, {r3, r4, r7, r8, r9, fp}
    1aa0:	02674d34 	rsbeq	r4, r7, #52, 26	; 0xd00
    1aa4:	01010005 	tsteq	r1, r5
    1aa8:	0000038f 	andeq	r0, r0, pc, lsl #7
    1aac:	01980002 	orrseq	r0, r8, r2
    1ab0:	01020000 	mrseq	r0, (UNDEF: 2)
    1ab4:	000d0efb 	strdeq	r0, [sp], -fp
    1ab8:	01010101 	tsteq	r1, r1, lsl #2
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1ac4:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    1ac8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1acc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1ad0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1ad4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ad8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1adc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1ae0:	2f736569 	svccs	0x00736569
    1ae4:	334d5453 	movtcc	r5, #54355	; 0xd453
    1ae8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1aec:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1af0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1af4:	5f687069 	svcpl	0x00687069
    1af8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1afc:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1b00:	2f006372 	svccs	0x00006372
    1b04:	2f727375 	svccs	0x00727375
    1b08:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b0c:	2f656475 	svccs	0x00656475
    1b10:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1b14:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1978 <_Min_Stack_Size+0x1578>
    1b18:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1b1c:	2f00656e 	svccs	0x0000656e
    1b20:	2f727375 	svccs	0x00727375
    1b24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b28:	2f656475 	svccs	0x00656475
    1b2c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1b30:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    1b34:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    1b38:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1b3c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1b40:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1b44:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1b48:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1b4c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1b50:	2f736569 	svccs	0x00736569
    1b54:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1b58:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    1b5c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    1b60:	2f54532f 	svccs	0x0054532f
    1b64:	334d5453 	movtcc	r5, #54355	; 0xd453
    1b68:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1b6c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    1b70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1b74:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1b78:	4f432f63 	svcmi	0x00432f63
    1b7c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1b80:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1b84:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1b88:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1b8c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1b90:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1b94:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1b98:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b9c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1ba0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1ba4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ba8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1bb0 <_Min_Stack_Size+0x17b0>
    1bac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1bb0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1bb4:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1bb8:	4f432f63 	svcmi	0x00432f63
    1bbc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1bc0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1bc4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1bc8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1bcc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1bd0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1bd4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1bd8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1bdc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1be0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1be4:	74730000 	ldrbtvc	r0, [r3], #-0
    1be8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1bec:	5f787834 	svcpl	0x00787834
    1bf0:	2e616d64 	cdpcs	13, 6, cr6, cr1, cr4, {3}
    1bf4:	00010063 	andeq	r0, r1, r3, rrx
    1bf8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1bfc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1c00:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c04:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1c08:	00020068 	andeq	r0, r2, r8, rrx
    1c0c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1c10:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1c14:	00030068 	andeq	r0, r3, r8, rrx
    1c18:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1c1c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1c20:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1c24:	00000400 	andeq	r0, r0, r0, lsl #8
    1c28:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1c2c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1c30:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    1c34:	00682e61 	rsbeq	r2, r8, r1, ror #28
    1c38:	63000005 	movwvs	r0, #5
    1c3c:	5f65726f 	svcpl	0x0065726f
    1c40:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    1c44:	00060068 	andeq	r0, r6, r8, rrx
    1c48:	05000000 	streq	r0, [r0, #-0]
    1c4c:	003a7402 	eorseq	r7, sl, r2, lsl #8
    1c50:	01c40308 	biceq	r0, r4, r8, lsl #6
    1c54:	3f694f01 	svccc	0x00694f01
    1c58:	3f3f3f3f 	svccc	0x003f3f3f
    1c5c:	4d4c4d3f 	stclmi	13, cr4, [ip, #-252]	; 0xffffff04
    1c60:	4d5a4d5a 	ldclmi	13, cr4, [sl, #-360]	; 0xfffffe98
    1c64:	4d4c4d5a 	stclmi	13, cr4, [ip, #-360]	; 0xfffffe98
    1c68:	4d4c4d4c 	stclmi	13, cr4, [ip, #-304]	; 0xfffffed0
    1c6c:	4d4c4d5a 	stclmi	13, cr4, [ip, #-360]	; 0xfffffe98
    1c70:	4d5a4d5a 	ldclmi	13, cr4, [sl, #-360]	; 0xfffffe98
    1c74:	4d4c4d5a 	stclmi	13, cr4, [ip, #-360]	; 0xfffffe98
    1c78:	4d4e4d4c 	stclmi	13, cr4, [lr, #-304]	; 0xfffffed0
    1c7c:	002f024d 	eoreq	r0, pc, sp, asr #4
    1c80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c84:	003c1802 	eorseq	r1, ip, r2, lsl #16
    1c88:	02bf0308 	adcseq	r0, pc, #8, 6	; 0x20000000
    1c8c:	14035901 	strne	r5, [r3], #-2305	; 0x901
    1c90:	10033f2e 	andne	r3, r3, lr, lsr #30
    1c94:	212d594a 	teqcs	sp, sl, asr #18
    1c98:	3d212d3d 	stccc	13, cr2, [r1, #-244]!	; 0xffffff0c
    1c9c:	2d3d212d 	ldfcss	f2, [sp, #-180]!	; 0xffffff4c
    1ca0:	40433821 	submi	r3, r3, r1, lsr #16
    1ca4:	40854f3f 	addmi	r4, r5, pc, lsr pc
    1ca8:	024b4e4e 	subeq	r4, fp, #1248	; 0x4e0
    1cac:	01010007 	tsteq	r1, r7
    1cb0:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    1cb4:	0308003c 	movweq	r0, #32828	; 0x803c
    1cb8:	4d010393 	stcmi	3, cr0, [r1, #-588]	; 0xfffffdb4
    1cbc:	3f3f3f3f 	svccc	0x003f3f3f
    1cc0:	3f3f3f3f 	svccc	0x003f3f3f
    1cc4:	3f3f3f3f 	svccc	0x003f3f3f
    1cc8:	023d3f3f 	eorseq	r3, sp, #63, 30	; 0xfc
    1ccc:	01010005 	tsteq	r1, r5
    1cd0:	30020500 	andcc	r0, r2, r0, lsl #10
    1cd4:	0308003d 	movweq	r0, #32829	; 0x803d
    1cd8:	6b0103de 	blvs	42c58 <_Min_Stack_Size+0x42858>
    1cdc:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    1ce0:	01010005 	tsteq	r1, r5
    1ce4:	68020500 	stmdavs	r2, {r8, sl}
    1ce8:	0308003d 	movweq	r0, #32829	; 0x803d
    1cec:	5e010482 	cdppl	4, 0, cr0, cr1, cr2, {4}
    1cf0:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    1cf4:	01010005 	tsteq	r1, r5
    1cf8:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1cfc:	0308003d 	movweq	r0, #32829	; 0x803d
    1d00:	5e0104a6 	cdppl	4, 0, cr0, cr1, cr6, {5}
    1d04:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    1d08:	01010005 	tsteq	r1, r5
    1d0c:	d0020500 	andle	r0, r2, r0, lsl #10
    1d10:	0308003d 	movweq	r0, #32829	; 0x803d
    1d14:	6b0104f8 	blvs	430fc <_Min_Stack_Size+0x42cfc>
    1d18:	0005023d 	andeq	r0, r5, sp, lsr r2
    1d1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1d20:	003dec02 	eorseq	lr, sp, r2, lsl #24
    1d24:	05870308 	streq	r0, [r7, #776]	; 0x308
    1d28:	023d4f01 	eorseq	r4, sp, #1, 30
    1d2c:	01010006 	tsteq	r1, r6
    1d30:	08020500 	stmdaeq	r2, {r8, sl}
    1d34:	0308003e 	movweq	r0, #32830	; 0x803e
    1d38:	6b0105db 	blvs	434ac <_Min_Stack_Size+0x430ac>
    1d3c:	3d6a793f 	stclcc	9, cr7, [sl, #-252]!	; 0xffffff04
    1d40:	01000502 	tsteq	r0, r2, lsl #10
    1d44:	02050001 	andeq	r0, r5, #1
    1d48:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
    1d4c:	0105f903 	tsteq	r5, r3, lsl #18
    1d50:	68793f6c 	ldmdavs	r9!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp}^
    1d54:	01000502 	tsteq	r0, r2, lsl #10
    1d58:	02050001 	andeq	r0, r5, #1
    1d5c:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
    1d60:	0106a303 	tsteq	r6, r3, lsl #6
    1d64:	3e4f3f6c 	cdpcc	15, 4, cr3, cr15, cr12, {3}
    1d68:	01000502 	tsteq	r0, r2, lsl #10
    1d6c:	02050001 	andeq	r0, r5, #1
    1d70:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    1d74:	0106bc03 	tsteq	r6, r3, lsl #24
    1d78:	4169344b 	cmnmi	r9, fp, asr #8
    1d7c:	06022130 			; <UNDEFINED> instruction: 0x06022130
    1d80:	00010100 	andeq	r0, r1, r0, lsl #2
    1d84:	3ed80205 	cdpcc	2, 13, cr0, cr8, cr5, {0}
    1d88:	af030800 	svcge	0x00030800
    1d8c:	334b0107 	movtcc	r0, #45319	; 0xb107
    1d90:	21304269 	teqcs	r0, r9, ror #4
    1d94:	01000602 	tsteq	r0, r2, lsl #12
    1d98:	02050001 	andeq	r0, r5, #1
    1d9c:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
    1da0:	0107d103 	tsteq	r7, r3, lsl #2
    1da4:	215a344b 	cmpcs	sl, fp, asr #8
    1da8:	01000602 	tsteq	r0, r2, lsl #12
    1dac:	02050001 	andeq	r0, r5, #1
    1db0:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
    1db4:	0107ec03 	tsteq	r7, r3, lsl #24
    1db8:	4d353059 	ldcmi	0, cr3, [r5, #-356]!	; 0xfffffe9c
    1dbc:	4f5b3241 	svcmi	0x005b3241
    1dc0:	415b6940 	cmpmi	fp, r0, asr #18
    1dc4:	0d022132 	stfeqs	f2, [r2, #-200]	; 0xffffff38
    1dc8:	00010100 	andeq	r0, r1, r0, lsl #2
    1dcc:	3fa40205 	svccc	0x00a40205
    1dd0:	af030800 	svcge	0x00030800
    1dd4:	4d600108 	stfmie	f0, [r0, #-32]!	; 0xffffffe0
    1dd8:	875b3241 	ldrbhi	r3, [fp, -r1, asr #4]
    1ddc:	000c0276 	andeq	r0, ip, r6, ror r2
    1de0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1de4:	00400002 	subeq	r0, r0, r2
    1de8:	08de0308 	ldmeq	lr, {r3, r8, r9}^
    1dec:	3f5a7b01 	svccc	0x005a7b01
    1df0:	3f3e6b79 	svccc	0x003e6b79
    1df4:	05029395 	streq	r9, [r2, #-917]	; 0x395
    1df8:	00010100 	andeq	r0, r1, r0, lsl #2
    1dfc:	40740205 	rsbsmi	r0, r4, r5, lsl #4
    1e00:	92030800 	andls	r0, r3, #0, 16
    1e04:	30590109 	subscc	r0, r9, r9, lsl #2
    1e08:	32414d51 	subcc	r4, r1, #5184	; 0x1440
    1e0c:	5c6b5b77 	stclpl	11, cr5, [fp], #-476	; 0xfffffe24
    1e10:	69404f5b 	stmdbvs	r0, {r0, r1, r3, r4, r6, r8, r9, sl, fp, lr}^
    1e14:	01040200 	mrseq	r0, R12_usr
    1e18:	3f065806 	svccc	0x00065806
    1e1c:	02213241 	eoreq	r3, r1, #268435460	; 0x10000004
    1e20:	0101000d 	tsteq	r1, sp
    1e24:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    1e28:	03080041 	movweq	r0, #32833	; 0x8041
    1e2c:	600109e4 	andvs	r0, r1, r4, ror #19
    1e30:	5b32414d 	blpl	c9236c <_Min_Stack_Size+0xc91f6c>
    1e34:	0c027687 	stceq	6, cr7, [r2], {135}	; 0x87
    1e38:	0e010100 	adfeqs	f0, f1, f0
    1e3c:	02000004 	andeq	r0, r0, #4
    1e40:	00019800 	andeq	r9, r1, r0, lsl #16
    1e44:	fb010200 	blx	4264e <_Min_Stack_Size+0x4224e>
    1e48:	01000d0e 	tsteq	r0, lr, lsl #26
    1e4c:	00010101 	andeq	r0, r1, r1, lsl #2
    1e50:	00010000 	andeq	r0, r1, r0
    1e54:	6e690100 	powvse	f0, f1, f0
    1e58:	4f432f63 	svcmi	0x00432f63
    1e5c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1e60:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1e64:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1e68:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1e6c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1e70:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1e74:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1e78:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1e7c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1e80:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1e84:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e88:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1e90 <_Min_Stack_Size+0x1a90>
    1e8c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1e90:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1e94:	752f0063 	strvc	r0, [pc, #-99]!	; 1e39 <_Min_Stack_Size+0x1a39>
    1e98:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1e9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1ea0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1ea4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ea8:	616d2f62 	cmnvs	sp, r2, ror #30
    1eac:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1eb0:	752f0065 	strvc	r0, [pc, #-101]!	; 1e53 <_Min_Stack_Size+0x1a53>
    1eb4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1eb8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1ebc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1ec0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ec4:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    1ec8:	4f432f63 	svcmi	0x00432f63
    1ecc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1ed0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1ed4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1ed8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1edc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1ee0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1ee4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1ee8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1eec:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1ef0:	2f656369 	svccs	0x00656369
    1ef4:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1ef8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1efc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1f00:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1f04:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1f08:	636e6900 	cmnvs	lr, #0, 18
    1f0c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1f10:	5f584554 	svcpl	0x00584554
    1f14:	5f46344d 	svcpl	0x0046344d
    1f18:	334d5453 	movtcc	r5, #54355	; 0xd453
    1f1c:	2f344632 	svccs	0x00344632
    1f20:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1f24:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1f28:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1f2c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f30:	5f787834 	svcpl	0x00787834
    1f34:	50647453 	rsbpl	r7, r4, r3, asr r4
    1f38:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f3c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1f40:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1f44:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1f48:	636e6900 	cmnvs	lr, #0, 18
    1f4c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1f50:	5f584554 	svcpl	0x00584554
    1f54:	5f46344d 	svcpl	0x0046344d
    1f58:	334d5453 	movtcc	r5, #54355	; 0xd453
    1f5c:	2f344632 	svccs	0x00344632
    1f60:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1f64:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1f68:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1f6c:	2f534953 	svccs	0x00534953
    1f70:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1f74:	00656475 	rsbeq	r6, r5, r5, ror r4
    1f78:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1f7c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1f80:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    1f84:	632e6970 	teqvs	lr, #112, 18	; 0x1c0000
    1f88:	00000100 	andeq	r0, r0, r0, lsl #2
    1f8c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1f90:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    1f94:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1f98:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1f9c:	00000200 	andeq	r0, r0, r0, lsl #4
    1fa0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1fa4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1fa8:	00000300 	andeq	r0, r0, r0, lsl #6
    1fac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1fb0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1fb4:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1fb8:	73000004 	movwvc	r0, #4
    1fbc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1fc0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1fc4:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1fc8:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1fcc:	6f630000 	svcvs	0x00630000
    1fd0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1fd4:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1fd8:	00000600 	andeq	r0, r0, r0, lsl #12
    1fdc:	02050000 	andeq	r0, r5, #0
    1fe0:	08004180 	stmdaeq	r0, {r7, r8, lr}
    1fe4:	0101e003 	tsteq	r1, r3
    1fe8:	685a4d4e 	ldmdavs	sl, {r1, r2, r3, r6, r8, sl, fp, lr}^
    1fec:	4d685a4d 	vstmdbmi	r8!, {s11-s87}
    1ff0:	5a4d685a 	bpl	135c160 <_Min_Stack_Size+0x135bd60>
    1ff4:	6a5a4d68 	bvs	169559c <_Min_Stack_Size+0x169519c>
    1ff8:	025b5a4d 	subseq	r5, fp, #315392	; 0x4d000
    1ffc:	0101000f 	tsteq	r1, pc
    2000:	58020500 	stmdapl	r2, {r8, sl}
    2004:	03080042 	movweq	r0, #32834	; 0x8042
    2008:	5901029c 	stmdbpl	r1, {r2, r3, r4, r7, r9}
    200c:	3e2e1203 	cdpcc	2, 2, cr1, cr14, cr3, {0}
    2010:	674a0903 	strbvs	r0, [sl, -r3, lsl #18]
    2014:	302d2f2d 	eorcc	r2, sp, sp, lsr #30
    2018:	312c302c 	teqcc	ip, ip, lsr #32
    201c:	5d2b312b 	stfpls	f3, [fp, #-172]!	; 0xffffff54
    2020:	024b853f 	subeq	r8, fp, #264241152	; 0xfc00000
    2024:	01010005 	tsteq	r1, r5
    2028:	e0020500 	and	r0, r2, r0, lsl #10
    202c:	03080042 	movweq	r0, #32834	; 0x8042
    2030:	590102dc 	stmdbpl	r1, {r2, r3, r4, r6, r7, r9}
    2034:	0e034c83 	cdpeq	12, 0, cr4, cr3, cr3, {4}
    2038:	3f3f9f66 	svccc	0x003f9f66
    203c:	4d422f4c 	stclmi	15, cr2, [r2, #-304]	; 0xfffffed0
    2040:	2e130341 	cdpcs	3, 1, cr0, cr3, cr1, {2}
    2044:	94a26a68 	strtls	r6, [r2], #2664	; 0xa68
    2048:	f75bb05b 			; <UNDEFINED> instruction: 0xf75bb05b
    204c:	5b692408 	blpl	1a4b074 <_Min_Stack_Size+0x1a4ac74>
    2050:	0200405b 	andeq	r4, r0, #91	; 0x5b
    2054:	3c060104 	stfccs	f0, [r6], {4}
    2058:	322f3f06 	eorcc	r3, pc, #6, 30
    205c:	2d4b2fa1 	stclcs	15, cr2, [fp, #-644]	; 0xfffffd7c
    2060:	023d8749 	eorseq	r8, sp, #19136512	; 0x1240000
    2064:	0101000b 	tsteq	r1, fp
    2068:	90020500 	andls	r0, r2, r0, lsl #10
    206c:	03080044 	movweq	r0, #32836	; 0x8044
    2070:	4d0103e0 	stcmi	3, cr0, [r1, #-896]	; 0xfffffc80
    2074:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2078:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    207c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2080:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2084:	0044d802 	subeq	sp, r4, r2, lsl #16
    2088:	03fc0308 	mvnseq	r0, #8, 6	; 0x20000000
    208c:	3f3f4d01 	svccc	0x003f4d01
    2090:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 1f9c <_Min_Stack_Size+0x1b9c>
    2094:	01000502 	tsteq	r0, r2, lsl #10
    2098:	02050001 	andeq	r0, r5, #1
    209c:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    20a0:	01049903 	tsteq	r4, r3, lsl #18
    20a4:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    20a8:	01000502 	tsteq	r0, r2, lsl #10
    20ac:	02050001 	andeq	r0, r5, #1
    20b0:	08004550 	stmdaeq	r0, {r4, r6, r8, sl, lr}
    20b4:	0104b203 	tsteq	r4, r3, lsl #4
    20b8:	84953f6b 	ldrhi	r3, [r5], #3947	; 0xf6b
    20bc:	01000502 	tsteq	r0, r2, lsl #10
    20c0:	02050001 	andeq	r0, r5, #1
    20c4:	08004590 	stmdaeq	r0, {r4, r7, r8, sl, lr}
    20c8:	0104cd03 	tsteq	r4, r3, lsl #26
    20cc:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    20d0:	01010005 	tsteq	r1, r5
    20d4:	c8020500 	stmdagt	r2, {r8, sl}
    20d8:	03080045 	movweq	r0, #32837	; 0x8045
    20dc:	6a0104e1 	bvs	43468 <_Min_Stack_Size+0x43068>
    20e0:	0284954d 	addeq	r9, r4, #322961408	; 0x13400000
    20e4:	01010005 	tsteq	r1, r5
    20e8:	08020500 	stmdaeq	r2, {r8, sl}
    20ec:	03080046 	movweq	r0, #32838	; 0x8046
    20f0:	6a0104fb 	bvs	434e4 <_Min_Stack_Size+0x430e4>
    20f4:	0284955b 	addeq	r9, r4, #381681664	; 0x16c00000
    20f8:	01010005 	tsteq	r1, r5
    20fc:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    2100:	03080046 	movweq	r0, #32838	; 0x8046
    2104:	6a010593 	bvs	43758 <_Min_Stack_Size+0x43358>
    2108:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    210c:	01010005 	tsteq	r1, r5
    2110:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    2114:	03080046 	movweq	r0, #32838	; 0x8046
    2118:	6b0105b2 	blvs	437e8 <_Min_Stack_Size+0x433e8>
    211c:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    2120:	01010005 	tsteq	r1, r5
    2124:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    2128:	03080046 	movweq	r0, #32838	; 0x8046
    212c:	590105d7 	stmdbpl	r1, {r0, r1, r2, r4, r6, r7, r8, sl}
    2130:	9f4a0b03 	svcls	0x004a0b03
    2134:	02003f3f 	andeq	r3, r0, #63, 30	; 0xfc
    2138:	58060104 	stmdapl	r6, {r2, r8}
    213c:	004e4c06 	subeq	r4, lr, r6, lsl #24
    2140:	06010402 	streq	r0, [r1], -r2, lsl #8
    2144:	355a0658 	ldrbcc	r0, [sl, #-1624]	; 0x658
    2148:	95492d4b 	strbls	r2, [r9, #-3403]	; 0xd4b
    214c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2150:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2154:	00476802 	subeq	r6, r7, r2, lsl #16
    2158:	06a10308 	strteq	r0, [r1], r8, lsl #6
    215c:	023d4f01 	eorseq	r4, sp, #1, 30
    2160:	01010006 	tsteq	r1, r6
    2164:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    2168:	03080047 	movweq	r0, #32839	; 0x8047
    216c:	6b0106b1 	blvs	43c38 <_Min_Stack_Size+0x43838>
    2170:	0005023d 	andeq	r0, r5, sp, lsr r2
    2174:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2178:	0047a002 	subeq	sl, r7, r2
    217c:	078b0308 	streq	r0, [fp, r8, lsl #6]
    2180:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 1787 <_Min_Stack_Size+0x1387>
    2184:	00050284 	andeq	r0, r5, r4, lsl #5
    2188:	05000101 	streq	r0, [r0, #-257]	; 0x101
    218c:	0047e002 	subeq	lr, r7, r2
    2190:	07a10308 	streq	r0, [r1, r8, lsl #6]!
    2194:	02834f01 	addeq	r4, r3, #1, 30
    2198:	01010005 	tsteq	r1, r5
    219c:	04020500 	streq	r0, [r2], #-1280	; 0x500
    21a0:	03080048 	movweq	r0, #32840	; 0x8048
    21a4:	670107b3 			; <UNDEFINED> instruction: 0x670107b3
    21a8:	3f4f3f32 	svccc	0x004f3f32
    21ac:	00060221 	andeq	r0, r6, r1, lsr #4
    21b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    21b4:	00483802 	subeq	r3, r8, r2, lsl #16
    21b8:	07cc0308 	strbeq	r0, [ip, r8, lsl #6]
    21bc:	023d4f01 	eorseq	r4, sp, #1, 30
    21c0:	01010006 	tsteq	r1, r6
    21c4:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    21c8:	03080048 	movweq	r0, #32840	; 0x8048
    21cc:	880107f1 	stmdahi	r1, {r0, r4, r5, r6, r7, r8, r9, sl}
    21d0:	02a0953f 	adceq	r9, r0, #264241152	; 0xfc00000
    21d4:	01010005 	tsteq	r1, r5
    21d8:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    21dc:	03080048 	movweq	r0, #32840	; 0x8048
    21e0:	830108dd 	movwhi	r0, #6365	; 0x18dd
    21e4:	3f5a4d52 	svccc	0x005a4d52
    21e8:	0502a095 	streq	sl, [r2, #-149]	; 0x95
    21ec:	00010100 	andeq	r0, r1, r0, lsl #2
    21f0:	48fc0205 	ldmmi	ip!, {r0, r2, r9}^
    21f4:	89030800 	stmdbhi	r3, {fp}
    21f8:	34670109 	strbtcc	r0, [r7], #-265	; 0x109
    21fc:	21314185 	teqcs	r1, r5, lsl #3
    2200:	01000602 	tsteq	r0, r2, lsl #12
    2204:	02050001 	andeq	r0, r5, #1
    2208:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    220c:	0109b203 	tsteq	r9, r3, lsl #4
    2210:	0502596c 	streq	r5, [r2, #-2412]	; 0x96c
    2214:	00010100 	andeq	r0, r1, r0, lsl #2
    2218:	49540205 	ldmdbmi	r4, {r0, r2, r9}^
    221c:	cb030800 	blgt	c4224 <_Min_Stack_Size+0xc3e24>
    2220:	2f670109 	svccs	0x00670109
    2224:	5b4d776d 	blpl	135ffe0 <_Min_Stack_Size+0x135fbe0>
    2228:	04020069 	streq	r0, [r2], #-105	; 0x69
    222c:	06820601 	streq	r0, [r2], r1, lsl #12
    2230:	2131413f 	teqcs	r1, pc, lsr r1
    2234:	01000602 	tsteq	r0, r2, lsl #12
    2238:	02050001 	andeq	r0, r5, #1
    223c:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
    2240:	010a8203 	tsteq	sl, r3, lsl #4
    2244:	59773467 	ldmdbpl	r7!, {r0, r1, r2, r5, r6, sl, ip, sp}^
    2248:	01000502 	tsteq	r0, r2, lsl #10
    224c:	00024f01 	andeq	r4, r2, r1, lsl #30
    2250:	9a000200 	bls	2a58 <_Min_Stack_Size+0x2658>
    2254:	02000001 	andeq	r0, r0, #1
    2258:	0d0efb01 	vstreq	d15, [lr, #-4]
    225c:	01010100 	mrseq	r0, (UNDEF: 17)
    2260:	00000001 	andeq	r0, r0, r1
    2264:	01000001 	tsteq	r0, r1
    2268:	2f636e69 	svccs	0x00636e69
    226c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2270:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2164 <_Min_Stack_Size+0x1d64>
    2274:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2278:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    227c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 216c <_Min_Stack_Size+0x1d6c>
    2280:	61726269 	cmnvs	r2, r9, ror #4
    2284:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2288:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    228c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2290:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2294:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2298:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    229c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    22a0:	2f726576 	svccs	0x00726576
    22a4:	00637273 	rsbeq	r7, r3, r3, ror r2
    22a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    22b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22b8:	2f62696c 	svccs	0x0062696c
    22bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    22c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    22c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    22d0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22d4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    22d8:	2f636e69 	svccs	0x00636e69
    22dc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    22e0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 21d4 <_Min_Stack_Size+0x1dd4>
    22e4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    22e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    22ec:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 21dc <_Min_Stack_Size+0x1ddc>
    22f0:	61726269 	cmnvs	r2, r9, ror #4
    22f4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    22f8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    22fc:	442f5349 	strtmi	r5, [pc], #-841	; 2304 <_Min_Stack_Size+0x1f04>
    2300:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2304:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    2308:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    230c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2310:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    2314:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2318:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    231c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2320:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2324:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2328:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    232c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2330:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2334:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2338:	2f736569 	svccs	0x00736569
    233c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2340:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2344:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2348:	72655064 	rsbvc	r5, r5, #100	; 0x64
    234c:	5f687069 	svcpl	0x00687069
    2350:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2354:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2358:	6900636e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    235c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2360:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2364:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2368:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    236c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2370:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2374:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2378:	2f736569 	svccs	0x00736569
    237c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2380:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    2384:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2388:	73000065 	movwvc	r0, #101	; 0x65
    238c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2390:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2394:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0x55f
    2398:	00632e69 	rsbeq	r2, r3, r9, ror #28
    239c:	5f000001 	svcpl	0x00000001
    23a0:	61666564 	cmnvs	r6, r4, ror #10
    23a4:	5f746c75 	svcpl	0x00746c75
    23a8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    23ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    23b0:	73000002 	movwvc	r0, #2
    23b4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    23b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    23bc:	73000003 	movwvc	r0, #3
    23c0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    23c4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    23c8:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    23cc:	74730000 	ldrbtvc	r0, [r3], #-0
    23d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    23d4:	5f787834 	svcpl	0x00787834
    23d8:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    23dc:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    23e0:	6f630000 	svcvs	0x00630000
    23e4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    23e8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    23ec:	00000600 	andeq	r0, r0, r0, lsl #12
    23f0:	02050000 	andeq	r0, r5, #0
    23f4:	08004a00 	stmdaeq	r0, {r9, fp, lr}
    23f8:	0100ee03 	tsteq	r0, r3, lsl #28
    23fc:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
    2400:	09023d3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    2404:	00010100 	andeq	r0, r1, r0, lsl #2
    2408:	4a340205 	bmi	d02c24 <_Min_Stack_Size+0xd02824>
    240c:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
    2410:	364b0100 	strbcc	r0, [fp], -r0, lsl #2
    2414:	84834d30 	strhi	r4, [r3], #3376	; 0xd30
    2418:	8583775a 	strhi	r7, [r3, #1882]	; 0x75a
    241c:	2f86754d 	svccs	0x0086754d
    2420:	845b875a 	ldrbhi	r8, [fp], #-1882	; 0x75a
    2424:	01000702 	tsteq	r0, r2, lsl #14
    2428:	02050001 	andeq	r0, r5, #1
    242c:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
    2430:	0101b603 	tsteq	r1, r3, lsl #12
    2434:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    2438:	0005023d 	andeq	r0, r5, sp, lsr r2
    243c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2440:	004b3c02 	subeq	r3, fp, r2, lsl #24
    2444:	01c50308 	biceq	r0, r5, r8, lsl #6
    2448:	02674e01 	rsbeq	r4, r7, #1, 28
    244c:	01010008 	tsteq	r1, r8
    2450:	60020500 	andvs	r0, r2, r0, lsl #10
    2454:	0308004b 	movweq	r0, #32843	; 0x804b
    2458:	4b0101e3 	blmi	42bec <_Min_Stack_Size+0x427ec>
    245c:	30406832 	subcc	r6, r0, r2, lsr r8
    2460:	00080221 	andeq	r0, r8, r1, lsr #4
    2464:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2468:	004b9402 	subeq	r9, fp, r2, lsl #8
    246c:	01fa0308 	mvnseq	r0, r8, lsl #6
    2470:	023d4e01 	eorseq	r4, sp, #1, 28
    2474:	01010007 	tsteq	r1, r7
    2478:	b0020500 	andlt	r0, r2, r0, lsl #10
    247c:	0308004b 	movweq	r0, #32843	; 0x804b
    2480:	4b010288 	blmi	42ea8 <_Min_Stack_Size+0x42aa8>
    2484:	30406832 	subcc	r6, r0, r2, lsr r8
    2488:	00080222 	andeq	r0, r8, r2, lsr #4
    248c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2490:	004be402 	subeq	lr, fp, r2, lsl #8
    2494:	02a00308 	adceq	r0, r0, #8, 6	; 0x20000000
    2498:	023d4e01 	eorseq	r4, sp, #1, 28
    249c:	01010007 	tsteq	r1, r7
    24a0:	00000387 	andeq	r0, r0, r7, lsl #7
    24a4:	019c0002 	orrseq	r0, ip, r2
    24a8:	01020000 	mrseq	r0, (UNDEF: 2)
    24ac:	000d0efb 	strdeq	r0, [sp], -fp
    24b0:	01010101 	tsteq	r1, r1, lsl #2
    24b4:	01000000 	mrseq	r0, (UNDEF: 0)
    24b8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    24bc:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    24c0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    24c4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    24c8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    24cc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    24d0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    24d4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    24d8:	2f736569 	svccs	0x00736569
    24dc:	334d5453 	movtcc	r5, #54355	; 0xd453
    24e0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    24e4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    24e8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    24ec:	5f687069 	svcpl	0x00687069
    24f0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    24f4:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    24f8:	2f006372 	svccs	0x00006372
    24fc:	2f727375 	svccs	0x00727375
    2500:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2504:	2f656475 	svccs	0x00656475
    2508:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    250c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2370 <_Min_Stack_Size+0x1f70>
    2510:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2514:	2f00656e 	svccs	0x0000656e
    2518:	2f727375 	svccs	0x00727375
    251c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2520:	2f656475 	svccs	0x00656475
    2524:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2528:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    252c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2530:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2534:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2538:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    253c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2540:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2544:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2548:	2f736569 	svccs	0x00736569
    254c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2550:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    2554:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    2558:	2f54532f 	svccs	0x0054532f
    255c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2560:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2564:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2568:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    256c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    2570:	4f432f63 	svcmi	0x00432f63
    2574:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2578:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    257c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2580:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2584:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2588:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    258c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2590:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2594:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2598:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    259c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    25a0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 25a8 <_Min_Stack_Size+0x21a8>
    25a4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    25a8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    25ac:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    25b0:	4f432f63 	svcmi	0x00432f63
    25b4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    25b8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    25bc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    25c0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    25c4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    25c8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    25cc:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    25d0:	5349534d 	movtpl	r5, #37709	; 0x934d
    25d4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    25d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    25dc:	74730000 	ldrbtvc	r0, [r3], #-0
    25e0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25e4:	5f787834 	svcpl	0x00787834
    25e8:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    25ec:	00632e64 	rsbeq	r2, r3, r4, ror #28
    25f0:	5f000001 	svcpl	0x00000001
    25f4:	61666564 	cmnvs	r6, r4, ror #10
    25f8:	5f746c75 	svcpl	0x00746c75
    25fc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2600:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2604:	73000002 	movwvc	r0, #2
    2608:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    260c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2610:	73000003 	movwvc	r0, #3
    2614:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2618:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    261c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2620:	74730000 	ldrbtvc	r0, [r3], #-0
    2624:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2628:	5f787834 	svcpl	0x00787834
    262c:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    2630:	00682e64 	rsbeq	r2, r8, r4, ror #28
    2634:	63000005 	movwvs	r0, #5
    2638:	5f65726f 	svcpl	0x0065726f
    263c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    2640:	00060068 	andeq	r0, r6, r8, rrx
    2644:	05000000 	streq	r0, [r0, #-0]
    2648:	004c0002 	subeq	r0, ip, r2
    264c:	00e90308 	rsceq	r0, r9, r8, lsl #6
    2650:	595a3001 	ldmdbpl	sl, {r0, ip, sp}^
    2654:	01000102 	tsteq	r0, r2, lsl #2
    2658:	02050001 	andeq	r0, r5, #1
    265c:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
    2660:	0100fa03 	tsteq	r0, r3, lsl #20
    2664:	2f2f2f4c 	svccs	0x002f2f4c
    2668:	832e0e03 	teqhi	lr, #3, 28	; 0x30
    266c:	4c786777 	ldclmi	7, cr6, [r8], #-476	; 0xfffffe24
    2670:	4c5c4b4b 	mrrcmi	11, 4, r4, ip, cr11
    2674:	4c414b4b 	mcrrmi	11, 4, r4, r1, cr11
    2678:	4c414b4b 	mcrrmi	11, 4, r4, r1, cr11
    267c:	4b5d4b4b 	blmi	17553b0 <_Min_Stack_Size+0x1754fb0>
    2680:	4dcb4c4b 	stclmi	12, cr4, [fp, #300]	; 0x12c
    2684:	674b7783 	strbvs	r7, [fp, -r3, lsl #15]
    2688:	00070298 	muleq	r7, r8, r2
    268c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2690:	004d7802 	subeq	r7, sp, r2, lsl #16
    2694:	01d30308 	bicseq	r0, r3, r8, lsl #6
    2698:	3f3f4c01 	svccc	0x003f4c01
    269c:	3f3d3d3d 	svccc	0x003d3d3d
    26a0:	3d3d3f3f 	ldccc	15, cr3, [sp, #-252]!	; 0xffffff04
    26a4:	01000502 	tsteq	r0, r2, lsl #10
    26a8:	02050001 	andeq	r0, r5, #1
    26ac:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    26b0:	0101f203 	tsteq	r1, r3, lsl #4
    26b4:	06026730 			; <UNDEFINED> instruction: 0x06026730
    26b8:	00010100 	andeq	r0, r1, r0, lsl #2
    26bc:	4de40205 	sfmmi	f0, 2, [r4, #20]!
    26c0:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
    26c4:	68300101 	ldmdavs	r0!, {r0, r8}
    26c8:	01000602 	tsteq	r0, r2, lsl #12
    26cc:	02050001 	andeq	r0, r5, #1
    26d0:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
    26d4:	01028b03 	tsteq	r2, r3, lsl #22
    26d8:	68793f5c 	ldmdavs	r9!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    26dc:	01000702 	tsteq	r0, r2, lsl #14
    26e0:	02050001 	andeq	r0, r5, #1
    26e4:	08004e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, lr}
    26e8:	0102a403 	tsteq	r2, r3, lsl #8
    26ec:	2f2f2f4c 	svccs	0x002f2f4c
    26f0:	0d032f2f 	stceq	15, cr2, [r3, #-188]	; 0xffffff44
    26f4:	77834d2e 	strvc	r4, [r3, lr, lsr #26]
    26f8:	4b4b4b67 	blmi	12d549c <_Min_Stack_Size+0x12d509c>
    26fc:	322dad4b 	eorcc	sl, sp, #4800	; 0x12c0
    2700:	af4b4b67 	svcge	0x004b4b67
    2704:	0009024b 	andeq	r0, r9, fp, asr #4
    2708:	05000101 	streq	r0, [r0, #-257]	; 0x101
    270c:	004f1402 	subeq	r1, pc, r2, lsl #8
    2710:	02d80308 	sbcseq	r0, r8, #8, 6	; 0x20000000
    2714:	3f3f4c01 	svccc	0x003f4c01
    2718:	3f3f3f3f 	svccc	0x003f3f3f
    271c:	3f3f3f3f 	svccc	0x003f3f3f
    2720:	0005023d 	andeq	r0, r5, sp, lsr r2
    2724:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2728:	004f6802 	subeq	r6, pc, r2, lsl #16
    272c:	03850308 	orreq	r0, r5, #8, 6	; 0x20000000
    2730:	2f2f4c01 	svccs	0x002f4c01
    2734:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    2738:	834d2e0d 	movthi	r2, #56845	; 0xde0d
    273c:	4b4b6777 	blmi	12dc520 <_Min_Stack_Size+0x12dc120>
    2740:	2dad4b4b 	stccs	11, cr4, [sp, #300]!	; 0x12c
    2744:	4b4b6732 	blmi	12dc414 <_Min_Stack_Size+0x12dc014>
    2748:	09024caf 	stmdbeq	r2, {r0, r1, r2, r3, r5, r7, sl, fp, lr}
    274c:	00010100 	andeq	r0, r1, r0, lsl #2
    2750:	50440205 	subpl	r0, r4, r5, lsl #4
    2754:	ba030800 	blt	c475c <_Min_Stack_Size+0xc435c>
    2758:	3f4c0103 	svccc	0x004c0103
    275c:	3f3f3f3f 	svccc	0x003f3f3f
    2760:	3f3f3f3f 	svccc	0x003f3f3f
    2764:	05023d3f 	streq	r3, [r2, #-3391]	; 0xd3f
    2768:	00010100 	andeq	r0, r1, r0, lsl #2
    276c:	50980205 	addspl	r0, r8, r5, lsl #4
    2770:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    2774:	3f5c0103 	svccc	0x005c0103
    2778:	07026879 	smlsdxeq	r2, r9, r8, r6
    277c:	00010100 	andeq	r0, r1, r0, lsl #2
    2780:	50d00205 	sbcspl	r0, r0, r5, lsl #4
    2784:	fd030800 	stc2	8, cr0, [r3, #-0]
    2788:	3f5c0103 	svccc	0x005c0103
    278c:	07026879 	smlsdxeq	r2, r9, r8, r6
    2790:	00010100 	andeq	r0, r1, r0, lsl #2
    2794:	51080205 	tstpl	r8, r5, lsl #4
    2798:	94030800 	strls	r0, [r3], #-2048	; 0x800
    279c:	3f6d0104 	svccc	0x006d0104
    27a0:	68943d83 	ldmvs	r4, {r0, r1, r7, r8, sl, fp, ip, sp}
    27a4:	01000702 	tsteq	r0, r2, lsl #14
    27a8:	02050001 	andeq	r0, r5, #1
    27ac:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    27b0:	0104af03 	tsteq	r4, r3, lsl #30
    27b4:	07023d4f 	streq	r3, [r2, -pc, asr #26]
    27b8:	00010100 	andeq	r0, r1, r0, lsl #2
    27bc:	51780205 	cmnpl	r8, r5, lsl #4
    27c0:	f2030800 	vadd.i8	d0, d3, d0
    27c4:	3f6b0104 	svccc	0x006b0104
    27c8:	07027679 	smlsdxeq	r2, r9, r6, r7
    27cc:	00010100 	andeq	r0, r1, r0, lsl #2
    27d0:	51b40205 			; <UNDEFINED> instruction: 0x51b40205
    27d4:	91030800 	tstls	r3, r0, lsl #16
    27d8:	344b0105 	strbcc	r0, [fp], #-261	; 0x105
    27dc:	21314169 	teqcs	r1, r9, ror #2
    27e0:	01000802 	tsteq	r0, r2, lsl #16
    27e4:	02050001 	andeq	r0, r5, #1
    27e8:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
    27ec:	0105b303 	tsteq	r5, r3, lsl #6
    27f0:	07023d4f 	streq	r3, [r2, -pc, asr #26]
    27f4:	00010100 	andeq	r0, r1, r0, lsl #2
    27f8:	52040205 	andpl	r0, r4, #1342177280	; 0x50000000
    27fc:	c8030800 	stmdagt	r3, {fp}
    2800:	2f4b0105 	svccs	0x004b0105
    2804:	31406841 	cmpcc	r0, r1, asr #16
    2808:	01040200 	mrseq	r0, R12_usr
    280c:	3e066606 	cfmadd32cc	mvax0, mvfx6, mvfx6, mvfx6
    2810:	02213040 	eoreq	r3, r1, #64	; 0x40
    2814:	01010009 	tsteq	r1, r9
    2818:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    281c:	03080052 	movweq	r0, #32850	; 0x8052
    2820:	4d0105f0 	cfstr32mi	mvfx0, [r1, #-960]	; 0xfffffc40
    2824:	08023d3f 	stmdaeq	r2, {r0, r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    2828:	b5010100 	strlt	r0, [r1, #-256]	; 0x100
    282c:	02000004 	andeq	r0, r0, #4
    2830:	00019a00 	andeq	r9, r1, r0, lsl #20
    2834:	fb010200 	blx	4303e <_Min_Stack_Size+0x42c3e>
    2838:	01000d0e 	tsteq	r0, lr, lsl #26
    283c:	00010101 	andeq	r0, r1, r1, lsl #2
    2840:	00010000 	andeq	r0, r1, r0
    2844:	6e690100 	powvse	f0, f1, f0
    2848:	4f432f63 	svcmi	0x00432f63
    284c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2850:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2854:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2858:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    285c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2860:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2864:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2868:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    286c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2870:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2874:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2878:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2880 <_Min_Stack_Size+0x2480>
    287c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2880:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2884:	752f0063 	strvc	r0, [pc, #-99]!	; 2829 <_Min_Stack_Size+0x2429>
    2888:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    288c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2890:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2894:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2898:	616d2f62 	cmnvs	sp, r2, ror #30
    289c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    28a0:	752f0065 	strvc	r0, [pc, #-101]!	; 2843 <_Min_Stack_Size+0x2443>
    28a4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    28a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    28ac:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    28b0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    28b4:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    28b8:	4f432f63 	svcmi	0x00432f63
    28bc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    28c0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    28c4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    28c8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    28cc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    28d0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    28d4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    28d8:	5349534d 	movtpl	r5, #37709	; 0x934d
    28dc:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    28e0:	2f656369 	svccs	0x00656369
    28e4:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    28e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    28ec:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    28f0:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    28f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    28f8:	636e6900 	cmnvs	lr, #0, 18
    28fc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2900:	5f584554 	svcpl	0x00584554
    2904:	5f46344d 	svcpl	0x0046344d
    2908:	334d5453 	movtcc	r5, #54355	; 0xd453
    290c:	2f344632 	svccs	0x00344632
    2910:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2914:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2918:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    291c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2920:	5f787834 	svcpl	0x00787834
    2924:	50647453 	rsbpl	r7, r4, r3, asr r4
    2928:	70697265 	rsbvc	r7, r9, r5, ror #4
    292c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2930:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2934:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2938:	636e6900 	cmnvs	lr, #0, 18
    293c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2940:	5f584554 	svcpl	0x00584554
    2944:	5f46344d 	svcpl	0x0046344d
    2948:	334d5453 	movtcc	r5, #54355	; 0xd453
    294c:	2f344632 	svccs	0x00344632
    2950:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2954:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2958:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    295c:	2f534953 	svccs	0x00534953
    2960:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2964:	00656475 	rsbeq	r6, r5, r5, ror r4
    2968:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    296c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2970:	6c5f7878 	mrrcvs	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    2974:	2e636474 	mcrcs	4, 3, r6, cr3, cr4, {3}
    2978:	00010063 	andeq	r0, r1, r3, rrx
    297c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2980:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2984:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2988:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    298c:	00020068 	andeq	r0, r2, r8, rrx
    2990:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2994:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2998:	00030068 	andeq	r0, r3, r8, rrx
    299c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    29a0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    29a4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    29a8:	00000400 	andeq	r0, r0, r0, lsl #8
    29ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    29b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    29b4:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    29b8:	682e6364 	stmdavs	lr!, {r2, r5, r6, r8, r9, sp, lr}
    29bc:	00000500 	andeq	r0, r0, r0, lsl #10
    29c0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    29c4:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    29c8:	0600682e 	streq	r6, [r0], -lr, lsr #16
    29cc:	00000000 	andeq	r0, r0, r0
    29d0:	52800205 	addpl	r0, r0, #1342177280	; 0x50000000
    29d4:	fb030800 	blx	c49de <_Min_Stack_Size+0xc45de>
    29d8:	5a300100 	bpl	c02de0 <_Min_Stack_Size+0xc029e0>
    29dc:	00010259 	andeq	r0, r1, r9, asr r2
    29e0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    29e4:	00529c02 	subseq	r9, r2, r2, lsl #24
    29e8:	018c0308 	orreq	r0, ip, r8, lsl #6
    29ec:	2f2f4b01 	svccs	0x002f4b01
    29f0:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    29f4:	4b672e14 	blmi	19ce24c <_Min_Stack_Size+0x19cde4c>
    29f8:	934b6793 	movtls	r6, #46995	; 0xb793
    29fc:	67934b67 	ldrvs	r4, [r3, r7, ror #22]
    2a00:	8367924b 	cmnhi	r7, #-1342177276	; 0xb0000004
    2a04:	402d212d 	eormi	r2, sp, sp, lsr #2
    2a08:	ad674c4b 	stclge	12, cr4, [r7, #-300]!	; 0xfffffed4
    2a0c:	01000b02 	tsteq	r0, r2, lsl #22
    2a10:	02050001 	andeq	r0, r5, #1
    2a14:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    2a18:	0101cd03 	tsteq	r1, r3, lsl #26
    2a1c:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    2a20:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a24:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a28:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a2c:	01000502 	tsteq	r0, r2, lsl #10
    2a30:	02050001 	andeq	r0, r5, #1
    2a34:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
    2a38:	0101e803 	tsteq	r1, r3, lsl #16
    2a3c:	68793f5c 	ldmdavs	r9!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    2a40:	01000702 	tsteq	r0, r2, lsl #14
    2a44:	02050001 	andeq	r0, r5, #1
    2a48:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
    2a4c:	01028003 	tsteq	r2, r3
    2a50:	68793f5c 	ldmdavs	r9!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    2a54:	01000702 	tsteq	r0, r2, lsl #14
    2a58:	02050001 	andeq	r0, r5, #1
    2a5c:	080054a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, lr}
    2a60:	01029803 	tsteq	r2, r3, lsl #16
    2a64:	6767684d 	strbvs	r6, [r7, -sp, asr #16]!
    2a68:	0a026768 	beq	9c810 <_Min_Stack_Size+0x9c410>
    2a6c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a70:	54fc0205 	ldrbtpl	r0, [ip], #517	; 0x205
    2a74:	ac030800 	stcge	8, cr0, [r3], {-0}
    2a78:	3d4b0102 	stfcce	f0, [fp, #-8]
    2a7c:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    2a80:	00010100 	andeq	r0, r1, r0, lsl #2
    2a84:	55200205 	strpl	r0, [r0, #-517]!	; 0x205
    2a88:	ba030800 	blt	c4a90 <_Min_Stack_Size+0xc4690>
    2a8c:	3d4f0102 	stfcce	f0, [pc, #-8]	; 2a8c <_Min_Stack_Size+0x268c>
    2a90:	01000702 	tsteq	r0, r2, lsl #14
    2a94:	02050001 	andeq	r0, r5, #1
    2a98:	0800553c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, lr}
    2a9c:	0102cc03 	tsteq	r2, r3, lsl #24
    2aa0:	07023d4f 	streq	r3, [r2, -pc, asr #26]
    2aa4:	00010100 	andeq	r0, r1, r0, lsl #2
    2aa8:	55580205 	ldrbpl	r0, [r8, #-517]	; 0x205
    2aac:	e1030800 	tst	r3, r0, lsl #16
    2ab0:	2f5a0102 	svccs	0x005a0102
    2ab4:	2f2f2f2f 	svccs	0x002f2f2f
    2ab8:	4b2e1303 	blmi	b876cc <_Min_Stack_Size+0xb872cc>
    2abc:	674b6967 	strbvs	r6, [fp, -r7, ror #18]
    2ac0:	4b4d6769 	blmi	135c86c <_Min_Stack_Size+0x135c46c>
    2ac4:	67594b4b 	ldrbvs	r4, [r9, -fp, asr #22]
    2ac8:	4d67322d 	sfmmi	f3, 2, [r7, #-180]!	; 0xffffff4c
    2acc:	4d597783 	ldclmi	7, cr7, [r9, #-524]	; 0xfffffdf4
    2ad0:	8369674b 	cmnhi	r9, #19660800	; 0x12c0000
    2ad4:	0005024c 	andeq	r0, r5, ip, asr #4
    2ad8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2adc:	00568c02 	subseq	r8, r6, r2, lsl #24
    2ae0:	03af0308 			; <UNDEFINED> instruction: 0x03af0308
    2ae4:	3f3d4e01 	svccc	0x003d4e01
    2ae8:	3f3f3f3d 	svccc	0x003f3f3d
    2aec:	3f3d3d3d 	svccc	0x003d3d3d
    2af0:	3d3f3f4b 	ldccc	15, cr3, [pc, #-300]!	; 29cc <_Min_Stack_Size+0x25cc>
    2af4:	05023d3f 	streq	r3, [r2, #-3391]	; 0xd3f
    2af8:	00010100 	andeq	r0, r1, r0, lsl #2
    2afc:	57000205 	strpl	r0, [r0, -r5, lsl #4]
    2b00:	e0030800 	and	r0, r3, r0, lsl #16
    2b04:	3f6a0103 	svccc	0x006a0103
    2b08:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    2b0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2b10:	57380205 	ldrpl	r0, [r8, -r5, lsl #4]!
    2b14:	f9030800 			; <UNDEFINED> instruction: 0xf9030800
    2b18:	5a4d0103 	bpl	1342f2c <_Min_Stack_Size+0x1342b2c>
    2b1c:	02754c4b 	rsbseq	r4, r5, #19200	; 0x4b00
    2b20:	01010008 	tsteq	r1, r8
    2b24:	78020500 	stmdavc	r2, {r8, sl}
    2b28:	03080057 	movweq	r0, #32855	; 0x8057
    2b2c:	4b01048c 	blmi	43d64 <_Min_Stack_Size+0x43964>
    2b30:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    2b34:	00010100 	andeq	r0, r1, r0, lsl #2
    2b38:	57980205 	ldrpl	r0, [r8, r5, lsl #4]
    2b3c:	9d030800 	stcls	8, cr0, [r3, #-0]
    2b40:	68500104 	ldmdavs	r0, {r2, r8}^
    2b44:	02213040 	eoreq	r3, r1, #64	; 0x40
    2b48:	01010008 	tsteq	r1, r8
    2b4c:	c8020500 	stmdagt	r2, {r8, sl}
    2b50:	03080057 	movweq	r0, #32855	; 0x8057
    2b54:	750104b8 	strvc	r0, [r1, #-1208]	; 0x4b8
    2b58:	693f362f 	ldmdbvs	pc!, {r0, r1, r2, r3, r5, r9, sl, ip, sp}	; <UNPREDICTABLE>
    2b5c:	bf674b4b 	svclt	0x00674b4b
    2b60:	07023d6a 	streq	r3, [r2, -sl, ror #26]
    2b64:	00010100 	andeq	r0, r1, r0, lsl #2
    2b68:	58440205 	stmdapl	r4, {r0, r2, r9}^
    2b6c:	df030800 	svcle	0x00030800
    2b70:	3d4c0104 	stfcce	f0, [ip, #-16]
    2b74:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    2b78:	00010100 	andeq	r0, r1, r0, lsl #2
    2b7c:	58680205 	stmdapl	r8!, {r0, r2, r9}^
    2b80:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    2b84:	3f6a0104 	svccc	0x006a0104
    2b88:	023d6a79 	eorseq	r6, sp, #495616	; 0x79000
    2b8c:	01010007 	tsteq	r1, r7
    2b90:	a8020500 	stmdage	r2, {r8, sl}
    2b94:	03080058 	movweq	r0, #32856	; 0x8058
    2b98:	5901058e 	stmdbpl	r1, {r1, r2, r3, r7, r8, sl}
    2b9c:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    2ba0:	4b4b4b2e 	blmi	12d5860 <_Min_Stack_Size+0x12d5460>
    2ba4:	02302d67 	eorseq	r2, r0, #6592	; 0x19c0
    2ba8:	01010005 	tsteq	r1, r5
    2bac:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    2bb0:	03080058 	movweq	r0, #32856	; 0x8058
    2bb4:	4c0105a9 	cfstr32mi	mvfx0, [r1], {169}	; 0xa9
    2bb8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2bbc:	01000502 	tsteq	r0, r2, lsl #10
    2bc0:	02050001 	andeq	r0, r5, #1
    2bc4:	08005920 	stmdaeq	r0, {r5, r8, fp, ip, lr}
    2bc8:	0105bd03 	tsteq	r5, r3, lsl #26
    2bcc:	3d69678a 	stclcc	7, cr6, [r9, #-552]!	; 0xfffffdd8
    2bd0:	3e3e6b67 	vsubcc.f64	d6, d14, d23
    2bd4:	003e3e3e 	eorseq	r3, lr, lr, lsr lr
    2bd8:	06010402 	streq	r0, [r1], -r2, lsl #8
    2bdc:	3d3d063c 	ldccc	6, cr0, [sp, #-240]!	; 0xffffff10
    2be0:	3d31403f 	ldccc	0, cr4, [r1, #-252]!	; 0xffffff04
    2be4:	67763dae 	ldrbvs	r3, [r6, -lr, lsr #27]!
    2be8:	00070267 	andeq	r0, r7, r7, ror #4
    2bec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2bf0:	0059fc02 	subseq	pc, r9, r2, lsl #24
    2bf4:	05fa0308 	ldrbeq	r0, [sl, #776]!	; 0x308
    2bf8:	023d6801 	eorseq	r6, sp, #65536	; 0x10000
    2bfc:	01010005 	tsteq	r1, r5
    2c00:	18020500 	stmdane	r2, {r8, sl}
    2c04:	0308005a 	movweq	r0, #32858	; 0x805a
    2c08:	5a010689 	bpl	44634 <_Min_Stack_Size+0x44234>
    2c0c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c14:	005a3402 	subseq	r3, sl, r2, lsl #8
    2c18:	06990308 	ldreq	r0, [r9], r8, lsl #6
    2c1c:	66090301 	strvs	r0, [r9], -r1, lsl #6
    2c20:	3e4c3e3e 	mcrcc	14, 2, r3, cr12, cr14, {1}
    2c24:	0402004c 	streq	r0, [r2], #-76	; 0x4c
    2c28:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    2c2c:	4e3f3d3d 	mrcmi	13, 1, r3, cr15, cr13, {1}
    2c30:	5a4b3d40 	bpl	12d2138 <_Min_Stack_Size+0x12d1d38>
    2c34:	675a4b3d 	smmlarvs	sl, sp, fp, r4
    2c38:	023ee769 	eorseq	lr, lr, #27525120	; 0x1a40000
    2c3c:	01010005 	tsteq	r1, r5
    2c40:	00020500 	andeq	r0, r2, r0, lsl #10
    2c44:	0308005b 	movweq	r0, #32859	; 0x805b
    2c48:	5d0106d7 	stcpl	6, cr0, [r1, #-860]	; 0xfffffca4
    2c4c:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2c50:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    2c54:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    2c58:	403f3d3d 	eorsmi	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
    2c5c:	3e5a4b31 	vmovcc.s8	r4, d10[1]
    2c60:	003e3e3e 	eorseq	r3, lr, lr, lsr lr
    2c64:	06010402 	streq	r0, [r1], -r2, lsl #8
    2c68:	3d3d063c 	ldccc	6, cr0, [sp, #-240]!	; 0xffffff10
    2c6c:	cb32403f 	blgt	c92d70 <_Min_Stack_Size+0xc92970>
    2c70:	0005023e 	andeq	r0, r5, lr, lsr r2
    2c74:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c78:	005bc002 	subseq	ip, fp, r2
    2c7c:	07c90308 	strbeq	r0, [r9, r8, lsl #6]
    2c80:	783e6b01 	ldmdavc	lr!, {r0, r8, r9, fp, sp, lr}
    2c84:	00070276 	andeq	r0, r7, r6, ror r2
    2c88:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c8c:	005bfc02 	subseq	pc, fp, r2, lsl #24
    2c90:	07e30308 	strbeq	r0, [r3, r8, lsl #6]!
    2c94:	68334b01 	ldmdavs	r3!, {r0, r8, r9, fp, lr}
    2c98:	02213040 	eoreq	r3, r1, #64	; 0x40
    2c9c:	01010008 	tsteq	r1, r8
    2ca0:	30020500 	andcc	r0, r2, r0, lsl #10
    2ca4:	0308005c 	movweq	r0, #32860	; 0x805c
    2ca8:	4f0107ff 	svcmi	0x000107ff
    2cac:	0007023d 	andeq	r0, r7, sp, lsr r2
    2cb0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2cb4:	005c4c02 	subseq	r4, ip, r2, lsl #24
    2cb8:	08920308 	ldmeq	r2, {r3, r8, r9}
    2cbc:	68334b01 	ldmdavs	r3!, {r0, r8, r9, fp, lr}
    2cc0:	02003140 	andeq	r3, r0, #64, 2
    2cc4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2cc8:	30403e06 	subcc	r3, r0, r6, lsl #28
    2ccc:	00080221 	andeq	r0, r8, r1, lsr #4
    2cd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2cd4:	005c9c02 	subseq	r9, ip, r2, lsl #24
    2cd8:	08b80308 	ldmeq	r8!, {r3, r8, r9}
    2cdc:	023d4f01 	eorseq	r4, sp, #1, 30
    2ce0:	01010007 	tsteq	r1, r7
    2ce4:	00000522 	andeq	r0, r0, r2, lsr #10
    2ce8:	01980002 	orrseq	r0, r8, r2
    2cec:	01020000 	mrseq	r0, (UNDEF: 2)
    2cf0:	000d0efb 	strdeq	r0, [sp], -fp
    2cf4:	01010101 	tsteq	r1, r1, lsl #2
    2cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cfc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    2d00:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2d04:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2d08:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2d0c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2d10:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2d14:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2d18:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2d1c:	2f736569 	svccs	0x00736569
    2d20:	334d5453 	movtcc	r5, #54355	; 0xd453
    2d24:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2d28:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2d2c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2d30:	5f687069 	svcpl	0x00687069
    2d34:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2d38:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    2d3c:	2f006372 	svccs	0x00006372
    2d40:	2f727375 	svccs	0x00727375
    2d44:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2d48:	2f656475 	svccs	0x00656475
    2d4c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2d50:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2bb4 <_Min_Stack_Size+0x27b4>
    2d54:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2d58:	2f00656e 	svccs	0x0000656e
    2d5c:	2f727375 	svccs	0x00727375
    2d60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2d64:	2f656475 	svccs	0x00656475
    2d68:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2d6c:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    2d70:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2d74:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2d78:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2d7c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2d80:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2d84:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2d88:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2d8c:	2f736569 	svccs	0x00736569
    2d90:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2d94:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    2d98:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    2d9c:	2f54532f 	svccs	0x0054532f
    2da0:	334d5453 	movtcc	r5, #54355	; 0xd453
    2da4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2da8:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2dac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2db0:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    2db4:	4f432f63 	svcmi	0x00432f63
    2db8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2dbc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2dc0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2dc4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2dc8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2dcc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2dd0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2dd4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2dd8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2ddc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2de0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2de4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2dec <_Min_Stack_Size+0x29ec>
    2de8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2dec:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2df0:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    2df4:	4f432f63 	svcmi	0x00432f63
    2df8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2dfc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2e00:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2e04:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2e08:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2e0c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2e10:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2e14:	5349534d 	movtpl	r5, #37709	; 0x934d
    2e18:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2e1c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2e20:	74730000 	ldrbtvc	r0, [r3], #-0
    2e24:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2e28:	5f787834 	svcpl	0x00787834
    2e2c:	2e636d66 	cdpcs	13, 6, cr6, cr3, cr6, {3}
    2e30:	00010063 	andeq	r0, r1, r3, rrx
    2e34:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2e38:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2e3c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2e40:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2e44:	00020068 	andeq	r0, r2, r8, rrx
    2e48:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2e4c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2e50:	00030068 	andeq	r0, r3, r8, rrx
    2e54:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2e58:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2e5c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    2e60:	00000400 	andeq	r0, r0, r0, lsl #8
    2e64:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2e68:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2e6c:	6d665f78 	stclvs	15, cr5, [r6, #-480]!	; 0xfffffe20
    2e70:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2e74:	63000005 	movwvs	r0, #5
    2e78:	5f65726f 	svcpl	0x0065726f
    2e7c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    2e80:	00060068 	andeq	r0, r6, r8, rrx
    2e84:	05000000 	streq	r0, [r0, #-0]
    2e88:	005cb802 	subseq	fp, ip, r2, lsl #16
    2e8c:	01820308 	orreq	r0, r2, r8, lsl #6
    2e90:	873e4f01 	ldrhi	r4, [lr, -r1, lsl #30]!
    2e94:	02678376 	rsbeq	r8, r7, #-671088639	; 0xd8000001
    2e98:	01010008 	tsteq	r1, r8
    2e9c:	10020500 	andne	r0, r2, r0, lsl #10
    2ea0:	0308005d 	movweq	r0, #32861	; 0x805d
    2ea4:	4b01019d 	blmi	43520 <_Min_Stack_Size+0x43120>
    2ea8:	4b2e1a03 	blmi	b896bc <_Min_Stack_Size+0xb892bc>
    2eac:	2d222d2f 	stccs	13, cr2, [r2, #-188]!	; 0xffffff44
    2eb0:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    2eb4:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    2eb8:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    2ebc:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    2ec0:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    2ec4:	03207403 	teqeq	r0, #50331648	; 0x3000000
    2ec8:	da4c2e10 	ble	130e710 <_Min_Stack_Size+0x130e310>
    2ecc:	01040200 	mrseq	r0, R12_usr
    2ed0:	4c065806 	stcmi	8, cr5, [r6], {6}
    2ed4:	a2839168 	addge	r9, r3, #104, 2
    2ed8:	22493d59 	subcs	r3, r9, #5696	; 0x1640
    2edc:	22492249 	subcs	r2, r9, #-1879048188	; 0x90000004
    2ee0:	22492249 	subcs	r2, r9, #-1879048188	; 0x90000004
    2ee4:	207a033b 	rsbscs	r0, sl, fp, lsr r3
    2ee8:	032e0a03 	teqeq	lr, #12288	; 0x3000
    2eec:	3d3d5809 	ldccc	8, cr5, [sp, #-36]!	; 0xffffffdc
    2ef0:	22492249 	subcs	r2, r9, #-1879048188	; 0x90000004
    2ef4:	22492249 	subcs	r2, r9, #-1879048188	; 0x90000004
    2ef8:	0a031b3b 	beq	c9bec <_Min_Stack_Size+0xc97ec>
    2efc:	0802773c 	stmdaeq	r2, {r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}
    2f00:	00010100 	andeq	r0, r1, r0, lsl #2
    2f04:	5ea40205 	cdppl	2, 10, cr0, cr4, cr5, {0}
    2f08:	81030800 	tsthi	r3, r0, lsl #16
    2f0c:	3d4c0102 	stfcce	f0, [ip, #-8]
    2f10:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2f14:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2f18:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    2f1c:	4b4b4b3e 	blmi	12d5c1c <_Min_Stack_Size+0x12d581c>
    2f20:	4b4b4b4b 	blmi	12d5c54 <_Min_Stack_Size+0x12d5854>
    2f24:	4b4b4b4b 	blmi	12d5c58 <_Min_Stack_Size+0x12d5858>
    2f28:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
    2f2c:	01010005 	tsteq	r1, r5
    2f30:	80020500 	andhi	r0, r2, r0, lsl #10
    2f34:	0308005f 	movweq	r0, #32863	; 0x805f
    2f38:	6a0102ae 	bvs	439f8 <_Min_Stack_Size+0x435f8>
    2f3c:	02bccd3f 	adcseq	ip, ip, #4032	; 0xfc0
    2f40:	01010008 	tsteq	r1, r8
    2f44:	d4020500 	strle	r0, [r2], #-1280	; 0x500
    2f48:	0308005f 	movweq	r0, #32863	; 0x805f
    2f4c:	4e0102f7 	mcrmi	2, 0, r0, cr1, cr7, {7}
    2f50:	4b3d3d3f 	blmi	f52454 <_Min_Stack_Size+0xf52054>
    2f54:	4b3d3d5e 	blmi	f524d4 <_Min_Stack_Size+0xf520d4>
    2f58:	000a024c 	andeq	r0, sl, ip, asr #4
    2f5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2f60:	00603002 	rsbeq	r3, r0, r2
    2f64:	03960308 	orrseq	r0, r6, #8, 6	; 0x20000000
    2f68:	14034b01 	strne	r4, [r3], #-2817	; 0xb01
    2f6c:	222d3066 	eorcs	r3, sp, #102	; 0x66
    2f70:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2f74:	1b3b223b 	blne	ecb868 <_Min_Stack_Size+0xecb468>
    2f78:	3d3c0903 	ldccc	9, cr0, [ip, #-12]!
    2f7c:	22492249 	subcs	r2, r9, #-1879048188	; 0x90000004
    2f80:	493d3447 	ldmdbmi	sp!, {r0, r1, r2, r6, sl, ip, sp}
    2f84:	47224922 	strmi	r4, [r2, -r2, lsr #18]!
    2f88:	3d3d4d33 	ldccc	13, cr4, [sp, #-204]!	; 0xffffff34
    2f8c:	3e3d3d4f 	cdpcc	13, 3, cr3, cr13, cr15, {2}
    2f90:	01000902 	tsteq	r0, r2, lsl #18
    2f94:	02050001 	andeq	r0, r5, #1
    2f98:	080060fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp, lr}
    2f9c:	0103d703 	tsteq	r3, r3, lsl #14
    2fa0:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    2fa4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2fa8:	4b4b4b4b 	blmi	12d5cdc <_Min_Stack_Size+0x12d58dc>
    2fac:	4b4b4b4b 	blmi	12d5ce0 <_Min_Stack_Size+0x12d58e0>
    2fb0:	01000502 	tsteq	r0, r2, lsl #10
    2fb4:	02050001 	andeq	r0, r5, #1
    2fb8:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    2fbc:	0103f403 	tsteq	r3, r3, lsl #8
    2fc0:	783e3f6a 	ldmdavc	lr!, {r1, r3, r5, r6, r8, r9, sl, fp, ip, sp}
    2fc4:	69783e7a 	ldmdbvs	r8!, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}^
    2fc8:	01000c02 	tsteq	r0, r2, lsl #24
    2fcc:	02050001 	andeq	r0, r5, #1
    2fd0:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    2fd4:	01049c03 	tsteq	r4, r3, lsl #24
    2fd8:	783e3f6a 	ldmdavc	lr!, {r1, r3, r5, r6, r8, r9, sl, fp, ip, sp}
    2fdc:	69783e7a 	ldmdbvs	r8!, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}^
    2fe0:	01000c02 	tsteq	r0, r2, lsl #24
    2fe4:	02050001 	andeq	r0, r5, #1
    2fe8:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    2fec:	0104c303 	tsteq	r4, r3, lsl #6
    2ff0:	4f3f304b 	svcmi	0x003f304b
    2ff4:	0b02213f 	bleq	8b4f8 <_Min_Stack_Size+0x8b0f8>
    2ff8:	00010100 	andeq	r0, r1, r0, lsl #2
    2ffc:	62880205 	addvs	r0, r8, #1342177280	; 0x50000000
    3000:	83030800 	movwhi	r0, #14336	; 0x3800
    3004:	3d300105 	ldfccs	f0, [r0, #-20]!	; 0xffffffec
    3008:	4b4b4b3d 	blmi	12d5d04 <_Min_Stack_Size+0x12d5904>
    300c:	01000602 	tsteq	r0, r2, lsl #12
    3010:	02050001 	andeq	r0, r5, #1
    3014:	080062bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp, lr}
    3018:	01059403 	tsteq	r5, r3, lsl #8
    301c:	3e4a1503 	cdpcc	5, 4, cr1, cr10, cr3, {0}
    3020:	3a3b223b 	bcc	ecb914 <_Min_Stack_Size+0xecb514>
    3024:	22494b26 	subcs	r4, r9, #38912	; 0x9800
    3028:	1e492249 	cdpne	2, 4, cr2, cr9, cr9, {2}
    302c:	22494b26 	subcs	r4, r9, #38912	; 0x9800
    3030:	1e492249 	cdpne	2, 4, cr2, cr9, cr9, {2}
    3034:	22494b26 	subcs	r4, r9, #38912	; 0x9800
    3038:	1e492249 	cdpne	2, 4, cr2, cr9, cr9, {2}
    303c:	00080224 	andeq	r0, r8, r4, lsr #4
    3040:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3044:	00636802 	rsbeq	r6, r3, r2, lsl #16
    3048:	05c80308 	strbeq	r0, [r8, #776]	; 0x308
    304c:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    3050:	4b4b4b3d 	blmi	12d5d4c <_Min_Stack_Size+0x12d594c>
    3054:	4b4b4b4b 	blmi	12d5d88 <_Min_Stack_Size+0x12d5988>
    3058:	4b4b4b4b 	blmi	12d5d8c <_Min_Stack_Size+0x12d598c>
    305c:	0005024b 	andeq	r0, r5, fp, asr #4
    3060:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3064:	0063ec02 	rsbeq	lr, r3, r2, lsl #24
    3068:	05e20308 	strbeq	r0, [r2, #776]!	; 0x308
    306c:	793f5b01 	ldmdbvc	pc!, {r0, r8, r9, fp, ip, lr}	; <UNPREDICTABLE>
    3070:	00090268 	andeq	r0, r9, r8, ror #4
    3074:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3078:	00642802 	rsbeq	r2, r4, r2, lsl #16
    307c:	06aa0308 	strteq	r0, [sl], r8, lsl #6
    3080:	75674e01 	strbvc	r4, [r7, #-3585]!	; 0xe01
    3084:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    3088:	01010008 	tsteq	r1, r8
    308c:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    3090:	03080064 	movweq	r0, #32868	; 0x8064
    3094:	4c0106be 	stcmi	6, cr0, [r1], {190}	; 0xbe
    3098:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    309c:	2d2f2e1a 	stccs	14, cr2, [pc, #-104]!	; 303c <_Min_Stack_Size+0x2c3c>
    30a0:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    30a4:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    30a8:	2d222d22 	stccs	13, cr2, [r2, #-136]!	; 0xffffff78
    30ac:	2e780322 	cdpcs	3, 7, cr0, cr8, cr2, {1}
    30b0:	4c2e0a03 	stcmi	10, cr0, [lr], #-12
    30b4:	222d2f78 	eorcs	r2, sp, #120, 30	; 0x1e0
    30b8:	693d322c 	ldmdbvs	sp!, {r2, r3, r5, r9, ip, sp}
    30bc:	22574b4c 	subscs	r4, r7, #76, 22	; 0x13000
    30c0:	22572257 	subscs	r2, r7, #1879048197	; 0x70000005
    30c4:	22572257 	subscs	r2, r7, #1879048197	; 0x70000005
    30c8:	36587a03 	ldrbcc	r7, [r8], -r3, lsl #20
    30cc:	22574b86 	subscs	r4, r7, #137216	; 0x21800
    30d0:	33552257 	cmpcc	r5, #1879048197	; 0x70000005
    30d4:	3d315759 	ldccc	7, cr5, [r1, #-356]!	; 0xfffffe9c
    30d8:	00080277 	andeq	r0, r8, r7, ror r2
    30dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    30e0:	0065c802 	rsbeq	ip, r5, r2, lsl #16
    30e4:	07980308 	ldreq	r0, [r8, r8, lsl #6]
    30e8:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    30ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    30f0:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
    30f4:	4b4b4b4b 	blmi	12d5e28 <_Min_Stack_Size+0x12d5a28>
    30f8:	024c4b4b 	subeq	r4, ip, #76800	; 0x12c00
    30fc:	01010005 	tsteq	r1, r5
    3100:	50020500 	andpl	r0, r2, r0, lsl #10
    3104:	03080066 	movweq	r0, #32870	; 0x8066
    3108:	4b0107b6 	blmi	44fe8 <_Min_Stack_Size+0x44be8>
    310c:	222d2f36 	eorcs	r2, sp, #54, 30	; 0xd8
    3110:	33392249 	teqcc	r9, #-1879048188	; 0x90000004
    3114:	0008023e 	andeq	r0, r8, lr, lsr r2
    3118:	05000101 	streq	r0, [r0, #-257]	; 0x101
    311c:	00669002 	rsbeq	r9, r6, r2
    3120:	07d00308 	ldrbeq	r0, [r0, r8, lsl #6]
    3124:	3e344b01 	vaddcc.f64	d4, d4, d1
    3128:	02216a6a 	eoreq	r6, r1, #434176	; 0x6a000
    312c:	01010008 	tsteq	r1, r8
    3130:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    3134:	03080066 	movweq	r0, #32870	; 0x8066
    3138:	4e0107ea 	cdpmi	7, 0, cr0, cr1, cr10, {7}
    313c:	00070276 	andeq	r0, r7, r6, ror r2
    3140:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3144:	0066f002 	rsbeq	pc, r6, r2
    3148:	07f80308 	ldrbeq	r0, [r8, r8, lsl #6]!
    314c:	02754e01 	rsbseq	r4, r5, #1, 28
    3150:	01010007 	tsteq	r1, r7
    3154:	14020500 	strne	r0, [r2], #-1280	; 0x500
    3158:	03080067 	movweq	r0, #32871	; 0x8067
    315c:	6b010888 	blvs	45384 <_Min_Stack_Size+0x44f84>
    3160:	02afb03e 	adceq	fp, pc, #62	; 0x3e
    3164:	01010007 	tsteq	r1, r7
    3168:	60020500 	andvs	r0, r2, r0, lsl #10
    316c:	03080067 	movweq	r0, #32871	; 0x8067
    3170:	790108bc 	stmdbvc	r1, {r2, r3, r4, r5, r7, fp}
    3174:	4c773e3f 	ldclmi	14, cr3, [r7], #-252	; 0xffffff04
    3178:	7a7a4c77 	bvc	1e9635c <_Min_Stack_Size+0x1e95f5c>
    317c:	854c853f 	strbhi	r8, [ip, #-1343]	; 0x53f
    3180:	0277884c 	rsbseq	r8, r7, #76, 16	; 0x4c0000
    3184:	0101000d 	tsteq	r1, sp
    3188:	30020500 	andcc	r0, r2, r0, lsl #10
    318c:	03080068 	movweq	r0, #32872	; 0x8068
    3190:	59010989 	stmdbpl	r1, {r0, r3, r7, r8, fp}
    3194:	4c3e342f 	cfldrsmi	mvf3, [lr], #-188	; 0xffffff44
    3198:	4e4c4c4c 	cdpmi	12, 4, cr4, cr12, cr12, {2}
    319c:	31406840 	cmpcc	r0, r0, asr #16
    31a0:	000f0221 	andeq	r0, pc, r1, lsr #4
    31a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    31a8:	0068ac02 	rsbeq	sl, r8, r2, lsl #24
    31ac:	09c10308 	stmibeq	r1, {r3, r8, r9}^
    31b0:	843e5d01 	ldrthi	r5, [lr], #-3329	; 0xd01
    31b4:	874c844c 	strbhi	r8, [ip, -ip, asr #8]
    31b8:	000d0277 	andeq	r0, sp, r7, ror r2
    31bc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    31c0:	00692402 	rsbeq	r2, r9, r2, lsl #8
    31c4:	09ec0308 	stmibeq	ip!, {r3, r8, r9}^
    31c8:	2f2f5901 	svccs	0x002f5901
    31cc:	3e342f2f 	cdpcc	15, 3, cr2, cr4, cr15, {1}
    31d0:	4c4c4c4c 	mcrrmi	12, 4, r4, ip, cr12
    31d4:	4d403d4f 	stclmi	13, cr3, [r0, #-316]	; 0xfffffec4
    31d8:	01040200 	mrseq	r0, R12_usr
    31dc:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
    31e0:	02005b5c 	andeq	r5, r0, #92, 22	; 0x17000
    31e4:	3c060104 	stfccs	f0, [r6], {4}
    31e8:	30403e06 	subcc	r3, r0, r6, lsl #28
    31ec:	000e0221 	andeq	r0, lr, r1, lsr #4
    31f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    31f4:	0069d802 	rsbeq	sp, r9, r2, lsl #16
    31f8:	0ab40308 	beq	fed03e20 <_estack+0xdecd3e20>
    31fc:	923e5d01 	eorsls	r5, lr, #1, 26	; 0x40
    3200:	954c924c 	strbls	r9, [ip, #-588]	; 0x24c
    3204:	000d0268 	andeq	r0, sp, r8, ror #4
    3208:	01e80101 	mvneq	r0, r1, lsl #2
    320c:	00020000 	andeq	r0, r2, r0
    3210:	00000145 	andeq	r0, r0, r5, asr #2
    3214:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3218:	0101000d 	tsteq	r1, sp
    321c:	00000101 	andeq	r0, r0, r1, lsl #2
    3220:	00000100 	andeq	r0, r0, r0, lsl #2
    3224:	636e6901 	cmnvs	lr, #16384	; 0x4000
    3228:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    322c:	5f584554 	svcpl	0x00584554
    3230:	5f46344d 	svcpl	0x0046344d
    3234:	334d5453 	movtcc	r5, #54355	; 0xd453
    3238:	2f344632 	svccs	0x00344632
    323c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3240:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3244:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3248:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    324c:	5f787834 	svcpl	0x00787834
    3250:	50647453 	rsbpl	r7, r4, r3, asr r4
    3254:	70697265 	rsbvc	r7, r9, r5, ror #4
    3258:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    325c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3260:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3264:	73752f00 	cmnvc	r5, #0, 30
    3268:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    326c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3270:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3274:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3278:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    327c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    3280:	73752f00 	cmnvc	r5, #0, 30
    3284:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3288:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    328c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3290:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3294:	636e6900 	cmnvs	lr, #0, 18
    3298:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    329c:	5f584554 	svcpl	0x00584554
    32a0:	5f46344d 	svcpl	0x0046344d
    32a4:	334d5453 	movtcc	r5, #54355	; 0xd453
    32a8:	2f344632 	svccs	0x00344632
    32ac:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    32b0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    32b4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    32b8:	2f534953 	svccs	0x00534953
    32bc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    32c0:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    32c4:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    32c8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    32cc:	2f787834 	svccs	0x00787834
    32d0:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    32d4:	00656475 	rsbeq	r6, r5, r5, ror r4
    32d8:	2f636e69 	svccs	0x00636e69
    32dc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    32e0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 31d4 <_Min_Stack_Size+0x2dd4>
    32e4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    32e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    32ec:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 31dc <_Min_Stack_Size+0x2ddc>
    32f0:	61726269 	cmnvs	r2, r9, ror #4
    32f4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    32f8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    32fc:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    3300:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3304:	00006564 	andeq	r6, r0, r4, ror #10
    3308:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    330c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3310:	6e725f78 	mrcvs	15, 3, r5, cr2, cr8, {3}
    3314:	00632e67 	rsbeq	r2, r3, r7, ror #28
    3318:	5f000001 	svcpl	0x00000001
    331c:	61666564 	cmnvs	r6, r4, ror #10
    3320:	5f746c75 	svcpl	0x00746c75
    3324:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3328:	00682e73 	rsbeq	r2, r8, r3, ror lr
    332c:	73000002 	movwvc	r0, #2
    3330:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3334:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3338:	73000003 	movwvc	r0, #3
    333c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3340:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3344:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    3348:	6f630000 	svcvs	0x00630000
    334c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    3350:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    3354:	00000500 	andeq	r0, r0, r0, lsl #10
    3358:	02050000 	andeq	r0, r5, #0
    335c:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}
    3360:	0100e303 	tsteq	r0, r3, lsl #6
    3364:	024b4d30 	subeq	r4, fp, #48, 26	; 0xc00
    3368:	01010001 	tsteq	r1, r1
    336c:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    3370:	0308006a 	movweq	r0, #32874	; 0x806a
    3374:	5c0100f2 	stcpl	0, cr0, [r1], {242}	; 0xf2
    3378:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    337c:	01010007 	tsteq	r1, r7
    3380:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    3384:	0308006a 	movweq	r0, #32874	; 0x806a
    3388:	300101b0 			; <UNDEFINED> instruction: 0x300101b0
    338c:	0008022f 	andeq	r0, r8, pc, lsr #4
    3390:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3394:	006abc02 	rsbeq	fp, sl, r2, lsl #24
    3398:	028b0308 	addeq	r0, fp, #8, 6	; 0x20000000
    339c:	793f5c01 	ldmdbvc	pc!, {r0, sl, fp, ip, lr}	; <UNPREDICTABLE>
    33a0:	00070268 	andeq	r0, r7, r8, ror #4
    33a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    33a8:	006af402 	rsbeq	pc, sl, r2, lsl #8
    33ac:	02a50308 	adceq	r0, r5, #8, 6	; 0x20000000
    33b0:	69335901 	ldmdbvs	r3!, {r0, r8, fp, ip, lr}
    33b4:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    33b8:	01010009 	tsteq	r1, r9
    33bc:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    33c0:	0308006b 	movweq	r0, #32875	; 0x806b
    33c4:	5c0102c6 	sfmpl	f0, 4, [r1], {198}	; 0xc6
    33c8:	00080259 	andeq	r0, r8, r9, asr r2
    33cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    33d0:	006b5002 	rsbeq	r5, fp, r2
    33d4:	02d60308 	sbcseq	r0, r6, #8, 6	; 0x20000000
    33d8:	69335901 	ldmdbvs	r3!, {r0, r8, fp, ip, lr}
    33dc:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    33e0:	01010009 	tsteq	r1, r9
    33e4:	88020500 	stmdahi	r2, {r8, sl}
    33e8:	0308006b 	movweq	r0, #32875	; 0x806b
    33ec:	5d0102f4 	sfmpl	f0, 4, [r1, #-976]	; 0xfffffc30
    33f0:	00080259 	andeq	r0, r8, r9, asr r2
    33f4:	02db0101 	sbcseq	r0, fp, #1073741824	; 0x40000000
    33f8:	00020000 	andeq	r0, r2, r0
    33fc:	000001ce 	andeq	r0, r0, lr, asr #3
    3400:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3404:	0101000d 	tsteq	r1, sp
    3408:	00000101 	andeq	r0, r0, r1, lsl #2
    340c:	00000100 	andeq	r0, r0, r0, lsl #2
    3410:	636e6901 	cmnvs	lr, #16384	; 0x4000
    3414:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    3418:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    341c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3420:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3424:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    3428:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    342c:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3430:	00797265 	rsbseq	r7, r9, r5, ror #4
    3434:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3438:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    343c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3440:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3444:	2f62696c 	svccs	0x0062696c
    3448:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    344c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3450:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3454:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3458:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    345c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3460:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3464:	2f636e69 	svccs	0x00636e69
    3468:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    346c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3360 <_Min_Stack_Size+0x2f60>
    3470:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3474:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3478:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3368 <_Min_Stack_Size+0x2f68>
    347c:	61726269 	cmnvs	r2, r9, ror #4
    3480:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3484:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3488:	442f5349 	strtmi	r5, [pc], #-841	; 3490 <_Min_Stack_Size+0x3090>
    348c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3490:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    3494:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3498:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    349c:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    34a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    34a4:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    34a8:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    34ac:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    34b0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    34b4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    34b8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    34bc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    34c0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    34c4:	2f736569 	svccs	0x00736569
    34c8:	334d5453 	movtcc	r5, #54355	; 0xd453
    34cc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    34d0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    34d4:	72655064 	rsbvc	r5, r5, #100	; 0x64
    34d8:	5f687069 	svcpl	0x00687069
    34dc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    34e0:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    34e4:	6900636e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    34e8:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    34ec:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    34f0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    34f4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    34f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    34fc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3500:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3504:	2f736569 	svccs	0x00736569
    3508:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    350c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3510:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3514:	73000065 	movwvc	r0, #101	; 0x65
    3518:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    351c:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    3520:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3524:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3528:	2e797265 	cdpcs	2, 7, cr7, cr9, cr5, {3}
    352c:	00010063 	andeq	r0, r1, r3, rrx
    3530:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3534:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3538:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    353c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3540:	00020068 	andeq	r0, r2, r8, rrx
    3544:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3548:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    354c:	00030068 	andeq	r0, r3, r8, rrx
    3550:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3554:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3558:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    355c:	00000400 	andeq	r0, r0, r0, lsl #8
    3560:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3564:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3568:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    356c:	00682e61 	rsbeq	r2, r8, r1, ror #28
    3570:	73000005 	movwvc	r0, #5
    3574:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3578:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    357c:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0x55f
    3580:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3584:	73000005 	movwvc	r0, #5
    3588:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    358c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3590:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    3594:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3598:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    359c:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    35a0:	00050068 	andeq	r0, r5, r8, rrx
    35a4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    35a8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    35ac:	5f693932 	svcpl	0x00693932
    35b0:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    35b4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    35b8:	00682e79 	rsbeq	r2, r8, r9, ror lr
    35bc:	63000001 	movwvs	r0, #1
    35c0:	5f65726f 	svcpl	0x0065726f
    35c4:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    35c8:	00060068 	andeq	r0, r6, r8, rrx
    35cc:	05000000 	streq	r0, [r0, #-0]
    35d0:	006bac02 	rsbeq	sl, fp, r2, lsl #24
    35d4:	00fa0308 	rscseq	r0, sl, r8, lsl #6
    35d8:	59855c01 	stmibpl	r5, {r0, sl, fp, ip, lr}
    35dc:	2f2f2f2f 	svccs	0x002f2f2f
    35e0:	000a029f 	muleq	sl, pc, r2	; <UNPREDICTABLE>
    35e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    35e8:	006c0802 	rsbeq	r0, ip, r2, lsl #16
    35ec:	01920308 	orrseq	r0, r2, r8, lsl #6
    35f0:	02915901 	addseq	r5, r1, #16384	; 0x4000
    35f4:	0101000a 	tsteq	r1, sl
    35f8:	38020500 	stmdacc	r2, {r8, sl}
    35fc:	0308006c 	movweq	r0, #32876	; 0x806c
    3600:	5901019f 	stmdbpl	r1, {r0, r1, r2, r3, r4, r7, r8}
    3604:	000a0291 	muleq	sl, r1, r2
    3608:	05000101 	streq	r0, [r0, #-257]	; 0x101
    360c:	006c6802 	rsbeq	r6, ip, r2, lsl #16
    3610:	01ac0308 			; <UNDEFINED> instruction: 0x01ac0308
    3614:	02e55901 	rsceq	r5, r5, #16384	; 0x4000
    3618:	0101000a 	tsteq	r1, sl
    361c:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    3620:	0308006c 	movweq	r0, #32876	; 0x806c
    3624:	7a0101bc 	bvc	43d1c <_Min_Stack_Size+0x4391c>
    3628:	2f2f5b59 	svccs	0x002f5b59
    362c:	693fa02f 	ldmdbvs	pc!, {r0, r1, r2, r3, r5, sp, pc}	; <UNPREDICTABLE>
    3630:	2f2f2f2f 	svccs	0x002f2f2f
    3634:	2f2f2f5b 	svccs	0x002f2f5b
    3638:	06025a30 			; <UNDEFINED> instruction: 0x06025a30
    363c:	00010100 	andeq	r0, r1, r0, lsl #2
    3640:	6d380205 	lfmvs	f0, 4, [r8, #-20]!	; 0xffffffec
    3644:	e8030800 	stmda	r3, {fp}
    3648:	9f590101 	svcls	0x00590101
    364c:	01000702 	tsteq	r0, r2, lsl #14
    3650:	02050001 	andeq	r0, r5, #1
    3654:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
    3658:	0101f203 	tsteq	r1, r3, lsl #4
    365c:	5c3f4d40 	ldcpl	13, cr4, [pc], #-256	; 3564 <_Min_Stack_Size+0x3164>
    3660:	5b2f2f3d 	blpl	bcf35c <_Min_Stack_Size+0xbcef5c>
    3664:	3d3d5b3d 	fldmdbxcc	sp!, {d5-d34}	;@ Deprecated
    3668:	3d3f3d3d 	ldccc	13, cr3, [pc, #-244]!	; 357c <_Min_Stack_Size+0x317c>
    366c:	4b3f3d3d 	blmi	fd2b68 <_Min_Stack_Size+0xfd2768>
    3670:	023d3d4b 	eorseq	r3, sp, #4800	; 0x12c0
    3674:	01010010 	tsteq	r1, r0, lsl r0
    3678:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    367c:	0308006e 	movweq	r0, #32878	; 0x806e
    3680:	400102a3 	andmi	r0, r1, r3, lsr #5
    3684:	5a5b4c5b 	bpl	16d67f8 <_Min_Stack_Size+0x16d63f8>
    3688:	2f2f3d5c 	svccs	0x002f3d5c
    368c:	3d5b2f2f 	ldclcc	15, cr2, [fp, #-188]	; 0xffffff44
    3690:	3d5b5b5b 	vldrcc	d21, [fp, #-364]	; 0xfffffe94
    3694:	3f3d3d3d 	svccc	0x003d3d3d
    3698:	403d3d3d 	eorsmi	r3, sp, sp, lsr sp
    369c:	3d4c4d5b 	stclcc	13, cr4, [ip, #-364]	; 0xfffffe94
    36a0:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    36a4:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
    36a8:	3d4b3d3d 	stclcc	13, cr3, [fp, #-244]	; 0xffffff0c
    36ac:	4d3d3d3d 	ldcmi	13, cr3, [sp, #-244]!	; 0xffffff0c
    36b0:	4d3d4c4d 	ldcmi	12, cr4, [sp, #-308]!	; 0xfffffecc
    36b4:	16025959 			; <UNDEFINED> instruction: 0x16025959
    36b8:	00010100 	andeq	r0, r1, r0, lsl #2
    36bc:	6fb40205 	svcvs	0x00b40205
    36c0:	83030800 	movwhi	r0, #14336	; 0x3800
    36c4:	3f680103 	svccc	0x00680103
    36c8:	5d3d3d3d 	ldcpl	13, cr3, [sp, #-244]!	; 0xffffff0c
    36cc:	4c3d3d3d 	ldcmi	13, cr3, [sp], #-244	; 0xffffff0c
    36d0:	01000a02 	tsteq	r0, r2, lsl #20
    36d4:	0002f301 	andeq	pc, r2, r1, lsl #6
    36d8:	9c000200 	sfmls	f0, 4, [r0], {-0}
    36dc:	02000001 	andeq	r0, r0, #1
    36e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    36e4:	01010100 	mrseq	r0, (UNDEF: 17)
    36e8:	00000001 	andeq	r0, r0, r1
    36ec:	01000001 	tsteq	r0, r1
    36f0:	2f636e69 	svccs	0x00636e69
    36f4:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    36f8:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    36fc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3700:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3704:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    3708:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    370c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3710:	2f007972 	svccs	0x00007972
    3714:	2f727375 	svccs	0x00727375
    3718:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    371c:	2f656475 	svccs	0x00656475
    3720:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3724:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3588 <_Min_Stack_Size+0x3188>
    3728:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    372c:	2f00656e 	svccs	0x0000656e
    3730:	2f727375 	svccs	0x00727375
    3734:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3738:	2f656475 	svccs	0x00656475
    373c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3740:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    3744:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    3748:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    374c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3750:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3754:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3758:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    375c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3760:	2f736569 	svccs	0x00736569
    3764:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3768:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    376c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    3770:	2f54532f 	svccs	0x0054532f
    3774:	334d5453 	movtcc	r5, #54355	; 0xd453
    3778:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    377c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    3780:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3784:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    3788:	4f432f63 	svcmi	0x00432f63
    378c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3790:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3794:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3798:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    379c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    37a0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    37a4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    37a8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    37ac:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    37b0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    37b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    37b8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 37c0 <_Min_Stack_Size+0x33c0>
    37bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    37c0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    37c4:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    37c8:	4f432f63 	svcmi	0x00432f63
    37cc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    37d0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    37d4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    37d8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    37dc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    37e0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    37e4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    37e8:	5349534d 	movtpl	r5, #37709	; 0x934d
    37ec:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    37f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    37f4:	74730000 	ldrbtvc	r0, [r3], #-0
    37f8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    37fc:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    3800:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    3804:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3808:	735f7972 	cmpvc	pc, #1867776	; 0x1c8000
    380c:	6d617264 	sfmvs	f7, 2, [r1, #-400]!	; 0xfffffe70
    3810:	0100632e 	tsteq	r0, lr, lsr #6
    3814:	645f0000 	ldrbvs	r0, [pc], #-0	; 381c <_Min_Stack_Size+0x341c>
    3818:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    381c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3824 <_Min_Stack_Size+0x3424>
    3820:	73657079 	cmnvc	r5, #121	; 0x79
    3824:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3828:	74730000 	ldrbtvc	r0, [r3], #-0
    382c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    3830:	0300682e 	movweq	r6, #2094	; 0x82e
    3834:	74730000 	ldrbtvc	r0, [r3], #-0
    3838:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    383c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    3840:	00040068 	andeq	r0, r4, r8, rrx
    3844:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3848:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    384c:	665f7878 			; <UNDEFINED> instruction: 0x665f7878
    3850:	682e636d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}
    3854:	00000500 	andeq	r0, r0, r0, lsl #10
    3858:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    385c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3860:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3864:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3868:	00000500 	andeq	r0, r0, r0, lsl #10
    386c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3870:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3874:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3878:	00000000 	andeq	r0, r0, r0
    387c:	70100205 	andsvc	r0, r0, r5, lsl #4
    3880:	c1030800 	tstgt	r3, r0, lsl #16
    3884:	31410100 	mrscc	r0, (UNDEF: 81)
    3888:	30303050 	eorscc	r3, r0, r0, asr r0
    388c:	31303030 	teqcc	r0, r0, lsr r0
    3890:	2f2f3030 	svccs	0x002f3030
    3894:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 37e0 <_Min_Stack_Size+0x33e0>
    3898:	5b313d2f 	blpl	c52d5c <_Min_Stack_Size+0xc5295c>
    389c:	00030230 	andeq	r0, r3, r0, lsr r2
    38a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    38a4:	00708402 	rsbseq	r8, r0, r2, lsl #8
    38a8:	00fa0308 	rscseq	r0, sl, r8, lsl #6
    38ac:	1c034001 	stcne	0, cr4, [r3], {1}
    38b0:	2f2f2f4a 	svccs	0x002f2f4a
    38b4:	305a5931 	subscc	r5, sl, r1, lsr r9
    38b8:	5b305a5b 	blpl	c1a22c <_Min_Stack_Size+0xc19e2c>
    38bc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38c0:	405a5959 	subsmi	r5, sl, r9, asr r9
    38c4:	5959595b 	ldmdbpl	r9, {r0, r1, r3, r4, r6, r8, fp, ip, lr}^
    38c8:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38cc:	5a595959 	bpl	1659e38 <_Min_Stack_Size+0x1659a38>
    38d0:	59595b41 	ldmdbpl	r9, {r0, r6, r8, r9, fp, ip, lr}^
    38d4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38d8:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38dc:	595b415a 	ldmdbpl	fp, {r1, r3, r4, r6, r8, lr}^
    38e0:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38e4:	02593f5b 	subseq	r3, r9, #364	; 0x16c
    38e8:	0101000f 	tsteq	r1, pc
    38ec:	98020500 	stmdals	r2, {r8, sl}
    38f0:	03080072 	movweq	r0, #32882	; 0x8072
    38f4:	3e0101fa 	mcrcc	1, 0, r0, cr1, cr10, {7}
    38f8:	2f2f2f32 	svccs	0x002f2f32
    38fc:	04020030 	streq	r0, [r2], #-48	; 0x30
    3900:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3904:	2f404e78 	svccs	0x00404e78
    3908:	00302f2f 	eorseq	r2, r0, pc, lsr #30
    390c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3910:	4e780620 	cdpmi	6, 7, cr0, cr8, cr0, {1}
    3914:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3918:	01040200 	mrseq	r0, R12_usr
    391c:	78062006 	stmdavc	r6, {r1, r2, sp}
    3920:	0402004d 	streq	r0, [r2], #-77	; 0x4d
    3924:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3928:	2f434e78 	svccs	0x00434e78
    392c:	00302f2f 	eorseq	r2, r0, pc, lsr #30
    3930:	06010402 	streq	r0, [r1], -r2, lsl #8
    3934:	51780620 	cmnpl	r8, r0, lsr #12
    3938:	0402004c 	streq	r0, [r2], #-76	; 0x4c
    393c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3940:	00030277 	andeq	r0, r3, r7, ror r2
    3944:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3948:	00738402 	rsbseq	r8, r3, r2, lsl #8
    394c:	02da0308 	sbcseq	r0, sl, #8, 6	; 0x20000000
    3950:	4d316701 	ldcmi	7, cr6, [r1, #-4]!
    3954:	01040200 	mrseq	r0, R12_usr
    3958:	79062006 	stmdbvc	r6, {r1, r2, sp}
    395c:	02040200 	andeq	r0, r4, #0, 4
    3960:	04020023 	streq	r0, [r2], #-35	; 0x23
    3964:	02009302 	andeq	r9, r0, #134217728	; 0x8000000
    3968:	7a030204 	bvc	c4180 <_Min_Stack_Size+0xc3d80>
    396c:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    3970:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    3974:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
    3978:	01010003 	tsteq	r1, r3
    397c:	d8020500 	stmdale	r2, {r8, sl}
    3980:	03080073 	movweq	r0, #32883	; 0x8073
    3984:	670102fa 			; <UNDEFINED> instruction: 0x670102fa
    3988:	04020032 	streq	r0, [r2], #-50	; 0x32
    398c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3990:	04020079 	streq	r0, [r2], #-121	; 0x79
    3994:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    3998:	00850204 	addeq	r0, r5, r4, lsl #4
    399c:	37020402 	strcc	r0, [r2, -r2, lsl #8]
    39a0:	01040200 	mrseq	r0, R12_usr
    39a4:	43063c06 	movwmi	r3, #27654	; 0x6c06
    39a8:	01000302 	tsteq	r0, r2, lsl #6
    39ac:	02050001 	andeq	r0, r5, #1
    39b0:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    39b4:	01039403 	tsteq	r3, r3, lsl #8
    39b8:	02002f4b 	andeq	r2, r0, #300	; 0x12c
    39bc:	66060204 	strvs	r0, [r6], -r4, lsl #4
    39c0:	01040200 	mrseq	r0, R12_usr
    39c4:	023f063c 	eorseq	r0, pc, #60, 12	; 0x3c00000
    39c8:	01010008 	tsteq	r1, r8
    39cc:	0000033d 	andeq	r0, r0, sp, lsr r3
    39d0:	01be0002 			; <UNDEFINED> instruction: 0x01be0002
    39d4:	01020000 	mrseq	r0, (UNDEF: 2)
    39d8:	000d0efb 	strdeq	r0, [sp], -fp
    39dc:	01010101 	tsteq	r1, r1, lsl #2
    39e0:	01000000 	mrseq	r0, (UNDEF: 0)
    39e4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    39e8:	552f636e 	strpl	r6, [pc, #-878]!	; 3682 <_Min_Stack_Size+0x3282>
    39ec:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    39f0:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    39f4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    39f8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    39fc:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    3a00:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    3a04:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3a08:	752f0079 	strvc	r0, [pc, #-121]!	; 3997 <_Min_Stack_Size+0x3597>
    3a0c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3a10:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3a14:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3a18:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3a1c:	616d2f62 	cmnvs	sp, r2, ror #30
    3a20:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3a24:	752f0065 	strvc	r0, [pc, #-101]!	; 39c7 <_Min_Stack_Size+0x35c7>
    3a28:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3a2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3a30:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3a34:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3a38:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    3a3c:	4f432f63 	svcmi	0x00432f63
    3a40:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3a44:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3a48:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3a4c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3a50:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3a54:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3a58:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3a5c:	5349534d 	movtpl	r5, #37709	; 0x934d
    3a60:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3a64:	2f656369 	svccs	0x00656369
    3a68:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    3a6c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3a70:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3a74:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3a78:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3a7c:	636e6900 	cmnvs	lr, #0, 18
    3a80:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3a84:	5f584554 	svcpl	0x00584554
    3a88:	5f46344d 	svcpl	0x0046344d
    3a8c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3a90:	2f344632 	svccs	0x00344632
    3a94:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3a98:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3a9c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3aa0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3aa4:	5f787834 	svcpl	0x00787834
    3aa8:	50647453 	rsbpl	r7, r4, r3, asr r4
    3aac:	70697265 	rsbvc	r7, r9, r5, ror #4
    3ab0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3ab4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3ab8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3abc:	636e6900 	cmnvs	lr, #0, 18
    3ac0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3ac4:	5f584554 	svcpl	0x00584554
    3ac8:	5f46344d 	svcpl	0x0046344d
    3acc:	334d5453 	movtcc	r5, #54355	; 0xd453
    3ad0:	2f344632 	svccs	0x00344632
    3ad4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3ad8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3adc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3ae0:	2f534953 	svccs	0x00534953
    3ae4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3ae8:	00656475 	rsbeq	r6, r5, r5, ror r4
    3aec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3af0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3af4:	5f693932 	svcpl	0x00693932
    3af8:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    3afc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3b00:	336c5f79 	cmncc	ip, #484	; 0x1e4
    3b04:	30326467 	eorscc	r6, r2, r7, ror #8
    3b08:	0100632e 	tsteq	r0, lr, lsr #6
    3b0c:	645f0000 	ldrbvs	r0, [pc], #-0	; 3b14 <_Min_Stack_Size+0x3714>
    3b10:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    3b14:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3b1c <_Min_Stack_Size+0x371c>
    3b18:	73657079 	cmnvc	r5, #121	; 0x79
    3b1c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3b20:	74730000 	ldrbtvc	r0, [r3], #-0
    3b24:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    3b28:	0300682e 	movweq	r6, #2094	; 0x82e
    3b2c:	74730000 	ldrbtvc	r0, [r3], #-0
    3b30:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3b34:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    3b38:	00040068 	andeq	r0, r4, r8, rrx
    3b3c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3b40:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3b44:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    3b48:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    3b4c:	00050068 	andeq	r0, r5, r8, rrx
    3b50:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3b54:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3b58:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    3b5c:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    3b60:	00000500 	andeq	r0, r0, r0, lsl #10
    3b64:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3b68:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3b6c:	645f6939 	ldrbvs	r6, [pc], #-2361	; 3b74 <_Min_Stack_Size+0x3774>
    3b70:	6f637369 	svcvs	0x00637369
    3b74:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3b78:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    3b7c:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    3b80:	00010068 	andeq	r0, r1, r8, rrx
    3b84:	726f6300 	rsbvc	r6, pc, #0, 6
    3b88:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3b8c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    3b90:	00000006 	andeq	r0, r0, r6
    3b94:	58020500 	stmdapl	r2, {r8, sl}
    3b98:	03080074 	movweq	r0, #32884	; 0x8074
    3b9c:	4b0100e2 	blmi	43f2c <_Min_Stack_Size+0x43b2c>
    3ba0:	2d67314d 	stfcse	f3, [r7, #-308]!	; 0xfffffecc
    3ba4:	67692d2f 	strbvs	r2, [r9, -pc, lsr #26]!
    3ba8:	75776a2d 	ldrbvc	r6, [r7, #-2605]!	; 0xa2d
    3bac:	01000302 	tsteq	r0, r2, lsl #6
    3bb0:	02050001 	andeq	r0, r5, #1
    3bb4:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
    3bb8:	0100fc03 	tsteq	r0, r3, lsl #24
    3bbc:	675b6940 	ldrbvs	r6, [fp, -r0, asr #18]
    3bc0:	01000302 	tsteq	r0, r2, lsl #6
    3bc4:	02050001 	andeq	r0, r5, #1
    3bc8:	08007500 	stmdaeq	r0, {r8, sl, ip, sp, lr}
    3bcc:	01019003 	tsteq	r1, r3
    3bd0:	76774d4b 	ldrbtvc	r4, [r7], -fp, asr #26
    3bd4:	2d2f5b5a 	vstmdbcs	pc!, {d5-<overflow reg d49>}
    3bd8:	75776969 	ldrbvc	r6, [r7, #-2409]!	; 0x969
    3bdc:	01000302 	tsteq	r0, r2, lsl #6
    3be0:	02050001 	andeq	r0, r5, #1
    3be4:	08007584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp, lr}
    3be8:	0101b303 	tsteq	r1, r3, lsl #6
    3bec:	5b59765c 	blpl	1661564 <_Min_Stack_Size+0x1661164>
    3bf0:	00030275 	andeq	r0, r3, r5, ror r2
    3bf4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3bf8:	0075c402 	rsbseq	ip, r5, r2, lsl #8
    3bfc:	01c90308 	biceq	r0, r9, r8, lsl #6
    3c00:	59765c01 	ldmdbpl	r6!, {r0, sl, fp, ip, lr}^
    3c04:	0302755b 	movweq	r7, #9563	; 0x255b
    3c08:	00010100 	andeq	r0, r1, r0, lsl #2
    3c0c:	76040205 	strvc	r0, [r4], -r5, lsl #4
    3c10:	dd030800 	stcle	8, cr0, [r3, #-0]
    3c14:	764e0101 	strbvc	r0, [lr], -r1, lsl #2
    3c18:	6a2d2f5b 	bvs	b4f98c <_Min_Stack_Size+0xb4f58c>
    3c1c:	00030275 	andeq	r0, r3, r5, ror r2
    3c20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c24:	00764c02 	rsbseq	r4, r6, r2, lsl #24
    3c28:	01f60308 	mvnseq	r0, r8, lsl #6
    3c2c:	5a765c01 	bpl	1d9ac38 <_Min_Stack_Size+0x1d9a838>
    3c30:	0302755b 	movweq	r7, #9563	; 0x255b
    3c34:	00010100 	andeq	r0, r1, r0, lsl #2
    3c38:	768c0205 	strvc	r0, [ip], r5, lsl #4
    3c3c:	8a030800 	bhi	c5c44 <_Min_Stack_Size+0xc5844>
    3c40:	68400102 	stmdavs	r0, {r1, r8}^
    3c44:	00040221 	andeq	r0, r4, r1, lsr #4
    3c48:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c4c:	0076a802 	rsbseq	sl, r6, r2, lsl #16
    3c50:	029b0308 	addseq	r0, fp, #8, 6	; 0x20000000
    3c54:	4d3e8701 	ldcmi	7, cr8, [lr, #-4]!
    3c58:	59224d4d 	stmdbpl	r2!, {r0, r2, r3, r6, r8, sl, fp, lr}
    3c5c:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    3c60:	4b443801 	blmi	1111c6c <_Min_Stack_Size+0x111186c>
    3c64:	01000602 	tsteq	r0, r2, lsl #12
    3c68:	02050001 	andeq	r0, r5, #1
    3c6c:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}
    3c70:	0102be03 	tsteq	r2, r3, lsl #28
    3c74:	4d5c3e83 	ldclmi	14, cr3, [ip, #-524]	; 0xfffffdf4
    3c78:	75234d4d 	strvc	r4, [r3, #-3405]!	; 0xd4d
    3c7c:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    3c80:	09033701 	stmdbeq	r3, {r0, r8, r9, sl, ip, sp}
    3c84:	05024b3c 	streq	r4, [r2, #-2876]	; 0xb3c
    3c88:	00010100 	andeq	r0, r1, r0, lsl #2
    3c8c:	77740205 	ldrbvc	r0, [r4, -r5, lsl #4]!
    3c90:	e0030800 	and	r0, r3, r0, lsl #16
    3c94:	5b410102 	blpl	10440a4 <_Min_Stack_Size+0x1043ca4>
    3c98:	4c4d4d4d 	mcrrmi	13, 4, r4, sp, cr13
    3c9c:	2f5a5959 	svccs	0x005a5959
    3ca0:	2f312f2f 	svccs	0x00312f2f
    3ca4:	3d693d69 	stclcc	13, cr3, [r9, #-420]!	; 0xfffffe5c
    3ca8:	3d2f3d69 	stccc	13, cr3, [pc, #-420]!	; 3b0c <_Min_Stack_Size+0x370c>
    3cac:	432f2f2f 	teqmi	pc, #47, 30	; 0xbc
    3cb0:	5b2f2f2f 	blpl	bcf974 <_Min_Stack_Size+0xbcf574>
    3cb4:	2f2f2f4d 	svccs	0x002f2f4d
    3cb8:	4d692f2f 	stclmi	15, cr2, [r9, #-188]!	; 0xffffff44
    3cbc:	682f2f2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3cc0:	0b02672f 	bleq	9d984 <_Min_Stack_Size+0x9d584>
    3cc4:	00010100 	andeq	r0, r1, r0, lsl #2
    3cc8:	78ac0205 	stmiavc	ip!, {r0, r2, r9}
    3ccc:	ba030800 	blt	c5cd4 <_Min_Stack_Size+0xc58d4>
    3cd0:	4b5a0103 	blmi	16840e4 <_Min_Stack_Size+0x1683ce4>
    3cd4:	04020022 	streq	r0, [r2], #-34	; 0x22
    3cd8:	00740601 	rsbseq	r0, r4, r1, lsl #12
    3cdc:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ce0:	4b687a56 	blmi	1a22640 <_Min_Stack_Size+0x1a22240>
    3ce4:	04020022 	streq	r0, [r2], #-34	; 0x22
    3ce8:	00740601 	rsbseq	r0, r4, r1, lsl #12
    3cec:	06010402 	streq	r0, [r1], -r2, lsl #8
    3cf0:	02597a56 	subseq	r7, r9, #352256	; 0x56000
    3cf4:	01010008 	tsteq	r1, r8
    3cf8:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    3cfc:	03080079 	movweq	r0, #32889	; 0x8079
    3d00:	000103d6 	ldrdeq	r0, [r1], -r6
    3d04:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    3d08:	01000102 	tsteq	r0, r2, lsl #2
    3d0c:	0009cd01 	andeq	ip, r9, r1, lsl #26
    3d10:	24000200 	strcs	r0, [r0], #-512	; 0x200
    3d14:	02000002 	andeq	r0, r0, #2
    3d18:	0d0efb01 	vstreq	d15, [lr, #-4]
    3d1c:	01010100 	mrseq	r0, (UNDEF: 17)
    3d20:	00000001 	andeq	r0, r0, r1
    3d24:	01000001 	tsteq	r0, r1
    3d28:	2f636e69 	svccs	0x00636e69
    3d2c:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    3d30:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    3d34:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3d38:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3d3c:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    3d40:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    3d44:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3d48:	2f007972 	svccs	0x00007972
    3d4c:	2f727375 	svccs	0x00727375
    3d50:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3d54:	2f656475 	svccs	0x00656475
    3d58:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3d5c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3bc0 <_Min_Stack_Size+0x37c0>
    3d60:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3d64:	2f00656e 	svccs	0x0000656e
    3d68:	2f727375 	svccs	0x00727375
    3d6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3d70:	2f656475 	svccs	0x00656475
    3d74:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3d78:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    3d7c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    3d80:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3d84:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3d88:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3d8c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3d90:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3d94:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3d98:	2f736569 	svccs	0x00736569
    3d9c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3da0:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    3da4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    3da8:	2f54532f 	svccs	0x0054532f
    3dac:	334d5453 	movtcc	r5, #54355	; 0xd453
    3db0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3db4:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    3db8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3dbc:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    3dc0:	4f432f63 	svcmi	0x00432f63
    3dc4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3dc8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3dcc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3dd0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3dd4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3dd8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3ddc:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3de0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3de4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3de8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3dec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3df0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3df8 <_Min_Stack_Size+0x39f8>
    3df4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3df8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3dfc:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    3e00:	74552f63 	ldrbvc	r2, [r5], #-3939	; 0xf63
    3e04:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xc69
    3e08:	2f736569 	svccs	0x00736569
    3e0c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3e10:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    3e14:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    3e18:	6f637369 	svcvs	0x00637369
    3e1c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3e20:	2f2e2e2f 	svccs	0x002e2e2f
    3e24:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    3e28:	69006e6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    3e2c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    3e30:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3e34:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3e38:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3e3c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3e40:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3e44:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3e48:	2f736569 	svccs	0x00736569
    3e4c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3e50:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3e54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3e58:	73000065 	movwvc	r0, #101	; 0x65
    3e5c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e60:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    3e64:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e68:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3e6c:	5f797265 	svcpl	0x00797265
    3e70:	2e64636c 	cdpcs	3, 6, cr6, cr4, cr12, {3}
    3e74:	00010063 	andeq	r0, r1, r3, rrx
    3e78:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3e7c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3e80:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e84:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3e88:	00020068 	andeq	r0, r2, r8, rrx
    3e8c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3e90:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3e94:	00030068 	andeq	r0, r3, r8, rrx
    3e98:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3e9c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3ea0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3ea4:	00000400 	andeq	r0, r0, r0, lsl #8
    3ea8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3eac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3eb0:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    3eb4:	682e6364 	stmdavs	lr!, {r2, r5, r6, r8, r9, sp, lr}
    3eb8:	00000500 	andeq	r0, r0, r0, lsl #10
    3ebc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ec0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3ec4:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    3ec8:	2e643261 	cdpcs	2, 6, cr3, cr4, cr1, {3}
    3ecc:	00050068 	andeq	r0, r5, r8, rrx
    3ed0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3ed4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3ed8:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    3edc:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    3ee0:	00050068 	andeq	r0, r5, r8, rrx
    3ee4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3ee8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3eec:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    3ef0:	682e6970 	stmdavs	lr!, {r4, r5, r6, r8, fp, sp, lr}
    3ef4:	00000500 	andeq	r0, r0, r0, lsl #10
    3ef8:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xf66
    3efc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3f00:	73000006 	movwvc	r0, #6
    3f04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3f08:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    3f0c:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f10:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3f14:	5f797265 	svcpl	0x00797265
    3f18:	2e64636c 	cdpcs	3, 6, cr6, cr4, cr12, {3}
    3f1c:	00010068 	andeq	r0, r1, r8, rrx
    3f20:	726f6300 	rsbvc	r6, pc, #0, 6
    3f24:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3f28:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    3f2c:	66000007 	strvs	r0, [r0], -r7
    3f30:	73746e6f 	cmnvc	r4, #1776	; 0x6f0
    3f34:	0600632e 	streq	r6, [r0], -lr, lsr #6
    3f38:	00000000 	andeq	r0, r0, r0
    3f3c:	79440205 	stmdbvc	r4, {r0, r2, r9}^
    3f40:	f2030800 	vadd.i8	d0, d3, d0
    3f44:	31400100 	mrscc	r0, (UNDEF: 80)
    3f48:	2f5b3f4d 	svccs	0x005b3f4d
    3f4c:	2f5b2f2f 	svccs	0x005b2f2f
    3f50:	3d5a3d5a 	ldclcc	13, cr3, [sl, #-360]	; 0xfffffe98
    3f54:	5959595b 	ldmdbpl	r9, {r0, r1, r3, r4, r6, r8, fp, ip, lr}^
    3f58:	2f3e5a59 	svccs	0x003e5a59
    3f5c:	5b2f2f2f 	blpl	bcfc20 <_Min_Stack_Size+0xbcf820>
    3f60:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    3f64:	2f3e5a59 	svccs	0x003e5a59
    3f68:	5b2f2f2f 	blpl	bcfc2c <_Min_Stack_Size+0xbcf82c>
    3f6c:	3d5a5959 	ldclcc	9, cr5, [sl, #-356]	; 0xfffffe9c
    3f70:	2f2f2f2f 	svccs	0x002f2f2f
    3f74:	2f5a595b 	svccs	0x005a595b
    3f78:	2f2f2f2f 	svccs	0x002f2f2f
    3f7c:	2f3d5a5b 	svccs	0x003d5a5b
    3f80:	5b2f2f2f 	blpl	bcfc44 <_Min_Stack_Size+0xbcf844>
    3f84:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    3f88:	2f2f3e5a 	svccs	0x002f3e5a
    3f8c:	02592f2f 	subseq	r2, r9, #47, 30	; 0xbc
    3f90:	01010012 	tsteq	r1, r2, lsl r0
    3f94:	68020500 	stmdavs	r2, {r8, sl}
    3f98:	0308007b 	movweq	r0, #32891	; 0x807b
    3f9c:	400101e7 	andmi	r0, r1, r7, ror #3
    3fa0:	313f3d2f 	teqcc	pc, pc, lsr #26
    3fa4:	315b5b31 	cmpcc	fp, r1, lsr fp
    3fa8:	30303033 	eorscc	r3, r0, r3, lsr r0
    3fac:	362f2f31 	qasxcc	r2, pc, r1	; <UNPREDICTABLE>
    3fb0:	003e4d59 	eorseq	r4, lr, r9, asr sp
    3fb4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3fb8:	306c0620 	rsbcc	r0, ip, r0, lsr #12
    3fbc:	3e303030 	mrccc	0, 1, r3, cr0, cr0, {1}
    3fc0:	4b3e3e3e 	blmi	f938c0 <_Min_Stack_Size+0xf934c0>
    3fc4:	01000302 	tsteq	r0, r2, lsl #6
    3fc8:	02050001 	andeq	r0, r5, #1
    3fcc:	08007c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp, lr}
    3fd0:	0102bc03 	tsteq	r2, r3, lsl #24
    3fd4:	2f3c0903 	svccs	0x003c0903
    3fd8:	303f2f3d 	eorscc	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
    3fdc:	2f2f2f30 	svccs	0x002f2f30
    3fe0:	40353d30 	eorsmi	r3, r5, r0, lsr sp
    3fe4:	5c3f3f3f 	ldcpl	15, cr3, [pc], #-252	; 3ef0 <_Min_Stack_Size+0x3af0>
    3fe8:	5b313d31 	blpl	c534b4 <_Min_Stack_Size+0xc530b4>
    3fec:	3f4d4b3f 	svccc	0x004d4b3f
    3ff0:	0b023d3f 	bleq	934f4 <_Min_Stack_Size+0x930f4>
    3ff4:	00010100 	andeq	r0, r1, r0, lsl #2
    3ff8:	7cd00205 	lfmvc	f0, 2, [r0], {5}
    3ffc:	8d030800 	stchi	8, cr0, [r3, #-0]
    4000:	3e590103 	rdfcce	f0, f1, f3
    4004:	05024c5c 	streq	r4, [r2, #-3164]	; 0xc5c
    4008:	00010100 	andeq	r0, r1, r0, lsl #2
    400c:	7cfc0205 	lfmvc	f0, 2, [ip], #20
    4010:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    4014:	3e4b0103 	dvfcce	f0, f3, f3
    4018:	3e3d4e4b 	cdpcc	14, 3, cr4, cr13, cr11, {2}
    401c:	01000b02 	tsteq	r0, r2, lsl #22
    4020:	02050001 	andeq	r0, r5, #1
    4024:	08007d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
    4028:	0103b203 	tsteq	r3, r3, lsl #4
    402c:	023d3d75 	eorseq	r3, sp, #7488	; 0x1d40
    4030:	01010009 	tsteq	r1, r9
    4034:	68020500 	stmdavs	r2, {r8, sl}
    4038:	0308007d 	movweq	r0, #32893	; 0x807d
    403c:	590103c0 	stmdbpl	r1, {r6, r7, r8, r9}
    4040:	09024b4b 	stmdbeq	r2, {r0, r1, r3, r6, r8, r9, fp, lr}
    4044:	00010100 	andeq	r0, r1, r0, lsl #2
    4048:	7d940205 	lfmvc	f0, 4, [r4, #20]
    404c:	cb030800 	blgt	c6054 <_Min_Stack_Size+0xc5c54>
    4050:	3d590103 	ldfcce	f0, [r9, #-12]
    4054:	01000802 	tsteq	r0, r2, lsl #16
    4058:	02050001 	andeq	r0, r5, #1
    405c:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    4060:	0103d503 	tsteq	r3, r3, lsl #10
    4064:	08023d59 	stmdaeq	r2, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    4068:	00010100 	andeq	r0, r1, r0, lsl #2
    406c:	7dd40205 	lfmvc	f0, 2, [r4, #20]
    4070:	df030800 	svcle	0x00030800
    4074:	3d4b0103 	stfcce	f0, [fp, #-12]
    4078:	01000702 	tsteq	r0, r2, lsl #14
    407c:	02050001 	andeq	r0, r5, #1
    4080:	08007df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    4084:	0103ea03 	tsteq	r3, r3, lsl #20
    4088:	5a6a4c59 	bpl	1a971f4 <_Min_Stack_Size+0x1a96df4>
    408c:	0009023d 	andeq	r0, r9, sp, lsr r2
    4090:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4094:	007e3002 	rsbseq	r3, lr, r2
    4098:	03fc0308 	mvnseq	r0, #8, 6	; 0x20000000
    409c:	022f2f01 	eoreq	r2, pc, #1, 30
    40a0:	01010008 	tsteq	r1, r8
    40a4:	48020500 	stmdami	r2, {r8, sl}
    40a8:	0308007e 	movweq	r0, #32894	; 0x807e
    40ac:	5901048a 	stmdbpl	r1, {r1, r3, r7, sl}
    40b0:	00762330 	rsbseq	r2, r6, r0, lsr r3
    40b4:	61010402 	tstvs	r1, r2, lsl #8
    40b8:	02040200 	andeq	r0, r4, #0, 4
    40bc:	b3063c06 	movwlt	r3, #27654	; 0x6c06
    40c0:	01000502 	tsteq	r0, r2, lsl #10
    40c4:	02050001 	andeq	r0, r5, #1
    40c8:	08007e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
    40cc:	01049c03 	tsteq	r4, r3, lsl #24
    40d0:	02003159 	andeq	r3, r0, #1073741846	; 0x40000016
    40d4:	003e0204 	eorseq	r0, lr, r4, lsl #4
    40d8:	72020402 	andvc	r0, r2, #33554432	; 0x2000000
    40dc:	01040200 	mrseq	r0, R12_usr
    40e0:	4e063c06 	cdpmi	12, 0, cr3, cr6, cr6, {0}
    40e4:	01000802 	tsteq	r0, r2, lsl #16
    40e8:	02050001 	andeq	r0, r5, #1
    40ec:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    40f0:	0104ad03 	tsteq	r4, r3, lsl #26
    40f4:	0902bb75 	stmdbeq	r2, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}
    40f8:	00010100 	andeq	r0, r1, r0, lsl #2
    40fc:	7f100205 	svcvc	0x00100205
    4100:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    4104:	3d4e0104 	stfcce	f0, [lr, #-16]
    4108:	754d5a59 	strbvc	r5, [sp, #-2649]	; 0xa59
    410c:	023e754f 	eorseq	r7, lr, #331350016	; 0x13c00000
    4110:	0101000a 	tsteq	r1, sl
    4114:	78020500 	stmdavc	r2, {r8, sl}
    4118:	0308007f 	movweq	r0, #32895	; 0x807f
    411c:	3f0104d3 	svccc	0x000104d3
    4120:	674f674d 	strbvs	r6, [pc, -sp, asr #14]
    4124:	000a023e 	andeq	r0, sl, lr, lsr r2
    4128:	05000101 	streq	r0, [r0, #-257]	; 0x101
    412c:	007fc002 	rsbseq	ip, pc, r2
    4130:	04ec0308 	strbteq	r0, [ip], #776	; 0x308
    4134:	30678301 	rsbcc	r8, r7, r1, lsl #6
    4138:	3f3f4c67 	svccc	0x003f4c67
    413c:	01040200 	mrseq	r0, R12_usr
    4140:	00660806 	rsbeq	r0, r6, r6, lsl #16
    4144:	06020402 	streq	r0, [r2], -r2, lsl #8
    4148:	04020059 	streq	r0, [r2], #-89	; 0x59
    414c:	5b2fab02 	blpl	beed5c <_Min_Stack_Size+0xbee95c>
    4150:	7203a0b1 	andvc	sl, r3, #177	; 0xb1
    4154:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    4158:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    415c:	03741003 	cmneq	r4, #3
    4160:	0200746d 	andeq	r7, r0, #1828716544	; 0x6d000000
    4164:	3c060104 	stfccs	f0, [r6], {4}
    4168:	74150306 	ldrvc	r0, [r5], #-774	; 0x306
    416c:	01000f02 	tsteq	r0, r2, lsl #30
    4170:	02050001 	andeq	r0, r5, #1
    4174:	080080e0 	stmdaeq	r0, {r5, r6, r7, pc}
    4178:	01059403 	tsteq	r5, r3, lsl #8
    417c:	21083e91 			; <UNDEFINED> instruction: 0x21083e91
    4180:	01000602 	tsteq	r0, r2, lsl #12
    4184:	02050001 	andeq	r0, r5, #1
    4188:	08008128 	stmdaeq	r0, {r3, r5, r8, pc}
    418c:	0105a303 	tsteq	r5, r3, lsl #6
    4190:	92233067 	eorls	r3, r3, #103	; 0x67
    4194:	04020068 	streq	r0, [r2], #-104	; 0x68
    4198:	3c790301 	ldclcc	3, cr0, [r9], #-4
    419c:	02040200 	andeq	r0, r4, #0, 4
    41a0:	03063c06 	movweq	r3, #27654	; 0x6c06
    41a4:	02820809 	addeq	r0, r2, #589824	; 0x90000
    41a8:	01010005 	tsteq	r1, r5
    41ac:	a0020500 	andge	r0, r2, r0, lsl #10
    41b0:	03080081 	movweq	r0, #32897	; 0x8081
    41b4:	760105ba 			; <UNDEFINED> instruction: 0x760105ba
    41b8:	753f754d 	ldrvc	r7, [pc, #-1357]!	; 3c73 <_Min_Stack_Size+0x3873>
    41bc:	753f754f 	ldrvc	r7, [pc, #-1359]!	; 3c75 <_Min_Stack_Size+0x3875>
    41c0:	000a023e 	andeq	r0, sl, lr, lsr r2
    41c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    41c8:	00821c02 	addeq	r1, r2, r2, lsl #24
    41cc:	05d80308 	ldrbeq	r0, [r8, #776]	; 0x308
    41d0:	02752f01 	rsbseq	r2, r5, #1, 30
    41d4:	01010001 	tsteq	r1, r1
    41d8:	30020500 	andcc	r0, r2, r0, lsl #10
    41dc:	03080082 	movweq	r0, #32898	; 0x8082
    41e0:	770105e6 	strvc	r0, [r1, -r6, ror #11]
    41e4:	4bd8682f 	blmi	ff61e2a8 <_estack+0xdf5ee2a8>
    41e8:	3d2f7759 	stccc	7, cr7, [pc, #-356]!	; 408c <_Min_Stack_Size+0x3c8c>
    41ec:	2f2f2f2f 	svccs	0x002f2f2f
    41f0:	2f3e302f 	svccs	0x003e302f
    41f4:	2f2f402f 	svccs	0x002f402f
    41f8:	00305a31 	eorseq	r5, r0, r1, lsr sl
    41fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    4200:	026a0620 	rsbeq	r0, sl, #32, 12	; 0x2000000
    4204:	01010008 	tsteq	r1, r8
    4208:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    420c:	03080082 	movweq	r0, #32898	; 0x8082
    4210:	7601069c 			; <UNDEFINED> instruction: 0x7601069c
    4214:	bb91bd91 	bllt	fe473860 <_estack+0xde443860>
    4218:	01000302 	tsteq	r0, r2, lsl #6
    421c:	02050001 	andeq	r0, r5, #1
    4220:	08008360 	stmdaeq	r0, {r5, r6, r8, r9, pc}
    4224:	0106ae03 	tsteq	r6, r3, lsl #28
    4228:	2f08bc91 	svccs	0x0008bc91
    422c:	2f082f08 	svccs	0x00082f08
    4230:	4b2f3008 	blmi	bd0258 <_Min_Stack_Size+0xbcfe58>
    4234:	04020091 	streq	r0, [r2], #-145	; 0x91
    4238:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    423c:	04020068 	streq	r0, [r2], #-104	; 0x68
    4240:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    4244:	09023d92 	stmdbeq	r2, {r1, r4, r7, r8, sl, fp, ip, sp}
    4248:	00010100 	andeq	r0, r1, r0, lsl #2
    424c:	84880205 	strhi	r0, [r8], #517	; 0x205
    4250:	c9030800 	stmdbgt	r3, {fp}
    4254:	bb750106 	bllt	1d44674 <_Min_Stack_Size+0x1d44274>
    4258:	5c767592 	cfldr64pl	mvdx7, [r6], #-584	; 0xfffffdb8
    425c:	13300283 	teqne	r0, #805306376	; 0x30000008
    4260:	2f143002 	svccs	0x00143002
    4264:	0200914c 	andeq	r9, r0, #76, 2
    4268:	58060104 	stmdapl	r6, {r2, r8}
    426c:	02006806 	andeq	r6, r0, #393216	; 0x60000
    4270:	4a060104 	bmi	184688 <_Min_Stack_Size+0x184288>
    4274:	3d5c9306 	ldclcc	3, cr9, [ip, #-24]	; 0xffffffe8
    4278:	30028331 	andcc	r8, r2, r1, lsr r3
    427c:	14300213 	ldrtne	r0, [r0], #-531	; 0x213
    4280:	00914c2f 	addseq	r4, r1, pc, lsr #24
    4284:	06010402 	streq	r0, [r1], -r2, lsl #8
    4288:	00680658 	rsbeq	r0, r8, r8, asr r6
    428c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4290:	4c92064a 	ldcmi	6, cr0, [r2], {74}	; 0x4a
    4294:	01000302 	tsteq	r0, r2, lsl #6
    4298:	02050001 	andeq	r0, r5, #1
    429c:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
    42a0:	01078203 	tsteq	r7, r3, lsl #4
    42a4:	7592bb75 	ldrvc	fp, [r2, #2933]	; 0xb75
    42a8:	08835b76 	stmeq	r3, {r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
    42ac:	08f308f3 	ldmeq	r3!, {r0, r1, r4, r5, r6, r7, fp}^
    42b0:	2fe608e5 	svccs	0x00e608e5
    42b4:	0200914b 	andeq	r9, r0, #-1073741806	; 0xc0000012
    42b8:	58060104 	stmdapl	r6, {r2, r8}
    42bc:	02006806 	andeq	r6, r0, #393216	; 0x60000
    42c0:	4a060104 	bmi	1846d8 <_Min_Stack_Size+0x1842d8>
    42c4:	3d5c9206 	lfmcc	f1, 3, [ip, #-24]	; 0xffffffe8
    42c8:	e5088330 	str	r8, [r8, #-816]	; 0x330
    42cc:	f308f308 	vcgt.u8	d15, d8, d8
    42d0:	4b2fe608 	blmi	bfdaf8 <_Min_Stack_Size+0xbfd6f8>
    42d4:	04020091 	streq	r0, [r2], #-145	; 0x91
    42d8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    42dc:	04020068 	streq	r0, [r2], #-104	; 0x68
    42e0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    42e4:	09024c92 	stmdbeq	r2, {r1, r4, r7, sl, fp, lr}
    42e8:	00010100 	andeq	r0, r1, r0, lsl #2
    42ec:	8a940205 	bhi	fe504b08 <_estack+0xde4d4b08>
    42f0:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    42f4:	4d4b0107 	stfmie	f0, [fp, #-28]	; 0xffffffe4
    42f8:	6abc3e3e 	bvs	fef13bf8 <_estack+0xdeee3bf8>
    42fc:	00587803 	subseq	r7, r8, r3, lsl #16
    4300:	06010402 	streq	r0, [r1], -r2, lsl #8
    4304:	003a063c 	eorseq	r0, sl, ip, lsr r6
    4308:	06010402 	streq	r0, [r1], -r2, lsl #8
    430c:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
    4310:	000c024a 	andeq	r0, ip, sl, asr #4
    4314:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4318:	008b1002 	addeq	r1, fp, r2
    431c:	07d10308 	ldrbeq	r0, [r1, r8, lsl #6]
    4320:	4ca04b01 	fstmiaxmi	r0!, {d4-d3}	;@ Deprecated
    4324:	5985593f 	stmibpl	r5, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
    4328:	4b774b85 	blmi	1dd7144 <_Min_Stack_Size+0x1dd6d44>
    432c:	594d4c77 	stmdbpl	sp, {r0, r1, r2, r4, r5, r6, sl, fp, lr}^
    4330:	4c4b4c3f 	mcrrmi	12, 3, r4, fp, cr15
    4334:	4b4e4b4c 	blmi	139706c <_Min_Stack_Size+0x1396c6c>
    4338:	4c3f5950 	ldcmi	9, cr5, [pc], #-320	; 4200 <_Min_Stack_Size+0x3e00>
    433c:	4b4c4c4b 	blmi	1317470 <_Min_Stack_Size+0x1317070>
    4340:	4d414b4e 	vstrmi	d20, [r1, #-312]	; 0xfffffec8
    4344:	5b3ebc4d 	blpl	fb3480 <_Min_Stack_Size+0xfb3080>
    4348:	843e3d3d 	ldrthi	r3, [lr], #-3389	; 0xd3d
    434c:	03913d4c 	orrseq	r3, r1, #76, 26	; 0x1300
    4350:	02002e71 	andeq	r2, r0, #1808	; 0x710
    4354:	3c060104 	stfccs	f0, [r6], {4}
    4358:	4a130306 	bmi	4c4f78 <_Min_Stack_Size+0x4c4b78>
    435c:	01000c02 	tsteq	r0, r2, lsl #24
    4360:	02050001 	andeq	r0, r5, #1
    4364:	08008cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, pc}
    4368:	0108c103 	tsteq	r8, r3, lsl #2
    436c:	4b682f77 	blmi	1a10150 <_Min_Stack_Size+0x1a0fd50>
    4370:	2fd97659 	svccs	0x00d97659
    4374:	2f2f2f3d 	svccs	0x002f2f3d
    4378:	4b2f2f2f 	blmi	bd003c <_Min_Stack_Size+0xbcfc3c>
    437c:	315b2f2f 	cmpcc	fp, pc, lsr #30
    4380:	01040200 	mrseq	r0, R12_usr
    4384:	6a062006 	bvs	18c3a4 <_Min_Stack_Size+0x18bfa4>
    4388:	00070259 	andeq	r0, r7, r9, asr r2
    438c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4390:	008dac02 	addeq	sl, sp, r2, lsl #24
    4394:	08ee0308 	stmiaeq	lr!, {r3, r8, r9}^
    4398:	2f5a9501 	svccs	0x005a9501
    439c:	083e2230 	ldmdaeq	lr!, {r4, r5, r9, sp}
    43a0:	3e3f083d 	mrccc	8, 1, r0, cr15, cr13, {1}
    43a4:	3e083d08 	cdpcc	13, 0, cr3, cr8, cr8, {0}
    43a8:	3e83783e 	mcrcc	8, 4, r7, cr3, cr14, {1}
    43ac:	01040200 	mrseq	r0, R12_usr
    43b0:	033c6a03 	teqeq	ip, #12288	; 0x3000
    43b4:	02834a19 	addeq	r4, r3, #102400	; 0x19000
    43b8:	01010003 	tsteq	r1, r3
    43bc:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    43c0:	0308008e 	movweq	r0, #32910	; 0x808e
    43c4:	7501099d 	strvc	r0, [r1, #-2461]	; 0x99d
    43c8:	7530bbbb 	ldrvc	fp, [r0, #-3003]!	; 0xbbb
    43cc:	4c302f75 	ldcmi	15, cr2, [r0], #-468	; 0xfffffe2c
    43d0:	3f3d402f 	svccc	0x003d402f
    43d4:	3d402f4c 	stclcc	15, cr2, [r0, #-304]	; 0xfffffed0
    43d8:	2f2f683f 	svccs	0x002f683f
    43dc:	402f672f 	eormi	r6, pc, pc, lsr #14
    43e0:	672f2f2f 	strvs	r2, [pc, -pc, lsr #30]!
    43e4:	833e312f 	teqhi	lr, #-1073741813	; 0xc000000b
    43e8:	59596859 	ldmdbpl	r9, {r0, r3, r4, r6, fp, sp, lr}^
    43ec:	7503595a 	strvc	r5, [r3, #-2394]	; 0x95a
    43f0:	04020058 	streq	r0, [r2], #-88	; 0x58
    43f4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    43f8:	02660d03 	rsbeq	r0, r6, #3, 26	; 0xc0
    43fc:	01010003 	tsteq	r1, r3
    4400:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    4404:	03080090 	movweq	r0, #32912	; 0x8090
    4408:	670109e5 	strvs	r0, [r1, -r5, ror #19]
    440c:	233e304b 	teqcs	lr, #75	; 0x4b
    4410:	3d3d3d22 	ldccc	13, cr3, [sp, #-136]!	; 0xffffff78
    4414:	01040200 	mrseq	r0, R12_usr
    4418:	02d76d99 	sbcseq	r6, r7, #9792	; 0x2640
    441c:	01010003 	tsteq	r1, r3
    4420:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    4424:	03080090 	movweq	r0, #32912	; 0x8090
    4428:	760109ff 			; <UNDEFINED> instruction: 0x760109ff
    442c:	7530bbbb 	ldrvc	fp, [r0, #-3003]!	; 0xbbb
    4430:	4c302f75 	ldcmi	15, cr2, [r0], #-468	; 0xfffffe2c
    4434:	3f3d402f 	svccc	0x003d402f
    4438:	3d402f4c 	stclcc	15, cr2, [r0, #-304]	; 0xfffffed0
    443c:	2f2f683f 	svccs	0x002f683f
    4440:	402f672f 	eormi	r6, pc, pc, lsr #14
    4444:	672f2f2f 	strvs	r2, [pc, -pc, lsr #30]!
    4448:	683e312f 	ldmdavs	lr!, {r0, r1, r2, r3, r5, r8, ip, sp}
    444c:	59596859 	ldmdbpl	r9, {r0, r3, r4, r6, fp, sp, lr}^
    4450:	7403595a 	strvc	r5, [r3], #-2394	; 0x95a
    4454:	04020058 	streq	r0, [r2], #-88	; 0x58
    4458:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    445c:	02661003 	rsbeq	r1, r6, #3
    4460:	01010003 	tsteq	r1, r3
    4464:	10020500 	andne	r0, r2, r0, lsl #10
    4468:	03080092 	movweq	r0, #32914	; 0x8092
    446c:	67010acb 	strvs	r0, [r1, -fp, asr #21]
    4470:	22233e4c 	eorcs	r3, r3, #76, 28	; 0x4c0
    4474:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
    4478:	99010402 	stmdbls	r1, {r1, sl}
    447c:	0003026d 	andeq	r0, r3, sp, ror #4
    4480:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4484:	00926802 	addseq	r6, r2, r2, lsl #16
    4488:	0ae50308 	beq	ff9450b0 <_estack+0xdf9150b0>
    448c:	304b8301 	subcc	r8, fp, r1, lsl #6
    4490:	3d3d223e 	lfmcc	f2, 4, [sp, #-248]!	; 0xffffff08
    4494:	75f33d22 	ldrbvc	r3, [r3, #3362]!	; 0xd22
    4498:	01040200 	mrseq	r0, R12_usr
    449c:	a03e6d6f 	eorsge	r6, lr, pc, ror #26
    44a0:	01000302 	tsteq	r0, r2, lsl #6
    44a4:	02050001 	andeq	r0, r5, #1
    44a8:	08009308 	stmdaeq	r0, {r3, r8, r9, ip, pc}
    44ac:	010b8303 	tsteq	fp, r3, lsl #6
    44b0:	91085967 	tstls	r8, r7, ror #18
    44b4:	01000302 	tsteq	r0, r2, lsl #6
    44b8:	02050001 	andeq	r0, r5, #1
    44bc:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
    44c0:	010b8f03 	tsteq	fp, r3, lsl #30
    44c4:	03026767 	movweq	r6, #10087	; 0x2767
    44c8:	00010100 	andeq	r0, r1, r0, lsl #2
    44cc:	93780205 	cmnls	r8, #1342177280	; 0x50000000
    44d0:	9a030800 	bls	c64d8 <_Min_Stack_Size+0xc60d8>
    44d4:	6767010b 	strbvs	r0, [r7, -fp, lsl #2]!
    44d8:	01000302 	tsteq	r0, r2, lsl #6
    44dc:	02050001 	andeq	r0, r5, #1
    44e0:	08009398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, pc}
    44e4:	010ba503 	tsteq	fp, r3, lsl #10
    44e8:	84590868 	ldrbhi	r0, [r9], #-2152	; 0x868
    44ec:	753e5a59 	ldrvc	r5, [lr, #-2649]!	; 0xa59
    44f0:	315a305a 	cmpcc	sl, sl, asr r0
    44f4:	5a305a75 	bpl	c1aed0 <_Min_Stack_Size+0xc1aad0>
    44f8:	002e6d03 	eoreq	r6, lr, r3, lsl #26
    44fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    4500:	1703063c 	smladxne	r3, ip, r6, r0
    4504:	75233e58 	strvc	r3, [r3, #-3672]!	; 0xe58
    4508:	223e3d76 	eorscs	r3, lr, #7552	; 0x1d80
    450c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4510:	009f9f3e 	addseq	r9, pc, lr, lsr pc	; <UNPREDICTABLE>
    4514:	03010402 	movweq	r0, #5122	; 0x1402
    4518:	0d039e76 	stceq	14, cr9, [r3, #-472]	; 0xfffffe28
    451c:	9f9f9f66 	svcls	0x009f9f66
    4520:	01000302 	tsteq	r0, r2, lsl #6
    4524:	02050001 	andeq	r0, r5, #1
    4528:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    452c:	010be703 	tsteq	fp, r3, lsl #14
    4530:	6a3d695a 	bvs	f5eaa0 <_Min_Stack_Size+0xf5e6a0>
    4534:	01040200 	mrseq	r0, R12_usr
    4538:	76062006 	strvc	r2, [r6], -r6
    453c:	01040200 	mrseq	r0, R12_usr
    4540:	76062006 	strvc	r2, [r6], -r6
    4544:	0007023d 	andeq	r0, r7, sp, lsr r2
    4548:	05000101 	streq	r0, [r0, #-257]	; 0x101
    454c:	00959402 	addseq	r9, r5, r2, lsl #8
    4550:	0bff0308 	bleq	fffc5178 <_estack+0xdff95178>
    4554:	3d695a01 	vstmdbcc	r9!, {s11}
    4558:	0402006a 	streq	r0, [r2], #-106	; 0x6a
    455c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    4560:	04020076 	streq	r0, [r2], #-118	; 0x76
    4564:	06200601 	strteq	r0, [r0], -r1, lsl #12
    4568:	07023d76 	smlsdxeq	r2, r6, sp, r3
    456c:	00010100 	andeq	r0, r1, r0, lsl #2
    4570:	95f00205 	ldrbls	r0, [r0, #517]!	; 0x205
    4574:	96030800 	strls	r0, [r3], -r0, lsl #16
    4578:	3d2f010c 	stfccs	f0, [pc, #-48]!	; 4550 <_Min_Stack_Size+0x4150>
    457c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4580:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4584:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4588:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    458c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4590:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4594:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4598:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    459c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45b0:	3d3d3d3f 	ldccc	13, cr3, [sp, #-252]!	; 0xffffff04
    45b4:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    45b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45bc:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
    45c0:	3d3e3d3e 	ldccc	13, cr3, [lr, #-248]!	; 0xffffff08
    45c4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45c8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45cc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45d0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45d4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45d8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45dc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45e0:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
    45e4:	023d3e3d 	eorseq	r3, sp, #976	; 0x3d0
    45e8:	01010001 	tsteq	r1, r1
    45ec:	80020500 	andhi	r0, r2, r0, lsl #10
    45f0:	03080098 	movweq	r0, #32920	; 0x8098
    45f4:	2f010d93 	svccs	0x00010d93
    45f8:	0001023d 	andeq	r0, r1, sp, lsr r2
    45fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4600:	00988c02 	addseq	r8, r8, r2, lsl #24
    4604:	0d9d0308 	ldceq	3, cr0, [sp, #32]
    4608:	023d3001 	eorseq	r3, sp, #1
    460c:	01010001 	tsteq	r1, r1
    4610:	98020500 	stmdals	r2, {r8, sl}
    4614:	03080098 	movweq	r0, #32920	; 0x8098
    4618:	40010daa 	andmi	r0, r1, sl, lsr #27
    461c:	2f2f2f4d 	svccs	0x002f2f4d
    4620:	3d5b2f2f 	ldclcc	15, cr2, [fp, #-188]	; 0xffffff44
    4624:	0702595b 	smlsdeq	r2, fp, r9, r5
    4628:	00010100 	andeq	r0, r1, r0, lsl #2
    462c:	98ec0205 	stmials	ip!, {r0, r2, r9}^
    4630:	cf030800 	svcgt	0x00030800
    4634:	7584010d 	strvc	r0, [r4, #269]	; 0x10d
    4638:	01000302 	tsteq	r0, r2, lsl #6
    463c:	02050001 	andeq	r0, r5, #1
    4640:	08009910 	stmdaeq	r0, {r4, r8, fp, ip, pc}
    4644:	010dda03 	tsteq	sp, r3, lsl #20
    4648:	2f5b4d41 	svccs	0x005b4d41
    464c:	2f2f2f2f 	svccs	0x002f2f2f
    4650:	3d5b3d5b 	ldclcc	13, cr3, [fp, #-364]	; 0xfffffe94
    4654:	5a5b5b5b 	bpl	16db3c8 <_Min_Stack_Size+0x16dafc8>
    4658:	3d2f7640 	stccc	6, cr7, [pc, #-256]!	; 4560 <_Min_Stack_Size+0x4160>
    465c:	432f2f2f 	teqmi	pc, #47, 30	; 0xbc
    4660:	692f2f2f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    4664:	0008024c 	andeq	r0, r8, ip, asr #4
    4668:	05000101 	streq	r0, [r0, #-257]	; 0x101
    466c:	0099e402 	addseq	lr, r9, r2, lsl #8
    4670:	0e9f0308 	cdpeq	3, 9, cr0, cr15, cr8, {0}
    4674:	17034001 	strne	r4, [r3, -r1]
    4678:	5959594a 	ldmdbpl	r9, {r1, r3, r6, r8, fp, ip, lr}^
    467c:	2f3f5a59 	svccs	0x003f5a59
    4680:	5b2f2f2f 	blpl	bd0344 <_Min_Stack_Size+0xbcff44>
    4684:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4688:	5b3f5a59 	blpl	fdaff4 <_Min_Stack_Size+0xfdabf4>
    468c:	3e5a5959 	mrccc	9, 2, r5, cr10, cr9, {2}
    4690:	305a595b 	subscc	r5, sl, fp, asr r9
    4694:	5b3e5a5b 	blpl	f9b008 <_Min_Stack_Size+0xf9ac08>
    4698:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    469c:	025a3f5a 	subseq	r3, sl, #360	; 0x168
    46a0:	01010010 	tsteq	r1, r0, lsl r0
    46a4:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    46a8:	0308009b 	movweq	r0, #32923	; 0x809b
    46ac:	75010f83 	strvc	r0, [r1, #-3971]	; 0xf83
    46b0:	01040200 	mrseq	r0, R12_usr
    46b4:	ca064a06 	bgt	196ed4 <_Min_Stack_Size+0x196ad4>
    46b8:	03028322 	movweq	r8, #8994	; 0x2322
    46bc:	00010100 	andeq	r0, r1, r0, lsl #2
    46c0:	9ba40205 	blls	fe904edc <_estack+0xde8d4edc>
    46c4:	92030800 	andls	r0, r3, #0, 16
    46c8:	2f4b010f 	svccs	0x004b010f
    46cc:	02040200 	andeq	r0, r4, #0, 4
    46d0:	02003c06 	andeq	r3, r0, #1536	; 0x600
    46d4:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    46d8:	0005023f 	andeq	r0, r5, pc, lsr r2
    46dc:	070c0101 	streq	r0, [ip, -r1, lsl #2]
    46e0:	00020000 	andeq	r0, r2, r0
    46e4:	000001cb 	andeq	r0, r0, fp, asr #3
    46e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    46ec:	0101000d 	tsteq	r1, sp
    46f0:	00000101 	andeq	r0, r0, r1, lsl #2
    46f4:	00000100 	andeq	r0, r0, r0, lsl #2
    46f8:	636e6901 	cmnvs	lr, #16384	; 0x4000
    46fc:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    4700:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4704:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4708:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    470c:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    4710:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    4714:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4718:	00797265 	rsbseq	r7, r9, r5, ror #4
    471c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4720:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4724:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4728:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    472c:	2f62696c 	svccs	0x0062696c
    4730:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4734:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4738:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    473c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4740:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4744:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4748:	0062696c 	rsbeq	r6, r2, ip, ror #18
    474c:	2f636e69 	svccs	0x00636e69
    4750:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4754:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4648 <_Min_Stack_Size+0x4248>
    4758:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    475c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4760:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4650 <_Min_Stack_Size+0x4250>
    4764:	61726269 	cmnvs	r2, r9, ror #4
    4768:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    476c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    4770:	442f5349 	strtmi	r5, [pc], #-841	; 4778 <_Min_Stack_Size+0x4378>
    4774:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4778:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    477c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4780:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4784:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    4788:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    478c:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    4790:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    4794:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4798:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    479c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    47a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    47a4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    47a8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    47ac:	2f736569 	svccs	0x00736569
    47b0:	334d5453 	movtcc	r5, #54355	; 0xd453
    47b4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    47b8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    47bc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    47c0:	5f687069 	svcpl	0x00687069
    47c4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    47c8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    47cc:	6900636e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    47d0:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    47d4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    47d8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    47dc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    47e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    47e4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    47e8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    47ec:	2f736569 	svccs	0x00736569
    47f0:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    47f4:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    47f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    47fc:	73000065 	movwvc	r0, #101	; 0x65
    4800:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4804:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    4808:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    480c:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4810:	5f797265 	svcpl	0x00797265
    4814:	2e656f69 	cdpcs	15, 6, cr6, cr5, cr9, {3}
    4818:	00010063 	andeq	r0, r1, r3, rrx
    481c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    4820:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4824:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4828:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    482c:	00020068 	andeq	r0, r2, r8, rrx
    4830:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    4834:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4838:	00030068 	andeq	r0, r3, r8, rrx
    483c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4840:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4844:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    4848:	00000400 	andeq	r0, r0, r0, lsl #8
    484c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4850:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4854:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    4858:	00682e61 	rsbeq	r2, r8, r1, ror #28
    485c:	73000005 	movwvc	r0, #5
    4860:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4864:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4868:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    486c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4870:	73000005 	movwvc	r0, #5
    4874:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4878:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    487c:	6332695f 	teqvs	r2, #1556480	; 0x17c000
    4880:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4884:	74730000 	ldrbtvc	r0, [r3], #-0
    4888:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    488c:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    4890:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    4894:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4898:	695f7972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    489c:	682e656f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, sp, lr}
    48a0:	00000100 	andeq	r0, r0, r0, lsl #2
    48a4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    48a8:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    48ac:	0600682e 	streq	r6, [r0], -lr, lsr #16
    48b0:	00000000 	andeq	r0, r0, r0
    48b4:	9bcc0205 	blls	ff3050d0 <_estack+0xdf2d50d0>
    48b8:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    48bc:	31300100 	teqcc	r0, r0, lsl #2
    48c0:	32325a31 	eorscc	r5, r2, #200704	; 0x31000
    48c4:	0221314b 	eoreq	r3, r1, #-1073741806	; 0xc0000012
    48c8:	01010002 	tsteq	r1, r2
    48cc:	fc020500 	stc2	5, cr0, [r2], {-0}
    48d0:	0308009b 	movweq	r0, #32923	; 0x809b
    48d4:	3001019e 	mulcc	r1, lr, r1
    48d8:	213f4d3f 	teqcs	pc, pc, lsr sp	; <UNPREDICTABLE>
    48dc:	01000202 	tsteq	r0, r2, lsl #4
    48e0:	02050001 	andeq	r0, r5, #1
    48e4:	08009c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, pc}
    48e8:	0101b203 	tsteq	r1, r3, lsl #4
    48ec:	4b4c9241 	blmi	13291f8 <_Min_Stack_Size+0x1328df8>
    48f0:	0402004b 	streq	r0, [r2], #-75	; 0x4b
    48f4:	00580601 	subseq	r0, r8, r1, lsl #12
    48f8:	58020402 	stmdapl	r2, {r1, sl}
    48fc:	03040200 	movweq	r0, #16896	; 0x4200
    4900:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    4904:	00210603 	eoreq	r0, r1, r3, lsl #12
    4908:	06010402 	streq	r0, [r1], -r2, lsl #8
    490c:	04020058 	streq	r0, [r2], #-88	; 0x58
    4910:	02005802 	andeq	r5, r0, #131072	; 0x20000
    4914:	004a0304 	subeq	r0, sl, r4, lsl #6
    4918:	06030402 	streq	r0, [r3], -r2, lsl #8
    491c:	403d5a21 	eorsmi	r5, sp, r1, lsr #20
    4920:	4b695a5b 	blmi	1a5b294 <_Min_Stack_Size+0x1a5ae94>
    4924:	0a02214d 	beq	8ce60 <_Min_Stack_Size+0x8ca60>
    4928:	00010100 	andeq	r0, r1, r0, lsl #2
    492c:	9ce40205 	sfmls	f0, 2, [r4], #20
    4930:	e1030800 	tst	r3, r0, lsl #16
    4934:	31590101 	cmpcc	r9, r1, lsl #2
    4938:	2232765a 	eorscs	r7, r2, #94371840	; 0x5a00000
    493c:	01000402 	tsteq	r0, r2, lsl #8
    4940:	02050001 	andeq	r0, r5, #1
    4944:	08009d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, pc}
    4948:	0101fe03 	tsteq	r1, r3, lsl #28
    494c:	02215b5a 	eoreq	r5, r1, #92160	; 0x16800
    4950:	01010004 	tsteq	r1, r4
    4954:	38020500 	stmdacc	r2, {r8, sl}
    4958:	0308009d 	movweq	r0, #32925	; 0x809d
    495c:	3001028e 	andcc	r0, r1, lr, lsl #5
    4960:	334e4c85 	movtcc	r4, #60549	; 0xec85
    4964:	00050222 	andeq	r0, r5, r2, lsr #4
    4968:	05000101 	streq	r0, [r0, #-257]	; 0x101
    496c:	009d6c02 	addseq	r6, sp, r2, lsl #24
    4970:	02a80308 	adceq	r0, r8, #8, 6	; 0x20000000
    4974:	3f4d3001 	svccc	0x004d3001
    4978:	0202214d 	andeq	r2, r2, #1073741843	; 0x40000013
    497c:	00010100 	andeq	r0, r1, r0, lsl #2
    4980:	9d8c0205 	sfmls	f0, 4, [ip, #20]
    4984:	bc030800 	stclt	8, cr0, [r3], {-0}
    4988:	313d0102 	teqcc	sp, r2, lsl #2
    498c:	21853d59 	orrcs	r3, r5, r9, asr sp
    4990:	01000402 	tsteq	r0, r2, lsl #8
    4994:	02050001 	andeq	r0, r5, #1
    4998:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
    499c:	0102d303 	tsteq	r2, r3, lsl #6
    49a0:	3f5a3175 	svccc	0x005a3175
    49a4:	215b4e87 	cmpcs	fp, r7, lsl #29
    49a8:	01000402 	tsteq	r0, r2, lsl #8
    49ac:	02050001 	andeq	r0, r5, #1
    49b0:	08009e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, pc}
    49b4:	0102f203 	tsteq	r2, r3, lsl #4
    49b8:	3f5a3159 	svccc	0x005a3159
    49bc:	215b4e5d 	cmpcs	fp, sp, asr lr
    49c0:	01000402 	tsteq	r0, r2, lsl #8
    49c4:	02050001 	andeq	r0, r5, #1
    49c8:	08009e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, pc}
    49cc:	01039703 	tsteq	r3, r3, lsl #14
    49d0:	3f5a3175 	svccc	0x005a3175
    49d4:	215b775d 	cmpcs	fp, sp, asr r7
    49d8:	01000402 	tsteq	r0, r2, lsl #8
    49dc:	02050001 	andeq	r0, r5, #1
    49e0:	08009ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, pc}
    49e4:	0103b403 	tsteq	r3, r3, lsl #8
    49e8:	3f4d4d30 	svccc	0x004d4d30
    49ec:	4d4d4d4d 	stclmi	13, cr4, [sp, #-308]	; 0xfffffecc
    49f0:	4e4d4d4d 	cdpmi	13, 4, cr4, cr13, cr13, {2}
    49f4:	21e74d4d 	mvncs	r4, sp, asr #26
    49f8:	01000502 	tsteq	r0, r2, lsl #10
    49fc:	02050001 	andeq	r0, r5, #1
    4a00:	08009f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, pc}
    4a04:	0103ec03 	tsteq	r3, r3, lsl #24
    4a08:	3f5a3175 	svccc	0x005a3175
    4a0c:	215b785d 	cmpcs	fp, sp, asr r8
    4a10:	01000402 	tsteq	r0, r2, lsl #8
    4a14:	02050001 	andeq	r0, r5, #1
    4a18:	08009f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, pc}
    4a1c:	01048b03 	tsteq	r4, r3, lsl #22
    4a20:	31312f75 	teqcc	r1, r5, ror pc
    4a24:	224b4d69 	subcs	r4, fp, #6720	; 0x1a40
    4a28:	01040200 	mrseq	r0, R12_usr
    4a2c:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4a30:	48060104 	stmdami	r6, {r2, r8}
    4a34:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4a38:	01040200 	mrseq	r0, R12_usr
    4a3c:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4a40:	48060104 	stmdami	r6, {r2, r8}
    4a44:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4a48:	01040200 	mrseq	r0, R12_usr
    4a4c:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4a50:	48060104 	stmdami	r6, {r2, r8}
    4a54:	02040200 	andeq	r0, r4, #0, 4
    4a58:	7a067406 	bvc	1a1a78 <_Min_Stack_Size+0x1a1678>
    4a5c:	224b4d4d 	subcs	r4, fp, #4928	; 0x1340
    4a60:	01040200 	mrseq	r0, R12_usr
    4a64:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4a68:	48060104 	stmdami	r6, {r2, r8}
    4a6c:	00223d7a 	eoreq	r3, r2, sl, ror sp
    4a70:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a74:	04020074 	streq	r0, [r2], #-116	; 0x74
    4a78:	7a480601 	bvc	1206284 <_Min_Stack_Size+0x1205e84>
    4a7c:	034d4d4d 	movteq	r4, #56653	; 0xdd4d
    4a80:	022f4a15 	eoreq	r4, pc, #86016	; 0x15000
    4a84:	01010016 	tsteq	r1, r6, lsl r0
    4a88:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    4a8c:	030800a1 	movweq	r0, #32929	; 0x80a1
    4a90:	590104ef 	stmdbpl	r1, {r0, r1, r2, r3, r5, r6, r7, sl}
    4a94:	4d4d694d 	stclmi	9, cr6, [sp, #-308]	; 0xfffffecc
    4a98:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4a9c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4aa0:	01040200 	mrseq	r0, R12_usr
    4aa4:	5b7a4806 	blpl	1e96ac4 <_Min_Stack_Size+0x1e966c4>
    4aa8:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4aac:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4ab0:	01040200 	mrseq	r0, R12_usr
    4ab4:	5b7a4806 	blpl	1e96ad4 <_Min_Stack_Size+0x1e966d4>
    4ab8:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4abc:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4ac0:	01040200 	mrseq	r0, R12_usr
    4ac4:	02004806 	andeq	r4, r0, #393216	; 0x60000
    4ac8:	74060204 	strvc	r0, [r6], #-516	; 0x204
    4acc:	4b4d7a06 	blmi	13632ec <_Min_Stack_Size+0x1362eec>
    4ad0:	04020022 	streq	r0, [r2], #-34	; 0x22
    4ad4:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4ad8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4adc:	4b5b7a48 	blmi	16e3404 <_Min_Stack_Size+0x16e3004>
    4ae0:	04020022 	streq	r0, [r2], #-34	; 0x22
    4ae4:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4ae8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4aec:	4d4d7a48 	vstrmi	s15, [sp, #-288]	; 0xfffffee0
    4af0:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4af4:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4af8:	01040200 	mrseq	r0, R12_usr
    4afc:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4b00:	214d4d4d 	cmpcs	sp, sp, asr #26
    4b04:	01001602 	tsteq	r0, r2, lsl #12
    4b08:	02050001 	andeq	r0, r5, #1
    4b0c:	0800a2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, pc}
    4b10:	0105ce03 	tsteq	r5, r3, lsl #28
    4b14:	694d2f4b 	stmdbvs	sp, {r0, r1, r3, r6, r8, r9, sl, fp, sp}^
    4b18:	224b4d4d 	subcs	r4, fp, #4928	; 0x1340
    4b1c:	01040200 	mrseq	r0, R12_usr
    4b20:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4b24:	48060104 	stmdami	r6, {r2, r8}
    4b28:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4b2c:	01040200 	mrseq	r0, R12_usr
    4b30:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4b34:	48060104 	stmdami	r6, {r2, r8}
    4b38:	224b697a 	subcs	r6, fp, #1998848	; 0x1e8000
    4b3c:	01040200 	mrseq	r0, R12_usr
    4b40:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4b44:	48060104 	stmdami	r6, {r2, r8}
    4b48:	02040200 	andeq	r0, r4, #0, 4
    4b4c:	7a067406 	bvc	1a1b6c <_Min_Stack_Size+0x1a176c>
    4b50:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4b54:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b58:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b5c:	7a480601 	bvc	1206368 <_Min_Stack_Size+0x1205f68>
    4b60:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4b64:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b68:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b6c:	7a480601 	bvc	1206378 <_Min_Stack_Size+0x1205f78>
    4b70:	224b4d4d 	subcs	r4, fp, #4928	; 0x1340
    4b74:	01040200 	mrseq	r0, R12_usr
    4b78:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4b7c:	48060104 	stmdami	r6, {r2, r8}
    4b80:	4d4d4d7a 	stclmi	13, cr4, [sp, #-488]	; 0xfffffe18
    4b84:	312f2f4d 	teqcc	pc, sp, asr #30
    4b88:	00170283 	andseq	r0, r7, r3, lsl #5
    4b8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4b90:	00a4e402 	adceq	lr, r4, r2, lsl #8
    4b94:	06b30308 	ldrteq	r0, [r3], r8, lsl #6
    4b98:	5a5b4001 	bpl	16d4ba4 <_Min_Stack_Size+0x16d47a4>
    4b9c:	3e935c6a 	cdpcc	12, 9, cr5, cr3, cr10, {3}
    4ba0:	2f323e3e 	svccs	0x00323e3e
    4ba4:	01000602 	tsteq	r0, r2, lsl #12
    4ba8:	02050001 	andeq	r0, r5, #1
    4bac:	0800a54c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, pc}
    4bb0:	0106da03 	tsteq	r6, r3, lsl #20
    4bb4:	854d5c40 	strbhi	r5, [sp, #-3136]	; 0xc40
    4bb8:	404c3e3e 	submi	r3, ip, lr, lsr lr
    4bbc:	0007022f 	andeq	r0, r7, pc, lsr #4
    4bc0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4bc4:	00a5a002 	adceq	sl, r5, r2
    4bc8:	06fb0308 	ldrbteq	r0, [fp], r8, lsl #6
    4bcc:	3d5b4001 	ldclcc	0, cr4, [fp, #-4]
    4bd0:	04022f2f 	streq	r2, [r2], #-3887	; 0xf2f
    4bd4:	00010100 	andeq	r0, r1, r0, lsl #2
    4bd8:	a5c80205 	strbge	r0, [r8, #517]	; 0x205
    4bdc:	8d030800 	stchi	8, cr0, [r3, #-0]
    4be0:	59400107 	stmdbpl	r0, {r0, r1, r2, r8}^
    4be4:	5b5a5b5a 	blpl	169b954 <_Min_Stack_Size+0x169b554>
    4be8:	2f3d5b5a 	svccs	0x003d5b5a
    4bec:	5a2f2f2f 	bpl	bd08b0 <_Min_Stack_Size+0xbd04b0>
    4bf0:	08025a3d 	stmdaeq	r2, {r0, r2, r3, r4, r5, r9, fp, ip, lr}
    4bf4:	00010100 	andeq	r0, r1, r0, lsl #2
    4bf8:	a6540205 	ldrbge	r0, [r4], -r5, lsl #4
    4bfc:	b3030800 	movwlt	r0, #14336	; 0x3800
    4c00:	77400107 	strbvc	r0, [r0, -r7, lsl #2]
    4c04:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 4b50 <_Min_Stack_Size+0x4750>
    4c08:	4c5b313d 	ldfmie	f3, [fp], {61}	; 0x3d
    4c0c:	01000802 	tsteq	r0, r2, lsl #16
    4c10:	02050001 	andeq	r0, r5, #1
    4c14:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
    4c18:	0107cf03 	tsteq	r7, r3, lsl #30
    4c1c:	313f5b69 	teqcc	pc, r9, ror #22
    4c20:	313f3131 	teqcc	pc, r1, lsr r1	; <UNPREDICTABLE>
    4c24:	31313131 	teqcc	r1, r1, lsr r1
    4c28:	3f313131 	svccc	0x00313131
    4c2c:	773e3031 			; <UNDEFINED> instruction: 0x773e3031
    4c30:	3e30313f 	mrccc	1, 1, r3, cr0, cr15, {1}
    4c34:	000a0268 	andeq	r0, sl, r8, ror #4
    4c38:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4c3c:	00a74c02 	adceq	r4, r7, r2, lsl #24
    4c40:	089e0308 	ldmeq	lr, {r3, r8, r9}
    4c44:	4d317501 	cfldr32mi	mvfx7, [r1, #-4]!
    4c48:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c4c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c50:	01040200 	mrseq	r0, R12_usr
    4c54:	5b7a4806 	blpl	1e96c74 <_Min_Stack_Size+0x1e96874>
    4c58:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c5c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c60:	01040200 	mrseq	r0, R12_usr
    4c64:	317a4806 	cmncc	sl, r6, lsl #16
    4c68:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c6c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c70:	01040200 	mrseq	r0, R12_usr
    4c74:	5b7a4806 	blpl	1e96c94 <_Min_Stack_Size+0x1e96894>
    4c78:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c7c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c80:	01040200 	mrseq	r0, R12_usr
    4c84:	5b7a4806 	blpl	1e96ca4 <_Min_Stack_Size+0x1e968a4>
    4c88:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c8c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c90:	01040200 	mrseq	r0, R12_usr
    4c94:	02004806 	andeq	r4, r0, #393216	; 0x60000
    4c98:	74060204 	strvc	r0, [r6], #-516	; 0x204
    4c9c:	16037a06 	strne	r7, [r3], -r6, lsl #20
    4ca0:	1002304a 	andne	r3, r2, sl, asr #32
    4ca4:	00010100 	andeq	r0, r1, r0, lsl #2
    4ca8:	a8a80205 	stmiage	r8!, {r0, r2, r9}
    4cac:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    4cb0:	31590108 	cmpcc	r9, r8, lsl #2
    4cb4:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4cb8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4cbc:	04020074 	streq	r0, [r2], #-116	; 0x74
    4cc0:	79480601 	stmdbvc	r8, {r0, r9, sl}^
    4cc4:	224b5b4d 	subcs	r5, fp, #78848	; 0x13400
    4cc8:	01040200 	mrseq	r0, R12_usr
    4ccc:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4cd0:	48060104 	stmdami	r6, {r2, r8}
    4cd4:	224b317a 	subcs	r3, fp, #-2147483618	; 0x8000001e
    4cd8:	01040200 	mrseq	r0, R12_usr
    4cdc:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4ce0:	48060104 	stmdami	r6, {r2, r8}
    4ce4:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4ce8:	01040200 	mrseq	r0, R12_usr
    4cec:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4cf0:	48060104 	stmdami	r6, {r2, r8}
    4cf4:	02040200 	andeq	r0, r4, #0, 4
    4cf8:	7a067406 	bvc	1a1d18 <_Min_Stack_Size+0x1a1918>
    4cfc:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4d00:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d04:	04020074 	streq	r0, [r2], #-116	; 0x74
    4d08:	7a480601 	bvc	1206514 <_Min_Stack_Size+0x1206114>
    4d0c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4d10:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d14:	04020074 	streq	r0, [r2], #-116	; 0x74
    4d18:	7a480601 	bvc	1206524 <_Min_Stack_Size+0x1206124>
    4d1c:	00224b31 	eoreq	r4, r2, r1, lsr fp
    4d20:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d24:	04020074 	streq	r0, [r2], #-116	; 0x74
    4d28:	7a480601 	bvc	1206534 <_Min_Stack_Size+0x1206134>
    4d2c:	224d5b4d 	subcs	r5, sp, #78848	; 0x13400
    4d30:	01001202 	tsteq	r0, r2, lsl #4
    4d34:	02050001 	andeq	r0, r5, #1
    4d38:	0800aa84 	stmdaeq	r0, {r2, r7, r9, fp, sp, pc}
    4d3c:	0109d303 	tsteq	r9, r3, lsl #6
    4d40:	4b4d4d4b 	blmi	1358274 <_Min_Stack_Size+0x1357e74>
    4d44:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d48:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d50:	4b5b7a48 	blmi	16e3678 <_Min_Stack_Size+0x16e3278>
    4d54:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d58:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d5c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d60:	4b317a48 	blmi	c63688 <_Min_Stack_Size+0xc63288>
    4d64:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d68:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d6c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d70:	4d697a48 	vstmdbmi	r9!, {s15-s86}
    4d74:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4d78:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4d7c:	01040200 	mrseq	r0, R12_usr
    4d80:	5b7a4806 	blpl	1e96da0 <_Min_Stack_Size+0x1e969a0>
    4d84:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4d88:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4d8c:	01040200 	mrseq	r0, R12_usr
    4d90:	4b7a4806 	blmi	1e96db0 <_Min_Stack_Size+0x1e969b0>
    4d94:	224b315b 	subcs	r3, fp, #-1073741802	; 0xc0000016
    4d98:	01040200 	mrseq	r0, R12_usr
    4d9c:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4da0:	48060104 	stmdami	r6, {r2, r8}
    4da4:	5b5b4d7a 	blpl	16d8394 <_Min_Stack_Size+0x16d7f94>
    4da8:	02835b4b 	addeq	r5, r3, #76800	; 0x12c00
    4dac:	01010010 	tsteq	r1, r0, lsl r0
    4db0:	50020500 	andpl	r0, r2, r0, lsl #10
    4db4:	030800ac 	movweq	r0, #32940	; 0x80ac
    4db8:	3f010ab1 	svccc	0x00010ab1
    4dbc:	314c4b4b 	cmpcc	ip, fp, asr #22
    4dc0:	2f3d2f3d 	svccs	0x003d2f3d
    4dc4:	4b313d3d 	blmi	c542c0 <_Min_Stack_Size+0xc53ec0>
    4dc8:	0902215a 	stmdbeq	r2, {r1, r3, r4, r6, r8, sp}
    4dcc:	00010100 	andeq	r0, r1, r0, lsl #2
    4dd0:	acbc0205 	lfmge	f0, 4, [ip], #20
    4dd4:	d2030800 	andle	r0, r3, #0, 16
    4dd8:	2f4b010a 	svccs	0x004b010a
    4ddc:	02040200 	andeq	r0, r4, #0, 4
    4de0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    4de4:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    4de8:	0008023f 	andeq	r0, r8, pc, lsr r2
    4dec:	01a00101 	lsleq	r0, r1, #2
    4df0:	00020000 	andeq	r0, r2, r0
    4df4:	0000012d 	andeq	r0, r0, sp, lsr #2
    4df8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4dfc:	0101000d 	tsteq	r1, sp
    4e00:	00000101 	andeq	r0, r0, r1, lsl #2
    4e04:	00000100 	andeq	r0, r0, r0, lsl #2
    4e08:	2f2e2e01 	svccs	0x002e2e01
    4e0c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4e10:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4e14:	2f2e2e2f 	svccs	0x002e2e2f
    4e18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4e1c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    4e20:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4e24:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4e28:	616d2f6d 	cmnvs	sp, sp, ror #30
    4e2c:	2f006874 	svccs	0x00006874
    4e30:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4e34:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    4e38:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    4e3c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e40:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4e44:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    4e48:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    4e4c:	31303274 	teqcc	r0, r4, ror r2
    4e50:	31383034 	teqcc	r8, r4, lsr r0
    4e54:	61312e38 	teqvs	r1, r8, lsr lr
    4e58:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    4e5c:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    4e60:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4e64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4e68:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    4e6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4e70:	616d2f65 	cmnvs	sp, r5, ror #30
    4e74:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4e78:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    4e7c:	2f2e2e2f 	svccs	0x002e2e2f
    4e80:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4e84:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4e88:	2f2e2e2f 	svccs	0x002e2e2f
    4e8c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4e90:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4e94:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4e98:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 4d18 <_Min_Stack_Size+0x4918>
    4e9c:	2f687461 	svccs	0x00687461
    4ea0:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    4ea4:	6f6d6d6f 	svcvs	0x006d6d6f
    4ea8:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    4eac:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    4eb0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4eb4:	2f64646c 	svccs	0x0064646c
    4eb8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4ebc:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    4ec0:	302e312e 	eorcc	r3, lr, lr, lsr #2
    4ec4:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    4ec8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    4ecc:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    4ed0:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    4ed4:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    4ed8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4edc:	2f62696c 	svccs	0x0062696c
    4ee0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4ee4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4ee8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4eec:	5f730000 	svcpl	0x00730000
    4ef0:	6e617461 	cdpvs	4, 6, cr7, cr1, cr1, {3}
    4ef4:	0100632e 	tsteq	r0, lr, lsr #6
    4ef8:	645f0000 	ldrbvs	r0, [pc], #-0	; 4f00 <_Min_Stack_Size+0x4b00>
    4efc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    4f00:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4f08 <_Min_Stack_Size+0x4b08>
    4f04:	73657079 	cmnvc	r5, #121	; 0x79
    4f08:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4f0c:	64660000 	strbtvs	r0, [r6], #-0
    4f10:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4f14:	0300682e 	movweq	r6, #2094	; 0x82e
    4f18:	616d0000 	cmnvs	sp, r0
    4f1c:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    4f20:	00000400 	andeq	r0, r0, r0, lsl #8
    4f24:	02050000 	andeq	r0, r5, #0
    4f28:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
    4f2c:	01018503 	tsteq	r1, r3, lsl #10
    4f30:	032f2d34 	teqeq	pc, #52, 26	; 0xd00
    4f34:	32203c7a 	eorcc	r3, r0, #31232	; 0x7a00
    4f38:	02002322 	andeq	r2, r0, #-2013265920	; 0x88000000
    4f3c:	00670104 	rsbeq	r0, r7, r4, lsl #2
    4f40:	3b010402 	blcc	45f50 <_Min_Stack_Size+0x45b50>
    4f44:	d6210385 	strtle	r0, [r1], -r5, lsl #7
    4f48:	75586103 	ldrbvc	r6, [r8, #-259]	; 0x103
    4f4c:	2e110377 	mrccs	3, 0, r0, cr1, cr7, {3}
    4f50:	302f2d83 	eorcc	r2, pc, r3, lsl #27
    4f54:	2f02303a 	svccs	0x0002303a
    4f58:	022f3b13 	eoreq	r3, pc, #19456	; 0x4c00
    4f5c:	2f491328 	svccs	0x00491328
    4f60:	13220222 	teqne	r2, #536870914	; 0x20000002
    4f64:	033e2f1f 	teqeq	lr, #31, 30	; 0x7c
    4f68:	2203585e 	andcs	r5, r3, #6160384	; 0x5e0000
    4f6c:	58630382 	stmdapl	r3!, {r1, r7, r8, r9}^
    4f70:	03d61d03 	bicseq	r1, r6, #3, 26	; 0xc0
    4f74:	572f5867 	strpl	r5, [pc, -r7, ror #16]!
    4f78:	0067212f 	rsbeq	r2, r7, pc, lsr #2
    4f7c:	03010402 	movweq	r0, #5122	; 0x1402
    4f80:	03c80811 	biceq	r0, r8, #1114112	; 0x110000
    4f84:	67120874 			; <UNDEFINED> instruction: 0x67120874
    4f88:	7a03f408 	bvc	101fb0 <_Min_Stack_Size+0x101bb0>
    4f8c:	004c02c8 	subeq	r0, ip, r8, asr #5
    4f90:	01450101 	cmpeq	r5, r1, lsl #2
    4f94:	00020000 	andeq	r0, r2, r0
    4f98:	0000012d 	andeq	r0, r0, sp, lsr #2
    4f9c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4fa0:	0101000d 	tsteq	r1, sp
    4fa4:	00000101 	andeq	r0, r0, r1, lsl #2
    4fa8:	00000100 	andeq	r0, r0, r0, lsl #2
    4fac:	2f2e2e01 	svccs	0x002e2e01
    4fb0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4fb4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4fb8:	2f2e2e2f 	svccs	0x002e2e2f
    4fbc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4fc0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    4fc4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4fc8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4fcc:	616d2f6d 	cmnvs	sp, sp, ror #30
    4fd0:	2e006874 	mcrcs	8, 0, r6, cr0, cr4, {3}
    4fd4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4fd8:	2f2e2e2f 	svccs	0x002e2e2f
    4fdc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4fe0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4fe4:	2f2e2e2f 	svccs	0x002e2e2f
    4fe8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4fec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4e50 <_Min_Stack_Size+0x4a50>
    4ff0:	2f6d6269 	svccs	0x006d6269
    4ff4:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4ff8:	2f2e2e2f 	svccs	0x002e2e2f
    4ffc:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5000:	2f006e6f 	svccs	0x00006e6f
    5004:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5008:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    500c:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5010:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5014:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5018:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    501c:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5020:	31303274 	teqcc	r0, r4, ror r2
    5024:	31383034 	teqcc	r8, r4, lsr r0
    5028:	61312e38 	teqvs	r1, r8, lsr lr
    502c:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5030:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5034:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5038:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    503c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5040:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5044:	616d2f65 	cmnvs	sp, r5, ror #30
    5048:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    504c:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5050:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5054:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5058:	2f64646c 	svccs	0x0064646c
    505c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5060:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5064:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5068:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    506c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5070:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5074:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5078:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    507c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5080:	2f62696c 	svccs	0x0062696c
    5084:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5088:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    508c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5090:	5f730000 	svcpl	0x00730000
    5094:	73626166 	cmnvc	r2, #-2147483623	; 0x80000019
    5098:	0100632e 	tsteq	r0, lr, lsr #6
    509c:	64660000 	strbtvs	r0, [r6], #-0
    50a0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    50a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    50a8:	645f0000 	ldrbvs	r0, [pc], #-0	; 50b0 <_Min_Stack_Size+0x4cb0>
    50ac:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    50b0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 50b8 <_Min_Stack_Size+0x4cb8>
    50b4:	73657079 	cmnvc	r5, #121	; 0x79
    50b8:	0300682e 	movweq	r6, #2094	; 0x82e
    50bc:	616d0000 	cmnvs	sp, r0
    50c0:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    50c4:	00000400 	andeq	r0, r0, r0, lsl #8
    50c8:	02050000 	andeq	r0, r5, #0
    50cc:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
    50d0:	0100c103 	tsteq	r0, r3, lsl #2
    50d4:	01023015 	tsteq	r2, r5, lsl r0
    50d8:	62010100 	andvs	r0, r1, #0, 2
    50dc:	02000001 	andeq	r0, r0, #1
    50e0:	00012000 	andeq	r2, r1, r0
    50e4:	fb010200 	blx	458ee <_Min_Stack_Size+0x454ee>
    50e8:	01000d0e 	tsteq	r0, lr, lsl #26
    50ec:	00010101 	andeq	r0, r1, r1, lsl #2
    50f0:	00010000 	andeq	r0, r1, r0
    50f4:	2e2e0100 	sufcse	f0, f6, f0
    50f8:	2f2e2e2f 	svccs	0x002e2e2f
    50fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5100:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5104:	2f2e2e2f 	svccs	0x002e2e2f
    5108:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    510c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5110:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5114:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 4f94 <_Min_Stack_Size+0x4b94>
    5118:	00687461 	rsbeq	r7, r8, r1, ror #8
    511c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5120:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5124:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5128:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    512c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5130:	312e322d 	teqcc	lr, sp, lsr #4
    5134:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5138:	30327469 	eorscc	r7, r2, r9, ror #8
    513c:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5140:	312e3831 	teqcc	lr, r1, lsr r8
    5144:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5148:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    514c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5150:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5154:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5158:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    515c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    5160:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5164:	2f2e2e2f 	svccs	0x002e2e2f
    5168:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    516c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5170:	2f2e2e2f 	svccs	0x002e2e2f
    5174:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5178:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4fdc <_Min_Stack_Size+0x4bdc>
    517c:	2f6d6269 	svccs	0x006d6269
    5180:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5184:	2f2e2e2f 	svccs	0x002e2e2f
    5188:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    518c:	2f006e6f 	svccs	0x00006e6f
    5190:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5194:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5198:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    519c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    51a0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    51a4:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    51a8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    51ac:	31303274 	teqcc	r0, r4, ror r2
    51b0:	31383034 	teqcc	r8, r4, lsr r0
    51b4:	61312e38 	teqvs	r1, r8, lsr lr
    51b8:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    51bc:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    51c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    51c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    51c8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    51cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    51d0:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    51d4:	77000073 	smlsdxvc	r0, r3, r0, r0
    51d8:	6973615f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    51dc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    51e0:	6d000001 	stcvs	0, cr0, [r0, #-4]
    51e4:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    51e8:	00020068 	andeq	r0, r2, r8, rrx
    51ec:	6c646600 	stclvs	6, cr6, [r4], #-0
    51f0:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    51f4:	00030068 	andeq	r0, r3, r8, rrx
    51f8:	72726500 	rsbsvc	r6, r2, #0, 10
    51fc:	682e6f6e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5200:	00000400 	andeq	r0, r0, r0, lsl #8
    5204:	02050000 	andeq	r0, r5, #0
    5208:	0800b080 	stmdaeq	r0, {r7, ip, sp, pc}
    520c:	0100dc03 	tsteq	r0, r3, lsl #24
    5210:	4a790335 	bmi	1e45eec <_Min_Stack_Size+0x1e45aec>
    5214:	3b2f3420 	blcc	bd229c <_Min_Stack_Size+0xbd1e9c>
    5218:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    521c:	06200602 	strteq	r0, [r0], -r2, lsl #12
    5220:	30581103 	subscc	r1, r8, r3, lsl #2
    5224:	bd3c6e03 	ldclt	14, cr6, [ip, #-12]!
    5228:	222d2b31 	eorcs	r2, sp, #50176	; 0xc400
    522c:	49312a22 	ldmdbmi	r1!, {r1, r5, r9, fp, sp}
    5230:	2f3b2f22 	svccs	0x003b2f22
    5234:	32304d22 	eorscc	r4, r0, #2176	; 0x880
    5238:	5b3c7803 	blpl	f2324c <_Min_Stack_Size+0xf22e4c>
    523c:	01000502 	tsteq	r0, r2, lsl #10
    5240:	00020a01 	andeq	r0, r2, r1, lsl #20
    5244:	1f000200 	svcne	0x00000200
    5248:	02000001 	andeq	r0, r0, #1
    524c:	0d0efb01 	vstreq	d15, [lr, #-4]
    5250:	01010100 	mrseq	r0, (UNDEF: 17)
    5254:	00000001 	andeq	r0, r0, r1
    5258:	01000001 	tsteq	r0, r1
    525c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5260:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5264:	2f2e2e2f 	svccs	0x002e2e2f
    5268:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    526c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5270:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5274:	2f62696c 	svccs	0x0062696c
    5278:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    527c:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5280:	622f0068 	eorvs	r0, pc, #104	; 0x68
    5284:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5288:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    528c:	2f64646c 	svccs	0x0064646c
    5290:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5294:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5298:	302e312e 	eorcc	r3, lr, lr, lsr #2
    529c:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    52a0:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    52a4:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    52a8:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    52ac:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    52b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    52b4:	2f62696c 	svccs	0x0062696c
    52b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    52bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    52c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    52c4:	2f2e2e00 	svccs	0x002e2e00
    52c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    52cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    52d0:	2f2e2e2f 	svccs	0x002e2e2f
    52d4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    52d8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    52dc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    52e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    52e4:	616d2f6d 	cmnvs	sp, sp, ror #30
    52e8:	2e2f6874 	mcrcs	8, 1, r6, cr15, cr4, {3}
    52ec:	6f632f2e 	svcvs	0x00632f2e
    52f0:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    52f4:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    52f8:	2f646c69 	svccs	0x00646c69
    52fc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5300:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5304:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5308:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    530c:	2b302e31 	blcs	c10bd8 <_Min_Stack_Size+0xc107d8>
    5310:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5314:	30343130 	eorscc	r3, r4, r0, lsr r1
    5318:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    531c:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5320:	2f623332 	svccs	0x00623332
    5324:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5328:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 518c <_Min_Stack_Size+0x4d8c>
    532c:	2f636269 	svccs	0x00636269
    5330:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5334:	2f656475 	svccs	0x00656475
    5338:	00737973 	rsbseq	r7, r3, r3, ror r9
    533c:	705f7700 	subsvc	r7, pc, r0, lsl #14
    5340:	632e776f 	teqvs	lr, #29097984	; 0x1bc0000
    5344:	00000100 	andeq	r0, r0, r0, lsl #2
    5348:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    534c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5350:	64660000 	strbtvs	r0, [r6], #-0
    5354:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5358:	0300682e 	movweq	r6, #2094	; 0x82e
    535c:	72650000 	rsbvc	r0, r5, #0
    5360:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    5364:	00040068 	andeq	r0, r4, r8, rrx
    5368:	05000000 	streq	r0, [r0, #-0]
    536c:	00b12c02 	adcseq	r2, r1, r2, lsl #24
    5370:	00c80308 	sbceq	r0, r8, r8, lsl #6
    5374:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    5378:	204a7303 	subcs	r7, sl, r3, lsl #6
    537c:	2f4a0c03 	svccs	0x004a0c03
    5380:	02002f3b 	andeq	r2, r0, #59, 30	; 0xec
    5384:	20060204 	andcs	r0, r6, r4, lsl #4
    5388:	00ff0306 	rscseq	r0, pc, r6, lsl #6
    538c:	80033058 	andhi	r3, r3, r8, asr r0
    5390:	03673c7f 	cmneq	r7, #32512	; 0x7f00
    5394:	312a8209 	teqcc	sl, r9, lsl #4
    5398:	2d38321c 	lfmcs	f3, 4, [r8, #-112]!	; 0xffffff90
    539c:	2b2f4726 	blcs	bd703c <_Min_Stack_Size+0xbd6c3c>
    53a0:	03262924 	teqeq	r6, #36, 18	; 0x90000
    53a4:	322000f2 	eorcc	r0, r0, #242	; 0xf2
    53a8:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 53a4 <_Min_Stack_Size+0x4fa4>
    53ac:	2a2f9783 	bcs	beb1c0 <_Min_Stack_Size+0xbeadc0>
    53b0:	2d292f32 	stccs	15, cr2, [r9, #-200]!	; 0xffffff38
    53b4:	29302122 	ldmdbcs	r0!, {r1, r5, r8, sp}
    53b8:	02002430 	andeq	r2, r0, #48, 8	; 0x30000000
    53bc:	20060104 	andcs	r0, r6, r4, lsl #2
    53c0:	03697506 	cmneq	r9, #25165824	; 0x1800000
    53c4:	032e00d8 	teqeq	lr, #216	; 0xd8
    53c8:	30035842 	andcc	r5, r3, r2, asr #16
    53cc:	04020074 	streq	r0, [r2], #-116	; 0x74
    53d0:	06820601 	streq	r0, [r2], r1, lsl #12
    53d4:	2a2d30dc 	bcs	b5174c <_Min_Stack_Size+0xb5134c>
    53d8:	222d2a32 	eorcs	r2, sp, #204800	; 0x32000
    53dc:	29301d24 	ldmdbcs	r0!, {r2, r5, r8, sl, fp, ip}
    53e0:	69302430 	ldmdbvs	r0!, {r4, r5, sl, sp}
    53e4:	4a7fad03 	bmi	1ff07f8 <_Min_Stack_Size+0x1ff03f8>
    53e8:	01040200 	mrseq	r0, R12_usr
    53ec:	93067406 	movwls	r7, #25606	; 0x6406
    53f0:	2d2d2b32 	vpushcs	{d2-d26}
    53f4:	2d302f3f 	ldccs	15, cr2, [r0, #-252]!	; 0xffffff04
    53f8:	2f1f2f31 	svccs	0x001f2f31
    53fc:	03201b03 	teqeq	r0, #3072	; 0xc00
    5400:	1d035854 	stcne	8, cr5, [r3, #-336]	; 0xfffffeb0
    5404:	04020058 	streq	r0, [r2], #-88	; 0x58
    5408:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    540c:	2b325b67 	blcs	c9c1b0 <_Min_Stack_Size+0xc9bdb0>
    5410:	2f232d1f 	svccs	0x00232d1f
    5414:	4f2f332a 	svcmi	0x002f332a
    5418:	32660903 	rsbcc	r0, r6, #49152	; 0xc000
    541c:	232d2d2b 	teqcs	sp, #2752	; 0xac0
    5420:	21332a2f 	teqcs	r3, pc, lsr #20
    5424:	50304868 	eorspl	r4, r0, r8, ror #16
    5428:	03581603 	cmpeq	r8, #3145728	; 0x300000
    542c:	1f675851 	svcne	0x00675851
    5430:	2e14032f 	cdpcs	3, 1, cr0, cr4, cr15, {1}
    5434:	0030484c 	eorseq	r4, r0, ip, asr #16
    5438:	49010402 	stmdbmi	r1, {r1, sl}
    543c:	01040200 	mrseq	r0, R12_usr
    5440:	0402009f 	streq	r0, [r2], #-159	; 0x9f
    5444:	0200df01 	andeq	sp, r0, #1, 30
    5448:	089f0104 	ldmeq	pc, {r2, r8}	; <UNPREDICTABLE>
    544c:	98010100 	stmdals	r1, {r8}
    5450:	02000001 	andeq	r0, r0, #1
    5454:	00012d00 	andeq	r2, r1, r0, lsl #26
    5458:	fb010200 	blx	45c62 <_Min_Stack_Size+0x45862>
    545c:	01000d0e 	tsteq	r0, lr, lsl #26
    5460:	00010101 	andeq	r0, r1, r1, lsl #2
    5464:	00010000 	andeq	r0, r1, r0
    5468:	2e2e0100 	sufcse	f0, f6, f0
    546c:	2f2e2e2f 	svccs	0x002e2e2f
    5470:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5474:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5478:	2f2e2e2f 	svccs	0x002e2e2f
    547c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5480:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5484:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5488:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5308 <_Min_Stack_Size+0x4f08>
    548c:	00687461 	rsbeq	r7, r8, r1, ror #8
    5490:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5494:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5498:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    549c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    54a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    54a4:	312e322d 	teqcc	lr, sp, lsr #4
    54a8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    54ac:	30327469 	eorscc	r7, r2, r9, ror #8
    54b0:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    54b4:	312e3831 	teqcc	lr, r1, lsr r8
    54b8:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    54bc:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    54c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    54c4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    54c8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    54cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    54d0:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 5348 <_Min_Stack_Size+0x4f48>
    54d4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    54d8:	2e00656e 	cfsh32cs	mvfx6, mvfx0, #62
    54dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    54e0:	2f2e2e2f 	svccs	0x002e2e2f
    54e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    54e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    54ec:	2f2e2e2f 	svccs	0x002e2e2f
    54f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    54f4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5358 <_Min_Stack_Size+0x4f58>
    54f8:	2f6d6269 	svccs	0x006d6269
    54fc:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5500:	2f2e2e2f 	svccs	0x002e2e2f
    5504:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5508:	2f006e6f 	svccs	0x00006e6f
    550c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5510:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5514:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5518:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    551c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5520:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5524:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5528:	31303274 	teqcc	r0, r4, ror r2
    552c:	31383034 	teqcc	r8, r4, lsr r0
    5530:	61312e38 	teqvs	r1, r8, lsr lr
    5534:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5538:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    553c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5540:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5544:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5548:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    554c:	65000065 	strvs	r0, [r0, #-101]	; 0x65
    5550:	6973615f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    5554:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5558:	5f000001 	svcpl	0x00000001
    555c:	61666564 	cmnvs	r6, r4, ror #10
    5560:	5f746c75 	svcpl	0x00746c75
    5564:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5568:	00682e73 	rsbeq	r2, r8, r3, ror lr
    556c:	66000002 	strvs	r0, [r0], -r2
    5570:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5574:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5578:	6d000003 	stcvs	0, cr0, [r0, #-12]
    557c:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5580:	00040068 	andeq	r0, r4, r8, rrx
    5584:	05000000 	streq	r0, [r0, #-0]
    5588:	00b46002 	adcseq	r6, r4, r2
    558c:	00cc0308 	sbceq	r0, ip, r8, lsl #6
    5590:	2f2d3301 	svccs	0x002d3301
    5594:	22312037 	eorscs	r2, r1, #55	; 0x37
    5598:	1f038523 	svcne	0x00038523
    559c:	5862039e 	stmdapl	r2!, {r1, r2, r3, r4, r7, r8, r9}^
    55a0:	0a034b67 	beq	d8344 <_Min_Stack_Size+0xd7f44>
    55a4:	3b67bbc8 	blcc	19f44cc <_Min_Stack_Size+0x19f40cc>
    55a8:	132f022f 	teqne	pc, #-268435454	; 0xf0000002
    55ac:	27022f3b 	smladxcs	r2, fp, pc, r2	; <UNPREDICTABLE>
    55b0:	2f574b13 	svccs	0x00574b13
    55b4:	2f493133 	svccs	0x00493133
    55b8:	3147672d 	cmpcc	r7, sp, lsr #14
    55bc:	081e221e 	ldmdaeq	lr, {r1, r2, r3, r4, r9, sp}
    55c0:	1f130884 	svcne	0x00130884
    55c4:	4bcad72f 	blmi	ff2bb288 <_estack+0xdf28b288>
    55c8:	03586003 	cmpeq	r8, #3
    55cc:	03580820 	cmpeq	r8, #32, 16	; 0x200000
    55d0:	03835874 	orreq	r5, r3, #116, 16	; 0x740000
    55d4:	4b9e0871 	blmi	fe7877a0 <_estack+0xde7577a0>
    55d8:	2f022f3b 	svccs	0x00022f3b
    55dc:	022f3b13 	eoreq	r3, pc, #19456	; 0x4c00
    55e0:	03671327 	cmneq	r7, #-1677721600	; 0x9c000000
    55e4:	3d029e16 	stccc	14, cr9, [r2, #-88]	; 0xffffffa8
    55e8:	df010100 	svcle	0x00010100
    55ec:	02000002 	andeq	r0, r0, #2
    55f0:	00012c00 	andeq	r2, r1, r0, lsl #24
    55f4:	fb010200 	blx	45dfe <_Min_Stack_Size+0x459fe>
    55f8:	01000d0e 	tsteq	r0, lr, lsl #26
    55fc:	00010101 	andeq	r0, r1, r1, lsl #2
    5600:	00010000 	andeq	r0, r1, r0
    5604:	2e2e0100 	sufcse	f0, f6, f0
    5608:	2f2e2e2f 	svccs	0x002e2e2f
    560c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5610:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5614:	2f2e2e2f 	svccs	0x002e2e2f
    5618:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    561c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5620:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5624:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 54a4 <_Min_Stack_Size+0x50a4>
    5628:	00687461 	rsbeq	r7, r8, r1, ror #8
    562c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5630:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5634:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5638:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    563c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5640:	312e322d 	teqcc	lr, sp, lsr #4
    5644:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5648:	30327469 	eorscc	r7, r2, r9, ror #8
    564c:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5650:	312e3831 	teqcc	lr, r1, lsr r8
    5654:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5658:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    565c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5660:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5664:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5668:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    566c:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 54e4 <_Min_Stack_Size+0x50e4>
    5670:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5674:	2e00656e 	cfsh32cs	mvfx6, mvfx0, #62
    5678:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    567c:	2f2e2e2f 	svccs	0x002e2e2f
    5680:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5684:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5688:	2f2e2e2f 	svccs	0x002e2e2f
    568c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5690:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 54f4 <_Min_Stack_Size+0x50f4>
    5694:	2f6d6269 	svccs	0x006d6269
    5698:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    569c:	2f2e2e2f 	svccs	0x002e2e2f
    56a0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    56a4:	2f006e6f 	svccs	0x00006e6f
    56a8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    56ac:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    56b0:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    56b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    56b8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    56bc:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    56c0:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    56c4:	31303274 	teqcc	r0, r4, ror r2
    56c8:	31383034 	teqcc	r8, r4, lsr r0
    56cc:	61312e38 	teqvs	r1, r8, lsr lr
    56d0:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    56d4:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    56d8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    56dc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    56e0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    56e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    56e8:	65000065 	strvs	r0, [r0, #-101]	; 0x65
    56ec:	776f705f 			; <UNDEFINED> instruction: 0x776f705f
    56f0:	0100632e 	tsteq	r0, lr, lsr #6
    56f4:	645f0000 	ldrbvs	r0, [pc], #-0	; 56fc <_Min_Stack_Size+0x52fc>
    56f8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    56fc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5704 <_Min_Stack_Size+0x5304>
    5700:	73657079 	cmnvc	r5, #121	; 0x79
    5704:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5708:	64660000 	strbtvs	r0, [r6], #-0
    570c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5710:	0300682e 	movweq	r6, #2094	; 0x82e
    5714:	616d0000 	cmnvs	sp, r0
    5718:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    571c:	00000400 	andeq	r0, r0, r0, lsl #8
    5720:	02050000 	andeq	r0, r5, #0
    5724:	0800b888 	stmdaeq	r0, {r3, r7, fp, ip, sp, pc}
    5728:	0100ea03 	tsteq	r0, r3, lsl #20
    572c:	032e0903 	teqeq	lr, #49152	; 0xc000
    5730:	25272e77 	strcs	r2, [r7, #-3703]!	; 0xe77
    5734:	202e7403 	eorcs	r7, lr, r3, lsl #8
    5738:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
    573c:	03312527 	teqeq	r1, #163577856	; 0x9c00000
    5740:	0334207a 	teqeq	r4, #122	; 0x7a
    5744:	22263c7a 	eorcs	r3, r6, #31232	; 0x7a00
    5748:	01c2038b 	biceq	r0, r2, fp, lsl #7
    574c:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    5750:	7ec10301 	cdpvc	3, 12, cr0, cr1, cr1, {0}
    5754:	0b03c958 	bleq	f7cbc <_Min_Stack_Size+0xf78bc>
    5758:	10032dac 	andne	r2, r3, ip, lsr #27
    575c:	69442120 	stmdbvs	r4, {r5, r8, sp}^
    5760:	4b766c67 	blmi	1da0904 <_Min_Stack_Size+0x1da0504>
    5764:	01040200 	mrseq	r0, R12_usr
    5768:	03067406 	movweq	r7, #25606	; 0x6406
    576c:	67774a12 			; <UNDEFINED> instruction: 0x67774a12
    5770:	04020067 	streq	r0, [r2], #-103	; 0x67
    5774:	02008701 	andeq	r8, r0, #262144	; 0x40000
    5778:	03290104 	teqeq	r9, #4, 2
    577c:	03ac7fb5 			; <UNDEFINED> instruction: 0x03ac7fb5
    5780:	035801c2 	cmpeq	r8, #-2147483600	; 0x80000030
    5784:	03587ec4 	cmpeq	r8, #196, 28	; 0xc40
    5788:	034a01bc 	movteq	r0, #41404	; 0xa1bc
    578c:	033c7ec4 	teqeq	ip, #196, 28	; 0xc40
    5790:	67672e0a 	strbvs	r2, [r7, -sl, lsl #28]!
    5794:	0359592f 	cmpeq	r9, #770048	; 0xbc000
    5798:	1203ac79 	andne	sl, r3, #30976	; 0x7900
    579c:	0375842e 	cmneq	r5, #771751936	; 0x2e000000
    57a0:	2f3d9013 	svccs	0x003d9013
    57a4:	04020091 	streq	r0, [r2], #-145	; 0x91
    57a8:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    57ac:	00d66203 	sbcseq	r6, r6, r3, lsl #4
    57b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    57b4:	68030658 	stmdavs	r3, {r3, r4, r6, r9, sl}
    57b8:	2e0e03ac 	cdpcs	3, 0, cr0, cr14, cr12, {5}
    57bc:	4a00c003 	bmi	357d0 <_Min_Stack_Size+0x353d0>
    57c0:	c921303a 	stmdbgt	r1!, {r1, r3, r4, r5, ip, sp}
    57c4:	3246312f 	subcc	r3, r6, #-1073741813	; 0xc000000b
    57c8:	2347231c 	movtcs	r2, #29468	; 0x731c
    57cc:	ab593d2f 	blge	1654c90 <_Min_Stack_Size+0x1654890>
    57d0:	9f4d8d33 	svcls	0x004d8d33
    57d4:	87d72f2d 	ldrbhi	r2, [r7, sp, lsr #30]
    57d8:	6955311d 	ldmdbvs	r5, {r0, r2, r3, r4, r8, ip, sp}^
    57dc:	81302c22 	teqhi	r0, r2, lsr #24
    57e0:	f4bb2d2f 			; <UNDEFINED> instruction: 0xf4bb2d2f
    57e4:	022f2d67 	eoreq	r2, pc, #6592	; 0x19c0
    57e8:	2f2d1340 	svccs	0x002d1340
    57ec:	592f1fbb 	stmdbpl	pc!, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    57f0:	3f672f49 	svccc	0x00672f49
    57f4:	552f1f67 	strpl	r1, [pc, #-3943]!	; 4895 <_Min_Stack_Size+0x4495>
    57f8:	15082b23 	strne	r2, [r8, #-2851]	; 0xb23
    57fc:	3a2267bc 	bcc	89f6f4 <_Min_Stack_Size+0x89f2f4>
    5800:	2f3b2f30 	svccs	0x003b2f30
    5804:	ae2c2248 	cdpge	2, 2, cr2, cr12, cr8, {2}
    5808:	221e4c08 	andscs	r4, lr, #8, 24	; 0x800
    580c:	f32f732f 	vcgt.u32	d7, d15, d31
    5810:	082f2d21 	stmdaeq	pc!, {r0, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    5814:	834e6740 	movthi	r6, #59200	; 0xe740
    5818:	2f1fad08 	svccs	0x001fad08
    581c:	2f566875 	svccs	0x00566875
    5820:	03772f21 	cmneq	r7, #33, 30	; 0x84
    5824:	3182080d 	orrcc	r0, r2, sp, lsl #16
    5828:	312c3067 	teqcc	ip, r7, rrx
    582c:	2f2d2f2d 	svccs	0x002d2f2d
    5830:	2f1e303b 	svccs	0x001e303b
    5834:	bd3d2d30 	ldclt	13, cr2, [sp, #-192]!	; 0xffffff40
    5838:	2f214921 	svccs	0x00214921
    583c:	f3082f1f 	vmaxnm.f32	d2, d8, d15
    5840:	832f2d67 	teqhi	pc, #6592	; 0x19c0
    5844:	3b592f1f 	blcc	16514c8 <_Min_Stack_Size+0x16510c8>
    5848:	132e022f 	teqne	lr, #-268435454	; 0xf0000002
    584c:	bc132702 	ldclt	7, cr2, [r3], {2}
    5850:	2d322b21 	fldmdbxcs	r2!, {d2-d17}	;@ Deprecated
    5854:	7eeb0330 	mcrvc	3, 7, r0, cr11, cr0, {1}
    5858:	3d015a02 	vstrcc	s10, [r1, #-8]
    585c:	2e019503 	cfsh32cs	mvfx9, mvfx1, #3
    5860:	3c7eeb03 	ldclcc	11, cr14, [lr], #-12
    5864:	01040200 	mrseq	r0, R12_usr
    5868:	032e1e03 	teqeq	lr, #3, 28	; 0x30
    586c:	914a00d2 	ldrdls	r0, [sl, #-2]
    5870:	04020085 	streq	r0, [r2], #-133	; 0x85
    5874:	06c80601 	strbeq	r0, [r8], r1, lsl #12
    5878:	03f26b03 	mvnseq	r6, #3072	; 0xc00
    587c:	03587f99 	cmpeq	r8, #612	; 0x264
    5880:	7775902a 	ldrbvc	r9, [r5, -sl, lsr #32]!
    5884:	2f303a84 	svccs	0x00303a84
    5888:	22482f3b 	subcs	r2, r8, #59, 30	; 0xec
    588c:	1428022c 	strtne	r0, [r8], #-556	; 0x22c
    5890:	2d2167c9 	stccs	7, cr6, [r1, #-804]!	; 0xfffffcdc
    5894:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    5898:	c85d0301 	ldmdagt	sp, {r0, r8, r9}^
    589c:	01040200 	mrseq	r0, R12_usr
    58a0:	9e00e503 	cfsh32ls	mvfx14, mvfx0, #3
    58a4:	81f20f03 	mvnshi	r0, r3, lsl #30
    58a8:	2e7eed03 	cdpcs	13, 7, cr14, cr14, cr3, {0}
    58ac:	76035921 	strvc	r5, [r3], -r1, lsr #18
    58b0:	4a2c034a 	bmi	b065e0 <_Min_Stack_Size+0xb061e0>
    58b4:	5403492f 	strpl	r4, [r3], #-2351	; 0x92f
    58b8:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    58bc:	01b10301 			; <UNDEFINED> instruction: 0x01b10301
    58c0:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    58c4:	7ed90301 	cdpvc	3, 13, cr0, cr9, cr1, {0}
    58c8:	00260266 	eoreq	r0, r6, r6, ror #4
    58cc:	017a0101 	cmneq	sl, r1, lsl #2
    58d0:	00020000 	andeq	r0, r2, r0
    58d4:	000000e0 	andeq	r0, r0, r0, ror #1
    58d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    58dc:	0101000d 	tsteq	r1, sp
    58e0:	00000101 	andeq	r0, r0, r1, lsl #2
    58e4:	00000100 	andeq	r0, r0, r0, lsl #2
    58e8:	2f2e2e01 	svccs	0x002e2e01
    58ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    58f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58f4:	2f2e2e2f 	svccs	0x002e2e2f
    58f8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    58fc:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5900:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5904:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5908:	616d2f6d 	cmnvs	sp, sp, ror #30
    590c:	2f006874 	svccs	0x00006874
    5910:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5914:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5918:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    591c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5920:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5924:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5928:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    592c:	31303274 	teqcc	r0, r4, ror r2
    5930:	31383034 	teqcc	r8, r4, lsr r0
    5934:	61312e38 	teqvs	r1, r8, lsr lr
    5938:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    593c:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5940:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5944:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5948:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    594c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5950:	616d2f65 	cmnvs	sp, r5, ror #30
    5954:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5958:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    595c:	2f2e2e2f 	svccs	0x002e2e2f
    5960:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5964:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5968:	2f2e2e2f 	svccs	0x002e2e2f
    596c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5970:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5974:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5978:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 57f8 <_Min_Stack_Size+0x53f8>
    597c:	2f687461 	svccs	0x00687461
    5980:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    5984:	6f6d6d6f 	svcvs	0x006d6d6f
    5988:	6500006e 	strvs	r0, [r0, #-110]	; 0x6e
    598c:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    5990:	00632e74 	rsbeq	r2, r3, r4, ror lr
    5994:	5f000001 	svcpl	0x00000001
    5998:	61666564 	cmnvs	r6, r4, ror #10
    599c:	5f746c75 	svcpl	0x00746c75
    59a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    59a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    59a8:	66000002 	strvs	r0, [r0], -r2
    59ac:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    59b0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    59b4:	00000003 	andeq	r0, r0, r3
    59b8:	d8020500 	stmdale	r2, {r8, sl}
    59bc:	030800c3 	movweq	r0, #32963	; 0x80c3
    59c0:	030100e3 	movweq	r0, #4323	; 0x10e3
    59c4:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    59c8:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    59cc:	34907703 	ldrcc	r7, [r0], #1795	; 0x703
    59d0:	03353331 	teqeq	r5, #-1006632960	; 0xc4000000
    59d4:	1f302e0a 	svcne	0x00302e0a
    59d8:	2d312c30 	ldccs	12, cr2, [r1, #-192]!	; 0xffffff40
    59dc:	24392c36 	ldrtcs	r2, [r9], #-3126	; 0xc36
    59e0:	31221f21 	teqcc	r2, r1, lsr #30
    59e4:	3b2b2521 	blcc	acee70 <_Min_Stack_Size+0xacea70>
    59e8:	2d281b22 	vstmdbcs	r8!, {d1-d17}
    59ec:	2e770330 	mrccs	3, 3, r0, cr7, cr0, {1}
    59f0:	21741303 	cmncs	r4, r3, lsl #6
    59f4:	0330214b 	teqeq	r0, #-1073741806	; 0xc0000012
    59f8:	0d032075 	stceq	0, cr2, [r3, #-468]	; 0xfffffe2c
    59fc:	032f2c20 	teqeq	pc, #32, 24	; 0x2000
    5a00:	1e232e74 	mcrne	14, 1, r2, cr3, cr4, {3}
    5a04:	04020030 	streq	r0, [r2], #-48	; 0x30
    5a08:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5a0c:	002f494c 	eoreq	r4, pc, ip, asr #18
    5a10:	06010402 	streq	r0, [r1], -r2, lsl #8
    5a14:	0c030620 	stceq	6, cr0, [r3], {32}
    5a18:	4d5d3274 	lfmmi	f3, 2, [sp, #-464]	; 0xfffffe30
    5a1c:	3e4c2c30 	mcrcc	12, 2, r2, cr12, cr0, {1}
    5a20:	7fb3033d 	svcvc	0x00b3033d
    5a24:	1f364b2e 	svcne	0x00364b2e
    5a28:	02001e21 	andeq	r1, r0, #528	; 0x210
    5a2c:	00320104 	eorseq	r0, r2, r4, lsl #2
    5a30:	06020402 	streq	r0, [r2], -r2, lsl #8
    5a34:	3b92063c 	blcc	fe48732c <_estack+0xde45732c>
    5a38:	2e6d0322 	cdpcs	3, 6, cr0, cr13, cr2, {1}
    5a3c:	9e00d303 	cdpls	3, 0, cr13, cr0, cr3, {0}
    5a40:	2e7fbd03 	cdpcs	13, 7, cr11, cr15, cr3, {0}
    5a44:	024a7703 	subeq	r7, sl, #786432	; 0xc0000
    5a48:	0101000a 	tsteq	r1, sl
    5a4c:	0000010c 	andeq	r0, r0, ip, lsl #2
    5a50:	00f50002 	rscseq	r0, r5, r2
    5a54:	01020000 	mrseq	r0, (UNDEF: 2)
    5a58:	000d0efb 	strdeq	r0, [sp], -fp
    5a5c:	01010101 	tsteq	r1, r1, lsl #2
    5a60:	01000000 	mrseq	r0, (UNDEF: 0)
    5a64:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5a68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a6c:	2f2e2e2f 	svccs	0x002e2e2f
    5a70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a78:	2f2e2e2f 	svccs	0x002e2e2f
    5a7c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5a80:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 58e4 <_Min_Stack_Size+0x54e4>
    5a84:	2f6d6269 	svccs	0x006d6269
    5a88:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5a8c:	2f006e6f 	svccs	0x00006e6f
    5a90:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5a94:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5a98:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5a9c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5aa0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5aa4:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5aa8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5aac:	31303274 	teqcc	r0, r4, ror r2
    5ab0:	31383034 	teqcc	r8, r4, lsr r0
    5ab4:	61312e38 	teqvs	r1, r8, lsr lr
    5ab8:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5abc:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5ac0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5ac4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5ac8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5acc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5ad0:	616d2f65 	cmnvs	sp, r5, ror #30
    5ad4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5ad8:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5adc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5ae0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5ae4:	2f64646c 	svccs	0x0064646c
    5ae8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5aec:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5af0:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5af4:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5af8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5afc:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5b00:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5b04:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5b08:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5b0c:	2f62696c 	svccs	0x0062696c
    5b10:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5b14:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5b18:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5b1c:	5f730000 	svcpl	0x00730000
    5b20:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    5b24:	632e6574 	teqvs	lr, #116, 10	; 0x1d000000
    5b28:	00000100 	andeq	r0, r0, r0, lsl #2
    5b2c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5b30:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    5b34:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5b38:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5b3c:	00000200 	andeq	r0, r0, r0, lsl #4
    5b40:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5b44:	0300682e 	movweq	r6, #2094	; 0x82e
    5b48:	00000000 	andeq	r0, r0, r0
    5b4c:	c5580205 	ldrbgt	r0, [r8, #-517]	; 0x205
    5b50:	1c030800 	stcne	8, cr0, [r3], {-0}
    5b54:	024b1501 	subeq	r1, fp, #4194304	; 0x400000
    5b58:	01010002 	tsteq	r1, r2
    5b5c:	0000011e 	andeq	r0, r0, lr, lsl r1
    5b60:	00f90002 	rscseq	r0, r9, r2
    5b64:	01020000 	mrseq	r0, (UNDEF: 2)
    5b68:	000d0efb 	strdeq	r0, [sp], -fp
    5b6c:	01010101 	tsteq	r1, r1, lsl #2
    5b70:	01000000 	mrseq	r0, (UNDEF: 0)
    5b74:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5b78:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b7c:	2f2e2e2f 	svccs	0x002e2e2f
    5b80:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b84:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b88:	2f2e2e2f 	svccs	0x002e2e2f
    5b8c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5b90:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 59f4 <_Min_Stack_Size+0x55f4>
    5b94:	2f6d6269 	svccs	0x006d6269
    5b98:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5b9c:	2f006e6f 	svccs	0x00006e6f
    5ba0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5ba4:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5ba8:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5bac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5bb0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5bb4:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5bb8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5bbc:	31303274 	teqcc	r0, r4, ror r2
    5bc0:	31383034 	teqcc	r8, r4, lsr r0
    5bc4:	61312e38 	teqvs	r1, r8, lsr lr
    5bc8:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5bcc:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5bd0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5bd4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5bd8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5bdc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5be0:	616d2f65 	cmnvs	sp, r5, ror #30
    5be4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5be8:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5bec:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5bf0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5bf4:	2f64646c 	svccs	0x0064646c
    5bf8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5bfc:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5c00:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5c04:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5c08:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5c0c:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5c10:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5c14:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5c18:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5c1c:	2f62696c 	svccs	0x0062696c
    5c20:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5c24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5c28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5c2c:	5f730000 	svcpl	0x00730000
    5c30:	6c637066 	stclvs	0, cr7, [r3], #-408	; 0xfffffe68
    5c34:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    5c38:	632e7966 	teqvs	lr, #1671168	; 0x198000
    5c3c:	00000100 	andeq	r0, r0, r0, lsl #2
    5c40:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5c44:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    5c48:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5c4c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5c50:	00000200 	andeq	r0, r0, r0, lsl #4
    5c54:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5c58:	0300682e 	movweq	r6, #2094	; 0x82e
    5c5c:	00000000 	andeq	r0, r0, r0
    5c60:	c5640205 	strbgt	r0, [r4, #-517]!	; 0x205
    5c64:	0a030800 	beq	c7c6c <_Min_Stack_Size+0xc786c>
    5c68:	003e1701 	eorseq	r1, lr, r1, lsl #14
    5c6c:	2c010402 	cfstrscs	mvf0, [r1], {2}
    5c70:	3f2fa093 	svccc	0x002fa093
    5c74:	78031b26 	stmdavc	r3, {r1, r2, r5, r8, r9, fp, ip}
    5c78:	0006023c 	andeq	r0, r6, ip, lsr r2
    5c7c:	009d0101 	addseq	r0, sp, r1, lsl #2
    5c80:	00020000 	andeq	r0, r2, r0
    5c84:	00000097 	muleq	r0, r7, r0
    5c88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5c8c:	0101000d 	tsteq	r1, sp
    5c90:	00000101 	andeq	r0, r0, r1, lsl #2
    5c94:	00000100 	andeq	r0, r0, r0, lsl #2
    5c98:	75622f01 	strbvc	r2, [r2, #-3841]!	; 0xf01
    5c9c:	2f646c69 	svccs	0x00646c69
    5ca0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5ca4:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5ca8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5cac:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5cb0:	2b302e31 	blcs	c1157c <_Min_Stack_Size+0xc1117c>
    5cb4:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5cb8:	30343130 	eorscc	r3, r4, r0, lsr r1
    5cbc:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    5cc0:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5cc4:	2f623332 	svccs	0x00623332
    5cc8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ccc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5b30 <_Min_Stack_Size+0x5730>
    5cd0:	2f636269 	svccs	0x00636269
    5cd4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5cd8:	00656475 	rsbeq	r6, r5, r5, ror r4
    5cdc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ce0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ce4:	2f2e2e2f 	svccs	0x002e2e2f
    5ce8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5cec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5cf0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5cf4:	2f62696c 	svccs	0x0062696c
    5cf8:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5cfc:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5c48 <_Min_Stack_Size+0x5848>
    5d00:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5d04:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    5d08:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5d0c:	73000001 	movwvc	r0, #1
    5d10:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    5d14:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    5d18:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
    5d1c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    5d20:	02000000 	andeq	r0, r0, #0
    5d24:	00009700 	andeq	r9, r0, r0, lsl #14
    5d28:	fb010200 	blx	46532 <_Min_Stack_Size+0x46132>
    5d2c:	01000d0e 	tsteq	r0, lr, lsl #26
    5d30:	00010101 	andeq	r0, r1, r1, lsl #2
    5d34:	00010000 	andeq	r0, r1, r0
    5d38:	2e2e0100 	sufcse	f0, f6, f0
    5d3c:	2f2e2e2f 	svccs	0x002e2e2f
    5d40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5d44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5d48:	2f2e2e2f 	svccs	0x002e2e2f
    5d4c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5d50:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5d54:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5d58:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5d5c:	6f6d6d6f 	svcvs	0x006d6d6f
    5d60:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    5d64:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5d68:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5d6c:	2f64646c 	svccs	0x0064646c
    5d70:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5d74:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5d78:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5d7c:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5d80:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5d84:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5d88:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5d8c:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5d90:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5d94:	2f62696c 	svccs	0x0062696c
    5d98:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5d9c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5da0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5da4:	5f730000 	svcpl	0x00730000
    5da8:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5dac:	2e727265 	cdpcs	2, 7, cr7, cr2, cr5, {3}
    5db0:	00010063 	andeq	r0, r1, r3, rrx
    5db4:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    5db8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5dbc:	00000002 	andeq	r0, r0, r2
    5dc0:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    5dc4:	030800c5 	movweq	r0, #32965	; 0x80c5
    5dc8:	160100f6 			; <UNDEFINED> instruction: 0x160100f6
    5dcc:	01000202 	tsteq	r0, r2, lsl #4
    5dd0:	0000ab01 	andeq	sl, r0, r1, lsl #22
    5dd4:	93000200 	movwls	r0, #512	; 0x200
    5dd8:	02000000 	andeq	r0, r0, #0
    5ddc:	0d0efb01 	vstreq	d15, [lr, #-4]
    5de0:	01010100 	mrseq	r0, (UNDEF: 17)
    5de4:	00000001 	andeq	r0, r0, r1
    5de8:	01000001 	tsteq	r0, r1
    5dec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5df0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5df4:	2f2e2e2f 	svccs	0x002e2e2f
    5df8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5dfc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e00:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5e04:	2f62696c 	svccs	0x0062696c
    5e08:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5e0c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5d58 <_Min_Stack_Size+0x5958>
    5e10:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5e14:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5e18:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5e1c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5e20:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    5e24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e28:	312e322d 	teqcc	lr, sp, lsr #4
    5e2c:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5e30:	30327469 	eorscc	r7, r2, r9, ror #8
    5e34:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5e38:	312e3831 	teqcc	lr, r1, lsr r8
    5e3c:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5e40:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    5e44:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5e48:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5e4c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5e50:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    5e54:	00006564 	andeq	r6, r0, r4, ror #10
    5e58:	616e5f73 	smcvs	58867	; 0xe5f3
    5e5c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5e60:	6d000001 	stcvs	0, cr0, [r0, #-4]
    5e64:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5e68:	00020068 	andeq	r0, r2, r8, rrx
    5e6c:	05000000 	streq	r0, [r0, #-0]
    5e70:	00c5b802 	sbceq	fp, r5, r2, lsl #16
    5e74:	01280308 	teqeq	r8, r8, lsl #6
    5e78:	02010903 	andeq	r0, r1, #49152	; 0xc000
    5e7c:	01010005 	tsteq	r1, r5
    5e80:	0000016c 	andeq	r0, r0, ip, ror #2
    5e84:	01140002 	tsteq	r4, r2
    5e88:	01020000 	mrseq	r0, (UNDEF: 2)
    5e8c:	000d0efb 	strdeq	r0, [sp], -fp
    5e90:	01010101 	tsteq	r1, r1, lsl #2
    5e94:	01000000 	mrseq	r0, (UNDEF: 0)
    5e98:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5e9c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ea0:	2f2e2e2f 	svccs	0x002e2e2f
    5ea4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ea8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5eac:	2f2e2e2f 	svccs	0x002e2e2f
    5eb0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5eb4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5eb8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5ebc:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5d3c <_Min_Stack_Size+0x593c>
    5ec0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ec4:	612f656e 	teqvs	pc, lr, ror #10
    5ec8:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    5ecc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ed0:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5e1c <_Min_Stack_Size+0x5a1c>
    5ed4:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5ed8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5edc:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5ee0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5ee4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    5ee8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5eec:	312e322d 	teqcc	lr, sp, lsr #4
    5ef0:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5ef4:	30327469 	eorscc	r7, r2, r9, ror #8
    5ef8:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5efc:	312e3831 	teqcc	lr, r1, lsr r8
    5f00:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5f04:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    5f08:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5f0c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5f10:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5f14:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    5f18:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 5d90 <_Min_Stack_Size+0x5990>
    5f1c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5f20:	2f00656e 	svccs	0x0000656e
    5f24:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5f28:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5f2c:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5f30:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5f34:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5f38:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5f3c:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5f40:	31303274 	teqcc	r0, r4, ror r2
    5f44:	31383034 	teqcc	r8, r4, lsr r0
    5f48:	61312e38 	teqvs	r1, r8, lsr lr
    5f4c:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5f50:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5f54:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5f58:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5f5c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5f60:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5f64:	73000065 	movwvc	r0, #101	; 0x65
    5f68:	6e69725f 	mcrvs	2, 3, r7, cr9, cr15, {2}
    5f6c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    5f70:	5f000001 	svcpl	0x00000001
    5f74:	61666564 	cmnvs	r6, r4, ror #10
    5f78:	5f746c75 	svcpl	0x00746c75
    5f7c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5f80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5f84:	66000002 	strvs	r0, [r0], -r2
    5f88:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5f8c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5f90:	6d000001 	stcvs	0, cr0, [r0, #-4]
    5f94:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5f98:	00030068 	andeq	r0, r3, r8, rrx
    5f9c:	05000000 	streq	r0, [r0, #-0]
    5fa0:	00c5c402 	sbceq	ip, r5, r2, lsl #8
    5fa4:	00d70308 	sbcseq	r0, r7, r8, lsl #6
    5fa8:	034b3501 	movteq	r3, #46337	; 0xb501
    5fac:	33202078 	teqcc	r0, #120	; 0x78
    5fb0:	0321303d 	teqeq	r1, #61	; 0x3d
    5fb4:	4b592e0c 	blmi	16517ec <_Min_Stack_Size+0x16513ec>
    5fb8:	03735b21 	cmneq	r3, #33792	; 0x8400
    5fbc:	2165660e 	cmncs	r5, lr, lsl #12
    5fc0:	67672f2d 	strbvs	r2, [r7, -sp, lsr #30]!
    5fc4:	2f3c7403 	svccs	0x003c7403
    5fc8:	033c6b03 	teqeq	ip, #3072	; 0xc00
    5fcc:	78032e20 	stmdavc	r3, {r5, r9, sl, fp, sp}
    5fd0:	212f593c 	teqcs	pc, ip, lsr r9	; <UNPREDICTABLE>
    5fd4:	4bac6503 	blmi	feb1f3e8 <_estack+0xdeaef3e8>
    5fd8:	222c303e 	eorcs	r3, ip, #62	; 0x3e
    5fdc:	2d30212b 	ldfcss	f2, [r0, #-172]!	; 0xffffff54
    5fe0:	4b68832f 	blmi	1a26ca4 <_Min_Stack_Size+0x1a268a4>
    5fe4:	01040200 	mrseq	r0, R12_usr
    5fe8:	02200c03 	eoreq	r0, r0, #768	; 0x300
    5fec:	01010003 	tsteq	r1, r3
    5ff0:	0000014b 	andeq	r0, r0, fp, asr #2
    5ff4:	01010002 	tsteq	r1, r2
    5ff8:	01020000 	mrseq	r0, (UNDEF: 2)
    5ffc:	000d0efb 	strdeq	r0, [sp], -fp
    6000:	01010101 	tsteq	r1, r1, lsl #2
    6004:	01000000 	mrseq	r0, (UNDEF: 0)
    6008:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    600c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6010:	2f2e2e2f 	svccs	0x002e2e2f
    6014:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6018:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    601c:	2f2e2e2f 	svccs	0x002e2e2f
    6020:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6024:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5e88 <_Min_Stack_Size+0x5a88>
    6028:	2f6d6269 	svccs	0x006d6269
    602c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    6030:	2f006e6f 	svccs	0x00006e6f
    6034:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6038:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    603c:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    6040:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6044:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    6048:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    604c:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    6050:	31303274 	teqcc	r0, r4, ror r2
    6054:	31383034 	teqcc	r8, r4, lsr r0
    6058:	61312e38 	teqvs	r1, r8, lsr lr
    605c:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    6060:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    6064:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6068:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    606c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6070:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    6074:	616d2f65 	cmnvs	sp, r5, ror #30
    6078:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    607c:	622f0065 	eorvs	r0, pc, #101	; 0x65
    6080:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    6084:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6088:	2f64646c 	svccs	0x0064646c
    608c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6090:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6094:	302e312e 	eorcc	r3, lr, lr, lsr #2
    6098:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    609c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    60a0:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    60a4:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    60a8:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    60ac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    60b0:	2f62696c 	svccs	0x0062696c
    60b4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    60b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    60bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    60c0:	5f730000 	svcpl	0x00730000
    60c4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    60c8:	632e6e62 	teqvs	lr, #1568	; 0x620
    60cc:	00000100 	andeq	r0, r0, r0, lsl #2
    60d0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    60d4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    60d8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    60dc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    60e0:	00000200 	andeq	r0, r0, r0, lsl #4
    60e4:	696c6466 	stmdbvs	ip!, {r1, r2, r5, r6, sl, sp, lr}^
    60e8:	682e6d62 	stmdavs	lr!, {r1, r5, r6, r8, sl, fp, sp, lr}
    60ec:	00000100 	andeq	r0, r0, r0, lsl #2
    60f0:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    60f4:	0300682e 	movweq	r6, #2094	; 0x82e
    60f8:	00000000 	andeq	r0, r0, r0
    60fc:	c6e80205 	strbtgt	r0, [r8], r5, lsl #4
    6100:	d3030800 	movwle	r0, #14336	; 0x3800
    6104:	2b150100 	blcs	54650c <_Min_Stack_Size+0x54610c>
    6108:	21223e2e 	teqcs	r2, lr, lsr #28
    610c:	3155694b 	cmpcc	r5, fp, asr #18
    6110:	21253b1f 	teqcs	r5, pc, lsl fp
    6114:	01040200 	mrseq	r0, R12_usr
    6118:	d4064a06 	strle	r4, [r6], #-2566	; 0xa06
    611c:	2f4b214b 	svccs	0x004b214b
    6120:	039e0903 	orrseq	r0, lr, #49152	; 0xc000
    6124:	3d3d2e78 	ldccc	14, cr2, [sp, #-480]!	; 0xfffffe20
    6128:	0200222d 	andeq	r2, r0, #-805306366	; 0xd0000002
    612c:	78030104 	stmdavc	r3, {r2, r8}
    6130:	660b03ba 			; <UNDEFINED> instruction: 0x660b03ba
    6134:	1f2f2149 	svcne	0x002f2149
    6138:	17026f2f 	strne	r6, [r2, -pc, lsr #30]
    613c:	1b010100 	blne	46544 <_Min_Stack_Size+0x46144>
    6140:	02000001 	andeq	r0, r0, #1
    6144:	00010300 	andeq	r0, r1, r0, lsl #6
    6148:	fb010200 	blx	46952 <_Min_Stack_Size+0x46552>
    614c:	01000d0e 	tsteq	r0, lr, lsl #26
    6150:	00010101 	andeq	r0, r1, r1, lsl #2
    6154:	00010000 	andeq	r0, r1, r0
    6158:	2e2e0100 	sufcse	f0, f6, f0
    615c:	2f2e2e2f 	svccs	0x002e2e2f
    6160:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6164:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6168:	2f2e2e2f 	svccs	0x002e2e2f
    616c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    6170:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6174:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6178:	632f6d62 	teqvs	pc, #6272	; 0x1880
    617c:	6f6d6d6f 	svcvs	0x006d6d6f
    6180:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    6184:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    6188:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    618c:	2f64646c 	svccs	0x0064646c
    6190:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6194:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6198:	302e312e 	eorcc	r3, lr, lr, lsr #2
    619c:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    61a0:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    61a4:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    61a8:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    61ac:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    61b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    61b4:	2f62696c 	svccs	0x0062696c
    61b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    61bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    61c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    61c4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    61c8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    61cc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    61d0:	2f646c69 	svccs	0x00646c69
    61d4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    61d8:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    61dc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    61e0:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    61e4:	2b302e31 	blcs	c11ab0 <_Min_Stack_Size+0xc116b0>
    61e8:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    61ec:	30343130 	eorscc	r3, r4, r0, lsr r1
    61f0:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    61f4:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    61f8:	2f623332 	svccs	0x00623332
    61fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6200:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6064 <_Min_Stack_Size+0x5c64>
    6204:	2f636269 	svccs	0x00636269
    6208:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    620c:	00656475 	rsbeq	r6, r5, r5, ror r4
    6210:	635f7300 	cmpvs	pc, #0, 6
    6214:	7379706f 	cmnvc	r9, #111	; 0x6f
    6218:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
    621c:	00010063 	andeq	r0, r1, r3, rrx
    6220:	6c646600 	stclvs	6, cr6, [r4], #-0
    6224:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    6228:	00010068 	andeq	r0, r1, r8, rrx
    622c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    6230:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6234:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6238:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    623c:	00020068 	andeq	r0, r2, r8, rrx
    6240:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    6244:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6248:	00000003 	andeq	r0, r0, r3
    624c:	00020500 	andeq	r0, r2, r0, lsl #10
    6250:	030800c8 	movweq	r0, #32968	; 0x80c8
    6254:	240100c9 	strcs	r0, [r1], #-201	; 0xc9
    6258:	00020268 	andeq	r0, r2, r8, ror #4
    625c:	01020101 	tsteq	r2, r1, lsl #2
    6260:	00020000 	andeq	r0, r2, r0
    6264:	000000eb 	andeq	r0, r0, fp, ror #1
    6268:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    626c:	0101000d 	tsteq	r1, sp
    6270:	00000101 	andeq	r0, r0, r1, lsl #2
    6274:	00000100 	andeq	r0, r0, r0, lsl #2
    6278:	2f2e2e01 	svccs	0x002e2e01
    627c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6280:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6284:	2f2e2e2f 	svccs	0x002e2e2f
    6288:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    628c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    6290:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6294:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6298:	72652f63 	rsbvc	r2, r5, #396	; 0x18c
    629c:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
    62a0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    62a4:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    62a8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    62ac:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    62b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    62b4:	312e322d 	teqcc	lr, sp, lsr #4
    62b8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    62bc:	30327469 	eorscc	r7, r2, r9, ror #8
    62c0:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    62c4:	312e3831 	teqcc	lr, r1, lsr r8
    62c8:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    62cc:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    62d0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    62d4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    62d8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    62dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    62e0:	732f6564 	teqvc	pc, #100, 10	; 0x19000000
    62e4:	2f007379 	svccs	0x00007379
    62e8:	2f727375 	svccs	0x00727375
    62ec:	2f62696c 	svccs	0x0062696c
    62f0:	2f636367 	svccs	0x00636367
    62f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    62fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6300:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    6304:	6e692f38 	mcrvs	15, 3, r2, cr9, cr8, {1}
    6308:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    630c:	65000065 	strvs	r0, [r0, #-101]	; 0x65
    6310:	6f6e7272 	svcvs	0x006e7272
    6314:	0100632e 	tsteq	r0, lr, lsr #6
    6318:	6f6c0000 	svcvs	0x006c0000
    631c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    6320:	00000200 	andeq	r0, r0, r0, lsl #4
    6324:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6328:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    632c:	00000200 	andeq	r0, r0, r0, lsl #4
    6330:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    6334:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6338:	00000300 	andeq	r0, r0, r0, lsl #6
    633c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    6340:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6344:	65000002 	strvs	r0, [r0, #-2]
    6348:	6f6e7272 	svcvs	0x006e7272
    634c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6350:	00000000 	andeq	r0, r0, r0
    6354:	c8140205 	ldmdagt	r4, {r0, r2, r9}
    6358:	0b030800 	bleq	c8360 <_Min_Stack_Size+0xc7f60>
    635c:	024b1301 	subeq	r1, fp, #67108864	; 0x4000000
    6360:	01010002 	tsteq	r1, r2
    6364:	000000e7 	andeq	r0, r0, r7, ror #1
    6368:	00e10002 	rsceq	r0, r1, r2
    636c:	01020000 	mrseq	r0, (UNDEF: 2)
    6370:	000d0efb 	strdeq	r0, [sp], -fp
    6374:	01010101 	tsteq	r1, r1, lsl #2
    6378:	01000000 	mrseq	r0, (UNDEF: 0)
    637c:	2f010000 	svccs	0x00010000
    6380:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6384:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    6388:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    638c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6390:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    6394:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    6398:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    639c:	31303274 	teqcc	r0, r4, ror r2
    63a0:	31383034 	teqcc	r8, r4, lsr r0
    63a4:	61312e38 	teqvs	r1, r8, lsr lr
    63a8:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    63ac:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    63b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    63b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    63b8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    63bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    63c0:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    63c4:	752f0073 	strvc	r0, [pc, #-115]!	; 6359 <_Min_Stack_Size+0x5f59>
    63c8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6204 <_Min_Stack_Size+0x5e04>
    63cc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    63d0:	612f6363 	teqvs	pc, r3, ror #6
    63d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    63d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    63dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    63e0:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    63e4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    63e8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    63ec:	2f2e2e00 	svccs	0x002e2e00
    63f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    63f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    63f8:	2f2e2e2f 	svccs	0x002e2e2f
    63fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6400:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    6404:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6408:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    640c:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
    6410:	00746e65 	rsbseq	r6, r4, r5, ror #28
    6414:	636f6c00 	cmnvs	pc, #0, 24
    6418:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    641c:	5f000001 	svcpl	0x00000001
    6420:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    6424:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6428:	73000001 	movwvc	r0, #1
    642c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    6430:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6434:	72000002 	andvc	r0, r0, #2
    6438:	746e6565 	strbtvc	r6, [lr], #-1381	; 0x565
    643c:	0100682e 	tsteq	r0, lr, lsr #16
    6440:	6d690000 	stclvs	0, cr0, [r9, #-0]
    6444:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0x570
    6448:	0300632e 	movweq	r6, #814	; 0x32e
    644c:	Address 0x000000000000644c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
       4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
       8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
       c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
      10:	2074726f 	rsbscs	r7, r4, pc, ror #4
      14:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
      18:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
      1c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
      20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      24:	34204320 	strtcc	r4, [r0], #-800	; 0x320
      28:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      2c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
      30:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
      34:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
      38:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xd78
      3c:	616d2d20 	cmnvs	sp, r0, lsr #26
      40:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
      44:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
      48:	6d2d6537 	cfstr32vs	mvfx6, [sp, #-220]!	; 0xffffff24
      4c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
      50:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
      54:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      58:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
      5c:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
      60:	7474696c 	ldrbtvc	r6, [r4], #-2412	; 0x96c
      64:	652d656c 	strvs	r6, [sp, #-1388]!	; 0x56c
      68:	6169646e 	cmnvs	r9, lr, ror #8
      6c:	6d2d206e 	stcvs	0, cr2, [sp, #-440]!	; 0xfffffe48
      70:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      74:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      78:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
      7c:	34767066 	ldrbtcc	r7, [r6], #-102	; 0x66
      80:	2d70732d 	ldclcs	3, cr7, [r0, #-180]!	; 0xffffff4c
      84:	20363164 	eorscs	r3, r6, r4, ror #2
      88:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
      8c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
      90:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
      94:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
      98:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
      9c:	4f2d2067 	svcmi	0x002d2067
      a0:	732d2030 	teqvc	sp, #48	; 0x30
      a4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
      a8:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
      ac:	73616666 	cmnvc	r1, #106954752	; 0x6600000
      b0:	616d2d74 	smcvs	53972	; 0xd2d4
      b4:	2d206874 	stccs	8, cr6, [r0, #-464]!	; 0xfffffe30
      b8:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
      bc:	6f697463 	svcvs	0x00697463
      c0:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xd6e
      c4:	6f697463 	svcvs	0x00697463
      c8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
      cc:	74616466 	strbtvc	r6, [r1], #-1126	; 0x466
      d0:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xd61
      d4:	6f697463 	svcvs	0x00697463
      d8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
      dc:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffff4c <_estack+0xdffcff4c>
      e0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
      e4:	2d206e6f 	stccs	14, cr6, [r0, #-444]!	; 0xfffffe44
      e8:	7261702d 	rsbvc	r7, r1, #45	; 0x2d
      ec:	6d206d61 	stcvs	13, cr6, [r0, #-388]!	; 0xfffffe7c
      f0:	692d7861 	pushvs	{r0, r5, r6, fp, ip, sp, lr}
      f4:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
      f8:	6e692d65 	cdpvs	13, 6, cr2, cr9, cr5, {3}
      fc:	2d736e73 	ldclcs	14, cr6, [r3, #-460]!	; 0xfffffe34
     100:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     104:	313d656c 	teqcc	sp, ip, ror #10
     108:	00303030 	eorseq	r3, r0, r0, lsr r0
     10c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 58 <_Min_Heap_Size+0x58>
     110:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     114:	2f686569 	svccs	0x00686569
     118:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     11c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     120:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     124:	6f6c2067 	svcvs	0x006c2067
     128:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     12c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     130:	2064656e 	rsbcs	r6, r4, lr, ror #10
     134:	00746e69 	rsbseq	r6, r4, r9, ror #28
     138:	2f637273 	svccs	0x00637273
     13c:	6e69616d 	powvsez	f6, f1, #5.0
     140:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     144:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     148:	2064656e 	rsbcs	r6, r4, lr, ror #10
     14c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     150:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     154:	5449006e 	strbpl	r0, [r9], #-110	; 0x6e
     158:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     15c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     160:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
     164:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     168:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     16c:	5f00656c 	svcpl	0x0000656c
     170:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     174:	745f3233 	ldrbvc	r3, [pc], #-563	; 17c <_Min_Heap_Size+0x17c>
     178:	6f6c6600 	svcvs	0x006c6600
     17c:	73007461 	movwvc	r7, #1121	; 0x461
     180:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     184:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     188:	72794700 	rsbsvc	r4, r9, #0, 14
     18c:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
     190:	69730061 	ldmdbvs	r3!, {r0, r5, r6}^
     194:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     198:	4c006570 	cfstr32mi	mvfx6, [r0], {112}	; 0x70
     19c:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
     1a0:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
     1a4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     1a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     1ac:	5f5f0066 	svcpl	0x005f0066
     1b0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     1b4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     1b8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     1bc:	73736150 	cmnvc	r3, #80, 2
     1c0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     1c4:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     1c8:	664f7475 			; <UNDEFINED> instruction: 0x664f7475
     1cc:	72465f66 	subvc	r5, r6, #408	; 0x198
     1d0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     1d4:	0079636e 	rsbseq	r6, r9, lr, ror #6
     1d8:	44776152 	ldrbtmi	r6, [r7], #-338	; 0x152
     1dc:	00617461 	rsbeq	r7, r1, r1, ror #8
     1e0:	646e6142 	strbtvs	r6, [lr], #-322	; 0x142
     1e4:	6469575f 	strbtvs	r5, [r9], #-1887	; 0x75f
     1e8:	41006874 	tstmi	r0, r4, ror r8
     1ec:	44697474 	strbtmi	r7, [r9], #-1140	; 0x474
     1f0:	00617461 	rsbeq	r7, r1, r1, ror #8
     1f4:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     1f8:	6163535f 	cmnvs	r3, pc, asr r3
     1fc:	7300656c 	movwvc	r6, #1388	; 0x56c
     200:	612f6372 	teqvs	pc, r2, ror r3	; <UNPREDICTABLE>
     204:	74697474 	strbtvc	r7, [r9], #-1140	; 0x474
     208:	2e656475 	mcrcs	4, 3, r6, cr5, cr5, {3}
     20c:	75450063 	strbvc	r0, [r5, #-99]	; 0x63
     210:	6172656c 	cmnvs	r2, ip, ror #10
     214:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     218:	776f5000 	strbvc	r5, [pc, -r0]!
     21c:	4d5f7265 	lfmmi	f7, 2, [pc, #-404]	; 90 <_Min_Heap_Size+0x90>
     220:	0065646f 	rsbeq	r6, r5, pc, ror #8
     224:	69646e45 	stmdbvs	r4!, {r0, r2, r6, r9, sl, fp, sp, lr}^
     228:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     22c:	41007373 	tstmi	r0, r3, ror r3
     230:	5f736578 	svcpl	0x00736578
     234:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     238:	7000656c 	andvc	r6, r0, ip, ror #10
     23c:	74614466 	strbtvc	r4, [r1], #-1126	; 0x466
     240:	334c0061 	movtcc	r0, #49249	; 0xc061
     244:	30324447 	eorscc	r4, r2, r7, asr #8
     248:	6165525f 	cmnvs	r5, pc, asr r2
     24c:	72794764 	rsbsvc	r4, r9, #100, 14	; 0x1900000
     250:	334c006f 	movtcc	r0, #49263	; 0xc06f
     254:	30324447 	eorscc	r4, r2, r7, asr #8
     258:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     25c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     260:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     264:	4f006e6f 	svcmi	0x00006e6f
     268:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
     26c:	61445f74 	hvcvs	17908	; 0x45f4
     270:	61526174 	cmpvs	r2, r4, ror r1
     274:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
     278:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
     27c:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
     280:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     284:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     288:	00657275 	rsbeq	r7, r5, r5, ror r2
     28c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     290:	7461446b 	strbtvc	r4, [r1], #-1131	; 0x46b
     294:	70555f61 	subsvc	r5, r5, r1, ror #30
     298:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     29c:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     2a0:	5f303244 	svcpl	0x00303244
     2a4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     2a8:	74537265 	ldrbvc	r7, [r3], #-613	; 0x265
     2ac:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     2b0:	00657275 	rsbeq	r7, r5, r5, ror r2
     2b4:	62706d74 	rsbsvs	r6, r0, #116, 26	; 0x1d00
     2b8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     2bc:	6d740072 	ldclvs	0, cr0, [r4, #-456]!	; 0xfffffe38
     2c0:	67657270 			; <UNDEFINED> instruction: 0x67657270
     2c4:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     2c8:	5f303244 	svcpl	0x00303244
     2cc:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     2d0:	6f437265 	svcvs	0x00437265
     2d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2d8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     2dc:	00666544 	rsbeq	r6, r6, r4, asr #10
     2e0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     2e4:	73736150 	cmnvc	r3, #80, 2
     2e8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     2ec:	4d5f7265 	lfmmi	f7, 2, [pc, #-404]	; 160 <_Min_Heap_Size+0x160>
     2f0:	5f65646f 	svcpl	0x0065646f
     2f4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
     2f8:	6f697463 	svcvs	0x00697463
     2fc:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
     300:	504c3142 	subpl	r3, ip, r2, asr #2
     304:	00524e45 	subseq	r4, r2, r5, asr #28
     308:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     30c:	00524746 	subseq	r4, r2, r6, asr #14
     310:	31425041 	cmpcc	r2, r1, asr #32
     314:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     318:	42484100 	submi	r4, r8, #0, 2
     31c:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     320:	42484100 	submi	r4, r8, #0, 2
     324:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     328:	44420052 	strbmi	r0, [r2], #-82	; 0x52
     32c:	50005243 	andpl	r5, r0, r3, asr #4
     330:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     334:	47464353 	smlsldmi	r4, r6, r3, r3
     338:	57500052 			; <UNDEFINED> instruction: 0x57500052
     33c:	79545f52 	ldmdbvc	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     340:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     344:	6e690066 	cdpvs	0, 6, cr0, cr9, cr6, {3}
     348:	4f432f63 	svcmi	0x00432f63
     34c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     350:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     354:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     358:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     35c:	6174732f 	cmnvs	r4, pc, lsr #6
     360:	70757472 	rsbsvc	r7, r5, r2, ror r4
     364:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     368:	5f6d6574 	svcpl	0x006d6574
     36c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     370:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     374:	00632e78 	rsbeq	r2, r3, r8, ror lr
     378:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     37c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     380:	5300745f 	movwpl	r7, #1119	; 0x45f
     384:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     388:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
     38c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     390:	43007375 	movwmi	r7, #885	; 0x375
     394:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     398:	42484100 	submi	r4, r8, #0, 2
     39c:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
     3a0:	48410052 	stmdami	r1, {r1, r4, r6}^
     3a4:	504c3342 	subpl	r3, ip, r2, asr #6
     3a8:	00524e45 	subseq	r4, r2, r5, asr #28
     3ac:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     3b0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     3b4:	43530033 	cmpmi	r3, #51	; 0x33
     3b8:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     3bc:	41006570 	tstmi	r0, r0, ror r5
     3c0:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     3c4:	4400524e 	strmi	r5, [r0], #-590	; 0x24e
     3c8:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     3cc:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
     3d0:	00525343 	subseq	r5, r2, r3, asr #6
     3d4:	4b54504f 	blmi	1514518 <_Min_Stack_Size+0x1514118>
     3d8:	00525945 	subseq	r5, r2, r5, asr #18
     3dc:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     3e0:	43435200 	movtmi	r5, #12800	; 0x3200
     3e4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     3e8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     3ec:	42504100 	subsmi	r4, r0, #0, 2
     3f0:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     3f4:	46430052 			; <UNDEFINED> instruction: 0x46430052
     3f8:	4f005253 	svcmi	0x00005253
     3fc:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
     400:	6c700031 	ldclvs	0, cr0, [r0], #-196	; 0xffffff3c
     404:	756f736c 	strbvc	r7, [pc, #-876]!	; a0 <_Min_Heap_Size+0xa0>
     408:	00656372 	rsbeq	r6, r5, r2, ror r3
     40c:	33424841 	movtcc	r4, #10305	; 0x2841
     410:	00524e45 	subseq	r4, r2, r5, asr #28
     414:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     418:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     41c:	49410070 	stmdbmi	r1, {r4, r5, r6}^
     420:	00524352 	subseq	r4, r2, r2, asr r3
     424:	32425041 	subcc	r5, r2, #65	; 0x41
     428:	00524e45 	subseq	r4, r2, r5, asr #28
     42c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     430:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     434:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     438:	53007265 	movwpl	r7, #613	; 0x265
     43c:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     440:	73795300 	cmnvc	r9, #0, 6
     444:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     448:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     44c:	6b636f6c 	blvs	18dc204 <_Min_Stack_Size+0x18dbe04>
     450:	61647055 	qdsubvs	r7, r5, r4
     454:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     458:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     45c:	73795300 	cmnvc	r9, #0, 6
     460:	496d6574 	stmdbmi	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     464:	0074696e 	rsbseq	r6, r4, lr, ror #18
     468:	31425041 	cmpcc	r2, r1, asr #32
     46c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     470:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     474:	6f63766c 	svcvs	0x0063766c
     478:	4f545600 	svcmi	0x00545600
     47c:	53490052 	movtpl	r0, #36946	; 0x9052
     480:	44005241 	strmi	r5, [r0], #-577	; 0x241
     484:	00525346 	subseq	r5, r2, r6, asr #6
     488:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     48c:	6f436d65 	svcvs	0x00436d65
     490:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     494:	006b636f 	rsbeq	r6, fp, pc, ror #6
     498:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     49c:	42484100 	submi	r4, r8, #0, 2
     4a0:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xc32
     4a4:	4d00524e 	sfmmi	f5, 4, [r0, #-312]	; 0xfffffec8
     4a8:	0052464d 	subseq	r4, r2, sp, asr #12
     4ac:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     4b0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     4b4:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     4b8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     4bc:	00314445 	eorseq	r4, r1, r5, asr #8
     4c0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     4c4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     4c8:	65530032 	ldrbvs	r0, [r3, #-50]	; 0x32
     4cc:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
     4d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     4d4:	4552006b 	ldrbmi	r0, [r2, #-107]	; 0x6b
     4d8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     4dc:	00344445 	eorseq	r4, r4, r5, asr #8
     4e0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     4e4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     4e8:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     4ec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     4f0:	00364445 	eorseq	r4, r6, r5, asr #8
     4f4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4f8:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     4fc:	4100745f 	tstmi	r0, pc, asr r4
     500:	45314248 	ldrmi	r4, [r1, #-584]!	; 0x248
     504:	4100524e 	tstmi	r0, lr, asr #4
     508:	00525346 	subseq	r5, r2, r6, asr #6
     50c:	33424841 	movtcc	r4, #10305	; 0x2841
     510:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     514:	414c4600 	cmpmi	ip, r0, lsl #12
     518:	545f4853 	ldrbpl	r4, [pc], #-2131	; 520 <_Min_Stack_Size+0x120>
     51c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     520:	50006665 	andpl	r6, r0, r5, ror #12
     524:	41534c4c 	cmpmi	r3, ip, asr #24
     528:	47464349 	strbmi	r4, [r6, -r9, asr #6]
     52c:	50430052 	subpl	r0, r3, r2, asr r0
     530:	00524341 	subseq	r4, r2, r1, asr #6
     534:	32425041 	subcc	r5, r2, #65	; 0x41
     538:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     53c:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     540:	00524354 	subseq	r4, r2, r4, asr r3
     544:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     548:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     54c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     550:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     554:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     558:	564e0066 	strbpl	r0, [lr], -r6, rrx
     55c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     560:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     564:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     568:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     56c:	73795300 	cmnvc	r9, #0, 6
     570:	6b636954 	blvs	18daac8 <_Min_Stack_Size+0x18da6c8>
     574:	4b4c435f 	blmi	13112f8 <_Min_Stack_Size+0x1310ef8>
     578:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     57c:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
     580:	5f434956 	svcpl	0x00434956
     584:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     588:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     58c:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
     590:	5f434956 	svcpl	0x00434956
     594:	6f697250 	svcvs	0x00697250
     598:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     59c:	756f7247 	strbvc	r7, [pc, #-583]!	; 35d <_Min_Heap_Size+0x35d>
     5a0:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
     5a4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     5ac:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     5b0:	49006572 	stmdbmi	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     5b4:	00524553 	subseq	r4, r2, r3, asr r5
     5b8:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     5bc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     5c0:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     5c4:	49440052 	stmdbmi	r4, {r1, r4, r6}^
     5c8:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     5cc:	53520045 	cmppl	r2, #69	; 0x45
     5d0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     5d4:	43003144 	movwmi	r3, #324	; 0x144
     5d8:	004c5254 	subeq	r5, ip, r4, asr r2
     5dc:	4349564e 	movtmi	r5, #38478	; 0x964e
     5e0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     5e4:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     5e8:	6154726f 	cmpvs	r4, pc, ror #4
     5ec:	00656c62 	rsbeq	r6, r5, r2, ror #24
     5f0:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     5f4:	636e6900 	cmnvs	lr, #0, 18
     5f8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     5fc:	5f584554 	svcpl	0x00584554
     600:	5f46344d 	svcpl	0x0046344d
     604:	334d5453 	movtcc	r5, #54355	; 0xd453
     608:	2f344632 	svccs	0x00344632
     60c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     610:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     614:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     618:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     61c:	5f787834 	svcpl	0x00787834
     620:	50647453 	rsbpl	r7, r4, r3, asr r4
     624:	70697265 	rsbvc	r7, r9, r5, ror #4
     628:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     62c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     630:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     634:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
     638:	00632e63 	rsbeq	r2, r3, r3, ror #28
     63c:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
     640:	43490042 	movtmi	r0, #36930	; 0x9042
     644:	74005245 	strvc	r5, [r0], #-581	; 0x245
     648:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
     64c:	564e0062 	strbpl	r0, [lr], -r2, rrx
     650:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     654:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     658:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
     65c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     660:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     664:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     668:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
     66c:	756f534b 	strbvc	r5, [pc, #-843]!	; 329 <_Min_Heap_Size+0x329>
     670:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
     674:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     678:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     67c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     680:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     684:	74006570 	strvc	r6, [r0], #-1392	; 0x570
     688:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
     68c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     690:	49007974 	stmdbmi	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     694:	00525053 	subseq	r5, r2, r3, asr r0
     698:	4349564e 	movtmi	r5, #38478	; 0x964e
     69c:	5152495f 	cmppl	r2, pc, asr r9
     6a0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     6a4:	006c656e 	rsbeq	r6, ip, lr, ror #10
     6a8:	4349564e 	movtmi	r5, #38478	; 0x964e
     6ac:	5152495f 	cmppl	r2, pc, asr r9
     6b0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     6b4:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     6b8:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     6bc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     6c0:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
     6c4:	5f434956 	svcpl	0x00434956
     6c8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     6cc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     6d0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     6d4:	61684351 	cmnvs	r8, r1, asr r3
     6d8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     6dc:	65657250 	strbvs	r7, [r5, #-592]!	; 0x250
     6e0:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6e4:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     6e8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     6ec:	46007974 			; <UNDEFINED> instruction: 0x46007974
     6f0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     6f4:	616e6f69 	cmnvs	lr, r9, ror #30
     6f8:	6174536c 	cmnvs	r4, ip, ror #6
     6fc:	4e006574 	cfrshl64mi	mvdx0, mvdx4, r6
     700:	5f434956 	svcpl	0x00434956
     704:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     708:	00626154 	rsbeq	r6, r2, r4, asr r1
     70c:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     710:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
     714:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     718:	646f4d72 	strbtvs	r4, [pc], #-3442	; 720 <_Min_Stack_Size+0x320>
     71c:	4e450065 	cdpmi	0, 4, cr0, cr5, cr5, {3}
     720:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     724:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     728:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     72c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     730:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     734:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     738:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     73c:	50470067 	subpl	r0, r7, r7, rrx
     740:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 748 <_Min_Stack_Size+0x348>
     744:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     748:	70006665 	andvc	r6, r0, r5, ror #12
     74c:	6f706e69 	svcvs	0x00706e69
     750:	50470073 	subpl	r0, r7, r3, ror r0
     754:	505f4f49 	subspl	r4, pc, r9, asr #30
     758:	42006e69 	andmi	r6, r0, #1680	; 0x690
     75c:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     760:	47005445 	strmi	r5, [r0, -r5, asr #8]
     764:	5f4f4950 	svcpl	0x004f4950
     768:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     76c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     770:	61447475 	hvcvs	18245	; 0x4745
     774:	47006174 	smlsdxmi	r0, r4, r1, r6
     778:	4d4f4950 	stclmi	9, cr4, [pc, #-320]	; 640 <_Min_Stack_Size+0x240>
     77c:	5f65646f 	svcpl	0x0065646f
     780:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     784:	00666544 	rsbeq	r6, r6, r4, asr #10
     788:	4f495047 	svcmi	0x00495047
     78c:	0046415f 	subeq	r4, r6, pc, asr r1
     790:	706d6574 	rsbvc	r6, sp, r4, ror r5
     794:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     798:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
     79c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     7a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7a4:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
     7a8:	006c6156 	rsbeq	r6, ip, r6, asr r1
     7ac:	4f495047 	svcmi	0x00495047
     7b0:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     7b4:	4f5f6570 	svcmi	0x005f6570
     7b8:	69420044 	stmdbvs	r2, {r2, r6}^
     7bc:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xf74
     7c0:	00544553 	subseq	r4, r4, r3, asr r5
     7c4:	4f495047 	svcmi	0x00495047
     7c8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     7cc:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     7d0:	50470074 	subpl	r0, r7, r4, ror r0
     7d4:	4f5f4f49 	svcmi	0x005f4f49
     7d8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     7dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     7e0:	6f4d5f4f 	svcvs	0x004d5f4f
     7e4:	415f6564 	cmpmi	pc, r4, ror #10
     7e8:	50470046 	subpl	r0, r7, r6, asr #32
     7ec:	535f4f49 	cmppl	pc, #292	; 0x124
     7f0:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     7f4:	47007374 	smlsdxmi	r0, r4, r3, r7
     7f8:	5f4f4950 	svcpl	0x004f4950
     7fc:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     800:	50470064 	subpl	r0, r7, r4, rrx
     804:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     808:	0074696e 	rsbseq	r6, r4, lr, ror #18
     80c:	4f495047 	svcmi	0x00495047
     810:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 818 <_Min_Stack_Size+0x418>
     814:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     818:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     81c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     820:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     824:	00737469 	rsbseq	r7, r3, r9, ror #8
     828:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     82c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     830:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     834:	545f6570 	ldrbpl	r6, [pc], #-1392	; 83c <_Min_Stack_Size+0x43c>
     838:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     83c:	4f006665 	svcmi	0x00006665
     840:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     844:	50470052 	subpl	r0, r7, r2, asr r0
     848:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 72c <_Min_Stack_Size+0x32c>
     84c:	5f65646f 	svcpl	0x0065646f
     850:	0054554f 	subseq	r5, r4, pc, asr #10
     854:	44505550 	ldrbmi	r5, [r0], #-1360	; 0x550
     858:	50470052 	subpl	r0, r7, r2, asr r0
     85c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 740 <_Min_Stack_Size+0x340>
     860:	5f65646f 	svcpl	0x0065646f
     864:	47004e49 	strmi	r4, [r0, -r9, asr #28]
     868:	5f4f4950 	svcpl	0x004f4950
     86c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     870:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
     874:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     878:	444f4d00 	strbmi	r4, [pc], #-3328	; 880 <_Min_Stack_Size+0x480>
     87c:	47005245 	strmi	r5, [r0, -r5, asr #4]
     880:	5f4f4950 	svcpl	0x004f4950
     884:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     888:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
     88c:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
     890:	74694261 	strbtvc	r4, [r9], #-609	; 0x261
     894:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     898:	544f5f4f 	strbpl	r5, [pc], #-3919	; 8a0 <_Min_Stack_Size+0x4a0>
     89c:	5f657079 	svcpl	0x00657079
     8a0:	62005050 	andvs	r5, r0, #80	; 0x50
     8a4:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0x469
     8a8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     8ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8b0:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     8b4:	47006450 	smlsdmi	r0, r0, r4, r6
     8b8:	5f4f4950 	svcpl	0x004f4950
     8bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     8c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     8c4:	50007463 	andpl	r7, r0, r3, ror #8
     8c8:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     8cc:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     8d0:	5f4f4950 	svcpl	0x004f4950
     8d4:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     8d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8dc:	50470065 	subpl	r0, r7, r5, rrx
     8e0:	525f4f49 	subspl	r4, pc, #292	; 0x124
     8e4:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     8e8:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
     8ec:	61746144 	cmnvs	r4, r4, asr #2
     8f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8f4:	61465f4f 	cmpvs	r6, pc, asr #30
     8f8:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
     8fc:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     900:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     904:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     908:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     90c:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     910:	00676966 	rsbeq	r6, r7, r6, ror #18
     914:	41746942 	cmnmi	r4, r2, asr #18
     918:	6f697463 	svcvs	0x00697463
     91c:	7563006e 	strbvc	r0, [r3, #-110]!	; 0x6e
     920:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     924:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     928:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     92c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     930:	00657469 	rsbeq	r7, r5, r9, ror #8
     934:	4f495047 	svcmi	0x00495047
     938:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     93c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     940:	47006465 	strmi	r6, [r0, -r5, ror #8]
     944:	5f4f4950 	svcpl	0x004f4950
     948:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
     94c:	535f6d75 	cmppl	pc, #7488	; 0x1d40
     950:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     954:	50534f00 	subspl	r4, r3, r0, lsl #30
     958:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     95c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     960:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0x34f
     964:	545f6465 	ldrbpl	r6, [pc], #-1125	; 96c <_Min_Stack_Size+0x56c>
     968:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     96c:	47006665 	strmi	r6, [r0, -r5, ror #12]
     970:	5f4f4950 	svcpl	0x004f4950
     974:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     978:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     97c:	5047004e 	subpl	r0, r7, lr, asr #32
     980:	505f4f49 	subspl	r4, pc, r9, asr #30
     984:	5f645075 	svcpl	0x00645075
     988:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xf4e
     98c:	47004c4c 	strmi	r4, [r0, -ip, asr #24]
     990:	5f4f4950 	svcpl	0x004f4950
     994:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     998:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     99c:	74007374 	strvc	r7, [r0], #-884	; 0x374
     9a0:	5f706d65 	svcpl	0x00706d65
     9a4:	50470032 	subpl	r0, r7, r2, lsr r0
     9a8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     9ac:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     9b0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     9b4:	47006665 	strmi	r6, [r0, -r5, ror #12]
     9b8:	5f4f4950 	svcpl	0x004f4950
     9bc:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     9c0:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     9c4:	47006465 	strmi	r6, [r0, -r5, ror #8]
     9c8:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     9cc:	5f645075 	svcpl	0x00645075
     9d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     9d4:	00666544 	rsbeq	r6, r6, r4, asr #10
     9d8:	4f495047 	svcmi	0x00495047
     9dc:	5075505f 	rsbspl	r5, r5, pc, asr r0
     9e0:	50555f64 	subspl	r5, r5, r4, ror #30
     9e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9e8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9ec:	4346416e 	movtmi	r4, #24942	; 0x616e
     9f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9f4:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
     9f8:	4f432f63 	svcmi	0x00432f63
     9fc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     a00:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     a04:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     a08:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a0c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     a10:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     a14:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     a18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a1c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     a20:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     a24:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a28:	445f6870 	ldrbmi	r6, [pc], #-2160	; a30 <_Min_Stack_Size+0x630>
     a2c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     a30:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     a34:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
     a38:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a3c:	5f787834 	svcpl	0x00787834
     a40:	6f697067 	svcvs	0x00697067
     a44:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
     a48:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     a4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a50:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     a54:	754f6461 	strbvc	r6, [pc, #-1121]	; 5fb <_Min_Stack_Size+0x1fb>
     a58:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     a5c:	61746144 	cmnvs	r4, r4, asr #2
     a60:	00746942 	rsbseq	r6, r4, r2, asr #18
     a64:	4f495047 	svcmi	0x00495047
     a68:	646f4d5f 	strbtvs	r4, [pc], #-3423	; a70 <_Min_Stack_Size+0x670>
     a6c:	43520065 	cmpmi	r2, #101	; 0x65
     a70:	43485f43 	movtmi	r5, #36675	; 0x8f43
     a74:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     a78:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     a7c:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     a80:	505f4343 	subspl	r4, pc, r3, asr #6
     a84:	41534c4c 	cmpmi	r3, ip, asr #24
     a88:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
     a8c:	43435200 	movtmi	r5, #12800	; 0x3200
     a90:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     a94:	44494153 	strbmi	r4, [r9], #-339	; 0x153
     a98:	00517669 	subseq	r7, r1, r9, ror #12
     a9c:	5f434352 	svcpl	0x00434352
     aa0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     aa4:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     aa8:	73005276 	movwvc	r5, #630	; 0x276
     aac:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     ab0:	67657273 			; <UNDEFINED> instruction: 0x67657273
     ab4:	53595300 	cmppl	r9, #0, 6
     ab8:	5f4b4c43 	svcpl	0x004b4c43
     abc:	71657246 	cmnvc	r5, r6, asr #4
     ac0:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     ac4:	43520079 	cmpmi	r2, #121	; 0x79
     ac8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     acc:	6f53314f 	svcvs	0x0053314f
     ad0:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     ad4:	43435200 	movtmi	r5, #12800	; 0x3200
     ad8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     adc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     ae0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ae4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     ae8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     aec:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
     af0:	43435200 	movtmi	r5, #12800	; 0x3200
     af4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     af8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     afc:	6c434941 	mcrrvs	9, 4, r4, r3, cr1
     b00:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     b04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b08:	50006769 	andpl	r6, r0, r9, ror #14
     b0c:	00504c4c 	subseq	r4, r0, ip, asr #24
     b10:	514c4c50 	cmppl	ip, r0, asr ip
     b14:	43435200 	movtmi	r5, #12800	; 0x3200
     b18:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     b1c:	54497261 	strbpl	r7, [r9], #-609	; 0x261
     b20:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     b24:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     b28:	50007469 	andpl	r7, r0, r9, ror #8
     b2c:	004d4c4c 	subeq	r4, sp, ip, asr #24
     b30:	5f434352 	svcpl	0x00434352
     b34:	31424841 	cmpcc	r2, r1, asr #16
     b38:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b3c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     b40:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     b44:	6b636f6c 	blvs	18dc8fc <_Min_Stack_Size+0x18dc4fc>
     b48:	43520073 	cmpmi	r2, #115	; 0x73
     b4c:	50415f43 	subpl	r5, r1, r3, asr #30
     b50:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     b54:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b58:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     b5c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     b60:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     b64:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     b68:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     b6c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     b70:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     b74:	43435200 	movtmi	r5, #12800	; 0x3200
     b78:	0054495f 	subseq	r4, r4, pc, asr r9
     b7c:	4b4c4350 	blmi	13118c4 <_Min_Stack_Size+0x13114c4>
     b80:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     b84:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     b88:	0079636e 	rsbseq	r6, r9, lr, ror #6
     b8c:	5f434352 	svcpl	0x00434352
     b90:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     b94:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     b98:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     b9c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     ba0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     ba4:	505f4343 	subspl	r4, pc, r3, asr #6
     ba8:	314b4c43 	cmpcc	fp, r3, asr #24
     bac:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     bb0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     bb4:	415f4343 	cmpmi	pc, r3, asr #6
     bb8:	50334248 	eorspl	r4, r3, r8, asr #4
     bbc:	70697265 	rsbvc	r7, r9, r5, ror #4
     bc0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     bc4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     bc8:	43520064 	cmpmi	r2, #100	; 0x64
     bcc:	41535f43 	cmpmi	r3, r3, asr #30
     bd0:	6f6c4249 	svcvs	0x006c4249
     bd4:	43416b63 	movtmi	r6, #7011	; 0x1b63
     bd8:	6f434b4c 	svcvs	0x00434b4c
     bdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     be0:	43435200 	movtmi	r5, #12800	; 0x3200
     be4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     be8:	72655031 	rsbvc	r5, r5, #49	; 0x31
     bec:	52687069 	rsbpl	r7, r8, #105	; 0x69
     bf0:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     bf4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     bf8:	5f434352 	svcpl	0x00434352
     bfc:	4b4c4348 	blmi	1311924 <_Min_Stack_Size+0x1311524>
     c00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c04:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     c08:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     c0c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     c10:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     c14:	00676966 	rsbeq	r6, r7, r6, ror #18
     c18:	5f434352 	svcpl	0x00434352
     c1c:	4345534c 	movtmi	r5, #21324	; 0x534c
     c20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c24:	43520067 	cmpmi	r2, #103	; 0x67
     c28:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     c2c:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     c30:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c34:	756b6361 	strbvc	r6, [fp, #-865]!	; 0x361
     c38:	73655270 	cmnvc	r5, #112, 4
     c3c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c40:	72450064 	subvc	r0, r5, #100	; 0x64
     c44:	53726f72 	cmnpl	r2, #456	; 0x1c8
     c48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     c4c:	43520073 	cmpmi	r2, #115	; 0x73
     c50:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     c54:	756f534c 	strbvc	r5, [pc, #-844]!	; 910 <_Min_Stack_Size+0x510>
     c58:	00656372 	rsbeq	r6, r5, r2, ror r3
     c5c:	5f434352 	svcpl	0x00434352
     c60:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     c64:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     c68:	756f534b 	strbvc	r5, [pc, #-843]!	; 925 <_Min_Stack_Size+0x525>
     c6c:	00656372 	rsbeq	r6, r5, r2, ror r3
     c70:	5f434352 	svcpl	0x00434352
     c74:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     c78:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     c7c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
     c80:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     c84:	43480070 	movtmi	r0, #32880	; 0x8070
     c88:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     c8c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
     c90:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c94:	43435200 	movtmi	r5, #12800	; 0x3200
     c98:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     c9c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     ca0:	00687069 	rsbeq	r7, r8, r9, rrx
     ca4:	5f434352 	svcpl	0x00434352
     ca8:	43435452 	movtmi	r5, #13394	; 0x3452
     cac:	6f434b4c 	svcvs	0x00434b4c
     cb0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     cb4:	43435200 	movtmi	r5, #12800	; 0x3200
     cb8:	4f434d5f 	svcmi	0x00434d5f
     cbc:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     cc0:	00676966 	rsbeq	r6, r7, r6, ror #18
     cc4:	5f434352 	svcpl	0x00434352
     cc8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     ccc:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     cd0:	505f4343 	subspl	r4, pc, r3, asr #6
     cd4:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     cd8:	646d4353 	strbtvs	r4, [sp], #-851	; 0x353
     cdc:	65727000 	ldrbvs	r7, [r2, #-0]!
     ce0:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
     ce4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     ce8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     cec:	756f534b 	strbvc	r5, [pc, #-843]!	; 9a9 <_Min_Stack_Size+0x5a9>
     cf0:	00656372 	rsbeq	r6, r5, r2, ror r3
     cf4:	5f434352 	svcpl	0x00434352
     cf8:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     cfc:	6b636f6c 	blvs	18dcab4 <_Min_Stack_Size+0x18dc6b4>
     d00:	4b4c4341 	blmi	1311a0c <_Min_Stack_Size+0x131160c>
     d04:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     d08:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     d0c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     d10:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
     d14:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     d18:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     d1c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d20:	43520065 	cmpmi	r2, #101	; 0x65
     d24:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xf43
     d28:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     d2c:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     d30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d34:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     d38:	415f4343 	cmpmi	pc, r3, asr #6
     d3c:	50324248 	eorspl	r4, r2, r8, asr #4
     d40:	70697265 	rsbvc	r7, r9, r5, ror #4
     d44:	6f6c4368 	svcvs	0x006c4368
     d48:	504c6b63 	subpl	r6, ip, r3, ror #22
     d4c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     d50:	00646d43 	rsbeq	r6, r4, r3, asr #26
     d54:	5f434352 	svcpl	0x00434352
     d58:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     d5c:	6f435332 	svcvs	0x00435332
     d60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d64:	43435200 	movtmi	r5, #12800	; 0x3200
     d68:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     d6c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     d70:	5f434352 	svcpl	0x00434352
     d74:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     d78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     d7c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     d80:	415f4343 	cmpmi	pc, r3, asr #6
     d84:	50334248 	eorspl	r4, r3, r8, asr #4
     d88:	70697265 	rsbvc	r7, r9, r5, ror #4
     d8c:	43520068 	cmpmi	r2, #104	; 0x68
     d90:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     d94:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     d98:	43520076 	cmpmi	r2, #118	; 0x76
     d9c:	41535f43 	cmpmi	r3, r3, asr #30
     da0:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     da4:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     da8:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     dac:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     db0:	00676966 	rsbeq	r6, r7, r6, ror #18
     db4:	5f434352 	svcpl	0x00434352
     db8:	43435452 	movtmi	r5, #13394	; 0x3452
     dbc:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
     dc0:	43520064 	cmpmi	r2, #100	; 0x64
     dc4:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     dc8:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     dcc:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     dd0:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     dd4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     dd8:	646d436d 	strbtvs	r4, [sp], #-877	; 0x36d
     ddc:	43435200 	movtmi	r5, #12800	; 0x3200
     de0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     de4:	44533249 	ldrbmi	r3, [r3], #-585	; 0x249
     de8:	00517669 	subseq	r7, r1, r9, ror #12
     dec:	5f434352 	svcpl	0x00434352
     df0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     df4:	6f434941 	svcvs	0x00434941
     df8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     dfc:	43435200 	movtmi	r5, #12800	; 0x3200
     e00:	4f434d5f 	svcmi	0x00434d5f
     e04:	76694431 			; <UNDEFINED> instruction: 0x76694431
     e08:	43435200 	movtmi	r5, #12800	; 0x3200
     e0c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     e10:	72655032 	rsbvc	r5, r5, #50	; 0x32
     e14:	52687069 	rsbpl	r7, r8, #105	; 0x69
     e18:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     e1c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e20:	5f434352 	svcpl	0x00434352
     e24:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     e28:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     e2c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     e30:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e34:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     e38:	756f534b 	strbvc	r5, [pc, #-843]!	; af5 <_Min_Stack_Size+0x6f5>
     e3c:	00656372 	rsbeq	r6, r5, r2, ror r3
     e40:	5f434352 	svcpl	0x00434352
     e44:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     e48:	5367616c 	cmnpl	r7, #108, 2
     e4c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     e50:	43520073 	cmpmi	r2, #115	; 0x73
     e54:	53485f43 	movtpl	r5, #36675	; 0x8f43
     e58:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     e5c:	00676966 	rsbeq	r6, r7, r6, ror #18
     e60:	5f434352 	svcpl	0x00434352
     e64:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     e68:	6b636f6c 	blvs	18dcc20 <_Min_Stack_Size+0x18dc820>
     e6c:	4b4c4342 	blmi	1311b7c <_Min_Stack_Size+0x131177c>
     e70:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e74:	50006769 	andpl	r6, r0, r9, ror #14
     e78:	41534c4c 	cmpmi	r3, ip, asr #24
     e7c:	50004e49 	andpl	r4, r0, r9, asr #28
     e80:	41534c4c 	cmpmi	r3, ip, asr #24
     e84:	50005149 	andpl	r5, r0, r9, asr #2
     e88:	41534c4c 	cmpmi	r3, ip, asr #24
     e8c:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     e90:	545f4343 	ldrbpl	r4, [pc], #-835	; e98 <_Min_Stack_Size+0xa98>
     e94:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     e98:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0x4b
     e9c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     ea0:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     ea4:	505f4343 	subspl	r4, pc, r3, asr #6
     ea8:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     eac:	43520064 	cmpmi	r2, #100	; 0x64
     eb0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     eb4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     eb8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ebc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     ec0:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
     ec4:	43435200 	movtmi	r5, #12800	; 0x3200
     ec8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     ecc:	72655032 	rsbvc	r5, r5, #50	; 0x32
     ed0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ed4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     ed8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     edc:	5f434352 	svcpl	0x00434352
     ee0:	31425041 	cmpcc	r2, r1, asr #32
     ee4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ee8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     eec:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     ef0:	646f4d50 	strbtvs	r4, [pc], #-3408	; ef8 <_Min_Stack_Size+0xaf8>
     ef4:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
     ef8:	43435200 	movtmi	r5, #12800	; 0x3200
     efc:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     f00:	6f43324b 	svcvs	0x0043324b
     f04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     f08:	43435200 	movtmi	r5, #12800	; 0x3200
     f0c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     f10:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     f14:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     f18:	43520065 	cmpmi	r2, #101	; 0x65
     f1c:	53485f43 	movtpl	r5, #36675	; 0x8f43
     f20:	43500045 	cmpmi	r0, #69	; 0x45
     f24:	5f314b4c 	svcpl	0x00314b4c
     f28:	71657246 	cmnvc	r5, r6, asr #4
     f2c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     f30:	50410079 	subpl	r0, r1, r9, ror r0
     f34:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
     f38:	73657250 	cmnvc	r5, #80, 4
     f3c:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
     f40:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
     f44:	415f4343 	cmpmi	pc, r3, asr #6
     f48:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     f4c:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
     f50:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     f54:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
     f58:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
     f5c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     f60:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0x800
     f64:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     f68:	50007375 	andpl	r7, r0, r5, ror r3
     f6c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     f70:	52004e53 	andpl	r4, r0, #1328	; 0x530
     f74:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     f78:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
     f7c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     f80:	71657246 	cmnvc	r5, r6, asr #4
     f84:	43435200 	movtmi	r5, #12800	; 0x3200
     f88:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f8c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     f90:	43687069 	cmnmi	r8, #105	; 0x69
     f94:	6b636f6c 	blvs	18dcd4c <_Min_Stack_Size+0x18dc94c>
     f98:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f9c:	5f434352 	svcpl	0x00434352
     fa0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     fa4:	50007469 	andpl	r7, r0, r9, ror #8
     fa8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fac:	50005153 	andpl	r5, r0, r3, asr r1
     fb0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fb4:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     fb8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     fbc:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
     fc0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     fc4:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     fc8:	415f4343 	cmpmi	pc, r3, asr #6
     fcc:	50334248 	eorspl	r4, r3, r8, asr #4
     fd0:	70697265 	rsbvc	r7, r9, r5, ror #4
     fd4:	6f6c4368 	svcvs	0x006c4368
     fd8:	504c6b63 	subpl	r6, ip, r3, ror #22
     fdc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     fe0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     fe4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     fe8:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
     fec:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     ff0:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     ff4:	415f4343 	cmpmi	pc, r3, asr #6
     ff8:	50324250 	eorspl	r4, r2, r0, asr r2
     ffc:	70697265 	rsbvc	r7, r9, r5, ror #4
    1000:	6e690068 	cdpvs	0, 6, cr0, cr9, cr8, {3}
    1004:	4f432f63 	svcmi	0x00432f63
    1008:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    100c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1010:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1014:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1018:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    101c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1020:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1024:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1028:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    102c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1030:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1034:	445f6870 	ldrbmi	r6, [pc], #-2160	; 103c <_Min_Stack_Size+0xc3c>
    1038:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    103c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1040:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    1044:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1048:	5f787834 	svcpl	0x00787834
    104c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1050:	43520063 	cmpmi	r2, #99	; 0x63
    1054:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1058:	4b4c434d 	blmi	1311d94 <_Min_Stack_Size+0x1311994>
    105c:	73657250 	cmnvc	r5, #80, 4
    1060:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1064:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1068:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    106c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1070:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1074:	00676966 	rsbeq	r6, r7, r6, ror #18
    1078:	5f434352 	svcpl	0x00434352
    107c:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    1080:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1084:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1088:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    108c:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    1090:	43520064 	cmpmi	r2, #100	; 0x64
    1094:	50415f43 	subpl	r5, r1, r3, asr #30
    1098:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    109c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10a0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10a4:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    10a8:	43435200 	movtmi	r5, #12800	; 0x3200
    10ac:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    10b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    10b4:	55530067 	ldrbpl	r0, [r3, #-103]	; 0x67
    10b8:	53454343 	movtpl	r4, #21315	; 0x5343
    10bc:	43520053 	cmpmi	r2, #83	; 0x53
    10c0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    10c4:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    10c8:	00676966 	rsbeq	r6, r7, r6, ror #18
    10cc:	5f434352 	svcpl	0x00434352
    10d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10d4:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    10d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    10dc:	43520066 	cmpmi	r2, #102	; 0x66
    10e0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10e4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    10e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10f0:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    10f4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    10f8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    10fc:	415f4343 	cmpmi	pc, r3, asr #6
    1100:	50334248 	eorspl	r4, r3, r8, asr #4
    1104:	70697265 	rsbvc	r7, r9, r5, ror #4
    1108:	6f6c4368 	svcvs	0x006c4368
    110c:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1110:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    1114:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    1118:	76696472 			; <UNDEFINED> instruction: 0x76696472
    111c:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1120:	41535500 	cmpmi	r3, r0, lsl #10
    1124:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1128:	00414850 	subeq	r4, r1, r0, asr r8
    112c:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    1130:	41535500 	cmpmi	r3, r0, lsl #10
    1134:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1138:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    113c:	57726576 			; <UNDEFINED> instruction: 0x57726576
    1140:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1144:	646d4370 	strbtvs	r4, [sp], #-880	; 0x370
    1148:	41535500 	cmpmi	r3, r0, lsl #10
    114c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1150:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1154:	61637365 	cmnvs	r3, r5, ror #6
    1158:	0072656c 	rsbseq	r6, r2, ip, ror #10
    115c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1160:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1164:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1168:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    116c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1170:	61657242 	cmnvs	r5, r2, asr #4
    1174:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    1178:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    117c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1180:	53550068 	cmppl	r5, #104	; 0x68
    1184:	5f545241 	svcpl	0x00545241
    1188:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    118c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1190:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1194:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    1198:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    119c:	55007374 	strpl	r7, [r0, #-884]	; 0x374
    11a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11a4:	6f6c435f 	svcvs	0x006c435f
    11a8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    11ac:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    11b0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    11b4:	53550066 	cmppl	r5, #102	; 0x66
    11b8:	5f545241 	svcpl	0x00545241
    11bc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    11c0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11c4:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    11c8:	6144646e 	cmpvs	r4, lr, ror #8
    11cc:	55006174 	strpl	r6, [r0, #-372]	; 0x174
    11d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11d4:	6b61575f 	blvs	1856f58 <_Min_Stack_Size+0x1856b58>
    11d8:	00705565 	rsbseq	r5, r0, r5, ror #10
    11dc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11e0:	6f575f54 	svcvs	0x00575f54
    11e4:	654c6472 	strbvs	r6, [ip, #-1138]	; 0x472
    11e8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    11ec:	41535500 	cmpmi	r3, r0, lsl #10
    11f0:	445f5452 	ldrbmi	r5, [pc], #-1106	; 11f8 <_Min_Stack_Size+0xdf8>
    11f4:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    11f8:	53550064 	cmppl	r5, #100	; 0x64
    11fc:	5f545241 	svcpl	0x00545241
    1200:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    1204:	00746942 	rsbseq	r6, r4, r2, asr #18
    1208:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    120c:	61425f54 	cmpvs	r2, r4, asr pc
    1210:	61526475 	cmpvs	r2, r5, ror r4
    1214:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
    1218:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    121c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    1220:	646f4d41 	strbtvs	r4, [pc], #-3393	; 1228 <_Min_Stack_Size+0xe28>
    1224:	70610065 	rsbvc	r0, r1, r5, rrx
    1228:	6f6c6362 	svcvs	0x006c6362
    122c:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    1230:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1234:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1238:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    123c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1240:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1244:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1248:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    124c:	6175475f 	cmnvs	r5, pc, asr r7
    1250:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1254:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    1258:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    125c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1260:	61657242 	cmnvs	r5, r2, asr #4
    1264:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    1268:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    126c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1270:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    1274:	00676966 	rsbeq	r6, r7, r6, ror #18
    1278:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    127c:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    1280:	55004741 	strpl	r4, [r0, #-1857]	; 0x741
    1284:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1288:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    128c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1290:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1294:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1298:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    129c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    12a0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    12a4:	53550074 	cmppl	r5, #116	; 0x74
    12a8:	5f545241 	svcpl	0x00545241
    12ac:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    12b0:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    12b4:	43414e64 	movtmi	r4, #7780	; 0x1e64
    12b8:	646d434b 	strbtvs	r4, [sp], #-843	; 0x34b
    12bc:	41535500 	cmpmi	r3, r0, lsl #10
    12c0:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    12c4:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    12c8:	53550079 	cmppl	r5, #121	; 0x79
    12cc:	5f545241 	svcpl	0x00545241
    12d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    12d4:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    12d8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    12dc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12e0:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    12e4:	61627874 	smcvs	10116	; 0x2784
    12e8:	55006573 	strpl	r6, [r0, #-1395]	; 0x573
    12ec:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    12f0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    12f4:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    12f8:	55006761 	strpl	r6, [r0, #-1889]	; 0x761
    12fc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1300:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1304:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1308:	00737365 	rsbseq	r7, r3, r5, ror #6
    130c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1310:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    1314:	61754774 	cmnvs	r5, r4, ror r7
    1318:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    131c:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    1320:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1324:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    1328:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0x264
    132c:	55006b61 	strpl	r6, [r0, #-2913]	; 0xb61
    1330:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1334:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1338:	70795474 	rsbsvc	r5, r9, r4, ror r4
    133c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1340:	41535500 	cmpmi	r3, r0, lsl #10
    1344:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1348:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    134c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1350:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1354:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1358:	71655241 	cmnvc	r5, r1, asr #4
    135c:	41535500 	cmpmi	r3, r0, lsl #10
    1360:	00785452 	rsbseq	r5, r8, r2, asr r4
    1364:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1368:	6e4f5f54 	mcrvs	15, 2, r5, cr15, cr4, {2}
    136c:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    1370:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1374:	6d43646f 	cfstrdvs	mvd6, [r3, #-444]	; 0xfffffe44
    1378:	53550064 	cmppl	r5, #100	; 0x64
    137c:	5f545241 	svcpl	0x00545241
    1380:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
    1384:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1388:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    138c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    1390:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    1394:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1398:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    139c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    13a0:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    13a4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    13a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13ac:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 13b4 <_Min_Stack_Size+0xfb4>
    13b0:	53550065 	cmppl	r5, #101	; 0x65
    13b4:	5f545241 	svcpl	0x00545241
    13b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    13bc:	00737365 	rsbseq	r7, r3, r5, ror #6
    13c0:	70746962 	rsbsvc	r6, r4, r2, ror #18
    13c4:	5500736f 	strpl	r7, [r0, #-879]	; 0x36f
    13c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13cc:	65764f5f 	ldrbvs	r4, [r6, #-3935]!	; 0xf5f
    13d0:	6d615372 	stclvs	3, cr5, [r1, #-456]!	; 0xfffffe38
    13d4:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
    13d8:	6d433867 	stclvs	8, cr3, [r3, #-412]	; 0xfffffe64
    13dc:	53550064 	cmppl	r5, #100	; 0x64
    13e0:	5f545241 	svcpl	0x00545241
    13e4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    13e8:	61745354 	cmnvs	r4, r4, asr r3
    13ec:	00737574 	rsbseq	r7, r3, r4, ror r5
    13f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13f4:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    13f8:	646d434e 	strbtvs	r4, [sp], #-846	; 0x34e
    13fc:	41535500 	cmpmi	r3, r0, lsl #10
    1400:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1404:	43414472 	movtmi	r4, #5234	; 0x1472
    1408:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    140c:	53550067 	cmppl	r5, #103	; 0x67
    1410:	5f545241 	svcpl	0x00545241
    1414:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1418:	5355006b 	cmppl	r5, #107	; 0x6b
    141c:	5f545241 	svcpl	0x00545241
    1420:	41447249 	cmpmi	r4, r9, asr #4
    1424:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1428:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    142c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1430:	69646c61 	stmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    1434:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
    1438:	53550072 	cmppl	r5, #114	; 0x72
    143c:	5f545241 	svcpl	0x00545241
    1440:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1444:	5367616c 	cmnpl	r7, #108, 2
    1448:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    144c:	53550073 	cmppl	r5, #115	; 0x73
    1450:	5f545241 	svcpl	0x00545241
    1454:	55005449 	strpl	r5, [r0, #-1097]	; 0x449
    1458:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    145c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1460:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1464:	00746375 	rsbseq	r6, r4, r5, ror r3
    1468:	5f434352 	svcpl	0x00434352
    146c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1470:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    1474:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1478:	41535500 	cmpmi	r3, r0, lsl #10
    147c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1480:	6b636f6c 	blvs	18dd238 <_Min_Stack_Size+0x18dce38>
    1484:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1488:	41535500 	cmpmi	r3, r0, lsl #10
    148c:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1490:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1494:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1498:	00676966 	rsbeq	r6, r7, r6, ror #18
    149c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14a0:	61485f54 	cmpvs	r8, r4, asr pc
    14a4:	7544666c 	strbvc	r6, [r4, #-1644]	; 0x66c
    14a8:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    14ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14b0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14b4:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    14b8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    14bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    14c0:	41535500 	cmpmi	r3, r0, lsl #10
    14c4:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    14c8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    14cc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    14d0:	41535500 	cmpmi	r3, r0, lsl #10
    14d4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    14d8:	004c4f50 	subeq	r4, ip, r0, asr pc
    14dc:	616d7469 	cmnvs	sp, r9, ror #8
    14e0:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    14e4:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    14e8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    14ec:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    14f0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    14f4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    14f8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    14fc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1500:	2f736569 	svccs	0x00736569
    1504:	334d5453 	movtcc	r5, #54355	; 0xd453
    1508:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    150c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1510:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1514:	5f687069 	svcpl	0x00687069
    1518:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    151c:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1520:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1524:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1528:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    152c:	6173755f 	cmnvs	r3, pc, asr r5
    1530:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    1534:	41535500 	cmpmi	r3, r0, lsl #10
    1538:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    153c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1540:	61446576 	hvcvs	18006	; 0x4656
    1544:	75006174 	strvc	r6, [r0, #-372]	; 0x174
    1548:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    154c:	00676572 	rsbeq	r6, r7, r2, ror r5
    1550:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1554:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1558:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    155c:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    1560:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1564:	436c6c65 	cmnmi	ip, #25856	; 0x6500
    1568:	5300646d 	movwpl	r6, #1133	; 0x46d
    156c:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1570:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    1574:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 13ac <_Min_Stack_Size+0xfac>
    1578:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    157c:	6f697461 	svcvs	0x00697461
    1580:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1584:	6174536c 	cmnvs	r4, ip, ror #6
    1588:	00737574 	rsbseq	r7, r3, r4, ror r5
    158c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1590:	445f4746 	ldrbmi	r4, [pc], #-1862	; 1598 <_Min_Stack_Size+0x1198>
    1594:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1598:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
    159c:	47464353 	smlsldmi	r4, r6, r3, r3
    15a0:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    15a4:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    15a8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    15ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    15b0:	43504d43 	cmpmi	r0, #4288	; 0x10c0
    15b4:	454d0052 	strbmi	r0, [sp, #-82]	; 0x52
    15b8:	504d524d 	subpl	r5, sp, sp, asr #4
    15bc:	53595300 	cmppl	r9, #0, 6
    15c0:	5f474643 	svcpl	0x00474643
    15c4:	5f485445 	svcpl	0x00485445
    15c8:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    15cc:	746e4961 	strbtvc	r4, [lr], #-2401	; 0x961
    15d0:	61667265 	cmnvs	r6, r5, ror #4
    15d4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    15d8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    15dc:	00444556 	subeq	r4, r4, r6, asr r5
    15e0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    15e4:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 14d4 <_Min_Stack_Size+0x10d4>
    15e8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    15ec:	61775379 	cmnvs	r7, r9, ror r3
    15f0:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
    15f4:	6e614267 	cdpvs	2, 6, cr4, cr1, cr7, {3}
    15f8:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    15fc:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    1600:	636e6900 	cmnvs	lr, #0, 18
    1604:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1608:	5f584554 	svcpl	0x00584554
    160c:	5f46344d 	svcpl	0x0046344d
    1610:	334d5453 	movtcc	r5, #54355	; 0xd453
    1614:	2f344632 	svccs	0x00344632
    1618:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    161c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1620:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1624:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1628:	5f787834 	svcpl	0x00787834
    162c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1630:	70697265 	rsbvc	r7, r9, r5, ror #4
    1634:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1638:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    163c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1640:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1644:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1648:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    164c:	66637379 			; <UNDEFINED> instruction: 0x66637379
    1650:	00632e67 	rsbeq	r2, r3, r7, ror #28
    1654:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1658:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    165c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1660:	00786563 	rsbseq	r6, r8, r3, ror #10
    1664:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1668:	455f4746 	ldrbmi	r4, [pc, #-1862]	; f2a <_Min_Stack_Size+0xb2a>
    166c:	4d5f4854 	ldclmi	8, cr4, [pc, #-336]	; 1524 <_Min_Stack_Size+0x1124>
    1670:	61696465 	cmnvs	r9, r5, ror #8
    1674:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1678:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    167c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1680:	00676966 	rsbeq	r6, r7, r6, ror #18
    1684:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1688:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1578 <_Min_Stack_Size+0x1178>
    168c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1690:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
    1694:	53007061 	movwpl	r7, #97	; 0x61
    1698:	46435359 			; <UNDEFINED> instruction: 0x46435359
    169c:	79545f47 	ldmdbvc	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    16a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    16a4:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    16a8:	505f4954 	subspl	r4, pc, r4, asr r9	; <UNPREDICTABLE>
    16ac:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    16b0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    16b4:	49504765 	ldmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, lr}^
    16b8:	5300784f 	movwpl	r7, #2127	; 0x84f
    16bc:	46435359 			; <UNDEFINED> instruction: 0x46435359
    16c0:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    16c4:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    16c8:	616d6552 	cmnvs	sp, r2, asr r5
    16cc:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    16d0:	00676966 	rsbeq	r6, r7, r6, ror #18
    16d4:	5f433249 	svcpl	0x00433249
    16d8:	61656c43 	cmnvs	r5, r3, asr #24
    16dc:	50544972 	subspl	r4, r4, r2, ror r9
    16e0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    16e4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16e8:	32490074 	subcc	r0, r9, #116	; 0x74
    16ec:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    16f0:	6172656e 	cmnvs	r2, lr, ror #10
    16f4:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    16f8:	00545241 	subseq	r5, r4, r1, asr #4
    16fc:	5f433249 	svcpl	0x00433249
    1700:	50746547 	rsbspl	r6, r4, r7, asr #10
    1704:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    1708:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    170c:	74657274 	strbtvc	r7, [r5], #-628	; 0x274
    1710:	6c436863 	mcrrvs	8, 6, r6, r3, cr3
    1714:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1718:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    171c:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    1720:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1724:	00726574 	rsbseq	r6, r2, r4, ror r5
    1728:	53495254 	movtpl	r5, #37460	; 0x9254
    172c:	32490045 	subcc	r0, r9, #69	; 0x45
    1730:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    1734:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1738:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    173c:	4e5f4332 	mrcmi	3, 2, r4, cr15, cr2, {1}
    1740:	504b4341 	subpl	r4, fp, r1, asr #6
    1744:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    1748:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    174c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1750:	32490067 	subcc	r0, r9, #103	; 0x67
    1754:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    1758:	6464416e 	strbtvs	r4, [r4], #-366	; 0x16e
    175c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1760:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1764:	00676966 	rsbeq	r6, r7, r6, ror #18
    1768:	5f433249 	svcpl	0x00433249
    176c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1770:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1774:	66007463 	strvs	r7, [r0], -r3, ror #8
    1778:	72716572 	rsbsvc	r6, r1, #478150656	; 0x1c800000
    177c:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xe61
    1780:	43324900 	teqmi	r2, #0, 18
    1784:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    1788:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    178c:	32490061 	subcc	r0, r9, #97	; 0x61
    1790:	61435f43 	cmpvs	r3, r3, asr #30
    1794:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    1798:	50657461 	rsbpl	r7, r5, r1, ror #8
    179c:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    17a0:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    17a4:	6b636f6c 	blvs	18dd55c <_Min_Stack_Size+0x18dd15c>
    17a8:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    17ac:	32490064 	subcc	r0, r9, #100	; 0x64
    17b0:	6f4d5f43 	svcvs	0x004d5f43
    17b4:	49006564 	stmdbmi	r0, {r2, r5, r6, r8, sl, sp, lr}
    17b8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    17bc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    17c0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    17c4:	414f0074 	hvcmi	61444	; 0xf004
    17c8:	46003152 			; <UNDEFINED> instruction: 0x46003152
    17cc:	0052544c 	subseq	r5, r2, ip, asr #8
    17d0:	5f433249 	svcpl	0x00433249
    17d4:	4c414d44 	mcrrmi	13, 4, r4, r1, cr4
    17d8:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
    17dc:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    17e0:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    17e4:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    17e8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    17ec:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    17f0:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    17f4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    17f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    17fc:	5f433249 	svcpl	0x00433249
    1800:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1804:	00666544 	rsbeq	r6, r6, r4, asr #10
    1808:	5f433249 	svcpl	0x00433249
    180c:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1810:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    1814:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    1818:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    181c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1820:	5f433249 	svcpl	0x00433249
    1824:	50434550 	subpl	r4, r3, r0, asr r5
    1828:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    182c:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1830:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1834:	6c660067 	stclvs	0, cr0, [r6], #-412	; 0xfffffe64
    1838:	6f706761 	svcvs	0x00706761
    183c:	32490073 	subcc	r0, r9, #115	; 0x73
    1840:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1844:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1848:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    184c:	6d435052 	stclvs	0, cr5, [r3, #-328]	; 0xfffffeb8
    1850:	32490064 	subcc	r0, r9, #100	; 0x64
    1854:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xf43
    1858:	79437974 	stmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    185c:	00656c63 	rsbeq	r6, r5, r3, ror #24
    1860:	72633269 	rsbvc	r3, r3, #-1879048186	; 0x90000006
    1864:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    1868:	545f4332 	ldrbpl	r4, [pc], #-818	; 1870 <_Min_Stack_Size+0x1470>
    186c:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    1870:	5074696d 	rsbspl	r6, r4, sp, ror #18
    1874:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    1878:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    187c:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    1880:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    1884:	32490074 	subcc	r0, r9, #116	; 0x74
    1888:	49007843 	stmdbmi	r0, {r0, r1, r6, fp, ip, sp, lr}
    188c:	445f4332 	ldrbmi	r4, [pc], #-818	; 1894 <_Min_Stack_Size+0x1494>
    1890:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1894:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1898:	43324900 	teqmi	r2, #0, 18
    189c:	43414e5f 	movtmi	r4, #7775	; 0x1e5f
    18a0:	736f504b 	cmnvc	pc, #75	; 0x4b
    18a4:	6f697469 	svcvs	0x00697469
    18a8:	3249006e 	subcc	r0, r9, #110	; 0x6e
    18ac:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    18b0:	73614c74 	cmnvc	r1, #116, 24	; 0x7400
    18b4:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0x574
    18b8:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    18bc:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    18c0:	0047414c 	subeq	r4, r7, ip, asr #2
    18c4:	5f433249 	svcpl	0x00433249
    18c8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    18cc:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    18d0:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    18d4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    18d8:	61436c61 	cmpvs	r3, r1, ror #24
    18dc:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    18e0:	32490064 	subcc	r0, r9, #100	; 0x64
    18e4:	68435f43 	stmdavs	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    18e8:	456b6365 	strbmi	r6, [fp, #-869]!	; 0x365
    18ec:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    18f0:	636e6900 	cmnvs	lr, #0, 18
    18f4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    18f8:	5f584554 	svcpl	0x00584554
    18fc:	5f46344d 	svcpl	0x0046344d
    1900:	334d5453 	movtcc	r5, #54355	; 0xd453
    1904:	2f344632 	svccs	0x00344632
    1908:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    190c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1910:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1914:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1918:	5f787834 	svcpl	0x00787834
    191c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1920:	70697265 	rsbvc	r7, r9, r5, ror #4
    1924:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1928:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    192c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1930:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1934:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1938:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    193c:	632e6332 	teqvs	lr, #-939524096	; 0xc8000000
    1940:	43324900 	teqmi	r2, #0, 18
    1944:	414d445f 	cmpmi	sp, pc, asr r4
    1948:	00646d43 	rsbeq	r6, r4, r3, asr #26
    194c:	5f433249 	svcpl	0x00433249
    1950:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1954:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1958:	00666544 	rsbeq	r6, r6, r4, asr #10
    195c:	5f433249 	svcpl	0x00433249
    1960:	70005449 	andvc	r5, r0, r9, asr #8
    1964:	316b6c63 	cmncc	fp, r3, ror #24
    1968:	43324900 	teqmi	r2, #0, 18
    196c:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1970:	53455200 	movtpl	r5, #20992	; 0x5200
    1974:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1978:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
    197c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1980:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
    1984:	53455200 	movtpl	r5, #20992	; 0x5200
    1988:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    198c:	49003944 	stmdbmi	r0, {r2, r6, r8, fp, ip, sp}
    1990:	4f5f4332 	svcmi	0x005f4332
    1994:	64416e77 	strbvs	r6, [r1], #-3703	; 0xe77
    1998:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    199c:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
    19a0:	635f6363 	cmpvs	pc, #-1946157055	; 0x8c000001
    19a4:	6b636f6c 	blvs	18dd75c <_Min_Stack_Size+0x18dd35c>
    19a8:	32490073 	subcc	r0, r9, #115	; 0x73
    19ac:	63415f43 	movtvs	r5, #8003	; 0x1f43
    19b0:	3249006b 	subcc	r0, r9, #107	; 0x6b
    19b4:	56455f43 	strbpl	r5, [r5], -r3, asr #30
    19b8:	00544e45 	subseq	r4, r4, r5, asr #28
    19bc:	5f433249 	svcpl	0x00433249
    19c0:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    19c4:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    19c8:	00617461 	rsbeq	r7, r1, r1, ror #8
    19cc:	5f433249 	svcpl	0x00433249
    19d0:	61656c43 	cmnvs	r5, r3, asr #24
    19d4:	616c4672 	smcvs	50274	; 0xc462
    19d8:	32490067 	subcc	r0, r9, #103	; 0x67
    19dc:	63415f43 	movtvs	r5, #8003	; 0x1f43
    19e0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    19e4:	6764656c 	strbvs	r6, [r4, -ip, ror #10]!
    19e8:	64416465 	strbvs	r6, [r1], #-1125	; 0x465
    19ec:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    19f0:	32490073 	subcc	r0, r9, #115	; 0x73
    19f4:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    19f8:	65526461 	ldrbvs	r6, [r2, #-1121]	; 0x461
    19fc:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    1a00:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1a04:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    1a08:	4d747361 	ldclmi	3, cr7, [r4, #-388]!	; 0xfffffe7c
    1a0c:	4465646f 	strbtmi	r6, [r5], #-1135	; 0x46f
    1a10:	43797475 	cmnmi	r9, #1962934272	; 0x75000000
    1a14:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1a18:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a1c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1a20:	445f4332 	ldrbmi	r4, [pc], #-818	; 1a28 <_Min_Stack_Size+0x1628>
    1a24:	416c6175 	smcmi	50709	; 0xc615
    1a28:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1a2c:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    1a30:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
    1a34:	00316761 	eorseq	r6, r1, r1, ror #14
    1a38:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1a3c:	6e650032 	mcrvs	0, 3, r0, cr5, cr2, {1}
    1a40:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1a44:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1a48:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1a4c:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1a50:	6f6e6b63 	svcvs	0x006e6b63
    1a54:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xc77
    1a58:	6f436567 	svcvs	0x00436567
    1a5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a60:	43324900 	teqmi	r2, #0, 18
    1a64:	4345505f 	movtmi	r5, #20575	; 0x505f
    1a68:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1a6c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1a70:	43324900 	teqmi	r2, #0, 18
    1a74:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1a78:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1a7c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1a80:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    1a84:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0x361
    1a88:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1a8c:	43324900 	teqmi	r2, #0, 18
    1a90:	666f535f 			; <UNDEFINED> instruction: 0x666f535f
    1a94:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
    1a98:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    1a9c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1aa0:	32490064 	subcc	r0, r9, #100	; 0x64
    1aa4:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    1aa8:	6237646e 	eorsvs	r6, r7, #1845493760	; 0x6e000000
    1aac:	64417469 	strbvs	r7, [r1], #-1129	; 0x469
    1ab0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1ab4:	32690073 	rsbcc	r0, r9, #115	; 0x73
    1ab8:	61627863 	cmnvs	r2, r3, ror #16
    1abc:	4f006573 	svcmi	0x00006573
    1ac0:	00325241 	eorseq	r5, r2, r1, asr #4
    1ac4:	5f433249 	svcpl	0x00433249
    1ac8:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1acc:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    1ad0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    1ad4:	32490072 	subcc	r0, r9, #114	; 0x72
    1ad8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1adc:	6172656e 	cmnvs	r2, lr, ror #10
    1ae0:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    1ae4:	4900504f 	stmdbmi	r0, {r0, r1, r2, r3, r6, ip, lr}
    1ae8:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1aec:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1af0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1af4:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1af8:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1afc:	6f6c616e 	svcvs	0x006c616e
    1b00:	6c694667 	stclvs	6, cr4, [r9], #-412	; 0xfffffe64
    1b04:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    1b08:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
    1b0c:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    1b10:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1b14:	654d746e 	strbvs	r7, [sp, #-1134]	; 0x46e
    1b18:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1b1c:	414d4400 	cmpmi	sp, r0, lsl #8
    1b20:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1b24:	414d4400 	cmpmi	sp, r0, lsl #8
    1b28:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1b2c:	5f6d6165 	svcpl	0x006d6165
    1b30:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1b34:	00666544 	rsbeq	r6, r6, r4, asr #10
    1b38:	5f414d44 	svcpl	0x00414d44
    1b3c:	6f697250 	svcvs	0x00697250
    1b40:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b44:	414d4400 	cmpmi	sp, r0, lsl #8
    1b48:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1b4c:	4279726f 	rsbsmi	r7, r9, #-268435450	; 0xf0000006
    1b50:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    1b54:	414d4400 	cmpmi	sp, r0, lsl #8
    1b58:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1b5c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1b60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1b64:	5f414d44 	svcpl	0x00414d44
    1b68:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1b6c:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1b70:	75426c61 	strbvc	r6, [r2, #-3169]	; 0xc61
    1b74:	00747372 	rsbseq	r7, r4, r2, ror r3
    1b78:	5f414d44 	svcpl	0x00414d44
    1b7c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1b80:	534f4649 	movtpl	r4, #63049	; 0xf649
    1b84:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1b88:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    1b8c:	79545f41 	ldmdbvc	r4, {r0, r6, r8, r9, sl, fp, ip, lr}^
    1b90:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1b94:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    1b98:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    1b9c:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    1ba0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1ba4:	6f6d654d 	svcvs	0x006d654d
    1ba8:	61547972 	cmpvs	r4, r2, ror r9
    1bac:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    1bb0:	414d4400 	cmpmi	sp, r0, lsl #8
    1bb4:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1bb8:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    1bbc:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    1bc0:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1bc4:	44007941 	strmi	r7, [r0], #-2369	; 0x941
    1bc8:	5f79414d 	svcpl	0x0079414d
    1bcc:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    1bd0:	00786d61 	rsbseq	r6, r8, r1, ror #26
    1bd4:	5f414d44 	svcpl	0x00414d44
    1bd8:	00524944 	subseq	r4, r2, r4, asr #18
    1bdc:	5f414d44 	svcpl	0x00414d44
    1be0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1be4:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1be8:	61426c61 	cmpvs	r2, r1, ror #24
    1bec:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    1bf0:	44007264 	strmi	r7, [r0], #-612	; 0x264
    1bf4:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1ac8 <_Min_Stack_Size+0x16c8>
    1bf8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1bfc:	636e4979 	cmnvs	lr, #1982464	; 0x1e4000
    1c00:	46494800 	strbmi	r4, [r9], -r0, lsl #16
    1c04:	44005243 	strmi	r5, [r0], #-579	; 0x243
    1c08:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1c0c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1c10:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1c14:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xc6f
    1c18:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1c1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c20:	5f414d44 	svcpl	0x00414d44
    1c24:	6f6d654d 	svcvs	0x006d654d
    1c28:	61547972 	cmpvs	r4, r2, ror r9
    1c2c:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    1c30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c34:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    1c38:	505f414d 	subspl	r4, pc, sp, asr #2
    1c3c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1c40:	61726568 	cmnvs	r2, r8, ror #10
    1c44:	636e496c 	cmnvs	lr, #108, 18	; 0x1b0000
    1c48:	414d4400 	cmpmi	sp, r0, lsl #8
    1c4c:	756f445f 	strbvc	r4, [pc, #-1119]!	; 17f5 <_Min_Stack_Size+0x13f5>
    1c50:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1c54:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1c58:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1c60 <_Min_Stack_Size+0x1860>
    1c5c:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    1c60:	636e6900 	cmnvs	lr, #0, 18
    1c64:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1c68:	5f584554 	svcpl	0x00584554
    1c6c:	5f46344d 	svcpl	0x0046344d
    1c70:	334d5453 	movtcc	r5, #54355	; 0xd453
    1c74:	2f344632 	svccs	0x00344632
    1c78:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1c7c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1c80:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1c84:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1c88:	5f787834 	svcpl	0x00787834
    1c8c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1c90:	70697265 	rsbvc	r7, r9, r5, ror #4
    1c94:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1c98:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1c9c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1ca0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1ca4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1ca8:	645f7878 	ldrbvs	r7, [pc], #-2168	; 1cb0 <_Min_Stack_Size+0x18b0>
    1cac:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    1cb0:	414d4400 	cmpmi	sp, r0, lsl #8
    1cb4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1cb8:	494c0074 	stmdbmi	ip, {r2, r4, r5, r6}^
    1cbc:	44005253 	strmi	r5, [r0], #-595	; 0x253
    1cc0:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    1cc4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1cc8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1ccc:	414d4400 	cmpmi	sp, r0, lsl #8
    1cd0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1cd4:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1cd8:	61746144 	cmnvs	r4, r4, asr #2
    1cdc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1ce0:	00726574 	rsbseq	r6, r2, r4, ror r5
    1ce4:	5f414d44 	svcpl	0x00414d44
    1ce8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1cec:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1cf0:	61446c61 	cmpvs	r4, r1, ror #24
    1cf4:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1cf8:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    1cfc:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    1d00:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    1d04:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1d08:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    1d0c:	445f414d 	ldrbmi	r4, [pc], #-333	; 1d14 <_Min_Stack_Size+0x1914>
    1d10:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1d14:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1d18:	4d726566 	cfldr64mi	mvdx6, [r2, #-408]!	; 0xfffffe68
    1d1c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1d20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d24:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1d28:	49465f41 	stmdbmi	r6, {r0, r6, r8, r9, sl, fp, ip, lr}^
    1d2c:	68544f46 	ldmdavs	r4, {r1, r2, r6, r8, r9, sl, fp, lr}^
    1d30:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1d34:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    1d38:	5f414d44 	svcpl	0x00414d44
    1d3c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1d40:	61745354 	cmnvs	r4, r4, asr r3
    1d44:	00737574 	rsbseq	r7, r3, r4, ror r5
    1d48:	52534948 	subspl	r4, r3, #72, 18	; 0x120000
    1d4c:	414d4400 	cmpmi	sp, r0, lsl #8
    1d50:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1d54:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1d58:	00746375 	rsbseq	r6, r4, r5, ror r3
    1d5c:	5f414d44 	svcpl	0x00414d44
    1d60:	636e6950 	cmnvs	lr, #80, 18	; 0x140000
    1d64:	4d00736f 	stcmi	3, cr7, [r0, #-444]	; 0xfffffe44
    1d68:	00524131 	subseq	r4, r2, r1, lsr r1
    1d6c:	5f414d44 	svcpl	0x00414d44
    1d70:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    1d74:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1d78:	414d4400 	cmpmi	sp, r0, lsl #8
    1d7c:	414c465f 	cmpmi	ip, pc, asr r6
    1d80:	4d440047 	stclmi	0, cr0, [r4, #-284]	; 0xfffffee4
    1d84:	6c435f41 	mcrrvs	15, 4, r5, r3, cr1
    1d88:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1d8c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1d90:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1d94:	00746942 	rsbseq	r6, r4, r2, asr #18
    1d98:	5f414d44 	svcpl	0x00414d44
    1d9c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1da0:	6e496870 	mcrvs	8, 2, r6, cr9, cr0, {3}
    1da4:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    1da8:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    1dac:	43657a69 	cmnmi	r5, #430080	; 0x69000
    1db0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1db4:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1db8:	65445f41 	strbvs	r5, [r4, #-3905]	; 0xf41
    1dbc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1dc0:	414d4400 	cmpmi	sp, r0, lsl #8
    1dc4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1dc8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1dcc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1dd0:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    1dd4:	52434649 	subpl	r4, r3, #76546048	; 0x4900000
    1dd8:	41304d00 	teqmi	r0, r0, lsl #26
    1ddc:	444e0052 	strbmi	r0, [lr], #-82	; 0x52
    1de0:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
    1de4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1de8:	61423179 	hvcvs	8985	; 0x2319
    1dec:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    1df0:	44007264 	strmi	r7, [r0], #-612	; 0x264
    1df4:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1df8:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 1cdc <_Min_Stack_Size+0x18dc>
    1dfc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1e00:	5f414d44 	svcpl	0x00414d44
    1e04:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1e08:	7453646d 	ldrbvc	r6, [r3], #-1133	; 0x46d
    1e0c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e10:	414d4400 	cmpmi	sp, r0, lsl #8
    1e14:	6168435f 	cmnvs	r8, pc, asr r3
    1e18:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1e1c:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    1e20:	4279726f 	rsbsmi	r7, r9, #-268435450	; 0xf0000006
    1e24:	41657361 	cmnmi	r5, r1, ror #6
    1e28:	00726464 	rsbseq	r6, r2, r4, ror #8
    1e2c:	5f414d44 	svcpl	0x00414d44
    1e30:	6f6d654d 	svcvs	0x006d654d
    1e34:	42307972 	eorsmi	r7, r0, #1867776	; 0x1c8000
    1e38:	41657361 	cmnmi	r5, r1, ror #6
    1e3c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1e40:	5f414d44 	svcpl	0x00414d44
    1e44:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1e48:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1e4c:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    1e50:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1d24 <_Min_Stack_Size+0x1924>
    1e54:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1e58:	5f414d44 	svcpl	0x00414d44
    1e5c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1e60:	44727275 	ldrbtmi	r7, [r2], #-629	; 0x275
    1e64:	43617461 	cmnmi	r1, #1627389952	; 0x61000000
    1e68:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1e6c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1e70:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    1e74:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1e78:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e7c:	5f414d44 	svcpl	0x00414d44
    1e80:	44005449 	strmi	r5, [r0], #-1097	; 0x449
    1e84:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1d58 <_Min_Stack_Size+0x1958>
    1e88:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1e8c:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
    1e90:	7a695361 	bvc	1a56c1c <_Min_Stack_Size+0x1a5681c>
    1e94:	58520065 	ldmdapl	r2, {r0, r2, r5, r6}^
    1e98:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    1e9c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1ea0:	5053006e 	subspl	r0, r3, lr, rrx
    1ea4:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    1ea8:	70007469 	andvc	r7, r0, r9, ror #8
    1eac:	00726c6c 	rsbseq	r6, r2, ip, ror #24
    1eb0:	5f533249 	svcpl	0x00533249
    1eb4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1eb8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1ebc:	43007463 	movwmi	r7, #1123	; 0x463
    1ec0:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    1ec4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1ec8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    1ecc:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1ed0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ed4:	32490067 	subcc	r0, r9, #103	; 0x67
    1ed8:	6e495f53 	mcrvs	15, 2, r5, cr9, cr3, {2}
    1edc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1ee0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1ee4:	50530066 	subspl	r0, r3, r6, rrx
    1ee8:	32495f49 	subcc	r5, r9, #292	; 0x124
    1eec:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xf53
    1ef0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1ef4:	53324900 	teqpl	r2, #0, 18
    1ef8:	6174535f 	cmnvs	r4, pc, asr r3
    1efc:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1f00:	50530064 	subspl	r0, r3, r4, rrx
    1f04:	69425f49 	stmdbvs	r2, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    1f08:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0x944
    1f0c:	6f697463 	svcvs	0x00697463
    1f10:	4c6c616e 	stfmie	f6, [ip], #-440	; 0xfffffe48
    1f14:	43656e69 	cmnmi	r5, #1680	; 0x690
    1f18:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f1c:	50530067 	subspl	r0, r3, r7, rrx
    1f20:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    1f24:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    1f28:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1f2c:	696d6f6e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f30:	63006c61 	movwvs	r6, #3169	; 0xc61
    1f34:	65726372 	ldrbvs	r6, [r2, #-882]!	; 0x372
    1f38:	50530067 	subspl	r0, r3, r7, rrx
    1f3c:	32495f49 	subcc	r5, r9, #292	; 0x124
    1f40:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    1f44:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    1f48:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f4c:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    1f50:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1f54:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    1f58:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f5c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f60:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    1f64:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1f68:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1f6c:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    1f70:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1f74:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f78:	53006769 	movwpl	r6, #1897	; 0x769
    1f7c:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    1f80:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1f84:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1f88:	50530074 	subspl	r0, r3, r4, ror r0
    1f8c:	32495f49 	subcc	r5, r9, #292	; 0x124
    1f90:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xf53
    1f94:	616c4674 	smcvs	50276	; 0xc464
    1f98:	61745367 	cmnvs	r4, r7, ror #6
    1f9c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1fa0:	5f495053 	svcpl	0x00495053
    1fa4:	754f5353 	strbvc	r5, [pc, #-851]	; 1c59 <_Min_Stack_Size+0x1859>
    1fa8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    1fac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1fb0:	78533249 	ldmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    1fb4:	00747865 	rsbseq	r7, r4, r5, ror #16
    1fb8:	52435854 	subpl	r5, r3, #84, 16	; 0x540000
    1fbc:	53005243 	movwpl	r5, #579	; 0x243
    1fc0:	445f4950 	ldrbmi	r4, [pc], #-2384	; 1fc8 <_Min_Stack_Size+0x1bc8>
    1fc4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1fc8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1fcc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fd0:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    1fd4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fd8:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    1fdc:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1fe0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1fe4:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    1fe8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fec:	6172545f 	cmnvs	r2, pc, asr r4
    1ff0:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1ff4:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    1ff8:	53324900 	teqpl	r2, #0, 18
    1ffc:	4c434d5f 	mcrrmi	13, 5, r4, r3, cr15
    2000:	74754f4b 	ldrbtvc	r4, [r5], #-3915	; 0xf4b
    2004:	00747570 	rsbseq	r7, r4, r0, ror r5
    2008:	5f495053 	svcpl	0x00495053
    200c:	5f533249 	svcpl	0x00533249
    2010:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2014:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2018:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    201c:	0054495f 	subseq	r4, r4, pc, asr r9
    2020:	5f495053 	svcpl	0x00495053
    2024:	61746144 	cmnvs	r4, r4, asr #2
    2028:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    202c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2030:	53006769 	movwpl	r6, #1897	; 0x769
    2034:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    2038:	6f504352 	svcvs	0x00504352
    203c:	6f6e796c 	svcvs	0x006e796c
    2040:	6c61696d 	stclvs	9, cr6, [r1], #-436	; 0xfffffe4c
    2044:	53324900 	teqpl	r2, #0, 18
    2048:	4f50435f 	svcmi	0x0050435f
    204c:	5053004c 	subspl	r0, r3, ip, asr #32
    2050:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2054:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2058:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    205c:	50530066 	subspl	r0, r3, r6, rrx
    2060:	32495f49 	subcc	r5, r9, #292	; 0x124
    2064:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2068:	71655241 	cmnvc	r5, r1, asr #4
    206c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2070:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2074:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2078:	00746375 	rsbseq	r6, r4, r5, ror r3
    207c:	5f495053 	svcpl	0x00495053
    2080:	6f4d4954 	svcvs	0x004d4954
    2084:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2088:	32490064 	subcc	r0, r9, #100	; 0x64
    208c:	61445f53 	cmpvs	r4, r3, asr pc
    2090:	6f466174 	svcvs	0x00466174
    2094:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
    2098:	53324900 	teqpl	r2, #0, 18
    209c:	53005250 	movwpl	r5, #592	; 0x250
    20a0:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    20a4:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    20a8:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 1fe8 <_Min_Stack_Size+0x1be8>
    20ac:	0065646f 	rsbeq	r6, r5, pc, ror #8
    20b0:	5f495053 	svcpl	0x00495053
    20b4:	5f533249 	svcpl	0x00533249
    20b8:	61656c43 	cmnvs	r5, r3, asr #24
    20bc:	50544972 	subspl	r4, r4, r2, ror r9
    20c0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    20c4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    20c8:	32690074 	rsbcc	r0, r9, #116	; 0x74
    20cc:	76696473 			; <UNDEFINED> instruction: 0x76696473
    20d0:	53324900 	teqpl	r2, #0, 18
    20d4:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0x15f
    20d8:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    20dc:	53007165 	movwpl	r7, #357	; 0x165
    20e0:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    20e4:	004c4f50 	subeq	r4, ip, r0, asr pc
    20e8:	5f533249 	svcpl	0x00533249
    20ec:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20f0:	5f495053 	svcpl	0x00495053
    20f4:	73726946 	cmnvc	r2, #1146880	; 0x118000
    20f8:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    20fc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2100:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2104:	50530041 	subspl	r0, r3, r1, asr #32
    2108:	53007849 	movwpl	r7, #2121	; 0x849
    210c:	425f4950 	subsmi	r4, pc, #80, 18	; 0x140000
    2110:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
    2114:	50657461 	rsbpl	r7, r5, r1, ror #8
    2118:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    211c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2120:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2124:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2128:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    212c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2130:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2138 <_Min_Stack_Size+0x1d38>
    2134:	50530065 	subspl	r0, r3, r5, rrx
    2138:	32495f49 	subcc	r5, r9, #292	; 0x124
    213c:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    2140:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2144:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2148:	5f495053 	svcpl	0x00495053
    214c:	0053534e 	subseq	r5, r3, lr, asr #6
    2150:	5f495053 	svcpl	0x00495053
    2154:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    2158:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    215c:	43524365 	cmpmi	r2, #-1811939327	; 0x94000001
    2160:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2164:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2168:	00435243 	subeq	r5, r3, r3, asr #4
    216c:	5f533249 	svcpl	0x00533249
    2170:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2174:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2178:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    217c:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    2180:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2184:	5f533249 	svcpl	0x00533249
    2188:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    218c:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    2190:	6f437865 	svcvs	0x00437865
    2194:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2198:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    219c:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    21a0:	7a695361 	bvc	1a56f2c <_Min_Stack_Size+0x1a56b2c>
    21a4:	32690065 	rsbcc	r0, r9, #101	; 0x65
    21a8:	64646f73 	strbtvs	r6, [r4], #-3955	; 0xf73
    21ac:	63617000 	cmnvs	r1, #0
    21b0:	6c74656b 	cfldr64vs	mvdx6, [r4], #-428	; 0xfffffe54
    21b4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    21b8:	6e690068 	cdpvs	0, 6, cr0, cr9, cr8, {3}
    21bc:	4f432f63 	svcmi	0x00432f63
    21c0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    21c4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    21c8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    21cc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    21d0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    21d4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    21d8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    21dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    21e0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    21e4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    21e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    21ec:	445f6870 	ldrbmi	r6, [pc], #-2160	; 21f4 <_Min_Stack_Size+0x1df4>
    21f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    21f4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    21f8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    21fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2200:	5f787834 	svcpl	0x00787834
    2204:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    2208:	50530063 	subspl	r0, r3, r3, rrx
    220c:	32495f49 	subcc	r5, r9, #292	; 0x124
    2210:	65535f53 	ldrbvs	r5, [r3, #-3923]	; 0xf53
    2214:	6144646e 	cmpvs	r4, lr, ror #8
    2218:	53006174 	movwpl	r6, #372	; 0x174
    221c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2220:	525f5332 	subspl	r5, pc, #-939524096	; 0xc8000000
    2224:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2228:	61446576 	hvcvs	18006	; 0x4656
    222c:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
    2230:	6c637332 	stclvs	3, cr7, [r3], #-200	; 0xffffff38
    2234:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    2238:	4c5f4954 	mrrcmi	9, 5, r4, pc, cr4	; <UNPREDICTABLE>
    223c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2240:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2244:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 224c <_Min_Stack_Size+0x1e4c>
    2248:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
    224c:	4c5f4954 	mrrcmi	9, 5, r4, pc, cr4	; <UNPREDICTABLE>
    2250:	43656e69 	cmnmi	r5, #1680	; 0x690
    2254:	4500646d 	strmi	r6, [r0, #-1133]	; 0x46d
    2258:	5f495458 	svcpl	0x00495458
    225c:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2260:	00726567 	rsbseq	r6, r2, r7, ror #10
    2264:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2268:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2270 <_Min_Stack_Size+0x1e70>
    226c:	76455f65 	strbvc	r5, [r5], -r5, ror #30
    2270:	00746e65 	rsbseq	r6, r4, r5, ror #28
    2274:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2278:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    227c:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    2280:	49575365 	ldmdbmi	r7, {r0, r2, r5, r6, r8, r9, ip, lr}^
    2284:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2288:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    228c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2290:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2294:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2298:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    229c:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    22a0:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    22a4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    22a8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    22ac:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    22b0:	4d5f4954 	ldclmi	9, cr4, [pc, #-336]	; 2168 <_Min_Stack_Size+0x1d68>
    22b4:	5f65646f 	svcpl	0x0065646f
    22b8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    22bc:	70757272 	rsbsvc	r7, r5, r2, ror r2
    22c0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    22c4:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
    22c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    22cc:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    22d0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    22d4:	646f4d49 	strbtvs	r4, [pc], #-3401	; 22dc <_Min_Stack_Size+0x1edc>
    22d8:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    22dc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    22e0:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    22e4:	545f4954 	ldrbpl	r4, [pc], #-2388	; 22ec <_Min_Stack_Size+0x1eec>
    22e8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    22ec:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    22f0:	00525354 	subseq	r5, r2, r4, asr r3
    22f4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    22f8:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    22fc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2300:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
    2304:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2308:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    230c:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2310:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2314:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
    2318:	5f676e69 	svcpl	0x00676e69
    231c:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
    2320:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2324:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2328:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    232c:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    2330:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
    2334:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2338:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    233c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2340:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2344:	74535f49 	ldrbvc	r5, [r3], #-3913	; 0xf49
    2348:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    234c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2350:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2354:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    2358:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    235c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2360:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
    2364:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
    2368:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    236c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    2370:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2374:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    2378:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    237c:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2380:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    2384:	61465f72 	hvcvs	26098	; 0x65f2
    2388:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
    238c:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2390:	4f432f63 	svcmi	0x00432f63
    2394:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2398:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    239c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    23a0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    23a4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    23a8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    23ac:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    23b0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    23b4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    23b8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    23bc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    23c0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 23c8 <_Min_Stack_Size+0x1fc8>
    23c4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    23c8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    23cc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    23d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    23d4:	5f787834 	svcpl	0x00787834
    23d8:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    23dc:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    23e0:	00525354 	subseq	r5, r2, r4, asr r3
    23e4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    23e8:	67697254 			; <UNDEFINED> instruction: 0x67697254
    23ec:	5f726567 	svcpl	0x00726567
    23f0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    23f4:	00666544 	rsbeq	r6, r6, r4, asr #10
    23f8:	45495753 	strbmi	r5, [r9, #-1875]	; 0x753
    23fc:	58450052 	stmdapl	r5, {r1, r4, r6}^
    2400:	445f4954 	ldrbmi	r4, [pc], #-2388	; 2408 <_Min_Stack_Size+0x2008>
    2404:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2408:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    240c:	5f443241 	svcpl	0x00443241
    2410:	74534742 	ldrbvc	r4, [r3], #-1858	; 0x742
    2414:	00747261 	rsbseq	r7, r4, r1, ror #4
    2418:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    241c:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2420:	5f434650 	svcpl	0x00434650
    2424:	48504c41 	ldmdami	r0, {r0, r6, sl, fp, lr}^
    2428:	41565f41 	cmpmi	r6, r1, asr #30
    242c:	0045554c 	subeq	r5, r5, ip, asr #10
    2430:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2434:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2438:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    243c:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2440:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2444:	414d4400 	cmpmi	sp, r0, lsl #8
    2448:	4f5f4432 	svcmi	0x005f4432
    244c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2450:	756c4274 	strbvc	r4, [ip, #-628]!	; 0x274
    2454:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2458:	5f443241 	svcpl	0x00443241
    245c:	5f434746 	svcpl	0x00434746
    2460:	00444552 	subeq	r4, r4, r2, asr r5
    2464:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2468:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    246c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2470:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    2474:	5f443241 	svcpl	0x00443241
    2478:	61656c43 	cmnvs	r5, r3, asr #24
    247c:	616c4672 	smcvs	50274	; 0xc462
    2480:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2484:	5f443241 	svcpl	0x00443241
    2488:	465f5449 	ldrbmi	r5, [pc], -r9, asr #8
    248c:	0047414c 	subeq	r4, r7, ip, asr #2
    2490:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2494:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    2498:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    249c:	4d435f54 	stclmi	15, cr5, [r3, #-336]	; 0xfffffeb0
    24a0:	43474600 	movtmi	r4, #30208	; 0x7600
    24a4:	0054554c 	subseq	r5, r4, ip, asr #10
    24a8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    24ac:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    24b0:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    24b4:	4d435f54 	stclmi	15, cr5, [r3, #-336]	; 0xfffffeb0
    24b8:	414d4400 	cmpmi	sp, r0, lsl #8
    24bc:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    24c0:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    24c4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    24c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    24cc:	5f676600 	svcpl	0x00676600
    24d0:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    24d4:	6c617661 	stclvs	6, cr7, [r1], #-388	; 0xfffffe7c
    24d8:	44006575 	strmi	r6, [r0], #-1397	; 0x575
    24dc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    24e0:	61574c5f 	cmpvs	r7, pc, asr ip
    24e4:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    24e8:	436b7261 	cmnmi	fp, #268435462	; 0x10000006
    24ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24f0:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    24f4:	5f443241 	svcpl	0x00443241
    24f8:	495f4742 	ldmdbmi	pc, {r1, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    24fc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2500:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2504:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    2508:	5f443241 	svcpl	0x00443241
    250c:	414d4746 	cmpmi	sp, r6, asr #14
    2510:	414d4400 	cmpmi	sp, r0, lsl #8
    2514:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2518:	44004f47 	strmi	r4, [r0], #-3911	; 0xf47
    251c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2520:	5f47465f 	svcpl	0x0047465f
    2524:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2528:	5a49535f 	bpl	12572ac <_Min_Stack_Size+0x1256eac>
    252c:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    2530:	5f443241 	svcpl	0x00443241
    2534:	4d434742 	stclmi	7, cr4, [r3, #-264]	; 0xfffffef8
    2538:	41005241 	tstmi	r0, r1, asr #4
    253c:	5243544d 	subpl	r5, r3, #1291845632	; 0x4d000000
    2540:	414d4400 	cmpmi	sp, r0, lsl #8
    2544:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2548:	43465047 	movtmi	r5, #24647	; 0x6047
    254c:	504c415f 	subpl	r4, ip, pc, asr r1
    2550:	565f4148 	ldrbpl	r4, [pc], -r8, asr #2
    2554:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
    2558:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    255c:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2560:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    2564:	5f443241 	svcpl	0x00443241
    2568:	5f434742 	svcpl	0x00434742
    256c:	45455247 	strbmi	r5, [r5, #-583]	; 0x247
    2570:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
    2574:	5f443241 	svcpl	0x00443241
    2578:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0x950
    257c:	7265506c 	rsbvc	r5, r5, #108	; 0x6c
    2580:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2584:	414d4400 	cmpmi	sp, r0, lsl #8
    2588:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    258c:	425f4347 	subsmi	r4, pc, #469762049	; 0x1c000001
    2590:	0045554c 	subeq	r5, r5, ip, asr #10
    2594:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2598:	6f4d5f44 	svcvs	0x004d5f44
    259c:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    25a0:	6f635f67 	svcvs	0x00635f67
    25a4:	67726f6c 	ldrbvs	r6, [r2, -ip, ror #30]!
    25a8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    25ac:	414d4400 	cmpmi	sp, r0, lsl #8
    25b0:	445f4432 	ldrbmi	r4, [pc], #-1074	; 25b8 <_Min_Stack_Size+0x21b8>
    25b4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    25b8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    25bc:	5f443241 	svcpl	0x00443241
    25c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    25c4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    25c8:	42007463 	andmi	r7, r0, #1660944384	; 0x63000000
    25cc:	554c4347 	strbpl	r4, [ip, #-839]	; 0x347
    25d0:	4d440054 	stclmi	0, cr0, [r4, #-336]	; 0xfffffeb0
    25d4:	5f443241 	svcpl	0x00443241
    25d8:	6f434742 	svcvs	0x00434742
    25dc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25e0:	414d4400 	cmpmi	sp, r0, lsl #8
    25e4:	535f4432 	cmppl	pc, #838860800	; 0x32000000
    25e8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    25ec:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    25f0:	47460074 	smlsldxmi	r0, r6, r4, r0
    25f4:	524c4f43 	subpl	r4, ip, #268	; 0x10c
    25f8:	414d4400 	cmpmi	sp, r0, lsl #8
    25fc:	445f4432 	ldrbmi	r4, [pc], #-1074	; 2604 <_Min_Stack_Size+0x2204>
    2600:	54646165 	strbtpl	r6, [r4], #-357	; 0x165
    2604:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2608:	414d4746 	cmpmi	sp, r6, asr #14
    260c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2610:	5f443241 	svcpl	0x00443241
    2614:	46504742 	ldrbmi	r4, [r0], -r2, asr #14
    2618:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    261c:	5f414850 	svcpl	0x00414850
    2620:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    2624:	414d4400 	cmpmi	sp, r0, lsl #8
    2628:	435f4432 	cmpmi	pc, #838860800	; 0x32000000
    262c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2630:	414d4400 	cmpmi	sp, r0, lsl #8
    2634:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2638:	6e6f4347 	cdpvs	3, 6, cr4, cr15, cr7, {2}
    263c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2640:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    2644:	7374756c 	cmnvc	r4, #108, 10	; 0x1b000000
    2648:	00657a69 	rsbeq	r7, r5, r9, ror #20
    264c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2650:	754e5f44 	strbvc	r5, [lr, #-3908]	; 0xf44
    2654:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    2658:	694c664f 	stmdbvs	ip, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    265c:	6600656e 	strvs	r6, [r0], -lr, ror #10
    2660:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2664:	6f637475 	svcvs	0x00637475
    2668:	6d726f6c 	ldclvs	15, cr6, [r2, #-432]!	; 0xfffffe50
    266c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2670:	524f4746 	subpl	r4, pc, #18350080	; 0x1180000
    2674:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    2678:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    267c:	4d440061 	stclmi	0, cr0, [r4, #-388]	; 0xfffffe7c
    2680:	5f443241 	svcpl	0x00443241
    2684:	70737553 	rsbsvc	r7, r3, r3, asr r5
    2688:	00646e65 	rsbeq	r6, r4, r5, ror #28
    268c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2690:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2694:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    2698:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    269c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    26a0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    26a4:	62415f44 	subvs	r5, r1, #68, 30	; 0x110
    26a8:	5474726f 	ldrbtpl	r7, [r4], #-623	; 0x26f
    26ac:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    26b0:	00726566 	rsbseq	r6, r2, r6, ror #10
    26b4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    26b8:	54495f44 	strbpl	r5, [r9], #-3908	; 0xf44
    26bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26c0:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    26c4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    26c8:	0054495f 	subseq	r4, r4, pc, asr r9
    26cc:	615f6762 	cmpvs	pc, r2, ror #14
    26d0:	6168706c 	cmnvs	r8, ip, rrx
    26d4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
    26d8:	67660065 	strbvs	r0, [r6, -r5, rrx]!
    26dc:	756c635f 	strbvc	r6, [ip, #-863]!	; 0x35f
    26e0:	7a697374 	bvc	1a5f4b8 <_Min_Stack_Size+0x1a5f0b8>
    26e4:	4d4f0065 	stclmi	0, cr0, [pc, #-404]	; 2558 <_Min_Stack_Size+0x2158>
    26e8:	44005241 	strmi	r5, [r0], #-577	; 0x241
    26ec:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    26f0:	6e694c5f 	mcrvs	12, 3, r4, cr9, cr15, {2}
    26f4:	74615765 	strbtvc	r5, [r1], #-1893	; 0x765
    26f8:	616d7265 	cmnvs	sp, r5, ror #4
    26fc:	6f436b72 	svcvs	0x00436b72
    2700:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2704:	5f676200 	svcpl	0x00676200
    2708:	6f6c6f63 	svcvs	0x006c6f63
    270c:	64657272 	strbtvs	r7, [r5], #-626	; 0x272
    2710:	414d4400 	cmpmi	sp, r0, lsl #8
    2714:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2718:	004d4347 	subeq	r4, sp, r7, asr #6
    271c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2720:	6e495f44 	cdpvs	15, 4, cr5, cr9, cr4, {2}
    2724:	66007469 	strvs	r7, [r0], -r9, ror #8
    2728:	6c615f67 	stclvs	15, cr5, [r1], #-412	; 0xfffffe64
    272c:	5f616870 	svcpl	0x00616870
    2730:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    2734:	414d4400 	cmpmi	sp, r0, lsl #8
    2738:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    273c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2740:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2744:	4f006665 	svcmi	0x00006665
    2748:	524c4f43 	subpl	r4, ip, #268	; 0x10c
    274c:	43474200 	movtmi	r4, #29184	; 0x7200
    2750:	00524c4f 	subseq	r4, r2, pc, asr #24
    2754:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2758:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    275c:	4400414d 	strmi	r4, [r0], #-333	; 0x14d
    2760:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2764:	4347425f 	movtmi	r4, #29279	; 0x725f
    2768:	554c425f 	strbpl	r4, [ip, #-607]	; 0x25f
    276c:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    2770:	5f443241 	svcpl	0x00443241
    2774:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2778:	61725474 	cmnvs	r2, r4, ror r4
    277c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
    2780:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    2784:	5f443241 	svcpl	0x00443241
    2788:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    278c:	46504f00 	ldrbmi	r4, [r0], -r0, lsl #30
    2790:	00524343 	subseq	r4, r2, r3, asr #6
    2794:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2798:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    279c:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    27a0:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    27a4:	4200455a 	andmi	r4, r0, #377487360	; 0x16800000
    27a8:	43465047 	movtmi	r5, #24647	; 0x6047
    27ac:	69005243 	stmdbvs	r0, {r0, r1, r6, r9, ip, lr}
    27b0:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    27b4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    27b8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    27bc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    27c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    27c4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    27c8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    27cc:	2f736569 	svccs	0x00736569
    27d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    27d4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    27d8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    27dc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    27e0:	5f687069 	svcpl	0x00687069
    27e4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    27e8:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    27ec:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    27f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    27f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    27f8:	616d645f 	cmnvs	sp, pc, asr r4
    27fc:	632e6432 	teqvs	lr, #838860800	; 0x32000000
    2800:	414d4400 	cmpmi	sp, r0, lsl #8
    2804:	445f4432 	ldrbmi	r4, [pc], #-1074	; 280c <_Min_Stack_Size+0x240c>
    2808:	54646165 	strbtpl	r6, [r4], #-357	; 0x165
    280c:	43656d69 	cmnmi	r5, #6720	; 0x1a40
    2810:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2814:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2818:	5f443241 	svcpl	0x00443241
    281c:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    2820:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2824:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2828:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    282c:	5f443241 	svcpl	0x00443241
    2830:	61656c43 	cmnvs	r5, r3, asr #24
    2834:	50544972 	subspl	r4, r4, r2, ror r9
    2838:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    283c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2840:	47460074 	smlsldxmi	r0, r6, r4, r0
    2844:	43434650 	movtmi	r4, #13904	; 0x3650
    2848:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    284c:	5f443241 	svcpl	0x00443241
    2850:	5f434746 	svcpl	0x00434746
    2854:	45455247 	strbmi	r5, [r5, #-583]	; 0x247
    2858:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
    285c:	5f443241 	svcpl	0x00443241
    2860:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2864:	654d7475 	strbvs	r7, [sp, #-1141]	; 0x475
    2868:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    286c:	00646441 	rsbeq	r6, r4, r1, asr #8
    2870:	6c786970 	ldclvs	9, cr6, [r8], #-448	; 0xfffffe40
    2874:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2878:	7274756f 	rsbsvc	r7, r4, #465567744	; 0x1bc00000
    287c:	44006465 	strmi	r6, [r0], #-1125	; 0x465
    2880:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2884:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    2888:	52747570 	rsbspl	r7, r4, #112, 10	; 0x1c000000
    288c:	66006465 	strvs	r6, [r0], -r5, ror #8
    2890:	6f635f67 	svcvs	0x00635f67
    2894:	67726f6c 	ldrbvs	r6, [r2, -ip, ror #30]!
    2898:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    289c:	414d4400 	cmpmi	sp, r0, lsl #8
    28a0:	4f5f4432 	svcmi	0x005f4432
    28a4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    28a8:	65724774 	ldrbvs	r4, [r2, #-1908]!	; 0x774
    28ac:	44006e65 	strmi	r6, [r0], #-3685	; 0xe65
    28b0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    28b4:	4347465f 	movtmi	r4, #30303	; 0x765f
    28b8:	4d44004d 	stclmi	0, cr0, [r4, #-308]	; 0xfffffecc
    28bc:	5f443241 	svcpl	0x00443241
    28c0:	495f4742 	ldmdbmi	pc, {r1, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    28c4:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    28c8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    28cc:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
    28d0:	52414d47 	subpl	r4, r1, #4544	; 0x11c0
    28d4:	414d4400 	cmpmi	sp, r0, lsl #8
    28d8:	545f4432 	ldrbpl	r4, [pc], #-1074	; 28e0 <_Min_Stack_Size+0x24e0>
    28dc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    28e0:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    28e4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    28e8:	4f47425f 	svcmi	0x0047425f
    28ec:	414d4400 	cmpmi	sp, r0, lsl #8
    28f0:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    28f4:	43465047 	movtmi	r5, #24647	; 0x6047
    28f8:	504c415f 	subpl	r4, ip, pc, asr r1
    28fc:	4d5f4148 	ldfmie	f4, [pc, #-288]	; 27e4 <_Min_Stack_Size+0x23e4>
    2900:	0045444f 	subeq	r4, r5, pc, asr #8
    2904:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2908:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    290c:	616c4674 	smcvs	50276	; 0xc464
    2910:	61745367 	cmnvs	r4, r7, ror #6
    2914:	00737574 	rsbseq	r7, r3, r4, ror r5
    2918:	524f4742 	subpl	r4, pc, #17301504	; 0x1080000
    291c:	414d4400 	cmpmi	sp, r0, lsl #8
    2920:	4f5f4432 	svcmi	0x005f4432
    2924:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2928:	66664f74 	uqsub16vs	r4, r6, r4
    292c:	00746573 	rsbseq	r6, r4, r3, ror r5
    2930:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2934:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    2938:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    293c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2940:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    2944:	5f443241 	svcpl	0x00443241
    2948:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    294c:	6c417475 	cfstrdvs	mvd7, [r1], {117}	; 0x75
    2950:	00616870 	rsbeq	r6, r1, r0, ror r8
    2954:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2958:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    295c:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xf43
    2960:	67660044 	strbvs	r0, [r6, -r4, asr #32]!
    2964:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 27f0 <_Min_Stack_Size+0x23f0>
    2968:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
    296c:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    2970:	5f443241 	svcpl	0x00443241
    2974:	4d434746 	stclmi	7, cr4, [r3, #-280]	; 0xfffffee8
    2978:	62005241 	andvs	r5, r0, #268435460	; 0x10000004
    297c:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2980:	6f637475 	svcvs	0x00637475
    2984:	6d726f6c 	ldclvs	15, cr6, [r2, #-432]!	; 0xfffffe50
    2988:	0065646f 	rsbeq	r6, r5, pc, ror #8
    298c:	615f6762 	cmpvs	pc, r2, ror #14
    2990:	6168706c 	cmnvs	r8, ip, rrx
    2994:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 299c <_Min_Stack_Size+0x259c>
    2998:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    299c:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    29a0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    29a4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    29a8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    29ac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    29b0:	42464300 	submi	r4, r6, #0, 6
    29b4:	00524e4c 	subseq	r4, r2, ip, asr #28
    29b8:	4344544c 	movtmi	r5, #17484	; 0x444c
    29bc:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2848 <_Min_Stack_Size+0x2448>
    29c0:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    29c4:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    29c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    29cc:	48006769 	stmdami	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    29d0:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    29d4:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    29d8:	445f4344 	ldrbmi	r4, [pc], #-836	; 29e0 <_Min_Stack_Size+0x25e0>
    29dc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    29e0:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    29e4:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    29e8:	4954554c 	ldmdbmi	r4, {r2, r3, r6, r8, sl, ip, lr}^
    29ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    29f0:	52434342 	subpl	r4, r3, #134217729	; 0x8000001
    29f4:	42464300 	submi	r4, r6, #0, 6
    29f8:	6100524c 	tstvs	r0, ip, asr #4
    29fc:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2a00:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2a04:	63616465 	cmnvs	r1, #1694498816	; 0x65000000
    2a08:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2a0c:	544c0057 	strbpl	r0, [ip], #-87	; 0x57
    2a10:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2a14:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2a18:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2a1c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2a20:	6f635f43 	svcvs	0x00635f43
    2a24:	6b726f6c 	blvs	1c9e7dc <_Min_Stack_Size+0x1c9e3dc>
    2a28:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    2a2c:	6e495f67 	cdpvs	15, 4, cr5, cr9, cr7, {3}
    2a30:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2a34:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2a38:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2a3c:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    2a40:	61745342 	cmnvs	r4, r2, asr #6
    2a44:	64417472 	strbvs	r7, [r1], #-1138	; 0x472
    2a48:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2a4c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2a50:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    2a54:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2a58:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 2890 <_Min_Stack_Size+0x2490>
    2a5c:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0x26f
    2a60:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    2a64:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    2a68:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2a6c:	536c6163 	cmnpl	ip, #-1073741800	; 0xc0000018
    2a70:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2a74:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2a78:	63415f43 	movtvs	r5, #8003	; 0x1f43
    2a7c:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2a80:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2a84:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2a88:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    2a8c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2a90:	614c5f43 	cmpvs	ip, r3, asr #30
    2a94:	50726579 	rsbspl	r6, r2, r9, ror r5
    2a98:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    2a9c:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    2aa0:	4c007461 	cfstrsmi	mvf7, [r0], {97}	; 0x61
    2aa4:	5f434454 	svcpl	0x00434454
    2aa8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2aac:	00666544 	rsbeq	r6, r6, r4, asr #10
    2ab0:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ab4:	50494c5f 	subpl	r4, r9, pc, asr ip
    2ab8:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    2abc:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    2ac0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2ac4:	56570067 	ldrbpl	r0, [r7], -r7, rrx
    2ac8:	00524350 	subseq	r4, r2, r0, asr r3
    2acc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ad0:	5053485f 	subspl	r4, r3, pc, asr r8
    2ad4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2ad8:	00797469 	rsbseq	r7, r9, r9, ror #8
    2adc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ae0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2ae4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2ae8:	00746375 	rsbseq	r6, r4, r5, ror r3
    2aec:	4344544c 	movtmi	r5, #17484	; 0x444c
    2af0:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2af4:	6f72676b 	svcvs	0x0072676b
    2af8:	47646e75 			; <UNDEFINED> instruction: 0x47646e75
    2afc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2b00:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2b04:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    2b08:	415f4344 	cmpmi	pc, r4, asr #6
    2b0c:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2b10:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2b14:	42566465 	subsmi	r6, r6, #1694498816	; 0x65000000
    2b18:	544c0050 	strbpl	r0, [ip], #-80	; 0x50
    2b1c:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2b20:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2b24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2b28:	61636400 	cmnvs	r3, r0, lsl #8
    2b2c:	6168706c 	cmnvs	r8, ip, rrx
    2b30:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b34:	63415f43 	movtvs	r5, #8003	; 0x1f43
    2b38:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2b3c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2b40:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2b44:	57657669 	strbpl	r7, [r5, -r9, ror #12]!
    2b48:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b4c:	614c5f43 	cmpvs	ip, r3, asr #30
    2b50:	53726579 	cmnpl	r2, #507510784	; 0x1e400000
    2b54:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2b58:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0x576
    2b5c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    2b60:	6174735f 	cmnvs	r4, pc, asr r3
    2b64:	68007472 	stmdavs	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
    2b68:	7a69726f 	bvc	1a5f52c <_Min_Stack_Size+0x1a5f12c>
    2b6c:	61746e6f 	cmnvs	r4, pc, ror #28
    2b70:	6e79736c 	cdpvs	3, 7, cr7, cr9, cr12, {3}
    2b74:	544c0063 	strbpl	r0, [ip], #-99	; 0x63
    2b78:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2b7c:	6400646d 	strvs	r6, [r0], #-1133	; 0x46d
    2b80:	64657263 	strbtvs	r7, [r5], #-611	; 0x263
    2b84:	63616200 	cmnvs	r1, #0, 4
    2b88:	6465726b 	strbtvs	r7, [r5], #-619	; 0x26b
    2b8c:	73767700 	cmnvc	r6, #0, 14
    2b90:	736f7070 	cmnvc	pc, #112	; 0x70
    2b94:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b98:	6f485f43 	svcvs	0x00485f43
    2b9c:	6f7a6972 	svcvs	0x007a6972
    2ba0:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2ba4:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    2ba8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2bac:	614c5f43 	cmpvs	ip, r3, asr #30
    2bb0:	5f726579 	svcpl	0x00726579
    2bb4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2bb8:	00666544 	rsbeq	r6, r6, r4, asr #10
    2bbc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2bc0:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2bc4:	00787265 	rsbseq	r7, r8, r5, ror #4
    2bc8:	52434143 	subpl	r4, r3, #-1073741808	; 0xc0000010
    2bcc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2bd0:	6c425f43 	mcrrvs	15, 4, r5, r2, cr3
    2bd4:	61566575 	cmpvs	r6, r5, ror r5
    2bd8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2bdc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2be0:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2a6c <_Min_Stack_Size+0x266c>
    2be4:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2be8:	65724779 	ldrbvs	r4, [r2, #-1913]!	; 0x779
    2bec:	4c006e65 	stcmi	14, cr6, [r0], {101}	; 0x65
    2bf0:	5f434454 	svcpl	0x00434454
    2bf4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2bf8:	61745344 	cmnvs	r4, r4, asr #6
    2bfc:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c00:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2c04:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2c08:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2c0c:	00706f74 	rsbseq	r6, r0, r4, ror pc
    2c10:	6b636162 	blvs	18db1a0 <_Min_Stack_Size+0x18dada0>
    2c14:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2c18:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    2c1c:	445f4344 	ldrbmi	r4, [pc], #-836	; 2c24 <_Min_Stack_Size+0x2824>
    2c20:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2c24:	6f43746c 	svcvs	0x0043746c
    2c28:	42726f6c 	rsbsmi	r6, r2, #108, 30	; 0x1b0
    2c2c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2c30:	4344544c 	movtmi	r5, #17484	; 0x444c
    2c34:	4246435f 	submi	r4, r6, #2080374785	; 0x7c000001
    2c38:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2c3c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2c40:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    2c44:	5f434454 	svcpl	0x00434454
    2c48:	74726556 	ldrbtvc	r6, [r2], #-1366	; 0x556
    2c4c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    2c50:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    2c54:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c58:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2c5c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2c60:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2c64:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    2c68:	485f4344 	ldmdami	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2c6c:	7a69726f 	bvc	1a5f630 <_Min_Stack_Size+0x1a5f230>
    2c70:	61746e6f 	cmnvs	r4, pc, ror #28
    2c74:	6f74536c 	svcvs	0x0074536c
    2c78:	544c0070 	strbpl	r0, [ip], #-112	; 0x70
    2c7c:	535f4344 	cmppl	pc, #68, 6	; 0x10000001
    2c80:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2c84:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2c88:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2c8c:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    2c90:	616f6c65 	cmnvs	pc, r5, ror #24
    2c94:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2c98:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c9c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ca0:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2ca4:	6f72676b 	svcvs	0x0072676b
    2ca8:	42646e75 	rsbmi	r6, r4, #1872	; 0x750
    2cac:	5665756c 	strbtpl	r7, [r5], -ip, ror #10
    2cb0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2cb4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2cb8:	6c425f43 	mcrrvs	15, 4, r5, r2, cr3
    2cbc:	69576575 	ldmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    2cc0:	00687464 	rsbeq	r7, r8, r4, ror #8
    2cc4:	43504857 	cmpmi	r0, #5701632	; 0x570000
    2cc8:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2ccc:	445f4344 	ldrbmi	r4, [pc], #-836	; 2cd4 <_Min_Stack_Size+0x28d4>
    2cd0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2cd4:	6f43746c 	svcvs	0x0043746c
    2cd8:	47726f6c 	ldrbmi	r6, [r2, -ip, ror #30]!
    2cdc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2ce0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ce4:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2ce8:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2cec:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2cf0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2cf4:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2cf8:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    2cfc:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2d00:	536c6163 	cmnpl	ip, #-1073741800	; 0xc0000018
    2d04:	00706f74 	rsbseq	r6, r0, r4, ror pc
    2d08:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d0c:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2b98 <_Min_Stack_Size+0x2798>
    2d10:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2d14:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    2d18:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2d1c:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2d20:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2d24:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2d28:	6f485f43 	svcvs	0x00485f43
    2d2c:	6f7a6972 	svcvs	0x007a6972
    2d30:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2d34:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2d38:	6f740074 	svcvs	0x00740074
    2d3c:	776c6174 			; <UNDEFINED> instruction: 0x776c6174
    2d40:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    2d44:	554c4300 	strbpl	r4, [ip, #-768]	; 0x300
    2d48:	00525754 	subseq	r5, r2, r4, asr r7
    2d4c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d50:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2bdc <_Min_Stack_Size+0x27dc>
    2d54:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2d58:	64655279 	strbtvs	r5, [r5], #-633	; 0x279
    2d5c:	43575400 	cmpmi	r7, #0, 8
    2d60:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2d64:	545f4344 	ldrbpl	r4, [pc], #-836	; 2d6c <_Min_Stack_Size+0x296c>
    2d68:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    2d6c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    2d70:	52530068 	subspl	r0, r3, #104	; 0x68
    2d74:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    2d78:	5f434454 	svcpl	0x00434454
    2d7c:	43005449 	movwmi	r5, #1097	; 0x449
    2d80:	0052434b 	subseq	r4, r2, fp, asr #6
    2d84:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d88:	5043505f 	subpl	r5, r3, pc, asr r0
    2d8c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2d90:	00797469 	rsbseq	r7, r9, r9, ror #8
    2d94:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d98:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2d9c:	646d4354 	strbtvs	r4, [sp], #-852	; 0x354
    2da0:	43464200 	movtmi	r4, #25088	; 0x6200
    2da4:	63610052 	cmnvs	r1, #82	; 0x52
    2da8:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2dac:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2db0:	50424864 	subpl	r4, r2, r4, ror #16
    2db4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2db8:	6f505f43 	svcvs	0x00505f43
    2dbc:	6e495f73 	mcrvs	15, 2, r5, cr9, cr3, {3}
    2dc0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2dc4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2dc8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2dcc:	6f505f43 	svcvs	0x00505f43
    2dd0:	72745373 	rsbsvc	r5, r4, #-872415231	; 0xcc000001
    2dd4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2dd8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2ddc:	52435741 	subpl	r5, r3, #17039360	; 0x1040000
    2de0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2de4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2de8:	736f5074 	cmnvc	pc, #116	; 0x74
    2dec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2df0:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    2df4:	5f434454 	svcpl	0x00434454
    2df8:	57646552 			; <UNDEFINED> instruction: 0x57646552
    2dfc:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    2e00:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e04:	6f435f43 	svcvs	0x00435f43
    2e08:	6174736e 	cmnvs	r4, lr, ror #6
    2e0c:	6c41746e 	cfstrdvs	mvd7, [r1], {110}	; 0x6e
    2e10:	00616870 	rsbeq	r6, r1, r0, ror r8
    2e14:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e18:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2e1c:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2e20:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2e24:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2e28:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    2e2c:	505f4344 	subspl	r4, pc, r4, asr #6
    2e30:	0058534f 	subseq	r5, r8, pc, asr #6
    2e34:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e38:	534f505f 	movtpl	r5, #61535	; 0xf05f
    2e3c:	544c0059 	strbpl	r0, [ip], #-89	; 0x59
    2e40:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2e44:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2e48:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2e4c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2e50:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    2e54:	5f434454 	svcpl	0x00434454
    2e58:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2e5c:	5367616c 	cmnpl	r7, #108, 2
    2e60:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2e64:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    2e68:	445f4344 	ldrbmi	r4, [pc], #-836	; 2e70 <_Min_Stack_Size+0x2a70>
    2e6c:	65687469 	strbvs	r7, [r8, #-1129]!	; 0x469
    2e70:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    2e74:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e78:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2e7c:	74535455 	ldrbvc	r5, [r3], #-1109	; 0x455
    2e80:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2e84:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e88:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e8c:	614c5f43 	cmpvs	ip, r3, asr #30
    2e90:	41726579 	cmnmi	r2, r9, ror r5
    2e94:	6168706c 	cmnvs	r8, ip, rrx
    2e98:	42464300 	submi	r4, r6, #0, 6
    2e9c:	63005241 	movwvs	r5, #577	; 0x241
    2ea0:	6174756c 	cmnvs	r4, ip, ror #10
    2ea4:	4c006464 	cfstrsmi	mvf6, [r0], {100}	; 0x64
    2ea8:	5f434454 	svcpl	0x00434454
    2eac:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2eb0:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
    2eb4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2eb8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2ebc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ec0:	72475f43 	subvc	r5, r7, #268	; 0x10c
    2ec4:	566e6565 	strbtpl	r6, [lr], -r5, ror #10
    2ec8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2ecc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ed0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2ed4:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2ed8:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2edc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2ee0:	00746942 	rsbseq	r6, r4, r2, asr #18
    2ee4:	70626663 	rsbvc	r6, r2, r3, ror #12
    2ee8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2eec:	47525f43 	ldrbmi	r5, [r2, -r3, asr #30]
    2ef0:	72745342 	rsbsvc	r5, r4, #134217729	; 0x8000001
    2ef4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2ef8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2efc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2f00:	0044435f 	subeq	r4, r4, pc, asr r3
    2f04:	4344544c 	movtmi	r5, #17484	; 0x444c
    2f08:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    2f0c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2f10:	6f6c6f43 	svcvs	0x006c6f43
    2f14:	706c4172 	rsbvc	r4, ip, r2, ror r1
    2f18:	4c006168 	stfmis	f6, [r0], {104}	; 0x68
    2f1c:	52435049 	subpl	r5, r3, #73	; 0x49
    2f20:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2f24:	67657270 			; <UNDEFINED> instruction: 0x67657270
    2f28:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f2c:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2f30:	64415455 	strbvs	r5, [r1], #-1109	; 0x455
    2f34:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2f38:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f3c:	614c5f43 	cmpvs	ip, r3, asr #30
    2f40:	41726579 	cmnmi	r2, r9, ror r5
    2f44:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    2f48:	4c007373 	stcmi	3, cr7, [r0], {115}	; 0x73
    2f4c:	5f434454 	svcpl	0x00434454
    2f50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2f54:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f58:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    2f5c:	6e694c42 	cdpvs	12, 6, cr4, cr9, cr2, {2}
    2f60:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
    2f64:	00726562 	rsbseq	r6, r2, r2, ror #10
    2f68:	52535043 	subspl	r5, r3, #67	; 0x43
    2f6c:	43504200 	cmpmi	r0, #0, 4
    2f70:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2f74:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    2f78:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2f7c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    2f80:	664f0068 	strbvs	r0, [pc], -r8, rrx
    2f84:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    2f88:	664f0058 			; <UNDEFINED> instruction: 0x664f0058
    2f8c:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    2f90:	544c0059 	strbpl	r0, [ip], #-89	; 0x59
    2f94:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    2f98:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
    2f9c:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    2fa0:	64655264 	strbtvs	r5, [r5], #-612	; 0x264
    2fa4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2fa8:	6f680065 	svcvs	0x00680065
    2fac:	6f7a6972 	svcvs	0x007a6972
    2fb0:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2fb4:	6174735f 	cmnvs	r4, pc, asr r3
    2fb8:	4c007472 	cfstrsmi	mvf7, [r0], {114}	; 0x72
    2fbc:	5f434454 	svcpl	0x00434454
    2fc0:	75636341 	strbvc	r6, [r3, #-833]!	; 0x341
    2fc4:	616c756d 	cmnvs	ip, sp, ror #10
    2fc8:	48646574 	stmdami	r4!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2fcc:	4c005042 	stcmi	0, cr5, [r0], {66}	; 0x42
    2fd0:	5f434454 	svcpl	0x00434454
    2fd4:	61746f54 	cmnvs	r4, r4, asr pc
    2fd8:	6965486c 	stmdbvs	r5!, {r2, r3, r5, r6, fp, lr}^
    2fdc:	77006867 	strvc	r6, [r0, -r7, ror #16]
    2fe0:	70707368 	rsbsvc	r7, r0, r8, ror #6
    2fe4:	4c00736f 	stcmi	3, cr7, [r0], {111}	; 0x6f
    2fe8:	5f434454 	svcpl	0x00434454
    2fec:	6f6c6f43 	svcvs	0x006c6f43
    2ff0:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    2ff4:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    2ff8:	43535300 	cmpmi	r3, #0, 6
    2ffc:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    3000:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    3004:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    3008:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    300c:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    3010:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3014:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3018:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    301c:	45445f43 	strbmi	r5, [r4, #-3907]	; 0xf43
    3020:	616c6f50 	cmnvs	ip, r0, asr pc
    3024:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3028:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    302c:	69505f43 	ldmdbvs	r0, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3030:	466c6578 			; <UNDEFINED> instruction: 0x466c6578
    3034:	616d726f 	cmnvs	sp, pc, ror #4
    3038:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    303c:	465f4344 	ldrbmi	r4, [pc], -r4, asr #6
    3040:	0047414c 	subeq	r4, r7, ip, asr #2
    3044:	4344544c 	movtmi	r5, #17484	; 0x444c
    3048:	736f505f 	cmnvc	pc, #95	; 0x5f
    304c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3050:	00666544 	rsbeq	r6, r6, r4, asr #10
    3054:	4344544c 	movtmi	r5, #17484	; 0x444c
    3058:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    305c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3060:	4344544c 	movtmi	r5, #17484	; 0x444c
    3064:	656c425f 	strbvs	r4, [ip, #-607]!	; 0x25f
    3068:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    306c:	63614667 	cmnvs	r1, #108003328	; 0x6700000
    3070:	5f726f74 	svcpl	0x00726f74
    3074:	544c0031 	strbpl	r0, [ip], #-49	; 0x31
    3078:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    307c:	646e656c 	strbtvs	r6, [lr], #-1388	; 0x56c
    3080:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    3084:	6f746361 	svcvs	0x00746361
    3088:	00325f72 	eorseq	r5, r2, r2, ror pc
    308c:	52434344 	subpl	r4, r3, #68, 6	; 0x10000001
    3090:	72657600 	rsbvc	r7, r5, #0, 12
    3094:	61636974 	smcvs	13972	; 0x3694
    3098:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    309c:	4c00706f 	stcmi	0, cr7, [r0], {111}	; 0x6f
    30a0:	5f434454 	svcpl	0x00434454
    30a4:	4350494c 	cmpmi	r0, #76, 18	; 0x130000
    30a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    30ac:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    30b0:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    30b4:	79544247 	ldmdbvc	r4, {r0, r1, r2, r6, r9, lr}^
    30b8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    30bc:	44430066 	strbmi	r0, [r3], #-102	; 0x66
    30c0:	4c005253 	sfmmi	f5, 4, [r0], {83}	; 0x53
    30c4:	5f434454 	svcpl	0x00434454
    30c8:	56646552 			; <UNDEFINED> instruction: 0x56646552
    30cc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    30d0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30d4:	614c5f43 	cmpvs	ip, r3, asr #30
    30d8:	43726579 	cmnmi	r2, #507510784	; 0x1e400000
    30dc:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    30e0:	5f434454 	svcpl	0x00434454
    30e4:	5f424752 	svcpl	0x00424752
    30e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    30ec:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    30f0:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    30f4:	5f434454 	svcpl	0x00434454
    30f8:	6f505356 	svcvs	0x00505356
    30fc:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    3100:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    3104:	5f434454 	svcpl	0x00434454
    3108:	50424643 	subpl	r4, r2, r3, asr #12
    310c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3110:	67636400 	strbvs	r6, [r3, -r0, lsl #8]!
    3114:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    3118:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    311c:	614c5f43 	cmpvs	ip, r3, asr #30
    3120:	50726579 	rsbspl	r6, r2, r9, ror r5
    3124:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    3128:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    312c:	4344544c 	movtmi	r5, #17484	; 0x444c
    3130:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    3134:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3138:	46500067 	ldrbmi	r0, [r0], -r7, rrx
    313c:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    3140:	5f434454 	svcpl	0x00434454
    3144:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3148:	69574247 	ldmdbvs	r7, {r0, r1, r2, r6, r9, lr}^
    314c:	00687464 	rsbeq	r7, r8, r4, ror #8
    3150:	2f636e69 	svccs	0x00636e69
    3154:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3158:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 304c <_Min_Stack_Size+0x2c4c>
    315c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3160:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3164:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3054 <_Min_Stack_Size+0x2c54>
    3168:	61726269 	cmnvs	r2, r9, ror #4
    316c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3170:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3174:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3178:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    317c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3180:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3184:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3188:	2f726576 	svccs	0x00726576
    318c:	2f637273 	svccs	0x00637273
    3190:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3194:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3198:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    319c:	632e6364 	teqvs	lr, #100, 6	; 0x90000001
    31a0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    31a4:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    31a8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    31ac:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    31b0:	4d500066 	ldclmi	0, cr0, [r0, #-408]	; 0xfffffe68
    31b4:	00324d45 	eorseq	r4, r2, r5, asr #26
    31b8:	5f434d46 	svcpl	0x00434d46
    31bc:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    31c0:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
    31c4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    31c8:	454d5000 	strbmi	r5, [sp, #-0]
    31cc:	4600344d 	strmi	r3, [r0], -sp, asr #8
    31d0:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    31d4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    31d8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    31dc:	43445300 	movtmi	r5, #17152	; 0x4300
    31e0:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    31e4:	61425f43 	cmpvs	r2, r3, asr #30
    31e8:	5f356b6e 	svcpl	0x00356b6e
    31ec:	79545f36 	ldmdbvc	r4, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    31f0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    31f4:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    31f8:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    31fc:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    3200:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3204:	5f434d46 	svcpl	0x00434d46
    3208:	4c534143 	ldfmie	f4, [r3], {67}	; 0x43
    320c:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    3210:	65007963 	strvs	r7, [r0, #-2403]	; 0x963
    3214:	61766363 	cmnvs	r6, r3, ror #6
    3218:	4d46006c 	stclmi	0, cr0, [r6, #-432]	; 0xfffffe50
    321c:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    3220:	6552666c 	ldrbvs	r6, [r2, #-1644]	; 0x66c
    3224:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    3228:	6d695468 	cfstrdvs	mvd5, [r9, #-416]!	; 0xfffffe60
    322c:	4d500065 	ldclmi	0, cr0, [r0, #-404]	; 0xfffffe6c
    3230:	00334d45 	eorseq	r4, r3, r5, asr #26
    3234:	5f434d46 	svcpl	0x00434d46
    3238:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    323c:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    3240:	6f506c61 	svcvs	0x00506c61
    3244:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    3248:	46007974 			; <UNDEFINED> instruction: 0x46007974
    324c:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 3120 <_Min_Stack_Size+0x2d20>
    3250:	5265646f 	rsbpl	r6, r5, #1862270976	; 0x6f000000
    3254:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    3258:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0x574
    325c:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    3260:	6f697469 	svcvs	0x00697469
    3264:	4453006e 	ldrbmi	r0, [r3], #-110	; 0x6e
    3268:	00525452 	subseq	r5, r2, r2, asr r4
    326c:	5f434d46 	svcpl	0x00434d46
    3270:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    3274:	70536e6f 	subsvc	r6, r3, pc, ror #28
    3278:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    327c:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3280:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3284:	00746375 	rsbseq	r6, r4, r5, ror r3
    3288:	5f434d46 	svcpl	0x00434d46
    328c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    3290:	756f6e69 	strbvc	r6, [pc, #-3689]!	; 242f <_Min_Stack_Size+0x202f>
    3294:	6f6c4373 	svcvs	0x006c4373
    3298:	46006b63 	strmi	r6, [r0], -r3, ror #22
    329c:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    32a0:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    32a4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    32a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    32ac:	00666544 	rsbeq	r6, r6, r4, asr #10
    32b0:	5f434d46 	svcpl	0x00434d46
    32b4:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    32b8:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
    32bc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    32c0:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
    32c4:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    32c8:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    32cc:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    32d0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    32d4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    32d8:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    32dc:	61425f43 	cmpvs	r2, r3, asr #30
    32e0:	5f316b6e 	svcpl	0x00316b6e
    32e4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    32e8:	00666544 	rsbeq	r6, r6, r4, asr #10
    32ec:	52534453 	subspl	r4, r3, #1392508928	; 0x53000000
    32f0:	54445300 	strbpl	r5, [r4], #-768	; 0x300
    32f4:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    32f8:	4f4e5f43 	svcmi	0x004e5f43
    32fc:	41525352 	cmpmi	r2, r2, asr r3
    3300:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    3304:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3308:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    330c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3310:	5a69485f 	bpl	1a55494 <_Min_Stack_Size+0x1a55094>
    3314:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3318:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    331c:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3320:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3324:	646f4d74 	strbtvs	r4, [pc], #-3444	; 332c <_Min_Stack_Size+0x2f2c>
    3328:	61745365 	cmnvs	r4, r5, ror #6
    332c:	00737574 	rsbseq	r7, r3, r4, ror r5
    3330:	52434345 	subpl	r4, r3, #335544321	; 0x14000001
    3334:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    3338:	4f4e5f43 	svcmi	0x004e5f43
    333c:	41525352 	cmpmi	r2, r2, asr r3
    3340:	7274534d 	rsbsvc	r5, r4, #872415233	; 0x34000001
    3344:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3348:	0074696e 	rsbseq	r6, r4, lr, ror #18
    334c:	5f434d46 	svcpl	0x00434d46
    3350:	41434350 	cmpmi	r3, r0, asr r3
    3354:	65444452 	strbvs	r4, [r4, #-1106]	; 0x452
    3358:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    335c:	43434500 	movtmi	r4, #13568	; 0x3500
    3360:	46003252 			; <UNDEFINED> instruction: 0x46003252
    3364:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3368:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    336c:	65444d41 	strbvs	r4, [r4, #-3393]	; 0xd41
    3370:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3374:	434d4600 	movtmi	r4, #54784	; 0xd600
    3378:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    337c:	43505f44 	cmpmi	r0, #68, 30	; 0x110
    3380:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3384:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3388:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    338c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3390:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3394:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3398:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    339c:	54657469 	strbtpl	r7, [r5], #-1129	; 0x469
    33a0:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    33a4:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    33a8:	00746375 	rsbseq	r6, r4, r5, ror r3
    33ac:	5f434d46 	svcpl	0x00434d46
    33b0:	74697845 	strbtvc	r7, [r9], #-2117	; 0x845
    33b4:	666c6553 			; <UNDEFINED> instruction: 0x666c6553
    33b8:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    33bc:	44687365 	strbtmi	r7, [r8], #-869	; 0x365
    33c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    33c4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    33c8:	74746170 	ldrbtvc	r6, [r4], #-368	; 0x170
    33cc:	434d4600 	movtmi	r4, #54784	; 0xd600
    33d0:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    33d4:	6d434d41 	stclvs	13, cr4, [r3, #-260]	; 0xfffffefc
    33d8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    33dc:	00676966 	rsbeq	r6, r7, r6, ror #18
    33e0:	5f434d46 	svcpl	0x00434d46
    33e4:	654d4453 	strbvs	r4, [sp, #-1107]	; 0x453
    33e8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    33ec:	61746144 	cmnvs	r4, r4, asr #2
    33f0:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    33f4:	4d460068 	stclmi	0, cr0, [r6, #-416]	; 0xfffffe60
    33f8:	43505f43 	cmpmi	r0, #268	; 0x10c
    33fc:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3400:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3404:	434d4600 	movtmi	r4, #54784	; 0xd600
    3408:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0x15f
    340c:	75626972 	strbvc	r6, [r2, #-2418]!	; 0x972
    3410:	70536574 	subsvc	r6, r3, r4, ror r5
    3414:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    3418:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    341c:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3420:	00746375 	rsbseq	r6, r4, r5, ror r3
    3424:	5f434d46 	svcpl	0x00434d46
    3428:	41524453 	cmpmi	r2, r3, asr r4
    342c:	6972574d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, r9, sl, ip, lr}^
    3430:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    3434:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    3438:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    343c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3440:	46006769 	strmi	r6, [r0], -r9, ror #14
    3444:	445f434d 	ldrbmi	r4, [pc], #-845	; 344c <_Min_Stack_Size+0x304c>
    3448:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    344c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3450:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3454:	434d4600 	movtmi	r4, #54784	; 0xd600
    3458:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    345c:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    3460:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3464:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3468:	74007463 	strvc	r7, [r0], #-1123	; 0x463
    346c:	0072706d 	rsbseq	r7, r2, sp, rrx
    3470:	5f434d46 	svcpl	0x00434d46
    3474:	6f747541 	svcvs	0x00747541
    3478:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    347c:	4e687365 	cdpmi	3, 6, cr7, cr8, cr5, {3}
    3480:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3484:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3488:	61425f43 	cmpvs	r2, r3, asr #30
    348c:	5f326b6e 	svcpl	0x00326b6e
    3490:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3494:	00666544 	rsbeq	r6, r6, r4, asr #10
    3498:	5f434d46 	svcpl	0x00434d46
    349c:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
    34a0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    34a4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    34a8:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    34ac:	75425f43 	strbvc	r5, [r2, #-3907]	; 0xf43
    34b0:	41747372 	cmnmi	r4, r2, ror r3
    34b4:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    34b8:	646f4d73 	strbtvs	r4, [pc], #-3443	; 34c0 <_Min_Stack_Size+0x30c0>
    34bc:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    34c0:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    34c4:	69506461 	ldmdbvs	r0, {r0, r5, r6, sl, sp, lr}^
    34c8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    34cc:	0079616c 	rsbseq	r6, r9, ip, ror #2
    34d0:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    34d4:	53007263 	movwpl	r7, #611	; 0x263
    34d8:	524d4344 	subpl	r4, sp, #68, 6	; 0x10000001
    34dc:	434d4600 	movtmi	r4, #54784	; 0xd600
    34e0:	4443525f 	strbmi	r5, [r3], #-607	; 0x25f
    34e4:	616c6544 	cmnvs	ip, r4, asr #10
    34e8:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    34ec:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    34f0:	66655274 			; <UNDEFINED> instruction: 0x66655274
    34f4:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    34f8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    34fc:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3500:	61575f43 	cmpvs	r7, r3, asr #30
    3504:	69537469 	ldmdbvs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3508:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    350c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3510:	46006576 			; <UNDEFINED> instruction: 0x46006576
    3514:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3518:	70757465 	rsbsvc	r7, r5, r5, ror #8
    351c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3520:	434d4600 	movtmi	r4, #54784	; 0xd600
    3524:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    3528:	6f747541 	svcvs	0x00747541
    352c:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    3530:	5f687365 	svcpl	0x00687365
    3534:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3538:	46007265 	strmi	r7, [r0], -r5, ror #4
    353c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3540:	53444e41 	movtpl	r4, #20033	; 0x4e41
    3544:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3548:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    354c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3550:	41545f43 	cmpmi	r4, r3, asr #30
    3554:	74655352 	strbtvc	r5, [r5], #-850	; 0x352
    3558:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    355c:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3560:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    3564:	7943776f 	stmdbvc	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    3568:	44656c63 	strbtmi	r6, [r5], #-3171	; 0xc63
    356c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3570:	434d4600 	movtmi	r4, #54784	; 0xd600
    3574:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3578:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    357c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3580:	5f434d46 	svcpl	0x00434d46
    3584:	41524453 	cmpmi	r2, r3, asr r4
    3588:	4965444d 	stmdbmi	r5!, {r0, r2, r3, r6, sl, lr}^
    358c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3590:	5f434d46 	svcpl	0x00434d46
    3594:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    3598:	65704f65 	ldrbvs	r4, [r0, #-3941]!	; 0xf65
    359c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    35a0:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    35a4:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    35a8:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    35ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
    35b0:	5f434d46 	svcpl	0x00434d46
    35b4:	54737542 	ldrbtpl	r7, [r3], #-1346	; 0x542
    35b8:	416e7275 	smcmi	59173	; 0xe725
    35bc:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    35c0:	72754464 	rsbsvc	r4, r5, #100, 8	; 0x64000000
    35c4:	6f697461 	svcvs	0x00697461
    35c8:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
    35cc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    35d0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    35d4:	61426c61 	cmpvs	r2, r1, ror #24
    35d8:	754e6b6e 	strbvc	r6, [lr, #-2926]	; 0xb6e
    35dc:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    35e0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    35e4:	6d656d70 	stclvs	13, cr6, [r5, #-448]!	; 0xfffffe40
    35e8:	434d4600 	movtmi	r4, #54784	; 0xd600
    35ec:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    35f0:	67695374 			; <UNDEFINED> instruction: 0x67695374
    35f4:	006c616e 	rsbeq	r6, ip, lr, ror #2
    35f8:	5f434d46 	svcpl	0x00434d46
    35fc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    3600:	48737365 	ldmdami	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    3604:	54646c6f 	strbtpl	r6, [r4], #-3183	; 0xc6f
    3608:	00656d69 	rsbeq	r6, r5, r9, ror #26
    360c:	5f434d46 	svcpl	0x00434d46
    3610:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3614:	50007265 	andpl	r7, r0, r5, ror #4
    3618:	00325243 	eorseq	r5, r2, r3, asr #4
    361c:	33524350 	cmpcc	r2, #80, 6	; 0x40000001
    3620:	52435000 	subpl	r5, r3, #0
    3624:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    3628:	43505f43 	cmpmi	r0, #268	; 0x10c
    362c:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3630:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3634:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3638:	00666544 	rsbeq	r6, r6, r4, asr #10
    363c:	5f434d46 	svcpl	0x00434d46
    3640:	65445052 	strbvs	r5, [r4, #-82]	; 0x52
    3644:	0079616c 	rsbseq	r6, r9, ip, ror #2
    3648:	5f434d46 	svcpl	0x00434d46
    364c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3650:	61745354 	cmnvs	r4, r4, asr r3
    3654:	00737574 	rsbseq	r7, r3, r4, ror r5
    3658:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    365c:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
    3660:	00327270 	eorseq	r7, r2, r0, ror r2
    3664:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    3668:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    366c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3670:	434d4152 	movtmi	r4, #53586	; 0xd152
    3674:	616d6d6f 	cmnvs	sp, pc, ror #26
    3678:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0x46e
    367c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3680:	54415000 	strbpl	r5, [r1], #-0
    3684:	50003254 	andpl	r3, r0, r4, asr r2
    3688:	33545441 	cmpcc	r4, #1090519040	; 0x41000000
    368c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3690:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 351c <_Min_Stack_Size+0x311c>
    3694:	426e6d75 	rsbmi	r6, lr, #7488	; 0x1d40
    3698:	4e737469 	cdpmi	4, 7, cr7, cr3, cr9, {3}
    369c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    36a0:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    36a4:	63415f43 	movtvs	r5, #8003	; 0x1f43
    36a8:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    36ac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    36b0:	434d4600 	movtmi	r4, #54784	; 0xd600
    36b4:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    36b8:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    36bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    36c0:	434d4600 	movtmi	r4, #54784	; 0xd600
    36c4:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    36c8:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    36cc:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    36d0:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    36d4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    36d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    36dc:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    36e0:	61425f43 	cmpvs	r2, r3, asr #30
    36e4:	5f336b6e 	svcpl	0x00336b6e
    36e8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    36ec:	00666544 	rsbeq	r6, r6, r4, asr #10
    36f0:	5f434d46 	svcpl	0x00434d46
    36f4:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    36f8:	72754265 	rsbsvc	r4, r5, #1342177286	; 0x50000006
    36fc:	46007473 			; <UNDEFINED> instruction: 0x46007473
    3700:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3704:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    3708:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    370c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3710:	46006665 	strmi	r6, [r0], -r5, ror #12
    3714:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3718:	316b6e61 	cmncc	fp, r1, ror #28
    371c:	79545f45 	ldmdbvc	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    3720:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3724:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3728:	43505f43 	cmpmi	r0, #268	; 0x10c
    372c:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3730:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3734:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    3738:	46007469 	strmi	r7, [r0], -r9, ror #8
    373c:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3740:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    3744:	5f434d46 	svcpl	0x00434d46
    3748:	70617257 	rsbvc	r7, r1, r7, asr r2
    374c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3750:	434d4600 	movtmi	r4, #54784	; 0xd600
    3754:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3758:	545f346b 	ldrbpl	r3, [pc], #-1131	; 3760 <_Min_Stack_Size+0x3360>
    375c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3760:	46006665 	strmi	r6, [r0], -r5, ror #12
    3764:	485f434d 	ldmdami	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3768:	53646c6f 	cmnpl	r4, #28416	; 0x6f00
    376c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3770:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3774:	434d4600 	movtmi	r4, #54784	; 0xd600
    3778:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    377c:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3780:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3784:	00746375 	rsbseq	r6, r4, r5, ror r3
    3788:	5f434d46 	svcpl	0x00434d46
    378c:	41434350 	cmpmi	r3, r0, asr r3
    3790:	6d434452 	cfstrdvs	mvd4, [r3, #-328]	; 0xfffffeb8
    3794:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    3798:	32727370 	rsbscc	r7, r2, #112, 6	; 0xc0000001
    379c:	434d4600 	movtmi	r4, #54784	; 0xd600
    37a0:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 362c <_Min_Stack_Size+0x322c>
    37a4:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    37a8:	67726154 			; <UNDEFINED> instruction: 0x67726154
    37ac:	46007465 	strmi	r7, [r0], -r5, ror #8
    37b0:	475f434d 	ldrbmi	r4, [pc, -sp, asr #6]
    37b4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    37b8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    37bc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    37c0:	434d4600 	movtmi	r4, #54784	; 0xd600
    37c4:	6464415f 	strbtvs	r4, [r4], #-351	; 0x15f
    37c8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    37cc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    37d0:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    37d4:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    37d8:	6f525f43 	svcvs	0x00525f43
    37dc:	74694277 	strbtvc	r4, [r9], #-631	; 0x277
    37e0:	6d754e73 	ldclvs	14, cr4, [r5, #-460]!	; 0xfffffe34
    37e4:	00726562 	rsbseq	r6, r2, r2, ror #10
    37e8:	54544150 	ldrbpl	r4, [r4], #-336	; 0x150
    37ec:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    37f0:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xf43
    37f4:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    37f8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    37fc:	434d4600 	movtmi	r4, #54784	; 0xd600
    3800:	6165525f 	cmnvs	r5, pc, asr r2
    3804:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    3808:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    380c:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    3810:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3814:	42007463 	andmi	r7, r0, #1660944384	; 0x63000000
    3818:	00525457 	subseq	r5, r2, r7, asr r4
    381c:	5f434d46 	svcpl	0x00434d46
    3820:	61656c43 	cmnvs	r5, r3, asr #24
    3824:	50544972 	subspl	r4, r4, r2, ror r9
    3828:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    382c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3830:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3834:	414e5f43 	cmpmi	lr, r3, asr #30
    3838:	6544444e 	strbvs	r4, [r4, #-1102]	; 0x44e
    383c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3840:	434d4600 	movtmi	r4, #54784	; 0xd600
    3844:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3848:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
    384c:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3850:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3854:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3858:	45444e41 	strbmi	r4, [r4, #-3649]	; 0xe41
    385c:	6d434343 	stclvs	3, cr4, [r3, #-268]	; 0xfffffef4
    3860:	4d460064 	stclmi	0, cr0, [r6, #-400]	; 0xfffffe70
    3864:	61445f43 	cmpvs	r4, r3, asr #30
    3868:	614c6174 	hvcvs	50708	; 0xc614
    386c:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    3870:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    3874:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3878:	434d4152 	movtmi	r4, #53586	; 0xd152
    387c:	616d6d6f 	cmnvs	sp, pc, ror #26
    3880:	7954646e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    3884:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3888:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    388c:	6f4c5f43 	svcvs	0x004c5f43
    3890:	6f546461 	svcvs	0x00546461
    3894:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3898:	65446576 	strbvs	r6, [r4, #-1398]	; 0x576
    389c:	0079616c 	rsbseq	r6, r9, ip, ror #2
    38a0:	5f434d46 	svcpl	0x00434d46
    38a4:	6c434453 	cfstrdvs	mvd4, [r3], {83}	; 0x53
    38a8:	506b636f 	rsbpl	r6, fp, pc, ror #6
    38ac:	6f697265 	svcvs	0x00697265
    38b0:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    38b4:	00727370 	rsbseq	r7, r2, r0, ror r3
    38b8:	5f434d46 	svcpl	0x00434d46
    38bc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    38c0:	46004343 	strmi	r4, [r0], -r3, asr #6
    38c4:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    38c8:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    38cc:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    38d0:	434d4600 	movtmi	r4, #54784	; 0xd600
    38d4:	4343455f 	movtmi	r4, #13663	; 0x355f
    38d8:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    38dc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    38e0:	434d4600 	movtmi	r4, #54784	; 0xd600
    38e4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    38e8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    38ec:	4d460067 	stclmi	0, cr0, [r6, #-412]	; 0xfffffe64
    38f0:	43505f43 	cmpmi	r0, #268	; 0x10c
    38f4:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    38f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    38fc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3900:	46007463 	strmi	r7, [r0], -r3, ror #8
    3904:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3908:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    390c:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3910:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    3914:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3918:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    391c:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3920:	43455f43 	movtmi	r5, #24387	; 0x5f43
    3924:	6e690043 	cdpvs	0, 6, cr0, cr9, cr3, {2}
    3928:	4f432f63 	svcmi	0x00432f63
    392c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3930:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3934:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3938:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    393c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3940:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3944:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3948:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    394c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3950:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3954:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3958:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3960 <_Min_Stack_Size+0x3560>
    395c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3960:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3964:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3968:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    396c:	5f787834 	svcpl	0x00787834
    3970:	2e636d66 	cdpcs	13, 6, cr6, cr3, cr6, {3}
    3974:	4d460063 	stclmi	0, cr0, [r6, #-396]	; 0xfffffe74
    3978:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xf43
    397c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3980:	61746144 	cmnvs	r4, r4, asr #2
    3984:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    3988:	4d460068 	stclmi	0, cr0, [r6, #-416]	; 0xfffffe60
    398c:	6f435f43 	svcvs	0x00435f43
    3990:	00746e75 	rsbseq	r6, r4, r5, ror lr
    3994:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    3998:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    399c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    39a0:	534d4152 	movtpl	r4, #53586	; 0xd152
    39a4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    39a8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    39ac:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    39b0:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    39b4:	50657469 	rsbpl	r7, r5, r9, ror #8
    39b8:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xf72
    39bc:	6f697463 	svcvs	0x00697463
    39c0:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
    39c4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    39c8:	434d4600 	movtmi	r4, #54784	; 0xd600
    39cc:	7973415f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, lr}^
    39d0:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
    39d4:	756f6e6f 	strbvc	r6, [pc, #-3695]!	; 2b6d <_Min_Stack_Size+0x276d>
    39d8:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    39dc:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    39e0:	6f435f43 	svcvs	0x00435f43
    39e4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    39e8:	646f4d64 	strbtvs	r4, [pc], #-3428	; 39f0 <_Min_Stack_Size+0x35f0>
    39ec:	74690065 	strbtvc	r0, [r9], #-101	; 0x65
    39f0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    39f4:	4600656c 	strmi	r6, [r0], -ip, ror #10
    39f8:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    39fc:	6170534f 	cmnvs	r0, pc, asr #6
    3a00:	69546563 	ldmdbvs	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    3a04:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    3a08:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3a0c:	46007463 	strmi	r7, [r0], -r3, ror #8
    3a10:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3a14:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3a18:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3a1c:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    3a20:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3a24:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a28:	414c465f 	cmpmi	ip, pc, asr r6
    3a2c:	4d460047 	stclmi	0, cr0, [r6, #-284]	; 0xfffffee4
    3a30:	414e5f43 	cmpmi	lr, r3, asr #30
    3a34:	6d43444e 	cfstrdvs	mvd4, [r3, #-312]	; 0xfffffec8
    3a38:	44530064 	ldrbmi	r0, [r3], #-100	; 0x64
    3a3c:	5f4d4152 	svcpl	0x004d4152
    3a40:	6b6e6142 	blvs	1b9bf50 <_Min_Stack_Size+0x1b9bb50>
    3a44:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a48:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3a4c:	61656674 	smcvs	22116	; 0x5664
    3a50:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    3a54:	4f495000 	svcmi	0x00495000
    3a58:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    3a5c:	61445f43 	cmpvs	r4, r3, asr #30
    3a60:	64416174 	strbvs	r6, [r1], #-372	; 0x174
    3a64:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3a68:	78754d73 	ldmdavc	r5!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
    3a6c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a70:	4b4c435f 	blmi	13147f4 <_Min_Stack_Size+0x13143f4>
    3a74:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    3a78:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    3a7c:	43544200 	cmpmi	r4, #0, 4
    3a80:	4e520052 	mrcmi	0, 2, r0, cr2, cr2, {2}
    3a84:	54495f47 	strbpl	r5, [r9], #-3911	; 0xf47
    3a88:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3a8c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3a90:	435f474e 	cmpmi	pc, #20447232	; 0x1380000
    3a94:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3a98:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    3a9c:	4e520054 	mrcmi	0, 2, r0, cr2, cr4, {2}
    3aa0:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    3aa4:	6e615274 	mcrvs	2, 3, r5, cr1, cr4, {3}
    3aa8:	4e6d6f64 	cdpmi	15, 6, cr6, cr13, cr4, {3}
    3aac:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3ab0:	4e520072 	mrcmi	0, 2, r0, cr2, cr2, {3}
    3ab4:	65445f47 	strbvs	r5, [r4, #-3911]	; 0xf47
    3ab8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3abc:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3ac0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3ac4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3ac8:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3acc:	414c465f 	cmpmi	ip, pc, asr r6
    3ad0:	6e690047 	cdpvs	0, 6, cr0, cr9, cr7, {2}
    3ad4:	4f432f63 	svcmi	0x00432f63
    3ad8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3adc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3ae0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3ae4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3ae8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3aec:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3af0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3af4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3af8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3afc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3b00:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3b04:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3b0c <_Min_Stack_Size+0x370c>
    3b08:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3b0c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3b10:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3b14:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3b18:	5f787834 	svcpl	0x00787834
    3b1c:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    3b20:	4e520063 	cdpmi	0, 5, cr0, cr2, cr3, {3}
    3b24:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    3b28:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3b2c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3b30:	5f474e52 	svcpl	0x00474e52
    3b34:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3b38:	61745354 	cmnvs	r4, r4, asr r3
    3b3c:	00737574 	rsbseq	r7, r3, r4, ror r5
    3b40:	5f474e52 	svcpl	0x00474e52
    3b44:	61656c43 	cmnvs	r5, r3, asr #24
    3b48:	50544972 	subspl	r4, r4, r2, ror r9
    3b4c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3b50:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3b54:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
    3b58:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    3b5c:	616c4674 	smcvs	50276	; 0xc464
    3b60:	61745367 	cmnvs	r4, r7, ror #6
    3b64:	00737574 	rsbseq	r7, r3, r4, ror r5
    3b68:	5f4d5453 	svcpl	0x004d5453
    3b6c:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3b70:	4942505f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    3b74:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3b78:	5f435452 	svcpl	0x00435452
    3b7c:	50554b57 	subspl	r4, r5, r7, asr fp
    3b80:	5152495f 	cmppl	r2, pc, asr r9
    3b84:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    3b88:	5f324954 	svcpl	0x00324954
    3b8c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b90:	414d4400 	cmpmi	sp, r0, lsl #8
    3b94:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    3b98:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3b9c:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    3ba0:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3ba4:	5f384d49 	svcpl	0x00384d49
    3ba8:	545f5055 	ldrbpl	r5, [pc], #-85	; 3bb0 <_Min_Stack_Size+0x37b0>
    3bac:	33314d49 	teqcc	r1, #4672	; 0x1240
    3bb0:	5152495f 	cmppl	r2, pc, asr r9
    3bb4:	4573006e 	ldrbmi	r0, [r3, #-110]!	; 0x6e
    3bb8:	6f4c5f45 	svcvs	0x004c5f45
    3bbc:	76654c77 			; <UNDEFINED> instruction: 0x76654c77
    3bc0:	495f6c65 	ldmdbmi	pc, {r0, r2, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3bc4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3bc8:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    3bcc:	455f4e4f 	ldrbmi	r4, [pc, #-3663]	; 2d85 <_Min_Stack_Size+0x2985>
    3bd0:	5f495458 	svcpl	0x00495458
    3bd4:	454e494c 	strbmi	r4, [lr, #-2380]	; 0x94c
    3bd8:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    3bdc:	5f4e4f54 	svcpl	0x004e4f54
    3be0:	5f4e4950 	svcpl	0x004e4950
    3be4:	52554f53 	subspl	r4, r5, #332	; 0x14c
    3be8:	44004543 	strmi	r4, [r0], #-1347	; 0x543
    3bec:	5f32414d 	svcpl	0x0032414d
    3bf0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3bf4:	5f316d61 	svcpl	0x00316d61
    3bf8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3bfc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3c00:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    3c04:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
    3c08:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3c0c:	5152495f 	cmppl	r2, pc, asr r9
    3c10:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    3c14:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    3c18:	4b4c435f 	blmi	131499c <_Min_Stack_Size+0x131459c>
    3c1c:	4d434400 	cfstrdmi	mvd4, [r3, #-0]
    3c20:	52495f49 	subpl	r5, r9, #292	; 0x124
    3c24:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3c28:	5f324d49 	svcpl	0x00324d49
    3c2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c30:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3c34:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3c38:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    3c3c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3c40:	00657275 	rsbeq	r7, r5, r5, ror r2
    3c44:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    3c48:	3058525f 	subscc	r5, r8, pc, asr r2
    3c4c:	5152495f 	cmppl	r2, pc, asr r9
    3c50:	5355006e 	cmppl	r5, #110	; 0x6e
    3c54:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
    3c58:	5152495f 	cmppl	r2, pc, asr r9
    3c5c:	5053006e 	subspl	r0, r3, lr, rrx
    3c60:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3c64:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c68:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    3c6c:	4b52425f 	blmi	14945f0 <_Min_Stack_Size+0x14941f0>
    3c70:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    3c74:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    3c78:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c7c:	5f4d5453 	svcpl	0x004d5453
    3c80:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3c84:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    3c88:	44006e4f 	strmi	r6, [r0], #-3663	; 0xe4f
    3c8c:	5f32414d 	svcpl	0x0032414d
    3c90:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3c94:	5f356d61 	svcpl	0x00356d61
    3c98:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c9c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3ca0:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
    3ca4:	4f435f47 	svcmi	0x00435f47
    3ca8:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3cac:	5f31314d 	svcpl	0x0031314d
    3cb0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3cb4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    3cb8:	4f505f4f 	svcmi	0x00505f4f
    3cbc:	53005452 	movwpl	r5, #1106	; 0x452
    3cc0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3cc4:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    3cc8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ccc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3cd0:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    3cd4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3cd8:	4f495047 	svcmi	0x00495047
    3cdc:	4b4c435f 	blmi	1314a60 <_Min_Stack_Size+0x1314660>
    3ce0:	74754200 	ldrbtvc	r4, [r5], #-512	; 0x200
    3ce4:	5f6e6f74 	svcpl	0x006e6f74
    3ce8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3cec:	00666544 	rsbeq	r6, r6, r4, asr #10
    3cf0:	31414d44 	cmpcc	r1, r4, asr #26
    3cf4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3cf8:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
    3cfc:	5152495f 	cmppl	r2, pc, asr r9
    3d00:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3d04:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    3d08:	61657274 	smcvs	22308	; 0x5724
    3d0c:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3d10:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d14:	36495053 			; <UNDEFINED> instruction: 0x36495053
    3d18:	5152495f 	cmppl	r2, pc, asr r9
    3d1c:	3249006e 	subcc	r0, r9, #110	; 0x6e
    3d20:	455f3143 	ldrbmi	r3, [pc, #-323]	; 3be5 <_Min_Stack_Size+0x37e5>
    3d24:	52495f52 	subpl	r5, r9, #328	; 0x148
    3d28:	43006e51 	movwmi	r6, #3665	; 0xe51
    3d2c:	5f324e41 	svcpl	0x00324e41
    3d30:	5f454353 	svcpl	0x00454353
    3d34:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d38:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    3d3c:	5f4e4f54 	svcpl	0x004e4f54
    3d40:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    3d44:	554f535f 	strbpl	r5, [pc, #-863]	; 39ed <_Min_Stack_Size+0x35ed>
    3d48:	00454352 	subeq	r4, r5, r2, asr r3
    3d4c:	354d4954 	strbcc	r4, [sp, #-2388]	; 0x954
    3d50:	5152495f 	cmppl	r2, pc, asr r9
    3d54:	7355006e 	cmpvc	r5, #110	; 0x6e
    3d58:	46656761 	strbtmi	r6, [r5], -r1, ror #14
    3d5c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3d60:	5152495f 	cmppl	r2, pc, asr r9
    3d64:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    3d68:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3d6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d70:	314e4143 	cmpcc	lr, r3, asr #2
    3d74:	3058525f 	subscc	r5, r8, pc, asr r2
    3d78:	5152495f 	cmppl	r2, pc, asr r9
    3d7c:	5053006e 	subspl	r0, r3, lr, rrx
    3d80:	495f3549 	ldmdbmi	pc, {r0, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    3d84:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d88:	31494153 	cmpcc	r9, r3, asr r1
    3d8c:	5152495f 	cmppl	r2, pc, asr r9
    3d90:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3d94:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3d98:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d9c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3da0:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3da4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3da8:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    3dac:	52495f38 	subpl	r5, r9, #56, 30	; 0xe0
    3db0:	53006e51 	movwpl	r6, #3665	; 0xe51
    3db4:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3068 <_Min_Stack_Size+0x2c68>
    3db8:	5f4c4156 	svcpl	0x004c4156
    3dbc:	4f44454c 	svcmi	0x0044454c
    3dc0:	49006666 	stmdbmi	r0, {r1, r2, r5, r6, r9, sl, sp, lr}
    3dc4:	5f314332 	svcpl	0x00314332
    3dc8:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    3dcc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3dd0:	66754270 			; <UNDEFINED> instruction: 0x66754270
    3dd4:	00726566 	rsbseq	r6, r2, r6, ror #10
    3dd8:	314d4954 	cmpcc	sp, r4, asr r9
    3ddc:	5f43435f 	svcpl	0x0043435f
    3de0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3de4:	53414800 	movtpl	r4, #6144	; 0x1800
    3de8:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
    3dec:	52495f47 	subpl	r5, r9, #284	; 0x11c
    3df0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    3df4:	31495458 	cmpcc	r9, r8, asr r4
    3df8:	5152495f 	cmppl	r2, pc, asr r9
    3dfc:	4143006e 	cmpmi	r3, lr, rrx
    3e00:	545f314e 	ldrbpl	r3, [pc], #-334	; 3e08 <_Min_Stack_Size+0x3a08>
    3e04:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    3e08:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    3e0c:	5f31414d 	svcpl	0x0031414d
    3e10:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3e14:	5f356d61 	svcpl	0x00356d61
    3e18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e1c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3e20:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
    3e24:	4f435f47 	svcmi	0x00435f47
    3e28:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e2c:	5f34314d 	svcpl	0x0034314d
    3e30:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e34:	414d4400 	cmpmi	sp, r0, lsl #8
    3e38:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    3e3c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3e40:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    3e44:	4f006e51 	svcmi	0x00006e51
    3e48:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
    3e4c:	52495f53 	subpl	r5, r9, #332	; 0x14c
    3e50:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
    3e54:	614d6e6f 	cmpvs	sp, pc, ror #28
    3e58:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
    3e5c:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    3e60:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    3e64:	57006e51 	smlsdpl	r0, r1, lr, r6
    3e68:	5f474457 	svcpl	0x00474457
    3e6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e70:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    3e74:	5f53485f 	svcpl	0x0053485f
    3e78:	50554b57 	subspl	r4, r5, r7, asr fp
    3e7c:	5152495f 	cmppl	r2, pc, asr r9
    3e80:	654d006e 	strbvs	r0, [sp, #-110]	; 0x6e
    3e84:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3e88:	616e614d 	cmnvs	lr, sp, asr #2
    3e8c:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0x567
    3e90:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3e94:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e98:	504d4154 	subpl	r4, sp, r4, asr r1
    3e9c:	4154535f 	cmpmi	r4, pc, asr r3
    3ea0:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
    3ea4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ea8:	314e4143 	cmpcc	lr, r3, asr #2
    3eac:	4543535f 	strbmi	r5, [r3, #-863]	; 0x35f
    3eb0:	5152495f 	cmppl	r2, pc, asr r9
    3eb4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3eb8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    3ebc:	61657274 	smcvs	22308	; 0x5724
    3ec0:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    3ec4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ec8:	5f4d5453 	svcpl	0x004d5453
    3ecc:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3ed0:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    3ed4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3ed8:	43324900 	teqmi	r2, #0, 18
    3edc:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
    3ee0:	5152495f 	cmppl	r2, pc, asr r9
    3ee4:	7542006e 	strbvc	r0, [r2, #-110]	; 0x6e
    3ee8:	75614673 	strbvc	r4, [r1, #-1651]!	; 0x673
    3eec:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3ef0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ef4:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    3ef8:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3efc:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3f00:	5f314d49 	svcpl	0x00314d49
    3f04:	5f4b5242 	svcpl	0x004b5242
    3f08:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
    3f0c:	5152495f 	cmppl	r2, pc, asr r9
    3f10:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3f14:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    3f18:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f1c:	5f485445 	svcpl	0x00485445
    3f20:	50554b57 	subspl	r4, r5, r7, asr fp
    3f24:	5152495f 	cmppl	r2, pc, asr r9
    3f28:	544f006e 	strbpl	r0, [pc], #-110	; 3f30 <_Min_Stack_Size+0x3b30>
    3f2c:	53485f47 	movtpl	r5, #36679	; 0x8f47
    3f30:	5152495f 	cmppl	r2, pc, asr r9
    3f34:	5053006e 	subspl	r0, r3, lr, rrx
    3f38:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3f3c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f40:	61435653 	cmpvs	r3, r3, asr r6
    3f44:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3f48:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f4c:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    3f50:	4d5f4e4f 	ldclmi	14, cr4, [pc, #-316]	; 3e1c <_Min_Stack_Size+0x3a1c>
    3f54:	5f45444f 	svcpl	0x0045444f
    3f58:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3f5c:	45457300 	strbmi	r7, [r5, #-768]	; 0x300
    3f60:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
    3f64:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    3f68:	4d445f6c 	stclmi	15, cr5, [r4, #-432]	; 0xfffffe50
    3f6c:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    3f70:	00676966 	rsbeq	r6, r7, r6, ror #18
    3f74:	5f555046 	svcpl	0x00555046
    3f78:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3f7c:	52415500 	subpl	r5, r1, #0, 10
    3f80:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3f84:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f88:	5f47544f 	svcpl	0x0047544f
    3f8c:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
    3f90:	5f50554b 	svcpl	0x0050554b
    3f94:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3f98:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    3f9c:	5f4e4f54 	svcpl	0x004e4f54
    3fa0:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    3fa4:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    3fa8:	5845004f 	stmdapl	r5, {r0, r1, r2, r3, r6}^
    3fac:	5f344954 	svcpl	0x00344954
    3fb0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3fb4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3fb8:	41445f36 	cmpmi	r4, r6, lsr pc
    3fbc:	52495f43 	subpl	r5, r9, #268	; 0x10c
    3fc0:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    3fc4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    3fc8:	5152495f 	cmppl	r2, pc, asr r9
    3fcc:	3249006e 	subcc	r0, r9, #110	; 0x6e
    3fd0:	455f3243 	ldrbmi	r3, [pc, #-579]	; 3d95 <_Min_Stack_Size+0x3995>
    3fd4:	52495f56 	subpl	r5, r9, #344	; 0x158
    3fd8:	53006e51 	movwpl	r6, #3665	; 0xe51
    3fdc:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3290 <_Min_Stack_Size+0x2e90>
    3fe0:	5f4c4156 	svcpl	0x004c4156
    3fe4:	5444454c 	strbpl	r4, [r4], #-1356	; 0x54c
    3fe8:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    3fec:	55420065 	strbpl	r0, [r2, #-101]	; 0x65
    3ff0:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    3ff4:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    3ff8:	414d4400 	cmpmi	sp, r0, lsl #8
    3ffc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    4000:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    4004:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    4008:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
    400c:	00334445 	eorseq	r4, r3, r5, asr #8
    4010:	3444454c 	strbcc	r4, [r4], #-1356	; 0x54c
    4014:	414d4400 	cmpmi	sp, r0, lsl #8
    4018:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    401c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    4020:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    4024:	43006e51 	movwmi	r6, #3665	; 0xe51
    4028:	5f324e41 	svcpl	0x00324e41
    402c:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
    4030:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4034:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    4038:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    403c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4040:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    4044:	42006572 	andmi	r6, r0, #478150656	; 0x1c800000
    4048:	6f747475 	svcvs	0x00747475
    404c:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    4050:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    4054:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
    4058:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    405c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    4060:	61657274 	smcvs	22308	; 0x5724
    4064:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    4068:	006e5152 	rsbeq	r5, lr, r2, asr r1
    406c:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
    4070:	6f4d6e6f 	svcvs	0x004d6e6f
    4074:	545f6564 	ldrbpl	r6, [pc], #-1380	; 407c <_Min_Stack_Size+0x3c7c>
    4078:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    407c:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    4080:	415f4354 	cmpmi	pc, r4, asr r3	; <UNPREDICTABLE>
    4084:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    4088:	5152495f 	cmppl	r2, pc, asr r9
    408c:	5053006e 	subspl	r0, r3, lr, rrx
    4090:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    4094:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4098:	5f434d46 	svcpl	0x00434d46
    409c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    40a0:	43324900 	teqmi	r2, #0, 18
    40a4:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
    40a8:	5152495f 	cmppl	r2, pc, asr r9
    40ac:	5243006e 	subpl	r0, r3, #110	; 0x6e
    40b0:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    40b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    40b8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    40bc:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    40c0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    40c4:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    40c8:	5f334d49 	svcpl	0x00334d49
    40cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    40d0:	41535500 	cmpmi	r3, r0, lsl #10
    40d4:	5f315452 	svcpl	0x00315452
    40d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    40dc:	52415500 	subpl	r5, r1, #0, 10
    40e0:	495f3754 	ldmdbmi	pc, {r2, r4, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    40e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    40e8:	2f636e69 	svccs	0x00636e69
    40ec:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    40f0:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    40f4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    40f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    40fc:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4100:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    4104:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4108:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    410c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4110:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    4114:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4118:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    411c:	2e797265 	cdpcs	2, 7, cr7, cr9, cr5, {3}
    4120:	50470063 	subpl	r0, r7, r3, rrx
    4124:	505f4f49 	subspl	r4, pc, r9, asr #30
    4128:	47004e49 	strmi	r4, [r0, -r9, asr #28]
    412c:	5f4f4950 	svcpl	0x004f4950
    4130:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4134:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4138:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    413c:	41430065 	cmpmi	r3, r5, rrx
    4140:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
    4144:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    4148:	006e5152 	rsbeq	r5, lr, r2, asr r1
    414c:	5f434441 	svcpl	0x00434441
    4150:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4154:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    4158:	5f4e4f54 	svcpl	0x004e4f54
    415c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    4160:	44565000 	ldrbmi	r5, [r6], #-0
    4164:	5152495f 	cmppl	r2, pc, asr r9
    4168:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    416c:	5f304954 	svcpl	0x00304954
    4170:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4174:	414d4400 	cmpmi	sp, r0, lsl #8
    4178:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    417c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    4180:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    4184:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4188:	5f32414d 	svcpl	0x0032414d
    418c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    4190:	5f366d61 	svcpl	0x00366d61
    4194:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4198:	62654400 	rsbvs	r4, r5, #0, 8
    419c:	6f4d6775 	svcvs	0x004d6775
    41a0:	6f74696e 	svcvs	0x0074696e
    41a4:	52495f72 	subpl	r5, r9, #456	; 0x1c8
    41a8:	42006e51 	andmi	r6, r0, #1296	; 0x510
    41ac:	4f545455 	svcmi	0x00545455
    41b0:	52495f4e 	subpl	r5, r9, #312	; 0x138
    41b4:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    41b8:	5f334332 	svcpl	0x00334332
    41bc:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    41c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    41c4:	5f485445 	svcpl	0x00485445
    41c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    41cc:	64654c00 	strbtvs	r4, [r5], #-3072	; 0xc00
    41d0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    41d4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    41d8:	43435200 	movtmi	r5, #12800	; 0x3200
    41dc:	5152495f 	cmppl	r2, pc, asr r9
    41e0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    41e4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    41e8:	61657274 	smcvs	22308	; 0x5724
    41ec:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    41f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    41f4:	314d4954 	cmpcc	sp, r4, asr r9
    41f8:	5f50555f 	svcpl	0x0050555f
    41fc:	314d4954 	cmpcc	sp, r4, asr r9
    4200:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    4204:	73006e51 	movwvc	r6, #3665	; 0xe51
    4208:	4c5f4545 	cfldr64mi	mvdx4, [pc], {69}	; 0x45
    420c:	654c776f 	strbvs	r7, [ip, #-1903]	; 0x76f
    4210:	5f6c6576 	svcpl	0x006c6576
    4214:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    4218:	53007469 	movwpl	r7, #1129	; 0x469
    421c:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 34d0 <_Min_Stack_Size+0x30d0>
    4220:	5f4c4156 	svcpl	0x004c4156
    4224:	65474250 	strbvs	r4, [r7, #-592]	; 0x250
    4228:	61745374 	cmnvs	r4, r4, ror r3
    422c:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4230:	5f434454 	svcpl	0x00434454
    4234:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    4238:	006e5152 	rsbeq	r5, lr, r2, asr r1
    423c:	5f47544f 	svcpl	0x0047544f
    4240:	455f5348 	ldrbmi	r5, [pc, #-840]	; 3f00 <_Min_Stack_Size+0x3b00>
    4244:	4f5f3150 	svcmi	0x005f3150
    4248:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    424c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4250:	314e4143 	cmpcc	lr, r3, asr #2
    4254:	3158525f 	cmpcc	r8, pc, asr r2
    4258:	5152495f 	cmppl	r2, pc, asr r9
    425c:	7542006e 	strbvc	r0, [r2, #-110]	; 0x6e
    4260:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4264:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 426c <_Min_Stack_Size+0x3e6c>
    4268:	45730065 	ldrbmi	r0, [r3, #-101]!	; 0x65
    426c:	414d4445 	cmpmi	sp, r5, asr #8
    4270:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4274:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4278:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    427c:	45006572 	strmi	r6, [r0, #-1394]	; 0x572
    4280:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
    4284:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    4288:	006e5152 	rsbeq	r5, lr, r2, asr r1
    428c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    4290:	5f43435f 	svcpl	0x0043435f
    4294:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4298:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
    429c:	52495f4f 	subpl	r5, r9, #316	; 0x13c
    42a0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    42a4:	33495458 	movtcc	r5, #37976	; 0x9458
    42a8:	5152495f 	cmppl	r2, pc, asr r9
    42ac:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0x6e
    42b0:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    42b4:	5152495f 	cmppl	r2, pc, asr r9
    42b8:	544f006e 	strbpl	r0, [pc], #-110	; 42c0 <_Min_Stack_Size+0x3ec0>
    42bc:	53485f47 	movtpl	r5, #36679	; 0x8f47
    42c0:	3150455f 	cmpcc	r0, pc, asr r5
    42c4:	5f4e495f 	svcpl	0x004e495f
    42c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    42cc:	414d4400 	cmpmi	sp, r0, lsl #8
    42d0:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    42d4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    42d8:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    42dc:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    42e0:	5f32414d 	svcpl	0x0032414d
    42e4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    42e8:	5f326d61 	svcpl	0x00326d61
    42ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    42f0:	52445300 	subpl	r5, r4, #0, 6
    42f4:	525f4d41 	subspl	r4, pc, #4160	; 0x1040
    42f8:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    42fc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4300:	44530072 	ldrbmi	r0, [r3], #-114	; 0x72
    4304:	5f4d4152 	svcpl	0x004d4152
    4308:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    430c:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    4310:	00726566 	rsbseq	r6, r2, r6, ror #10
    4314:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xe69
    4318:	4d460078 	stclmi	0, cr0, [r6, #-480]	; 0xfffffe20
    431c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    4320:	544d4152 	strbpl	r4, [sp], #-338	; 0x152
    4324:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    4328:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    432c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4330:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    4334:	64006572 	strvs	r6, [r0], #-1394	; 0x572
    4338:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    433c:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
    4340:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    4344:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    4348:	53007265 	movwpl	r7, #613	; 0x265
    434c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    4350:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    4354:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    4358:	00676966 	rsbeq	r6, r7, r6, ror #18
    435c:	41524453 	cmpmi	r2, r3, asr r4
    4360:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    4364:	65537469 	ldrbvs	r7, [r3, #-1129]	; 0x469
    4368:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    436c:	53006563 	movwpl	r6, #1379	; 0x563
    4370:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    4374:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4378:	77750074 			; <UNDEFINED> instruction: 0x77750074
    437c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4380:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    4384:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4388:	42777500 	rsbsmi	r7, r7, #0, 10
    438c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4390:	7a695372 	bvc	1a59160 <_Min_Stack_Size+0x1a58d60>
    4394:	77750065 	ldrbvc	r0, [r5, -r5, rrx]!
    4398:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    439c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    43a0:	00737365 	rsbseq	r7, r3, r5, ror #6
    43a4:	756f436e 	strbvc	r4, [pc, #-878]!	; 403e <_Min_Stack_Size+0x3c3e>
    43a8:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    43ac:	552f636e 	strpl	r6, [pc, #-878]!	; 4046 <_Min_Stack_Size+0x3c46>
    43b0:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    43b4:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    43b8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    43bc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    43c0:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    43c4:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    43c8:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    43cc:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xf79
    43d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    43d4:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    43d8:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    43dc:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    43e0:	735f7972 	cmpvc	pc, #1867776	; 0x1c8000
    43e4:	6d617264 	sfmvs	f7, 2, [r1, #-400]!	; 0xfffffe70
    43e8:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    43ec:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    43f0:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    43f4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    43f8:	53646e61 	cmnpl	r4, #1552	; 0x610
    43fc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4400:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    4404:	434d4600 	movtmi	r4, #54784	; 0xd600
    4408:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    440c:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    4410:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    4414:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4418:	00657275 	rsbeq	r7, r5, r5, ror r2
    441c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4420:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    4424:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    4428:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    442c:	334c0074 	movtcc	r0, #49268	; 0xc074
    4430:	30324447 	eorscc	r4, r2, r7, asr #8
    4434:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    4438:	74794264 	ldrbtvc	r4, [r9], #-612	; 0x264
    443c:	614c0065 	cmpvs	ip, r5, rrx
    4440:	5f686374 	svcpl	0x00686374
    4444:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    4448:	00747365 	rsbseq	r7, r4, r5, ror #6
    444c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4450:	475f3032 	smmlarmi	pc, r2, r0, r3	; <UNPREDICTABLE>
    4454:	61447465 	cmpvs	r4, r5, ror #8
    4458:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    445c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4460:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4464:	5f303244 	svcpl	0x00303244
    4468:	6f626552 	svcvs	0x00626552
    446c:	6d43746f 	cfstrdvs	mvd7, [r3, #-444]	; 0xfffffe44
    4470:	74630064 	strbtvc	r0, [r3], #-100	; 0x64
    4474:	635f6c72 	cmpvs	pc, #29184	; 0x7200
    4478:	4e007266 	cdpmi	2, 0, cr7, cr0, cr6, {3}
    447c:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4480:	6f546574 	svcvs	0x00546574
    4484:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4488:	67694800 	strbvs	r4, [r9, -r0, lsl #16]!
    448c:	73615068 	cmnvc	r1, #104	; 0x68
    4490:	6c694673 	stclvs	6, cr4, [r9], #-460	; 0xfffffe34
    4494:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    4498:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    449c:	746e4900 	strbtvc	r4, [lr], #-2304	; 0x900
    44a0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    44a4:	415f7470 	cmpmi	pc, r0, ror r4	; <UNPREDICTABLE>
    44a8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    44ac:	67644565 	strbvs	r4, [r4, -r5, ror #10]!
    44b0:	334c0065 	movtcc	r0, #49253	; 0xc065
    44b4:	30324447 	eorscc	r4, r2, r7, asr #8
    44b8:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    44bc:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    44c0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    44c4:	334c0074 	movtcc	r0, #49268	; 0xc074
    44c8:	30324447 	eorscc	r4, r2, r7, asr #8
    44cc:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    44d0:	746e4931 	strbtvc	r4, [lr], #-2353	; 0x931
    44d4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    44d8:	6d437470 	cfstrdvs	mvd7, [r3, #-448]	; 0xfffffe40
    44dc:	334c0064 	movtcc	r0, #49252	; 0xc064
    44e0:	30324447 	eorscc	r4, r2, r7, asr #8
    44e4:	6165525f 	cmnvs	r5, pc, asr r2
    44e8:	72570064 	subsvc	r0, r7, #100	; 0x64
    44ec:	41657469 	cmnmi	r5, r9, ror #8
    44f0:	00726464 	rsbseq	r6, r2, r4, ror #8
    44f4:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    44f8:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    44fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4500:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    4504:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4508:	79546769 	ldmdbvc	r4, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    450c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    4510:	334c0066 	movtcc	r0, #49254	; 0xc066
    4514:	30324447 	eorscc	r4, r2, r7, asr #8
    4518:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
    451c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    4520:	6e495f6c 	cdpvs	15, 4, cr5, cr9, cr12, {3}
    4524:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    4528:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    452c:	6f546574 	svcvs	0x00546574
    4530:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4534:	334c0065 	movtcc	r0, #49253	; 0xc065
    4538:	30324447 	eorscc	r4, r2, r7, asr #8
    453c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    4540:	0074756f 	rsbseq	r7, r4, pc, ror #10
    4544:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    4548:	74630031 	strbtvc	r0, [r3], #-49	; 0x31
    454c:	00336c72 	eorseq	r6, r3, r2, ror ip
    4550:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    4554:	334c0034 	movtcc	r0, #49204	; 0xc034
    4558:	30324447 	eorscc	r4, r2, r7, asr #8
    455c:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    4560:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    4564:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4568:	334c0067 	movtcc	r0, #49255	; 0xc067
    456c:	30324447 	eorscc	r4, r2, r7, asr #8
    4570:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    4574:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4578:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    457c:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
    4580:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    4584:	53676966 	cmnpl	r7, #1671168	; 0x198000
    4588:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    458c:	334c0074 	movtcc	r0, #49268	; 0xc074
    4590:	30324447 	eorscc	r4, r2, r7, asr #8
    4594:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    4598:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    459c:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    45a0:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    45a4:	49545f30 	ldmdbmi	r4, {r4, r5, r8, r9, sl, fp, ip, lr}^
    45a8:	554f454d 	strbpl	r4, [pc, #-1357]	; 4063 <_Min_Stack_Size+0x3c63>
    45ac:	73555f54 	cmpvc	r5, #84, 30	; 0x150
    45b0:	61437265 	cmpvs	r3, r5, ror #4
    45b4:	61626c6c 	cmnvs	r2, ip, ror #24
    45b8:	53006b63 	movwpl	r6, #2915	; 0xb63
    45bc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    45c0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    45c4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    45c8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    45cc:	74796200 	ldrbtvc	r6, [r9], #-512	; 0x200
    45d0:	334c0065 	movtcc	r0, #49253	; 0xc065
    45d4:	30324447 	eorscc	r4, r2, r7, asr #8
    45d8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    45dc:	6e490074 	mcrvs	0, 2, r0, cr9, cr4, {3}
    45e0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    45e4:	53747075 	cmnpl	r4, #117	; 0x75
    45e8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    45ec:	636e6900 	cmnvs	lr, #0, 18
    45f0:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    45f4:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    45f8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    45fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4600:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    4604:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    4608:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    460c:	2f797265 	svccs	0x00797265
    4610:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4614:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    4618:	645f6939 	ldrbvs	r6, [pc], #-2361	; 4620 <_Min_Stack_Size+0x4220>
    461c:	6f637369 	svcvs	0x00637369
    4620:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    4624:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    4628:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    462c:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    4630:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    4634:	5f747075 	svcpl	0x00747075
    4638:	73657841 	cmnvc	r5, #4259840	; 0x410000
    463c:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4640:	5f303244 	svcpl	0x00303244
    4644:	32544e49 	subscc	r4, r4, #1168	; 0x490
    4648:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    464c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4650:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    4654:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4658:	5f303244 	svcpl	0x00303244
    465c:	31544e49 	cmpcc	r4, r9, asr #28
    4660:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    4664:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4668:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    466c:	00676966 	rsbeq	r6, r7, r6, ror #18
    4670:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4674:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4678:	72756300 	rsbsvc	r6, r5, #0, 6
    467c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    4680:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    4684:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4688:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    468c:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0x554
    4690:	6f6c6f43 	svcvs	0x006c6f43
    4694:	434c0072 	movtmi	r0, #49266	; 0xc072
    4698:	6c435f44 	mcrrvs	15, 4, r5, r3, cr4
    469c:	4c726165 	ldfmie	f6, [r2], #-404	; 0xfffffe6c
    46a0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    46a4:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    46a8:	49525f45 	ldmdbmi	r2, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    46ac:	00544847 	subseq	r4, r4, r7, asr #16
    46b0:	69665f58 	stmdbvs	r6!, {r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    46b4:	00747372 	rsbseq	r7, r4, r2, ror r3
    46b8:	5f44434c 	svcpl	0x0044434c
    46bc:	61656c43 	cmnvs	r5, r3, asr #24
    46c0:	434c0072 	movtmi	r0, #49266	; 0xc072
    46c4:	72575f44 	subsvc	r5, r7, #68, 30	; 0x110
    46c8:	43657469 	cmnmi	r5, #1761607680	; 0x69000000
    46cc:	616d6d6f 	cmnvs	sp, pc, ror #26
    46d0:	4100646e 	tstmi	r0, lr, ror #8
    46d4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    46d8:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    46dc:	5f46415f 	svcpl	0x0046415f
    46e0:	4f495047 	svcmi	0x00495047
    46e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    46e8:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    46ec:	495f4443 	ldmdbmi	pc, {r0, r1, r6, sl, lr}^	; <UNPREDICTABLE>
    46f0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    46f4:	69665f59 	stmdbvs	r6!, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    46f8:	00747372 	rsbseq	r7, r4, r2, ror r3
    46fc:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    4700:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    4704:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    4708:	75696461 	strbvc	r6, [r9, #-1121]!	; 0x461
    470c:	434c0073 	movtmi	r0, #49267	; 0xc073
    4710:	614c5f44 	cmpvs	ip, r4, asr #30
    4714:	49726579 	ldmdbmi	r2!, {r0, r3, r4, r5, r6, r8, sl, sp, lr}^
    4718:	0074696e 	rsbseq	r6, r4, lr, ror #18
    471c:	5f44434c 	svcpl	0x0044434c
    4720:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    4724:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4728:	69577961 	ldmdbvs	r7, {r0, r5, r6, r8, fp, ip, sp, lr}^
    472c:	776f646e 	strbvc	r6, [pc, -lr, ror #8]!
    4730:	64615200 	strbtvs	r5, [r1], #-512	; 0x200
    4734:	32737569 	rsbscc	r7, r3, #440401920	; 0x1a400000
    4738:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    473c:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    4740:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    4744:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    4748:	414d4900 	cmpmi	sp, r0, lsl #18
    474c:	4c5f4547 	cfldr64mi	mvdx4, [pc], {71}	; 0x47
    4750:	00544645 	subseq	r4, r4, r5, asr #12
    4754:	5f44434c 	svcpl	0x0044434c
    4758:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    475c:	4c696e55 	stclmi	14, cr6, [r9], #-340	; 0xfffffeac
    4760:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4764:	5f44434c 	svcpl	0x0044434c
    4768:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    476c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4770:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    4774:	5800676e 	stmdapl	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4778:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    477c:	00726574 	rsbseq	r6, r2, r4, ror r5
    4780:	5f44434c 	svcpl	0x0044434c
    4784:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    4788:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    478c:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4790:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    4794:	726f7372 	rsbvc	r7, pc, #-939524095	; 0xc8000001
    4798:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    479c:	00596c65 	subseq	r6, r9, r5, ror #24
    47a0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    47a4:	434c0065 	movtmi	r0, #49253	; 0xc065
    47a8:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    47ac:	75467761 	strbvc	r7, [r6, #-1889]	; 0x761
    47b0:	6c456c6c 	mcrrvs	12, 6, r6, r5, cr12
    47b4:	7370696c 	cmnvc	r0, #108, 18	; 0x1b0000
    47b8:	75430065 	strbvc	r0, [r3, #-101]	; 0x65
    47bc:	43005872 	movwmi	r5, #2162	; 0x872
    47c0:	00597275 	subseq	r7, r9, r5, ror r2
    47c4:	736f7078 	cmnvc	pc, #120	; 0x78
    47c8:	6c6f4300 	stclvs	3, cr4, [pc], #-0	; 47d0 <_Min_Stack_Size+0x43d0>
    47cc:	006e6d75 	rsbeq	r6, lr, r5, ror sp
    47d0:	746e6f46 	strbtvc	r6, [lr], #-3910	; 0xf46
    47d4:	31783231 	cmncc	r8, r1, lsr r2
    47d8:	70590032 	subsvc	r0, r9, r2, lsr r0
    47dc:	5f00736f 	svcpl	0x0000736f
    47e0:	6e6f4674 	mcrvs	6, 3, r4, cr15, cr4, {3}
    47e4:	434c0074 	movtmi	r0, #49268	; 0xc074
    47e8:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    47ec:	61725474 	cmnvs	r2, r4, ror r4
    47f0:	6170736e 	cmnvs	r0, lr, ror #6
    47f4:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    47f8:	72740079 	rsbsvc	r0, r4, #121	; 0x79
    47fc:	70736e61 	rsbsvc	r6, r3, r1, ror #28
    4800:	6e657261 	cdpvs	2, 6, cr7, cr5, cr1, {3}
    4804:	78007963 	stmdavc	r0, {r0, r1, r5, r6, r8, fp, ip, sp, lr}
    4808:	32636e69 	rsbcc	r6, r3, #1680	; 0x690
    480c:	6e6f4600 	cdpvs	6, 6, cr4, cr15, cr0, {0}
    4810:	78363174 	ldmdavc	r6!, {r2, r4, r5, r6, r8, ip, sp}
    4814:	4c003432 	cfstrsmi	mvf3, [r0], {50}	; 0x32
    4818:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4820 <_Min_Stack_Size+0x4420>
    481c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4820:	74537961 	ldrbvc	r7, [r3], #-2401	; 0x961
    4824:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4828:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    482c:	42475200 	submi	r5, r7, #0, 4
    4830:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    4834:	434c0065 	movtmi	r0, #49253	; 0xc065
    4838:	6f505f44 	svcvs	0x00505f44
    483c:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4840:	4300656e 	movwmi	r6, #1390	; 0x56e
    4844:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    4848:	614c746e 	cmpvs	ip, lr, ror #8
    484c:	00726579 	rsbseq	r6, r2, r9, ror r5
    4850:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
    4854:	31783849 	cmncc	r8, r9, asr #16
    4858:	61545f32 	cmpvs	r4, r2, lsr pc
    485c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4860:	70727563 	rsbsvc	r7, r2, r3, ror #10
    4864:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    4868:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    486c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    4870:	6c655370 	stclvs	3, cr5, [r5], #-448	; 0xfffffe40
    4874:	00746365 	rsbseq	r6, r4, r5, ror #6
    4878:	5f646552 	svcpl	0x00646552
    487c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    4880:	6d420065 	stclvs	0, cr0, [r2, #-404]	; 0xfffffe6c
    4884:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    4888:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    488c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4890:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    4894:	6f6c6f43 	svcvs	0x006c6f43
    4898:	43007372 	movwmi	r7, #882	; 0x372
    489c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    48a0:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
    48a4:	42656d61 	rsbmi	r6, r5, #6208	; 0x1840
    48a8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    48ac:	434c0072 	movtmi	r0, #49266	; 0xc072
    48b0:	74435f44 	strbvc	r5, [r3], #-3908	; 0xf44
    48b4:	694c6c72 	stmdbvs	ip, {r1, r4, r5, r6, sl, fp, sp, lr}^
    48b8:	4373656e 	cmnmi	r3, #461373440	; 0x1b800000
    48bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    48c0:	6f460067 	svcvs	0x00460067
    48c4:	7838746e 	ldmdavc	r8!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    48c8:	4c003231 	sfmmi	f3, 4, [r0], {49}	; 0x31
    48cc:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    48d0:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xf6c
    48d4:	6c6f5064 	stclvs	0, cr5, [pc], #-400	; 474c <_Min_Stack_Size+0x434c>
    48d8:	6e694c79 	mcrvs	12, 3, r4, cr9, cr9, {3}
    48dc:	6c655265 	sfmvs	f5, 2, [r5], #-404	; 0xfffffe6c
    48e0:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    48e4:	50700065 	rsbspl	r0, r0, r5, rrx
    48e8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    48ec:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    48f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    48f4:	6b636142 	blvs	18dce04 <_Min_Stack_Size+0x18dca04>
    48f8:	6f6c6f43 	svcvs	0x006c6f43
    48fc:	6c420072 	mcrrvs	0, 7, r0, r2, cr2
    4900:	565f6575 			; <UNDEFINED> instruction: 0x565f6575
    4904:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4908:	72744300 	rsbsvc	r4, r4, #0, 6
    490c:	6e69506c 	cdpvs	0, 6, cr5, cr9, cr12, {3}
    4910:	75430073 	strbvc	r0, [r3, #-115]	; 0x73
    4914:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    4918:	63614274 	cmnvs	r1, #116, 4	; 0x40000007
    491c:	6c6f436b 	stclvs	3, cr4, [pc], #-428	; 4778 <_Min_Stack_Size+0x4378>
    4920:	6200726f 	andvs	r7, r0, #-268435450	; 0xf0000006
    4924:	705f7469 	subsvc	r7, pc, r9, ror #8
    4928:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    492c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4930:	00646461 	rsbeq	r6, r4, r1, ror #8
    4934:	64646158 	strbtvs	r6, [r4], #-344	; 0x158
    4938:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    493c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4940:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    4944:	4d426574 	cfstr64mi	mvdx6, [r2, #-464]	; 0xfffffe30
    4948:	434c0050 	movtmi	r0, #49232	; 0xc050
    494c:	65525f44 	ldrbvs	r5, [r2, #-3908]	; 0xf44
    4950:	53410067 	movtpl	r0, #4199	; 0x1067
    4954:	31494943 	cmpcc	r9, r3, asr #18
    4958:	32317832 	eorscc	r7, r1, #3276800	; 0x320000
    495c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
    4960:	4600656c 	strmi	r6, [r0], -ip, ror #10
    4964:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
    4968:	65724700 	ldrbvs	r4, [r2, #-1792]!	; 0x700
    496c:	565f6e65 	ldrbpl	r6, [pc], -r5, ror #28
    4970:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4974:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4978:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    497c:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    4980:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    4984:	434c0065 	movtmi	r0, #49253	; 0xc065
    4988:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    498c:	6c457761 	mcrrvs	7, 6, r7, r5, cr1
    4990:	7370696c 	cmnvc	r0, #108, 18	; 0x1b0000
    4994:	75500065 	ldrbvc	r0, [r0, #-101]	; 0x65
    4998:	78695074 	stmdavc	r9!, {r2, r4, r5, r6, ip, lr}^
    499c:	4c006c65 	stcmi	12, cr6, [r0], {101}	; 0x65
    49a0:	445f4443 	ldrbmi	r4, [pc], #-1091	; 49a8 <_Min_Stack_Size+0x45a8>
    49a4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    49a8:	6e4f7961 	cdpvs	9, 4, cr7, cr15, cr1, {3}
    49ac:	696f5000 	stmdbvs	pc!, {ip, lr}^	; <UNPREDICTABLE>
    49b0:	6f43746e 	svcvs	0x0043746e
    49b4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    49b8:	63666572 	cmnvs	r6, #478150656	; 0x1c800000
    49bc:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    49c0:	434c006e 	movtmi	r0, #49262	; 0xc06e
    49c4:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    49c8:	68437761 	stmdavs	r3, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    49cc:	4c007261 	sfmmi	f7, 4, [r0], {97}	; 0x61
    49d0:	545f4443 	ldrbpl	r4, [pc], #-1091	; 49d8 <_Min_Stack_Size+0x45d8>
    49d4:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
    49d8:	00656c67 	rsbeq	r6, r5, r7, ror #24
    49dc:	636e6979 	cmnvs	lr, #1982464	; 0x1e4000
    49e0:	69790031 	ldmdbvs	r9!, {r0, r4, r5}^
    49e4:	0032636e 	eorseq	r6, r2, lr, ror #6
    49e8:	5f44434c 	svcpl	0x0044434c
    49ec:	6c6c6946 	stclvs	9, cr6, [ip], #-280	; 0xfffffee8
    49f0:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    49f4:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    49f8:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    49fc:	6e69575f 	mcrvs	7, 3, r5, cr9, cr15, {2}
    4a00:	4d776f64 	ldclmi	15, cr6, [r7, #-400]!	; 0xfffffe70
    4a04:	4465646f 	strbtmi	r6, [r5], #-1135	; 0x46f
    4a08:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    4a0c:	4c00656c 	cfstr32mi	mvfx6, [r0], {108}	; 0x6c
    4a10:	505f4443 	subspl	r4, pc, r3, asr #8
    4a14:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    4a18:	4c006e4f 	stcmi	14, cr6, [r0], {79}	; 0x4f
    4a1c:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4a24 <_Min_Stack_Size+0x4624>
    4a20:	52776172 	rsbspl	r6, r7, #-2147483620	; 0x8000001c
    4a24:	00746365 	rsbseq	r6, r4, r5, ror #6
    4a28:	5f44434c 	svcpl	0x0044434c
    4a2c:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    4a30:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    4a34:	63726943 	cmnvs	r2, #1097728	; 0x10c000
    4a38:	4c00656c 	cfstr32mi	mvfx6, [r0], {108}	; 0x6c
    4a3c:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    4a40:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xf6c
    4a44:	6c6f5064 	stclvs	0, cr5, [pc], #-400	; 48bc <_Min_Stack_Size+0x44bc>
    4a48:	6e694c79 	mcrvs	12, 3, r4, cr9, cr9, {3}
    4a4c:	434c0065 	movtmi	r0, #49253	; 0xc065
    4a50:	6f505f44 	svcvs	0x00505f44
    4a54:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4a58:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0x56e
    4a5c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4a60:	6c436576 	cfstr64vs	mvdx6, [r3], {118}	; 0x76
    4a64:	6465736f 	strbtvs	r7, [r5], #-879	; 0x36f
    4a68:	43534100 	cmpmi	r3, #0, 2
    4a6c:	36314949 	ldrtcc	r4, [r1], -r9, asr #18
    4a70:	5f343278 	svcpl	0x00343278
    4a74:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    4a78:	65680065 	strbvs	r0, [r8, #-101]!	; 0x65
    4a7c:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
    4a80:	6e697800 	cdpvs	8, 6, cr7, cr9, cr0, {0}
    4a84:	4c003163 	stfmis	f3, [r0], {99}	; 0x63
    4a88:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4a90 <_Min_Stack_Size+0x4690>
    4a8c:	43776172 	cmnmi	r7, #-2147483620	; 0x8000001c
    4a90:	6c637269 	sfmvs	f7, 2, [r3], #-420	; 0xfffffe5c
    4a94:	434c0065 	movtmi	r0, #49253	; 0xc065
    4a98:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4a9c:	694c7761 	stmdbvs	ip, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    4aa0:	4c00656e 	cfstr32mi	mvfx6, [r0], {110}	; 0x6e
    4aa4:	475f4443 	ldrbmi	r4, [pc, -r3, asr #8]
    4aa8:	6f437465 	svcvs	0x00437465
    4aac:	73726f6c 	cmnvc	r2, #108, 30	; 0x1b0
    4ab0:	6f705800 	svcvs	0x00705800
    4ab4:	434c0073 	movtmi	r0, #49267	; 0xc073
    4ab8:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4abc:	75467761 	strbvc	r7, [r6, #-1889]	; 0x761
    4ac0:	65526c6c 	ldrbvs	r6, [r2, #-3180]	; 0xc6c
    4ac4:	41007463 	tstmi	r0, r3, ror #8
    4ac8:	49494353 	stmdbmi	r9, {r0, r1, r4, r6, r8, r9, lr}^
    4acc:	5f387838 	svcpl	0x00387838
    4ad0:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    4ad4:	65640065 	strbvs	r0, [r4, #-101]!	; 0x65
    4ad8:	7861746c 	stmdavc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
    4adc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    4ae0:	00796174 	rsbseq	r6, r9, r4, ror r1
    4ae4:	5f44434c 	svcpl	0x0044434c
    4ae8:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    4aec:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4af0:	616c6552 	cmnvs	ip, r2, asr r5
    4af4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    4af8:	636e6900 	cmnvs	lr, #0, 18
    4afc:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    4b00:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4b04:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4b08:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4b0c:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    4b10:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    4b14:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4b18:	2f797265 	svccs	0x00797265
    4b1c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4b20:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    4b24:	645f6939 	ldrbvs	r6, [pc], #-2361	; 4b2c <_Min_Stack_Size+0x472c>
    4b28:	6f637369 	svcvs	0x00637369
    4b2c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    4b30:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
    4b34:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    4b38:	00316461 	eorseq	r6, r1, r1, ror #8
    4b3c:	32646172 	rsbcc	r6, r4, #-2147483620	; 0x8000001c
    4b40:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4b44:	6172445f 	cmnvs	r2, pc, asr r4
    4b48:	6e6f4d77 	mcrvs	13, 3, r4, cr15, cr7, {3}
    4b4c:	6369506f 	cmnvs	r9, #111	; 0x6f
    4b50:	434c0074 	movtmi	r0, #49268	; 0xc074
    4b54:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    4b58:	79614c74 	stmdbvc	r1!, {r2, r4, r5, r6, sl, fp, lr}^
    4b5c:	59007265 	stmdbpl	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    4b60:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    4b64:	00726574 	rsbseq	r6, r2, r4, ror r5
    4b68:	746e6f46 	strbtvc	r6, [lr], #-3910	; 0xf46
    4b6c:	00387838 	eorseq	r7, r8, r8, lsr r8
    4b70:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4b74:	4c00586c 	stcmi	8, cr5, [r0], {108}	; 0x6c
    4b78:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4b7c:	6f434950 	svcvs	0x00434950
    4b80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4b84:	696f5000 	stmdbvs	pc!, {ip, lr}^	; <UNPREDICTABLE>
    4b88:	0073746e 	rsbseq	r7, r3, lr, ror #8
    4b8c:	5f44434c 	svcpl	0x0044434c
    4b90:	46746553 			; <UNDEFINED> instruction: 0x46746553
    4b94:	00746e6f 	rsbseq	r6, r4, pc, ror #28
    4b98:	5f44434c 	svcpl	0x0044434c
    4b9c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    4ba0:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4ba4:	69725773 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    4ba8:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4bac:	525f4443 	subspl	r4, pc, #1124073472	; 0x43000000
    4bb0:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
    4bb4:	6f6c6f43 	svcvs	0x006c6f43
    4bb8:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4bbc:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4bc0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    4bc4:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
    4bc8:	43747865 	cmnmi	r4, #6619136	; 0x650000
    4bcc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4bd0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4bd4:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4bd8:	4900736c 	stmdbmi	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    4bdc:	4547414d 	strbmi	r4, [r7, #-333]	; 0x14d
    4be0:	504f545f 	subpl	r5, pc, pc, asr r4	; <UNPREDICTABLE>
    4be4:	4f467300 	svcmi	0x00467300
    4be8:	4c00544e 	cfstrsmi	mvf5, [r0], {78}	; 0x4e
    4bec:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4bf4 <_Min_Stack_Size+0x47f4>
    4bf0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4bf4:	664f7961 	strbvs	r7, [pc], -r1, ror #18
    4bf8:	434c0066 	movtmi	r0, #49254	; 0xc066
    4bfc:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    4c00:	6e6f4674 	mcrvs	6, 3, r4, cr15, cr4, {3}
    4c04:	434c0074 	movtmi	r0, #49268	; 0xc074
    4c08:	72575f44 	subsvc	r5, r7, #68, 30	; 0x110
    4c0c:	44657469 	strbtmi	r7, [r5], #-1129	; 0x469
    4c10:	00617461 	rsbeq	r7, r1, r1, ror #8
    4c14:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    4c18:	4f425f45 	svcmi	0x00425f45
    4c1c:	4d4f5454 	cfstrdmi	mvd5, [pc, #-336]	; 4ad4 <_Min_Stack_Size+0x46d4>
    4c20:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4c24:	7275435f 	rsbsvc	r4, r5, #2080374785	; 0x7c000001
    4c28:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    4c2c:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xf66
    4c30:	4f490073 	svcmi	0x00490073
    4c34:	50545f45 	subspl	r5, r4, r5, asr #30
    4c38:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4c3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4c40:	50540065 	subspl	r0, r4, r5, rrx
    4c44:	6174535f 	cmnvs	r4, pc, asr r3
    4c48:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    4c4c:	475f454f 	ldrbmi	r4, [pc, -pc, asr #10]
    4c50:	6d435449 	cfstrdvs	mvd5, [r3, #-292]	; 0xfffffedc
    4c54:	4f490064 	svcmi	0x00490064
    4c58:	4f495f45 	svcmi	0x00495f45
    4c5c:	6f434641 	svcvs	0x00434641
    4c60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4c64:	454f4900 	strbmi	r4, [pc, #-2304]	; 436c <_Min_Stack_Size+0x3f6c>
    4c68:	5f50545f 	svcpl	0x0050545f
    4c6c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4c70:	5400585f 	strpl	r5, [r0], #-2143	; 0x85f
    4c74:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xf50
    4c78:	00455441 	subeq	r5, r5, r1, asr #8
    4c7c:	5f454f49 	svcpl	0x00454f49
    4c80:	525f5054 	subspl	r5, pc, #84	; 0x54
    4c84:	5f646165 	svcpl	0x00646165
    4c88:	6552005a 	ldrbvs	r0, [r2, #-90]	; 0x5a
    4c8c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    4c90:	64417265 	strbvs	r7, [r1], #-613	; 0x265
    4c94:	49007264 	stmdbmi	r0, {r2, r5, r6, r9, ip, sp, lr}
    4c98:	445f4332 	ldrbmi	r4, [pc], #-818	; 4ca0 <_Min_Stack_Size+0x48a0>
    4c9c:	525f414d 	subspl	r4, pc, #1073741843	; 0x40000013
    4ca0:	44646165 	strbtmi	r6, [r4], #-357	; 0x165
    4ca4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4ca8:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    4cac:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    4cb0:	4f490072 	svcmi	0x00490072
    4cb4:	6e465f45 	cdpvs	15, 4, cr5, cr6, cr5, {2}
    4cb8:	6d437463 	cfstrdvs	mvd7, [r3, #-396]	; 0xfffffe74
    4cbc:	4f490064 	svcmi	0x00490064
    4cc0:	75425f45 	strbvc	r5, [r2, #-3909]	; 0xf45
    4cc4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    4cc8:	49005854 	stmdbmi	r0, {r2, r4, r6, fp, ip, lr}
    4ccc:	495f454f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    4cd0:	65704f73 	ldrbvs	r4, [r0, #-3955]!	; 0xf73
    4cd4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    4cd8:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    4cdc:	756f5400 	strbvc	r5, [pc, #-1024]!	; 48e4 <_Min_Stack_Size+0x44e4>
    4ce0:	65446863 	strbvs	r6, [r4, #-2147]	; 0x863
    4ce4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    4ce8:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
    4cec:	435f454f 	cmpmi	pc, #331350016	; 0x13c00000
    4cf0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4cf4:	50544947 	subspl	r4, r4, r7, asr #18
    4cf8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    4cfc:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4d00:	495f454f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    4d04:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    4d08:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4d0c:	4f490067 	svcmi	0x00490067
    4d10:	65475f45 	strbvs	r5, [r7, #-3909]	; 0xf45
    4d14:	54494774 	strbpl	r4, [r9], #-1908	; 0x774
    4d18:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4d1c:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4d20:	525f454f 	subspl	r4, pc, #331350016	; 0x13c00000
    4d24:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4d28:	65520044 	ldrbvs	r0, [r2, #-68]	; 0x44
    4d2c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    4d30:	61567265 	cmpvs	r6, r5, ror #4
    4d34:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4d38:	5f433249 	svcpl	0x00433249
    4d3c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4d40:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4d44:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    4d48:	4f490065 	svcmi	0x00490065
    4d4c:	50475f45 	subpl	r5, r7, r5, asr #30
    4d50:	435f4f49 	cmpmi	pc, #292	; 0x124
    4d54:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4d58:	4f490067 	svcmi	0x00490067
    4d5c:	4b4f5f45 	blmi	13dca78 <_Min_Stack_Size+0x13dc678>
    4d60:	454f4900 	strbmi	r4, [pc, #-2304]	; 4468 <_Min_Stack_Size+0x4068>
    4d64:	5f50545f 	svcpl	0x0050545f
    4d68:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4d6c:	4900595f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, fp, ip, lr}
    4d70:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4d78 <_Min_Stack_Size+0x4978>
    4d74:	6f656d69 	svcvs	0x00656d69
    4d78:	73557475 	cmpvc	r5, #1962934272	; 0x75000000
    4d7c:	61437265 	cmpvs	r3, r5, ror #4
    4d80:	61626c6c 	cmnvs	r2, ip, ror #24
    4d84:	49006b63 	stmdbmi	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    4d88:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4d90 <_Min_Stack_Size+0x4990>
    4d8c:	43544950 	cmpmi	r4, #80, 18	; 0x140000
    4d90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4d94:	4f490067 	svcmi	0x00490067
    4d98:	65525f45 	ldrbvs	r5, [r2, #-3909]	; 0xf45
    4d9c:	00746573 	rsbseq	r6, r4, r3, ror r5
    4da0:	5f454f49 	svcpl	0x00454f49
    4da4:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
    4da8:	0054554f 	subseq	r5, r4, pc, asr #10
    4dac:	5f433249 	svcpl	0x00433249
    4db0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4db4:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4db8:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4dbc:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4dc0:	00726574 	rsbseq	r6, r2, r4, ror r5
    4dc4:	5f433249 	svcpl	0x00433249
    4dc8:	5f414d44 	svcpl	0x00414d44
    4dcc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4dd0:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4dd4:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4dd8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4ddc:	00726574 	rsbseq	r6, r2, r4, ror r5
    4de0:	2f636e69 	svccs	0x00636e69
    4de4:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    4de8:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    4dec:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4df0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4df4:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4df8:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    4dfc:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4e00:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    4e04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4e08:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    4e0c:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e10:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4e14:	5f797265 	svcpl	0x00797265
    4e18:	2e656f69 	cdpcs	15, 6, cr6, cr5, cr9, {3}
    4e1c:	4f490063 	svcmi	0x00490063
    4e20:	69545f45 	ldmdbvs	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    4e24:	754f656d 	strbvc	r6, [pc, #-1389]	; 48bf <_Min_Stack_Size+0x44bf>
    4e28:	4f490074 	svcmi	0x00490074
    4e2c:	4d445f45 	stclmi	15, cr5, [r4, #-276]	; 0xfffffeec
    4e30:	72694441 	rsbvc	r4, r9, #1090519040	; 0x41000000
    4e34:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4e38:	545f6e6f 	ldrbpl	r6, [pc], #-3695	; 4e40 <_Min_Stack_Size+0x4a40>
    4e3c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4e40:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    4e44:	465f454f 	ldrbmi	r4, [pc], -pc, asr #10
    4e48:	554c4941 	strbpl	r4, [ip, #-2369]	; 0x941
    4e4c:	49004552 	stmdbmi	r0, {r1, r4, r6, r8, sl, lr}
    4e50:	445f454f 	ldrbmi	r4, [pc], #-1359	; 4e58 <_Min_Stack_Size+0x4a58>
    4e54:	525f414d 	subspl	r4, pc, #1073741843	; 0x40000013
    4e58:	4f490058 	svcmi	0x00490058
    4e5c:	49475f45 	stmdbmi	r7, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    4e60:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    4e64:	00676966 	rsbeq	r6, r7, r6, ror #18
    4e68:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    4e6c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    4e70:	78006669 	stmdavc	r0, {r0, r3, r5, r6, r9, sl, sp, lr}
    4e74:	66666944 	strbtvs	r6, [r6], -r4, asr #18
    4e78:	43324900 	teqmi	r2, #0, 18
    4e7c:	414d445f 	cmpmi	sp, pc, asr r4
    4e80:	6165525f 	cmnvs	r5, pc, asr r2
    4e84:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    4e88:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    4e8c:	00726566 	rsbseq	r6, r2, r6, ror #10
    4e90:	5f454f49 	svcpl	0x00454f49
    4e94:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4e98:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    4e9c:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    4ea0:	44646165 	strbtmi	r6, [r4], #-357	; 0x165
    4ea4:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    4ea8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4eac:	4f490072 	svcmi	0x00490072
    4eb0:	4f4e5f45 	svcmi	0x004e5f45
    4eb4:	504f5f54 	subpl	r5, pc, r4, asr pc	; <UNPREDICTABLE>
    4eb8:	54415245 	strbpl	r5, [r1], #-581	; 0x245
    4ebc:	414e4f49 	cmpmi	lr, r9, asr #30
    4ec0:	4f49004c 	svcmi	0x0049004c
    4ec4:	50545f45 	subspl	r5, r4, r5, asr #30
    4ec8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    4ecc:	00676966 	rsbeq	r6, r7, r6, ror #18
    4ed0:	5f454f49 	svcpl	0x00454f49
    4ed4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    4ed8:	58527265 	ldmdapl	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4edc:	454f4900 	strbmi	r4, [pc, #-2304]	; 45e4 <_Min_Stack_Size+0x41e4>
    4ee0:	414d445f 	cmpmi	sp, pc, asr r4
    4ee4:	0058545f 	subseq	r5, r8, pc, asr r4
    4ee8:	66694479 			; <UNDEFINED> instruction: 0x66694479
    4eec:	41500066 	cmpmi	r0, r6, rrx
    4ef0:	5f4d4152 	svcpl	0x004d4152
    4ef4:	4f525245 	svcmi	0x00525245
    4ef8:	4f490052 	svcmi	0x00490052
    4efc:	4d445f45 	stclmi	15, cr5, [r4, #-276]	; 0xfffffeec
    4f00:	6f435f41 	svcvs	0x00435f41
    4f04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4f08:	43324900 	teqmi	r2, #0, 18
    4f0c:	6165525f 	cmnvs	r5, pc, asr r2
    4f10:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    4f14:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4f18:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4f1c:	00726574 	rsbseq	r6, r2, r4, ror r5
    4f20:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    4f24:	495f6c61 	ldmdbmi	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4f28:	65690054 	strbvs	r0, [r9, #-84]!	; 0x54
    4f2c:	645f6565 	ldrbvs	r6, [pc], #-1381	; 4f34 <_Min_Stack_Size+0x4b34>
    4f30:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    4f34:	68735f65 	ldmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f38:	5f657061 	svcpl	0x00657061
    4f3c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    4f40:	67756800 	ldrbvs	r6, [r5, -r0, lsl #16]!
    4f44:	74610065 	strbtvc	r0, [r1], #-101	; 0x65
    4f48:	66006e61 	strvs	r6, [r0], -r1, ror #28
    4f4c:	00736261 	rsbseq	r6, r3, r1, ror #4
    4f50:	755f6867 	ldrbvc	r6, [pc, #-2151]	; 46f1 <_Min_Stack_Size+0x42f1>
    4f54:	72617000 	rsbvc	r7, r1, #0
    4f58:	47007374 	smlsdxmi	r0, r4, r3, r7
    4f5c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
    4f60:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    4f64:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
    4f68:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    4f6c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    4f70:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    4f74:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    4f78:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    4f7c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    4f80:	6f6c666d 	svcvs	0x006c666d
    4f84:	612d7461 	teqvs	sp, r1, ror #8
    4f88:	733d6962 	teqvc	sp, #1605632	; 0x188000
    4f8c:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    4f90:	6d2d2070 	stcvs	0, cr2, [sp, #-448]!	; 0xfffffe40
    4f94:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
    4f98:	34767066 	ldrbtcc	r7, [r6], #-102	; 0x66
    4f9c:	2d70732d 	ldclcs	3, cr7, [r0, #-180]!	; 0xffffff4c
    4fa0:	20363164 	eorscs	r3, r6, r4, ror #2
    4fa4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4fa8:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4fac:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4fb0:	613d6863 	teqvs	sp, r3, ror #16
    4fb4:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    4fb8:	206d2d65 	rsbcs	r2, sp, r5, ror #26
    4fbc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4fc0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    4fc4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4fc8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    4fcc:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
    4fd0:	7570666d 	ldrbvc	r6, [r0, #-1645]!	; 0x66d
    4fd4:	7670663d 			; <UNDEFINED> instruction: 0x7670663d
    4fd8:	70732d34 	rsbsvc	r2, r3, r4, lsr sp
    4fdc:	3631642d 	ldrtcc	r6, [r1], -sp, lsr #8
    4fe0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4fe4:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    4fe8:	6f6e662d 	svcvs	0x006e662d
    4fec:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    4ff0:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    4ff4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    4ff8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    4ffc:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    5000:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    5004:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    5008:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xd20
    500c:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    5010:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    5014:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    5018:	61746100 	cmnvs	r4, r0, lsl #2
    501c:	0069686e 	rsbeq	r6, r9, lr, ror #16
    5020:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5024:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5028:	2f2e2e2f 	svccs	0x002e2e2f
    502c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5030:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5034:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5038:	2f62696c 	svccs	0x0062696c
    503c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5040:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5044:	5f732f68 	svcpl	0x00732f68
    5048:	6e617461 	cdpvs	4, 6, cr7, cr1, cr1, {3}
    504c:	6100632e 	tstvs	r0, lr, lsr #6
    5050:	6c6e6174 	stfvse	f6, [lr], #-464	; 0xfffffe30
    5054:	622f006f 	eorvs	r0, pc, #111	; 0x6f
    5058:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    505c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5060:	2f64646c 	svccs	0x0064646c
    5064:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5068:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    506c:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5070:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5074:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5078:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    507c:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5080:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5084:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5088:	612f646c 	teqvs	pc, ip, ror #8
    508c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5090:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5094:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5098:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    509c:	2d653776 	stclcs	7, cr3, [r5, #-472]!	; 0xfffffe28
    50a0:	6f732f6d 	svcvs	0x00732f6d
    50a4:	70667466 	rsbvc	r7, r6, r6, ror #8
    50a8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    50ac:	2f62696c 	svccs	0x0062696c
    50b0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    50b4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    50b8:	68730068 	ldmdavs	r3!, {r3, r5, r6}^
    50bc:	6800755f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}
    50c0:	00686769 	rsbeq	r6, r8, r9, ror #14
    50c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50cc:	2f2e2e2f 	svccs	0x002e2e2f
    50d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50d8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    50dc:	2f62696c 	svccs	0x0062696c
    50e0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    50e4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    50e8:	5f732f68 	svcpl	0x00732f68
    50ec:	73626166 	cmnvc	r2, #-2147483623	; 0x80000019
    50f0:	5f00632e 	svcpl	0x0000632e
    50f4:	6370665f 	cmnvs	r0, #99614720	; 0x5f00000
    50f8:	7373616c 	cmnvc	r3, #108, 2
    50fc:	64796669 	ldrbtvs	r6, [r9], #-1641	; 0x669
    5100:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    5104:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5108:	6f785f6d 	svcvs	0x00785f6d
    510c:	006e6570 	rsbeq	r6, lr, r0, ror r5
    5110:	31677261 	cmncc	r7, r1, ror #4
    5114:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
    5118:	65720032 	ldrbvs	r0, [r2, #-50]!	; 0x32
    511c:	6c617674 	stclvs	6, cr7, [r1], #-464	; 0xfffffe30
    5120:	2f2e2e00 	svccs	0x002e2e00
    5124:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5128:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    512c:	2f2e2e2f 	svccs	0x002e2e2f
    5130:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5134:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5138:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    513c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5140:	616d2f6d 	cmnvs	sp, sp, ror #30
    5144:	772f6874 			; <UNDEFINED> instruction: 0x772f6874
    5148:	6973615f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    514c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5150:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5154:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5158:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    515c:	5f5f0065 	svcpl	0x005f0065
    5160:	65656569 	strbvs	r6, [r5, #-1385]!	; 0x569
    5164:	5f343537 	svcpl	0x00343537
    5168:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    516c:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    5170:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5174:	6f705f6d 	svcvs	0x00705f6d
    5178:	00786973 	rsbseq	r6, r8, r3, ror r9
    517c:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5180:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5184:	6976735f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    5188:	78650064 	stmdavc	r5!, {r2, r5, r6}^
    518c:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    5190:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    5194:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5198:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    519c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    51a0:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    51a4:	6d616e00 	stclvs	14, cr6, [r1, #-0]
    51a8:	5f5f0065 	svcpl	0x005f0065
    51ac:	696c6466 	stmdbvs	ip!, {r1, r2, r5, r6, sl, sp, lr}^
    51b0:	65765f62 	ldrbvs	r5, [r6, #-3938]!	; 0xf62
    51b4:	6f697372 	svcvs	0x00697372
    51b8:	5f5f006e 	svcpl	0x005f006e
    51bc:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    51c0:	616d006f 	cmnvs	sp, pc, rrx
    51c4:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    51c8:	69720072 	ldmdbvs	r2!, {r1, r4, r5, r6}^
    51cc:	5f00746e 	svcpl	0x0000746e
    51d0:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    51d4:	34353765 	ldrtcc	r3, [r5], #-1893	; 0x765
    51d8:	776f705f 			; <UNDEFINED> instruction: 0x776f705f
    51dc:	6e696600 	cdpvs	6, 6, cr6, cr9, cr0, {0}
    51e0:	00657469 	rsbeq	r7, r5, r9, ror #8
    51e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    51e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    51ec:	2f2e2e2f 	svccs	0x002e2e2f
    51f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    51f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    51f8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    51fc:	2f62696c 	svccs	0x0062696c
    5200:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5204:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5208:	5f772f68 	svcpl	0x00772f68
    520c:	2e776f70 	mrccs	15, 3, r6, cr7, cr0, {3}
    5210:	6c730063 	ldclvs	0, cr0, [r3], #-396	; 0xfffffe74
    5214:	7000755f 	andvc	r7, r0, pc, asr r5
    5218:	5f326f69 	svcpl	0x00326f69
    521c:	5f006968 	svcpl	0x00006968
    5220:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    5224:	34353765 	ldrtcc	r3, [r5], #-1893	; 0x765
    5228:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    522c:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
    5230:	6c5f326f 	lfmvs	f3, 2, [pc], {111}	; 0x6f
    5234:	2e2e006f 	cdpcs	0, 2, cr0, cr14, cr15, {3}
    5238:	2f2e2e2f 	svccs	0x002e2e2f
    523c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5240:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5244:	2f2e2e2f 	svccs	0x002e2e2f
    5248:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    524c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5250:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5254:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 50d4 <_Min_Stack_Size+0x4cd4>
    5258:	2f687461 	svccs	0x00687461
    525c:	73615f65 	cmnvc	r1, #404	; 0x194
    5260:	632e6e69 	teqvs	lr, #1680	; 0x690
    5264:	6f697000 	svcvs	0x00697000
    5268:	69685f34 	stmdbvs	r8!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    526c:	5f706300 	svcpl	0x00706300
    5270:	70630068 	rsbvc	r0, r3, r8, rrx
    5274:	73006c5f 	movwvc	r6, #3167	; 0xc5f
    5278:	626c6163 	rsbvs	r6, ip, #-1073741800	; 0xc0000018
    527c:	7669006e 	strbtvc	r0, [r9], -lr, rrx
    5280:	00326e6c 	eorseq	r6, r2, ip, ror #28
    5284:	6f72657a 	svcvs	0x0072657a
    5288:	73697900 	cmnvc	r9, #0, 18
    528c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5290:	356f7774 	strbcc	r7, [pc, #-1908]!	; 4b24 <_Min_Stack_Size+0x4724>
    5294:	77650033 			; <UNDEFINED> instruction: 0x77650033
    5298:	6c00755f 	cfstr32vs	mvfx7, [r0], {95}	; 0x5f
    529c:	685f3267 	ldmdavs	pc, {r0, r1, r2, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    52a0:	32676c00 	rsbcc	r6, r7, #0, 24
    52a4:	74006c5f 	strvc	r6, [r0], #-3167	; 0xc5f
    52a8:	00796e69 	rsbseq	r6, r9, r9, ror #28
    52ac:	685f7064 	ldmdavs	pc, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    52b0:	5f706400 	svcpl	0x00706400
    52b4:	2e2e006c 	cdpcs	0, 2, cr0, cr14, cr12, {3}
    52b8:	2f2e2e2f 	svccs	0x002e2e2f
    52bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    52c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    52c4:	2f2e2e2f 	svccs	0x002e2e2f
    52c8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    52cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    52d0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    52d4:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5154 <_Min_Stack_Size+0x4d54>
    52d8:	2f687461 	svccs	0x00687461
    52dc:	6f705f65 	svcvs	0x00705f65
    52e0:	00632e77 	rsbeq	r2, r3, r7, ror lr
    52e4:	6e6c7669 	cdpvs	6, 6, cr7, cr12, cr9, {3}
    52e8:	00685f32 	rsbeq	r5, r8, r2, lsr pc
    52ec:	6e6c7669 	cdpvs	6, 6, cr7, cr12, cr9, {3}
    52f0:	006c5f32 	rsbeq	r5, ip, r2, lsr pc
    52f4:	755f7769 	ldrbvc	r7, [pc, #-1897]	; 4b93 <_Min_Stack_Size+0x4793>
    52f8:	2f2e2e00 	svccs	0x002e2e00
    52fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5300:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5304:	2f2e2e2f 	svccs	0x002e2e2f
    5308:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    530c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5310:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5314:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5318:	616d2f6d 	cmnvs	sp, sp, ror #30
    531c:	652f6874 	strvs	r6, [pc, #-2164]!	; 4ab0 <_Min_Stack_Size+0x46b0>
    5320:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    5324:	00632e74 	rsbeq	r2, r3, r4, ror lr
    5328:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    532c:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5330:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5334:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    5338:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    533c:	312e322d 	teqcc	lr, sp, lsr #4
    5340:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5344:	30327469 	eorscc	r7, r2, r9, ror #8
    5348:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    534c:	312e3831 	teqcc	lr, r1, lsr r8
    5350:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5354:	622f6233 	eorvs	r6, pc, #805306371	; 0x30000003
    5358:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    535c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5360:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5364:	61652d65 	cmnvs	r5, r5, ror #26
    5368:	612f6962 	teqvs	pc, r2, ror #18
    536c:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5370:	2f6d2d65 	svccs	0x006d2d65
    5374:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    5378:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    537c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5380:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5384:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5388:	6f6d6d6f 	svcvs	0x006d6d6f
    538c:	2e2e006e 	cdpcs	0, 2, cr0, cr14, cr14, {3}
    5390:	2f2e2e2f 	svccs	0x002e2e2f
    5394:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5398:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    539c:	2f2e2e2f 	svccs	0x002e2e2f
    53a0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    53a4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    53a8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    53ac:	632f6d62 	teqvs	pc, #6272	; 0x1880
    53b0:	6f6d6d6f 	svcvs	0x006d6d6f
    53b4:	5f732f6e 	svcpl	0x00732f6e
    53b8:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    53bc:	632e6574 	teqvs	lr, #116, 10	; 0x1d000000
    53c0:	2f2e2e00 	svccs	0x002e2e00
    53c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    53cc:	2f2e2e2f 	svccs	0x002e2e2f
    53d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53d4:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    53d8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    53dc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    53e0:	6f632f6d 	svcvs	0x00632f6d
    53e4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    53e8:	665f732f 	ldrbvs	r7, [pc], -pc, lsr #6
    53ec:	616c6370 	smcvs	50736	; 0xc630
    53f0:	66697373 			; <UNDEFINED> instruction: 0x66697373
    53f4:	00632e79 	rsbeq	r2, r3, r9, ror lr
    53f8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5400:	2f2e2e2f 	svccs	0x002e2e2f
    5404:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5408:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    540c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5410:	2f62696c 	svccs	0x0062696c
    5414:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5418:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5364 <_Min_Stack_Size+0x4f64>
    541c:	2f6e6f6d 	svccs	0x006e6f6d
    5420:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5424:	65765f62 	ldrbvs	r5, [r6, #-3938]!	; 0xf62
    5428:	00632e72 	rsbeq	r2, r3, r2, ror lr
    542c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5430:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5434:	2f2e2e2f 	svccs	0x002e2e2f
    5438:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    543c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5440:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5444:	2f62696c 	svccs	0x0062696c
    5448:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    544c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5398 <_Min_Stack_Size+0x4f98>
    5450:	2f6e6f6d 	svccs	0x006e6f6d
    5454:	616d5f73 	smcvs	54771	; 0xd5f3
    5458:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    545c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    5460:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5464:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5468:	2f2e2e2f 	svccs	0x002e2e2f
    546c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5470:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5474:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5478:	2f62696c 	svccs	0x0062696c
    547c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5480:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 53cc <_Min_Stack_Size+0x4fcc>
    5484:	2f6e6f6d 	svccs	0x006e6f6d
    5488:	616e5f73 	smcvs	58867	; 0xe5f3
    548c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5490:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5494:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5498:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    549c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    54a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    54a4:	312e322d 	teqcc	lr, sp, lsr #4
    54a8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    54ac:	30327469 	eorscc	r7, r2, r9, ror #8
    54b0:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    54b4:	312e3831 	teqcc	lr, r1, lsr r8
    54b8:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    54bc:	622f6233 	eorvs	r6, pc, #805306371	; 0x30000003
    54c0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    54c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    54c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    54cc:	61652d65 	cmnvs	r5, r5, ror #26
    54d0:	612f6962 	teqvs	pc, r2, ror #18
    54d4:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    54d8:	2f6d2d65 	svccs	0x006d2d65
    54dc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    54e0:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    54e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    54e8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    54ec:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 536c <_Min_Stack_Size+0x4f6c>
    54f0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    54f4:	612f656e 	teqvs	pc, lr, ror #10
    54f8:	54006d72 	strpl	r6, [r0], #-3442	; 0xd72
    54fc:	32354f57 	eorscc	r4, r5, #348	; 0x15c
    5500:	2f2e2e00 	svccs	0x002e2e00
    5504:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5508:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    550c:	2f2e2e2f 	svccs	0x002e2e2f
    5510:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5514:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5518:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    551c:	2f62696c 	svccs	0x0062696c
    5520:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5524:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5528:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    552c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5530:	725f732f 	subsvc	r7, pc, #-1140850688	; 0xbc000000
    5534:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5538:	77740063 	ldrbvc	r0, [r4, -r3, rrx]!
    553c:	0034356f 	eorseq	r3, r4, pc, ror #10
    5540:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5544:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5548:	2f2e2e2f 	svccs	0x002e2e2f
    554c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5550:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5554:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5558:	2f62696c 	svccs	0x0062696c
    555c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5560:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 54ac <_Min_Stack_Size+0x50ac>
    5564:	2f6e6f6d 	svccs	0x006e6f6d
    5568:	63735f73 	cmnvs	r3, #460	; 0x1cc
    556c:	6e626c61 	cdpvs	12, 6, cr6, cr2, cr1, {3}
    5570:	6300632e 	movwvs	r6, #814	; 0x32e
    5574:	7379706f 	cmnvc	r9, #111	; 0x6f
    5578:	006e6769 	rsbeq	r6, lr, r9, ror #14
    557c:	6d6f7774 	stclvs	7, cr7, [pc, #-464]!	; 53b4 <_Min_Stack_Size+0x4fb4>
    5580:	2e003435 	cfmvdhrcs	mvd0, r3
    5584:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5588:	2f2e2e2f 	svccs	0x002e2e2f
    558c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5590:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5594:	2f2e2e2f 	svccs	0x002e2e2f
    5598:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    559c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5400 <_Min_Stack_Size+0x5000>
    55a0:	2f6d6269 	svccs	0x006d6269
    55a4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    55a8:	732f6e6f 	teqvc	pc, #1776	; 0x6f0
    55ac:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    55b0:	67697379 			; <UNDEFINED> instruction: 0x67697379
    55b4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    55b8:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xf5f
    55bc:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    55c0:	5f007469 	svcpl	0x00007469
    55c4:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    55c8:	5f003273 	svcpl	0x00003273
    55cc:	656c626d 	strbvs	r6, [ip, #-621]!	; 0x26d
    55d0:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xf6e
    55d4:	00657461 	rsbeq	r7, r5, r1, ror #8
    55d8:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xc5f
    55dc:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xf61
    55e0:	6f5f0066 	svcvs	0x005f0066
    55e4:	745f6666 	ldrbvc	r6, [pc], #-1638	; 55ec <_Min_Stack_Size+0x51ec>
    55e8:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
    55ec:	5f006863 	svcpl	0x00006863
    55f0:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
    55f4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    55f8:	61765f5f 	cmnvs	r6, pc, asr pc
    55fc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    5600:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    5604:	2f006675 	svccs	0x00006675
    5608:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    560c:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5610:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5614:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5618:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    561c:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5620:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5624:	31303274 	teqcc	r0, r4, ror r2
    5628:	31383034 	teqcc	r8, r4, lsr r0
    562c:	61312e38 	teqvs	r1, r8, lsr lr
    5630:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5634:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xf62
    5638:	2f646c69 	svccs	0x00646c69
    563c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5640:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    5644:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5648:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    564c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    5650:	732f6d2d 	teqvc	pc, #2880	; 0xb40
    5654:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    5658:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xf70
    565c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5660:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5664:	72652f63 	rsbvc	r2, r5, #396	; 0x18c
    5668:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
    566c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    5670:	5f746c75 	svcpl	0x00746c75
    5674:	6f5f006b 	svcvs	0x005f006b
    5678:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    567c:	5f5f0074 	svcpl	0x005f0074
    5680:	5f006673 	svcpl	0x00006673
    5684:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    5688:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    568c:	5f006675 	svcpl	0x00006675
    5690:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    5694:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    5698:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
    569c:	00657461 	rsbeq	r7, r5, r1, ror #8
    56a0:	616c665f 	cmnvs	ip, pc, asr r6
    56a4:	5f007367 	svcpl	0x00007367
    56a8:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
    56ac:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
    56b0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    56b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    56b8:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    56bc:	635f5f00 	cmpvs	pc, #0, 30
    56c0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    56c4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 56cc <_Min_Stack_Size+0x52cc>
    56c8:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xf6d
    56cc:	5f007961 	svcpl	0x00007961
    56d0:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xc67
    56d4:	626d5f00 	rsbvs	r5, sp, #0, 30
    56d8:	6f747273 	svcvs	0x00747273
    56dc:	5f736377 	svcpl	0x00736377
    56e0:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    56e4:	725f0065 	subsvc	r0, pc, #101	; 0x65
    56e8:	5f003834 	svcpl	0x00003834
    56ec:	6f647473 	svcvs	0x00647473
    56f0:	5f007475 	svcpl	0x00007475
    56f4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    56f8:	5f007469 	svcpl	0x00007469
    56fc:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
    5700:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
    5704:	635f0079 	cmpvs	pc, #121	; 0x79
    5708:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0x476
    570c:	6e5f006e 	cdpvs	0, 5, cr0, cr15, cr14, {3}
    5710:	00667562 	rsbeq	r7, r6, r2, ror #10
    5714:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5718:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xf4b
    571c:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    5720:	5f455649 	svcpl	0x00455649
    5724:	6e5f0054 	mrcvs	0, 2, r0, cr15, cr4, {2}
    5728:	73626f69 	cmnvc	r2, #420	; 0x1a4
    572c:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
    5730:	00454c49 	subeq	r4, r5, r9, asr #24
    5734:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    5738:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
    573c:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    5740:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5748 <_Min_Stack_Size+0x5348>
    5744:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    5748:	735f006e 	cmpvc	pc, #110	; 0x6e
    574c:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
    5750:	00636e75 	rsbeq	r6, r3, r5, ror lr
    5754:	616d6e5f 	cmnvs	sp, pc, asr lr
    5758:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    575c:	72665f00 	rsbvc	r5, r6, #0, 30
    5760:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    5764:	5f007473 	svcpl	0x00007473
    5768:	00736e66 	rsbseq	r6, r3, r6, ror #28
    576c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    5770:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    5774:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 577c <_Min_Stack_Size+0x537c>
    5778:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xf6d
    577c:	5f007961 	svcpl	0x00007961
    5780:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
    5784:	5f007367 	svcpl	0x00007367
    5788:	73626f69 	cmnvc	r2, #420	; 0x1a4
    578c:	6f6c5f00 	svcvs	0x006c5f00
    5790:	5f006b63 	svcpl	0x00006b63
    5794:	746c756d 	strbtvc	r7, [ip], #-1389	; 0x56d
    5798:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 57a0 <_Min_Stack_Size+0x53a0>
    579c:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    57a0:	00747364 	rsbseq	r7, r4, r4, ror #6
    57a4:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0x15f
    57a8:	30746978 	rsbscc	r6, r4, r8, ror r9
    57ac:	6c625f00 	stclvs	15, cr5, [r2], #-0
    57b0:	7a69736b 	bvc	1a62564 <_Min_Stack_Size+0x1a62164>
    57b4:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    57b8:	7079746e 	rsbsvc	r7, r9, lr, ror #8
    57bc:	5f007365 	svcpl	0x00007365
    57c0:	736f7066 	cmnvc	pc, #102	; 0x66
    57c4:	5f00745f 	svcpl	0x0000745f
    57c8:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    57cc:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    57d0:	6b636f6c 	blvs	18e1588 <_Min_Stack_Size+0x18e1188>
    57d4:	5f00745f 	svcpl	0x0000745f
    57d8:	5f6d745f 	svcpl	0x006d745f
    57dc:	00636573 	rsbeq	r6, r3, r3, ror r5
    57e0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    57e4:	756f685f 	strbvc	r6, [pc, #-2143]!	; 4f8d <_Min_Stack_Size+0x4b8d>
    57e8:	725f0072 	subsvc	r0, pc, #114	; 0x72
    57ec:	00646165 	rsbeq	r6, r4, r5, ror #2
    57f0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    57f4:	5f006674 	svcpl	0x00006674
    57f8:	00733570 	rsbseq	r3, r3, r0, ror r5
    57fc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0x35f
    5800:	00727265 	rsbseq	r7, r2, r5, ror #4
    5804:	63775f5f 	cmnvs	r7, #380	; 0x17c
    5808:	2e006268 	cdpcs	2, 0, cr6, cr0, cr8, {3}
    580c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5810:	2f2e2e2f 	svccs	0x002e2e2f
    5814:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5818:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    581c:	2f2e2e2f 	svccs	0x002e2e2f
    5820:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5824:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5688 <_Min_Stack_Size+0x5288>
    5828:	2f636269 	svccs	0x00636269
    582c:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    5830:	72652f6f 	rsbvc	r2, r5, #444	; 0x1bc
    5834:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    5838:	685f0063 	ldmdavs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
    583c:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    5840:	5f006f6e 	svcpl	0x00006f6e
    5844:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
    5848:	5f006575 	svcpl	0x00006575
    584c:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; 49e5 <_Min_Stack_Size+0x45e5>
    5850:	5f746978 	svcpl	0x00746978
    5854:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    5858:	626d5f00 	rsbvs	r5, sp, #0, 30
    585c:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
    5860:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xf63
    5864:	00657461 	rsbeq	r7, r5, r1, ror #8
    5868:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0x35f
    586c:	00667562 	rsbeq	r7, r6, r2, ror #10
    5870:	6f6f635f 	svcvs	0x006f635f
    5874:	0065696b 	rsbeq	r6, r5, fp, ror #18
    5878:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    587c:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    5880:	00656c69 	rsbeq	r6, r5, r9, ror #24
    5884:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    5888:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
    588c:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    5890:	5f006d61 	svcpl	0x00006d61
    5894:	73756e75 	cmnvc	r5, #1872	; 0x750
    5898:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    589c:	00646e61 	rsbeq	r6, r4, r1, ror #28
    58a0:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    58a4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 58ac <_Min_Stack_Size+0x54ac>
    58a8:	755f006d 	ldrbvc	r0, [pc, #-109]	; 5843 <_Min_Stack_Size+0x5443>
    58ac:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0x56e
    58b0:	6d5f0064 	ldclvs	0, cr0, [pc, #-400]	; 5728 <_Min_Stack_Size+0x5328>
    58b4:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    58b8:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xf63
    58bc:	00657461 	rsbeq	r7, r5, r1, ror #8
    58c0:	746e6977 	strbtvc	r6, [lr], #-2423	; 0x977
    58c4:	5f00745f 	svcpl	0x0000745f
    58c8:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
    58cc:	735f6e65 	cmpvc	pc, #1616	; 0x650
    58d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    58d4:	75635f00 	strbvc	r5, [r3, #-3840]!	; 0xf00
    58d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    58dc:	61635f74 	smcvs	13812	; 0x35f4
    58e0:	6f676574 	svcvs	0x00676574
    58e4:	5f007972 	svcpl	0x00007972
    58e8:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    58ec:	5f006178 	svcpl	0x00006178
    58f0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    58f4:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    58f8:	626d5f00 	rsbvs	r5, sp, #0, 30
    58fc:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    5900:	00745f65 	rsbseq	r5, r4, r5, ror #30
    5904:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
    5908:	00746e69 	rsbseq	r6, r4, r9, ror #28
    590c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    5910:	00736477 	rsbseq	r6, r3, r7, ror r4
    5914:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    5918:	6165795f 	cmnvs	r5, pc, asr r9
    591c:	735f0072 	cmpvc	pc, #114	; 0x72
    5920:	6f747274 	svcvs	0x00747274
    5924:	616c5f6b 	cmnvs	ip, fp, ror #30
    5928:	5f007473 	svcpl	0x00007473
    592c:	64656573 	strbtvs	r6, [r5], #-1395	; 0x573
    5930:	61725f00 	cmnvs	r2, r0, lsl #30
    5934:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
    5938:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5940 <_Min_Stack_Size+0x5540>
    593c:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xf6d
    5940:	5f007961 	svcpl	0x00007961
    5944:	6f4c555f 	svcvs	0x004c555f
    5948:	5f00676e 	svcpl	0x0000676e
    594c:	6b656573 	blvs	195ef20 <_Min_Stack_Size+0x195eb20>
    5950:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xf00
    5954:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    5958:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5960 <_Min_Stack_Size+0x5560>
    595c:	6f6d5f6d 	svcvs	0x006d5f6d
    5960:	615f006e 	cmpvs	pc, lr, rrx
    5964:	5f006464 	svcpl	0x00006464
    5968:	00636e69 	rsbeq	r6, r3, r9, ror #28
    596c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0x95f
    5970:	63775f00 	cmnvs	r7, #0, 30
    5974:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    5978:	6174735f 	cmnvs	r4, pc, asr r3
    597c:	5f006574 	svcpl	0x00006574
    5980:	5f6f7364 	svcpl	0x006f7364
    5984:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    5988:	5f00656c 	svcpl	0x0000656c
    598c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    5990:	61725f00 	cmnvs	r2, r0, lsl #30
    5994:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
    5998:	00747865 	rsbseq	r7, r4, r5, ror #16
    599c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0x35f
    59a0:	5f006e69 	svcpl	0x00006e69
    59a4:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    59a8:	5f746e65 	svcpl	0x00746e65
    59ac:	61636f6c 	cmnvs	r3, ip, ror #30
    59b0:	5f00656c 	svcpl	0x0000656c
    59b4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    59b8:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
    59bc:	6f747263 	svcvs	0x00747263
    59c0:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    59c4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    59c8:	62755f00 	rsbsvs	r5, r5, #0, 30
    59cc:	5f006675 	svcpl	0x00006675
    59d0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    59d4:	73615f00 	cmnvc	r1, #0, 30
    59d8:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    59dc:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    59e0:	5f5f0066 	svcpl	0x005f0066
    59e4:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    59e8:	6e5f0045 	cdpvs	0, 5, cr0, cr15, cr5, {2}
    59ec:	69007765 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}
    59f0:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    59f4:	61645f65 	cmnvs	r4, r5, ror #30
    59f8:	2f006174 	svccs	0x00006174
    59fc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5a00:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5a04:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5a08:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a0c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5a10:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5a14:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5a18:	31303274 	teqcc	r0, r4, ror r2
    5a1c:	31383034 	teqcc	r8, r4, lsr r0
    5a20:	61312e38 	teqvs	r1, r8, lsr lr
    5a24:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5a28:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xf62
    5a2c:	2f646c69 	svccs	0x00646c69
    5a30:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5a34:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    5a38:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5a3c:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    5a40:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    5a44:	732f6d2d 	teqvc	pc, #2880	; 0xb40
    5a48:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    5a4c:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xf70
    5a50:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5a54:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5a58:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
    5a5c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    5a60:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a64:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a68:	2f2e2e2f 	svccs	0x002e2e2f
    5a6c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a74:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a78:	2f62696c 	svccs	0x0062696c
    5a7c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5a80:	6565722f 	strbvs	r7, [r5, #-559]!	; 0x22f
    5a84:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    5a88:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    5a8c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    5a90:	6f6c675f 	svcvs	0x006c675f
    5a94:	5f6c6162 	svcpl	0x006c6162
    5a98:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xd69
    5a9c:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    5aa0:	Address 0x0000000000005aa0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
   c:	62753831 	rsbsvs	r3, r5, #3211264	; 0x310000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	32312b32 	eorscc	r2, r1, #51200	; 0xc800
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00332e38 	eorseq	r2, r3, r8, lsr lr
  20:	3a434347 	bcc	10d0d44 <_Min_Stack_Size+0x10d0944>
  24:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
  28:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
  2c:	75627537 	strbvc	r7, [r2, #-1335]!	; 0x537
  30:	3175746e 	cmncc	r5, lr, ror #8
  34:	2930312b 	ldmdbcs	r0!, {r0, r1, r3, r5, r8, ip, sp}
  38:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  3c:	Address 0x000000000000003c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      1c:	00000040 	andeq	r0, r0, r0, asr #32
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      2c:	00000007 	andeq	r0, r0, r7
      30:	0000000c 	andeq	r0, r0, ip
      34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      38:	7c020001 	stcvc	0, cr0, [r2], {1}
      3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      40:	0000001c 	andeq	r0, r0, ip, lsl r0
      44:	00000030 	andeq	r0, r0, r0, lsr r0
      48:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
      4c:	00000048 	andeq	r0, r0, r8, asr #32
      50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      54:	41018e02 	tstmi	r1, r2, lsl #28
      58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      5c:	00000007 	andeq	r0, r0, r7
      60:	0000001c 	andeq	r0, r0, ip, lsl r0
      64:	00000030 	andeq	r0, r0, r0, lsr r0
      68:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
      6c:	00000124 	andeq	r0, r0, r4, lsr #2
      70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      74:	41018e02 	tstmi	r1, r2, lsl #28
      78:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
      7c:	00000007 	andeq	r0, r0, r7
      80:	00000024 	andeq	r0, r0, r4, lsr #32
      84:	00000030 	andeq	r0, r0, r0, lsr r0
      88:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
      8c:	000003ec 	andeq	r0, r0, ip, ror #7
      90:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
      94:	86068507 	strhi	r8, [r6], -r7, lsl #10
      98:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
      9c:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
      a0:	600e4101 	andvs	r4, lr, r1, lsl #2
      a4:	00070d41 	andeq	r0, r7, r1, asr #26
      a8:	0000000c 	andeq	r0, r0, ip
      ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      b0:	7c020001 	stcvc	0, cr0, [r2], {1}
      b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      b8:	00000018 	andeq	r0, r0, r8, lsl r0
      bc:	000000a8 	andeq	r0, r0, r8, lsr #1
      c0:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
      c4:	00000068 	andeq	r0, r0, r8, rrx
      c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      cc:	41018e02 	tstmi	r1, r2, lsl #28
      d0:	0000070d 	andeq	r0, r0, sp, lsl #14
      d4:	00000018 	andeq	r0, r0, r8, lsl r0
      d8:	000000a8 	andeq	r0, r0, r8, lsr #1
      dc:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
      e0:	000000f8 	strdeq	r0, [r0], -r8
      e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      e8:	200e4101 	andcs	r4, lr, r1, lsl #2
      ec:	00070d41 	andeq	r0, r7, r1, asr #26
      f0:	00000018 	andeq	r0, r0, r8, lsl r0
      f4:	000000a8 	andeq	r0, r0, r8, lsr #1
      f8:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
      fc:	000000f4 	strdeq	r0, [r0], -r4
     100:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     104:	100e4101 	andne	r4, lr, r1, lsl #2
     108:	00070d41 	andeq	r0, r7, r1, asr #26
     10c:	0000000c 	andeq	r0, r0, ip
     110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     114:	7c020001 	stcvc	0, cr0, [r2], {1}
     118:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     11c:	00000018 	andeq	r0, r0, r8, lsl r0
     120:	0000010c 	andeq	r0, r0, ip, lsl #2
     124:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
     128:	00000024 	andeq	r0, r0, r4, lsr #32
     12c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     130:	100e4101 	andne	r4, lr, r1, lsl #2
     134:	00070d41 	andeq	r0, r7, r1, asr #26
     138:	00000018 	andeq	r0, r0, r8, lsl r0
     13c:	0000010c 	andeq	r0, r0, ip, lsl #2
     140:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
     144:	000000bc 	strheq	r0, [r0], -ip
     148:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     14c:	180e4101 	stmdane	lr, {r0, r8, lr}
     150:	00070d41 	andeq	r0, r7, r1, asr #26
     154:	00000018 	andeq	r0, r0, r8, lsl r0
     158:	0000010c 	andeq	r0, r0, ip, lsl #2
     15c:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
     160:	0000002c 	andeq	r0, r0, ip, lsr #32
     164:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     168:	100e4101 	andne	r4, lr, r1, lsl #2
     16c:	00070d41 	andeq	r0, r7, r1, asr #26
     170:	00000018 	andeq	r0, r0, r8, lsl r0
     174:	0000010c 	andeq	r0, r0, ip, lsl #2
     178:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
     17c:	00000040 	andeq	r0, r0, r0, asr #32
     180:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     184:	100e4101 	andne	r4, lr, r1, lsl #2
     188:	00070d41 	andeq	r0, r7, r1, asr #26
     18c:	00000018 	andeq	r0, r0, r8, lsl r0
     190:	0000010c 	andeq	r0, r0, ip, lsl #2
     194:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
     198:	00000038 	andeq	r0, r0, r8, lsr r0
     19c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1a0:	100e4101 	andne	r4, lr, r1, lsl #2
     1a4:	00070d41 	andeq	r0, r7, r1, asr #26
     1a8:	0000000c 	andeq	r0, r0, ip
     1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
     1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
     1c0:	080014c0 	stmdaeq	r0, {r6, r7, sl, ip}
     1c4:	00000164 	andeq	r0, r0, r4, ror #2
     1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1cc:	41018e02 	tstmi	r1, r2, lsl #28
     1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1d4:	00000007 	andeq	r0, r0, r7
     1d8:	00000018 	andeq	r0, r0, r8, lsl r0
     1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
     1e0:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     1e4:	0000011a 	andeq	r0, r0, sl, lsl r1
     1e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1ec:	200e4101 	andcs	r4, lr, r1, lsl #2
     1f0:	00070d41 	andeq	r0, r7, r1, asr #26
     1f4:	00000018 	andeq	r0, r0, r8, lsl r0
     1f8:	000001a8 	andeq	r0, r0, r8, lsr #3
     1fc:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
     200:	00000032 	andeq	r0, r0, r2, lsr r0
     204:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     208:	100e4101 	andne	r4, lr, r1, lsl #2
     20c:	00070d41 	andeq	r0, r7, r1, asr #26
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	000001a8 	andeq	r0, r0, r8, lsr #3
     218:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     21c:	00000042 	andeq	r0, r0, r2, asr #32
     220:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     224:	180e4101 	stmdane	lr, {r0, r8, lr}
     228:	00070d41 	andeq	r0, r7, r1, asr #26
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	000001a8 	andeq	r0, r0, r8, lsr #3
     234:	080017b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip}
     238:	00000034 	andeq	r0, r0, r4, lsr r0
     23c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     240:	180e4101 	stmdane	lr, {r0, r8, lr}
     244:	00070d41 	andeq	r0, r7, r1, asr #26
     248:	00000018 	andeq	r0, r0, r8, lsl r0
     24c:	000001a8 	andeq	r0, r0, r8, lsr #3
     250:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
     254:	0000001a 	andeq	r0, r0, sl, lsl r0
     258:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     25c:	100e4101 	andne	r4, lr, r1, lsl #2
     260:	00070d41 	andeq	r0, r7, r1, asr #26
     264:	00000018 	andeq	r0, r0, r8, lsl r0
     268:	000001a8 	andeq	r0, r0, r8, lsr #3
     26c:	08001808 	stmdaeq	r0, {r3, fp, ip}
     270:	00000034 	andeq	r0, r0, r4, lsr r0
     274:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     278:	180e4101 	stmdane	lr, {r0, r8, lr}
     27c:	00070d41 	andeq	r0, r7, r1, asr #26
     280:	00000018 	andeq	r0, r0, r8, lsl r0
     284:	000001a8 	andeq	r0, r0, r8, lsr #3
     288:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
     28c:	0000001a 	andeq	r0, r0, sl, lsl r0
     290:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     294:	100e4101 	andne	r4, lr, r1, lsl #2
     298:	00070d41 	andeq	r0, r7, r1, asr #26
     29c:	00000018 	andeq	r0, r0, r8, lsl r0
     2a0:	000001a8 	andeq	r0, r0, r8, lsr #3
     2a4:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
     2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2b0:	100e4101 	andne	r4, lr, r1, lsl #2
     2b4:	00070d41 	andeq	r0, r7, r1, asr #26
     2b8:	00000018 	andeq	r0, r0, r8, lsl r0
     2bc:	000001a8 	andeq	r0, r0, r8, lsr #3
     2c0:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
     2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2cc:	100e4101 	andne	r4, lr, r1, lsl #2
     2d0:	00070d41 	andeq	r0, r7, r1, asr #26
     2d4:	00000018 	andeq	r0, r0, r8, lsl r0
     2d8:	000001a8 	andeq	r0, r0, r8, lsr #3
     2dc:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
     2e0:	0000002e 	andeq	r0, r0, lr, lsr #32
     2e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2e8:	100e4101 	andne	r4, lr, r1, lsl #2
     2ec:	00070d41 	andeq	r0, r7, r1, asr #26
     2f0:	00000018 	andeq	r0, r0, r8, lsl r0
     2f4:	000001a8 	andeq	r0, r0, r8, lsr #3
     2f8:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     304:	100e4101 	andne	r4, lr, r1, lsl #2
     308:	00070d41 	andeq	r0, r7, r1, asr #26
     30c:	00000018 	andeq	r0, r0, r8, lsl r0
     310:	000001a8 	andeq	r0, r0, r8, lsr #3
     314:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
     318:	00000022 	andeq	r0, r0, r2, lsr #32
     31c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     320:	100e4101 	andne	r4, lr, r1, lsl #2
     324:	00070d41 	andeq	r0, r7, r1, asr #26
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	000001a8 	andeq	r0, r0, r8, lsr #3
     330:	08001900 	stmdaeq	r0, {r8, fp, ip}
     334:	0000008c 	andeq	r0, r0, ip, lsl #1
     338:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     33c:	180e4101 	stmdane	lr, {r0, r8, lr}
     340:	00070d41 	andeq	r0, r7, r1, asr #26
     344:	0000000c 	andeq	r0, r0, ip
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     354:	00000014 	andeq	r0, r0, r4, lsl r0
     358:	00000344 	andeq	r0, r0, r4, asr #6
     35c:	0800198c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip}
     360:	00000070 	andeq	r0, r0, r0, ror r0
     364:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     368:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     36c:	00000018 	andeq	r0, r0, r8, lsl r0
     370:	00000344 	andeq	r0, r0, r4, asr #6
     374:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     378:	00000024 	andeq	r0, r0, r4, lsr #32
     37c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     380:	100e4101 	andne	r4, lr, r1, lsl #2
     384:	00070d41 	andeq	r0, r7, r1, asr #26
     388:	0000001c 	andeq	r0, r0, ip, lsl r0
     38c:	00000344 	andeq	r0, r0, r4, asr #6
     390:	08001a20 	stmdaeq	r0, {r5, r9, fp, ip}
     394:	00000050 	andeq	r0, r0, r0, asr r0
     398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     39c:	41018e02 	tstmi	r1, r2, lsl #28
     3a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     3a4:	00000007 	andeq	r0, r0, r7
     3a8:	00000018 	andeq	r0, r0, r8, lsl r0
     3ac:	00000344 	andeq	r0, r0, r4, asr #6
     3b0:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     3b4:	0000003c 	andeq	r0, r0, ip, lsr r0
     3b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3bc:	180e4101 	stmdane	lr, {r0, r8, lr}
     3c0:	00070d41 	andeq	r0, r7, r1, asr #26
     3c4:	00000018 	andeq	r0, r0, r8, lsl r0
     3c8:	00000344 	andeq	r0, r0, r4, asr #6
     3cc:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
     3d0:	00000020 	andeq	r0, r0, r0, lsr #32
     3d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3d8:	100e4101 	andne	r4, lr, r1, lsl #2
     3dc:	00070d41 	andeq	r0, r7, r1, asr #26
     3e0:	00000018 	andeq	r0, r0, r8, lsl r0
     3e4:	00000344 	andeq	r0, r0, r4, asr #6
     3e8:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
     3ec:	00000040 	andeq	r0, r0, r0, asr #32
     3f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3f4:	100e4101 	andne	r4, lr, r1, lsl #2
     3f8:	00070d41 	andeq	r0, r7, r1, asr #26
     3fc:	00000018 	andeq	r0, r0, r8, lsl r0
     400:	00000344 	andeq	r0, r0, r4, asr #6
     404:	08001b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip}
     408:	00000020 	andeq	r0, r0, r0, lsr #32
     40c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     410:	100e4101 	andne	r4, lr, r1, lsl #2
     414:	00070d41 	andeq	r0, r7, r1, asr #26
     418:	00000018 	andeq	r0, r0, r8, lsl r0
     41c:	00000344 	andeq	r0, r0, r4, asr #6
     420:	08001b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip}
     424:	0000003c 	andeq	r0, r0, ip, lsr r0
     428:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     42c:	180e4101 	stmdane	lr, {r0, r8, lr}
     430:	00070d41 	andeq	r0, r7, r1, asr #26
     434:	00000018 	andeq	r0, r0, r8, lsl r0
     438:	00000344 	andeq	r0, r0, r4, asr #6
     43c:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
     440:	00000020 	andeq	r0, r0, r0, lsr #32
     444:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     448:	100e4101 	andne	r4, lr, r1, lsl #2
     44c:	00070d41 	andeq	r0, r7, r1, asr #26
     450:	00000018 	andeq	r0, r0, r8, lsl r0
     454:	00000344 	andeq	r0, r0, r4, asr #6
     458:	08001b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip}
     45c:	00000030 	andeq	r0, r0, r0, lsr r0
     460:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     464:	180e4101 	stmdane	lr, {r0, r8, lr}
     468:	00070d41 	andeq	r0, r7, r1, asr #26
     46c:	00000018 	andeq	r0, r0, r8, lsl r0
     470:	00000344 	andeq	r0, r0, r4, asr #6
     474:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
     478:	00000020 	andeq	r0, r0, r0, lsr #32
     47c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     480:	100e4101 	andne	r4, lr, r1, lsl #2
     484:	00070d41 	andeq	r0, r7, r1, asr #26
     488:	00000018 	andeq	r0, r0, r8, lsl r0
     48c:	00000344 	andeq	r0, r0, r4, asr #6
     490:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
     494:	00000030 	andeq	r0, r0, r0, lsr r0
     498:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     49c:	180e4101 	stmdane	lr, {r0, r8, lr}
     4a0:	00070d41 	andeq	r0, r7, r1, asr #26
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000344 	andeq	r0, r0, r4, asr #6
     4ac:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
     4b0:	00000020 	andeq	r0, r0, r0, lsr #32
     4b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4b8:	100e4101 	andne	r4, lr, r1, lsl #2
     4bc:	00070d41 	andeq	r0, r7, r1, asr #26
     4c0:	00000018 	andeq	r0, r0, r8, lsl r0
     4c4:	00000344 	andeq	r0, r0, r4, asr #6
     4c8:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
     4cc:	00000020 	andeq	r0, r0, r0, lsr #32
     4d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4d4:	100e4101 	andne	r4, lr, r1, lsl #2
     4d8:	00070d41 	andeq	r0, r7, r1, asr #26
     4dc:	00000018 	andeq	r0, r0, r8, lsl r0
     4e0:	00000344 	andeq	r0, r0, r4, asr #6
     4e4:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
     4e8:	0000003c 	andeq	r0, r0, ip, lsr r0
     4ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     4f4:	00070d41 	andeq	r0, r7, r1, asr #26
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	00000344 	andeq	r0, r0, r4, asr #6
     500:	08001c84 	stmdaeq	r0, {r2, r7, sl, fp, ip}
     504:	0000003c 	andeq	r0, r0, ip, lsr r0
     508:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     50c:	180e4101 	stmdane	lr, {r0, r8, lr}
     510:	00070d41 	andeq	r0, r7, r1, asr #26
     514:	00000018 	andeq	r0, r0, r8, lsl r0
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
     520:	00000038 	andeq	r0, r0, r8, lsr r0
     524:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     528:	180e4101 	stmdane	lr, {r0, r8, lr}
     52c:	00070d41 	andeq	r0, r7, r1, asr #26
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	00000344 	andeq	r0, r0, r4, asr #6
     538:	08001cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip}
     53c:	00000020 	andeq	r0, r0, r0, lsr #32
     540:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     548:	00000018 	andeq	r0, r0, r8, lsl r0
     54c:	00000344 	andeq	r0, r0, r4, asr #6
     550:	08001d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip}
     554:	00000038 	andeq	r0, r0, r8, lsr r0
     558:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     55c:	180e4101 	stmdane	lr, {r0, r8, lr}
     560:	00070d41 	andeq	r0, r7, r1, asr #26
     564:	00000018 	andeq	r0, r0, r8, lsl r0
     568:	00000344 	andeq	r0, r0, r4, asr #6
     56c:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
     570:	00000038 	andeq	r0, r0, r8, lsr r0
     574:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     578:	180e4101 	stmdane	lr, {r0, r8, lr}
     57c:	00070d41 	andeq	r0, r7, r1, asr #26
     580:	00000018 	andeq	r0, r0, r8, lsl r0
     584:	00000344 	andeq	r0, r0, r4, asr #6
     588:	08001d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip}
     58c:	00000038 	andeq	r0, r0, r8, lsr r0
     590:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     594:	180e4101 	stmdane	lr, {r0, r8, lr}
     598:	00070d41 	andeq	r0, r7, r1, asr #26
     59c:	00000018 	andeq	r0, r0, r8, lsl r0
     5a0:	00000344 	andeq	r0, r0, r4, asr #6
     5a4:	08001dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip}
     5a8:	00000154 	andeq	r0, r0, r4, asr r1
     5ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5b0:	280e4101 	stmdacs	lr, {r0, r8, lr}
     5b4:	00070d41 	andeq	r0, r7, r1, asr #26
     5b8:	00000018 	andeq	r0, r0, r8, lsl r0
     5bc:	00000344 	andeq	r0, r0, r4, asr #6
     5c0:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
     5c4:	0000005c 	andeq	r0, r0, ip, asr r0
     5c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     5d0:	00070d41 	andeq	r0, r7, r1, asr #26
     5d4:	00000018 	andeq	r0, r0, r8, lsl r0
     5d8:	00000344 	andeq	r0, r0, r4, asr #6
     5dc:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
     5e0:	00000020 	andeq	r0, r0, r0, lsr #32
     5e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5e8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	00000018 	andeq	r0, r0, r8, lsl r0
     5f4:	00000344 	andeq	r0, r0, r4, asr #6
     5f8:	08001f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip}
     5fc:	00000020 	andeq	r0, r0, r0, lsr #32
     600:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     604:	100e4101 	andne	r4, lr, r1, lsl #2
     608:	00070d41 	andeq	r0, r7, r1, asr #26
     60c:	00000018 	andeq	r0, r0, r8, lsl r0
     610:	00000344 	andeq	r0, r0, r4, asr #6
     614:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     620:	100e4101 	andne	r4, lr, r1, lsl #2
     624:	00070d41 	andeq	r0, r7, r1, asr #26
     628:	00000018 	andeq	r0, r0, r8, lsl r0
     62c:	00000344 	andeq	r0, r0, r4, asr #6
     630:	08001fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip}
     634:	0000003c 	andeq	r0, r0, ip, lsr r0
     638:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     63c:	180e4101 	stmdane	lr, {r0, r8, lr}
     640:	00070d41 	andeq	r0, r7, r1, asr #26
     644:	00000018 	andeq	r0, r0, r8, lsl r0
     648:	00000344 	andeq	r0, r0, r4, asr #6
     64c:	08002008 	stmdaeq	r0, {r3, sp}
     650:	00000040 	andeq	r0, r0, r0, asr #32
     654:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     658:	180e4101 	stmdane	lr, {r0, r8, lr}
     65c:	00070d41 	andeq	r0, r7, r1, asr #26
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	00000344 	andeq	r0, r0, r4, asr #6
     668:	08002048 	stmdaeq	r0, {r3, r6, sp}
     66c:	0000003c 	andeq	r0, r0, ip, lsr r0
     670:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     674:	180e4101 	stmdane	lr, {r0, r8, lr}
     678:	00070d41 	andeq	r0, r7, r1, asr #26
     67c:	00000018 	andeq	r0, r0, r8, lsl r0
     680:	00000344 	andeq	r0, r0, r4, asr #6
     684:	08002084 	stmdaeq	r0, {r2, r7, sp}
     688:	0000003c 	andeq	r0, r0, ip, lsr r0
     68c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     690:	180e4101 	stmdane	lr, {r0, r8, lr}
     694:	00070d41 	andeq	r0, r7, r1, asr #26
     698:	00000018 	andeq	r0, r0, r8, lsl r0
     69c:	00000344 	andeq	r0, r0, r4, asr #6
     6a0:	080020c0 	stmdaeq	r0, {r6, r7, sp}
     6a4:	0000003c 	andeq	r0, r0, ip, lsr r0
     6a8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6ac:	180e4101 	stmdane	lr, {r0, r8, lr}
     6b0:	00070d41 	andeq	r0, r7, r1, asr #26
     6b4:	00000018 	andeq	r0, r0, r8, lsl r0
     6b8:	00000344 	andeq	r0, r0, r4, asr #6
     6bc:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6c8:	100e4101 	andne	r4, lr, r1, lsl #2
     6cc:	00070d41 	andeq	r0, r7, r1, asr #26
     6d0:	00000018 	andeq	r0, r0, r8, lsl r0
     6d4:	00000344 	andeq	r0, r0, r4, asr #6
     6d8:	08002118 	stmdaeq	r0, {r3, r4, r8, sp}
     6dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6e0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6e4:	100e4101 	andne	r4, lr, r1, lsl #2
     6e8:	00070d41 	andeq	r0, r7, r1, asr #26
     6ec:	00000018 	andeq	r0, r0, r8, lsl r0
     6f0:	00000344 	andeq	r0, r0, r4, asr #6
     6f4:	08002154 	stmdaeq	r0, {r2, r4, r6, r8, sp}
     6f8:	0000003c 	andeq	r0, r0, ip, lsr r0
     6fc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     700:	100e4101 	andne	r4, lr, r1, lsl #2
     704:	00070d41 	andeq	r0, r7, r1, asr #26
     708:	00000018 	andeq	r0, r0, r8, lsl r0
     70c:	00000344 	andeq	r0, r0, r4, asr #6
     710:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     714:	0000003c 	andeq	r0, r0, ip, lsr r0
     718:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     71c:	100e4101 	andne	r4, lr, r1, lsl #2
     720:	00070d41 	andeq	r0, r7, r1, asr #26
     724:	00000018 	andeq	r0, r0, r8, lsl r0
     728:	00000344 	andeq	r0, r0, r4, asr #6
     72c:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
     730:	0000003c 	andeq	r0, r0, ip, lsr r0
     734:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     738:	100e4101 	andne	r4, lr, r1, lsl #2
     73c:	00070d41 	andeq	r0, r7, r1, asr #26
     740:	00000018 	andeq	r0, r0, r8, lsl r0
     744:	00000344 	andeq	r0, r0, r4, asr #6
     748:	08002208 	stmdaeq	r0, {r3, r9, sp}
     74c:	0000003c 	andeq	r0, r0, ip, lsr r0
     750:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     754:	100e4101 	andne	r4, lr, r1, lsl #2
     758:	00070d41 	andeq	r0, r7, r1, asr #26
     75c:	00000018 	andeq	r0, r0, r8, lsl r0
     760:	00000344 	andeq	r0, r0, r4, asr #6
     764:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
     768:	0000003c 	andeq	r0, r0, ip, lsr r0
     76c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     770:	100e4101 	andne	r4, lr, r1, lsl #2
     774:	00070d41 	andeq	r0, r7, r1, asr #26
     778:	00000018 	andeq	r0, r0, r8, lsl r0
     77c:	00000344 	andeq	r0, r0, r4, asr #6
     780:	08002280 	stmdaeq	r0, {r7, r9, sp}
     784:	0000003c 	andeq	r0, r0, ip, lsr r0
     788:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     78c:	100e4101 	andne	r4, lr, r1, lsl #2
     790:	00070d41 	andeq	r0, r7, r1, asr #26
     794:	00000018 	andeq	r0, r0, r8, lsl r0
     798:	00000344 	andeq	r0, r0, r4, asr #6
     79c:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
     7a0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7a8:	100e4101 	andne	r4, lr, r1, lsl #2
     7ac:	00070d41 	andeq	r0, r7, r1, asr #26
     7b0:	00000018 	andeq	r0, r0, r8, lsl r0
     7b4:	00000344 	andeq	r0, r0, r4, asr #6
     7b8:	080022f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp}
     7bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     7c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7c4:	100e4101 	andne	r4, lr, r1, lsl #2
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	00000018 	andeq	r0, r0, r8, lsl r0
     7d0:	00000344 	andeq	r0, r0, r4, asr #6
     7d4:	08002334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp}
     7d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7e0:	100e4101 	andne	r4, lr, r1, lsl #2
     7e4:	00070d41 	andeq	r0, r7, r1, asr #26
     7e8:	00000018 	andeq	r0, r0, r8, lsl r0
     7ec:	00000344 	andeq	r0, r0, r4, asr #6
     7f0:	08002370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp}
     7f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     7f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7fc:	100e4101 	andne	r4, lr, r1, lsl #2
     800:	00070d41 	andeq	r0, r7, r1, asr #26
     804:	00000018 	andeq	r0, r0, r8, lsl r0
     808:	00000344 	andeq	r0, r0, r4, asr #6
     80c:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
     810:	0000003c 	andeq	r0, r0, ip, lsr r0
     814:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     818:	100e4101 	andne	r4, lr, r1, lsl #2
     81c:	00070d41 	andeq	r0, r7, r1, asr #26
     820:	00000018 	andeq	r0, r0, r8, lsl r0
     824:	00000344 	andeq	r0, r0, r4, asr #6
     828:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
     82c:	0000003c 	andeq	r0, r0, ip, lsr r0
     830:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     834:	100e4101 	andne	r4, lr, r1, lsl #2
     838:	00070d41 	andeq	r0, r7, r1, asr #26
     83c:	00000018 	andeq	r0, r0, r8, lsl r0
     840:	00000344 	andeq	r0, r0, r4, asr #6
     844:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     848:	0000003c 	andeq	r0, r0, ip, lsr r0
     84c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     850:	100e4101 	andne	r4, lr, r1, lsl #2
     854:	00070d41 	andeq	r0, r7, r1, asr #26
     858:	00000018 	andeq	r0, r0, r8, lsl r0
     85c:	00000344 	andeq	r0, r0, r4, asr #6
     860:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
     864:	0000003c 	andeq	r0, r0, ip, lsr r0
     868:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     86c:	100e4101 	andne	r4, lr, r1, lsl #2
     870:	00070d41 	andeq	r0, r7, r1, asr #26
     874:	00000018 	andeq	r0, r0, r8, lsl r0
     878:	00000344 	andeq	r0, r0, r4, asr #6
     87c:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
     880:	00000048 	andeq	r0, r0, r8, asr #32
     884:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     888:	100e4101 	andne	r4, lr, r1, lsl #2
     88c:	00070d41 	andeq	r0, r7, r1, asr #26
     890:	00000018 	andeq	r0, r0, r8, lsl r0
     894:	00000344 	andeq	r0, r0, r4, asr #6
     898:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
     89c:	00000074 	andeq	r0, r0, r4, ror r0
     8a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8a4:	200e4101 	andcs	r4, lr, r1, lsl #2
     8a8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ac:	00000014 	andeq	r0, r0, r4, lsl r0
     8b0:	00000344 	andeq	r0, r0, r4, asr #6
     8b4:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     8c4:	00000018 	andeq	r0, r0, r8, lsl r0
     8c8:	00000344 	andeq	r0, r0, r4, asr #6
     8cc:	08002574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp}
     8d0:	00000038 	andeq	r0, r0, r8, lsr r0
     8d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     8dc:	00070d41 	andeq	r0, r7, r1, asr #26
     8e0:	00000018 	andeq	r0, r0, r8, lsl r0
     8e4:	00000344 	andeq	r0, r0, r4, asr #6
     8e8:	080025ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp}
     8ec:	00000020 	andeq	r0, r0, r0, lsr #32
     8f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8f4:	100e4101 	andne	r4, lr, r1, lsl #2
     8f8:	00070d41 	andeq	r0, r7, r1, asr #26
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     904:	7c020001 	stcvc	0, cr0, [r2], {1}
     908:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     90c:	0000001c 	andeq	r0, r0, ip, lsl r0
     910:	000008fc 	strdeq	r0, [r0], -ip
     914:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     918:	00000114 	andeq	r0, r0, r4, lsl r1
     91c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     920:	41018e02 	tstmi	r1, r2, lsl #28
     924:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     928:	00000007 	andeq	r0, r0, r7
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	000008fc 	strdeq	r0, [r0], -ip
     934:	080026e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, sp}
     938:	00000174 	andeq	r0, r0, r4, ror r1
     93c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     940:	41018e02 	tstmi	r1, r2, lsl #28
     944:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     948:	00000007 	andeq	r0, r0, r7
     94c:	00000018 	andeq	r0, r0, r8, lsl r0
     950:	000008fc 	strdeq	r0, [r0], -ip
     954:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
     958:	00000038 	andeq	r0, r0, r8, lsr r0
     95c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     960:	100e4101 	andne	r4, lr, r1, lsl #2
     964:	00070d41 	andeq	r0, r7, r1, asr #26
     968:	00000018 	andeq	r0, r0, r8, lsl r0
     96c:	000008fc 	strdeq	r0, [r0], -ip
     970:	0800288c 	stmdaeq	r0, {r2, r3, r7, fp, sp}
     974:	00000052 	andeq	r0, r0, r2, asr r0
     978:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     97c:	180e4101 	stmdane	lr, {r0, r8, lr}
     980:	00070d41 	andeq	r0, r7, r1, asr #26
     984:	00000018 	andeq	r0, r0, r8, lsl r0
     988:	000008fc 	strdeq	r0, [r0], -ip
     98c:	080028e0 	stmdaeq	r0, {r5, r6, r7, fp, sp}
     990:	0000002a 	andeq	r0, r0, sl, lsr #32
     994:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     998:	100e4101 	andne	r4, lr, r1, lsl #2
     99c:	00070d41 	andeq	r0, r7, r1, asr #26
     9a0:	00000018 	andeq	r0, r0, r8, lsl r0
     9a4:	000008fc 	strdeq	r0, [r0], -ip
     9a8:	0800290c 	stmdaeq	r0, {r2, r3, r8, fp, sp}
     9ac:	0000003e 	andeq	r0, r0, lr, lsr r0
     9b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9b4:	100e4101 	andne	r4, lr, r1, lsl #2
     9b8:	00070d41 	andeq	r0, r7, r1, asr #26
     9bc:	00000018 	andeq	r0, r0, r8, lsl r0
     9c0:	000008fc 	strdeq	r0, [r0], -ip
     9c4:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
     9c8:	00000038 	andeq	r0, r0, r8, lsr r0
     9cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9d0:	100e4101 	andne	r4, lr, r1, lsl #2
     9d4:	00070d41 	andeq	r0, r7, r1, asr #26
     9d8:	00000018 	andeq	r0, r0, r8, lsl r0
     9dc:	000008fc 	strdeq	r0, [r0], -ip
     9e0:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
     9e4:	00000042 	andeq	r0, r0, r2, asr #32
     9e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9ec:	100e4101 	andne	r4, lr, r1, lsl #2
     9f0:	00070d41 	andeq	r0, r7, r1, asr #26
     9f4:	00000018 	andeq	r0, r0, r8, lsl r0
     9f8:	000008fc 	strdeq	r0, [r0], -ip
     9fc:	080029c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, sp}
     a00:	0000003e 	andeq	r0, r0, lr, lsr r0
     a04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a08:	100e4101 	andne	r4, lr, r1, lsl #2
     a0c:	00070d41 	andeq	r0, r7, r1, asr #26
     a10:	00000018 	andeq	r0, r0, r8, lsl r0
     a14:	000008fc 	strdeq	r0, [r0], -ip
     a18:	08002a08 	stmdaeq	r0, {r3, r9, fp, sp}
     a1c:	00000022 	andeq	r0, r0, r2, lsr #32
     a20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a24:	100e4101 	andne	r4, lr, r1, lsl #2
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	00000018 	andeq	r0, r0, r8, lsl r0
     a30:	000008fc 	strdeq	r0, [r0], -ip
     a34:	08002a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, sp}
     a38:	00000020 	andeq	r0, r0, r0, lsr #32
     a3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a40:	100e4101 	andne	r4, lr, r1, lsl #2
     a44:	00070d41 	andeq	r0, r7, r1, asr #26
     a48:	00000018 	andeq	r0, r0, r8, lsl r0
     a4c:	000008fc 	strdeq	r0, [r0], -ip
     a50:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
     a54:	00000038 	andeq	r0, r0, r8, lsr r0
     a58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a5c:	100e4101 	andne	r4, lr, r1, lsl #2
     a60:	00070d41 	andeq	r0, r7, r1, asr #26
     a64:	00000018 	andeq	r0, r0, r8, lsl r0
     a68:	000008fc 	strdeq	r0, [r0], -ip
     a6c:	08002a84 	stmdaeq	r0, {r2, r7, r9, fp, sp}
     a70:	0000003e 	andeq	r0, r0, lr, lsr r0
     a74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a78:	100e4101 	andne	r4, lr, r1, lsl #2
     a7c:	00070d41 	andeq	r0, r7, r1, asr #26
     a80:	00000018 	andeq	r0, r0, r8, lsl r0
     a84:	000008fc 	strdeq	r0, [r0], -ip
     a88:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
     a8c:	00000036 	andeq	r0, r0, r6, lsr r0
     a90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a94:	100e4101 	andne	r4, lr, r1, lsl #2
     a98:	00070d41 	andeq	r0, r7, r1, asr #26
     a9c:	00000018 	andeq	r0, r0, r8, lsl r0
     aa0:	000008fc 	strdeq	r0, [r0], -ip
     aa4:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     aa8:	00000036 	andeq	r0, r0, r6, lsr r0
     aac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ab0:	100e4101 	andne	r4, lr, r1, lsl #2
     ab4:	00070d41 	andeq	r0, r7, r1, asr #26
     ab8:	00000018 	andeq	r0, r0, r8, lsl r0
     abc:	000008fc 	strdeq	r0, [r0], -ip
     ac0:	08002b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, sp}
     ac4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ac8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     acc:	100e4101 	andne	r4, lr, r1, lsl #2
     ad0:	00070d41 	andeq	r0, r7, r1, asr #26
     ad4:	00000018 	andeq	r0, r0, r8, lsl r0
     ad8:	000008fc 	strdeq	r0, [r0], -ip
     adc:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
     ae0:	00000022 	andeq	r0, r0, r2, lsr #32
     ae4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ae8:	100e4101 	andne	r4, lr, r1, lsl #2
     aec:	00070d41 	andeq	r0, r7, r1, asr #26
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
     af4:	000008fc 	strdeq	r0, [r0], -ip
     af8:	08002b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, sp}
     afc:	0000003e 	andeq	r0, r0, lr, lsr r0
     b00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b04:	100e4101 	andne	r4, lr, r1, lsl #2
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	00000018 	andeq	r0, r0, r8, lsl r0
     b10:	000008fc 	strdeq	r0, [r0], -ip
     b14:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
     b18:	0000003a 	andeq	r0, r0, sl, lsr r0
     b1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b20:	100e4101 	andne	r4, lr, r1, lsl #2
     b24:	00070d41 	andeq	r0, r7, r1, asr #26
     b28:	00000018 	andeq	r0, r0, r8, lsl r0
     b2c:	000008fc 	strdeq	r0, [r0], -ip
     b30:	08002c14 	stmdaeq	r0, {r2, r4, sl, fp, sp}
     b34:	0000003e 	andeq	r0, r0, lr, lsr r0
     b38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b3c:	100e4101 	andne	r4, lr, r1, lsl #2
     b40:	00070d41 	andeq	r0, r7, r1, asr #26
     b44:	00000018 	andeq	r0, r0, r8, lsl r0
     b48:	000008fc 	strdeq	r0, [r0], -ip
     b4c:	08002c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, sp}
     b50:	0000003e 	andeq	r0, r0, lr, lsr r0
     b54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b58:	100e4101 	andne	r4, lr, r1, lsl #2
     b5c:	00070d41 	andeq	r0, r7, r1, asr #26
     b60:	00000018 	andeq	r0, r0, r8, lsl r0
     b64:	000008fc 	strdeq	r0, [r0], -ip
     b68:	08002c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, sp}
     b6c:	00000036 	andeq	r0, r0, r6, lsr r0
     b70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b74:	100e4101 	andne	r4, lr, r1, lsl #2
     b78:	00070d41 	andeq	r0, r7, r1, asr #26
     b7c:	00000018 	andeq	r0, r0, r8, lsl r0
     b80:	000008fc 	strdeq	r0, [r0], -ip
     b84:	08002ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, sp}
     b88:	0000003e 	andeq	r0, r0, lr, lsr r0
     b8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b90:	100e4101 	andne	r4, lr, r1, lsl #2
     b94:	00070d41 	andeq	r0, r7, r1, asr #26
     b98:	00000018 	andeq	r0, r0, r8, lsl r0
     b9c:	000008fc 	strdeq	r0, [r0], -ip
     ba0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     ba4:	00000046 	andeq	r0, r0, r6, asr #32
     ba8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bac:	100e4101 	andne	r4, lr, r1, lsl #2
     bb0:	00070d41 	andeq	r0, r7, r1, asr #26
     bb4:	00000018 	andeq	r0, r0, r8, lsl r0
     bb8:	000008fc 	strdeq	r0, [r0], -ip
     bbc:	08002d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, sp}
     bc0:	0000008e 	andeq	r0, r0, lr, lsl #1
     bc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bc8:	200e4101 	andcs	r4, lr, r1, lsl #2
     bcc:	00070d41 	andeq	r0, r7, r1, asr #26
     bd0:	00000018 	andeq	r0, r0, r8, lsl r0
     bd4:	000008fc 	strdeq	r0, [r0], -ip
     bd8:	08002de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp}
     bdc:	00000038 	andeq	r0, r0, r8, lsr r0
     be0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     be4:	180e4101 	stmdane	lr, {r0, r8, lr}
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	00000018 	andeq	r0, r0, r8, lsl r0
     bf0:	000008fc 	strdeq	r0, [r0], -ip
     bf4:	08002e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp}
     bf8:	00000020 	andeq	r0, r0, r0, lsr #32
     bfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c00:	100e4101 	andne	r4, lr, r1, lsl #2
     c04:	00070d41 	andeq	r0, r7, r1, asr #26
     c08:	00000018 	andeq	r0, r0, r8, lsl r0
     c0c:	000008fc 	strdeq	r0, [r0], -ip
     c10:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
     c14:	000000ae 	andeq	r0, r0, lr, lsr #1
     c18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c1c:	200e4101 	andcs	r4, lr, r1, lsl #2
     c20:	00070d41 	andeq	r0, r7, r1, asr #26
     c24:	00000018 	andeq	r0, r0, r8, lsl r0
     c28:	000008fc 	strdeq	r0, [r0], -ip
     c2c:	08002eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp}
     c30:	00000038 	andeq	r0, r0, r8, lsr r0
     c34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c38:	180e4101 	stmdane	lr, {r0, r8, lr}
     c3c:	00070d41 	andeq	r0, r7, r1, asr #26
     c40:	0000000c 	andeq	r0, r0, ip
     c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c48:	7c020001 	stcvc	0, cr0, [r2], {1}
     c4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c50:	00000018 	andeq	r0, r0, r8, lsl r0
     c54:	00000c40 	andeq	r0, r0, r0, asr #24
     c58:	08002f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, sp}
     c5c:	0000001a 	andeq	r0, r0, sl, lsl r0
     c60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c64:	41018e02 	tstmi	r1, r2, lsl #28
     c68:	0000070d 	andeq	r0, r0, sp, lsl #14
     c6c:	00000018 	andeq	r0, r0, r8, lsl r0
     c70:	00000c40 	andeq	r0, r0, r0, asr #24
     c74:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     c78:	00000020 	andeq	r0, r0, r0, lsr #32
     c7c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c80:	100e4101 	andne	r4, lr, r1, lsl #2
     c84:	00070d41 	andeq	r0, r7, r1, asr #26
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	00000c40 	andeq	r0, r0, r0, asr #24
     c90:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
     c94:	00000020 	andeq	r0, r0, r0, lsr #32
     c98:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c9c:	100e4101 	andne	r4, lr, r1, lsl #2
     ca0:	00070d41 	andeq	r0, r7, r1, asr #26
     ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ca8:	00000c40 	andeq	r0, r0, r0, asr #24
     cac:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
     cb0:	0000007c 	andeq	r0, r0, ip, ror r0
     cb4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cb8:	41018702 	tstmi	r1, r2, lsl #14
     cbc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     cc0:	00000007 	andeq	r0, r0, r7
     cc4:	00000018 	andeq	r0, r0, r8, lsl r0
     cc8:	00000c40 	andeq	r0, r0, r0, asr #24
     ccc:	08002ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
     cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     cd8:	100e4101 	andne	r4, lr, r1, lsl #2
     cdc:	00070d41 	andeq	r0, r7, r1, asr #26
     ce0:	00000018 	andeq	r0, r0, r8, lsl r0
     ce4:	00000c40 	andeq	r0, r0, r0, asr #24
     ce8:	08003018 	stmdaeq	r0, {r3, r4, ip, sp}
     cec:	00000020 	andeq	r0, r0, r0, lsr #32
     cf0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     cf4:	100e4101 	andne	r4, lr, r1, lsl #2
     cf8:	00070d41 	andeq	r0, r7, r1, asr #26
     cfc:	00000018 	andeq	r0, r0, r8, lsl r0
     d00:	00000c40 	andeq	r0, r0, r0, asr #24
     d04:	08003038 	stmdaeq	r0, {r3, r4, r5, ip, sp}
     d08:	00000034 	andeq	r0, r0, r4, lsr r0
     d0c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d10:	100e4101 	andne	r4, lr, r1, lsl #2
     d14:	00070d41 	andeq	r0, r7, r1, asr #26
     d18:	0000000c 	andeq	r0, r0, ip
     d1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d20:	7c020001 	stcvc	0, cr0, [r2], {1}
     d24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d28:	0000001c 	andeq	r0, r0, ip, lsl r0
     d2c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d30:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
     d34:	00000074 	andeq	r0, r0, r4, ror r0
     d38:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d3c:	41018e02 	tstmi	r1, r2, lsl #28
     d40:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d44:	00000007 	andeq	r0, r0, r7
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
     d4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d50:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
     d54:	00000184 	andeq	r0, r0, r4, lsl #3
     d58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d5c:	41018e02 	tstmi	r1, r2, lsl #28
     d60:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     d64:	00000007 	andeq	r0, r0, r7
     d68:	00000018 	andeq	r0, r0, r8, lsl r0
     d6c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d70:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     d74:	0000003c 	andeq	r0, r0, ip, lsr r0
     d78:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d7c:	100e4101 	andne	r4, lr, r1, lsl #2
     d80:	00070d41 	andeq	r0, r7, r1, asr #26
     d84:	00000018 	andeq	r0, r0, r8, lsl r0
     d88:	00000d18 	andeq	r0, r0, r8, lsl sp
     d8c:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
     d90:	0000003e 	andeq	r0, r0, lr, lsr r0
     d94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d98:	100e4101 	andne	r4, lr, r1, lsl #2
     d9c:	00070d41 	andeq	r0, r7, r1, asr #26
     da0:	00000018 	andeq	r0, r0, r8, lsl r0
     da4:	00000d18 	andeq	r0, r0, r8, lsl sp
     da8:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
     dac:	0000003e 	andeq	r0, r0, lr, lsr r0
     db0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     db4:	100e4101 	andne	r4, lr, r1, lsl #2
     db8:	00070d41 	andeq	r0, r7, r1, asr #26
     dbc:	00000018 	andeq	r0, r0, r8, lsl r0
     dc0:	00000d18 	andeq	r0, r0, r8, lsl sp
     dc4:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
     dc8:	0000003e 	andeq	r0, r0, lr, lsr r0
     dcc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     dd0:	180e4101 	stmdane	lr, {r0, r8, lr}
     dd4:	00070d41 	andeq	r0, r7, r1, asr #26
     dd8:	00000018 	andeq	r0, r0, r8, lsl r0
     ddc:	00000d18 	andeq	r0, r0, r8, lsl sp
     de0:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
     de4:	0000003e 	andeq	r0, r0, lr, lsr r0
     de8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     dec:	100e4101 	andne	r4, lr, r1, lsl #2
     df0:	00070d41 	andeq	r0, r7, r1, asr #26
     df4:	00000018 	andeq	r0, r0, r8, lsl r0
     df8:	00000d18 	andeq	r0, r0, r8, lsl sp
     dfc:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     e00:	0000003e 	andeq	r0, r0, lr, lsr r0
     e04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e08:	100e4101 	andne	r4, lr, r1, lsl #2
     e0c:	00070d41 	andeq	r0, r7, r1, asr #26
     e10:	00000018 	andeq	r0, r0, r8, lsl r0
     e14:	00000d18 	andeq	r0, r0, r8, lsl sp
     e18:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
     e1c:	0000003a 	andeq	r0, r0, sl, lsr r0
     e20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e24:	100e4101 	andne	r4, lr, r1, lsl #2
     e28:	00070d41 	andeq	r0, r7, r1, asr #26
     e2c:	00000018 	andeq	r0, r0, r8, lsl r0
     e30:	00000d18 	andeq	r0, r0, r8, lsl sp
     e34:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
     e38:	0000003e 	andeq	r0, r0, lr, lsr r0
     e3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e40:	100e4101 	andne	r4, lr, r1, lsl #2
     e44:	00070d41 	andeq	r0, r7, r1, asr #26
     e48:	00000018 	andeq	r0, r0, r8, lsl r0
     e4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     e50:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
     e54:	00000040 	andeq	r0, r0, r0, asr #32
     e58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e5c:	180e4101 	stmdane	lr, {r0, r8, lr}
     e60:	00070d41 	andeq	r0, r7, r1, asr #26
     e64:	00000018 	andeq	r0, r0, r8, lsl r0
     e68:	00000d18 	andeq	r0, r0, r8, lsl sp
     e6c:	0800349c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, sp}
     e70:	0000003e 	andeq	r0, r0, lr, lsr r0
     e74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e78:	100e4101 	andne	r4, lr, r1, lsl #2
     e7c:	00070d41 	andeq	r0, r7, r1, asr #26
     e80:	00000018 	andeq	r0, r0, r8, lsl r0
     e84:	00000d18 	andeq	r0, r0, r8, lsl sp
     e88:	080034dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp}
     e8c:	0000003e 	andeq	r0, r0, lr, lsr r0
     e90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e94:	100e4101 	andne	r4, lr, r1, lsl #2
     e98:	00070d41 	andeq	r0, r7, r1, asr #26
     e9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ea0:	00000d18 	andeq	r0, r0, r8, lsl sp
     ea4:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
     ea8:	00000042 	andeq	r0, r0, r2, asr #32
     eac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     eb0:	100e4101 	andne	r4, lr, r1, lsl #2
     eb4:	00070d41 	andeq	r0, r7, r1, asr #26
     eb8:	00000018 	andeq	r0, r0, r8, lsl r0
     ebc:	00000d18 	andeq	r0, r0, r8, lsl sp
     ec0:	08003560 	stmdaeq	r0, {r5, r6, r8, sl, ip, sp}
     ec4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ec8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ecc:	100e4101 	andne	r4, lr, r1, lsl #2
     ed0:	00070d41 	andeq	r0, r7, r1, asr #26
     ed4:	00000018 	andeq	r0, r0, r8, lsl r0
     ed8:	00000d18 	andeq	r0, r0, r8, lsl sp
     edc:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
     ee0:	00000040 	andeq	r0, r0, r0, asr #32
     ee4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ee8:	100e4101 	andne	r4, lr, r1, lsl #2
     eec:	00070d41 	andeq	r0, r7, r1, asr #26
     ef0:	00000018 	andeq	r0, r0, r8, lsl r0
     ef4:	00000d18 	andeq	r0, r0, r8, lsl sp
     ef8:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
     efc:	00000040 	andeq	r0, r0, r0, asr #32
     f00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f04:	100e4101 	andne	r4, lr, r1, lsl #2
     f08:	00070d41 	andeq	r0, r7, r1, asr #26
     f0c:	00000018 	andeq	r0, r0, r8, lsl r0
     f10:	00000d18 	andeq	r0, r0, r8, lsl sp
     f14:	08003620 	stmdaeq	r0, {r5, r9, sl, ip, sp}
     f18:	00000040 	andeq	r0, r0, r0, asr #32
     f1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f20:	100e4101 	andne	r4, lr, r1, lsl #2
     f24:	00070d41 	andeq	r0, r7, r1, asr #26
     f28:	00000018 	andeq	r0, r0, r8, lsl r0
     f2c:	00000d18 	andeq	r0, r0, r8, lsl sp
     f30:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
     f34:	0000003e 	andeq	r0, r0, lr, lsr r0
     f38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f3c:	100e4101 	andne	r4, lr, r1, lsl #2
     f40:	00070d41 	andeq	r0, r7, r1, asr #26
     f44:	00000018 	andeq	r0, r0, r8, lsl r0
     f48:	00000d18 	andeq	r0, r0, r8, lsl sp
     f4c:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
     f50:	0000001e 	andeq	r0, r0, lr, lsl r0
     f54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f58:	100e4101 	andne	r4, lr, r1, lsl #2
     f5c:	00070d41 	andeq	r0, r7, r1, asr #26
     f60:	00000018 	andeq	r0, r0, r8, lsl r0
     f64:	00000d18 	andeq	r0, r0, r8, lsl sp
     f68:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f74:	100e4101 	andne	r4, lr, r1, lsl #2
     f78:	00070d41 	andeq	r0, r7, r1, asr #26
     f7c:	00000018 	andeq	r0, r0, r8, lsl r0
     f80:	00000d18 	andeq	r0, r0, r8, lsl sp
     f84:	080036dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, sp}
     f88:	0000003e 	andeq	r0, r0, lr, lsr r0
     f8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f90:	100e4101 	andne	r4, lr, r1, lsl #2
     f94:	00070d41 	andeq	r0, r7, r1, asr #26
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
     f9c:	00000d18 	andeq	r0, r0, r8, lsl sp
     fa0:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     fa4:	00000040 	andeq	r0, r0, r0, asr #32
     fa8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fac:	100e4101 	andne	r4, lr, r1, lsl #2
     fb0:	00070d41 	andeq	r0, r7, r1, asr #26
     fb4:	00000018 	andeq	r0, r0, r8, lsl r0
     fb8:	00000d18 	andeq	r0, r0, r8, lsl sp
     fbc:	0800375c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, ip, sp}
     fc0:	0000003e 	andeq	r0, r0, lr, lsr r0
     fc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fc8:	100e4101 	andne	r4, lr, r1, lsl #2
     fcc:	00070d41 	andeq	r0, r7, r1, asr #26
     fd0:	00000018 	andeq	r0, r0, r8, lsl r0
     fd4:	00000d18 	andeq	r0, r0, r8, lsl sp
     fd8:	0800379c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp}
     fdc:	00000020 	andeq	r0, r0, r0, lsr #32
     fe0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fe4:	100e4101 	andne	r4, lr, r1, lsl #2
     fe8:	00070d41 	andeq	r0, r7, r1, asr #26
     fec:	00000018 	andeq	r0, r0, r8, lsl r0
     ff0:	00000d18 	andeq	r0, r0, r8, lsl sp
     ff4:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
     ff8:	0000003e 	andeq	r0, r0, lr, lsr r0
     ffc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1000:	100e4101 	andne	r4, lr, r1, lsl #2
    1004:	00070d41 	andeq	r0, r7, r1, asr #26
    1008:	00000018 	andeq	r0, r0, r8, lsl r0
    100c:	00000d18 	andeq	r0, r0, r8, lsl sp
    1010:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    1014:	0000003e 	andeq	r0, r0, lr, lsr r0
    1018:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    101c:	100e4101 	andne	r4, lr, r1, lsl #2
    1020:	00070d41 	andeq	r0, r7, r1, asr #26
    1024:	00000018 	andeq	r0, r0, r8, lsl r0
    1028:	00000d18 	andeq	r0, r0, r8, lsl sp
    102c:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
    1030:	0000002e 	andeq	r0, r0, lr, lsr #32
    1034:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1038:	180e4101 	stmdane	lr, {r0, r8, lr}
    103c:	00070d41 	andeq	r0, r7, r1, asr #26
    1040:	00000018 	andeq	r0, r0, r8, lsl r0
    1044:	00000d18 	andeq	r0, r0, r8, lsl sp
    1048:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
    104c:	00000046 	andeq	r0, r0, r6, asr #32
    1050:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1054:	100e4101 	andne	r4, lr, r1, lsl #2
    1058:	00070d41 	andeq	r0, r7, r1, asr #26
    105c:	00000018 	andeq	r0, r0, r8, lsl r0
    1060:	00000d18 	andeq	r0, r0, r8, lsl sp
    1064:	080038b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, sp}
    1068:	00000060 	andeq	r0, r0, r0, rrx
    106c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1070:	200e4101 	andcs	r4, lr, r1, lsl #2
    1074:	00070d41 	andeq	r0, r7, r1, asr #26
    1078:	00000018 	andeq	r0, r0, r8, lsl r0
    107c:	00000d18 	andeq	r0, r0, r8, lsl sp
    1080:	08003914 	stmdaeq	r0, {r2, r4, r8, fp, ip, sp}
    1084:	00000044 	andeq	r0, r0, r4, asr #32
    1088:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    108c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1090:	00070d41 	andeq	r0, r7, r1, asr #26
    1094:	00000018 	andeq	r0, r0, r8, lsl r0
    1098:	00000d18 	andeq	r0, r0, r8, lsl sp
    109c:	08003958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, sp}
    10a0:	00000066 	andeq	r0, r0, r6, rrx
    10a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10a8:	200e4101 	andcs	r4, lr, r1, lsl #2
    10ac:	00070d41 	andeq	r0, r7, r1, asr #26
    10b0:	00000018 	andeq	r0, r0, r8, lsl r0
    10b4:	00000d18 	andeq	r0, r0, r8, lsl sp
    10b8:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
    10bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10c4:	180e4101 	stmdane	lr, {r0, r8, lr}
    10c8:	00070d41 	andeq	r0, r7, r1, asr #26
    10cc:	00000018 	andeq	r0, r0, r8, lsl r0
    10d0:	00000d18 	andeq	r0, r0, r8, lsl sp
    10d4:	080039ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip, sp}
    10d8:	0000005a 	andeq	r0, r0, sl, asr r0
    10dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    10e4:	00070d41 	andeq	r0, r7, r1, asr #26
    10e8:	00000018 	andeq	r0, r0, r8, lsl r0
    10ec:	00000d18 	andeq	r0, r0, r8, lsl sp
    10f0:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
    10f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1100:	00070d41 	andeq	r0, r7, r1, asr #26
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    110c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1114:	00000018 	andeq	r0, r0, r8, lsl r0
    1118:	00001104 	andeq	r1, r0, r4, lsl #2
    111c:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
    1120:	000001a4 	andeq	r0, r0, r4, lsr #3
    1124:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1128:	100e4101 	andne	r4, lr, r1, lsl #2
    112c:	00070d41 	andeq	r0, r7, r1, asr #26
    1130:	00000018 	andeq	r0, r0, r8, lsl r0
    1134:	00001104 	andeq	r1, r0, r4, lsl #2
    1138:	08003c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, sp}
    113c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1140:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1144:	180e4101 	stmdane	lr, {r0, r8, lr}
    1148:	00070d41 	andeq	r0, r7, r1, asr #26
    114c:	00000018 	andeq	r0, r0, r8, lsl r0
    1150:	00001104 	andeq	r1, r0, r4, lsl #2
    1154:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
    1158:	0000006c 	andeq	r0, r0, ip, rrx
    115c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1160:	100e4101 	andne	r4, lr, r1, lsl #2
    1164:	00070d41 	andeq	r0, r7, r1, asr #26
    1168:	00000018 	andeq	r0, r0, r8, lsl r0
    116c:	00001104 	andeq	r1, r0, r4, lsl #2
    1170:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
    1174:	00000036 	andeq	r0, r0, r6, lsr r0
    1178:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    117c:	100e4101 	andne	r4, lr, r1, lsl #2
    1180:	00070d41 	andeq	r0, r7, r1, asr #26
    1184:	00000018 	andeq	r0, r0, r8, lsl r0
    1188:	00001104 	andeq	r1, r0, r4, lsl #2
    118c:	08003d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp}
    1190:	00000034 	andeq	r0, r0, r4, lsr r0
    1194:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1198:	100e4101 	andne	r4, lr, r1, lsl #2
    119c:	00070d41 	andeq	r0, r7, r1, asr #26
    11a0:	00000018 	andeq	r0, r0, r8, lsl r0
    11a4:	00001104 	andeq	r1, r0, r4, lsl #2
    11a8:	08003d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, sp}
    11ac:	00000034 	andeq	r0, r0, r4, lsr r0
    11b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11b4:	100e4101 	andne	r4, lr, r1, lsl #2
    11b8:	00070d41 	andeq	r0, r7, r1, asr #26
    11bc:	00000018 	andeq	r0, r0, r8, lsl r0
    11c0:	00001104 	andeq	r1, r0, r4, lsl #2
    11c4:	08003dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, sp}
    11c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11d0:	100e4101 	andne	r4, lr, r1, lsl #2
    11d4:	00070d41 	andeq	r0, r7, r1, asr #26
    11d8:	00000018 	andeq	r0, r0, r8, lsl r0
    11dc:	00001104 	andeq	r1, r0, r4, lsl #2
    11e0:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
    11e4:	0000001a 	andeq	r0, r0, sl, lsl r0
    11e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11ec:	100e4101 	andne	r4, lr, r1, lsl #2
    11f0:	00070d41 	andeq	r0, r7, r1, asr #26
    11f4:	00000018 	andeq	r0, r0, r8, lsl r0
    11f8:	00001104 	andeq	r1, r0, r4, lsl #2
    11fc:	08003e08 	stmdaeq	r0, {r3, r9, sl, fp, ip, sp}
    1200:	0000003c 	andeq	r0, r0, ip, lsr r0
    1204:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1208:	180e4101 	stmdane	lr, {r0, r8, lr}
    120c:	00070d41 	andeq	r0, r7, r1, asr #26
    1210:	00000018 	andeq	r0, r0, r8, lsl r0
    1214:	00001104 	andeq	r1, r0, r4, lsl #2
    1218:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
    121c:	00000036 	andeq	r0, r0, r6, lsr r0
    1220:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1224:	100e4101 	andne	r4, lr, r1, lsl #2
    1228:	00070d41 	andeq	r0, r7, r1, asr #26
    122c:	00000018 	andeq	r0, r0, r8, lsl r0
    1230:	00001104 	andeq	r1, r0, r4, lsl #2
    1234:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
    1238:	0000002a 	andeq	r0, r0, sl, lsr #32
    123c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1240:	180e4101 	stmdane	lr, {r0, r8, lr}
    1244:	00070d41 	andeq	r0, r7, r1, asr #26
    1248:	00000018 	andeq	r0, r0, r8, lsl r0
    124c:	00001104 	andeq	r1, r0, r4, lsl #2
    1250:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    1254:	00000030 	andeq	r0, r0, r0, lsr r0
    1258:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    125c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1260:	00070d41 	andeq	r0, r7, r1, asr #26
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	00001104 	andeq	r1, r0, r4, lsl #2
    126c:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    1270:	00000030 	andeq	r0, r0, r0, lsr r0
    1274:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1278:	180e4101 	stmdane	lr, {r0, r8, lr}
    127c:	00070d41 	andeq	r0, r7, r1, asr #26
    1280:	00000018 	andeq	r0, r0, r8, lsl r0
    1284:	00001104 	andeq	r1, r0, r4, lsl #2
    1288:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
    128c:	00000024 	andeq	r0, r0, r4, lsr #32
    1290:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1294:	180e4101 	stmdane	lr, {r0, r8, lr}
    1298:	00070d41 	andeq	r0, r7, r1, asr #26
    129c:	00000018 	andeq	r0, r0, r8, lsl r0
    12a0:	00001104 	andeq	r1, r0, r4, lsl #2
    12a4:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
    12a8:	00000078 	andeq	r0, r0, r8, ror r0
    12ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12b0:	200e4101 	andcs	r4, lr, r1, lsl #2
    12b4:	00070d41 	andeq	r0, r7, r1, asr #26
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	00001104 	andeq	r1, r0, r4, lsl #2
    12c0:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
    12c4:	0000005c 	andeq	r0, r0, ip, asr r0
    12c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12cc:	180e4101 	stmdane	lr, {r0, r8, lr}
    12d0:	00070d41 	andeq	r0, r7, r1, asr #26
    12d4:	00000018 	andeq	r0, r0, r8, lsl r0
    12d8:	00001104 	andeq	r1, r0, r4, lsl #2
    12dc:	08004000 	stmdaeq	r0, {lr}
    12e0:	00000072 	andeq	r0, r0, r2, ror r0
    12e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12e8:	180e4101 	stmdane	lr, {r0, r8, lr}
    12ec:	00070d41 	andeq	r0, r7, r1, asr #26
    12f0:	00000018 	andeq	r0, r0, r8, lsl r0
    12f4:	00001104 	andeq	r1, r0, r4, lsl #2
    12f8:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    12fc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1300:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1304:	200e4101 	andcs	r4, lr, r1, lsl #2
    1308:	00070d41 	andeq	r0, r7, r1, asr #26
    130c:	00000018 	andeq	r0, r0, r8, lsl r0
    1310:	00001104 	andeq	r1, r0, r4, lsl #2
    1314:	08004124 	stmdaeq	r0, {r2, r5, r8, lr}
    1318:	0000005c 	andeq	r0, r0, ip, asr r0
    131c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1320:	180e4101 	stmdane	lr, {r0, r8, lr}
    1324:	00070d41 	andeq	r0, r7, r1, asr #26
    1328:	0000000c 	andeq	r0, r0, ip
    132c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1330:	7c020001 	stcvc	0, cr0, [r2], {1}
    1334:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1338:	0000001c 	andeq	r0, r0, ip, lsl r0
    133c:	00001328 	andeq	r1, r0, r8, lsr #6
    1340:	08004180 	stmdaeq	r0, {r7, r8, lr}
    1344:	000000d8 	ldrdeq	r0, [r0], -r8
    1348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    134c:	41018e02 	tstmi	r1, r2, lsl #28
    1350:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1354:	00000007 	andeq	r0, r0, r7
    1358:	00000018 	andeq	r0, r0, r8, lsl r0
    135c:	00001328 	andeq	r1, r0, r8, lsr #6
    1360:	08004258 	stmdaeq	r0, {r3, r4, r6, r9, lr}
    1364:	00000086 	andeq	r0, r0, r6, lsl #1
    1368:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    136c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1370:	00070d41 	andeq	r0, r7, r1, asr #26
    1374:	00000018 	andeq	r0, r0, r8, lsl r0
    1378:	00001328 	andeq	r1, r0, r8, lsr #6
    137c:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
    1380:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1384:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1388:	300e4101 	andcc	r4, lr, r1, lsl #2
    138c:	00070d41 	andeq	r0, r7, r1, asr #26
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
    1394:	00001328 	andeq	r1, r0, r8, lsr #6
    1398:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
    139c:	00000048 	andeq	r0, r0, r8, asr #32
    13a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13a4:	100e4101 	andne	r4, lr, r1, lsl #2
    13a8:	00070d41 	andeq	r0, r7, r1, asr #26
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
    13b0:	00001328 	andeq	r1, r0, r8, lsr #6
    13b4:	080044d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr}
    13b8:	00000036 	andeq	r0, r0, r6, lsr r0
    13bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13c0:	100e4101 	andne	r4, lr, r1, lsl #2
    13c4:	00070d41 	andeq	r0, r7, r1, asr #26
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	00001328 	andeq	r1, r0, r8, lsr #6
    13d0:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    13d4:	0000003e 	andeq	r0, r0, lr, lsr r0
    13d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13dc:	100e4101 	andne	r4, lr, r1, lsl #2
    13e0:	00070d41 	andeq	r0, r7, r1, asr #26
    13e4:	00000018 	andeq	r0, r0, r8, lsl r0
    13e8:	00001328 	andeq	r1, r0, r8, lsr #6
    13ec:	08004550 	stmdaeq	r0, {r4, r6, r8, sl, lr}
    13f0:	0000003e 	andeq	r0, r0, lr, lsr r0
    13f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13f8:	100e4101 	andne	r4, lr, r1, lsl #2
    13fc:	00070d41 	andeq	r0, r7, r1, asr #26
    1400:	00000018 	andeq	r0, r0, r8, lsl r0
    1404:	00001328 	andeq	r1, r0, r8, lsr #6
    1408:	08004590 	stmdaeq	r0, {r4, r7, r8, sl, lr}
    140c:	00000036 	andeq	r0, r0, r6, lsr r0
    1410:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1414:	100e4101 	andne	r4, lr, r1, lsl #2
    1418:	00070d41 	andeq	r0, r7, r1, asr #26
    141c:	00000018 	andeq	r0, r0, r8, lsl r0
    1420:	00001328 	andeq	r1, r0, r8, lsr #6
    1424:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
    1428:	00000040 	andeq	r0, r0, r0, asr #32
    142c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1430:	100e4101 	andne	r4, lr, r1, lsl #2
    1434:	00070d41 	andeq	r0, r7, r1, asr #26
    1438:	00000018 	andeq	r0, r0, r8, lsl r0
    143c:	00001328 	andeq	r1, r0, r8, lsr #6
    1440:	08004608 	stmdaeq	r0, {r3, r9, sl, lr}
    1444:	00000042 	andeq	r0, r0, r2, asr #32
    1448:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    144c:	100e4101 	andne	r4, lr, r1, lsl #2
    1450:	00070d41 	andeq	r0, r7, r1, asr #26
    1454:	00000018 	andeq	r0, r0, r8, lsl r0
    1458:	00001328 	andeq	r1, r0, r8, lsr #6
    145c:	0800464c 	stmdaeq	r0, {r2, r3, r6, r9, sl, lr}
    1460:	0000003e 	andeq	r0, r0, lr, lsr r0
    1464:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1468:	100e4101 	andne	r4, lr, r1, lsl #2
    146c:	00070d41 	andeq	r0, r7, r1, asr #26
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
    1474:	00001328 	andeq	r1, r0, r8, lsr #6
    1478:	0800468c 	stmdaeq	r0, {r2, r3, r7, r9, sl, lr}
    147c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1480:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1484:	100e4101 	andne	r4, lr, r1, lsl #2
    1488:	00070d41 	andeq	r0, r7, r1, asr #26
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	00001328 	andeq	r1, r0, r8, lsr #6
    1494:	080046cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, lr}
    1498:	0000009a 	muleq	r0, sl, r0
    149c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14a0:	180e4101 	stmdane	lr, {r0, r8, lr}
    14a4:	00070d41 	andeq	r0, r7, r1, asr #26
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	00001328 	andeq	r1, r0, r8, lsr #6
    14b0:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
    14b4:	0000001a 	andeq	r0, r0, sl, lsl r0
    14b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14bc:	100e4101 	andne	r4, lr, r1, lsl #2
    14c0:	00070d41 	andeq	r0, r7, r1, asr #26
    14c4:	00000018 	andeq	r0, r0, r8, lsl r0
    14c8:	00001328 	andeq	r1, r0, r8, lsr #6
    14cc:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
    14d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14d8:	100e4101 	andne	r4, lr, r1, lsl #2
    14dc:	00070d41 	andeq	r0, r7, r1, asr #26
    14e0:	00000018 	andeq	r0, r0, r8, lsl r0
    14e4:	00001328 	andeq	r1, r0, r8, lsr #6
    14e8:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
    14ec:	0000003e 	andeq	r0, r0, lr, lsr r0
    14f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14f4:	100e4101 	andne	r4, lr, r1, lsl #2
    14f8:	00070d41 	andeq	r0, r7, r1, asr #26
    14fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1500:	00001328 	andeq	r1, r0, r8, lsr #6
    1504:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    1508:	00000022 	andeq	r0, r0, r2, lsr #32
    150c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1510:	100e4101 	andne	r4, lr, r1, lsl #2
    1514:	00070d41 	andeq	r0, r7, r1, asr #26
    1518:	00000018 	andeq	r0, r0, r8, lsl r0
    151c:	00001328 	andeq	r1, r0, r8, lsr #6
    1520:	08004804 	stmdaeq	r0, {r2, fp, lr}
    1524:	00000032 	andeq	r0, r0, r2, lsr r0
    1528:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    152c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1530:	00070d41 	andeq	r0, r7, r1, asr #26
    1534:	00000018 	andeq	r0, r0, r8, lsl r0
    1538:	00001328 	andeq	r1, r0, r8, lsr #6
    153c:	08004838 	stmdaeq	r0, {r3, r4, r5, fp, lr}
    1540:	0000001a 	andeq	r0, r0, sl, lsl r0
    1544:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1548:	100e4101 	andne	r4, lr, r1, lsl #2
    154c:	00070d41 	andeq	r0, r7, r1, asr #26
    1550:	00000018 	andeq	r0, r0, r8, lsl r0
    1554:	00001328 	andeq	r1, r0, r8, lsr #6
    1558:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
    155c:	00000046 	andeq	r0, r0, r6, asr #32
    1560:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1564:	100e4101 	andne	r4, lr, r1, lsl #2
    1568:	00070d41 	andeq	r0, r7, r1, asr #26
    156c:	00000018 	andeq	r0, r0, r8, lsl r0
    1570:	00001328 	andeq	r1, r0, r8, lsr #6
    1574:	0800489c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr}
    1578:	00000060 	andeq	r0, r0, r0, rrx
    157c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1580:	180e4101 	stmdane	lr, {r0, r8, lr}
    1584:	00070d41 	andeq	r0, r7, r1, asr #26
    1588:	00000018 	andeq	r0, r0, r8, lsl r0
    158c:	00001328 	andeq	r1, r0, r8, lsr #6
    1590:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
    1594:	00000038 	andeq	r0, r0, r8, lsr r0
    1598:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    159c:	180e4101 	stmdane	lr, {r0, r8, lr}
    15a0:	00070d41 	andeq	r0, r7, r1, asr #26
    15a4:	00000018 	andeq	r0, r0, r8, lsl r0
    15a8:	00001328 	andeq	r1, r0, r8, lsr #6
    15ac:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    15b0:	00000020 	andeq	r0, r0, r0, lsr #32
    15b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15b8:	100e4101 	andne	r4, lr, r1, lsl #2
    15bc:	00070d41 	andeq	r0, r7, r1, asr #26
    15c0:	00000018 	andeq	r0, r0, r8, lsl r0
    15c4:	00001328 	andeq	r1, r0, r8, lsr #6
    15c8:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
    15cc:	00000076 	andeq	r0, r0, r6, ror r0
    15d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15d4:	180e4101 	stmdane	lr, {r0, r8, lr}
    15d8:	00070d41 	andeq	r0, r7, r1, asr #26
    15dc:	00000018 	andeq	r0, r0, r8, lsl r0
    15e0:	00001328 	andeq	r1, r0, r8, lsr #6
    15e4:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
    15e8:	00000032 	andeq	r0, r0, r2, lsr r0
    15ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15f0:	180e4101 	stmdane	lr, {r0, r8, lr}
    15f4:	00070d41 	andeq	r0, r7, r1, asr #26
    15f8:	0000000c 	andeq	r0, r0, ip
    15fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1600:	7c020001 	stcvc	0, cr0, [r2], {1}
    1604:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1608:	00000014 	andeq	r0, r0, r4, lsl r0
    160c:	000015f8 	strdeq	r1, [r0], -r8
    1610:	08004a00 	stmdaeq	r0, {r9, fp, lr}
    1614:	00000034 	andeq	r0, r0, r4, lsr r0
    1618:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    161c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1620:	00000018 	andeq	r0, r0, r8, lsl r0
    1624:	000015f8 	strdeq	r1, [r0], -r8
    1628:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
    162c:	000000dc 	ldrdeq	r0, [r0], -ip
    1630:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1634:	180e4101 	stmdane	lr, {r0, r8, lr}
    1638:	00070d41 	andeq	r0, r7, r1, asr #26
    163c:	00000018 	andeq	r0, r0, r8, lsl r0
    1640:	000015f8 	strdeq	r1, [r0], -r8
    1644:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
    1648:	0000002a 	andeq	r0, r0, sl, lsr #32
    164c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1650:	100e4101 	andne	r4, lr, r1, lsl #2
    1654:	00070d41 	andeq	r0, r7, r1, asr #26
    1658:	00000018 	andeq	r0, r0, r8, lsl r0
    165c:	000015f8 	strdeq	r1, [r0], -r8
    1660:	08004b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, lr}
    1664:	00000024 	andeq	r0, r0, r4, lsr #32
    1668:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    166c:	100e4101 	andne	r4, lr, r1, lsl #2
    1670:	00070d41 	andeq	r0, r7, r1, asr #26
    1674:	00000018 	andeq	r0, r0, r8, lsl r0
    1678:	000015f8 	strdeq	r1, [r0], -r8
    167c:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    1680:	00000034 	andeq	r0, r0, r4, lsr r0
    1684:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1688:	180e4101 	stmdane	lr, {r0, r8, lr}
    168c:	00070d41 	andeq	r0, r7, r1, asr #26
    1690:	00000018 	andeq	r0, r0, r8, lsl r0
    1694:	000015f8 	strdeq	r1, [r0], -r8
    1698:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16a4:	100e4101 	andne	r4, lr, r1, lsl #2
    16a8:	00070d41 	andeq	r0, r7, r1, asr #26
    16ac:	00000018 	andeq	r0, r0, r8, lsl r0
    16b0:	000015f8 	strdeq	r1, [r0], -r8
    16b4:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
    16b8:	00000034 	andeq	r0, r0, r4, lsr r0
    16bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16c0:	180e4101 	stmdane	lr, {r0, r8, lr}
    16c4:	00070d41 	andeq	r0, r7, r1, asr #26
    16c8:	00000018 	andeq	r0, r0, r8, lsl r0
    16cc:	000015f8 	strdeq	r1, [r0], -r8
    16d0:	08004be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, lr}
    16d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16dc:	100e4101 	andne	r4, lr, r1, lsl #2
    16e0:	00070d41 	andeq	r0, r7, r1, asr #26
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    16f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16f4:	00000018 	andeq	r0, r0, r8, lsl r0
    16f8:	000016e4 	andeq	r1, r0, r4, ror #13
    16fc:	08004c00 	stmdaeq	r0, {sl, fp, lr}
    1700:	0000001a 	andeq	r0, r0, sl, lsl r0
    1704:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1708:	41018e02 	tstmi	r1, r2, lsl #28
    170c:	0000070d 	andeq	r0, r0, sp, lsl #14
    1710:	00000018 	andeq	r0, r0, r8, lsl r0
    1714:	000016e4 	andeq	r1, r0, r4, ror #13
    1718:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
    171c:	0000015c 	andeq	r0, r0, ip, asr r1
    1720:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1724:	200e4101 	andcs	r4, lr, r1, lsl #2
    1728:	00070d41 	andeq	r0, r7, r1, asr #26
    172c:	00000018 	andeq	r0, r0, r8, lsl r0
    1730:	000016e4 	andeq	r1, r0, r4, ror #13
    1734:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
    1738:	0000004e 	andeq	r0, r0, lr, asr #32
    173c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1740:	100e4101 	andne	r4, lr, r1, lsl #2
    1744:	00070d41 	andeq	r0, r7, r1, asr #26
    1748:	00000014 	andeq	r0, r0, r4, lsl r0
    174c:	000016e4 	andeq	r1, r0, r4, ror #13
    1750:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    1754:	0000001c 	andeq	r0, r0, ip, lsl r0
    1758:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    175c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1760:	00000014 	andeq	r0, r0, r4, lsl r0
    1764:	000016e4 	andeq	r1, r0, r4, ror #13
    1768:	08004de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, lr}
    176c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1770:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1774:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1778:	00000018 	andeq	r0, r0, r8, lsl r0
    177c:	000016e4 	andeq	r1, r0, r4, ror #13
    1780:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
    1784:	00000038 	andeq	r0, r0, r8, lsr r0
    1788:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    178c:	100e4101 	andne	r4, lr, r1, lsl #2
    1790:	00070d41 	andeq	r0, r7, r1, asr #26
    1794:	00000018 	andeq	r0, r0, r8, lsl r0
    1798:	000016e4 	andeq	r1, r0, r4, ror #13
    179c:	08004e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, lr}
    17a0:	000000dc 	ldrdeq	r0, [r0], -ip
    17a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17a8:	280e4101 	stmdacs	lr, {r0, r8, lr}
    17ac:	00070d41 	andeq	r0, r7, r1, asr #26
    17b0:	00000018 	andeq	r0, r0, r8, lsl r0
    17b4:	000016e4 	andeq	r1, r0, r4, ror #13
    17b8:	08004f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, lr}
    17bc:	00000054 	andeq	r0, r0, r4, asr r0
    17c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17c4:	100e4101 	andne	r4, lr, r1, lsl #2
    17c8:	00070d41 	andeq	r0, r7, r1, asr #26
    17cc:	00000018 	andeq	r0, r0, r8, lsl r0
    17d0:	000016e4 	andeq	r1, r0, r4, ror #13
    17d4:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    17d8:	000000dc 	ldrdeq	r0, [r0], -ip
    17dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17e0:	280e4101 	stmdacs	lr, {r0, r8, lr}
    17e4:	00070d41 	andeq	r0, r7, r1, asr #26
    17e8:	00000018 	andeq	r0, r0, r8, lsl r0
    17ec:	000016e4 	andeq	r1, r0, r4, ror #13
    17f0:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
    17f4:	00000054 	andeq	r0, r0, r4, asr r0
    17f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17fc:	100e4101 	andne	r4, lr, r1, lsl #2
    1800:	00070d41 	andeq	r0, r7, r1, asr #26
    1804:	00000018 	andeq	r0, r0, r8, lsl r0
    1808:	000016e4 	andeq	r1, r0, r4, ror #13
    180c:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
    1810:	00000038 	andeq	r0, r0, r8, lsr r0
    1814:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1818:	100e4101 	andne	r4, lr, r1, lsl #2
    181c:	00070d41 	andeq	r0, r7, r1, asr #26
    1820:	00000018 	andeq	r0, r0, r8, lsl r0
    1824:	000016e4 	andeq	r1, r0, r4, ror #13
    1828:	080050d0 	stmdaeq	r0, {r4, r6, r7, ip, lr}
    182c:	00000038 	andeq	r0, r0, r8, lsr r0
    1830:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1834:	100e4101 	andne	r4, lr, r1, lsl #2
    1838:	00070d41 	andeq	r0, r7, r1, asr #26
    183c:	00000018 	andeq	r0, r0, r8, lsl r0
    1840:	000016e4 	andeq	r1, r0, r4, ror #13
    1844:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
    1848:	00000054 	andeq	r0, r0, r4, asr r0
    184c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1850:	180e4101 	stmdane	lr, {r0, r8, lr}
    1854:	00070d41 	andeq	r0, r7, r1, asr #26
    1858:	00000018 	andeq	r0, r0, r8, lsl r0
    185c:	000016e4 	andeq	r1, r0, r4, ror #13
    1860:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    1864:	0000001c 	andeq	r0, r0, ip, lsl r0
    1868:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    186c:	100e4101 	andne	r4, lr, r1, lsl #2
    1870:	00070d41 	andeq	r0, r7, r1, asr #26
    1874:	00000018 	andeq	r0, r0, r8, lsl r0
    1878:	000016e4 	andeq	r1, r0, r4, ror #13
    187c:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    1880:	0000003c 	andeq	r0, r0, ip, lsr r0
    1884:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1888:	100e4101 	andne	r4, lr, r1, lsl #2
    188c:	00070d41 	andeq	r0, r7, r1, asr #26
    1890:	00000018 	andeq	r0, r0, r8, lsl r0
    1894:	000016e4 	andeq	r1, r0, r4, ror #13
    1898:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
    189c:	00000034 	andeq	r0, r0, r4, lsr r0
    18a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18a4:	180e4101 	stmdane	lr, {r0, r8, lr}
    18a8:	00070d41 	andeq	r0, r7, r1, asr #26
    18ac:	00000018 	andeq	r0, r0, r8, lsl r0
    18b0:	000016e4 	andeq	r1, r0, r4, ror #13
    18b4:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
    18b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    18bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18c0:	100e4101 	andne	r4, lr, r1, lsl #2
    18c4:	00070d41 	andeq	r0, r7, r1, asr #26
    18c8:	00000018 	andeq	r0, r0, r8, lsl r0
    18cc:	000016e4 	andeq	r1, r0, r4, ror #13
    18d0:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
    18d4:	00000058 	andeq	r0, r0, r8, asr r0
    18d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18dc:	180e4101 	stmdane	lr, {r0, r8, lr}
    18e0:	00070d41 	andeq	r0, r7, r1, asr #26
    18e4:	00000018 	andeq	r0, r0, r8, lsl r0
    18e8:	000016e4 	andeq	r1, r0, r4, ror #13
    18ec:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    18f0:	00000024 	andeq	r0, r0, r4, lsr #32
    18f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18f8:	100e4101 	andne	r4, lr, r1, lsl #2
    18fc:	00070d41 	andeq	r0, r7, r1, asr #26
    1900:	0000000c 	andeq	r0, r0, ip
    1904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1908:	7c020001 	stcvc	0, cr0, [r2], {1}
    190c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1910:	00000018 	andeq	r0, r0, r8, lsl r0
    1914:	00001900 	andeq	r1, r0, r0, lsl #18
    1918:	08005280 	stmdaeq	r0, {r7, r9, ip, lr}
    191c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1920:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1924:	41018e02 	tstmi	r1, r2, lsl #28
    1928:	0000070d 	andeq	r0, r0, sp, lsl #14
    192c:	00000018 	andeq	r0, r0, r8, lsl r0
    1930:	00001900 	andeq	r1, r0, r0, lsl #18
    1934:	0800529c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, lr}
    1938:	0000012c 	andeq	r0, r0, ip, lsr #2
    193c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1940:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1944:	00070d41 	andeq	r0, r7, r1, asr #26
    1948:	00000018 	andeq	r0, r0, r8, lsl r0
    194c:	00001900 	andeq	r1, r0, r0, lsl #18
    1950:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    1954:	0000006c 	andeq	r0, r0, ip, rrx
    1958:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    195c:	100e4101 	andne	r4, lr, r1, lsl #2
    1960:	00070d41 	andeq	r0, r7, r1, asr #26
    1964:	00000018 	andeq	r0, r0, r8, lsl r0
    1968:	00001900 	andeq	r1, r0, r0, lsl #18
    196c:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
    1970:	00000038 	andeq	r0, r0, r8, lsr r0
    1974:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1978:	100e4101 	andne	r4, lr, r1, lsl #2
    197c:	00070d41 	andeq	r0, r7, r1, asr #26
    1980:	00000018 	andeq	r0, r0, r8, lsl r0
    1984:	00001900 	andeq	r1, r0, r0, lsl #18
    1988:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
    198c:	00000038 	andeq	r0, r0, r8, lsr r0
    1990:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1994:	100e4101 	andne	r4, lr, r1, lsl #2
    1998:	00070d41 	andeq	r0, r7, r1, asr #26
    199c:	00000018 	andeq	r0, r0, r8, lsl r0
    19a0:	00001900 	andeq	r1, r0, r0, lsl #18
    19a4:	080054a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, lr}
    19a8:	00000058 	andeq	r0, r0, r8, asr r0
    19ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19b0:	200e4101 	andcs	r4, lr, r1, lsl #2
    19b4:	00070d41 	andeq	r0, r7, r1, asr #26
    19b8:	00000018 	andeq	r0, r0, r8, lsl r0
    19bc:	00001900 	andeq	r1, r0, r0, lsl #18
    19c0:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
    19c4:	00000024 	andeq	r0, r0, r4, lsr #32
    19c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19cc:	100e4101 	andne	r4, lr, r1, lsl #2
    19d0:	00070d41 	andeq	r0, r7, r1, asr #26
    19d4:	00000018 	andeq	r0, r0, r8, lsl r0
    19d8:	00001900 	andeq	r1, r0, r0, lsl #18
    19dc:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
    19e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    19e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19e8:	100e4101 	andne	r4, lr, r1, lsl #2
    19ec:	00070d41 	andeq	r0, r7, r1, asr #26
    19f0:	00000018 	andeq	r0, r0, r8, lsl r0
    19f4:	00001900 	andeq	r1, r0, r0, lsl #18
    19f8:	0800553c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, lr}
    19fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a04:	100e4101 	andne	r4, lr, r1, lsl #2
    1a08:	00070d41 	andeq	r0, r7, r1, asr #26
    1a0c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a10:	00001900 	andeq	r1, r0, r0, lsl #18
    1a14:	08005558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, lr}
    1a18:	00000132 	andeq	r0, r0, r2, lsr r1
    1a1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a20:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1a24:	00070d41 	andeq	r0, r7, r1, asr #26
    1a28:	00000018 	andeq	r0, r0, r8, lsl r0
    1a2c:	00001900 	andeq	r1, r0, r0, lsl #18
    1a30:	0800568c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, lr}
    1a34:	00000074 	andeq	r0, r0, r4, ror r0
    1a38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a3c:	100e4101 	andne	r4, lr, r1, lsl #2
    1a40:	00070d41 	andeq	r0, r7, r1, asr #26
    1a44:	00000018 	andeq	r0, r0, r8, lsl r0
    1a48:	00001900 	andeq	r1, r0, r0, lsl #18
    1a4c:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
    1a50:	00000036 	andeq	r0, r0, r6, lsr r0
    1a54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a58:	100e4101 	andne	r4, lr, r1, lsl #2
    1a5c:	00070d41 	andeq	r0, r7, r1, asr #26
    1a60:	00000018 	andeq	r0, r0, r8, lsl r0
    1a64:	00001900 	andeq	r1, r0, r0, lsl #18
    1a68:	08005738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, lr}
    1a6c:	00000040 	andeq	r0, r0, r0, asr #32
    1a70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a74:	180e4101 	stmdane	lr, {r0, r8, lr}
    1a78:	00070d41 	andeq	r0, r7, r1, asr #26
    1a7c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a80:	00001900 	andeq	r1, r0, r0, lsl #18
    1a84:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
    1a88:	0000001e 	andeq	r0, r0, lr, lsl r0
    1a8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a90:	100e4101 	andne	r4, lr, r1, lsl #2
    1a94:	00070d41 	andeq	r0, r7, r1, asr #26
    1a98:	00000018 	andeq	r0, r0, r8, lsl r0
    1a9c:	00001900 	andeq	r1, r0, r0, lsl #18
    1aa0:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
    1aa4:	00000030 	andeq	r0, r0, r0, lsr r0
    1aa8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1aac:	180e4101 	stmdane	lr, {r0, r8, lr}
    1ab0:	00070d41 	andeq	r0, r7, r1, asr #26
    1ab4:	00000018 	andeq	r0, r0, r8, lsl r0
    1ab8:	00001900 	andeq	r1, r0, r0, lsl #18
    1abc:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
    1ac0:	0000007c 	andeq	r0, r0, ip, ror r0
    1ac4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ac8:	200e4101 	andcs	r4, lr, r1, lsl #2
    1acc:	00070d41 	andeq	r0, r7, r1, asr #26
    1ad0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ad4:	00001900 	andeq	r1, r0, r0, lsl #18
    1ad8:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
    1adc:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ae4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ae8:	00070d41 	andeq	r0, r7, r1, asr #26
    1aec:	00000018 	andeq	r0, r0, r8, lsl r0
    1af0:	00001900 	andeq	r1, r0, r0, lsl #18
    1af4:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
    1af8:	00000040 	andeq	r0, r0, r0, asr #32
    1afc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b00:	100e4101 	andne	r4, lr, r1, lsl #2
    1b04:	00070d41 	andeq	r0, r7, r1, asr #26
    1b08:	00000018 	andeq	r0, r0, r8, lsl r0
    1b0c:	00001900 	andeq	r1, r0, r0, lsl #18
    1b10:	080058a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, lr}
    1b14:	0000004c 	andeq	r0, r0, ip, asr #32
    1b18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b1c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1b20:	00070d41 	andeq	r0, r7, r1, asr #26
    1b24:	00000018 	andeq	r0, r0, r8, lsl r0
    1b28:	00001900 	andeq	r1, r0, r0, lsl #18
    1b2c:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
    1b30:	0000002a 	andeq	r0, r0, sl, lsr #32
    1b34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b38:	100e4101 	andne	r4, lr, r1, lsl #2
    1b3c:	00070d41 	andeq	r0, r7, r1, asr #26
    1b40:	00000018 	andeq	r0, r0, r8, lsl r0
    1b44:	00001900 	andeq	r1, r0, r0, lsl #18
    1b48:	08005920 	stmdaeq	r0, {r5, r8, fp, ip, lr}
    1b4c:	000000dc 	ldrdeq	r0, [r0], -ip
    1b50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b54:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1b58:	00070d41 	andeq	r0, r7, r1, asr #26
    1b5c:	00000018 	andeq	r0, r0, r8, lsl r0
    1b60:	00001900 	andeq	r1, r0, r0, lsl #18
    1b64:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
    1b68:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b70:	100e4101 	andne	r4, lr, r1, lsl #2
    1b74:	00070d41 	andeq	r0, r7, r1, asr #26
    1b78:	00000018 	andeq	r0, r0, r8, lsl r0
    1b7c:	00001900 	andeq	r1, r0, r0, lsl #18
    1b80:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
    1b84:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b8c:	100e4101 	andne	r4, lr, r1, lsl #2
    1b90:	00070d41 	andeq	r0, r7, r1, asr #26
    1b94:	00000018 	andeq	r0, r0, r8, lsl r0
    1b98:	00001900 	andeq	r1, r0, r0, lsl #18
    1b9c:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
    1ba0:	000000ca 	andeq	r0, r0, sl, asr #1
    1ba4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ba8:	300e4101 	andcc	r4, lr, r1, lsl #2
    1bac:	00070d41 	andeq	r0, r7, r1, asr #26
    1bb0:	00000018 	andeq	r0, r0, r8, lsl r0
    1bb4:	00001900 	andeq	r1, r0, r0, lsl #18
    1bb8:	08005b00 	stmdaeq	r0, {r8, r9, fp, ip, lr}
    1bbc:	000000c0 	andeq	r0, r0, r0, asr #1
    1bc0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bc4:	180e4101 	stmdane	lr, {r0, r8, lr}
    1bc8:	00070d41 	andeq	r0, r7, r1, asr #26
    1bcc:	00000018 	andeq	r0, r0, r8, lsl r0
    1bd0:	00001900 	andeq	r1, r0, r0, lsl #18
    1bd4:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    1bd8:	0000003c 	andeq	r0, r0, ip, lsr r0
    1bdc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1be0:	100e4101 	andne	r4, lr, r1, lsl #2
    1be4:	00070d41 	andeq	r0, r7, r1, asr #26
    1be8:	00000018 	andeq	r0, r0, r8, lsl r0
    1bec:	00001900 	andeq	r1, r0, r0, lsl #18
    1bf0:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    1bf4:	00000034 	andeq	r0, r0, r4, lsr r0
    1bf8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bfc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c00:	00070d41 	andeq	r0, r7, r1, asr #26
    1c04:	00000018 	andeq	r0, r0, r8, lsl r0
    1c08:	00001900 	andeq	r1, r0, r0, lsl #18
    1c0c:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
    1c10:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c18:	100e4101 	andne	r4, lr, r1, lsl #2
    1c1c:	00070d41 	andeq	r0, r7, r1, asr #26
    1c20:	00000018 	andeq	r0, r0, r8, lsl r0
    1c24:	00001900 	andeq	r1, r0, r0, lsl #18
    1c28:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
    1c2c:	00000050 	andeq	r0, r0, r0, asr r0
    1c30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c34:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c38:	00070d41 	andeq	r0, r7, r1, asr #26
    1c3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1c40:	00001900 	andeq	r1, r0, r0, lsl #18
    1c44:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
    1c48:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c50:	100e4101 	andne	r4, lr, r1, lsl #2
    1c54:	00070d41 	andeq	r0, r7, r1, asr #26
    1c58:	0000000c 	andeq	r0, r0, ip
    1c5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1c60:	7c020001 	stcvc	0, cr0, [r2], {1}
    1c64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1c68:	00000018 	andeq	r0, r0, r8, lsl r0
    1c6c:	00001c58 	andeq	r1, r0, r8, asr ip
    1c70:	08005cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, lr}
    1c74:	00000058 	andeq	r0, r0, r8, asr r0
    1c78:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c7c:	100e4101 	andne	r4, lr, r1, lsl #2
    1c80:	00070d41 	andeq	r0, r7, r1, asr #26
    1c84:	00000018 	andeq	r0, r0, r8, lsl r0
    1c88:	00001c58 	andeq	r1, r0, r8, asr ip
    1c8c:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
    1c90:	00000194 	muleq	r0, r4, r1
    1c94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c98:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c9c:	00070d41 	andeq	r0, r7, r1, asr #26
    1ca0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ca4:	00001c58 	andeq	r1, r0, r8, asr ip
    1ca8:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
    1cac:	000000da 	ldrdeq	r0, [r0], -sl
    1cb0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cb4:	100e4101 	andne	r4, lr, r1, lsl #2
    1cb8:	00070d41 	andeq	r0, r7, r1, asr #26
    1cbc:	00000018 	andeq	r0, r0, r8, lsl r0
    1cc0:	00001c58 	andeq	r1, r0, r8, asr ip
    1cc4:	08005f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, lr}
    1cc8:	00000054 	andeq	r0, r0, r4, asr r0
    1ccc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cd0:	100e4101 	andne	r4, lr, r1, lsl #2
    1cd4:	00070d41 	andeq	r0, r7, r1, asr #26
    1cd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1cdc:	00001c58 	andeq	r1, r0, r8, asr ip
    1ce0:	08005fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, ip, lr}
    1ce4:	0000005c 	andeq	r0, r0, ip, asr r0
    1ce8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cec:	100e4101 	andne	r4, lr, r1, lsl #2
    1cf0:	00070d41 	andeq	r0, r7, r1, asr #26
    1cf4:	00000018 	andeq	r0, r0, r8, lsl r0
    1cf8:	00001c58 	andeq	r1, r0, r8, asr ip
    1cfc:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
    1d00:	000000cc 	andeq	r0, r0, ip, asr #1
    1d04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d08:	200e4101 	andcs	r4, lr, r1, lsl #2
    1d0c:	00070d41 	andeq	r0, r7, r1, asr #26
    1d10:	00000018 	andeq	r0, r0, r8, lsl r0
    1d14:	00001c58 	andeq	r1, r0, r8, asr ip
    1d18:	080060fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp, lr}
    1d1c:	0000007c 	andeq	r0, r0, ip, ror r0
    1d20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d24:	100e4101 	andne	r4, lr, r1, lsl #2
    1d28:	00070d41 	andeq	r0, r7, r1, asr #26
    1d2c:	00000018 	andeq	r0, r0, r8, lsl r0
    1d30:	00001c58 	andeq	r1, r0, r8, asr ip
    1d34:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    1d38:	0000006c 	andeq	r0, r0, ip, rrx
    1d3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d40:	100e4101 	andne	r4, lr, r1, lsl #2
    1d44:	00070d41 	andeq	r0, r7, r1, asr #26
    1d48:	00000018 	andeq	r0, r0, r8, lsl r0
    1d4c:	00001c58 	andeq	r1, r0, r8, asr ip
    1d50:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    1d54:	0000006c 	andeq	r0, r0, ip, rrx
    1d58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d5c:	100e4101 	andne	r4, lr, r1, lsl #2
    1d60:	00070d41 	andeq	r0, r7, r1, asr #26
    1d64:	00000018 	andeq	r0, r0, r8, lsl r0
    1d68:	00001c58 	andeq	r1, r0, r8, asr ip
    1d6c:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    1d70:	00000038 	andeq	r0, r0, r8, lsr r0
    1d74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d78:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d7c:	00070d41 	andeq	r0, r7, r1, asr #26
    1d80:	00000014 	andeq	r0, r0, r4, lsl r0
    1d84:	00001c58 	andeq	r1, r0, r8, asr ip
    1d88:	08006288 	stmdaeq	r0, {r3, r7, r9, sp, lr}
    1d8c:	00000034 	andeq	r0, r0, r4, lsr r0
    1d90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1d98:	00000018 	andeq	r0, r0, r8, lsl r0
    1d9c:	00001c58 	andeq	r1, r0, r8, asr ip
    1da0:	080062bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp, lr}
    1da4:	000000ac 	andeq	r0, r0, ip, lsr #1
    1da8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dac:	100e4101 	andne	r4, lr, r1, lsl #2
    1db0:	00070d41 	andeq	r0, r7, r1, asr #26
    1db4:	00000018 	andeq	r0, r0, r8, lsl r0
    1db8:	00001c58 	andeq	r1, r0, r8, asr ip
    1dbc:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
    1dc0:	00000084 	andeq	r0, r0, r4, lsl #1
    1dc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dc8:	100e4101 	andne	r4, lr, r1, lsl #2
    1dcc:	00070d41 	andeq	r0, r7, r1, asr #26
    1dd0:	00000018 	andeq	r0, r0, r8, lsl r0
    1dd4:	00001c58 	andeq	r1, r0, r8, asr ip
    1dd8:	080063ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, lr}
    1ddc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1de0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1de4:	100e4101 	andne	r4, lr, r1, lsl #2
    1de8:	00070d41 	andeq	r0, r7, r1, asr #26
    1dec:	00000018 	andeq	r0, r0, r8, lsl r0
    1df0:	00001c58 	andeq	r1, r0, r8, asr ip
    1df4:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
    1df8:	00000044 	andeq	r0, r0, r4, asr #32
    1dfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e00:	100e4101 	andne	r4, lr, r1, lsl #2
    1e04:	00070d41 	andeq	r0, r7, r1, asr #26
    1e08:	00000018 	andeq	r0, r0, r8, lsl r0
    1e0c:	00001c58 	andeq	r1, r0, r8, asr ip
    1e10:	0800646c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp, lr}
    1e14:	0000015c 	andeq	r0, r0, ip, asr r1
    1e18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e1c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1e20:	00070d41 	andeq	r0, r7, r1, asr #26
    1e24:	00000018 	andeq	r0, r0, r8, lsl r0
    1e28:	00001c58 	andeq	r1, r0, r8, asr ip
    1e2c:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
    1e30:	00000088 	andeq	r0, r0, r8, lsl #1
    1e34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e38:	100e4101 	andne	r4, lr, r1, lsl #2
    1e3c:	00070d41 	andeq	r0, r7, r1, asr #26
    1e40:	00000018 	andeq	r0, r0, r8, lsl r0
    1e44:	00001c58 	andeq	r1, r0, r8, asr ip
    1e48:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
    1e4c:	00000040 	andeq	r0, r0, r0, asr #32
    1e50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e54:	180e4101 	stmdane	lr, {r0, r8, lr}
    1e58:	00070d41 	andeq	r0, r7, r1, asr #26
    1e5c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e60:	00001c58 	andeq	r1, r0, r8, asr ip
    1e64:	08006690 	stmdaeq	r0, {r4, r7, r9, sl, sp, lr}
    1e68:	0000003c 	andeq	r0, r0, ip, lsr r0
    1e6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e70:	180e4101 	stmdane	lr, {r0, r8, lr}
    1e74:	00070d41 	andeq	r0, r7, r1, asr #26
    1e78:	00000018 	andeq	r0, r0, r8, lsl r0
    1e7c:	00001c58 	andeq	r1, r0, r8, asr ip
    1e80:	080066cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp, lr}
    1e84:	00000024 	andeq	r0, r0, r4, lsr #32
    1e88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e8c:	100e4101 	andne	r4, lr, r1, lsl #2
    1e90:	00070d41 	andeq	r0, r7, r1, asr #26
    1e94:	00000018 	andeq	r0, r0, r8, lsl r0
    1e98:	00001c58 	andeq	r1, r0, r8, asr ip
    1e9c:	080066f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp, lr}
    1ea0:	00000024 	andeq	r0, r0, r4, lsr #32
    1ea4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ea8:	100e4101 	andne	r4, lr, r1, lsl #2
    1eac:	00070d41 	andeq	r0, r7, r1, asr #26
    1eb0:	00000018 	andeq	r0, r0, r8, lsl r0
    1eb4:	00001c58 	andeq	r1, r0, r8, asr ip
    1eb8:	08006714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp, lr}
    1ebc:	0000004c 	andeq	r0, r0, ip, asr #32
    1ec0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ec4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ec8:	00070d41 	andeq	r0, r7, r1, asr #26
    1ecc:	00000018 	andeq	r0, r0, r8, lsl r0
    1ed0:	00001c58 	andeq	r1, r0, r8, asr ip
    1ed4:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
    1ed8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1edc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ee0:	180e4101 	stmdane	lr, {r0, r8, lr}
    1ee4:	00070d41 	andeq	r0, r7, r1, asr #26
    1ee8:	00000018 	andeq	r0, r0, r8, lsl r0
    1eec:	00001c58 	andeq	r1, r0, r8, asr ip
    1ef0:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
    1ef4:	0000007c 	andeq	r0, r0, ip, ror r0
    1ef8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1efc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f00:	00070d41 	andeq	r0, r7, r1, asr #26
    1f04:	00000018 	andeq	r0, r0, r8, lsl r0
    1f08:	00001c58 	andeq	r1, r0, r8, asr ip
    1f0c:	080068ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, sp, lr}
    1f10:	00000078 	andeq	r0, r0, r8, ror r0
    1f14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f18:	100e4101 	andne	r4, lr, r1, lsl #2
    1f1c:	00070d41 	andeq	r0, r7, r1, asr #26
    1f20:	00000018 	andeq	r0, r0, r8, lsl r0
    1f24:	00001c58 	andeq	r1, r0, r8, asr ip
    1f28:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
    1f2c:	000000b4 	strheq	r0, [r0], -r4
    1f30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f34:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1f38:	00070d41 	andeq	r0, r7, r1, asr #26
    1f3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1f40:	00001c58 	andeq	r1, r0, r8, asr ip
    1f44:	080069d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, sp, lr}
    1f48:	0000007c 	andeq	r0, r0, ip, ror r0
    1f4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f50:	100e4101 	andne	r4, lr, r1, lsl #2
    1f54:	00070d41 	andeq	r0, r7, r1, asr #26
    1f58:	0000000c 	andeq	r0, r0, ip
    1f5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1f60:	7c020001 	stcvc	0, cr0, [r2], {1}
    1f64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1f68:	00000018 	andeq	r0, r0, r8, lsl r0
    1f6c:	00001f58 	andeq	r1, r0, r8, asr pc
    1f70:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}
    1f74:	00000016 	andeq	r0, r0, r6, lsl r0
    1f78:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1f7c:	41018e02 	tstmi	r1, r2, lsl #28
    1f80:	0000070d 	andeq	r0, r0, sp, lsl #14
    1f84:	00000018 	andeq	r0, r0, r8, lsl r0
    1f88:	00001f58 	andeq	r1, r0, r8, asr pc
    1f8c:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
    1f90:	00000038 	andeq	r0, r0, r8, lsr r0
    1f94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f98:	100e4101 	andne	r4, lr, r1, lsl #2
    1f9c:	00070d41 	andeq	r0, r7, r1, asr #26
    1fa0:	00000014 	andeq	r0, r0, r4, lsl r0
    1fa4:	00001f58 	andeq	r1, r0, r8, asr pc
    1fa8:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
    1fac:	00000018 	andeq	r0, r0, r8, lsl r0
    1fb0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fb4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1fb8:	00000018 	andeq	r0, r0, r8, lsl r0
    1fbc:	00001f58 	andeq	r1, r0, r8, asr pc
    1fc0:	08006abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, sp, lr}
    1fc4:	00000038 	andeq	r0, r0, r8, lsr r0
    1fc8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fcc:	100e4101 	andne	r4, lr, r1, lsl #2
    1fd0:	00070d41 	andeq	r0, r7, r1, asr #26
    1fd4:	00000018 	andeq	r0, r0, r8, lsl r0
    1fd8:	00001f58 	andeq	r1, r0, r8, asr pc
    1fdc:	08006af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp, lr}
    1fe0:	00000038 	andeq	r0, r0, r8, lsr r0
    1fe4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fe8:	180e4101 	stmdane	lr, {r0, r8, lr}
    1fec:	00070d41 	andeq	r0, r7, r1, asr #26
    1ff0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ff4:	00001f58 	andeq	r1, r0, r8, asr pc
    1ff8:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
    1ffc:	00000024 	andeq	r0, r0, r4, lsr #32
    2000:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2004:	100e4101 	andne	r4, lr, r1, lsl #2
    2008:	00070d41 	andeq	r0, r7, r1, asr #26
    200c:	00000018 	andeq	r0, r0, r8, lsl r0
    2010:	00001f58 	andeq	r1, r0, r8, asr pc
    2014:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
    2018:	00000038 	andeq	r0, r0, r8, lsr r0
    201c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2020:	180e4101 	stmdane	lr, {r0, r8, lr}
    2024:	00070d41 	andeq	r0, r7, r1, asr #26
    2028:	00000018 	andeq	r0, r0, r8, lsl r0
    202c:	00001f58 	andeq	r1, r0, r8, asr pc
    2030:	08006b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, sp, lr}
    2034:	00000024 	andeq	r0, r0, r4, lsr #32
    2038:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    203c:	100e4101 	andne	r4, lr, r1, lsl #2
    2040:	00070d41 	andeq	r0, r7, r1, asr #26
    2044:	0000000c 	andeq	r0, r0, ip
    2048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    204c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2050:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2054:	0000001c 	andeq	r0, r0, ip, lsl r0
    2058:	00002044 	andeq	r2, r0, r4, asr #32
    205c:	08006bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, sp, lr}
    2060:	0000005c 	andeq	r0, r0, ip, asr r0
    2064:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2068:	41018e02 	tstmi	r1, r2, lsl #28
    206c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2070:	00000007 	andeq	r0, r0, r7
    2074:	00000018 	andeq	r0, r0, r8, lsl r0
    2078:	00002044 	andeq	r2, r0, r4, asr #32
    207c:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
    2080:	00000030 	andeq	r0, r0, r0, lsr r0
    2084:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2088:	100e4101 	andne	r4, lr, r1, lsl #2
    208c:	00070d41 	andeq	r0, r7, r1, asr #26
    2090:	00000018 	andeq	r0, r0, r8, lsl r0
    2094:	00002044 	andeq	r2, r0, r4, asr #32
    2098:	08006c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, lr}
    209c:	00000030 	andeq	r0, r0, r0, lsr r0
    20a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20a4:	100e4101 	andne	r4, lr, r1, lsl #2
    20a8:	00070d41 	andeq	r0, r7, r1, asr #26
    20ac:	00000018 	andeq	r0, r0, r8, lsl r0
    20b0:	00002044 	andeq	r2, r0, r4, asr #32
    20b4:	08006c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, sp, lr}
    20b8:	0000003c 	andeq	r0, r0, ip, lsr r0
    20bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20c0:	100e4101 	andne	r4, lr, r1, lsl #2
    20c4:	00070d41 	andeq	r0, r7, r1, asr #26
    20c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    20cc:	00002044 	andeq	r2, r0, r4, asr #32
    20d0:	08006ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, lr}
    20d4:	00000094 	muleq	r0, r4, r0
    20d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    20dc:	41018e02 	tstmi	r1, r2, lsl #28
    20e0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    20e4:	00000007 	andeq	r0, r0, r7
    20e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    20ec:	00002044 	andeq	r2, r0, r4, asr #32
    20f0:	08006d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp, lr}
    20f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    20fc:	41018e02 	tstmi	r1, r2, lsl #28
    2100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2104:	00000007 	andeq	r0, r0, r7
    2108:	0000001c 	andeq	r0, r0, ip, lsl r0
    210c:	00002044 	andeq	r2, r0, r4, asr #32
    2110:	08006d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, lr}
    2114:	000000b8 	strheq	r0, [r0], -r8
    2118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    211c:	41018e02 	tstmi	r1, r2, lsl #28
    2120:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2124:	00000007 	andeq	r0, r0, r7
    2128:	0000001c 	andeq	r0, r0, ip, lsl r0
    212c:	00002044 	andeq	r2, r0, r4, asr #32
    2130:	08006e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, lr}
    2134:	00000198 	muleq	r0, r8, r1
    2138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    213c:	41018e02 	tstmi	r1, r2, lsl #28
    2140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2144:	00000007 	andeq	r0, r0, r7
    2148:	0000001c 	andeq	r0, r0, ip, lsl r0
    214c:	00002044 	andeq	r2, r0, r4, asr #32
    2150:	08006fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
    2154:	0000005c 	andeq	r0, r0, ip, asr r0
    2158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    215c:	41018e02 	tstmi	r1, r2, lsl #28
    2160:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2164:	00000007 	andeq	r0, r0, r7
    2168:	0000000c 	andeq	r0, r0, ip
    216c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2170:	7c020001 	stcvc	0, cr0, [r2], {1}
    2174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2178:	0000001c 	andeq	r0, r0, ip, lsl r0
    217c:	00002168 	andeq	r2, r0, r8, ror #2
    2180:	08007010 	stmdaeq	r0, {r4, ip, sp, lr}
    2184:	00000074 	andeq	r0, r0, r4, ror r0
    2188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    218c:	41018e02 	tstmi	r1, r2, lsl #28
    2190:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2194:	00000007 	andeq	r0, r0, r7
    2198:	0000001c 	andeq	r0, r0, ip, lsl r0
    219c:	00002168 	andeq	r2, r0, r8, ror #2
    21a0:	08007084 	stmdaeq	r0, {r2, r7, ip, sp, lr}
    21a4:	00000214 	andeq	r0, r0, r4, lsl r2
    21a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21ac:	41018e02 	tstmi	r1, r2, lsl #28
    21b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    21b4:	00000007 	andeq	r0, r0, r7
    21b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21bc:	00002168 	andeq	r2, r0, r8, ror #2
    21c0:	08007298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp, lr}
    21c4:	000000ec 	andeq	r0, r0, ip, ror #1
    21c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21cc:	41018e02 	tstmi	r1, r2, lsl #28
    21d0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    21d4:	00000007 	andeq	r0, r0, r7
    21d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21dc:	00002168 	andeq	r2, r0, r8, ror #2
    21e0:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
    21e4:	00000054 	andeq	r0, r0, r4, asr r0
    21e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21ec:	41018e02 	tstmi	r1, r2, lsl #28
    21f0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    21f4:	00000007 	andeq	r0, r0, r7
    21f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21fc:	00002168 	andeq	r2, r0, r8, ror #2
    2200:	080073d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, lr}
    2204:	0000004a 	andeq	r0, r0, sl, asr #32
    2208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    220c:	41018e02 	tstmi	r1, r2, lsl #28
    2210:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2214:	00000007 	andeq	r0, r0, r7
    2218:	00000018 	andeq	r0, r0, r8, lsl r0
    221c:	00002168 	andeq	r2, r0, r8, ror #2
    2220:	08007424 	stmdaeq	r0, {r2, r5, sl, ip, sp, lr}
    2224:	00000034 	andeq	r0, r0, r4, lsr r0
    2228:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    222c:	180e4101 	stmdane	lr, {r0, r8, lr}
    2230:	00070d41 	andeq	r0, r7, r1, asr #26
    2234:	0000000c 	andeq	r0, r0, ip
    2238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    223c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2240:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2244:	0000001c 	andeq	r0, r0, ip, lsl r0
    2248:	00002234 	andeq	r2, r0, r4, lsr r2
    224c:	08007458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, lr}
    2250:	00000076 	andeq	r0, r0, r6, ror r0
    2254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2258:	41018e02 	tstmi	r1, r2, lsl #28
    225c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2260:	00000007 	andeq	r0, r0, r7
    2264:	0000001c 	andeq	r0, r0, ip, lsl r0
    2268:	00002234 	andeq	r2, r0, r4, lsr r2
    226c:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
    2270:	0000002e 	andeq	r0, r0, lr, lsr #32
    2274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2278:	41018e02 	tstmi	r1, r2, lsl #28
    227c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2280:	00000007 	andeq	r0, r0, r7
    2284:	0000001c 	andeq	r0, r0, ip, lsl r0
    2288:	00002234 	andeq	r2, r0, r4, lsr r2
    228c:	08007500 	stmdaeq	r0, {r8, sl, ip, sp, lr}
    2290:	00000082 	andeq	r0, r0, r2, lsl #1
    2294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2298:	41018e02 	tstmi	r1, r2, lsl #28
    229c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22a0:	00000007 	andeq	r0, r0, r7
    22a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22a8:	00002234 	andeq	r2, r0, r4, lsr r2
    22ac:	08007584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp, lr}
    22b0:	00000040 	andeq	r0, r0, r0, asr #32
    22b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22b8:	41018e02 	tstmi	r1, r2, lsl #28
    22bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22c0:	00000007 	andeq	r0, r0, r7
    22c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22c8:	00002234 	andeq	r2, r0, r4, lsr r2
    22cc:	080075c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, lr}
    22d0:	00000040 	andeq	r0, r0, r0, asr #32
    22d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22d8:	41018e02 	tstmi	r1, r2, lsl #28
    22dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22e0:	00000007 	andeq	r0, r0, r7
    22e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22e8:	00002234 	andeq	r2, r0, r4, lsr r2
    22ec:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
    22f0:	00000048 	andeq	r0, r0, r8, asr #32
    22f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22f8:	41018e02 	tstmi	r1, r2, lsl #28
    22fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2300:	00000007 	andeq	r0, r0, r7
    2304:	0000001c 	andeq	r0, r0, ip, lsl r0
    2308:	00002234 	andeq	r2, r0, r4, lsr r2
    230c:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
    2310:	00000040 	andeq	r0, r0, r0, asr #32
    2314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2318:	41018e02 	tstmi	r1, r2, lsl #28
    231c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2320:	00000007 	andeq	r0, r0, r7
    2324:	0000001c 	andeq	r0, r0, ip, lsl r0
    2328:	00002234 	andeq	r2, r0, r4, lsr r2
    232c:	0800768c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, sp, lr}
    2330:	0000001c 	andeq	r0, r0, ip, lsl r0
    2334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2338:	41018e02 	tstmi	r1, r2, lsl #28
    233c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2340:	00000007 	andeq	r0, r0, r7
    2344:	0000001c 	andeq	r0, r0, ip, lsl r0
    2348:	00002234 	andeq	r2, r0, r4, lsr r2
    234c:	080076a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp, lr}
    2350:	00000060 	andeq	r0, r0, r0, rrx
    2354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2358:	41018e02 	tstmi	r1, r2, lsl #28
    235c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2360:	00000007 	andeq	r0, r0, r7
    2364:	0000001c 	andeq	r0, r0, ip, lsl r0
    2368:	00002234 	andeq	r2, r0, r4, lsr r2
    236c:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}
    2370:	0000006c 	andeq	r0, r0, ip, rrx
    2374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2378:	41018e02 	tstmi	r1, r2, lsl #28
    237c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2380:	00000007 	andeq	r0, r0, r7
    2384:	0000001c 	andeq	r0, r0, ip, lsl r0
    2388:	00002234 	andeq	r2, r0, r4, lsr r2
    238c:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    2390:	00000138 	andeq	r0, r0, r8, lsr r1
    2394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2398:	41018e02 	tstmi	r1, r2, lsl #28
    239c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    23a0:	00000007 	andeq	r0, r0, r7
    23a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    23a8:	00002234 	andeq	r2, r0, r4, lsr r2
    23ac:	080078ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp, lr}
    23b0:	00000090 	muleq	r0, r0, r0
    23b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    23b8:	41018e02 	tstmi	r1, r2, lsl #28
    23bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    23c0:	00000007 	andeq	r0, r0, r7
    23c4:	00000014 	andeq	r0, r0, r4, lsl r0
    23c8:	00002234 	andeq	r2, r0, r4, lsr r2
    23cc:	0800793c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp, lr}
    23d0:	00000006 	andeq	r0, r0, r6
    23d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    23d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    23dc:	0000000c 	andeq	r0, r0, ip
    23e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    23e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    23e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    23ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    23f0:	000023dc 	ldrdeq	r2, [r0], -ip
    23f4:	08007944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp, lr}
    23f8:	00000224 	andeq	r0, r0, r4, lsr #4
    23fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2400:	41018e02 	tstmi	r1, r2, lsl #28
    2404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2408:	00000007 	andeq	r0, r0, r7
    240c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2410:	000023dc 	ldrdeq	r2, [r0], -ip
    2414:	08007b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, sp, lr}
    2418:	000000b2 	strheq	r0, [r0], -r2
    241c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2420:	41018e02 	tstmi	r1, r2, lsl #28
    2424:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2428:	00000007 	andeq	r0, r0, r7
    242c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2430:	000023dc 	ldrdeq	r2, [r0], -ip
    2434:	08007c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp, lr}
    2438:	000000b4 	strheq	r0, [r0], -r4
    243c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2440:	41018e02 	tstmi	r1, r2, lsl #28
    2444:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2448:	00000007 	andeq	r0, r0, r7
    244c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2450:	000023dc 	ldrdeq	r2, [r0], -ip
    2454:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
    2458:	0000002c 	andeq	r0, r0, ip, lsr #32
    245c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2460:	41018e02 	tstmi	r1, r2, lsl #28
    2464:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2468:	00000007 	andeq	r0, r0, r7
    246c:	00000018 	andeq	r0, r0, r8, lsl r0
    2470:	000023dc 	ldrdeq	r2, [r0], -ip
    2474:	08007cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
    2478:	00000040 	andeq	r0, r0, r0, asr #32
    247c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2480:	100e4101 	andne	r4, lr, r1, lsl #2
    2484:	00070d41 	andeq	r0, r7, r1, asr #26
    2488:	00000018 	andeq	r0, r0, r8, lsl r0
    248c:	000023dc 	ldrdeq	r2, [r0], -ip
    2490:	08007d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
    2494:	0000002c 	andeq	r0, r0, ip, lsr #32
    2498:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    249c:	100e4101 	andne	r4, lr, r1, lsl #2
    24a0:	00070d41 	andeq	r0, r7, r1, asr #26
    24a4:	00000018 	andeq	r0, r0, r8, lsl r0
    24a8:	000023dc 	ldrdeq	r2, [r0], -ip
    24ac:	08007d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp, lr}
    24b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    24b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24b8:	100e4101 	andne	r4, lr, r1, lsl #2
    24bc:	00070d41 	andeq	r0, r7, r1, asr #26
    24c0:	00000018 	andeq	r0, r0, r8, lsl r0
    24c4:	000023dc 	ldrdeq	r2, [r0], -ip
    24c8:	08007d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, sp, lr}
    24cc:	00000020 	andeq	r0, r0, r0, lsr #32
    24d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24d4:	100e4101 	andne	r4, lr, r1, lsl #2
    24d8:	00070d41 	andeq	r0, r7, r1, asr #26
    24dc:	00000018 	andeq	r0, r0, r8, lsl r0
    24e0:	000023dc 	ldrdeq	r2, [r0], -ip
    24e4:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    24e8:	00000020 	andeq	r0, r0, r0, lsr #32
    24ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24f0:	100e4101 	andne	r4, lr, r1, lsl #2
    24f4:	00070d41 	andeq	r0, r7, r1, asr #26
    24f8:	00000018 	andeq	r0, r0, r8, lsl r0
    24fc:	000023dc 	ldrdeq	r2, [r0], -ip
    2500:	08007dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}
    2504:	0000001c 	andeq	r0, r0, ip, lsl r0
    2508:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    250c:	100e4101 	andne	r4, lr, r1, lsl #2
    2510:	00070d41 	andeq	r0, r7, r1, asr #26
    2514:	0000001c 	andeq	r0, r0, ip, lsl r0
    2518:	000023dc 	ldrdeq	r2, [r0], -ip
    251c:	08007df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    2520:	00000040 	andeq	r0, r0, r0, asr #32
    2524:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2528:	41018e02 	tstmi	r1, r2, lsl #28
    252c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2530:	00000007 	andeq	r0, r0, r7
    2534:	00000014 	andeq	r0, r0, r4, lsl r0
    2538:	000023dc 	ldrdeq	r2, [r0], -ip
    253c:	08007e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp, lr}
    2540:	00000018 	andeq	r0, r0, r8, lsl r0
    2544:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2548:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    254c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2550:	000023dc 	ldrdeq	r2, [r0], -ip
    2554:	08007e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp, lr}
    2558:	00000050 	andeq	r0, r0, r0, asr r0
    255c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2560:	41018e02 	tstmi	r1, r2, lsl #28
    2564:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2568:	00000007 	andeq	r0, r0, r7
    256c:	00000018 	andeq	r0, r0, r8, lsl r0
    2570:	000023dc 	ldrdeq	r2, [r0], -ip
    2574:	08007e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
    2578:	00000040 	andeq	r0, r0, r0, asr #32
    257c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2580:	180e4101 	stmdane	lr, {r0, r8, lr}
    2584:	00070d41 	andeq	r0, r7, r1, asr #26
    2588:	00000018 	andeq	r0, r0, r8, lsl r0
    258c:	000023dc 	ldrdeq	r2, [r0], -ip
    2590:	08007ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    2594:	00000038 	andeq	r0, r0, r8, lsr r0
    2598:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    259c:	100e4101 	andne	r4, lr, r1, lsl #2
    25a0:	00070d41 	andeq	r0, r7, r1, asr #26
    25a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    25a8:	000023dc 	ldrdeq	r2, [r0], -ip
    25ac:	08007f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp, lr}
    25b0:	00000068 	andeq	r0, r0, r8, rrx
    25b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25b8:	41018e02 	tstmi	r1, r2, lsl #28
    25bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    25c0:	00000007 	andeq	r0, r0, r7
    25c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    25c8:	000023dc 	ldrdeq	r2, [r0], -ip
    25cc:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
    25d0:	00000048 	andeq	r0, r0, r8, asr #32
    25d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25d8:	41018e02 	tstmi	r1, r2, lsl #28
    25dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    25e0:	00000007 	andeq	r0, r0, r7
    25e4:	00000018 	andeq	r0, r0, r8, lsl r0
    25e8:	000023dc 	ldrdeq	r2, [r0], -ip
    25ec:	08007fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, sp, lr}
    25f0:	00000120 	andeq	r0, r0, r0, lsr #2
    25f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    25f8:	200e4101 	andcs	r4, lr, r1, lsl #2
    25fc:	00070d41 	andeq	r0, r7, r1, asr #26
    2600:	0000001c 	andeq	r0, r0, ip, lsl r0
    2604:	000023dc 	ldrdeq	r2, [r0], -ip
    2608:	080080e0 	stmdaeq	r0, {r5, r6, r7, pc}
    260c:	00000048 	andeq	r0, r0, r8, asr #32
    2610:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2614:	41018e02 	tstmi	r1, r2, lsl #28
    2618:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    261c:	00000007 	andeq	r0, r0, r7
    2620:	0000001c 	andeq	r0, r0, ip, lsl r0
    2624:	000023dc 	ldrdeq	r2, [r0], -ip
    2628:	08008128 	stmdaeq	r0, {r3, r5, r8, pc}
    262c:	00000078 	andeq	r0, r0, r8, ror r0
    2630:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2634:	41018e02 	tstmi	r1, r2, lsl #28
    2638:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    263c:	00000007 	andeq	r0, r0, r7
    2640:	0000001c 	andeq	r0, r0, ip, lsl r0
    2644:	000023dc 	ldrdeq	r2, [r0], -ip
    2648:	080081a0 	stmdaeq	r0, {r5, r7, r8, pc}
    264c:	0000007c 	andeq	r0, r0, ip, ror r0
    2650:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2654:	41018e02 	tstmi	r1, r2, lsl #28
    2658:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    265c:	00000007 	andeq	r0, r0, r7
    2660:	00000018 	andeq	r0, r0, r8, lsl r0
    2664:	000023dc 	ldrdeq	r2, [r0], -ip
    2668:	0800821c 	stmdaeq	r0, {r2, r3, r4, r9, pc}
    266c:	00000014 	andeq	r0, r0, r4, lsl r0
    2670:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2674:	41018e02 	tstmi	r1, r2, lsl #28
    2678:	0000070d 	andeq	r0, r0, sp, lsl #14
    267c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2680:	000023dc 	ldrdeq	r2, [r0], -ip
    2684:	08008230 	stmdaeq	r0, {r4, r5, r9, pc}
    2688:	000000c8 	andeq	r0, r0, r8, asr #1
    268c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2690:	41018e02 	tstmi	r1, r2, lsl #28
    2694:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2698:	00000007 	andeq	r0, r0, r7
    269c:	0000001c 	andeq	r0, r0, ip, lsl r0
    26a0:	000023dc 	ldrdeq	r2, [r0], -ip
    26a4:	080082f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, pc}
    26a8:	00000068 	andeq	r0, r0, r8, rrx
    26ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26b0:	41018e02 	tstmi	r1, r2, lsl #28
    26b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    26b8:	00000007 	andeq	r0, r0, r7
    26bc:	00000018 	andeq	r0, r0, r8, lsl r0
    26c0:	000023dc 	ldrdeq	r2, [r0], -ip
    26c4:	08008360 	stmdaeq	r0, {r5, r6, r8, r9, pc}
    26c8:	00000128 	andeq	r0, r0, r8, lsr #2
    26cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    26d0:	200e4101 	andcs	r4, lr, r1, lsl #2
    26d4:	00070d41 	andeq	r0, r7, r1, asr #26
    26d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    26dc:	000023dc 	ldrdeq	r2, [r0], -ip
    26e0:	08008488 	stmdaeq	r0, {r3, r7, sl, pc}
    26e4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    26e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26ec:	41018e02 	tstmi	r1, r2, lsl #28
    26f0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
    26f4:	00000007 	andeq	r0, r0, r7
    26f8:	00000018 	andeq	r0, r0, r8, lsl r0
    26fc:	000023dc 	ldrdeq	r2, [r0], -ip
    2700:	08008744 	stmdaeq	r0, {r2, r6, r8, r9, sl, pc}
    2704:	00000350 	andeq	r0, r0, r0, asr r3
    2708:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    270c:	380e4101 	stmdacc	lr, {r0, r8, lr}
    2710:	00070d41 	andeq	r0, r7, r1, asr #26
    2714:	00000018 	andeq	r0, r0, r8, lsl r0
    2718:	000023dc 	ldrdeq	r2, [r0], -ip
    271c:	08008a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, pc}
    2720:	0000007c 	andeq	r0, r0, ip, ror r0
    2724:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2728:	180e4101 	stmdane	lr, {r0, r8, lr}
    272c:	00070d41 	andeq	r0, r7, r1, asr #26
    2730:	0000001c 	andeq	r0, r0, ip, lsl r0
    2734:	000023dc 	ldrdeq	r2, [r0], -ip
    2738:	08008b10 	stmdaeq	r0, {r4, r8, r9, fp, pc}
    273c:	000001dc 	ldrdeq	r0, [r0], -ip
    2740:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2744:	41018e02 	tstmi	r1, r2, lsl #28
    2748:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    274c:	00000007 	andeq	r0, r0, r7
    2750:	0000001c 	andeq	r0, r0, ip, lsl r0
    2754:	000023dc 	ldrdeq	r2, [r0], -ip
    2758:	08008cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, pc}
    275c:	000000c0 	andeq	r0, r0, r0, asr #1
    2760:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2764:	41018e02 	tstmi	r1, r2, lsl #28
    2768:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    276c:	00000007 	andeq	r0, r0, r7
    2770:	0000001c 	andeq	r0, r0, ip, lsl r0
    2774:	000023dc 	ldrdeq	r2, [r0], -ip
    2778:	08008dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, pc}
    277c:	00000120 	andeq	r0, r0, r0, lsr #2
    2780:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2784:	41018e02 	tstmi	r1, r2, lsl #28
    2788:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    278c:	00000007 	andeq	r0, r0, r7
    2790:	0000001c 	andeq	r0, r0, ip, lsl r0
    2794:	000023dc 	ldrdeq	r2, [r0], -ip
    2798:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
    279c:	00000166 	andeq	r0, r0, r6, ror #2
    27a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27a4:	41018e02 	tstmi	r1, r2, lsl #28
    27a8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    27ac:	00000007 	andeq	r0, r0, r7
    27b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27b4:	000023dc 	ldrdeq	r2, [r0], -ip
    27b8:	08009034 	stmdaeq	r0, {r2, r4, r5, ip, pc}
    27bc:	00000076 	andeq	r0, r0, r6, ror r0
    27c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27c4:	41018e02 	tstmi	r1, r2, lsl #28
    27c8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    27cc:	00000007 	andeq	r0, r0, r7
    27d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27d4:	000023dc 	ldrdeq	r2, [r0], -ip
    27d8:	080090ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, pc}
    27dc:	00000162 	andeq	r0, r0, r2, ror #2
    27e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27e4:	41018e02 	tstmi	r1, r2, lsl #28
    27e8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    27ec:	00000007 	andeq	r0, r0, r7
    27f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27f4:	000023dc 	ldrdeq	r2, [r0], -ip
    27f8:	08009210 	stmdaeq	r0, {r4, r9, ip, pc}
    27fc:	00000056 	andeq	r0, r0, r6, asr r0
    2800:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2804:	41018e02 	tstmi	r1, r2, lsl #28
    2808:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    280c:	00000007 	andeq	r0, r0, r7
    2810:	0000001c 	andeq	r0, r0, ip, lsl r0
    2814:	000023dc 	ldrdeq	r2, [r0], -ip
    2818:	08009268 	stmdaeq	r0, {r3, r5, r6, r9, ip, pc}
    281c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2820:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    2824:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    2828:	200e4101 	andcs	r4, lr, r1, lsl #2
    282c:	00070d41 	andeq	r0, r7, r1, asr #26
    2830:	0000001c 	andeq	r0, r0, ip, lsl r0
    2834:	000023dc 	ldrdeq	r2, [r0], -ip
    2838:	08009308 	stmdaeq	r0, {r3, r8, r9, ip, pc}
    283c:	00000050 	andeq	r0, r0, r0, asr r0
    2840:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    2844:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    2848:	180e4101 	stmdane	lr, {r0, r8, lr}
    284c:	00070d41 	andeq	r0, r7, r1, asr #26
    2850:	0000001c 	andeq	r0, r0, ip, lsl r0
    2854:	000023dc 	ldrdeq	r2, [r0], -ip
    2858:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
    285c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2860:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2864:	41018e02 	tstmi	r1, r2, lsl #28
    2868:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    286c:	00000007 	andeq	r0, r0, r7
    2870:	0000001c 	andeq	r0, r0, ip, lsl r0
    2874:	000023dc 	ldrdeq	r2, [r0], -ip
    2878:	08009378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, pc}
    287c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2880:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2884:	41018e02 	tstmi	r1, r2, lsl #28
    2888:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    288c:	00000007 	andeq	r0, r0, r7
    2890:	00000020 	andeq	r0, r0, r0, lsr #32
    2894:	000023dc 	ldrdeq	r2, [r0], -ip
    2898:	08009398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, pc}
    289c:	000001a0 	andeq	r0, r0, r0, lsr #3
    28a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    28a4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    28a8:	41018e02 	tstmi	r1, r2, lsl #28
    28ac:	0c41400e 	mcrreq	0, 0, r4, r1, cr14
    28b0:	00003807 	andeq	r3, r0, r7, lsl #16
    28b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28b8:	000023dc 	ldrdeq	r2, [r0], -ip
    28bc:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    28c0:	0000005c 	andeq	r0, r0, ip, asr r0
    28c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    28c8:	41018e02 	tstmi	r1, r2, lsl #28
    28cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    28d0:	00000007 	andeq	r0, r0, r7
    28d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28d8:	000023dc 	ldrdeq	r2, [r0], -ip
    28dc:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
    28e0:	0000005c 	andeq	r0, r0, ip, asr r0
    28e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    28e8:	41018e02 	tstmi	r1, r2, lsl #28
    28ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    28f0:	00000007 	andeq	r0, r0, r7
    28f4:	00000018 	andeq	r0, r0, r8, lsl r0
    28f8:	000023dc 	ldrdeq	r2, [r0], -ip
    28fc:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
    2900:	0000028e 	andeq	r0, r0, lr, lsl #5
    2904:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2908:	41018e02 	tstmi	r1, r2, lsl #28
    290c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2910:	00000018 	andeq	r0, r0, r8, lsl r0
    2914:	000023dc 	ldrdeq	r2, [r0], -ip
    2918:	08009880 	stmdaeq	r0, {r7, fp, ip, pc}
    291c:	0000000c 	andeq	r0, r0, ip
    2920:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2924:	41018e02 	tstmi	r1, r2, lsl #28
    2928:	0000070d 	andeq	r0, r0, sp, lsl #14
    292c:	00000018 	andeq	r0, r0, r8, lsl r0
    2930:	000023dc 	ldrdeq	r2, [r0], -ip
    2934:	0800988c 	stmdaeq	r0, {r2, r3, r7, fp, ip, pc}
    2938:	0000000c 	andeq	r0, r0, ip
    293c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2940:	41018e02 	tstmi	r1, r2, lsl #28
    2944:	0000070d 	andeq	r0, r0, sp, lsl #14
    2948:	0000001c 	andeq	r0, r0, ip, lsl r0
    294c:	000023dc 	ldrdeq	r2, [r0], -ip
    2950:	08009898 	stmdaeq	r0, {r3, r4, r7, fp, ip, pc}
    2954:	00000054 	andeq	r0, r0, r4, asr r0
    2958:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    295c:	41018e02 	tstmi	r1, r2, lsl #28
    2960:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2964:	00000007 	andeq	r0, r0, r7
    2968:	0000001c 	andeq	r0, r0, ip, lsl r0
    296c:	000023dc 	ldrdeq	r2, [r0], -ip
    2970:	080098ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, pc}
    2974:	00000024 	andeq	r0, r0, r4, lsr #32
    2978:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    297c:	41018e02 	tstmi	r1, r2, lsl #28
    2980:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2984:	00000007 	andeq	r0, r0, r7
    2988:	0000001c 	andeq	r0, r0, ip, lsl r0
    298c:	000023dc 	ldrdeq	r2, [r0], -ip
    2990:	08009910 	stmdaeq	r0, {r4, r8, fp, ip, pc}
    2994:	000000d4 	ldrdeq	r0, [r0], -r4
    2998:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    299c:	41018e02 	tstmi	r1, r2, lsl #28
    29a0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    29a4:	00000007 	andeq	r0, r0, r7
    29a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    29ac:	000023dc 	ldrdeq	r2, [r0], -ip
    29b0:	080099e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, pc}
    29b4:	00000178 	andeq	r0, r0, r8, ror r1
    29b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29bc:	41018e02 	tstmi	r1, r2, lsl #28
    29c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    29c4:	00000007 	andeq	r0, r0, r7
    29c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    29cc:	000023dc 	ldrdeq	r2, [r0], -ip
    29d0:	08009b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, pc}
    29d4:	00000048 	andeq	r0, r0, r8, asr #32
    29d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29dc:	41018e02 	tstmi	r1, r2, lsl #28
    29e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    29e4:	00000007 	andeq	r0, r0, r7
    29e8:	00000018 	andeq	r0, r0, r8, lsl r0
    29ec:	000023dc 	ldrdeq	r2, [r0], -ip
    29f0:	08009ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, pc}
    29f4:	00000028 	andeq	r0, r0, r8, lsr #32
    29f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    29fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    2a00:	00070d41 	andeq	r0, r7, r1, asr #26
    2a04:	0000000c 	andeq	r0, r0, ip
    2a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a0c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a14:	00000018 	andeq	r0, r0, r8, lsl r0
    2a18:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a1c:	08009bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, pc}
    2a20:	00000030 	andeq	r0, r0, r0, lsr r0
    2a24:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a28:	41018e02 	tstmi	r1, r2, lsl #28
    2a2c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2a30:	00000018 	andeq	r0, r0, r8, lsl r0
    2a34:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a38:	08009bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
    2a3c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a44:	41018e02 	tstmi	r1, r2, lsl #28
    2a48:	0000070d 	andeq	r0, r0, sp, lsl #14
    2a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a50:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a54:	08009c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, pc}
    2a58:	000000c8 	andeq	r0, r0, r8, asr #1
    2a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a60:	41018e02 	tstmi	r1, r2, lsl #28
    2a64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2a68:	00000007 	andeq	r0, r0, r7
    2a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a70:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a74:	08009ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, pc}
    2a78:	00000034 	andeq	r0, r0, r4, lsr r0
    2a7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a80:	41018e02 	tstmi	r1, r2, lsl #28
    2a84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2a88:	00000007 	andeq	r0, r0, r7
    2a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a90:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a94:	08009d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, pc}
    2a98:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2aa0:	41018e02 	tstmi	r1, r2, lsl #28
    2aa4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2aa8:	00000007 	andeq	r0, r0, r7
    2aac:	00000018 	andeq	r0, r0, r8, lsl r0
    2ab0:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ab4:	08009d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, pc}
    2ab8:	00000034 	andeq	r0, r0, r4, lsr r0
    2abc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2ac0:	41018e02 	tstmi	r1, r2, lsl #28
    2ac4:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ac8:	00000018 	andeq	r0, r0, r8, lsl r0
    2acc:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ad0:	08009d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, pc}
    2ad4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ad8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2adc:	41018e02 	tstmi	r1, r2, lsl #28
    2ae0:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ae8:	00002a04 	andeq	r2, r0, r4, lsl #20
    2aec:	08009d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, pc}
    2af0:	00000034 	andeq	r0, r0, r4, lsr r0
    2af4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2af8:	41018e02 	tstmi	r1, r2, lsl #28
    2afc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2b00:	00000007 	andeq	r0, r0, r7
    2b04:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b08:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b0c:	08009dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, pc}
    2b10:	0000004e 	andeq	r0, r0, lr, asr #32
    2b14:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b18:	41018e02 	tstmi	r1, r2, lsl #28
    2b1c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b20:	00000007 	andeq	r0, r0, r7
    2b24:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b28:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b2c:	08009e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, pc}
    2b30:	00000044 	andeq	r0, r0, r4, asr #32
    2b34:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b38:	41018e02 	tstmi	r1, r2, lsl #28
    2b3c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b40:	00000007 	andeq	r0, r0, r7
    2b44:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b48:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b4c:	08009e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, pc}
    2b50:	0000004e 	andeq	r0, r0, lr, asr #32
    2b54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b58:	41018e02 	tstmi	r1, r2, lsl #28
    2b5c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b60:	00000007 	andeq	r0, r0, r7
    2b64:	00000018 	andeq	r0, r0, r8, lsl r0
    2b68:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b6c:	08009ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, pc}
    2b70:	00000094 	muleq	r0, r4, r0
    2b74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b78:	41018e02 	tstmi	r1, r2, lsl #28
    2b7c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2b80:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b84:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b88:	08009f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, pc}
    2b8c:	0000004e 	andeq	r0, r0, lr, asr #32
    2b90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b94:	41018e02 	tstmi	r1, r2, lsl #28
    2b98:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b9c:	00000007 	andeq	r0, r0, r7
    2ba0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ba4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ba8:	08009f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, pc}
    2bac:	00000194 	muleq	r0, r4, r1
    2bb0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bb4:	41018e02 	tstmi	r1, r2, lsl #28
    2bb8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bbc:	00000007 	andeq	r0, r0, r7
    2bc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2bc4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2bc8:	0800a11c 	stmdaeq	r0, {r2, r3, r4, r8, sp, pc}
    2bcc:	000001d4 	ldrdeq	r0, [r0], -r4
    2bd0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bd4:	41018e02 	tstmi	r1, r2, lsl #28
    2bd8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bdc:	00000007 	andeq	r0, r0, r7
    2be0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2be4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2be8:	0800a2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp, pc}
    2bec:	000001f4 	strdeq	r0, [r0], -r4
    2bf0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bf4:	41018e02 	tstmi	r1, r2, lsl #28
    2bf8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bfc:	00000007 	andeq	r0, r0, r7
    2c00:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c04:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c08:	0800a4e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, pc}
    2c0c:	00000068 	andeq	r0, r0, r8, rrx
    2c10:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c14:	41018e02 	tstmi	r1, r2, lsl #28
    2c18:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c1c:	00000007 	andeq	r0, r0, r7
    2c20:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c24:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c28:	0800a54c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, pc}
    2c2c:	00000054 	andeq	r0, r0, r4, asr r0
    2c30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c34:	41018e02 	tstmi	r1, r2, lsl #28
    2c38:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c3c:	00000007 	andeq	r0, r0, r7
    2c40:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c44:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c48:	0800a5a0 	stmdaeq	r0, {r5, r7, r8, sl, sp, pc}
    2c4c:	00000026 	andeq	r0, r0, r6, lsr #32
    2c50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c54:	41018e02 	tstmi	r1, r2, lsl #28
    2c58:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c5c:	00000007 	andeq	r0, r0, r7
    2c60:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c64:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c68:	0800a5c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, pc}
    2c6c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2c70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c74:	41018e02 	tstmi	r1, r2, lsl #28
    2c78:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c7c:	00000007 	andeq	r0, r0, r7
    2c80:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c84:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c88:	0800a654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, pc}
    2c8c:	00000054 	andeq	r0, r0, r4, asr r0
    2c90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c94:	41018e02 	tstmi	r1, r2, lsl #28
    2c98:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c9c:	00000007 	andeq	r0, r0, r7
    2ca0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ca4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ca8:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
    2cac:	000000a4 	andeq	r0, r0, r4, lsr #1
    2cb0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cb4:	41018e02 	tstmi	r1, r2, lsl #28
    2cb8:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2cbc:	00000007 	andeq	r0, r0, r7
    2cc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2cc4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2cc8:	0800a74c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp, pc}
    2ccc:	0000015c 	andeq	r0, r0, ip, asr r1
    2cd0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cd4:	41018e02 	tstmi	r1, r2, lsl #28
    2cd8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2cdc:	00000007 	andeq	r0, r0, r7
    2ce0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ce4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ce8:	0800a8a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, pc}
    2cec:	000001dc 	ldrdeq	r0, [r0], -ip
    2cf0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cf4:	41018e02 	tstmi	r1, r2, lsl #28
    2cf8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2cfc:	00000007 	andeq	r0, r0, r7
    2d00:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d04:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d08:	0800aa84 	stmdaeq	r0, {r2, r7, r9, fp, sp, pc}
    2d0c:	000001cc 	andeq	r0, r0, ip, asr #3
    2d10:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d14:	41018e02 	tstmi	r1, r2, lsl #28
    2d18:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d1c:	00000007 	andeq	r0, r0, r7
    2d20:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d24:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d28:	0800ac50 	stmdaeq	r0, {r4, r6, sl, fp, sp, pc}
    2d2c:	0000006c 	andeq	r0, r0, ip, rrx
    2d30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d34:	41018e02 	tstmi	r1, r2, lsl #28
    2d38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d3c:	00000007 	andeq	r0, r0, r7
    2d40:	00000018 	andeq	r0, r0, r8, lsl r0
    2d44:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d48:	0800acbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
    2d4c:	00000034 	andeq	r0, r0, r4, lsr r0
    2d50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2d54:	180e4101 	stmdane	lr, {r0, r8, lr}
    2d58:	00070d41 	andeq	r0, r7, r1, asr #26
    2d5c:	0000000c 	andeq	r0, r0, ip
    2d60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2d64:	7c020001 	stcvc	0, cr0, [r2], {1}
    2d68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2d6c:	00000024 	andeq	r0, r0, r4, lsr #32
    2d70:	00002d5c 	andeq	r2, r0, ip, asr sp
    2d74:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
    2d78:	00000388 	andeq	r0, r0, r8, lsl #7
    2d7c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2d80:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2d84:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2d88:	8a048905 	bhi	1251a4 <_Min_Stack_Size+0x124da4>
    2d8c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2d90:	300e4801 	andcc	r4, lr, r1, lsl #16
    2d94:	0000000c 	andeq	r0, r0, ip
    2d98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2d9c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2da0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2da4:	0000000c 	andeq	r0, r0, ip
    2da8:	00002d94 	muleq	r0, r4, sp
    2dac:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
    2db0:	00000006 	andeq	r0, r0, r6
    2db4:	0000000c 	andeq	r0, r0, ip
    2db8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2dbc:	7c020001 	stcvc	0, cr0, [r2], {1}
    2dc0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2dc4:	00000020 	andeq	r0, r0, r0, lsr #32
    2dc8:	00002db4 			; <UNDEFINED> instruction: 0x00002db4
    2dcc:	0800b080 	stmdaeq	r0, {r7, ip, sp, pc}
    2dd0:	000000aa 	andeq	r0, r0, sl, lsr #1
    2dd4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
    2dd8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    2ddc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    2de0:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
    2de4:	0000400e 	andeq	r4, r0, lr
    2de8:	0000000c 	andeq	r0, r0, ip
    2dec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2df0:	7c020001 	stcvc	0, cr0, [r2], {1}
    2df4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2df8:	00000024 	andeq	r0, r0, r4, lsr #32
    2dfc:	00002de8 	andeq	r2, r0, r8, ror #27
    2e00:	0800b12c 	stmdaeq	r0, {r2, r3, r5, r8, ip, sp, pc}
    2e04:	00000332 	andeq	r0, r0, r2, lsr r3
    2e08:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2e0c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2e10:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2e14:	8a048905 	bhi	125230 <_Min_Stack_Size+0x124e30>
    2e18:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e1c:	500e4501 	andpl	r4, lr, r1, lsl #10
    2e20:	0000000c 	andeq	r0, r0, ip
    2e24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e28:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2e30:	00000024 	andeq	r0, r0, r4, lsr #32
    2e34:	00002e20 	andeq	r2, r0, r0, lsr #28
    2e38:	0800b460 	stmdaeq	r0, {r5, r6, sl, ip, sp, pc}
    2e3c:	00000428 	andeq	r0, r0, r8, lsr #8
    2e40:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2e44:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2e48:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2e4c:	8a048905 	bhi	125268 <_Min_Stack_Size+0x124e68>
    2e50:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e54:	400e4801 	andmi	r4, lr, r1, lsl #16
    2e58:	0000000c 	andeq	r0, r0, ip
    2e5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e60:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2e68:	00000024 	andeq	r0, r0, r4, lsr #32
    2e6c:	00002e58 	andeq	r2, r0, r8, asr lr
    2e70:	0800b888 	stmdaeq	r0, {r3, r7, fp, ip, sp, pc}
    2e74:	00000b50 	andeq	r0, r0, r0, asr fp
    2e78:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2e7c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2e80:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2e84:	8a048905 	bhi	1252a0 <_Min_Stack_Size+0x124ea0>
    2e88:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e8c:	700e4701 	andvc	r4, lr, r1, lsl #14
    2e90:	0000000c 	andeq	r0, r0, ip
    2e94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e98:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2ea0:	00000020 	andeq	r0, r0, r0, lsr #32
    2ea4:	00002e90 	muleq	r0, r0, lr
    2ea8:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
    2eac:	0000017e 	andeq	r0, r0, lr, ror r1
    2eb0:	83200e44 	teqhi	r0, #68, 28	; 0x440
    2eb4:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    2eb8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    2ebc:	89038804 	stmdbhi	r3, {r2, fp, pc}
    2ec0:	00018e02 	andeq	r8, r1, r2, lsl #28
    2ec4:	0000000c 	andeq	r0, r0, ip
    2ec8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2ecc:	7c020001 	stcvc	0, cr0, [r2], {1}
    2ed0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2ed4:	0000000c 	andeq	r0, r0, ip
    2ed8:	00002ec4 	andeq	r2, r0, r4, asr #29
    2edc:	0800c558 	stmdaeq	r0, {r3, r4, r6, r8, sl, lr, pc}
    2ee0:	0000000c 	andeq	r0, r0, ip
    2ee4:	0000000c 	andeq	r0, r0, ip
    2ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2eec:	7c020001 	stcvc	0, cr0, [r2], {1}
    2ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2ef4:	0000000c 	andeq	r0, r0, ip
    2ef8:	00002ee4 	andeq	r2, r0, r4, ror #29
    2efc:	0800c564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr, pc}
    2f00:	00000050 	andeq	r0, r0, r0, asr r0
    2f04:	0000000c 	andeq	r0, r0, ip
    2f08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f0c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f14:	0000000c 	andeq	r0, r0, ip
    2f18:	00002f04 	andeq	r2, r0, r4, lsl #30
    2f1c:	0800c5b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, lr, pc}
    2f20:	00000004 	andeq	r0, r0, r4
    2f24:	0000000c 	andeq	r0, r0, ip
    2f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f2c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f34:	0000000c 	andeq	r0, r0, ip
    2f38:	00002f24 	andeq	r2, r0, r4, lsr #30
    2f3c:	0800c5b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr, pc}
    2f40:	0000000a 	andeq	r0, r0, sl
    2f44:	0000000c 	andeq	r0, r0, ip
    2f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f4c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f54:	00000020 	andeq	r0, r0, r0, lsr #32
    2f58:	00002f44 	andeq	r2, r0, r4, asr #30
    2f5c:	0800c5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, lr, pc}
    2f60:	00000120 	andeq	r0, r0, r0, lsr #2
    2f64:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    2f68:	86068507 	strhi	r8, [r6], -r7, lsl #10
    2f6c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    2f70:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    2f74:	280e4601 	stmdacs	lr, {r0, r9, sl, lr}
    2f78:	0000000c 	andeq	r0, r0, ip
    2f7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f80:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f88:	0000001c 	andeq	r0, r0, ip, lsl r0
    2f8c:	00002f78 	andeq	r2, r0, r8, ror pc
    2f90:	0800c6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, lr, pc}
    2f94:	00000118 	andeq	r0, r0, r8, lsl r1
    2f98:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xe44
    2f9c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    2fa0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    2fa4:	00018e02 	andeq	r8, r1, r2, lsl #28
    2fa8:	0000000c 	andeq	r0, r0, ip
    2fac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2fb0:	7c020001 	stcvc	0, cr0, [r2], {1}
    2fb4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2fb8:	00000014 	andeq	r0, r0, r4, lsl r0
    2fbc:	00002fa8 	andeq	r2, r0, r8, lsr #31
    2fc0:	0800c800 	stmdaeq	r0, {fp, lr, pc}
    2fc4:	00000012 	andeq	r0, r0, r2, lsl r0
    2fc8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    2fcc:	00018502 	andeq	r8, r1, r2, lsl #10
    2fd0:	0000000c 	andeq	r0, r0, ip
    2fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
    2fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2fe0:	0000000c 	andeq	r0, r0, ip
    2fe4:	00002fd0 	ldrdeq	r2, [r0], -r0
    2fe8:	0800c814 	stmdaeq	r0, {r2, r4, fp, lr, pc}
    2fec:	0000000c 	andeq	r0, r0, ip

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
       4:	0800ad4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp, pc}
       8:	93500006 	cmpls	r0, #6
       c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      10:	0800ad4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp, pc}
      14:	0800ad54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, sp, pc}
      18:	03f30006 	mvnseq	r0, #6
      1c:	9f2500f5 	svcls	0x002500f5
      20:	0800ad54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, sp, pc}
      24:	0800ad70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, sp, pc}
      28:	93500006 	cmpls	r0, #6
      2c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      30:	0800ad70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, sp, pc}
      34:	0800ad74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, sp, pc}
      38:	03f30006 	mvnseq	r0, #6
      3c:	9f2500f5 	svcls	0x002500f5
      40:	0800ad74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, sp, pc}
      44:	0800aea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, sp, pc}
      48:	935b0006 	cmpls	fp, #6
      4c:	04935a04 	ldreq	r5, [r3], #2564	; 0xa04
      50:	0800aeba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, sp, pc}
      54:	0800aebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
      58:	93500006 	cmpls	r0, #6
      5c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      60:	0800aebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
      64:	0800aeca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp, pc}
      68:	03f30006 	mvnseq	r0, #6
      6c:	9f2500f5 	svcls	0x002500f5
      70:	0800aed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp, pc}
      74:	0800aedd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, sp, pc}
      78:	93500006 	cmpls	r0, #6
      7c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      80:	0800aedd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, sp, pc}
      84:	0800aefa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
      88:	03f30006 	mvnseq	r0, #6
      8c:	9f2500f5 	svcls	0x002500f5
      90:	0800aefa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
      94:	0800aefd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
      98:	93500006 	cmpls	r0, #6
      9c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      a0:	0800aefd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
      a4:	0800af0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, sp, pc}
      a8:	03f30006 	mvnseq	r0, #6
      ac:	9f2500f5 	svcls	0x002500f5
      b0:	0800af0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, sp, pc}
      b4:	0800af54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, sp, pc}
      b8:	93540006 	cmpls	r4, #6
      bc:	04935504 	ldreq	r5, [r3], #1284	; 0x504
      c0:	0800af54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, sp, pc}
      c4:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
      c8:	93500006 	cmpls	r0, #6
      cc:	04935104 	ldreq	r5, [r3], #260	; 0x104
      d0:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
      d4:	0800af74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, pc}
      d8:	935b0006 	cmpls	fp, #6
      dc:	04935a04 	ldreq	r5, [r3], #2564	; 0xa04
      e0:	0800af78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}
      e4:	0800afc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp, pc}
      e8:	93540006 	cmpls	r4, #6
      ec:	04935504 	ldreq	r5, [r3], #1284	; 0x504
      f0:	0800afc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp, pc}
      f4:	0800afc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, sp, pc}
      f8:	93500006 	cmpls	r0, #6
      fc:	04935104 	ldreq	r5, [r3], #260	; 0x104
     100:	0800afc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, sp, pc}
     104:	0800afde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, sp, pc}
     108:	93540006 	cmpls	r4, #6
     10c:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     110:	0800afde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, sp, pc}
     114:	0800afe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, pc}
     118:	93500006 	cmpls	r0, #6
     11c:	04935104 	ldreq	r5, [r3], #260	; 0x104
     120:	0800afe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, pc}
     124:	0800b014 	stmdaeq	r0, {r2, r4, ip, sp, pc}
     128:	93540006 	cmpls	r4, #6
     12c:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     130:	0800b014 	stmdaeq	r0, {r2, r4, ip, sp, pc}
     134:	0800b078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, pc}
     138:	93500006 	cmpls	r0, #6
     13c:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
     148:	0800ad9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, sp, pc}
     14c:	0800ae68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, sp, pc}
     150:	93540006 	cmpls	r4, #6
     154:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     158:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
     15c:	0800af78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}
     160:	93540006 	cmpls	r4, #6
     164:	04935504 	ldreq	r5, [r3], #1284	; 0x504
	...
     170:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}
     174:	0800aeba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, sp, pc}
     178:	93580006 	cmpls	r8, #6
     17c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     180:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
     184:	0800af78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}
     188:	93580006 	cmpls	r8, #6
     18c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
	...
     198:	0800ae5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, sp, pc}
     19c:	0800ae6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, fp, sp, pc}
     1a0:	93520006 	cmpls	r2, #6
     1a4:	04935304 	ldreq	r5, [r3], #772	; 0x304
     1a8:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
     1ac:	0800af5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, pc}
     1b0:	93520006 	cmpls	r2, #6
     1b4:	04935304 	ldreq	r5, [r3], #772	; 0x304
	...
     1c0:	0800ad8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, sp, pc}
     1c4:	0800ae00 	stmdaeq	r0, {r9, sl, fp, sp, pc}
     1c8:	93580006 	cmpls	r8, #6
     1cc:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     1d0:	0800aeaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, sp, pc}
     1d4:	0800aeb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp, pc}
     1d8:	93500006 	cmpls	r0, #6
     1dc:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
     1e8:	0800ad0a 	stmdaeq	r0, {r1, r3, r8, sl, fp, sp, pc}
     1ec:	0800ad74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, sp, pc}
     1f0:	74580001 	ldrbvc	r0, [r8], #-1
     1f4:	ba0800ad 	blt	2004b0 <_Min_Stack_Size+0x2000b0>
     1f8:	090800ae 	stmdbeq	r8, {r1, r2, r3, r5, r7}
     1fc:	0c007700 	stceq	7, cr7, [r0], {-0}
     200:	7fffffff 	svcvc	0x00ffffff
     204:	aeba9f1a 	mrcge	15, 5, r9, cr10, cr10, {0}
     208:	aeca0800 	cdpge	8, 12, cr0, cr10, cr0, {0}
     20c:	00010800 	andeq	r0, r1, r0, lsl #16
     210:	00aeca58 	adceq	ip, lr, r8, asr sl
     214:	00aed408 	adceq	sp, lr, r8, lsl #8
     218:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     21c:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     220:	9f1a7fff 	svcls	0x001a7fff
     224:	0800aed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp, pc}
     228:	0800af32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, sp, pc}
     22c:	32580001 	subscc	r0, r8, #1
     230:	780800af 	stmdavc	r8, {r0, r1, r2, r3, r5, r7}
     234:	090800af 	stmdbeq	r8, {r0, r1, r2, r3, r5, r7}
     238:	0c007700 	stceq	7, cr7, [r0], {-0}
     23c:	7fffffff 	svcvc	0x00ffffff
     240:	af789f1a 	svcge	0x00789f1a
     244:	af940800 	svcge	0x00940800
     248:	00010800 	andeq	r0, r1, r0, lsl #16
     24c:	00af9458 	adceq	r9, pc, r8, asr r4	; <UNPREDICTABLE>
     250:	00afc608 	adceq	ip, pc, r8, lsl #12
     254:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     258:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     25c:	9f1a7fff 	svcls	0x001a7fff
     260:	0800afc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, sp, pc}
     264:	0800aff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
     268:	f0580001 			; <UNDEFINED> instruction: 0xf0580001
     26c:	780800af 	stmdavc	r8, {r0, r1, r2, r3, r5, r7}
     270:	090800b0 	stmdbeq	r8, {r4, r5, r7}
     274:	0c007700 	stceq	7, cr7, [r0], {-0}
     278:	7fffffff 	svcvc	0x00ffffff
     27c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     280:	00000000 	andeq	r0, r0, r0
     284:	ad740000 	ldclge	0, cr0, [r4, #-0]
     288:	ad830800 	stcge	8, cr0, [r3]
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00ae565c 	adceq	r5, lr, ip, asr r6
     294:	00ae6b08 	adceq	r6, lr, r8, lsl #22
     298:	5c000108 	stfpls	f0, [r0], {8}
     29c:	0800af1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, sp, pc}
     2a0:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
     2a4:	9f300002 	svcls	0x00300002
     2a8:	0800af56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, sp, pc}
     2ac:	0800af5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, pc}
     2b0:	845c0001 	ldrbhi	r0, [ip], #-1
     2b4:	c60800af 	strgt	r0, [r8], -pc, lsr #1
     2b8:	020800af 	andeq	r0, r8, #175	; 0xaf
     2bc:	c69f3200 	ldrgt	r3, [pc], r0, lsl #4
     2c0:	e00800af 	and	r0, r8, pc, lsr #1
     2c4:	020800af 	andeq	r0, r8, #175	; 0xaf
     2c8:	e09f3300 	adds	r3, pc, r0, lsl #6
     2cc:	780800af 	stmdavc	r8, {r0, r1, r2, r3, r5, r7}
     2d0:	020800b0 	andeq	r0, r8, #176	; 0xb0
     2d4:	009f3100 	addseq	r3, pc, r0, lsl #2
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	0a000000 	beq	2e4 <_Min_Heap_Size+0x2e4>
     2e0:	780800ad 	stmdavc	r8, {r0, r2, r3, r5, r7}
     2e4:	060800b0 			; <UNDEFINED> instruction: 0x060800b0
     2e8:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     2ec:	00049357 	andeq	r9, r4, r7, asr r3
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	7c000000 	stcvc	0, cr0, [r0], {-0}
     2f8:	7c0800b0 	stcvc	0, cr0, [r8], {176}	; 0xb0
     2fc:	060800b0 			; <UNDEFINED> instruction: 0x060800b0
     300:	04935000 	ldreq	r5, [r3], #0
     304:	00049351 	andeq	r9, r4, r1, asr r3
     308:	00000000 	andeq	r0, r0, r0
     30c:	80000000 	andhi	r0, r0, r0
     310:	950800b0 	strls	r0, [r8, #-176]	; 0xb0
     314:	060800b0 			; <UNDEFINED> instruction: 0x060800b0
     318:	04935000 	ldreq	r5, [r3], #0
     31c:	95049351 	strls	r9, [r4, #-849]	; 0x351
     320:	2a0800b0 	bcs	2005e8 <_Min_Stack_Size+0x2001e8>
     324:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     328:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     32c:	009f2500 	addseq	r2, pc, r0, lsl #10
     330:	00000000 	andeq	r0, r0, r0
     334:	2c000000 	stccs	0, cr0, [r0], {-0}
     338:	450800b1 	strmi	r0, [r8, #-177]	; 0xb1
     33c:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     340:	04935000 	ldreq	r5, [r3], #0
     344:	45049351 	strmi	r9, [r4, #-849]	; 0x351
     348:	5e0800b1 	mcrpl	0, 0, r0, cr8, cr1, {5}
     34c:	060800b4 			; <UNDEFINED> instruction: 0x060800b4
     350:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     354:	009f2500 	addseq	r2, pc, r0, lsl #10
     358:	00000000 	andeq	r0, r0, r0
     35c:	2c000000 	stccs	0, cr0, [r0], {-0}
     360:	450800b1 	strmi	r0, [r8, #-177]	; 0xb1
     364:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     368:	04935200 	ldreq	r5, [r3], #512	; 0x200
     36c:	45049353 	strmi	r9, [r4, #-851]	; 0x353
     370:	b60800b1 			; <UNDEFINED> instruction: 0xb60800b1
     374:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     378:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     37c:	c09f2502 	addsgt	r2, pc, r2, lsl #10
     380:	2c0800b1 	stccs	0, cr0, [r8], {177}	; 0xb1
     384:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     388:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     38c:	369f2502 	ldrcc	r2, [pc], r2, lsl #10
     390:	a00800b2 	strhge	r0, [r8], -r2
     394:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     398:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     39c:	b49f2502 	ldrlt	r2, [pc], #1282	; 3a4 <_Min_Heap_Size+0x3a4>
     3a0:	a80800b2 	stmdage	r8, {r1, r4, r5, r7}
     3a4:	060800b3 			; <UNDEFINED> instruction: 0x060800b3
     3a8:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     3ac:	a89f2502 	ldmge	pc, {r1, r8, sl, sp}	; <UNPREDICTABLE>
     3b0:	b00800b3 	strhlt	r0, [r8], -r3
     3b4:	100800b3 	strhne	r0, [r8], -r3
     3b8:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     3bc:	000825f4 	strdeq	r2, [r8], -r4
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	1e3fe000 	cdpne	0, 3, cr14, cr15, cr0, {0}
     3c8:	00b3c49f 	umlalseq	ip, r3, pc, r4	; <UNPREDICTABLE>
     3cc:	00b3ee08 	adcseq	lr, r3, r8, lsl #28
     3d0:	f3000608 	vmax.u8	d0, d0, d8
     3d4:	2502f503 	strcs	pc, [r2, #-1283]	; 0x503
     3d8:	00b3ee9f 	umlalseq	lr, r3, pc, lr	; <UNPREDICTABLE>
     3dc:	00b40808 	adcseq	r0, r4, r8, lsl #16
     3e0:	f5001008 			; <UNDEFINED> instruction: 0xf5001008
     3e4:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     3e8:	00000008 	andeq	r0, r0, r8
     3ec:	e0000000 	and	r0, r0, r0
     3f0:	289f1e3f 	ldmcs	pc, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip}	; <UNPREDICTABLE>
     3f4:	3a0800b4 	bcc	2006cc <_Min_Stack_Size+0x2002cc>
     3f8:	100800b4 	strhne	r0, [r8], -r4
     3fc:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     400:	000825f4 	strdeq	r2, [r8], -r4
     404:	00000000 	andeq	r0, r0, r0
     408:	1e3fe000 	cdpne	0, 3, cr14, cr15, cr0, {0}
     40c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     410:	00000000 	andeq	r0, r0, r0
     414:	00b15000 	adcseq	r5, r1, r0
     418:	00b19c08 	adcseq	r9, r1, r8, lsl #24
     41c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     420:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     424:	00b1c004 	adcseq	ip, r1, r4
     428:	00b21c08 	adcseq	r1, r2, r8, lsl #24
     42c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     430:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     434:	00b23604 	adcseq	r3, r2, r4, lsl #12
     438:	00b2a008 	adcseq	sl, r2, r8
     43c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     440:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     444:	00b2b404 	adcseq	fp, r2, r4, lsl #8
     448:	00b30608 	adcseq	r0, r3, r8, lsl #12
     44c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     450:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     454:	00b31a04 	adcseq	r1, r3, r4, lsl #20
     458:	00b34408 	adcseq	r4, r3, r8, lsl #8
     45c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     460:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     464:	00b37004 	adcseq	r7, r3, r4
     468:	00b39808 	adcseq	r9, r3, r8, lsl #16
     46c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     470:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     474:	00b3da04 	adcseq	sp, r3, r4, lsl #20
     478:	00b3de08 	adcseq	sp, r3, r8, lsl #28
     47c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     480:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     484:	00000004 	andeq	r0, r0, r4
     488:	00000000 	andeq	r0, r0, r0
     48c:	00b46000 	adcseq	r6, r4, r0
     490:	00b49308 	adcseq	r9, r4, r8, lsl #6
     494:	50000608 	andpl	r0, r0, r8, lsl #12
     498:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     49c:	00b49304 	adcseq	r9, r4, r4, lsl #6
     4a0:	00b4aa08 	adcseq	sl, r4, r8, lsl #20
     4a4:	f3000608 	vmax.u8	d0, d0, d8
     4a8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4ac:	00b4aa9f 	umlalseq	sl, r4, pc, sl	; <UNPREDICTABLE>
     4b0:	00b4c708 	adcseq	ip, r4, r8, lsl #14
     4b4:	50000608 	andpl	r0, r0, r8, lsl #12
     4b8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4bc:	00b4c704 	adcseq	ip, r4, r4, lsl #14
     4c0:	00b6aa08 	adcseq	sl, r6, r8, lsl #20
     4c4:	f3000608 	vmax.u8	d0, d0, d8
     4c8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4cc:	00b6aa9f 	umlalseq	sl, r6, pc, sl	; <UNPREDICTABLE>
     4d0:	00b6b308 	adcseq	fp, r6, r8, lsl #6
     4d4:	50000608 	andpl	r0, r0, r8, lsl #12
     4d8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4dc:	00b6b304 	adcseq	fp, r6, r4, lsl #6
     4e0:	00b72608 	adcseq	r2, r7, r8, lsl #12
     4e4:	f3000608 	vmax.u8	d0, d0, d8
     4e8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4ec:	00b7269f 	umlalseq	r2, r7, pc, r6	; <UNPREDICTABLE>
     4f0:	00b72d08 	adcseq	r2, r7, r8, lsl #26
     4f4:	50000608 	andpl	r0, r0, r8, lsl #12
     4f8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4fc:	00b72d04 	adcseq	r2, r7, r4, lsl #26
     500:	00b88808 	adcseq	r8, r8, r8, lsl #16
     504:	f3000608 	vmax.u8	d0, d0, d8
     508:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     50c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     510:	00000000 	andeq	r0, r0, r0
     514:	00b50600 	adcseq	r0, r5, r0, lsl #12
     518:	00b62208 	adcseq	r2, r6, r8, lsl #4
     51c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     520:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     524:	00b69804 	adcseq	r9, r6, r4, lsl #16
     528:	00b6a008 	adcseq	sl, r6, r8
     52c:	5a000608 	bpl	1d54 <_Min_Stack_Size+0x1954>
     530:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
     534:	00b6e004 	adcseq	lr, r6, r4
     538:	00b72408 	adcseq	r2, r7, r8, lsl #8
     53c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     540:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     544:	00b72404 	adcseq	r2, r7, r4, lsl #8
     548:	00b72608 	adcseq	r2, r7, r8, lsl #12
     54c:	50000608 	andpl	r0, r0, r8, lsl #12
     550:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     554:	00b73804 	adcseq	r3, r7, r4, lsl #16
     558:	00b81808 	adcseq	r1, r8, r8, lsl #16
     55c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     560:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     564:	00000004 	andeq	r0, r0, r4
     568:	00000000 	andeq	r0, r0, r0
     56c:	00b4e600 	adcseq	lr, r4, r0, lsl #12
     570:	00b4ef08 	adcseq	lr, r4, r8, lsl #30
     574:	f4001008 	vst4.8	{d1-d4}, [r0], r8
     578:	00000825 	andeq	r0, r0, r5, lsr #16
     57c:	00000000 	andeq	r0, r0, r0
     580:	02f53ff0 	rscseq	r3, r5, #240, 30	; 0x3c0
     584:	d69f1c25 	ldrle	r1, [pc], r5, lsr #24
     588:	e10800b5 	strh	r0, [r8, -r5]
     58c:	060800b5 			; <UNDEFINED> instruction: 0x060800b5
     590:	04935000 	ldreq	r5, [r3], #0
     594:	e1049351 	tst	r4, r1, asr r3
     598:	960800b5 			; <UNDEFINED> instruction: 0x960800b5
     59c:	060800b6 			; <UNDEFINED> instruction: 0x060800b6
     5a0:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
     5a4:	e004935b 	and	r9, r4, fp, asr r3
     5a8:	260800b6 			; <UNDEFINED> instruction: 0x260800b6
     5ac:	0c0800b7 	stceq	0, cr0, [r8], {183}	; 0xb7
     5b0:	f6489100 			; <UNDEFINED> instruction: 0xf6489100
     5b4:	50912508 	addspl	r2, r1, r8, lsl #10
     5b8:	1b2508f6 	blne	942998 <_Min_Stack_Size+0x942598>
     5bc:	00b7389f 	umlalseq	r3, r7, pc, r8	; <UNPREDICTABLE>
     5c0:	00b81808 	adcseq	r1, r8, r8, lsl #16
     5c4:	f500ac08 			; <UNDEFINED> instruction: 0xf500ac08
     5c8:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     5cc:	fdf70908 	ldc2l	9, cr0, [r7, #32]!
     5d0:	023de10d 	eorseq	lr, sp, #1073741827	; 0x40000003
     5d4:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     5d8:	01b28808 			; <UNDEFINED> instruction: 0x01b28808
     5dc:	49efe075 	stmibmi	pc!, {r0, r2, r4, r5, r6, sp, lr, pc}^	; <UNPREDICTABLE>
     5e0:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     5e4:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     5e8:	688f3b08 	stmvs	pc, {r3, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
     5ec:	a48228b5 	strge	r2, [r2], #2229	; 0x8b5
     5f0:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     5f4:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     5f8:	88445508 	stmdahi	r4, {r3, r8, sl, ip, lr}^
     5fc:	c9c1550e 	stmibgt	r1, {r1, r2, r3, r8, sl, ip, lr}^
     600:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     604:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     608:	eb6f7d08 	bl	1bdfa30 <_Min_Stack_Size+0x1bdf630>
     60c:	d4d61203 	ldrble	r1, [r6], #515	; 0x203
     610:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     614:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     618:	55555508 	ldrbpl	r5, [r5, #-1288]	; 0x508
     61c:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
     620:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     624:	04f51e25 	ldrbteq	r1, [r5], #3621	; 0xe25
     628:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     62c:	b12e9282 	smlawblt	lr, r2, r2, r9
     630:	3fb3b8c5 	svccc	0x00b3b8c5
     634:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     638:	1b8d0159 	blne	fe340ba4 <_estack+0xde310ba4>
     63c:	3fe6066c 	svccc	0x00e6066c
     640:	2504f51c 	strcs	pc, [r4, #-1308]	; 0x51c
     644:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     648:	9c598ac8 	mrrcls	10, 12, r8, r9, cr8
     64c:	40002ae5 	andmi	r2, r0, r5, ror #21
     650:	2504f522 	strcs	pc, [r4, #-1314]	; 0x522
     654:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     658:	1c8a2d4b 	stcne	13, cr2, [sl], {75}	; 0x4b
     65c:	40033a27 	andmi	r3, r3, r7, lsr #20
     660:	2504f51c 	strcs	pc, [r4, #-1308]	; 0x51c
     664:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     668:	00000000 	andeq	r0, r0, r0
     66c:	3ff00000 	svccc	0x00f00000	; IMB
     670:	009f1b22 	addseq	r1, pc, r2, lsr #22
     674:	00000000 	andeq	r0, r0, r0
     678:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     67c:	700800b5 	strhvc	r0, [r8], -r5
     680:	060800b5 			; <UNDEFINED> instruction: 0x060800b5
     684:	04935000 	ldreq	r5, [r3], #0
     688:	70049351 	andvc	r9, r4, r1, asr r3
     68c:	080800b5 	stmdaeq	r8, {r0, r2, r4, r5, r7}
     690:	020800b6 	andeq	r0, r8, #182	; 0xb6
     694:	08489100 	stmdaeq	r8, {r8, ip, pc}^
     698:	220800b6 	andcs	r0, r8, #182	; 0xb6
     69c:	3c0800b6 	stccc	0, cr0, [r8], {182}	; 0xb6
     6a0:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     6a4:	070825f4 			; <UNDEFINED> instruction: 0x070825f4
     6a8:	2633145c 			; <UNDEFINED> instruction: 0x2633145c
     6ac:	f53c91a6 			; <UNDEFINED> instruction: 0xf53c91a6
     6b0:	0af52504 	beq	ffd49ac8 <_estack+0xdfd19ac8>
     6b4:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
     6b8:	007d1c1e 	rsbseq	r1, sp, lr, lsl ip
     6bc:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
     6c0:	1b22250a 	blne	889af0 <_Min_Stack_Size+0x8896f0>
     6c4:	f52504f5 			; <UNDEFINED> instruction: 0xf52504f5
     6c8:	0af5250a 	beq	ffd49af8 <_estack+0xdfd19af8>
     6cc:	7d1c1e25 	ldcvc	14, cr1, [ip, #-148]	; 0xffffff6c
     6d0:	2508f600 	strcs	pc, [r8, #-1536]	; 0x600
     6d4:	22250af5 	eorcs	r0, r5, #1003520	; 0xf5000
     6d8:	1c1c221b 	lfmne	f2, 4, [ip], {27}
     6dc:	00b6e09f 	umlalseq	lr, r6, pc, r0	; <UNPREDICTABLE>
     6e0:	00b72608 	adcseq	r2, r7, r8, lsl #12
     6e4:	91000208 	tstls	r0, r8, lsl #4
     6e8:	00b73848 	adcseq	r3, r7, r8, asr #16
     6ec:	00b81808 	adcseq	r1, r8, r8, lsl #16
     6f0:	f5006008 			; <UNDEFINED> instruction: 0xf5006008
     6f4:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     6f8:	fdf70908 	ldc2l	9, cr0, [r7, #32]!
     6fc:	023de10d 	eorseq	lr, sp, #1073741827	; 0x40000003
     700:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     704:	01b28808 			; <UNDEFINED> instruction: 0x01b28808
     708:	49efe075 	stmibmi	pc!, {r0, r2, r4, r5, r6, sp, lr, pc}^	; <UNPREDICTABLE>
     70c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     710:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     714:	688f3b08 	stmvs	pc, {r3, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
     718:	a48228b5 	strge	r2, [r2], #2229	; 0x8b5
     71c:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     720:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     724:	88445508 	stmdahi	r4, {r3, r8, sl, ip, lr}^
     728:	c9c1550e 	stmibgt	r1, {r1, r2, r3, r8, sl, ip, lr}^
     72c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     730:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     734:	eb6f7d08 	bl	1bdfb5c <_Min_Stack_Size+0x1bdf75c>
     738:	d4d61203 	ldrble	r1, [r6], #515	; 0x203
     73c:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     740:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     744:	55555508 	ldrbpl	r5, [r5, #-1288]	; 0x508
     748:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
     74c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     750:	009f1e25 	addseq	r1, pc, r5, lsr #28
     754:	00000000 	andeq	r0, r0, r0
     758:	bc000000 	stclt	0, cr0, [r0], {-0}
     75c:	be0800b5 	mcrlt	0, 0, r0, cr8, cr5, {5}
     760:	060800b5 			; <UNDEFINED> instruction: 0x060800b5
     764:	04935000 	ldreq	r5, [r3], #0
     768:	be049351 	mcrlt	3, 0, r9, cr4, cr1, {2}
     76c:	080800b5 	stmdaeq	r8, {r0, r2, r4, r5, r7}
     770:	020800b6 	andeq	r0, r8, #182	; 0xb6
     774:	08509100 	ldmdaeq	r0, {r8, ip, pc}^
     778:	960800b6 			; <UNDEFINED> instruction: 0x960800b6
     77c:	140800b6 	strne	r0, [r8], #-182	; 0xb6
     780:	0825f400 	stmdaeq	r5!, {sl, ip, sp, lr, pc}
     784:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
     788:	3fe921fb 	svccc	0x00e921fb
     78c:	f5250af5 			; <UNDEFINED> instruction: 0xf5250af5
     790:	1c22250a 	cfstr32ne	mvfx2, [r2], #-40	; 0xffffffd8
     794:	00b6e09f 	umlalseq	lr, r6, pc, r0	; <UNPREDICTABLE>
     798:	00b72608 	adcseq	r2, r7, r8, lsl #12
     79c:	91000208 	tstls	r0, r8, lsl #4
     7a0:	00b73850 	adcseq	r3, r7, r0, asr r8
     7a4:	00b81808 	adcseq	r1, r8, r8, lsl #16
     7a8:	f5004c08 			; <UNDEFINED> instruction: 0xf5004c08
     7ac:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     7b0:	2e928208 	cdpcs	2, 9, cr8, cr2, cr8, {0}
     7b4:	b3b8c5b1 			; <UNDEFINED> instruction: 0xb3b8c5b1
     7b8:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     7bc:	8d015908 	stchi	9, cr5, [r1, #-32]	; 0xffffffe0
     7c0:	e6066c1b 			; <UNDEFINED> instruction: 0xe6066c1b
     7c4:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     7c8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7cc:	598ac808 	stmibpl	sl, {r3, fp, lr, pc}
     7d0:	002ae59c 	mlaeq	sl, ip, r5, lr
     7d4:	04f52240 	ldrbteq	r2, [r5], #576	; 0x240
     7d8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7dc:	8a2d4b08 	bhi	b53404 <_Min_Stack_Size+0xb53004>
     7e0:	033a271c 	teqeq	sl, #28, 14	; 0x700000
     7e4:	04f51c40 	ldrbteq	r1, [r5], #3136	; 0xc40
     7e8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7ec:	00000008 	andeq	r0, r0, r8
     7f0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     7f4:	009f223f 	addseq	r2, pc, pc, lsr r2	; <UNPREDICTABLE>
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	02000000 	andeq	r0, r0, #0
     800:	220800b6 	andcs	r0, r8, #182	; 0xb6
     804:	160800b6 			; <UNDEFINED> instruction: 0x160800b6
     808:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     80c:	f5250af5 			; <UNDEFINED> instruction: 0xf5250af5
     810:	1c1e250a 	cfldr32ne	mvfx2, [lr], {10}
     814:	08f6007d 	ldmeq	r6!, {r0, r2, r3, r4, r5, r6}^
     818:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
     81c:	009f1b22 	addseq	r1, pc, r2, lsr #22
     820:	00000000 	andeq	r0, r0, r0
     824:	02000000 	andeq	r0, r0, #0
     828:	980800b6 	stmdals	r8, {r1, r2, r4, r5, r7}
     82c:	0c0800b6 	stceq	0, cr0, [r8], {182}	; 0xb6
     830:	f6489100 			; <UNDEFINED> instruction: 0xf6489100
     834:	50912508 	addspl	r2, r1, r8, lsl #10
     838:	1b2508f6 	blne	942c18 <_Min_Stack_Size+0x942818>
     83c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     840:	00000000 	andeq	r0, r0, r0
     844:	00b5d200 	adcseq	sp, r5, r0, lsl #4
     848:	00b5e108 	adcseq	lr, r5, r8, lsl #2
     84c:	50000608 	andpl	r0, r0, r8, lsl #12
     850:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     854:	00b5e104 	adcseq	lr, r5, r4, lsl #2
     858:	00b60208 	adcseq	r0, r6, r8, lsl #4
     85c:	5a000608 	bpl	2084 <_Min_Stack_Size+0x1c84>
     860:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
     864:	00b60204 	adcseq	r0, r6, r4, lsl #4
     868:	00b6a608 	adcseq	sl, r6, r8, lsl #12
     86c:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
     870:	00b6a600 	adcseq	sl, r6, r0, lsl #12
     874:	00b6aa08 	adcseq	sl, r6, r8, lsl #20
     878:	91000208 	tstls	r0, r8, lsl #4
     87c:	00b6e040 	adcseq	lr, r6, r0, asr #32
     880:	00b6e808 	adcseq	lr, r6, r8, lsl #16
     884:	50000608 	andpl	r0, r0, r8, lsl #12
     888:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     88c:	00b6e804 	adcseq	lr, r6, r4, lsl #16
     890:	00b72608 	adcseq	r2, r7, r8, lsl #12
     894:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
	...
     8a0:	00b47a00 	adcseq	r7, r4, r0, lsl #20
     8a4:	00b79e08 	adcseq	r9, r7, r8, lsl #28
     8a8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
     8b4:	0800b47a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, sp, pc}
     8b8:	0800b480 	stmdaeq	r0, {r7, sl, ip, sp, pc}
     8bc:	80580001 	subshi	r0, r8, r1
     8c0:	840800b4 	strhi	r0, [r8], #-180	; 0xb4
     8c4:	070800b4 			; <UNDEFINED> instruction: 0x070800b4
     8c8:	80807800 	addhi	r7, r0, r0, lsl #16
     8cc:	9f048080 	svcls	0x00048080
     8d0:	0800b484 	stmdaeq	r0, {r2, r7, sl, ip, sp, pc}
     8d4:	0800b488 	stmdaeq	r0, {r3, r7, sl, ip, sp, pc}
     8d8:	80780007 	rsbshi	r0, r8, r7
     8dc:	03ffc080 	mvnseq	ip, #128	; 0x80
     8e0:	00b4889f 	umlalseq	r8, r4, pc, r8	; <UNPREDICTABLE>
     8e4:	00b49308 	adcseq	r9, r4, r8, lsl #6
     8e8:	71000908 	tstvc	r0, r8, lsl #18
     8ec:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     8f0:	9f1a7fff 	svcls	0x001a7fff
     8f4:	0800b493 	stmdaeq	r0, {r0, r1, r4, r7, sl, ip, sp, pc}
     8f8:	0800b4aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip, sp, pc}
     8fc:	00770009 	rsbseq	r0, r7, r9
     900:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
     904:	aa9f1a7f 	bge	fe7c7308 <_estack+0xde797308>
     908:	e80800b4 	stmda	r8, {r2, r4, r5, r7}
     90c:	010800b5 	strheq	r0, [r8, -r5]
     910:	b5e85800 	strblt	r5, [r8, #2048]!	; 0x800
     914:	b6aa0800 	strtlt	r0, [sl], r0, lsl #16
     918:	00090800 	andeq	r0, r9, r0, lsl #16
     91c:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
     920:	1a7fffff 	bne	2000924 <_Min_Stack_Size+0x2000524>
     924:	00b6aa9f 	umlalseq	sl, r6, pc, sl	; <UNPREDICTABLE>
     928:	00b6b308 	adcseq	fp, r6, r8, lsl #6
     92c:	71000908 	tstvc	r0, r8, lsl #18
     930:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     934:	9f1a7fff 	svcls	0x001a7fff
     938:	0800b6b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, sl, ip, sp, pc}
     93c:	0800b6e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, sp, pc}
     940:	00770009 	rsbseq	r0, r7, r9
     944:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
     948:	e09f1a7f 	adds	r1, pc, pc, ror sl	; <UNPREDICTABLE>
     94c:	180800b6 	stmdane	r8, {r1, r2, r4, r5, r7}
     950:	010800b8 	strheq	r0, [r8, -r8]
     954:	00005800 	andeq	r5, r0, r0, lsl #16
     958:	00000000 	andeq	r0, r0, r0
     95c:	b47a0000 	ldrbtlt	r0, [sl], #-0
     960:	b79e0800 	ldrlt	r0, [lr, r0, lsl #16]
     964:	00060800 	andeq	r0, r6, r0, lsl #16
     968:	57049356 	smlsdpl	r4, r6, r3, r9
     96c:	00000493 	muleq	r0, r3, r4
     970:	00000000 	andeq	r0, r0, r0
     974:	b5dc0000 	ldrblt	r0, [ip]
     978:	b65e0800 	ldrblt	r0, [lr], -r0, lsl #16
     97c:	00060800 	andeq	r0, r6, r0, lsl #16
     980:	5b04935a 	blpl	1256f0 <_Min_Stack_Size+0x1252f0>
     984:	00000493 	muleq	r0, r3, r4
     988:	00000000 	andeq	r0, r0, r0
     98c:	b8880000 	stmlt	r8, {}	; <UNPREDICTABLE>
     990:	b8980800 	ldmlt	r8, {fp}
     994:	00060800 	andeq	r0, r6, r0, lsl #16
     998:	51049350 	tstpl	r4, r0, asr r3
     99c:	b8980493 	ldmlt	r8, {r0, r1, r4, r7, sl}
     9a0:	c3d80800 	bicsgt	r0, r8, #0, 16
     9a4:	00060800 	andeq	r0, r6, r0, lsl #16
     9a8:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
     9ac:	00009f25 	andeq	r9, r0, r5, lsr #30
     9b0:	00000000 	andeq	r0, r0, r0
     9b4:	b8880000 	stmlt	r8, {}	; <UNPREDICTABLE>
     9b8:	b8ac0800 	stmialt	ip!, {fp}
     9bc:	00060800 	andeq	r0, r6, r0, lsl #16
     9c0:	53049352 	movwpl	r9, #17234	; 0x4352
     9c4:	b8ac0493 	stmialt	ip!, {r0, r1, r4, r7, sl}
     9c8:	b9bc0800 	ldmiblt	ip!, {fp}
     9cc:	00060800 	andeq	r0, r6, r0, lsl #16
     9d0:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
     9d4:	b9bc9f25 	ldmiblt	ip!, {r0, r2, r5, r8, r9, sl, fp, ip, pc}
     9d8:	b9d00800 	ldmiblt	r0, {fp}^
     9dc:	00060800 	andeq	r0, r6, r0, lsl #16
     9e0:	53049352 	movwpl	r9, #17234	; 0x4352
     9e4:	b9d00493 	ldmiblt	r0, {r0, r1, r4, r7, sl}^
     9e8:	c3d80800 	bicsgt	r0, r8, #0, 16
     9ec:	00060800 	andeq	r0, r6, r0, lsl #16
     9f0:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
     9f4:	00009f25 	andeq	r9, r0, r5, lsr #30
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	ba5c0000 	blt	1700a04 <_Min_Stack_Size+0x1700604>
     a00:	ba7c0800 	blt	1f02a08 <_Min_Stack_Size+0x1f02608>
     a04:	00060800 	andeq	r0, r6, r0, lsl #16
     a08:	51049350 	tstpl	r4, r0, asr r3
     a0c:	beba0493 	mrclt	4, 5, r0, cr10, cr3, {4}
     a10:	bf200800 	svclt	0x00200800
     a14:	00060800 	andeq	r0, r6, r0, lsl #16
     a18:	5b04935a 	blpl	125788 <_Min_Stack_Size+0x125388>
     a1c:	bfce0493 	svclt	0x00ce0493
     a20:	c0c40800 	sbcgt	r0, r4, r0, lsl #16
     a24:	00060800 	andeq	r0, r6, r0, lsl #16
     a28:	57049356 	smlsdpl	r4, r6, r3, r9
     a2c:	c0c40493 	smullgt	r0, r4, r3, r4
     a30:	c0d30800 	sbcsgt	r0, r3, r0, lsl #16
     a34:	00060800 	andeq	r0, r6, r0, lsl #16
     a38:	53049352 	movwpl	r9, #17234	; 0x4352
     a3c:	c19c0493 			; <UNDEFINED> instruction: 0xc19c0493
     a40:	c1f40800 	mvnsgt	r0, r0, lsl #16
     a44:	00060800 	andeq	r0, r6, r0, lsl #16
     a48:	5b04935a 	blpl	1257b8 <_Min_Stack_Size+0x1253b8>
     a4c:	c3000493 	movwgt	r0, #1171	; 0x493
     a50:	c3040800 	movwgt	r0, #18432	; 0x4800
     a54:	00060800 	andeq	r0, r6, r0, lsl #16
     a58:	51049350 	tstpl	r4, r0, asr r3
     a5c:	c3040493 	movwgt	r0, #17555	; 0x4493
     a60:	c30c0800 	movwgt	r0, #51200	; 0xc800
     a64:	00060800 	andeq	r0, r6, r0, lsl #16
     a68:	53049350 	movwpl	r9, #17232	; 0x4350
     a6c:	c30c0493 	movwgt	r0, #50323	; 0xc493
     a70:	c30f0800 	movwgt	r0, #63488	; 0xf800
     a74:	00060800 	andeq	r0, r6, r0, lsl #16
     a78:	53049352 	movwpl	r9, #17234	; 0x4352
     a7c:	c3100493 	tstgt	r0, #-1828716544	; 0x93000000
     a80:	c3140800 	tstgt	r4, #0, 16
     a84:	00060800 	andeq	r0, r6, r0, lsl #16
     a88:	51049350 	tstpl	r4, r0, asr r3
     a8c:	c3140493 	tstgt	r4, #-1828716544	; 0x93000000
     a90:	c3300800 	teqgt	r0, #0, 16
     a94:	00060800 	andeq	r0, r6, r0, lsl #16
     a98:	5b04935a 	blpl	125808 <_Min_Stack_Size+0x125408>
     a9c:	c3340493 	teqgt	r4, #-1828716544	; 0x93000000
     aa0:	c3460800 	movtgt	r0, #26624	; 0x6800
     aa4:	00060800 	andeq	r0, r6, r0, lsl #16
     aa8:	5b04935a 	blpl	125818 <_Min_Stack_Size+0x125418>
     aac:	c3800493 	orrgt	r0, r0, #-1828716544	; 0x93000000
     ab0:	c3820800 	orrgt	r0, r2, #0, 16
     ab4:	00060800 	andeq	r0, r6, r0, lsl #16
     ab8:	53049352 	movwpl	r9, #17234	; 0x4352
     abc:	c38a0493 	orrgt	r0, sl, #-1828716544	; 0x93000000
     ac0:	c38c0800 	orrgt	r0, ip, #0, 16
     ac4:	00060800 	andeq	r0, r6, r0, lsl #16
     ac8:	53049352 	movwpl	r9, #17234	; 0x4352
     acc:	00000493 	muleq	r0, r3, r4
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	b94e0000 	stmdblt	lr, {}^	; <UNPREDICTABLE>
     ad8:	b9980800 	ldmiblt	r8, {fp}
     adc:	00060800 	andeq	r0, r6, r0, lsl #16
     ae0:	51049350 	tstpl	r4, r0, asr r3
     ae4:	ba5c0493 	blt	1701d38 <_Min_Stack_Size+0x1701938>
     ae8:	ba620800 	blt	1882af0 <_Min_Stack_Size+0x18826f0>
     aec:	00060800 	andeq	r0, r6, r0, lsl #16
     af0:	51049350 	tstpl	r4, r0, asr r3
     af4:	ba8e0493 	blt	fe381d48 <_estack+0xde351d48>
     af8:	ba900800 	blt	fe402b00 <_estack+0xde3d2b00>
     afc:	00060800 	andeq	r0, r6, r0, lsl #16
     b00:	51049350 	tstpl	r4, r0, asr r3
     b04:	bac40493 	blt	ff101d58 <_estack+0xdf0d1d58>
     b08:	badf0800 	blt	ff7c2b10 <_estack+0xdf792b10>
     b0c:	00060800 	andeq	r0, r6, r0, lsl #16
     b10:	51049350 	tstpl	r4, r0, asr r3
     b14:	bae00493 	blt	ff801d68 <_estack+0xdf7d1d68>
     b18:	baea0800 	blt	ffa82b20 <_estack+0xdfa52b20>
     b1c:	00060800 	andeq	r0, r6, r0, lsl #16
     b20:	51049350 	tstpl	r4, r0, asr r3
     b24:	bb540493 	bllt	1501d78 <_Min_Stack_Size+0x1501978>
     b28:	bb5c0800 	bllt	1702b30 <_Min_Stack_Size+0x1702730>
     b2c:	00060800 	andeq	r0, r6, r0, lsl #16
     b30:	53049352 	movwpl	r9, #17234	; 0x4352
     b34:	c2140493 	andsgt	r0, r4, #-1828716544	; 0x93000000
     b38:	c23f0800 	eorsgt	r0, pc, #0, 16
     b3c:	00060800 	andeq	r0, r6, r0, lsl #16
     b40:	51049350 	tstpl	r4, r0, asr r3
     b44:	c3000493 	movwgt	r0, #1171	; 0x493
     b48:	c3040800 	movwgt	r0, #18432	; 0x4800
     b4c:	00060800 	andeq	r0, r6, r0, lsl #16
     b50:	51049350 	tstpl	r4, r0, asr r3
     b54:	c3040493 	movwgt	r0, #17555	; 0x4493
     b58:	c30c0800 	movwgt	r0, #51200	; 0xc800
     b5c:	00060800 	andeq	r0, r6, r0, lsl #16
     b60:	53049350 	movwpl	r9, #17232	; 0x4350
     b64:	c30c0493 	movwgt	r0, #50323	; 0xc493
     b68:	c30f0800 	movwgt	r0, #63488	; 0xf800
     b6c:	00060800 	andeq	r0, r6, r0, lsl #16
     b70:	53049352 	movwpl	r9, #17234	; 0x4352
     b74:	00000493 	muleq	r0, r3, r4
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	bd760000 	ldcllt	0, cr0, [r6, #-0]
     b80:	bd780800 	ldcllt	8, cr0, [r8, #-0]
     b84:	00060800 	andeq	r0, r6, r0, lsl #16
     b88:	51049350 	tstpl	r4, r0, asr r3
     b8c:	bd780493 	cfldrdlt	mvd0, [r8, #-588]!	; 0xfffffdb4
     b90:	be300800 	cdplt	8, 3, cr0, cr0, cr0, {0}
     b94:	00030800 	andeq	r0, r3, r0, lsl #16
     b98:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     ba4:	300800bd 	strhcc	r0, [r8], -sp
     ba8:	060800be 			; <UNDEFINED> instruction: 0x060800be
     bac:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     bb0:	00049359 	andeq	r9, r4, r9, asr r3
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	50000000 	andpl	r0, r0, r0
     bbc:	680800bd 	stmdavs	r8, {r0, r2, r3, r4, r5, r7}
     bc0:	080800bd 	stmdaeq	r8, {r0, r2, r3, r4, r5, r7}
     bc4:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     bc8:	222506f5 	eorcs	r0, r5, #256901120	; 0xf500000
     bcc:	00bd689f 	umlalseq	r6, sp, pc, r8	; <UNPREDICTABLE>
     bd0:	00bd6b08 	adcseq	r6, sp, r8, lsl #22
     bd4:	50000608 	andpl	r0, r0, r8, lsl #12
     bd8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     bdc:	00bea004 	adcseq	sl, lr, r4
     be0:	00bf5008 	adcseq	r5, pc, r8
     be4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     be8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     bec:	00bf5204 	adcseq	r5, pc, r4, lsl #4
     bf0:	00bfa008 	adcseq	sl, pc, r8
     bf4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     bf8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     bfc:	00c19c04 	sbceq	r9, r1, r4, lsl #24
     c00:	00c1f808 	sbceq	pc, r1, r8, lsl #16
     c04:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     c08:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     c0c:	00c31404 	sbceq	r1, r3, r4, lsl #8
     c10:	00c34808 	sbceq	r4, r3, r8, lsl #16
     c14:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     c18:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     c1c:	00000004 	andeq	r0, r0, r4
     c20:	00000000 	andeq	r0, r0, r0
     c24:	00bd6800 	adcseq	r6, sp, r0, lsl #16
     c28:	00bd6b08 	adcseq	r6, sp, r8, lsl #22
     c2c:	f5000c08 			; <UNDEFINED> instruction: 0xf5000c08
     c30:	00f52506 	rscseq	r2, r5, r6, lsl #10
     c34:	2508f525 	strcs	pc, [r8, #-1317]	; 0x525
     c38:	929f1c1c 	addsls	r1, pc, #28, 24	; 0x1c00
     c3c:	960800be 			; <UNDEFINED> instruction: 0x960800be
     c40:	060800be 			; <UNDEFINED> instruction: 0x060800be
     c44:	04935000 	ldreq	r5, [r3], #0
     c48:	96049351 			; <UNDEFINED> instruction: 0x96049351
     c4c:	800800be 	strhhi	r0, [r8], -lr
     c50:	030800c1 	movweq	r0, #32961	; 0x80c1
     c54:	7fa09100 	svcvc	0x00a09100
     c58:	0800c19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr, pc}
     c5c:	0800c1f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr, pc}
     c60:	a0910003 	addsge	r0, r1, r3
     c64:	00c3147f 	sbceq	r1, r3, pc, ror r4
     c68:	00c34808 	sbceq	r4, r3, r8, lsl #16
     c6c:	91000308 	tstls	r0, r8, lsl #6
     c70:	c3807fa0 	orrgt	r7, r0, #160, 30	; 0x280
     c74:	c38c0800 	orrgt	r0, ip, #0, 16
     c78:	00030800 	andeq	r0, r3, r0, lsl #16
     c7c:	007fa091 			; <UNDEFINED> instruction: 0x007fa091
     c80:	00000000 	andeq	r0, r0, r0
     c84:	44000000 	strmi	r0, [r0], #-0
     c88:	540800be 	strpl	r0, [r8], #-190	; 0xbe
     c8c:	060800be 			; <UNDEFINED> instruction: 0x060800be
     c90:	04935b00 	ldreq	r5, [r3], #2816	; 0xb00
     c94:	5404935c 	strpl	r9, [r4], #-860	; 0x35c
     c98:	e00800be 	strh	r0, [r8], -lr
     c9c:	060800be 			; <UNDEFINED> instruction: 0x060800be
     ca0:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     ca4:	e0049359 	and	r9, r4, r9, asr r3
     ca8:	660800be 			; <UNDEFINED> instruction: 0x660800be
     cac:	030800c0 	movweq	r0, #32960	; 0x80c0
     cb0:	7f989100 	svcvc	0x00989100
     cb4:	0800c19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr, pc}
     cb8:	0800c1a8 	stmdaeq	r0, {r3, r5, r7, r8, lr, pc}
     cbc:	93580006 	cmpls	r8, #6
     cc0:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     cc4:	0800c1a8 	stmdaeq	r0, {r3, r5, r7, r8, lr, pc}
     cc8:	0800c1f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr, pc}
     ccc:	98910003 	ldmls	r1, {r0, r1}
     cd0:	00c3147f 	sbceq	r1, r3, pc, ror r4
     cd4:	00c34808 	sbceq	r4, r3, r8, lsl #16
     cd8:	91000308 	tstls	r0, r8, lsl #6
     cdc:	00007f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	bdea0000 	stcllt	0, cr0, [sl]
     ce8:	bded0800 	stcllt	8, cr0, [sp]
     cec:	00130800 	andseq	r0, r3, r0, lsl #16
     cf0:	f67fb091 			; <UNDEFINED> instruction: 0xf67fb091
     cf4:	08f52508 	ldmeq	r5!, {r3, r8, sl, sp}^
     cf8:	4ef52225 	cdpmi	2, 15, cr2, cr5, cr5, {1}
     cfc:	04f52225 	ldrbteq	r2, [r5], #549	; 0x225
     d00:	ed9f2225 	lfm	f2, 4, [pc, #148]	; d9c <_Min_Stack_Size+0x99c>
     d04:	080800bd 	stmdaeq	r8, {r0, r2, r3, r4, r5, r7}
     d08:	160800be 			; <UNDEFINED> instruction: 0x160800be
     d0c:	7fb09100 	svcvc	0x00b09100
     d10:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
     d14:	91222508 	teqls	r2, r8, lsl #10
     d18:	08f67fa8 	ldmeq	r6!, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
     d1c:	04f52225 	ldrbteq	r2, [r5], #549	; 0x225
     d20:	089f2225 	ldmeq	pc, {r0, r2, r5, r9, sp}	; <UNPREDICTABLE>
     d24:	0b0800be 	bleq	201024 <_Min_Stack_Size+0x200c24>
     d28:	060800be 			; <UNDEFINED> instruction: 0x060800be
     d2c:	04935000 	ldreq	r5, [r3], #0
     d30:	30049351 	andcc	r9, r4, r1, asr r3
     d34:	140800be 	strne	r0, [r8], #-190	; 0xbe
     d38:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     d3c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d40:	54049357 	strpl	r9, [r4], #-855	; 0x357
     d44:	820800c0 	andhi	r0, r8, #192	; 0xc0
     d48:	060800c0 	streq	r0, [r8], -r0, asr #1
     d4c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     d50:	9c049355 	stcls	3, cr9, [r4], {85}	; 0x55
     d54:	f20800c1 	vhadd.s8	q0, q12, <illegal reg q0.5>
     d58:	060800c1 	streq	r0, [r8], -r1, asr #1
     d5c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d60:	f8049357 			; <UNDEFINED> instruction: 0xf8049357
     d64:	020800c1 	andeq	r0, r8, #193	; 0xc1
     d68:	060800c2 	streq	r0, [r8], -r2, asr #1
     d6c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d70:	d0049357 	andle	r9, r4, r7, asr r3
     d74:	e60800c2 	str	r0, [r8], -r2, asr #1
     d78:	080800c2 	stmdaeq	r8, {r1, r6, r7}
     d7c:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     d80:	222504f5 	eorcs	r0, r5, #-184549376	; 0xf5000000
     d84:	00c2e69f 	smulleq	lr, r2, pc, r6	; <UNPREDICTABLE>
     d88:	00c2e908 	sbceq	lr, r2, r8, lsl #18
     d8c:	50000608 	andpl	r0, r0, r8, lsl #12
     d90:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     d94:	00c31404 	sbceq	r1, r3, r4, lsl #8
     d98:	00c32e08 	sbceq	r2, r3, r8, lsl #28
     d9c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     da0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     da4:	00c33404 	sbceq	r3, r3, r4, lsl #8
     da8:	00c34808 	sbceq	r4, r3, r8, lsl #16
     dac:	56000608 	strpl	r0, [r0], -r8, lsl #12
     db0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     db4:	00000004 	andeq	r0, r0, r4
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	00be2c00 	adcseq	r2, lr, r0, lsl #24
     dc0:	00be3008 	adcseq	r3, lr, r8
     dc4:	50000608 	andpl	r0, r0, r8, lsl #12
     dc8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     dcc:	00be3004 	adcseq	r3, lr, r4
     dd0:	00c18008 	sbceq	r8, r1, r8
     dd4:	91000308 	tstls	r0, r8, lsl #6
     dd8:	c19c7fa8 	orrsgt	r7, ip, r8, lsr #31
     ddc:	c2020800 	andgt	r0, r2, #0, 16
     de0:	00030800 	andeq	r0, r3, r0, lsl #16
     de4:	fe7fa891 	mrc2	8, 3, sl, cr15, cr1, {4}
     de8:	000800c2 	andeq	r0, r8, r2, asr #1
     dec:	060800c3 	streq	r0, [r8], -r3, asr #1
     df0:	04935000 	ldreq	r5, [r3], #0
     df4:	14049351 	strne	r9, [r4], #-849	; 0x351
     df8:	480800c3 	stmdami	r8, {r0, r1, r6, r7}
     dfc:	030800c3 	movweq	r0, #32963	; 0x80c3
     e00:	7fa89100 	svcvc	0x00a89100
     e04:	0800c380 	stmdaeq	r0, {r7, r8, r9, lr, pc}
     e08:	0800c38c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr, pc}
     e0c:	a8910003 	ldmge	r1, {r0, r1}
     e10:	0000007f 	andeq	r0, r0, pc, ror r0
     e14:	00000000 	andeq	r0, r0, r0
     e18:	00bcae00 	adcseq	sl, ip, r0, lsl #28
     e1c:	00bccc08 	adcseq	ip, ip, r8, lsl #24
     e20:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     e24:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     e28:	00bccc04 	adcseq	ip, ip, r4, lsl #24
     e2c:	00bcd008 	adcseq	sp, ip, r8
     e30:	50000608 	andpl	r0, r0, r8, lsl #12
     e34:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     e38:	00bcd004 	adcseq	sp, ip, r4
     e3c:	00bd7608 	adcseq	r7, sp, r8, lsl #12
     e40:	91000308 	tstls	r0, r8, lsl #6
     e44:	c0547fb0 	ldrhgt	r7, [r4], #-240	; 0xffffff10
     e48:	c0820800 	addgt	r0, r2, r0, lsl #16
     e4c:	00240800 	eoreq	r0, r4, r0, lsl #16
     e50:	f52506f5 			; <UNDEFINED> instruction: 0xf52506f5
     e54:	f51e2504 			; <UNDEFINED> instruction: 0xf51e2504
     e58:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     e5c:	00000008 	andeq	r0, r0, r8
     e60:	00000000 	andeq	r0, r0, r0
     e64:	f51b1c40 			; <UNDEFINED> instruction: 0xf51b1c40
     e68:	08f52506 	ldmeq	r5!, {r1, r2, r8, sl, sp}^
     e6c:	08f51e25 	ldmeq	r5!, {r0, r2, r5, r9, sl, fp, ip}^
     e70:	9f1c2225 	svcls	0x001c2225
	...
     e7c:	0800bb9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
     e80:	0800bbbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
     e84:	93500006 	cmpls	r0, #6
     e88:	04935104 	ldreq	r5, [r3], #260	; 0x104
     e8c:	0800bbbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
     e90:	0800bbc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp, ip, sp, pc}
     e94:	4e900008 	cdpmi	0, 9, cr0, cr0, cr8, {0}
     e98:	4f900493 	svcmi	0x00900493
     e9c:	bbc50493 	bllt	ff1420f0 <_estack+0xdf1120f0>
     ea0:	bd840800 	stclt	8, cr0, [r4]
     ea4:	00030800 	andeq	r0, r3, r0, lsl #16
     ea8:	307fa891 			; <UNDEFINED> instruction: 0x307fa891
     eac:	440800be 	strmi	r0, [r8], #-190	; 0xbe
     eb0:	0a0800be 	beq	2011b0 <_Min_Stack_Size+0x200db0>
     eb4:	00089e00 	andeq	r9, r8, r0, lsl #28
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	443ff000 	ldrtmi	pc, [pc], #-0	; ec4 <_Min_Stack_Size+0xac4>	; <UNPREDICTABLE>
     ec0:	800800be 	strhhi	r0, [r8], -lr
     ec4:	030800c1 	movweq	r0, #32961	; 0x80c1
     ec8:	7fb89100 	svcvc	0x00b89100
     ecc:	0800c19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr, pc}
     ed0:	0800c1f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr, pc}
     ed4:	b8910003 	ldmlt	r1, {r0, r1}
     ed8:	00c1f87f 	sbceq	pc, r1, pc, ror r8	; <UNPREDICTABLE>
     edc:	00c20208 	sbceq	r0, r2, r8, lsl #4
     ee0:	9e000a08 	vmlals.f32	s0, s0, s16
     ee4:	00000008 	andeq	r0, r0, r8
     ee8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     eec:	00c3143f 	sbceq	r1, r3, pc, lsr r4
     ef0:	00c34808 	sbceq	r4, r3, r8, lsl #16
     ef4:	91000308 	tstls	r0, r8, lsl #6
     ef8:	c3807fb8 	orrgt	r7, r0, #184, 30	; 0x2e0
     efc:	c38c0800 	orrgt	r0, ip, #0, 16
     f00:	00030800 	andeq	r0, r3, r0, lsl #16
     f04:	007fb891 			; <UNDEFINED> instruction: 0x007fb891
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
     f10:	300800bd 	strhcc	r0, [r8], -sp
     f14:	060800be 			; <UNDEFINED> instruction: 0x060800be
     f18:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f1c:	14049355 	strne	r9, [r4], #-853	; 0x355
     f20:	3c0800bf 	stccc	0, cr0, [r8], {191}	; 0xbf
     f24:	0a0800bf 	beq	201228 <_Min_Stack_Size+0x200e28>
     f28:	00089e00 	andeq	r9, r8, r0, lsl #28
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	3c000000 	stccc	0, cr0, [r0], {-0}
     f34:	4d0800bf 	stcmi	0, cr0, [r8, #-764]	; 0xfffffd04
     f38:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     f3c:	04935200 	ldreq	r5, [r3], #512	; 0x200
     f40:	6e049353 	mcrvs	3, 0, r9, cr4, cr3, {2}
     f44:	cc0800bf 	stcgt	0, cr0, [r8], {191}	; 0xbf
     f48:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     f4c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     f50:	f8049357 			; <UNDEFINED> instruction: 0xf8049357
     f54:	520800bf 	andpl	r0, r8, #191	; 0xbf
     f58:	060800c0 	streq	r0, [r8], -r0, asr #1
     f5c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f60:	4a049355 	bmi	125cbc <_Min_Stack_Size+0x1258bc>
     f64:	ce0800c2 	cdpgt	0, 0, cr0, cr8, cr2, {6}
     f68:	060800c2 	streq	r0, [r8], -r2, asr #1
     f6c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f70:	00049355 	andeq	r9, r4, r5, asr r3
     f74:	00000000 	andeq	r0, r0, r0
     f78:	70000000 	andvc	r0, r0, r0
     f7c:	d80800bb 	stmdale	r8, {r0, r1, r3, r4, r5, r7}
     f80:	060800bb 			; <UNDEFINED> instruction: 0x060800bb
     f84:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     f88:	06049357 			; <UNDEFINED> instruction: 0x06049357
     f8c:	c40800bd 	strgt	r0, [r8], #-189	; 0xbd
     f90:	060800bd 			; <UNDEFINED> instruction: 0x060800bd
     f94:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     f98:	78049359 	stmdavc	r4, {r0, r3, r4, r6, r8, r9, ip, pc}
     f9c:	e20800bf 	and	r0, r8, #191	; 0xbf
     fa0:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     fa4:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     fa8:	58049359 	stmdapl	r4, {r0, r3, r4, r6, r8, r9, ip, pc}
     fac:	000800c2 	andeq	r0, r8, r2, asr #1
     fb0:	060800c3 	streq	r0, [r8], -r3, asr #1
     fb4:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     fb8:	00049359 	andeq	r9, r4, r9, asr r3
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	8c000000 	stchi	0, cr0, [r0], {-0}
     fc4:	920800bb 	andls	r0, r8, #187	; 0xbb
     fc8:	060800bb 			; <UNDEFINED> instruction: 0x060800bb
     fcc:	04935000 	ldreq	r5, [r3], #0
     fd0:	92049351 	andls	r9, r4, #1140850689	; 0x44000001
     fd4:	970800bb 			; <UNDEFINED> instruction: 0x970800bb
     fd8:	060800bb 			; <UNDEFINED> instruction: 0x060800bb
     fdc:	04935200 	ldreq	r5, [r3], #512	; 0x200
     fe0:	97049353 	smlsdls	r4, r3, r3, r9
     fe4:	500800bb 	strhpl	r0, [r8], -fp
     fe8:	020800bd 	andeq	r0, r8, #189	; 0xbd
     fec:	50489100 	subpl	r9, r8, r0, lsl #2
     ff0:	060800bd 			; <UNDEFINED> instruction: 0x060800bd
     ff4:	060800be 			; <UNDEFINED> instruction: 0x060800be
     ff8:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     ffc:	ba049357 	blt	125d60 <_Min_Stack_Size+0x125960>
    1000:	f60800bf 			; <UNDEFINED> instruction: 0xf60800bf
    1004:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
    1008:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    100c:	d0049355 	andle	r9, r4, r5, asr r3
    1010:	000800c2 	andeq	r0, r8, r2, asr #1
    1014:	060800c3 	streq	r0, [r8], -r3, asr #1
    1018:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    101c:	00049355 	andeq	r9, r4, r5, asr r3
    1020:	00000000 	andeq	r0, r0, r0
    1024:	e4000000 	str	r0, [r0], #-0
    1028:	800800bf 	strhhi	r0, [r8], -pc	; <UNPREDICTABLE>
    102c:	060800c1 	streq	r0, [r8], -r1, asr #1
    1030:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    1034:	4a049359 	bmi	125da0 <_Min_Stack_Size+0x1259a0>
    1038:	ce0800c2 	cdpgt	0, 0, cr0, cr8, cr2, {6}
    103c:	340800c2 	strcc	r0, [r8], #-194	; 0xc2
    1040:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
    1044:	1e2504f5 	mcrne	4, 1, r0, cr5, cr5, {7}
    1048:	000825f4 	strdeq	r2, [r8], -r4
    104c:	00000000 	andeq	r0, r0, r0
    1050:	f43fe000 			; <UNDEFINED> instruction: 0xf43fe000
    1054:	55550825 	ldrbpl	r0, [r5, #-2085]	; 0x825
    1058:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
    105c:	04f53fd5 	ldrbteq	r3, [r5], #4053	; 0xfd5
    1060:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1064:	00000000 	andeq	r0, r0, r0
    1068:	3fd00000 	svccc	0x00d00000
    106c:	04f51c1e 	ldrbteq	r1, [r5], #3102	; 0xc1e
    1070:	1e1c1e25 	cdpne	14, 1, cr1, cr12, cr5, {1}
    1074:	00c3809f 	smulleq	r8, r3, pc, r0	; <UNPREDICTABLE>
    1078:	00c38c08 	sbceq	r8, r3, r8, lsl #24
    107c:	58000608 	stmdapl	r0, {r3, r9, sl}
    1080:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    1084:	00000004 	andeq	r0, r0, r4
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00bf0000 	adcseq	r0, pc, r0
    1090:	00bf6208 	adcseq	r6, pc, r8, lsl #4
    1094:	58000108 	stmdapl	r0, {r3, r8}
    1098:	0800c334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr, pc}
    109c:	0800c348 	stmdaeq	r0, {r3, r6, r8, r9, lr, pc}
    10a0:	00770009 	rsbseq	r0, r7, r9
    10a4:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    10a8:	009f1a7f 	addseq	r1, pc, pc, ror sl	; <UNPREDICTABLE>
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	12000000 	andne	r0, r0, #0
    10b4:	1e0800ba 	mcrne	0, 0, r0, cr8, cr10, {5}
    10b8:	010800ba 	strheq	r0, [r8, -sl]
    10bc:	ba1e5000 	blt	7950c4 <_Min_Stack_Size+0x794cc4>
    10c0:	ba2c0800 	blt	b030c8 <_Min_Stack_Size+0xb02cc8>
    10c4:	000c0800 	andeq	r0, ip, r0, lsl #16
    10c8:	330a0074 	movwcc	r0, #41076	; 0xa074
    10cc:	44007804 	strmi	r7, [r0], #-2052	; 0x804
    10d0:	9f251c26 	svcls	0x00251c26
    10d4:	0800bb0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp, pc}
    10d8:	0800bb24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp, pc}
    10dc:	24530001 	ldrbcs	r0, [r3], #-1
    10e0:	b20800bb 	andlt	r0, r8, #187	; 0xbb
    10e4:	0b0800bb 	bleq	2013d8 <_Min_Stack_Size+0x200fd8>
    10e8:	7f989100 	svcvc	0x00989100
    10ec:	24f00906 	ldrbtcs	r0, [r0], #2310	; 0x906
    10f0:	9f25f009 	svcls	0x0025f009
    10f4:	0800bebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp, pc}
    10f8:	0800bf14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, sp, pc}
    10fc:	c4570001 	ldrbgt	r0, [r7], #-1
    1100:	800800c0 	andhi	r0, r8, r0, asr #1
    1104:	010800c1 	smlabteq	r8, r1, r0, r0
    1108:	c19c5b00 	orrsgt	r5, ip, r0, lsl #22
    110c:	c1f20800 	mvnsgt	r0, r0, lsl #16
    1110:	00010800 	andeq	r0, r1, r0, lsl #16
    1114:	00c31457 	sbceq	r1, r3, r7, asr r4
    1118:	00c32e08 	sbceq	r2, r3, r8, lsl #28
    111c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1120:	0800c334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr, pc}
    1124:	0800c348 	stmdaeq	r0, {r3, r6, r8, r9, lr, pc}
    1128:	54570001 	ldrbpl	r0, [r7], #-1
    112c:	640800c3 	strvs	r0, [r8], #-195	; 0xc3
    1130:	010800c3 	smlabteq	r8, r3, r0, r0
    1134:	c3805000 	orrgt	r5, r0, #0
    1138:	c38c0800 	orrgt	r0, ip, #0, 16
    113c:	00010800 	andeq	r0, r1, r0, lsl #16
    1140:	00c38c5b 	sbceq	r8, r3, fp, asr ip
    1144:	00c39008 	sbceq	r9, r3, r8
    1148:	50000108 	andpl	r0, r0, r8, lsl #2
    114c:	0800c390 	stmdaeq	r0, {r4, r7, r8, r9, lr, pc}
    1150:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
    1154:	0078000c 	rsbseq	r0, r8, ip
    1158:	7804130a 	stmdavc	r4, {r1, r3, r8, r9, ip}
    115c:	1c264400 	cfstrsne	mvf4, [r6], #-0
    1160:	00009f26 	andeq	r9, r0, r6, lsr #30
    1164:	00000000 	andeq	r0, r0, r0
    1168:	b9fe0000 	ldmiblt	lr!, {}^	; <UNPREDICTABLE>
    116c:	ba0c0800 	blt	303174 <_Min_Stack_Size+0x302d74>
    1170:	00040800 	andeq	r0, r4, r0, lsl #16
    1174:	9f788172 	svcls	0x00788172
    1178:	0800ba0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp, pc}
    117c:	0800ba2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, sp, pc}
    1180:	00780009 	rsbseq	r0, r8, r9
    1184:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1188:	209f1c03 	addscs	r1, pc, r3, lsl #24
    118c:	3a0800bb 	bcc	201480 <_Min_Stack_Size+0x201080>
    1190:	020800bb 	andeq	r0, r8, #187	; 0xbb
    1194:	3a9f3000 	bcc	fe7cd19c <_estack+0xde79d19c>
    1198:	420800bb 	andmi	r0, r8, #187	; 0xbb
    119c:	010800bb 	strheq	r0, [r8, -fp]
    11a0:	bf005a00 	svclt	0x00005a00
    11a4:	bf040800 	svclt	0x00040800
    11a8:	00090800 	andeq	r0, r9, r0, lsl #16
    11ac:	26440078 			; <UNDEFINED> instruction: 0x26440078
    11b0:	1c03ff0a 	stcne	15, cr15, [r3], {10}
    11b4:	00bf049f 	umlalseq	r0, pc, pc, r4	; <UNPREDICTABLE>
    11b8:	00bf0808 	adcseq	r0, pc, r8, lsl #16
    11bc:	73000408 	movwvc	r0, #1032	; 0x408
    11c0:	089f7881 	ldmeq	pc, {r0, r7, fp, ip, sp, lr}	; <UNPREDICTABLE>
    11c4:	140800bf 	strne	r0, [r8], #-191	; 0xbf
    11c8:	030800bf 	movweq	r0, #32959	; 0x80bf
    11cc:	9f7f7300 	svcls	0x007f7300
    11d0:	0800bf14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, sp, pc}
    11d4:	0800bf1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, pc}
    11d8:	81760004 	cmnhi	r6, r4
    11dc:	bf1c9f78 	svclt	0x001c9f78
    11e0:	bf4d0800 	svclt	0x004d0800
    11e4:	00010800 	andeq	r0, r1, r0, lsl #16
    11e8:	00bf4d5e 	adcseq	r4, pc, lr, asr sp	; <UNPREDICTABLE>
    11ec:	00bf6208 	adcseq	r6, pc, r8, lsl #4
    11f0:	40001a08 	andmi	r1, r0, r8, lsl #20
    11f4:	00782440 	rsbseq	r2, r8, r0, asr #8
    11f8:	fe0a2644 	cdp2	6, 0, cr2, cr10, cr4, {2}
    11fc:	77261c03 	strvc	r1, [r6, -r3, lsl #24]!
    1200:	e5092200 	str	r2, [r9, #-512]	; 0x200
    1204:	25f90924 	ldrbcs	r0, [r9, #2340]!	; 0x924
    1208:	1c03ff0a 	stcne	15, cr15, [r3], {10}
    120c:	00c3349f 	smulleq	r3, r3, pc, r4	; <UNPREDICTABLE>
    1210:	00c34808 	sbceq	r4, r3, r8, lsl #16
    1214:	77000f08 	strvc	r0, [r0, -r8, lsl #30]
    1218:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    121c:	441a7fff 	ldrmi	r7, [sl], #-4095	; 0xfff
    1220:	03ff0a26 	mvnseq	r0, #155648	; 0x26000
    1224:	c3489f1c 	movtgt	r9, #36636	; 0x8f1c
    1228:	c34e0800 	movtgt	r0, #59392	; 0xe800
    122c:	00040800 	andeq	r0, r4, r0, lsl #16
    1230:	9f788172 	svcls	0x00788172
    1234:	0800c34e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, lr, pc}
    1238:	0800c364 	stmdaeq	r0, {r2, r5, r6, r8, r9, lr, pc}
    123c:	00780009 	rsbseq	r0, r8, r9
    1240:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1244:	789f1c03 	ldmvc	pc, {r0, r1, sl, fp, ip}	; <UNPREDICTABLE>
    1248:	7a0800c3 	bvc	20155c <_Min_Stack_Size+0x20115c>
    124c:	040800c3 	streq	r0, [r8], #-195	; 0xc3
    1250:	78817200 	stmvc	r1, {r9, ip, sp, lr}
    1254:	00c37a9f 	smulleq	r7, r3, pc, sl	; <UNPREDICTABLE>
    1258:	00c38008 	sbceq	r8, r3, r8
    125c:	78000908 	stmdavc	r0, {r3, r8, fp}
    1260:	0a264400 	beq	992268 <_Min_Stack_Size+0x991e68>
    1264:	9f1c03ff 	svcls	0x001c03ff
    1268:	0800c38c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr, pc}
    126c:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
    1270:	00780009 	rsbseq	r0, r8, r9
    1274:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1278:	009f1c03 	addseq	r1, pc, r3, lsl #24
    127c:	00000000 	andeq	r0, r0, r0
    1280:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1284:	140800b9 	strne	r0, [r8], #-185	; 0xb9
    1288:	020800b9 	andeq	r0, r8, #185	; 0xb9
    128c:	149f3000 	ldrne	r3, [pc], #0	; 1294 <_Min_Stack_Size+0xe94>
    1290:	400800b9 	strhmi	r0, [r8], -r9
    1294:	030800b9 	movweq	r0, #32953	; 0x80b9
    1298:	7fa09100 	svcvc	0x00a09100
    129c:	0800b9e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp, pc}
    12a0:	0800ba2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, sp, pc}
    12a4:	9f300002 	svcls	0x00300002
    12a8:	0800ba2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, sp, pc}
    12ac:	0800ba56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, ip, sp, pc}
    12b0:	a0910003 	addsge	r0, r1, r3
    12b4:	00ba987f 	adcseq	r9, sl, pc, ror r8
    12b8:	00bab808 	adcseq	fp, sl, r8, lsl #16
    12bc:	91000308 	tstls	r0, r8, lsl #6
    12c0:	bab87fa0 	blt	fee21148 <_estack+0xdedf1148>
    12c4:	babc0800 	blt	fef032cc <_estack+0xdeed32cc>
    12c8:	00020800 	andeq	r0, r2, r0, lsl #16
    12cc:	babc9f30 	blt	fef28f94 <_estack+0xdeef8f94>
    12d0:	bac40800 	blt	ff1032d8 <_estack+0xdf0d32d8>
    12d4:	00010800 	andeq	r0, r1, r0, lsl #16
    12d8:	00c18052 	sbceq	r8, r1, r2, asr r0
    12dc:	00c19008 	sbceq	r9, r1, r8
    12e0:	91000308 	tstls	r0, r8, lsl #6
    12e4:	c1907fa0 	orrsgt	r7, r0, r0, lsr #31
    12e8:	c1940800 	orrsgt	r0, r4, r0, lsl #16
    12ec:	00030800 	andeq	r0, r3, r0, lsl #16
    12f0:	027fa07d 	rsbseq	sl, pc, #125	; 0x7d
    12f4:	140800c2 	strne	r0, [r8], #-194	; 0xc2
    12f8:	030800c2 	movweq	r0, #32962	; 0x80c2
    12fc:	7fa09100 	svcvc	0x00a09100
    1300:	0800c348 	stmdaeq	r0, {r3, r6, r8, r9, lr, pc}
    1304:	0800c364 	stmdaeq	r0, {r2, r5, r6, r8, r9, lr, pc}
    1308:	9f300002 	svcls	0x00300002
    130c:	0800c378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, lr, pc}
    1310:	0800c380 	stmdaeq	r0, {r7, r8, r9, lr, pc}
    1314:	9f300002 	svcls	0x00300002
    1318:	0800c38c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr, pc}
    131c:	0800c396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, lr, pc}
    1320:	9f300002 	svcls	0x00300002
    1324:	0800c396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, lr, pc}
    1328:	0800c3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr, pc}
    132c:	00500001 	subseq	r0, r0, r1
    1330:	00000000 	andeq	r0, r0, r0
    1334:	c4000000 	strgt	r0, [r0], #-0
    1338:	e00800ba 	strh	r0, [r8], -sl
    133c:	020800ba 	andeq	r0, r8, #186	; 0xba
    1340:	e09f3000 	adds	r3, pc, r0
    1344:	ea0800ba 	b	201634 <_Min_Stack_Size+0x201234>
    1348:	030800ba 	movweq	r0, #32954	; 0x80ba
    134c:	9fcb0900 	svcls	0x00cb0900
    1350:	0800baea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, ip, sp, pc}
    1354:	0800bb0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip, sp, pc}
    1358:	0c550001 	mrrceq	0, 0, r0, r5, cr1
    135c:	2a0800bb 	bcs	201650 <_Min_Stack_Size+0x201250>
    1360:	010800bb 	strheq	r0, [r8, -fp]
    1364:	bb2a5600 	bllt	a96b6c <_Min_Stack_Size+0xa9676c>
    1368:	be300800 	cdplt	8, 3, cr0, cr0, cr0, {0}
    136c:	00020800 	andeq	r0, r2, r0, lsl #16
    1370:	bf005491 	svclt	0x00005491
    1374:	bf100800 	svclt	0x00100800
    1378:	00020800 	andeq	r0, r2, r0, lsl #16
    137c:	bf109f30 	svclt	0x00109f30
    1380:	bf400800 	svclt	0x00400800
    1384:	00010800 	andeq	r0, r1, r0, lsl #16
    1388:	00bf4051 	adcseq	r4, pc, r1, asr r0	; <UNPREDICTABLE>
    138c:	00c0d808 	sbceq	sp, r0, r8, lsl #16
    1390:	5a000108 	bpl	17b8 <_Min_Stack_Size+0x13b8>
    1394:	0800c334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr, pc}
    1398:	0800c348 	stmdaeq	r0, {r3, r6, r8, r9, lr, pc}
    139c:	9f300002 	svcls	0x00300002
    13a0:	0800c380 	stmdaeq	r0, {r7, r8, r9, lr, pc}
    13a4:	0800c38c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr, pc}
    13a8:	005a0001 	subseq	r0, sl, r1
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	a6000000 	strge	r0, [r0], -r0
    13b4:	c80800b8 	stmdagt	r8, {r3, r4, r5, r7}
    13b8:	010800b8 	strheq	r0, [r8, -r8]
    13bc:	b8de5700 	ldmlt	lr, {r8, r9, sl, ip, lr}^
    13c0:	b9b80800 	ldmiblt	r8!, {fp}
    13c4:	00010800 	andeq	r0, r1, r0, lsl #16
    13c8:	00b9bc57 	adcseq	fp, r9, r7, asr ip
    13cc:	00b9c208 	adcseq	ip, r9, r8, lsl #4
    13d0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    13d4:	0800b9e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp, pc}
    13d8:	0800ba38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp, pc}
    13dc:	5c570001 	mrrcpl	0, 0, r0, r7, cr1
    13e0:	8a0800ba 	bhi	2016d0 <_Min_Stack_Size+0x2012d0>
    13e4:	010800ba 	strheq	r0, [r8, -sl]
    13e8:	ba8e5700 	blt	fe396ff0 <_estack+0xde366ff0>
    13ec:	ba9e0800 	blt	fe7833f4 <_estack+0xde7533f4>
    13f0:	00010800 	andeq	r0, r1, r0, lsl #16
    13f4:	00bab857 	adcseq	fp, sl, r7, asr r8
    13f8:	00bafe08 	adcseq	pc, sl, r8, lsl #28
    13fc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1400:	0800c180 	stmdaeq	r0, {r7, r8, lr, pc}
    1404:	0800c190 	stmdaeq	r0, {r4, r7, r8, lr, pc}
    1408:	94570001 	ldrbls	r0, [r7], #-1
    140c:	9c0800c1 	stcls	0, cr0, [r8], {193}	; 0xc1
    1410:	010800c1 	smlabteq	r8, r1, r0, r0
    1414:	c2145700 	andsgt	r5, r4, #0, 14
    1418:	c2740800 	rsbsgt	r0, r4, #0, 16
    141c:	00010800 	andeq	r0, r1, r0, lsl #16
    1420:	00c30057 	sbceq	r0, r3, r7, asr r0
    1424:	00c31408 	sbceq	r1, r3, r8, lsl #8
    1428:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    142c:	0800c348 	stmdaeq	r0, {r3, r6, r8, r9, lr, pc}
    1430:	0800c36a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, lr, pc}
    1434:	78570001 	ldmdavc	r7, {r0}^
    1438:	800800c3 	andhi	r0, r8, r3, asr #1
    143c:	010800c3 	smlabteq	r8, r3, r0, r0
    1440:	c38c5700 	orrgt	r5, ip, #0, 14
    1444:	c3d80800 	bicsgt	r0, r8, #0, 16
    1448:	00010800 	andeq	r0, r1, r0, lsl #16
    144c:	00000057 	andeq	r0, r0, r7, asr r0
    1450:	00000000 	andeq	r0, r0, r0
    1454:	00b8a600 	adcseq	sl, r8, r0, lsl #12
    1458:	00b8d408 	adcseq	sp, r8, r8, lsl #8
    145c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1460:	0800b8de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, ip, sp, pc}
    1464:	0800b9de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, ip, sp, pc}
    1468:	e2550001 	subs	r0, r5, #1
    146c:	ee0800b9 	mcr	0, 0, r0, cr8, cr9, {5}
    1470:	010800ba 	strheq	r0, [r8, -sl]
    1474:	c1805500 	orrgt	r5, r0, r0, lsl #10
    1478:	c1900800 	orrsgt	r0, r0, r0, lsl #16
    147c:	00010800 	andeq	r0, r1, r0, lsl #16
    1480:	00c19455 	sbceq	r9, r1, r5, asr r4
    1484:	00c19c08 	sbceq	r9, r1, r8, lsl #24
    1488:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    148c:	0800c202 	stmdaeq	r0, {r1, r9, lr, pc}
    1490:	0800c248 	stmdaeq	r0, {r3, r6, r9, lr, pc}
    1494:	00550001 	subseq	r0, r5, r1
    1498:	140800c3 	strne	r0, [r8], #-195	; 0xc3
    149c:	010800c3 	smlabteq	r8, r3, r0, r0
    14a0:	c3485500 	movtgt	r5, #34048	; 0x8500
    14a4:	c3800800 	orrgt	r0, r0, #0, 16
    14a8:	00010800 	andeq	r0, r1, r0, lsl #16
    14ac:	00c38c55 	sbceq	r8, r3, r5, asr ip
    14b0:	00c3d808 	sbceq	sp, r3, r8, lsl #16
    14b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    14c0:	0800b8a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, ip, sp, pc}
    14c4:	0800b8c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, pc}
    14c8:	00770009 	rsbseq	r0, r7, r9
    14cc:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    14d0:	de9f1a7f 	mrcle	10, 4, r1, cr15, cr15, {3}
    14d4:	b80800b8 	stmdalt	r8, {r3, r4, r5, r7}
    14d8:	090800b9 	stmdbeq	r8, {r0, r3, r4, r5, r7}
    14dc:	0c007700 	stceq	7, cr7, [r0], {-0}
    14e0:	7fffffff 	svcvc	0x00ffffff
    14e4:	b9bc9f1a 	ldmiblt	ip!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    14e8:	b9c20800 	stmiblt	r2, {fp}^
    14ec:	00090800 	andeq	r0, r9, r0, lsl #16
    14f0:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    14f4:	1a7fffff 	bne	20014f8 <_Min_Stack_Size+0x20010f8>
    14f8:	00b9e29f 	umlalseq	lr, r9, pc, r2	; <UNPREDICTABLE>
    14fc:	00ba3808 	adcseq	r3, sl, r8, lsl #16
    1500:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    1504:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    1508:	9f1a7fff 	svcls	0x001a7fff
    150c:	0800ba5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp, pc}
    1510:	0800ba8a 	stmdaeq	r0, {r1, r3, r7, r9, fp, ip, sp, pc}
    1514:	00770009 	rsbseq	r0, r7, r9
    1518:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    151c:	8e9f1a7f 	mrchi	10, 4, r1, cr15, cr15, {3}
    1520:	9e0800ba 	mcrls	0, 0, r0, cr8, cr10, {5}
    1524:	090800ba 	stmdbeq	r8, {r1, r3, r4, r5, r7}
    1528:	0c007700 	stceq	7, cr7, [r0], {-0}
    152c:	7fffffff 	svcvc	0x00ffffff
    1530:	bab89f1a 	blt	fee291a0 <_estack+0xdedf91a0>
    1534:	bae60800 	blt	ff98353c <_estack+0xdf95353c>
    1538:	00090800 	andeq	r0, r9, r0, lsl #16
    153c:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    1540:	1a7fffff 	bne	2001544 <_Min_Stack_Size+0x2001144>
    1544:	00baea9f 	umlalseq	lr, sl, pc, sl	; <UNPREDICTABLE>
    1548:	00bb1008 	adcseq	r1, fp, r8
    154c:	91000308 	tstls	r0, r8, lsl #6
    1550:	bb107f98 	bllt	4213b8 <_Min_Stack_Size+0x420fb8>
    1554:	bbc00800 	bllt	ff00355c <_estack+0xdefd355c>
    1558:	00010800 	andeq	r0, r1, r0, lsl #16
    155c:	00c18054 	sbceq	r8, r1, r4, asr r0
    1560:	00c19008 	sbceq	r9, r1, r8
    1564:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    1568:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    156c:	9f1a7fff 	svcls	0x001a7fff
    1570:	0800c194 	stmdaeq	r0, {r2, r4, r7, r8, lr, pc}
    1574:	0800c19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr, pc}
    1578:	00770009 	rsbseq	r0, r7, r9
    157c:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    1580:	149f1a7f 	ldrne	r1, [pc], #2687	; 1588 <_Min_Stack_Size+0x1188>
    1584:	740800c2 	strvc	r0, [r8], #-194	; 0xc2
    1588:	090800c2 	stmdbeq	r8, {r1, r6, r7}
    158c:	0c007700 	stceq	7, cr7, [r0], {-0}
    1590:	7fffffff 	svcvc	0x00ffffff
    1594:	c3009f1a 	movwgt	r9, #3866	; 0xf1a
    1598:	c3140800 	tstgt	r4, #0, 16
    159c:	00090800 	andeq	r0, r9, r0, lsl #16
    15a0:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    15a4:	1a7fffff 	bne	20015a8 <_Min_Stack_Size+0x20011a8>
    15a8:	00c3489f 	smulleq	r4, r3, pc, r8	; <UNPREDICTABLE>
    15ac:	00c36a08 	sbceq	r6, r3, r8, lsl #20
    15b0:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    15b4:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    15b8:	9f1a7fff 	svcls	0x001a7fff
    15bc:	0800c378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, lr, pc}
    15c0:	0800c380 	stmdaeq	r0, {r7, r8, r9, lr, pc}
    15c4:	00770009 	rsbseq	r0, r7, r9
    15c8:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    15cc:	8c9f1a7f 	vldmiahi	pc, {s2-s128}
    15d0:	d80800c3 	stmdale	r8, {r0, r1, r6, r7}
    15d4:	090800c3 	stmdbeq	r8, {r0, r1, r6, r7}
    15d8:	0c007700 	stceq	7, cr7, [r0], {-0}
    15dc:	7fffffff 	svcvc	0x00ffffff
    15e0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	b8a60000 	stmialt	r6!, {}	; <UNPREDICTABLE>
    15ec:	b8d40800 	ldmlt	r4, {fp}^
    15f0:	00010800 	andeq	r0, r1, r0, lsl #16
    15f4:	00b8de58 	adcseq	sp, r8, r8, asr lr
    15f8:	00b9de08 	adcseq	sp, r9, r8, lsl #28
    15fc:	58000108 	stmdapl	r0, {r3, r8}
    1600:	0800b9e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp, pc}
    1604:	0800bbb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
    1608:	80580001 	subshi	r0, r8, r1
    160c:	900800c1 	andls	r0, r8, r1, asr #1
    1610:	010800c1 	smlabteq	r8, r1, r0, r0
    1614:	c1905800 	orrsgt	r5, r0, r0, lsl #16
    1618:	c1930800 	orrsgt	r0, r3, r0, lsl #16
    161c:	00090800 	andeq	r0, r9, r0, lsl #16
    1620:	ff0c007c 			; <UNDEFINED> instruction: 0xff0c007c
    1624:	1a7fffff 	bne	2001628 <_Min_Stack_Size+0x2001228>
    1628:	00c1949f 	smulleq	r9, r1, pc, r4	; <UNPREDICTABLE>
    162c:	00c19c08 	sbceq	r9, r1, r8, lsl #24
    1630:	58000108 	stmdapl	r0, {r3, r8}
    1634:	0800c202 	stmdaeq	r0, {r1, r9, lr, pc}
    1638:	0800c256 	stmdaeq	r0, {r1, r2, r4, r6, r9, lr, pc}
    163c:	00580001 	subseq	r0, r8, r1
    1640:	140800c3 	strne	r0, [r8], #-195	; 0xc3
    1644:	010800c3 	smlabteq	r8, r3, r0, r0
    1648:	c3485800 	movtgt	r5, #34816	; 0x8800
    164c:	c3800800 	orrgt	r0, r0, #0, 16
    1650:	00010800 	andeq	r0, r1, r0, lsl #16
    1654:	00c38c58 	sbceq	r8, r3, r8, asr ip
    1658:	00c3d808 	sbceq	sp, r3, r8, lsl #16
    165c:	58000108 	stmdapl	r0, {r3, r8}
	...
    1668:	0800b8a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, ip, sp, pc}
    166c:	0800b8c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, pc}
    1670:	de560001 	cdple	0, 5, cr0, cr6, cr1, {0}
    1674:	b80800b8 	stmdalt	r8, {r3, r4, r5, r7}
    1678:	010800b9 	strheq	r0, [r8, -r9]
    167c:	b9bc5600 	ldmiblt	ip!, {r9, sl, ip, lr}
    1680:	b9c20800 	stmiblt	r2, {fp}^
    1684:	00010800 	andeq	r0, r1, r0, lsl #16
    1688:	00b9e256 	adcseq	lr, r9, r6, asr r2
    168c:	00ba3808 	adcseq	r3, sl, r8, lsl #16
    1690:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1694:	0800ba5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp, pc}
    1698:	0800ba8a 	stmdaeq	r0, {r1, r3, r7, r9, fp, ip, sp, pc}
    169c:	8e560001 	cdphi	0, 5, cr0, cr6, cr1, {0}
    16a0:	9e0800ba 	mcrls	0, 0, r0, cr8, cr10, {5}
    16a4:	010800ba 	strheq	r0, [r8, -sl]
    16a8:	bab85600 	blt	fee16eb0 <_estack+0xdede6eb0>
    16ac:	bafe0800 	blt	fff836b4 <_estack+0xdff536b4>
    16b0:	00010800 	andeq	r0, r1, r0, lsl #16
    16b4:	00c18056 	sbceq	r8, r1, r6, asr r0
    16b8:	00c19008 	sbceq	r9, r1, r8
    16bc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    16c0:	0800c194 	stmdaeq	r0, {r2, r4, r7, r8, lr, pc}
    16c4:	0800c19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr, pc}
    16c8:	14560001 	ldrbne	r0, [r6], #-1
    16cc:	740800c2 	strvc	r0, [r8], #-194	; 0xc2
    16d0:	010800c2 	smlabteq	r8, r2, r0, r0
    16d4:	c3005600 	movwgt	r5, #1536	; 0x600
    16d8:	c3140800 	tstgt	r4, #0, 16
    16dc:	00010800 	andeq	r0, r1, r0, lsl #16
    16e0:	00c34856 	sbceq	r4, r3, r6, asr r8
    16e4:	00c36a08 	sbceq	r6, r3, r8, lsl #20
    16e8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    16ec:	0800c378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, lr, pc}
    16f0:	0800c380 	stmdaeq	r0, {r7, r8, r9, lr, pc}
    16f4:	8c560001 	mrrchi	0, 0, r0, r6, cr1
    16f8:	d80800c3 	stmdale	r8, {r0, r1, r6, r7}
    16fc:	010800c3 	smlabteq	r8, r3, r0, r0
    1700:	00005600 	andeq	r5, r0, r0, lsl #12
    1704:	00000000 	andeq	r0, r0, r0
    1708:	b8a60000 	stmialt	r6!, {}	; <UNPREDICTABLE>
    170c:	b8d40800 	ldmlt	r4, {fp}^
    1710:	00010800 	andeq	r0, r1, r0, lsl #16
    1714:	00b8de54 	adcseq	sp, r8, r4, asr lr
    1718:	00b9de08 	adcseq	sp, r9, r8, lsl #28
    171c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1720:	0800b9e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp, pc}
    1724:	0800baee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip, sp, pc}
    1728:	80540001 	subshi	r0, r4, r1
    172c:	900800c1 	andls	r0, r8, r1, asr #1
    1730:	010800c1 	smlabteq	r8, r1, r0, r0
    1734:	c1945400 	orrsgt	r5, r4, r0, lsl #8
    1738:	c19c0800 	orrsgt	r0, ip, r0, lsl #16
    173c:	00010800 	andeq	r0, r1, r0, lsl #16
    1740:	00c20254 	sbceq	r0, r2, r4, asr r2
    1744:	00c24808 	sbceq	r4, r2, r8, lsl #16
    1748:	54000108 	strpl	r0, [r0], #-264	; 0x108
    174c:	0800c300 	stmdaeq	r0, {r8, r9, lr, pc}
    1750:	0800c314 	stmdaeq	r0, {r2, r4, r8, r9, lr, pc}
    1754:	48540001 	ldmdami	r4, {r0}^
    1758:	800800c3 	andhi	r0, r8, r3, asr #1
    175c:	010800c3 	smlabteq	r8, r3, r0, r0
    1760:	c38c5400 	orrgt	r5, ip, #0, 8
    1764:	c3d80800 	bicsgt	r0, r8, #0, 16
    1768:	00010800 	andeq	r0, r1, r0, lsl #16
    176c:	00000054 	andeq	r0, r0, r4, asr r0
    1770:	00000000 	andeq	r0, r0, r0
    1774:	00b8a600 	adcseq	sl, r8, r0, lsl #12
    1778:	00b8ba08 	adcseq	fp, r8, r8, lsl #20
    177c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1780:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1784:	00b8cc04 	adcseq	ip, r8, r4, lsl #24
    1788:	00b8de08 	adcseq	sp, r8, r8, lsl #28
    178c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1790:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1794:	00b8de04 	adcseq	sp, r8, r4, lsl #28
    1798:	00b90e08 	adcseq	r0, r9, r8, lsl #28
    179c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17a0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17a4:	00b90e04 	adcseq	r0, r9, r4, lsl #28
    17a8:	00b95608 	adcseq	r5, r9, r8, lsl #12
    17ac:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17b0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17b4:	00b95604 	adcseq	r5, r9, r4, lsl #12
    17b8:	00b9c208 	adcseq	ip, r9, r8, lsl #4
    17bc:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17c0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17c4:	00b9e204 	adcseq	lr, r9, r4, lsl #4
    17c8:	00ba5c08 	adcseq	r5, sl, r8, lsl #24
    17cc:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17d0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17d4:	00ba5c04 	adcseq	r5, sl, r4, lsl #24
    17d8:	00ba9808 	adcseq	r9, sl, r8, lsl #16
    17dc:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17e0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17e4:	00ba9804 	adcseq	r9, sl, r4, lsl #16
    17e8:	00bb7008 	adcseq	r7, fp, r8
    17ec:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17f0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17f4:	00c18004 	sbceq	r8, r1, r4
    17f8:	00c19008 	sbceq	r9, r1, r8
    17fc:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1800:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1804:	00c19404 	sbceq	r9, r1, r4, lsl #8
    1808:	00c19c08 	sbceq	r9, r1, r8, lsl #24
    180c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1810:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1814:	00c20204 	sbceq	r0, r2, r4, lsl #4
    1818:	00c21408 	sbceq	r1, r2, r8, lsl #8
    181c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1820:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1824:	00c21404 	sbceq	r1, r2, r4, lsl #8
    1828:	00c27408 	sbceq	r7, r2, r8, lsl #8
    182c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1830:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1834:	00c30004 	sbceq	r0, r3, r4
    1838:	00c31408 	sbceq	r1, r3, r8, lsl #8
    183c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1840:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1844:	00c34804 	sbceq	r4, r3, r4, lsl #16
    1848:	00c38008 	sbceq	r8, r3, r8
    184c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1850:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1854:	00c38c04 	sbceq	r8, r3, r4, lsl #24
    1858:	00c3d808 	sbceq	sp, r3, r8, lsl #16
    185c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1860:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1864:	00000004 	andeq	r0, r0, r4
    1868:	00000000 	andeq	r0, r0, r0
    186c:	00b89800 	adcseq	r9, r8, r0, lsl #16
    1870:	00b8ba08 	adcseq	fp, r8, r8, lsl #20
    1874:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1878:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    187c:	00b8ba04 	adcseq	fp, r8, r4, lsl #20
    1880:	00b8fe08 	adcseq	pc, r8, r8, lsl #28
    1884:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1888:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    188c:	00b92804 	adcseq	r2, r9, r4, lsl #16
    1890:	00b9de08 	adcseq	sp, r9, r8, lsl #28
    1894:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1898:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    189c:	00ba4a04 	adcseq	r4, sl, r4, lsl #20
    18a0:	00bab808 	adcseq	fp, sl, r8, lsl #16
    18a4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18a8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18ac:	00bac404 	adcseq	ip, sl, r4, lsl #8
    18b0:	00bace08 	adcseq	ip, sl, r8, lsl #28
    18b4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18b8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18bc:	00c18004 	sbceq	r8, r1, r4
    18c0:	00c19008 	sbceq	r9, r1, r8
    18c4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18c8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18cc:	00c19404 	sbceq	r9, r1, r4, lsl #8
    18d0:	00c19c08 	sbceq	r9, r1, r8, lsl #24
    18d4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18d8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18dc:	00c20204 	sbceq	r0, r2, r4, lsl #4
    18e0:	00c24808 	sbceq	r4, r2, r8, lsl #16
    18e4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18e8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18ec:	00c24804 	sbceq	r4, r2, r4, lsl #16
    18f0:	00c24a08 	sbceq	r4, r2, r8, lsl #20
    18f4:	5b000608 	blpl	311c <_Min_Stack_Size+0x2d1c>
    18f8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18fc:	00c30004 	sbceq	r0, r3, r4
    1900:	00c31408 	sbceq	r1, r3, r8, lsl #8
    1904:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1908:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    190c:	00c36404 	sbceq	r6, r3, r4, lsl #8
    1910:	00c37808 	sbceq	r7, r3, r8, lsl #16
    1914:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1918:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    191c:	00000004 	andeq	r0, r0, r4
    1920:	00000000 	andeq	r0, r0, r0
    1924:	00bc2600 	adcseq	r2, ip, r0, lsl #12
    1928:	00bcac08 	adcseq	sl, ip, r8, lsl #24
    192c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1930:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    1934:	00bce204 	adcseq	lr, ip, r4, lsl #4
    1938:	00bce508 	adcseq	lr, ip, r8, lsl #10
    193c:	50000608 	andpl	r0, r0, r8, lsl #12
    1940:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1944:	00bce504 	adcseq	lr, ip, r4, lsl #10
    1948:	00be3008 	adcseq	r3, lr, r8
    194c:	91000208 	tstls	r0, r8, lsl #4
    1950:	00000040 	andeq	r0, r0, r0, asr #32
    1954:	00000000 	andeq	r0, r0, r0
    1958:	00bb9c00 	adcseq	r9, fp, r0, lsl #24
    195c:	00bbba08 	adcseq	fp, fp, r8, lsl #20
    1960:	50000608 	andpl	r0, r0, r8, lsl #12
    1964:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1968:	00bbba04 	adcseq	fp, fp, r4, lsl #20
    196c:	00bd0408 	adcseq	r0, sp, r8, lsl #8
    1970:	58000608 	stmdapl	r0, {r3, r9, sl}
    1974:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    1978:	00bd0404 	adcseq	r0, sp, r4, lsl #8
    197c:	00be3008 	adcseq	r3, lr, r8
    1980:	91000308 	tstls	r0, r8, lsl #6
    1984:	00007f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    1988:	00000000 	andeq	r0, r0, r0
    198c:	bc120000 	ldclt	0, cr0, [r2], {-0}
    1990:	bd140800 	ldclt	8, cr0, [r4, #-0]
    1994:	00060800 	andeq	r0, r6, r0, lsl #16
    1998:	57049356 	smlsdpl	r4, r6, r3, r9
    199c:	00000493 	muleq	r0, r3, r4
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	bbba0000 	bllt	fee819ac <_estack+0xdee519ac>
    19a8:	bbc50800 	bllt	ff1439b0 <_estack+0xdf1139b0>
    19ac:	00060800 	andeq	r0, r6, r0, lsl #16
    19b0:	53049352 	movwpl	r9, #17234	; 0x4352
    19b4:	bce20493 	cfstrdlt	mvd0, [r2], #588	; 0x24c
    19b8:	bce50800 	stcllt	8, cr0, [r5]
    19bc:	00170800 	andseq	r0, r7, r0, lsl #16
    19c0:	f42500f5 	vld4.<illegal width 64>	{d0-d3}, [r5 :256], r5
    19c4:	00000825 	andeq	r0, r0, r5, lsr #16
    19c8:	00000000 	andeq	r0, r0, r0
    19cc:	91224008 	teqls	r2, r8
    19d0:	08f67fb0 	ldmeq	r6!, {r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
    19d4:	e59f2225 	ldr	r2, [pc, #549]	; 1c01 <_Min_Stack_Size+0x1801>
    19d8:	f20800bc 	vqadd.s8	d0, d24, d28
    19dc:	190800bc 	stmdbne	r8, {r2, r3, r4, r5, r7}
    19e0:	f6409100 			; <UNDEFINED> instruction: 0xf6409100
    19e4:	25f42508 	ldrbcs	r2, [r4, #1288]!	; 0x508
    19e8:	00000008 	andeq	r0, r0, r8
    19ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    19f0:	b0912240 	addslt	r2, r1, r0, asr #4
    19f4:	2508f67f 	strcs	pc, [r8, #-1663]	; 0x67f
    19f8:	bcf29f22 	ldcllt	15, cr9, [r2], #136	; 0x88
    19fc:	bcfa0800 	ldcllt	8, cr0, [sl]
    1a00:	00060800 	andeq	r0, r6, r0, lsl #16
    1a04:	51049350 	tstpl	r4, r0, asr r3
    1a08:	00000493 	muleq	r0, r3, r4
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	bcf20000 	ldcllt	0, cr0, [r2]
    1a14:	bcfa0800 	ldcllt	8, cr0, [sl]
    1a18:	001d0800 	andseq	r0, sp, r0, lsl #16
    1a1c:	f67fb091 			; <UNDEFINED> instruction: 0xf67fb091
    1a20:	00f52508 	rscseq	r2, r5, r8, lsl #10
    1a24:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	40080000 	andmi	r0, r8, r0
    1a30:	f640911c 			; <UNDEFINED> instruction: 0xf640911c
    1a34:	1c1c2508 	cfldr32ne	mvfx2, [ip], {8}
    1a38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	00bb5000 	adcseq	r5, fp, r0
    1a44:	00bb5c08 	adcseq	r5, fp, r8, lsl #24
    1a48:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1a4c:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1a50:	00000004 	andeq	r0, r0, r4
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	00bbba00 	adcseq	fp, fp, r0, lsl #20
    1a5c:	00bbc508 	adcseq	ip, fp, r8, lsl #10
    1a60:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1a64:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1a68:	00000004 	andeq	r0, r0, r4
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	00bcf000 	adcseq	pc, ip, r0
    1a74:	00bcfa08 	adcseq	pc, ip, r8, lsl #20
    1a78:	50000608 	andpl	r0, r0, r8, lsl #12
    1a7c:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1a80:	00000004 	andeq	r0, r0, r4
    1a84:	00000000 	andeq	r0, r0, r0
    1a88:	00bd5e00 	adcseq	r5, sp, r0, lsl #28
    1a8c:	00bd6b08 	adcseq	r6, sp, r8, lsl #22
    1a90:	50000608 	andpl	r0, r0, r8, lsl #12
    1a94:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1a98:	00000004 	andeq	r0, r0, r4
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	00be0000 	adcseq	r0, lr, r0
    1aa4:	00be0b08 	adcseq	r0, lr, r8, lsl #22
    1aa8:	50000608 	andpl	r0, r0, r8, lsl #12
    1aac:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1ab0:	00000004 	andeq	r0, r0, r4
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	00bebc00 	adcseq	fp, lr, r0, lsl #24
    1abc:	00bf1408 	adcseq	r1, pc, r8, lsl #8
    1ac0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ac4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ac8:	00bf6204 	adcseq	r6, pc, r4, lsl #4
    1acc:	00bf6408 	adcseq	r6, pc, r8, lsl #8
    1ad0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ad4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ad8:	00c19c04 	sbceq	r9, r1, r4, lsl #24
    1adc:	00c1ba08 	sbceq	fp, r1, r8, lsl #20
    1ae0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ae4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ae8:	00c1ba04 	sbceq	fp, r1, r4, lsl #20
    1aec:	00c1c508 	sbceq	ip, r1, r8, lsl #10
    1af0:	50000608 	andpl	r0, r0, r8, lsl #12
    1af4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1af8:	00c1c504 	sbceq	ip, r1, r4, lsl #10
    1afc:	00c1f208 	sbceq	pc, r1, r8, lsl #4
    1b00:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b04:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b08:	00c31404 	sbceq	r1, r3, r4, lsl #8
    1b0c:	00c32e08 	sbceq	r2, r3, r8, lsl #28
    1b10:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b14:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b18:	00c33404 	sbceq	r3, r3, r4, lsl #8
    1b1c:	00c34808 	sbceq	r4, r3, r8, lsl #16
    1b20:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b24:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b28:	00000004 	andeq	r0, r0, r4
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	00bf3c00 	adcseq	r3, pc, r0, lsl #24
    1b34:	00bf4d08 	adcseq	r4, pc, r8, lsl #26
    1b38:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1b3c:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1b40:	00000004 	andeq	r0, r0, r4
    1b44:	00000000 	andeq	r0, r0, r0
    1b48:	00bf6e00 	adcseq	r6, pc, r0, lsl #28
    1b4c:	00bfcc08 	adcseq	ip, pc, r8, lsl #24
    1b50:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b54:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b58:	00000004 	andeq	r0, r0, r4
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	00c2de00 	sbceq	sp, r2, r0, lsl #28
    1b64:	00c2e908 	sbceq	lr, r2, r8, lsl #18
    1b68:	50000608 	andpl	r0, r0, r8, lsl #12
    1b6c:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1b70:	00000004 	andeq	r0, r0, r4
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	00c3d800 	sbceq	sp, r3, r0, lsl #16
    1b7c:	00c40608 	sbceq	r0, r4, r8, lsl #12
    1b80:	50000608 	andpl	r0, r0, r8, lsl #12
    1b84:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1b88:	00c40604 	sbceq	r0, r4, r4, lsl #12
    1b8c:	00c4e808 	sbceq	lr, r4, r8, lsl #16
    1b90:	f3000608 	vmax.u8	d0, d0, d8
    1b94:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1b98:	00c4e89f 	smulleq	lr, r4, pc, r8	; <UNPREDICTABLE>
    1b9c:	00c50408 	sbceq	r0, r5, r8, lsl #8
    1ba0:	50000608 	andpl	r0, r0, r8, lsl #12
    1ba4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1ba8:	00c50404 	sbceq	r0, r5, r4, lsl #8
    1bac:	00c52208 	sbceq	r2, r5, r8, lsl #4
    1bb0:	f3000608 	vmax.u8	d0, d0, d8
    1bb4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bb8:	00c5229f 	smulleq	r2, r5, pc, r2	; <UNPREDICTABLE>
    1bbc:	00c52908 	sbceq	r2, r5, r8, lsl #18
    1bc0:	50000608 	andpl	r0, r0, r8, lsl #12
    1bc4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1bc8:	00c52904 	sbceq	r2, r5, r4, lsl #18
    1bcc:	00c53608 	sbceq	r3, r5, r8, lsl #12
    1bd0:	f3000608 	vmax.u8	d0, d0, d8
    1bd4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bd8:	00c5369f 	smulleq	r3, r5, pc, r6	; <UNPREDICTABLE>
    1bdc:	00c53e08 	sbceq	r3, r5, r8, lsl #28
    1be0:	50000608 	andpl	r0, r0, r8, lsl #12
    1be4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1be8:	00c53e04 	sbceq	r3, r5, r4, lsl #28
    1bec:	00c54208 	sbceq	r4, r5, r8, lsl #4
    1bf0:	f3000608 	vmax.u8	d0, d0, d8
    1bf4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bf8:	00c5429f 	smulleq	r4, r5, pc, r2	; <UNPREDICTABLE>
    1bfc:	00c54908 	sbceq	r4, r5, r8, lsl #18
    1c00:	50000608 	andpl	r0, r0, r8, lsl #12
    1c04:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1c08:	00c54904 	sbceq	r4, r5, r4, lsl #18
    1c0c:	00c55608 	sbceq	r5, r5, r8, lsl #12
    1c10:	f3000608 	vmax.u8	d0, d0, d8
    1c14:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1c18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	00c4b600 	sbceq	fp, r4, r0, lsl #12
    1c24:	00c4c608 	sbceq	ip, r4, r8, lsl #12
    1c28:	9e000a08 	vmlals.f32	s0, s0, s16
    1c2c:	00000008 	andeq	r0, r0, r8
    1c30:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    1c34:	0000003f 	andeq	r0, r0, pc, lsr r0
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	00c42e00 	sbceq	r2, r4, r0, lsl #28
    1c40:	00c43608 	sbceq	r3, r4, r8, lsl #12
    1c44:	40000408 	andmi	r0, r0, r8, lsl #8
    1c48:	369f2441 	ldrcc	r2, [pc], r1, asr #8
    1c4c:	600800c4 	andvs	r0, r8, r4, asr #1
    1c50:	010800c4 	smlabteq	r8, r4, r0, r0
    1c54:	c4625100 	strbtgt	r5, [r2], #-256	; 0x100
    1c58:	c47c0800 	ldrbtgt	r0, [ip], #-2048	; 0x800
    1c5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c60:	00c48451 	sbceq	r8, r4, r1, asr r4
    1c64:	00c4e208 	sbceq	lr, r4, r8, lsl #4
    1c68:	51000108 	tstpl	r0, r8, lsl #2
	...
    1c74:	0800c462 	stmdaeq	r0, {r1, r5, r6, sl, lr, pc}
    1c78:	0800c476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, lr, pc}
    1c7c:	8c550001 	mrrchi	0, 0, r0, r5, cr1
    1c80:	b20800c4 	andlt	r0, r8, #196	; 0xc4
    1c84:	010800c4 	smlabteq	r8, r4, r0, r0
    1c88:	00005500 	andeq	r5, r0, r0, lsl #10
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	c42e0000 	strtgt	r0, [lr], #-0
    1c94:	c4620800 	strbtgt	r0, [r2], #-2048	; 0x800
    1c98:	00020800 	andeq	r0, r2, r0, lsl #16
    1c9c:	c4629f30 	strbtgt	r9, [r2], #-3888	; 0xf30
    1ca0:	c4e80800 	strbtgt	r0, [r8], #2048	; 0x800
    1ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca8:	00000058 	andeq	r0, r0, r8, asr r0
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	00c40600 	sbceq	r0, r4, r0, lsl #12
    1cb4:	00c41c08 	sbceq	r1, r4, r8, lsl #24
    1cb8:	52000108 	andpl	r0, r0, #8, 2
    1cbc:	0800c420 	stmdaeq	r0, {r5, sl, lr, pc}
    1cc0:	0800c44e 	stmdaeq	r0, {r1, r2, r3, r6, sl, lr, pc}
    1cc4:	52520001 	subspl	r0, r2, #1
    1cc8:	d80800c4 	stmdale	r8, {r2, r6, r7}
    1ccc:	010800c4 	smlabteq	r8, r4, r0, r0
    1cd0:	c4d85200 	ldrbgt	r5, [r8], #512	; 0x200
    1cd4:	c4e80800 	strbtgt	r0, [r8], #2048	; 0x800
    1cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cdc:	00c4f456 	sbceq	pc, r4, r6, asr r4	; <UNPREDICTABLE>
    1ce0:	00c4fe08 	sbceq	pc, r4, r8, lsl #28
    1ce4:	52000108 	andpl	r0, r0, #8, 2
    1ce8:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
    1cec:	0800c522 	stmdaeq	r0, {r1, r5, r8, sl, lr, pc}
    1cf0:	00520001 	subseq	r0, r2, r1
    1cf4:	00000000 	andeq	r0, r0, r0
    1cf8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1cfc:	620800c4 	andvs	r0, r8, #196	; 0xc4
    1d00:	020800c4 	andeq	r0, r8, #196	; 0xc4
    1d04:	629f3000 	addsvs	r3, pc, #0
    1d08:	c40800c4 	strgt	r0, [r8], #-196	; 0xc4
    1d0c:	010800c4 	smlabteq	r8, r4, r0, r0
    1d10:	c4c45400 	strbgt	r5, [r4], #1024	; 0x400
    1d14:	c4c60800 	strbgt	r0, [r6], #2048	; 0x800
    1d18:	00060800 	andeq	r0, r6, r0, lsl #16
    1d1c:	00740073 	rsbseq	r0, r4, r3, ror r0
    1d20:	c4c69f22 	strbgt	r9, [r6], #3874	; 0xf22
    1d24:	c4c80800 	strbgt	r0, [r8], #2048	; 0x800
    1d28:	00010800 	andeq	r0, r1, r0, lsl #16
    1d2c:	00000054 	andeq	r0, r0, r4, asr r0
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	00c40600 	sbceq	r0, r4, r0, lsl #12
    1d38:	00c41008 	sbceq	r1, r4, r8
    1d3c:	53000108 	movwpl	r0, #264	; 0x108
    1d40:	0800c418 	stmdaeq	r0, {r3, r4, sl, lr, pc}
    1d44:	0800c42a 	stmdaeq	r0, {r1, r3, r5, sl, lr, pc}
    1d48:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    1d4c:	440800c4 	strmi	r0, [r8], #-196	; 0xc4
    1d50:	010800c4 	smlabteq	r8, r4, r0, r0
    1d54:	c4465300 	strbgt	r5, [r6], #-768	; 0x300
    1d58:	c4b40800 	ldrtgt	r0, [r4], #2048	; 0x800
    1d5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1d60:	00c4d853 	sbceq	sp, r4, r3, asr r8
    1d64:	00c4de08 	sbceq	sp, r4, r8, lsl #28
    1d68:	53000108 	movwpl	r0, #264	; 0x108
    1d6c:	0800c4de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, lr, pc}
    1d70:	0800c4e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr, pc}
    1d74:	00770008 	rsbseq	r0, r7, r8
    1d78:	00732444 	rsbseq	r2, r3, r4, asr #8
    1d7c:	c4f29f22 	ldrbtgt	r9, [r2], #3874	; 0xf22
    1d80:	c4f80800 	ldrbtgt	r0, [r8], #2048	; 0x800
    1d84:	00020800 	andeq	r0, r2, r0, lsl #16
    1d88:	c4f89f30 	ldrbtgt	r9, [r8], #3888	; 0xf30
    1d8c:	c51c0800 	ldrgt	r0, [ip, #-2048]	; 0x800
    1d90:	00010800 	andeq	r0, r1, r0, lsl #16
    1d94:	00c51e53 	sbceq	r1, r5, r3, asr lr
    1d98:	00c52208 	sbceq	r2, r5, r8, lsl #4
    1d9c:	53000108 	movwpl	r0, #264	; 0x108
    1da0:	0800c53a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, lr, pc}
    1da4:	0800c542 	stmdaeq	r0, {r1, r6, r8, sl, lr, pc}
    1da8:	00530001 	subseq	r0, r3, r1
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1db4:	360800c4 	strcc	r0, [r8], -r4, asr #1
    1db8:	020800c4 	andeq	r0, r8, #196	; 0xc4
    1dbc:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    1dc0:	560800c4 	strpl	r0, [r8], -r4, asr #1
    1dc4:	060800c4 	streq	r0, [r8], -r4, asr #1
    1dc8:	71007500 	tstvc	r0, r0, lsl #10
    1dcc:	649f2200 	ldrvs	r2, [pc], #512	; 1dd4 <_Min_Stack_Size+0x19d4>
    1dd0:	740800c4 	strvc	r0, [r8], #-196	; 0xc4
    1dd4:	010800c4 	smlabteq	r8, r4, r0, r0
    1dd8:	00005900 	andeq	r5, r0, r0, lsl #18
    1ddc:	00000000 	andeq	r0, r0, r0
    1de0:	c42e0000 	strtgt	r0, [lr], #-0
    1de4:	c4360800 	ldrtgt	r0, [r6], #-2048	; 0x800
    1de8:	00020800 	andeq	r0, r2, r0, lsl #16
    1dec:	c4369f30 	ldrtgt	r9, [r6], #-3888	; 0xf30
    1df0:	c4be0800 	ldrtgt	r0, [lr], #2048	; 0x800
    1df4:	00010800 	andeq	r0, r1, r0, lsl #16
    1df8:	00c4c85c 	sbceq	ip, r4, ip, asr r8
    1dfc:	00c4e808 	sbceq	lr, r4, r8, lsl #16
    1e00:	5c000108 	stfpls	f0, [r0], {8}
	...
    1e0c:	0800c406 	stmdaeq	r0, {r1, r2, sl, lr, pc}
    1e10:	0800c4e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr, pc}
    1e14:	f2570001 	vhadd.s16	d16, d7, d1
    1e18:	f40800c4 	vst4.<illegal width 64>	{d0-d3}, [r8], r4
    1e1c:	020800c4 	andeq	r0, r8, #196	; 0xc4
    1e20:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    1e24:	fe0800c4 	cdp2	0, 0, cr0, cr8, cr4, {6}
    1e28:	010800c4 	smlabteq	r8, r4, r0, r0
    1e2c:	c51e5700 	ldrgt	r5, [lr, #-1792]	; 0x700
    1e30:	c5220800 	strgt	r0, [r2, #-2048]!	; 0x800
    1e34:	00010800 	andeq	r0, r1, r0, lsl #16
    1e38:	00000057 	andeq	r0, r0, r7, asr r0
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	00c43800 	sbceq	r3, r4, r0, lsl #16
    1e44:	00c46208 	sbceq	r6, r4, r8, lsl #4
    1e48:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1e4c:	0800c472 	stmdaeq	r0, {r1, r4, r5, r6, sl, lr, pc}
    1e50:	0800c474 	stmdaeq	r0, {r2, r4, r5, r6, sl, lr, pc}
    1e54:	00590001 	subseq	r0, r9, r1
    1e58:	00000000 	andeq	r0, r0, r0
    1e5c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    1e60:	040800c4 	streq	r0, [r8], #-196	; 0xc4
    1e64:	020800c5 	andeq	r0, r8, #197	; 0xc5
    1e68:	049f3000 	ldreq	r3, [pc], #0	; 1e70 <_Min_Stack_Size+0x1a70>
    1e6c:	160800c5 	strne	r0, [r8], -r5, asr #1
    1e70:	010800c5 	smlabteq	r8, r5, r0, r0
    1e74:	c53a5100 	ldrgt	r5, [sl, #-256]!	; 0x100
    1e78:	c5420800 	strbgt	r0, [r2, #-2048]	; 0x800
    1e7c:	00020800 	andeq	r0, r2, r0, lsl #16
    1e80:	00009f30 	andeq	r9, r0, r0, lsr pc
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	c3fa0000 	mvnsgt	r0, #0
    1e8c:	c40c0800 	strgt	r0, [ip], #-2048	; 0x800
    1e90:	00060800 	andeq	r0, r6, r0, lsl #16
    1e94:	51049350 	tstpl	r4, r0, asr r3
    1e98:	c4e80493 	strbtgt	r0, [r8], #1171	; 0x493
    1e9c:	c5020800 	strgt	r0, [r2, #-2048]	; 0x800
    1ea0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ea4:	51049350 	tstpl	r4, r0, asr r3
    1ea8:	c5220493 	strgt	r0, [r2, #-1171]!	; 0x493
    1eac:	c5290800 	strgt	r0, [r9, #-2048]!	; 0x800
    1eb0:	00060800 	andeq	r0, r6, r0, lsl #16
    1eb4:	51049350 	tstpl	r4, r0, asr r3
    1eb8:	c5360493 	ldrgt	r0, [r6, #-1171]!	; 0x493
    1ebc:	c5360800 	ldrgt	r0, [r6, #-2048]!	; 0x800
    1ec0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ec4:	51049350 	tstpl	r4, r0, asr r3
    1ec8:	c5420493 	strbgt	r0, [r2, #-1171]	; 0x493
    1ecc:	c5490800 	strbgt	r0, [r9, #-2048]	; 0x800
    1ed0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ed4:	51049350 	tstpl	r4, r0, asr r3
    1ed8:	00000493 	muleq	r0, r3, r4
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	c5580000 	ldrbgt	r0, [r8, #-0]
    1ee4:	c5600800 	strbgt	r0, [r0, #-2048]!	; 0x800
    1ee8:	00060800 	andeq	r0, r6, r0, lsl #16
    1eec:	51049350 	tstpl	r4, r0, asr r3
    1ef0:	c5600493 	strbgt	r0, [r0, #-1171]!	; 0x493
    1ef4:	c5640800 	strbgt	r0, [r4, #-2048]!	; 0x800
    1ef8:	00060800 	andeq	r0, r6, r0, lsl #16
    1efc:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    1f00:	00009f25 	andeq	r9, r0, r5, lsr #30
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	c5580000 	ldrbgt	r0, [r8, #-0]
    1f0c:	c55c0800 	ldrbgt	r0, [ip, #-2048]	; 0x800
    1f10:	00010800 	andeq	r0, r1, r0, lsl #16
    1f14:	00000051 	andeq	r0, r0, r1, asr r0
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	00c56400 	sbceq	r6, r5, r0, lsl #8
    1f20:	00c56c08 	sbceq	r6, r5, r8, lsl #24
    1f24:	50000608 	andpl	r0, r0, r8, lsl #12
    1f28:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1f2c:	00c56c04 	sbceq	r6, r5, r4, lsl #24
    1f30:	00c56e08 	sbceq	r6, r5, r8, lsl #28
    1f34:	f3000608 	vmax.u8	d0, d0, d8
    1f38:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1f3c:	00c56e9f 	smulleq	r6, r5, pc, lr	; <UNPREDICTABLE>
    1f40:	00c58c08 	sbceq	r8, r5, r8, lsl #24
    1f44:	50000608 	andpl	r0, r0, r8, lsl #12
    1f48:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1f4c:	00c58c04 	sbceq	r8, r5, r4, lsl #24
    1f50:	00c5b408 	sbceq	fp, r5, r8, lsl #8
    1f54:	f3000608 	vmax.u8	d0, d0, d8
    1f58:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	00c56400 	sbceq	r6, r5, r0, lsl #8
    1f68:	00c56c08 	sbceq	r6, r5, r8, lsl #24
    1f6c:	51000108 	tstpl	r0, r8, lsl #2
    1f70:	0800c56e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, lr, pc}
    1f74:	0800c58c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr, pc}
    1f78:	00510001 	subseq	r0, r1, r1
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	64000000 	strvs	r0, [r0], #-0
    1f84:	6c0800c5 	stcvs	0, cr0, [r8], {197}	; 0xc5
    1f88:	010800c5 	smlabteq	r8, r5, r0, r0
    1f8c:	c56e5000 	strbgt	r5, [lr, #-0]!
    1f90:	c58c0800 	strgt	r0, [ip, #2048]	; 0x800
    1f94:	00010800 	andeq	r0, r1, r0, lsl #16
    1f98:	00000050 	andeq	r0, r0, r0, asr r0
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	00c5b400 	sbceq	fp, r5, r0, lsl #8
    1fa4:	00c5b608 	sbceq	fp, r5, r8, lsl #12
    1fa8:	50000108 	andpl	r0, r0, r8, lsl #2
    1fac:	0800c5b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, lr, pc}
    1fb0:	0800c5b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr, pc}
    1fb4:	01f30004 	mvnseq	r0, r4
    1fb8:	00009f50 	andeq	r9, r0, r0, asr pc
    1fbc:	00000000 	andeq	r0, r0, r0
    1fc0:	c5b80000 	ldrgt	r0, [r8, #0]!
    1fc4:	c5bc0800 	ldrgt	r0, [ip, #2048]!	; 0x800
    1fc8:	00010800 	andeq	r0, r1, r0, lsl #16
    1fcc:	00c5bc50 	sbceq	fp, r5, r0, asr ip
    1fd0:	00c5c208 	sbceq	ip, r5, r8, lsl #4
    1fd4:	f3000408 	vshl.u8	d0, d8, d0
    1fd8:	009f5001 	addseq	r5, pc, r1
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	c4000000 	strgt	r0, [r0], #-0
    1fe4:	f60800c5 			; <UNDEFINED> instruction: 0xf60800c5
    1fe8:	060800c5 	streq	r0, [r8], -r5, asr #1
    1fec:	04935000 	ldreq	r5, [r3], #0
    1ff0:	f6049351 			; <UNDEFINED> instruction: 0xf6049351
    1ff4:	360800c5 	strcc	r0, [r8], -r5, asr #1
    1ff8:	060800c6 	streq	r0, [r8], -r6, asr #1
    1ffc:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2000:	549f2500 	ldrpl	r2, [pc], #1280	; 2008 <_Min_Stack_Size+0x1c08>
    2004:	5e0800c6 	cdppl	0, 0, cr0, cr8, cr6, {6}
    2008:	060800c6 	streq	r0, [r8], -r6, asr #1
    200c:	04935000 	ldreq	r5, [r3], #0
    2010:	5e049351 	mcrpl	3, 0, r9, cr4, cr1, {2}
    2014:	620800c6 	andvs	r0, r8, #198	; 0xc6
    2018:	060800c6 	streq	r0, [r8], -r6, asr #1
    201c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2020:	689f2500 	ldmvs	pc, {r8, sl, sp}	; <UNPREDICTABLE>
    2024:	9e0800c6 	cdpls	0, 0, cr0, cr8, cr6, {6}
    2028:	060800c6 	streq	r0, [r8], -r6, asr #1
    202c:	04935000 	ldreq	r5, [r3], #0
    2030:	9e049351 	mcrls	3, 0, r9, cr4, cr1, {2}
    2034:	bc0800c6 	stclt	0, cr0, [r8], {198}	; 0xc6
    2038:	060800c6 	streq	r0, [r8], -r6, asr #1
    203c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2040:	bc9f2500 	cfldr32lt	mvfx2, [pc], {0}
    2044:	c30800c6 	movwgt	r0, #32966	; 0x80c6
    2048:	060800c6 	streq	r0, [r8], -r6, asr #1
    204c:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2050:	de049353 	mcrle	3, 0, r9, cr4, cr3, {2}
    2054:	e10800c6 	smlabt	r8, r6, r0, r0
    2058:	060800c6 	streq	r0, [r8], -r6, asr #1
    205c:	04935000 	ldreq	r5, [r3], #0
    2060:	e1049351 	tst	r4, r1, asr r3
    2064:	e40800c6 	str	r0, [r8], #-198	; 0xc6
    2068:	060800c6 	streq	r0, [r8], -r6, asr #1
    206c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2070:	009f2500 	addseq	r2, pc, r0, lsl #10
    2074:	00000000 	andeq	r0, r0, r0
    2078:	dc000000 	stcle	0, cr0, [r0], {-0}
    207c:	200800c5 	andcs	r0, r8, r5, asr #1
    2080:	010800c6 	smlabteq	r8, r6, r0, r0
    2084:	c6205500 	strtgt	r5, [r0], -r0, lsl #10
    2088:	c6540800 	ldrbgt	r0, [r4], -r0, lsl #16
    208c:	00010800 	andeq	r0, r1, r0, lsl #16
    2090:	00c65459 	sbceq	r5, r6, r9, asr r4
    2094:	00c66208 	sbceq	r6, r6, r8, lsl #4
    2098:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    209c:	0800c668 	stmdaeq	r0, {r3, r5, r6, r9, sl, lr, pc}
    20a0:	0800c69c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, lr, pc}
    20a4:	de550001 	cdple	0, 5, cr0, cr5, cr1, {0}
    20a8:	e40800c6 	str	r0, [r8], #-198	; 0xc6
    20ac:	010800c6 	smlabteq	r8, r6, r0, r0
    20b0:	00005500 	andeq	r5, r0, r0, lsl #10
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	c5e20000 	strbgt	r0, [r2, #0]!
    20bc:	c62c0800 	strtgt	r0, [ip], -r0, lsl #16
    20c0:	00010800 	andeq	r0, r1, r0, lsl #16
    20c4:	00c62c58 	sbceq	r2, r6, r8, asr ip
    20c8:	00c65408 	sbceq	r5, r6, r8, lsl #8
    20cc:	75000508 	strvc	r0, [r0, #-1288]	; 0x508
    20d0:	9f254f00 	svcls	0x00254f00
    20d4:	0800c654 	stmdaeq	r0, {r2, r4, r6, r9, sl, lr, pc}
    20d8:	0800c6e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr, pc}
    20dc:	00580001 	subseq	r0, r8, r1
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	f2000000 	vhadd.s8	d0, d0, d0
    20e8:	0e0800c5 	cdpeq	0, 0, cr0, cr8, cr5, {6}
    20ec:	010800c6 	smlabteq	r8, r6, r0, r0
    20f0:	c6725100 	ldrbtgt	r5, [r2], -r0, lsl #2
    20f4:	c6840800 	strgt	r0, [r4], r0, lsl #16
    20f8:	00010800 	andeq	r0, r1, r0, lsl #16
    20fc:	00c68451 	sbceq	r8, r6, r1, asr r4
    2100:	00c68808 	sbceq	r8, r6, r8, lsl #16
    2104:	09000808 	stmdbeq	r0, {r3, fp}
    2108:	250077ff 	strcs	r7, [r0, #-2047]	; 0x7ff
    210c:	889f2531 	ldmhi	pc, {r0, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
    2110:	8e0800c6 	cdphi	0, 0, cr0, cr8, cr6, {6}
    2114:	080800c6 	stmdaeq	r8, {r1, r2, r6, r7}
    2118:	76ff0900 	ldrbtvc	r0, [pc], r0, lsl #18
    211c:	2531256c 	ldrcs	r2, [r1, #-1388]!	; 0x56c
    2120:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2124:	00000000 	andeq	r0, r0, r0
    2128:	00c62000 	sbceq	r2, r6, r0
    212c:	00c63d08 	sbceq	r3, r6, r8, lsl #26
    2130:	5c000108 	stfpls	f0, [r0], {8}
    2134:	0800c68c 	stmdaeq	r0, {r2, r3, r7, r9, sl, lr, pc}
    2138:	0800c68e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, lr, pc}
    213c:	9c5c0001 	mrrcls	0, 0, r0, ip, cr1
    2140:	a40800c6 	strge	r0, [r8], #-198	; 0xc6
    2144:	010800c6 	smlabteq	r8, r6, r0, r0
    2148:	c6a45100 	strtgt	r5, [r4], r0, lsl #2
    214c:	c6b80800 	ldrtgt	r0, [r8], r0, lsl #16
    2150:	000c0800 	andeq	r0, ip, r0, lsl #16
    2154:	f0090073 			; <UNDEFINED> instruction: 0xf0090073
    2158:	25f00924 	ldrbcs	r0, [r0, #2340]!	; 0x924
    215c:	9f210072 	svcls	0x00210072
    2160:	0800c6b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, lr, pc}
    2164:	0800c6c3 	stmdaeq	r0, {r0, r1, r6, r7, r9, sl, lr, pc}
    2168:	0075000c 	rsbseq	r0, r5, ip
    216c:	0924f009 	stmdbeq	r4!, {r0, r3, ip, sp, lr, pc}
    2170:	007225f0 	ldrshteq	r2, [r2], #-80	; 0xffffffb0
    2174:	00009f21 	andeq	r9, r0, r1, lsr #30
    2178:	00000000 	andeq	r0, r0, r0
    217c:	c6d40000 	ldrbgt	r0, [r4], r0
    2180:	c6dc0800 	ldrbgt	r0, [ip], r0, lsl #16
    2184:	00060800 	andeq	r0, r6, r0, lsl #16
    2188:	51049350 	tstpl	r4, r0, asr r3
    218c:	00000493 	muleq	r0, r3, r4
    2190:	00000000 	andeq	r0, r0, r0
    2194:	c5dc0000 	ldrbgt	r0, [ip]
    2198:	c5ec0800 	strbgt	r0, [ip, #2048]!	; 0x800
    219c:	00060800 	andeq	r0, r6, r0, lsl #16
    21a0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21a4:	c5f60493 	ldrbgt	r0, [r6, #1171]!	; 0x493
    21a8:	c60a0800 	strgt	r0, [sl], -r0, lsl #16
    21ac:	00060800 	andeq	r0, r6, r0, lsl #16
    21b0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21b4:	c60e0493 			; <UNDEFINED> instruction: 0xc60e0493
    21b8:	c6200800 	strtgt	r0, [r0], -r0, lsl #16
    21bc:	00060800 	andeq	r0, r6, r0, lsl #16
    21c0:	55049352 	strpl	r9, [r4, #-850]	; 0x352
    21c4:	c6200493 			; <UNDEFINED> instruction: 0xc6200493
    21c8:	c6540800 	ldrbgt	r0, [r4], -r0, lsl #16
    21cc:	00060800 	andeq	r0, r6, r0, lsl #16
    21d0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21d4:	c6540493 			; <UNDEFINED> instruction: 0xc6540493
    21d8:	c6600800 	strbtgt	r0, [r0], -r0, lsl #16
    21dc:	00060800 	andeq	r0, r6, r0, lsl #16
    21e0:	51049350 	tstpl	r4, r0, asr r3
    21e4:	c6600493 			; <UNDEFINED> instruction: 0xc6600493
    21e8:	c6680800 	strbtgt	r0, [r8], -r0, lsl #16
    21ec:	00060800 	andeq	r0, r6, r0, lsl #16
    21f0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21f4:	c6680493 			; <UNDEFINED> instruction: 0xc6680493
    21f8:	c6700800 	ldrbtgt	r0, [r0], -r0, lsl #16
    21fc:	00060800 	andeq	r0, r6, r0, lsl #16
    2200:	51049350 	tstpl	r4, r0, asr r3
    2204:	c68e0493 	pkhbtgt	r0, lr, r3, lsl #9
    2208:	c6920800 	ldrgt	r0, [r2], r0, lsl #16
    220c:	00060800 	andeq	r0, r6, r0, lsl #16
    2210:	51049350 	tstpl	r4, r0, asr r3
    2214:	c6960493 			; <UNDEFINED> instruction: 0xc6960493
    2218:	c69e0800 	ldrgt	r0, [lr], r0, lsl #16
    221c:	00060800 	andeq	r0, r6, r0, lsl #16
    2220:	53049350 	movwpl	r9, #17232	; 0x4350
    2224:	c69e0493 			; <UNDEFINED> instruction: 0xc69e0493
    2228:	c6ac0800 	strtgt	r0, [ip], r0, lsl #16
    222c:	00060800 	andeq	r0, r6, r0, lsl #16
    2230:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    2234:	c6de0493 			; <UNDEFINED> instruction: 0xc6de0493
    2238:	c6e10800 	strbtgt	r0, [r1], r0, lsl #16
    223c:	00060800 	andeq	r0, r6, r0, lsl #16
    2240:	51049350 	tstpl	r4, r0, asr r3
    2244:	c6e10493 	usatgt	r0, #1, r3, lsl #9
    2248:	c6e40800 	strbtgt	r0, [r4], r0, lsl #16
    224c:	00060800 	andeq	r0, r6, r0, lsl #16
    2250:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    2254:	00000493 	muleq	r0, r3, r4
    2258:	00000000 	andeq	r0, r0, r0
    225c:	c6360000 	ldrtgt	r0, [r6], -r0
    2260:	c63d0800 	ldrtgt	r0, [sp], -r0, lsl #16
    2264:	00060800 	andeq	r0, r6, r0, lsl #16
    2268:	5704935c 	smlsdpl	r4, ip, r3, r9
    226c:	00000493 	muleq	r0, r3, r4
    2270:	00000000 	andeq	r0, r0, r0
    2274:	c6b80000 	ldrtgt	r0, [r8], r0
    2278:	c6c30800 	strbgt	r0, [r3], r0, lsl #16
    227c:	00060800 	andeq	r0, r6, r0, lsl #16
    2280:	53049352 	movwpl	r9, #17234	; 0x4352
    2284:	00000493 	muleq	r0, r3, r4
    2288:	00000000 	andeq	r0, r0, r0
    228c:	c6e80000 	strbtgt	r0, [r8], r0
    2290:	c70d0800 	strgt	r0, [sp, -r0, lsl #16]
    2294:	00060800 	andeq	r0, r6, r0, lsl #16
    2298:	51049350 	tstpl	r4, r0, asr r3
    229c:	c70d0493 			; <UNDEFINED> instruction: 0xc70d0493
    22a0:	c71c0800 	ldrgt	r0, [ip, -r0, lsl #16]
    22a4:	00060800 	andeq	r0, r6, r0, lsl #16
    22a8:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    22ac:	c71c9f25 	ldrgt	r9, [ip, -r5, lsr #30]
    22b0:	c7720800 	ldrbgt	r0, [r2, -r0, lsl #16]!
    22b4:	00060800 	andeq	r0, r6, r0, lsl #16
    22b8:	57049356 	smlsdpl	r4, r6, r3, r9
    22bc:	c7760493 			; <UNDEFINED> instruction: 0xc7760493
    22c0:	c77a0800 	ldrbgt	r0, [sl, -r0, lsl #16]!
    22c4:	00060800 	andeq	r0, r6, r0, lsl #16
    22c8:	51049350 	tstpl	r4, r0, asr r3
    22cc:	c77a0493 			; <UNDEFINED> instruction: 0xc77a0493
    22d0:	c7ea0800 	strbgt	r0, [sl, r0, lsl #16]!
    22d4:	00060800 	andeq	r0, r6, r0, lsl #16
    22d8:	57049356 	smlsdpl	r4, r6, r3, r9
    22dc:	00000493 	muleq	r0, r3, r4
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	c6e80000 	strbtgt	r0, [r8], r0
    22e8:	c6f80800 	ldrbtgt	r0, [r8], r0, lsl #16
    22ec:	00010800 	andeq	r0, r1, r0, lsl #16
    22f0:	00c6f852 	sbceq	pc, r6, r2, asr r8	; <UNPREDICTABLE>
    22f4:	00c7ea08 	sbceq	lr, r7, r8, lsl #20
    22f8:	58000108 	stmdapl	r0, {r3, r8}
    22fc:	0800c7ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, lr, pc}
    2300:	0800c800 	stmdaeq	r0, {fp, lr, pc}
    2304:	01f30004 	mvnseq	r0, r4
    2308:	00009f52 	andeq	r9, r0, r2, asr pc
    230c:	00000000 	andeq	r0, r0, r0
    2310:	c6f80000 	ldrbtgt	r0, [r8], r0
    2314:	c6fe0800 	ldrbtgt	r0, [lr], r0, lsl #16
    2318:	00010800 	andeq	r0, r1, r0, lsl #16
    231c:	00c6fe53 	sbceq	pc, r6, r3, asr lr	; <UNPREDICTABLE>
    2320:	00c70d08 	sbceq	r0, r7, r8, lsl #26
    2324:	71000908 	tstvc	r0, r8, lsl #18
    2328:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    232c:	9f25f909 	svcls	0x0025f909
    2330:	0800c70d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, lr, pc}
    2334:	0800c71c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, lr, pc}
    2338:	00770009 	rsbseq	r0, r7, r9
    233c:	0924e509 	stmdbeq	r4!, {r0, r3, r8, sl, sp, lr, pc}
    2340:	269f25f9 			; <UNDEFINED> instruction: 0x269f25f9
    2344:	340800c7 	strcc	r0, [r8], #-199	; 0xc7
    2348:	010800c7 	smlabteq	r8, r7, r0, r0
    234c:	c74c5300 	strbgt	r5, [ip, -r0, lsl #6]
    2350:	c7760800 	ldrbgt	r0, [r6, -r0, lsl #16]!
    2354:	00010800 	andeq	r0, r1, r0, lsl #16
    2358:	00c77653 	sbceq	r7, r7, r3, asr r6
    235c:	00c77a08 	sbceq	r7, r7, r8, lsl #20
    2360:	71000908 	tstvc	r0, r8, lsl #18
    2364:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    2368:	9f25f909 	svcls	0x0025f909
    236c:	0800c77a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, lr, pc}
    2370:	0800c784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr, pc}
    2374:	a4530001 	ldrbge	r0, [r3], #-1
    2378:	a80800c7 	stmdage	r8, {r0, r1, r2, r6, r7}
    237c:	010800c7 	smlabteq	r8, r7, r0, r0
    2380:	c7a85300 	strgt	r5, [r8, r0, lsl #6]!
    2384:	c7ab0800 	strgt	r0, [fp, r0, lsl #16]!
    2388:	00090800 	andeq	r0, r9, r0, lsl #16
    238c:	e5090071 	str	r0, [r9, #-113]	; 0x71
    2390:	25f90924 	ldrbcs	r0, [r9, #2340]!	; 0x924
    2394:	00c7ab9f 	smulleq	sl, r7, pc, fp	; <UNPREDICTABLE>
    2398:	00c7b008 	sbceq	fp, r7, r8
    239c:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    23a0:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    23a4:	9f25f909 	svcls	0x0025f909
    23a8:	0800c7b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, lr, pc}
    23ac:	0800c7ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, lr, pc}
    23b0:	36730003 	ldrbtcc	r0, [r3], -r3
    23b4:	00c7ba9f 	smulleq	fp, r7, pc, sl	; <UNPREDICTABLE>
    23b8:	00c7c008 	sbceq	ip, r7, r8
    23bc:	53000108 	movwpl	r0, #264	; 0x108
	...
    23c8:	0800c6f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, lr, pc}
    23cc:	0800c71a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, lr, pc}
    23d0:	26570001 	ldrbcs	r0, [r7], -r1
    23d4:	2c0800c7 	stccs	0, cr0, [r8], {199}	; 0xc7
    23d8:	010800c7 	smlabteq	r8, r7, r0, r0
    23dc:	c72c5100 	strgt	r5, [ip, -r0, lsl #2]!
    23e0:	c7320800 	ldrgt	r0, [r2, -r0, lsl #16]!
    23e4:	00010800 	andeq	r0, r1, r0, lsl #16
    23e8:	00c73252 	sbceq	r3, r7, r2, asr r2
    23ec:	00c75408 	sbceq	r5, r7, r8, lsl #8
    23f0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    23f4:	0800c754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr, pc}
    23f8:	0800c75a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, lr, pc}
    23fc:	5a510001 	bpl	1442408 <_Min_Stack_Size+0x1442008>
    2400:	660800c7 	strvs	r0, [r8], -r7, asr #1
    2404:	010800c7 	smlabteq	r8, r7, r0, r0
    2408:	c7665200 	strbgt	r5, [r6, -r0, lsl #4]!
    240c:	c76e0800 	strbgt	r0, [lr, -r0, lsl #16]!
    2410:	00010800 	andeq	r0, r1, r0, lsl #16
    2414:	00c77657 	sbceq	r7, r7, r7, asr r6
    2418:	00c77a08 	sbceq	r7, r7, r8, lsl #20
    241c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2420:	0800c77a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, lr, pc}
    2424:	0800c788 	stmdaeq	r0, {r3, r7, r8, r9, sl, lr, pc}
    2428:	88520001 	ldmdahi	r2, {r0}^
    242c:	8c0800c7 	stchi	0, cr0, [r8], {199}	; 0xc7
    2430:	010800c7 	smlabteq	r8, r7, r0, r0
    2434:	c78c5700 	strgt	r5, [ip, r0, lsl #14]
    2438:	c7950800 	ldrgt	r0, [r5, r0, lsl #16]
    243c:	00010800 	andeq	r0, r1, r0, lsl #16
    2440:	00c79553 	sbceq	r9, r7, r3, asr r5
    2444:	00c79608 	sbceq	r9, r7, r8, lsl #12
    2448:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    244c:	0800c7a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, lr, pc}
    2450:	0800c7b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, lr, pc}
    2454:	b0570001 	subslt	r0, r7, r1
    2458:	b40800c7 	strlt	r0, [r8], #-199	; 0xc7
    245c:	010800c7 	smlabteq	r8, r7, r0, r0
    2460:	c7b45200 	ldrgt	r5, [r4, r0, lsl #4]!
    2464:	c7be0800 	ldrgt	r0, [lr, r0, lsl #16]!
    2468:	00010800 	andeq	r0, r1, r0, lsl #16
    246c:	00c7d257 	sbceq	sp, r7, r7, asr r2
    2470:	00c7db08 	sbceq	sp, r7, r8, lsl #22
    2474:	53000108 	movwpl	r0, #264	; 0x108
    2478:	0800c7db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, r9, sl, lr, pc}
    247c:	0800c7ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, lr, pc}
    2480:	00570001 	subseq	r0, r7, r1
    2484:	00000000 	andeq	r0, r0, r0
    2488:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    248c:	1a0800c6 	bne	2027ac <_Min_Stack_Size+0x2023ac>
    2490:	010800c7 	smlabteq	r8, r7, r0, r0
    2494:	c74c5600 	strbgt	r5, [ip, -r0, lsl #12]
    2498:	c75e0800 	ldrbgt	r0, [lr, -r0, lsl #16]
    249c:	00010800 	andeq	r0, r1, r0, lsl #16
    24a0:	00c77656 	sbceq	r7, r7, r6, asr r6
    24a4:	00c77a08 	sbceq	r7, r7, r8, lsl #20
    24a8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    24ac:	0800c7a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, lr, pc}
    24b0:	0800c7b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, lr, pc}
    24b4:	00560001 	subseq	r0, r6, r1
	...
    24c0:	0d0800c7 	stceq	0, cr0, [r8, #-796]	; 0xfffffce4
    24c4:	060800c7 	streq	r0, [r8], -r7, asr #1
    24c8:	04935000 	ldreq	r5, [r3], #0
    24cc:	76049351 			; <UNDEFINED> instruction: 0x76049351
    24d0:	760800c7 	strvc	r0, [r8], -r7, asr #1
    24d4:	060800c7 	streq	r0, [r8], -r7, asr #1
    24d8:	04935000 	ldreq	r5, [r3], #0
    24dc:	00049351 	andeq	r9, r4, r1, asr r3
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	72000000 	andvc	r0, r0, #0
    24e8:	760800c7 	strvc	r0, [r8], -r7, asr #1
    24ec:	060800c7 	streq	r0, [r8], -r7, asr #1
    24f0:	04935600 	ldreq	r5, [r3], #1536	; 0x600
    24f4:	00049357 	andeq	r9, r4, r7, asr r3
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2500:	d20800c7 	andle	r0, r8, #199	; 0xc7
    2504:	060800c7 	streq	r0, [r8], -r7, asr #1
    2508:	04935600 	ldreq	r5, [r3], #1536	; 0x600
    250c:	00049357 	andeq	r9, r4, r7, asr r3
	...
    2518:	0a0800c8 	beq	202840 <_Min_Stack_Size+0x202440>
    251c:	060800c8 	streq	r0, [r8], -r8, asr #1
    2520:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2524:	0a049353 	beq	127278 <_Min_Stack_Size+0x126e78>
    2528:	120800c8 	andne	r0, r8, #200	; 0xc8
    252c:	060800c8 	streq	r0, [r8], -r8, asr #1
    2530:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2534:	009f2502 	addseq	r2, pc, r2, lsl #10
	...
    2540:	060800c8 	streq	r0, [r8], -r8, asr #1
    2544:	010800c8 	smlabteq	r8, r8, r0, r0
    2548:	00005300 	andeq	r5, r0, r0, lsl #6
    254c:	00000000 	andeq	r0, r0, r0
    2550:	c80e0000 	stmdagt	lr, {}	; <UNPREDICTABLE>
    2554:	c8100800 	ldmdagt	r0, {fp}
    2558:	00060800 	andeq	r0, r6, r0, lsl #16
    255c:	51049350 	tstpl	r4, r0, asr r3
    2560:	00000493 	muleq	r0, r3, r4
    2564:	00000000 	andeq	r0, r0, r0
	...
