
build/main.elf-main:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b8  080001b0  080001b0  000081b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a90  0800c968  0800c968  00014968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000494  20000000  0800f3f8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ccmram       00000000  10000000  10000000  00018494  2**0
                  CONTENTS
  5 .bss          0000005c  20000494  20000494  00018494  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200004f0  200004f0  00018494  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  00018494  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000e5c3  00000000  00000000  000184c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000031a3  00000000  00000000  00026a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a0  00000000  00000000  00029c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f80  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006556  00000000  00000000  0002bc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005b63  00000000  00000000  000321a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000003f  00000000  00000000  00037d09  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00003074  00000000  00000000  00037d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000256a  00000000  00000000  0003adbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080011e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, ip}
 8000008:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800000c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000010:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000014:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000018:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
	...
 800002c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000030:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800003c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000040:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000044:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000048:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800004c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000050:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000054:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000058:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800005c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000060:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000064:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000068:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800006c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000070:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000074:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000078:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800007c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000080:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000084:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000088:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800008c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000090:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000094:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000098:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800009c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000a0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000a4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000a8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000ac:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000b0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000b4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000b8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000bc:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000c0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000c4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000c8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000cc:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000d0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000d4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000d8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000dc:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000e0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000e4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000e8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000ec:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000f0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000f4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000f8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80000fc:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000100:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000104:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000108:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800010c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000110:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000114:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000118:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800011c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000120:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000124:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000128:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800012c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000130:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000134:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000138:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800013c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000140:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000144:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000148:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800014c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000150:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000154:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000158:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800015c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000160:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000164:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000168:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800016c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000170:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000174:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000178:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800017c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000180:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000184:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000188:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800018c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000190:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000194:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 8000198:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 800019c:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80001a0:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80001a4:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}
 80001a8:	0800122d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip}

Disassembly of section .text:

080001b0 <__aeabi_drsub-0x14>:
 80001b0:	0800f3f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp, lr, pc}
 80001b4:	20000000 	andcs	r0, r0, r0
 80001b8:	20000494 	mulcs	r0, r4, r4
 80001bc:	20000494 	mulcs	r0, r4, r4
 80001c0:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080001c4 <__aeabi_drsub>:
 80001c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__adddf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_dsub>:
 80001cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d0 <__adddf3>:
 80001d0:	b530      	push	{r4, r5, lr}
 80001d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001da:	ea94 0f05 	teq	r4, r5
 80001de:	bf08      	it	eq
 80001e0:	ea90 0f02 	teqeq	r0, r2
 80001e4:	bf1f      	itttt	ne
 80001e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001f6:	f000 80e2 	beq.w	80003be <__adddf3+0x1ee>
 80001fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000202:	bfb8      	it	lt
 8000204:	426d      	neglt	r5, r5
 8000206:	dd0c      	ble.n	8000222 <__adddf3+0x52>
 8000208:	442c      	add	r4, r5
 800020a:	ea80 0202 	eor.w	r2, r0, r2
 800020e:	ea81 0303 	eor.w	r3, r1, r3
 8000212:	ea82 0000 	eor.w	r0, r2, r0
 8000216:	ea83 0101 	eor.w	r1, r3, r1
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	2d36      	cmp	r5, #54	; 0x36
 8000224:	bf88      	it	hi
 8000226:	bd30      	pophi	{r4, r5, pc}
 8000228:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000230:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000234:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x70>
 800023a:	4240      	negs	r0, r0
 800023c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000240:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000244:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000248:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x84>
 800024e:	4252      	negs	r2, r2
 8000250:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000254:	ea94 0f05 	teq	r4, r5
 8000258:	f000 80a7 	beq.w	80003aa <__adddf3+0x1da>
 800025c:	f1a4 0401 	sub.w	r4, r4, #1
 8000260:	f1d5 0e20 	rsbs	lr, r5, #32
 8000264:	db0d      	blt.n	8000282 <__adddf3+0xb2>
 8000266:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026a:	fa22 f205 	lsr.w	r2, r2, r5
 800026e:	1880      	adds	r0, r0, r2
 8000270:	f141 0100 	adc.w	r1, r1, #0
 8000274:	fa03 f20e 	lsl.w	r2, r3, lr
 8000278:	1880      	adds	r0, r0, r2
 800027a:	fa43 f305 	asr.w	r3, r3, r5
 800027e:	4159      	adcs	r1, r3
 8000280:	e00e      	b.n	80002a0 <__adddf3+0xd0>
 8000282:	f1a5 0520 	sub.w	r5, r5, #32
 8000286:	f10e 0e20 	add.w	lr, lr, #32
 800028a:	2a01      	cmp	r2, #1
 800028c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000290:	bf28      	it	cs
 8000292:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a4:	d507      	bpl.n	80002b6 <__adddf3+0xe6>
 80002a6:	f04f 0e00 	mov.w	lr, #0
 80002aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ba:	d31b      	bcc.n	80002f4 <__adddf3+0x124>
 80002bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c0:	d30c      	bcc.n	80002dc <__adddf3+0x10c>
 80002c2:	0849      	lsrs	r1, r1, #1
 80002c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002cc:	f104 0401 	add.w	r4, r4, #1
 80002d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002d8:	f080 809a 	bcs.w	8000410 <__adddf3+0x240>
 80002dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e0:	bf08      	it	eq
 80002e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002e6:	f150 0000 	adcs.w	r0, r0, #0
 80002ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ee:	ea41 0105 	orr.w	r1, r1, r5
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002f8:	4140      	adcs	r0, r0
 80002fa:	eb41 0101 	adc.w	r1, r1, r1
 80002fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000302:	f1a4 0401 	sub.w	r4, r4, #1
 8000306:	d1e9      	bne.n	80002dc <__adddf3+0x10c>
 8000308:	f091 0f00 	teq	r1, #0
 800030c:	bf04      	itt	eq
 800030e:	4601      	moveq	r1, r0
 8000310:	2000      	moveq	r0, #0
 8000312:	fab1 f381 	clz	r3, r1
 8000316:	bf08      	it	eq
 8000318:	3320      	addeq	r3, #32
 800031a:	f1a3 030b 	sub.w	r3, r3, #11
 800031e:	f1b3 0220 	subs.w	r2, r3, #32
 8000322:	da0c      	bge.n	800033e <__adddf3+0x16e>
 8000324:	320c      	adds	r2, #12
 8000326:	dd08      	ble.n	800033a <__adddf3+0x16a>
 8000328:	f102 0c14 	add.w	ip, r2, #20
 800032c:	f1c2 020c 	rsb	r2, r2, #12
 8000330:	fa01 f00c 	lsl.w	r0, r1, ip
 8000334:	fa21 f102 	lsr.w	r1, r1, r2
 8000338:	e00c      	b.n	8000354 <__adddf3+0x184>
 800033a:	f102 0214 	add.w	r2, r2, #20
 800033e:	bfd8      	it	le
 8000340:	f1c2 0c20 	rsble	ip, r2, #32
 8000344:	fa01 f102 	lsl.w	r1, r1, r2
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	bfdc      	itt	le
 800034e:	ea41 010c 	orrle.w	r1, r1, ip
 8000352:	4090      	lslle	r0, r2
 8000354:	1ae4      	subs	r4, r4, r3
 8000356:	bfa2      	ittt	ge
 8000358:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800035c:	4329      	orrge	r1, r5
 800035e:	bd30      	popge	{r4, r5, pc}
 8000360:	ea6f 0404 	mvn.w	r4, r4
 8000364:	3c1f      	subs	r4, #31
 8000366:	da1c      	bge.n	80003a2 <__adddf3+0x1d2>
 8000368:	340c      	adds	r4, #12
 800036a:	dc0e      	bgt.n	800038a <__adddf3+0x1ba>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0220 	rsb	r2, r4, #32
 8000374:	fa20 f004 	lsr.w	r0, r0, r4
 8000378:	fa01 f302 	lsl.w	r3, r1, r2
 800037c:	ea40 0003 	orr.w	r0, r0, r3
 8000380:	fa21 f304 	lsr.w	r3, r1, r4
 8000384:	ea45 0103 	orr.w	r1, r5, r3
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f1c4 040c 	rsb	r4, r4, #12
 800038e:	f1c4 0220 	rsb	r2, r4, #32
 8000392:	fa20 f002 	lsr.w	r0, r0, r2
 8000396:	fa01 f304 	lsl.w	r3, r1, r4
 800039a:	ea40 0003 	orr.w	r0, r0, r3
 800039e:	4629      	mov	r1, r5
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	fa21 f004 	lsr.w	r0, r1, r4
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f094 0f00 	teq	r4, #0
 80003ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b2:	bf06      	itte	eq
 80003b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003b8:	3401      	addeq	r4, #1
 80003ba:	3d01      	subne	r5, #1
 80003bc:	e74e      	b.n	800025c <__adddf3+0x8c>
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf18      	it	ne
 80003c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c8:	d029      	beq.n	800041e <__adddf3+0x24e>
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	d005      	beq.n	80003e2 <__adddf3+0x212>
 80003d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003da:	bf04      	itt	eq
 80003dc:	4619      	moveq	r1, r3
 80003de:	4610      	moveq	r0, r2
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea91 0f03 	teq	r1, r3
 80003e6:	bf1e      	ittt	ne
 80003e8:	2100      	movne	r1, #0
 80003ea:	2000      	movne	r0, #0
 80003ec:	bd30      	popne	{r4, r5, pc}
 80003ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f2:	d105      	bne.n	8000400 <__adddf3+0x230>
 80003f4:	0040      	lsls	r0, r0, #1
 80003f6:	4149      	adcs	r1, r1
 80003f8:	bf28      	it	cs
 80003fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000404:	bf3c      	itt	cc
 8000406:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040a:	bd30      	popcc	{r4, r5, pc}
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf1a      	itte	ne
 8000424:	4619      	movne	r1, r3
 8000426:	4610      	movne	r0, r2
 8000428:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800042c:	bf1c      	itt	ne
 800042e:	460b      	movne	r3, r1
 8000430:	4602      	movne	r2, r0
 8000432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000436:	bf06      	itte	eq
 8000438:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800043c:	ea91 0f03 	teqeq	r1, r3
 8000440:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	bf00      	nop

08000448 <__aeabi_ui2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f04f 0500 	mov.w	r5, #0
 8000460:	f04f 0100 	mov.w	r1, #0
 8000464:	e750      	b.n	8000308 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_i2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000480:	bf48      	it	mi
 8000482:	4240      	negmi	r0, r0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e73e      	b.n	8000308 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_f2d>:
 800048c:	0042      	lsls	r2, r0, #1
 800048e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000492:	ea4f 0131 	mov.w	r1, r1, rrx
 8000496:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049a:	bf1f      	itttt	ne
 800049c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004a8:	4770      	bxne	lr
 80004aa:	f092 0f00 	teq	r2, #0
 80004ae:	bf14      	ite	ne
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	e720      	b.n	8000308 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_ul2d>:
 80004c8:	ea50 0201 	orrs.w	r2, r0, r1
 80004cc:	bf08      	it	eq
 80004ce:	4770      	bxeq	lr
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	f04f 0500 	mov.w	r5, #0
 80004d6:	e00a      	b.n	80004ee <__aeabi_l2d+0x16>

080004d8 <__aeabi_l2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004e6:	d502      	bpl.n	80004ee <__aeabi_l2d+0x16>
 80004e8:	4240      	negs	r0, r0
 80004ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fa:	f43f aedc 	beq.w	80002b6 <__adddf3+0xe6>
 80004fe:	f04f 0203 	mov.w	r2, #3
 8000502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000506:	bf18      	it	ne
 8000508:	3203      	addne	r2, #3
 800050a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050e:	bf18      	it	ne
 8000510:	3203      	addne	r2, #3
 8000512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000516:	f1c2 0320 	rsb	r3, r2, #32
 800051a:	fa00 fc03 	lsl.w	ip, r0, r3
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 fe03 	lsl.w	lr, r1, r3
 8000526:	ea40 000e 	orr.w	r0, r0, lr
 800052a:	fa21 f102 	lsr.w	r1, r1, r2
 800052e:	4414      	add	r4, r2
 8000530:	e6c1      	b.n	80002b6 <__adddf3+0xe6>
 8000532:	bf00      	nop

08000534 <__aeabi_dmul>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800053e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000542:	bf1d      	ittte	ne
 8000544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000548:	ea94 0f0c 	teqne	r4, ip
 800054c:	ea95 0f0c 	teqne	r5, ip
 8000550:	f000 f8de 	bleq	8000710 <__aeabi_dmul+0x1dc>
 8000554:	442c      	add	r4, r5
 8000556:	ea81 0603 	eor.w	r6, r1, r3
 800055a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800055e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000566:	bf18      	it	ne
 8000568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800056c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000574:	d038      	beq.n	80005e8 <__aeabi_dmul+0xb4>
 8000576:	fba0 ce02 	umull	ip, lr, r0, r2
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000586:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058a:	f04f 0600 	mov.w	r6, #0
 800058e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000592:	f09c 0f00 	teq	ip, #0
 8000596:	bf18      	it	ne
 8000598:	f04e 0e01 	orrne.w	lr, lr, #1
 800059c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005a8:	d204      	bcs.n	80005b4 <__aeabi_dmul+0x80>
 80005aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ae:	416d      	adcs	r5, r5
 80005b0:	eb46 0606 	adc.w	r6, r6, r6
 80005b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005cc:	bf88      	it	hi
 80005ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d2:	d81e      	bhi.n	8000612 <__aeabi_dmul+0xde>
 80005d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005d8:	bf08      	it	eq
 80005da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005de:	f150 0000 	adcs.w	r0, r0, #0
 80005e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ec:	ea46 0101 	orr.w	r1, r6, r1
 80005f0:	ea40 0002 	orr.w	r0, r0, r2
 80005f4:	ea81 0103 	eor.w	r1, r1, r3
 80005f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005fc:	bfc2      	ittt	gt
 80005fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000606:	bd70      	popgt	{r4, r5, r6, pc}
 8000608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800060c:	f04f 0e00 	mov.w	lr, #0
 8000610:	3c01      	subs	r4, #1
 8000612:	f300 80ab 	bgt.w	800076c <__aeabi_dmul+0x238>
 8000616:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061a:	bfde      	ittt	le
 800061c:	2000      	movle	r0, #0
 800061e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000622:	bd70      	pople	{r4, r5, r6, pc}
 8000624:	f1c4 0400 	rsb	r4, r4, #0
 8000628:	3c20      	subs	r4, #32
 800062a:	da35      	bge.n	8000698 <__aeabi_dmul+0x164>
 800062c:	340c      	adds	r4, #12
 800062e:	dc1b      	bgt.n	8000668 <__aeabi_dmul+0x134>
 8000630:	f104 0414 	add.w	r4, r4, #20
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f305 	lsl.w	r3, r0, r5
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f205 	lsl.w	r2, r1, r5
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800064c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	fa21 f604 	lsr.w	r6, r1, r4
 8000658:	eb42 0106 	adc.w	r1, r2, r6
 800065c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000660:	bf08      	it	eq
 8000662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f1c4 040c 	rsb	r4, r4, #12
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f304 	lsl.w	r3, r0, r4
 8000674:	fa20 f005 	lsr.w	r0, r0, r5
 8000678:	fa01 f204 	lsl.w	r2, r1, r4
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	f141 0100 	adc.w	r1, r1, #0
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f205 	lsl.w	r2, r0, r5
 80006a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a4:	fa20 f304 	lsr.w	r3, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea43 0302 	orr.w	r3, r3, r2
 80006b0:	fa21 f004 	lsr.w	r0, r1, r4
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	fa21 f204 	lsr.w	r2, r1, r4
 80006bc:	ea20 0002 	bic.w	r0, r0, r2
 80006c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f094 0f00 	teq	r4, #0
 80006d4:	d10f      	bne.n	80006f6 <__aeabi_dmul+0x1c2>
 80006d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006da:	0040      	lsls	r0, r0, #1
 80006dc:	eb41 0101 	adc.w	r1, r1, r1
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf08      	it	eq
 80006e6:	3c01      	subeq	r4, #1
 80006e8:	d0f7      	beq.n	80006da <__aeabi_dmul+0x1a6>
 80006ea:	ea41 0106 	orr.w	r1, r1, r6
 80006ee:	f095 0f00 	teq	r5, #0
 80006f2:	bf18      	it	ne
 80006f4:	4770      	bxne	lr
 80006f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	eb43 0303 	adc.w	r3, r3, r3
 8000700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3d01      	subeq	r5, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1c6>
 800070a:	ea43 0306 	orr.w	r3, r3, r6
 800070e:	4770      	bx	lr
 8000710:	ea94 0f0c 	teq	r4, ip
 8000714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000718:	bf18      	it	ne
 800071a:	ea95 0f0c 	teqne	r5, ip
 800071e:	d00c      	beq.n	800073a <__aeabi_dmul+0x206>
 8000720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000724:	bf18      	it	ne
 8000726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072a:	d1d1      	bne.n	80006d0 <__aeabi_dmul+0x19c>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073e:	bf06      	itte	eq
 8000740:	4610      	moveq	r0, r2
 8000742:	4619      	moveq	r1, r3
 8000744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000748:	d019      	beq.n	800077e <__aeabi_dmul+0x24a>
 800074a:	ea94 0f0c 	teq	r4, ip
 800074e:	d102      	bne.n	8000756 <__aeabi_dmul+0x222>
 8000750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000754:	d113      	bne.n	800077e <__aeabi_dmul+0x24a>
 8000756:	ea95 0f0c 	teq	r5, ip
 800075a:	d105      	bne.n	8000768 <__aeabi_dmul+0x234>
 800075c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000760:	bf1c      	itt	ne
 8000762:	4610      	movne	r0, r2
 8000764:	4619      	movne	r1, r3
 8000766:	d10a      	bne.n	800077e <__aeabi_dmul+0x24a>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000786:	bd70      	pop	{r4, r5, r6, pc}

08000788 <__aeabi_ddiv>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800078e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000796:	bf1d      	ittte	ne
 8000798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800079c:	ea94 0f0c 	teqne	r4, ip
 80007a0:	ea95 0f0c 	teqne	r5, ip
 80007a4:	f000 f8a7 	bleq	80008f6 <__aeabi_ddiv+0x16e>
 80007a8:	eba4 0405 	sub.w	r4, r4, r5
 80007ac:	ea81 0e03 	eor.w	lr, r1, r3
 80007b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007b8:	f000 8088 	beq.w	80008cc <__aeabi_ddiv+0x144>
 80007bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e0:	429d      	cmp	r5, r3
 80007e2:	bf08      	it	eq
 80007e4:	4296      	cmpeq	r6, r2
 80007e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ee:	d202      	bcs.n	80007f6 <__aeabi_ddiv+0x6e>
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	1ab6      	subs	r6, r6, r2
 80007f8:	eb65 0503 	sbc.w	r5, r5, r3
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 000c 	orrcs.w	r0, r0, ip
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000864:	ea55 0e06 	orrs.w	lr, r5, r6
 8000868:	d018      	beq.n	800089c <__aeabi_ddiv+0x114>
 800086a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800086e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000872:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800087e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000886:	d1c0      	bne.n	800080a <__aeabi_ddiv+0x82>
 8000888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800088c:	d10b      	bne.n	80008a6 <__aeabi_ddiv+0x11e>
 800088e:	ea41 0100 	orr.w	r1, r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089a:	e7b6      	b.n	800080a <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	bf04      	itt	eq
 80008a2:	4301      	orreq	r1, r0
 80008a4:	2000      	moveq	r0, #0
 80008a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008aa:	bf88      	it	hi
 80008ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b0:	f63f aeaf 	bhi.w	8000612 <__aeabi_dmul+0xde>
 80008b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008b8:	bf04      	itt	eq
 80008ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c2:	f150 0000 	adcs.w	r0, r0, #0
 80008c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008d8:	bfc2      	ittt	gt
 80008da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	popgt	{r4, r5, r6, pc}
 80008e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e8:	f04f 0e00 	mov.w	lr, #0
 80008ec:	3c01      	subs	r4, #1
 80008ee:	e690      	b.n	8000612 <__aeabi_dmul+0xde>
 80008f0:	ea45 0e06 	orr.w	lr, r5, r6
 80008f4:	e68d      	b.n	8000612 <__aeabi_dmul+0xde>
 80008f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fa:	ea94 0f0c 	teq	r4, ip
 80008fe:	bf08      	it	eq
 8000900:	ea95 0f0c 	teqeq	r5, ip
 8000904:	f43f af3b 	beq.w	800077e <__aeabi_dmul+0x24a>
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	d10a      	bne.n	8000924 <__aeabi_ddiv+0x19c>
 800090e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000912:	f47f af34 	bne.w	800077e <__aeabi_dmul+0x24a>
 8000916:	ea95 0f0c 	teq	r5, ip
 800091a:	f47f af25 	bne.w	8000768 <__aeabi_dmul+0x234>
 800091e:	4610      	mov	r0, r2
 8000920:	4619      	mov	r1, r3
 8000922:	e72c      	b.n	800077e <__aeabi_dmul+0x24a>
 8000924:	ea95 0f0c 	teq	r5, ip
 8000928:	d106      	bne.n	8000938 <__aeabi_ddiv+0x1b0>
 800092a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800092e:	f43f aefd 	beq.w	800072c <__aeabi_dmul+0x1f8>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e722      	b.n	800077e <__aeabi_dmul+0x24a>
 8000938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000942:	f47f aec5 	bne.w	80006d0 <__aeabi_dmul+0x19c>
 8000946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094a:	f47f af0d 	bne.w	8000768 <__aeabi_dmul+0x234>
 800094e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000952:	f47f aeeb 	bne.w	800072c <__aeabi_dmul+0x1f8>
 8000956:	e712      	b.n	800077e <__aeabi_dmul+0x24a>

08000958 <__gedf2>:
 8000958:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800095c:	e006      	b.n	800096c <__cmpdf2+0x4>
 800095e:	bf00      	nop

08000960 <__ledf2>:
 8000960:	f04f 0c01 	mov.w	ip, #1
 8000964:	e002      	b.n	800096c <__cmpdf2+0x4>
 8000966:	bf00      	nop

08000968 <__cmpdf2>:
 8000968:	f04f 0c01 	mov.w	ip, #1
 800096c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000982:	d01b      	beq.n	80009bc <__cmpdf2+0x54>
 8000984:	b001      	add	sp, #4
 8000986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098a:	bf0c      	ite	eq
 800098c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000990:	ea91 0f03 	teqne	r1, r3
 8000994:	bf02      	ittt	eq
 8000996:	ea90 0f02 	teqeq	r0, r2
 800099a:	2000      	moveq	r0, #0
 800099c:	4770      	bxeq	lr
 800099e:	f110 0f00 	cmn.w	r0, #0
 80009a2:	ea91 0f03 	teq	r1, r3
 80009a6:	bf58      	it	pl
 80009a8:	4299      	cmppl	r1, r3
 80009aa:	bf08      	it	eq
 80009ac:	4290      	cmpeq	r0, r2
 80009ae:	bf2c      	ite	cs
 80009b0:	17d8      	asrcs	r0, r3, #31
 80009b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009b6:	f040 0001 	orr.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	d102      	bne.n	80009cc <__cmpdf2+0x64>
 80009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ca:	d107      	bne.n	80009dc <__cmpdf2+0x74>
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d1d6      	bne.n	8000984 <__cmpdf2+0x1c>
 80009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009da:	d0d3      	beq.n	8000984 <__cmpdf2+0x1c>
 80009dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <__aeabi_cdrcmple>:
 80009e4:	4684      	mov	ip, r0
 80009e6:	4610      	mov	r0, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	468c      	mov	ip, r1
 80009ec:	4619      	mov	r1, r3
 80009ee:	4663      	mov	r3, ip
 80009f0:	e000      	b.n	80009f4 <__aeabi_cdcmpeq>
 80009f2:	bf00      	nop

080009f4 <__aeabi_cdcmpeq>:
 80009f4:	b501      	push	{r0, lr}
 80009f6:	f7ff ffb7 	bl	8000968 <__cmpdf2>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	bf48      	it	mi
 80009fe:	f110 0f00 	cmnmi.w	r0, #0
 8000a02:	bd01      	pop	{r0, pc}

08000a04 <__aeabi_dcmpeq>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff fff4 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2001      	moveq	r0, #1
 8000a10:	2000      	movne	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmplt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffea 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmple>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffe0 	bl	80009f4 <__aeabi_cdcmpeq>
 8000a34:	bf94      	ite	ls
 8000a36:	2001      	movls	r0, #1
 8000a38:	2000      	movhi	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpge>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffce 	bl	80009e4 <__aeabi_cdrcmple>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpgt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffc4 	bl	80009e4 <__aeabi_cdrcmple>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <main>:
#include "main.h"
#include "attitude.h"
#include "controller.h"

int main()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

	float Toservo[3] = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	3304      	adds	r3, #4

	L3GD20_Configuration();
 8000b22:	f000 f8b7 	bl	8000c94 <L3GD20_Configuration>
	

	while(1)
	{

		AttitudeControl(Toservo);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f867 	bl	8000bfc <AttitudeControl>

		for(int i=0; i<100000; i++);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e002      	b.n	8000b3a <main+0x32>
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <main+0x3c>)
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	ddf8      	ble.n	8000b34 <main+0x2c>
	}
 8000b42:	e7f0      	b.n	8000b26 <main+0x1e>
 8000b44:	0001869f 	muleq	r1, pc, r6	; <UNPREDICTABLE>

08000b48 <YawControl>:
#include"attitude.h"
#include"controller.h"

/* control commmand of yaw control */
float YawControl( float InnerloopYaw, float OutterloopYaw, float Psi, float R)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	 return InnerloopYaw * R + OutterloopYaw * Psi;	
 8000b56:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b5a:	edd7 7a00 	vldr	s15, [r7]
 8000b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b62:	edd7 6a02 	vldr	s13, [r7, #8]
 8000b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b72:	ee17 3a90 	vmov	r3, s15
};
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <RollControl>:

/* control command of roll control */
float RollControl(float InnerloopRoll, float OutterloopRoll, float Phi, float Q)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
        return InnerloopRoll * Q + OutterloopRoll * Phi;
 8000b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b96:	edd7 7a00 	vldr	s15, [r7]
 8000b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bae:	ee17 3a90 	vmov	r3, s15
	//	RollCoom = 1.0 * Q + 1.0 * Phi;
};
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <PitchControl>:

/* control command of pitch control */
float PitchControl(float InnerloopPitch, float OutterloopPitch, float Theta, float P)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	603b      	str	r3, [r7, #0]
        return InnerloopPitch * P + OutterloopPitch * Theta;
 8000bce:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bd2:	edd7 7a00 	vldr	s15, [r7]
 8000bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bda:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bea:	ee17 3a90 	vmov	r3, s15
	//YawCoom = 1.0 * P + 1.0 * Theta;
};
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <AttitudeControl>:

/* the attitude command function */
void AttitudeControl(float* AttiCoomData)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	float RateData[3] = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	3304      	adds	r3, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	3304      	adds	r3, #4
	float AttiData[3] = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	3304      	adds	r3, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	3304      	adds	r3, #4

	/* read six degree of freedom data */
	L3GD20_ReadGyro(RateData);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f851 	bl	8000cdc <L3GD20_ReadGyro>
	Eulerangle(AttiData);
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8dc 	bl	8000dfc <Eulerangle>

	/*  */
	AttiCoomData[0] = YawControl( 1.0, 1.0, AttiData[0], RateData[0] );
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000c4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c50:	f7ff ff7a 	bl	8000b48 <YawControl>
 8000c54:	4602      	mov	r2, r0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	AttiCoomData[1] = RollControl( 1.0, 1.0, AttiData[1], RateData[1] );
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	1d1c      	adds	r4, r3, #4
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c6a:	f7ff ff8b 	bl	8000b84 <RollControl>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6023      	str	r3, [r4, #0]
	AttiCoomData[2] = PitchControl( 1.0, 1.0, AttiData[2], RateData[2] ); 	
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f103 0408 	add.w	r4, r3, #8
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000c80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c84:	f7ff ff9c 	bl	8000bc0 <PitchControl>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	6023      	str	r3, [r4, #0]

};
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop

08000c94 <L3GD20_Configuration>:
  */

#include"attitude.h"

void L3GD20_Configuration(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
	/* L3GD20 Configuration */
  	L3GD20_InitTypeDef L3GD20_InitStructure;
	L3GD20_FilterConfigTypeDef L3GD20_FilterStructure;
	
	/* Configure for L3GD20 */
  	L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	723b      	strb	r3, [r7, #8]
  	L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	727b      	strb	r3, [r7, #9]
 	L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	72bb      	strb	r3, [r7, #10]
 	L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8000ca6:	2330      	movs	r3, #48	; 0x30
 8000ca8:	72fb      	strb	r3, [r7, #11]
  	L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000caa:	2300      	movs	r3, #0
 8000cac:	733b      	strb	r3, [r7, #12]
	L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	737b      	strb	r3, [r7, #13]
  	L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_250; 
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73bb      	strb	r3, [r7, #14]
  	L3GD20_Init(&L3GD20_InitStructure);
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 fc70 	bl	80075a0 <L3GD20_Init>
  
  	/* Configure High-Pass Filter for L3GD20 */
  	L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	713b      	strb	r3, [r7, #4]
  	L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	717b      	strb	r3, [r7, #5]
 	L3GD20_FilterConfig(&L3GD20_FilterStructure);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 fd3e 	bl	800774c <L3GD20_FilterConfig>

  	/* Configure High-Pass Filter for L3GD20 */ 
  	L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f006 fd5f 	bl	8007794 <L3GD20_FilterCmd>
};
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <L3GD20_ReadGyro>:


void L3GD20_ReadGyro(float* pfData)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  	uint8_t tmpbuffer[6] = {1.0};
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	833b      	strh	r3, [r7, #24]
 8000cec:	2301      	movs	r3, #1
 8000cee:	753b      	strb	r3, [r7, #20]
  	int16_t RawData[3] = {0};
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	823b      	strh	r3, [r7, #16]
  	uint8_t tmpreg = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	72fb      	strb	r3, [r7, #11]
  
  	/* read data from specific register */
  	L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000cfc:	f107 030b 	add.w	r3, r7, #11
 8000d00:	4618      	mov	r0, r3
 8000d02:	2123      	movs	r1, #35	; 0x23
 8000d04:	2201      	movs	r2, #1
 8000d06:	f006 fda3 	bl	8007850 <L3GD20_Read>
  	L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4618      	mov	r0, r3
 8000d10:	2128      	movs	r1, #40	; 0x28
 8000d12:	2206      	movs	r2, #6
 8000d14:	f006 fd9c 	bl	8007850 <L3GD20_Read>


  	/* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  	if(!(tmpreg & 0x40))
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d124      	bne.n	8000d6c <L3GD20_ReadGyro+0x90>
  	{
    		for(int i=0; i<3; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
 8000d26:	e01d      	b.n	8000d64 <L3GD20_ReadGyro+0x88>
    		{
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d32:	440b      	add	r3, r1
 8000d34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d44:	440b      	add	r3, r1
 8000d46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d58:	440b      	add	r3, r1
 8000d5a:	f823 2c1c 	strh.w	r2, [r3, #-28]


  	/* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  	if(!(tmpreg & 0x40))
  	{
    		for(int i=0; i<3; i++)
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3301      	adds	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	ddde      	ble.n	8000d28 <L3GD20_ReadGyro+0x4c>
 8000d6a:	e023      	b.n	8000db4 <L3GD20_ReadGyro+0xd8>
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    		}
  	}
  	else
  	{
    		for(int i=0; i<3; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	e01d      	b.n	8000dae <L3GD20_ReadGyro+0xd2>
    		{
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d8e:	440b      	add	r3, r1
 8000d90:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d94:	4413      	add	r3, r2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000da2:	440b      	add	r3, r1
 8000da4:	f823 2c1c 	strh.w	r2, [r3, #-28]
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    		}
  	}
  	else
  	{
    		for(int i=0; i<3; i++)
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	3301      	adds	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	ddde      	ble.n	8000d72 <L3GD20_ReadGyro+0x96>
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    		}
  	}	

  	/* divide by sensitivity in 250dps */
  	for( int i=0; i<3; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	e018      	b.n	8000dec <L3GD20_ReadGyro+0x110>
  	{
    		pfData[i] = (float)RawData[i] / 114.285f;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	441a      	add	r2, r3
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dca:	440b      	add	r3, r1
 8000dcc:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dda:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000df8 <L3GD20_ReadGyro+0x11c>
 8000dde:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000de2:	edc2 7a00 	vstr	s15, [r2]
      			RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    		}
  	}	

  	/* divide by sensitivity in 250dps */
  	for( int i=0; i<3; i++)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	dde3      	ble.n	8000dba <L3GD20_ReadGyro+0xde>
  	{
    		pfData[i] = (float)RawData[i] / 114.285f;
  	}	
};
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	42e491ec 	rscmi	r9, r4, #236, 2	; 0x3b

08000dfc <Eulerangle>:

void Eulerangle(float* AttiData)
{
 8000dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e00:	b091      	sub	sp, #68	; 0x44
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  	float GyroData[3] = {0};
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	3304      	adds	r3, #4
  	float dt = 0.01f; 
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <Eulerangle+0x150>)
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  	float E[4] = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	3304      	adds	r3, #4
  	float dE[4] = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	3304      	adds	r3, #4
	
	/* read the anguler velocity */
  	L3GD20_ReadGyro(GyroData);  
 8000e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff3d 	bl	8000cdc <L3GD20_ReadGyro>

  	/* state euqation of Quaternions */
  	dE[0] = 0.5 * ( -GyroData[0] * E[1] - GyroData[1] * E[2] - GyroData[2] * E[3] );
 8000e62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e66:	eeb1 7a67 	vneg.f32	s14, s15
 8000e6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e72:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000e76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e82:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000e86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e92:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e9a:	edc7 7a03 	vstr	s15, [r7, #12]
  	dE[1] = 0.5 * (  GyroData[0] * E[0] + GyroData[2] * E[2] - GyroData[1] * E[3] );
 8000e9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ea2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eaa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000eae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000ebe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eca:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed2:	edc7 7a04 	vstr	s15, [r7, #16]
  	dE[2] = 0.5 * (  GyroData[1] * E[0] - GyroData[2] * E[1] + GyroData[0] * E[3] );
 8000ed6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000ee6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ef2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000ef6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f02:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0a:	edc7 7a05 	vstr	s15, [r7, #20]
  	dE[3] = 0.5 * (  GyroData[2] * E[0] + GyroData[1] * E[1] - GyroData[0] * E[2] );
 8000f0e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000f1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000f2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f42:	edc7 7a06 	vstr	s15, [r7, #24]

  	/* the euler integration */
  	for(int i = 0; i<3; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f4a:	e022      	b.n	8000f92 <Eulerangle+0x196>
 8000f4c:	3c23d70a 	stccc	7, cr13, [r3], #-40	; 0xffffffd8
  	{
    		E[i] = E[i] + dE[i] * dt;
 8000f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f58:	4413      	add	r3, r2
 8000f5a:	3b24      	subs	r3, #36	; 0x24
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b34      	subs	r3, #52	; 0x34
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f84:	4413      	add	r3, r2
 8000f86:	3b24      	subs	r3, #36	; 0x24
 8000f88:	edc3 7a00 	vstr	s15, [r3]
  	dE[1] = 0.5 * (  GyroData[0] * E[0] + GyroData[2] * E[2] - GyroData[1] * E[3] );
  	dE[2] = 0.5 * (  GyroData[1] * E[0] - GyroData[2] * E[1] + GyroData[0] * E[3] );
  	dE[3] = 0.5 * (  GyroData[2] * E[0] + GyroData[1] * E[1] - GyroData[0] * E[2] );

  	/* the euler integration */
  	for(int i = 0; i<3; i++)
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	dddb      	ble.n	8000f50 <Eulerangle+0x154>
  	{
    		E[i] = E[i] + dE[i] * dt;
  	}

  	/* converge the Quaternions to Euler angle */
  	AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
 8000f98:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000fa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fb8:	ee17 0a90 	vmov	r0, s15
 8000fbc:	f7ff fa66 	bl	800048c <__aeabi_f2d>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	460d      	mov	r5, r1
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa60 	bl	800048c <__aeabi_f2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fdc:	f00a f94a 	bl	800b274 <pow>
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	4689      	mov	r9, r1
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa50 	bl	800048c <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	f00a f93a 	bl	800b274 <pow>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4640      	mov	r0, r8
 8001006:	4649      	mov	r1, r9
 8001008:	f7ff f8e0 	bl	80001cc <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4690      	mov	r8, r2
 8001012:	4699      	mov	r9, r3
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa38 	bl	800048c <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102c:	f00a f922 	bl	800b274 <pow>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4640      	mov	r0, r8
 8001036:	4649      	mov	r1, r9
 8001038:	f7ff f8c8 	bl	80001cc <__aeabi_dsub>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4690      	mov	r8, r2
 8001042:	4699      	mov	r9, r3
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa20 	bl	800048c <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105c:	f00a f90a 	bl	800b274 <pow>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4640      	mov	r0, r8
 8001066:	4649      	mov	r1, r9
 8001068:	f7ff f8b2 	bl	80001d0 <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
  	{
    		E[i] = E[i] + dE[i] * dt;
  	}

  	/* converge the Quaternions to Euler angle */
  	AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
 8001070:	4620      	mov	r0, r4
 8001072:	4629      	mov	r1, r5
 8001074:	f7ff fb88 	bl	8000788 <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f009 feda 	bl	800ae38 <atan>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fcec 	bl	8000a68 <__aeabi_d2f>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
  	AttiData[1] = atan( 2*( E[0]*E[3] + E[1]*E[2] ) / \
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1d1e      	adds	r6, r3, #4
 800109a:	ed97 7a07 	vldr	s14, [r7, #28]
 800109e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80010aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff f9e5 	bl	800048c <__aeabi_f2d>
 80010c2:	4604      	mov	r4, r0
 80010c4:	460d      	mov	r5, r1
			( pow( E[0], 2 ) + pow( E[1], 2 ) - pow(E[2],2) - pow(E[3],2) ) );
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9df 	bl	800048c <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010de:	f00a f8c9 	bl	800b274 <pow>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f9cf 	bl	800048c <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fe:	f00a f8b9 	bl	800b274 <pow>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4640      	mov	r0, r8
 8001108:	4649      	mov	r1, r9
 800110a:	f7ff f861 	bl	80001d0 <__adddf3>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4690      	mov	r8, r2
 8001114:	4699      	mov	r9, r3
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f9b7 	bl	800048c <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112e:	f00a f8a1 	bl	800b274 <pow>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4640      	mov	r0, r8
 8001138:	4649      	mov	r1, r9
 800113a:	f7ff f847 	bl	80001cc <__aeabi_dsub>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4690      	mov	r8, r2
 8001144:	4699      	mov	r9, r3
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f99f 	bl	800048c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115e:	f00a f889 	bl	800b274 <pow>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4640      	mov	r0, r8
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff f82f 	bl	80001cc <__aeabi_dsub>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
  	}

  	/* converge the Quaternions to Euler angle */
  	AttiData[0] = atan( 2*( E[0]*E[1] + E[2]*E[3] ) / \
			( pow( E[0], 2 ) - pow( E[1], 2 ) - pow(E[2],2) + pow(E[3],2) ) ); 
  	AttiData[1] = atan( 2*( E[0]*E[3] + E[1]*E[2] ) / \
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fb07 	bl	8000788 <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f009 fe59 	bl	800ae38 <atan>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fc6b 	bl	8000a68 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	6033      	str	r3, [r6, #0]
			( pow( E[0], 2 ) + pow( E[1], 2 ) - pow(E[2],2) - pow(E[3],2) ) );
  	AttiData[2] = asin( 2*( E[0]*E[2] - E[3]*E[1] ) );
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f103 0408 	add.w	r4, r3, #8
 800119c:	ed97 7a07 	vldr	s14, [r7, #28]
 80011a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80011ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f964 	bl	800048c <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f009 fffc 	bl	800b1c8 <asin>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fc46 	bl	8000a68 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	6023      	str	r3, [r4, #0]

};
 80011e0:	3744      	adds	r7, #68	; 0x44
 80011e2:	46bd      	mov	sp, r7
 80011e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011e8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ea:	e003      	b.n	80011f4 <LoopCopyDataInit>

080011ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 80011ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f2:	3104      	adds	r1, #4

080011f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 80011f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011fc:	d3f6      	bcc.n	80011ec <CopyDataInit>
  ldr  r2, =_sbss
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8001200:	e002      	b.n	8001208 <LoopFillZerobss>

08001202 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001204:	f842 3b04 	str.w	r3, [r2], #4

08001208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800120c:	d3f9      	bcc.n	8001202 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800120e:	f000 f80f 	bl	8001230 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fc79 	bl	8000b08 <main>
  bx  lr    
 8001216:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001218:	0800f3f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp, lr, pc}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 8001220:	20000494 	mulcs	r0, r4, r4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001224:	20000494 	mulcs	r0, r4, r4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001228:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>
	...

08001230 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <SystemInit+0x5c>)
 8001236:	4a15      	ldr	r2, [pc, #84]	; (800128c <SystemInit+0x5c>)
 8001238:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800123c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <SystemInit+0x60>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <SystemInit+0x60>)
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <SystemInit+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <SystemInit+0x60>)
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <SystemInit+0x60>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <SystemInit+0x60>)
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SystemInit+0x64>)
 800126a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <SystemInit+0x60>)
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <SystemInit+0x60>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001276:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SystemInit+0x60>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800127e:	f000 f887 	bl	8001390 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001282:	4b02      	ldr	r3, [pc, #8]	; (800128c <SystemInit+0x5c>)
 8001284:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001288:	609a      	str	r2, [r3, #8]
#endif
}
 800128a:	bd80      	pop	{r7, pc}
 800128c:	e000ed00 	and	lr, r0, r0, lsl #26
 8001290:	40023800 	andmi	r3, r2, r0, lsl #16
 8001294:	24003010 	strcs	r3, [r0], #-16

08001298 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	2302      	movs	r3, #2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	2302      	movs	r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <SystemCoreClockUpdate+0xe4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d007      	beq.n	80012d2 <SystemCoreClockUpdate+0x3a>
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d009      	beq.n	80012da <SystemCoreClockUpdate+0x42>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d13f      	bne.n	800134a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 80012cc:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <SystemCoreClockUpdate+0xec>)
 80012ce:	601a      	str	r2, [r3, #0]
      break;
 80012d0:	e03f      	b.n	8001352 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 80012d4:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <SystemCoreClockUpdate+0xf0>)
 80012d6:	601a      	str	r2, [r3, #0]
      break;
 80012d8:	e03b      	b.n	8001352 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemCoreClockUpdate+0xe4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	0d9b      	lsrs	r3, r3, #22
 80012e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemCoreClockUpdate+0xe4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012f6:	4a24      	ldr	r2, [pc, #144]	; (8001388 <SystemCoreClockUpdate+0xf0>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <SystemCoreClockUpdate+0xe4>)
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001306:	400b      	ands	r3, r1
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	fb03 f302 	mul.w	r3, r3, r2
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00c      	b.n	800132c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <SystemCoreClockUpdate+0xec>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	fbb2 f2f3 	udiv	r2, r2, r3
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <SystemCoreClockUpdate+0xe4>)
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001322:	400b      	ands	r3, r1
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	fb03 f302 	mul.w	r3, r3, r2
 800132a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <SystemCoreClockUpdate+0xe4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	3301      	adds	r3, #1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	fbb2 f2f3 	udiv	r2, r2, r3
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 8001346:	601a      	str	r2, [r3, #0]
      break;
 8001348:	e003      	b.n	8001352 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <SystemCoreClockUpdate+0xec>)
 800134e:	601a      	str	r2, [r3, #0]
      break;
 8001350:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <SystemCoreClockUpdate+0xe4>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <SystemCoreClockUpdate+0xf4>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	40da      	lsrs	r2, r3
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SystemCoreClockUpdate+0xe8>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	andmi	r3, r2, r0, lsl #16
 8001380:	20000000 	andcs	r0, r0, r0
 8001384:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8001388:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 800138c:	20000004 	andcs	r0, r0, r4

08001390 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <SetSysClock+0xe4>)
 80013a0:	4a34      	ldr	r2, [pc, #208]	; (8001474 <SetSysClock+0xe4>)
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013a8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <SetSysClock+0xe4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <SetSysClock+0x38>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80013c6:	d1f0      	bne.n	80013aa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <SetSysClock+0xe4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80013d4:	2301      	movs	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	e001      	b.n	80013de <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d142      	bne.n	800146a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <SetSysClock+0xe4>)
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <SetSysClock+0xe4>)
 80013e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <SetSysClock+0xe8>)
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SetSysClock+0xe8>)
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80013fa:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <SetSysClock+0xe4>)
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <SetSysClock+0xe4>)
 8001400:	6892      	ldr	r2, [r2, #8]
 8001402:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <SetSysClock+0xe4>)
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <SetSysClock+0xe4>)
 8001408:	6892      	ldr	r2, [r2, #8]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <SetSysClock+0xe4>)
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <SetSysClock+0xe4>)
 8001414:	6892      	ldr	r2, [r2, #8]
 8001416:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800141a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <SetSysClock+0xe4>)
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <SetSysClock+0xec>)
 8001420:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <SetSysClock+0xe4>)
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <SetSysClock+0xe4>)
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800142c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800142e:	bf00      	nop
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <SetSysClock+0xe4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f9      	beq.n	8001430 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <SetSysClock+0xf0>)
 800143e:	f240 6204 	movw	r2, #1540	; 0x604
 8001442:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <SetSysClock+0xe4>)
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <SetSysClock+0xe4>)
 8001448:	6892      	ldr	r2, [r2, #8]
 800144a:	f022 0203 	bic.w	r2, r2, #3
 800144e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SetSysClock+0xe4>)
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <SetSysClock+0xe4>)
 8001454:	6892      	ldr	r2, [r2, #8]
 8001456:	f042 0202 	orr.w	r2, r2, #2
 800145a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800145c:	bf00      	nop
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SetSysClock+0xe4>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d1f9      	bne.n	800145e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023800 	andmi	r3, r2, r0, lsl #16
 8001478:	40007000 	andmi	r7, r0, r0
 800147c:	07404b19 	smlaldeq	r4, r0, r9, fp
 8001480:	40023c00 	andmi	r3, r2, r0, lsl #24

08001484 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <NVIC_PriorityGroupConfig+0x20>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60d3      	str	r3, [r2, #12]
}
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	and	lr, r0, r0, lsl #26

080014a8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]
 80014b8:	230f      	movs	r3, #15
 80014ba:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d037      	beq.n	8001534 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <NVIC_Init+0xb4>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f1c3 0304 	rsb	r3, r3, #4
 80014d8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80014da:	7b7a      	ldrb	r2, [r7, #13]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	fa42 f303 	asr.w	r3, r2, r3
 80014e2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	461a      	mov	r2, r3
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	789a      	ldrb	r2, [r3, #2]
 80014f6:	7b7b      	ldrb	r3, [r7, #13]
 80014f8:	4013      	ands	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	4313      	orrs	r3, r2
 8001500:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <NVIC_Init+0xb8>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <NVIC_Init+0xb8>)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	0952      	lsrs	r2, r2, #5
 800151e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	7809      	ldrb	r1, [r1, #0]
 8001524:	f001 011f 	and.w	r1, r1, #31
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800152e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001532:	e00e      	b.n	8001552 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <NVIC_Init+0xb8>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	0952      	lsrs	r2, r2, #5
 800153c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	7809      	ldrb	r1, [r1, #0]
 8001542:	f001 011f 	and.w	r1, r1, #31
 8001546:	2001      	movs	r0, #1
 8001548:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800154c:	3220      	adds	r2, #32
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	and	lr, r0, r0, lsl #26
 8001560:	e000e100 	and	lr, r0, r0, lsl #2

08001564 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <NVIC_SetVectorTable+0x28>)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001576:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]
}
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	and	lr, r0, r0, lsl #26

08001590 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	71fa      	strb	r2, [r7, #7]
 800159c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <NVIC_SystemLPConfig+0x3c>)
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <NVIC_SystemLPConfig+0x3c>)
 80015a8:	6911      	ldr	r1, [r2, #16]
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	e006      	b.n	80015c0 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <NVIC_SystemLPConfig+0x3c>)
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <NVIC_SystemLPConfig+0x3c>)
 80015b6:	6911      	ldr	r1, [r2, #16]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	43d2      	mvns	r2, r2
 80015bc:	400a      	ands	r2, r1
 80015be:	611a      	str	r2, [r3, #16]
  }
}
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	and	lr, r0, r0, lsl #26

080015d0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d106      	bne.n	80015ec <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <SysTick_CLKSourceConfig+0x34>)
 80015e0:	4a08      	ldr	r2, [pc, #32]	; (8001604 <SysTick_CLKSourceConfig+0x34>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f042 0204 	orr.w	r2, r2, #4
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e005      	b.n	80015f8 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_CLKSourceConfig+0x34>)
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SysTick_CLKSourceConfig+0x34>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	f022 0204 	bic.w	r2, r2, #4
 80015f6:	601a      	str	r2, [r3, #0]
  }
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e010 	and	lr, r0, r0, lsl r0

08001608 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <GPIO_DeInit+0x138>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d108      	bne.n	800162a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001618:	2001      	movs	r0, #1
 800161a:	2101      	movs	r1, #1
 800161c:	f000 feb6 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001620:	2001      	movs	r0, #1
 8001622:	2100      	movs	r1, #0
 8001624:	f000 feb2 	bl	800238c <RCC_AHB1PeriphResetCmd>
 8001628:	e086      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <GPIO_DeInit+0x13c>)
 800162e:	429a      	cmp	r2, r3
 8001630:	d108      	bne.n	8001644 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001632:	2002      	movs	r0, #2
 8001634:	2101      	movs	r1, #1
 8001636:	f000 fea9 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800163a:	2002      	movs	r0, #2
 800163c:	2100      	movs	r1, #0
 800163e:	f000 fea5 	bl	800238c <RCC_AHB1PeriphResetCmd>
 8001642:	e079      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <GPIO_DeInit+0x140>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d108      	bne.n	800165e <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800164c:	2004      	movs	r0, #4
 800164e:	2101      	movs	r1, #1
 8001650:	f000 fe9c 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001654:	2004      	movs	r0, #4
 8001656:	2100      	movs	r1, #0
 8001658:	f000 fe98 	bl	800238c <RCC_AHB1PeriphResetCmd>
 800165c:	e06c      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <GPIO_DeInit+0x144>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d108      	bne.n	8001678 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001666:	2008      	movs	r0, #8
 8001668:	2101      	movs	r1, #1
 800166a:	f000 fe8f 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800166e:	2008      	movs	r0, #8
 8001670:	2100      	movs	r1, #0
 8001672:	f000 fe8b 	bl	800238c <RCC_AHB1PeriphResetCmd>
 8001676:	e05f      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <GPIO_DeInit+0x148>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d108      	bne.n	8001692 <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001680:	2010      	movs	r0, #16
 8001682:	2101      	movs	r1, #1
 8001684:	f000 fe82 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001688:	2010      	movs	r0, #16
 800168a:	2100      	movs	r1, #0
 800168c:	f000 fe7e 	bl	800238c <RCC_AHB1PeriphResetCmd>
 8001690:	e052      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <GPIO_DeInit+0x14c>)
 8001696:	429a      	cmp	r2, r3
 8001698:	d108      	bne.n	80016ac <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800169a:	2020      	movs	r0, #32
 800169c:	2101      	movs	r1, #1
 800169e:	f000 fe75 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80016a2:	2020      	movs	r0, #32
 80016a4:	2100      	movs	r1, #0
 80016a6:	f000 fe71 	bl	800238c <RCC_AHB1PeriphResetCmd>
 80016aa:	e045      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <GPIO_DeInit+0x150>)
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d108      	bne.n	80016c6 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80016b4:	2040      	movs	r0, #64	; 0x40
 80016b6:	2101      	movs	r1, #1
 80016b8:	f000 fe68 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80016bc:	2040      	movs	r0, #64	; 0x40
 80016be:	2100      	movs	r1, #0
 80016c0:	f000 fe64 	bl	800238c <RCC_AHB1PeriphResetCmd>
 80016c4:	e038      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <GPIO_DeInit+0x154>)
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d108      	bne.n	80016e0 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80016ce:	2080      	movs	r0, #128	; 0x80
 80016d0:	2101      	movs	r1, #1
 80016d2:	f000 fe5b 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80016d6:	2080      	movs	r0, #128	; 0x80
 80016d8:	2100      	movs	r1, #0
 80016da:	f000 fe57 	bl	800238c <RCC_AHB1PeriphResetCmd>
 80016de:	e02b      	b.n	8001738 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <GPIO_DeInit+0x158>)
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10a      	bne.n	80016fe <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80016e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ec:	2101      	movs	r1, #1
 80016ee:	f000 fe4d 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80016f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016f6:	2100      	movs	r1, #0
 80016f8:	f000 fe48 	bl	800238c <RCC_AHB1PeriphResetCmd>
 80016fc:	e01c      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <GPIO_DeInit+0x15c>)
 8001702:	429a      	cmp	r2, r3
 8001704:	d10a      	bne.n	800171c <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8001706:	f44f 7000 	mov.w	r0, #512	; 0x200
 800170a:	2101      	movs	r1, #1
 800170c:	f000 fe3e 	bl	800238c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8001710:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001714:	2100      	movs	r1, #0
 8001716:	f000 fe39 	bl	800238c <RCC_AHB1PeriphResetCmd>
 800171a:	e00d      	b.n	8001738 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <GPIO_DeInit+0x160>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d109      	bne.n	8001738 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8001724:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001728:	2101      	movs	r1, #1
 800172a:	f000 fe2f 	bl	800238c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800172e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001732:	2100      	movs	r1, #0
 8001734:	f000 fe2a 	bl	800238c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020000 	andmi	r0, r2, r0
 8001744:	40020400 	andmi	r0, r2, r0, lsl #8
 8001748:	40020800 	andmi	r0, r2, r0, lsl #16
 800174c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8001750:	40021000 	andmi	r1, r2, r0
 8001754:	40021400 	andmi	r1, r2, r0, lsl #8
 8001758:	40021800 	andmi	r1, r2, r0, lsl #16
 800175c:	40021c00 	andmi	r1, r2, r0, lsl #24
 8001760:	40022000 	andmi	r2, r2, r0
 8001764:	40022400 	andmi	r2, r2, r0, lsl #8
 8001768:	40022800 	andmi	r2, r2, r0, lsl #16

0800176c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e076      	b.n	8001876 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2201      	movs	r2, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d165      	bne.n	8001870 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2103      	movs	r1, #3
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	4619      	mov	r1, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d003      	beq.n	80017e2 <GPIO_Init+0x76>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d12e      	bne.n	8001840 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2103      	movs	r1, #3
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	795b      	ldrb	r3, [r3, #5]
 8001800:	4619      	mov	r1, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	b29b      	uxth	r3, r3
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	799b      	ldrb	r3, [r3, #6]
 800182e:	4619      	mov	r1, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	b29b      	uxth	r3, r3
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	b29b      	uxth	r3, r3
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2103      	movs	r1, #3
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	79db      	ldrb	r3, [r3, #7]
 8001860:	4619      	mov	r1, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d985      	bls.n	8001788 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	71da      	strb	r2, [r3, #7]
}
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80018dc:	887a      	ldrh	r2, [r7, #2]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	60fb      	str	r3, [r7, #12]
}
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	b29b      	uxth	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	b29b      	uxth	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	831a      	strh	r2, [r3, #24]
}
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	835a      	strh	r2, [r3, #26]
}
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	460a      	mov	r2, r1
 80019e4:	807a      	strh	r2, [r7, #2]
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80019e8:	787b      	ldrb	r3, [r7, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	831a      	strh	r2, [r3, #24]
 80019f4:	e002      	b.n	80019fc <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	835a      	strh	r2, [r3, #26]
  }
}
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	615a      	str	r2, [r3, #20]
}
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	405a      	eors	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]
}
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	460a      	mov	r2, r1
 8001a54:	807a      	strh	r2, [r7, #2]
 8001a56:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001a60:	787a      	ldrb	r2, [r7, #1]
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3108      	adds	r1, #8
 8001a84:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	200f      	movs	r0, #15
 8001a92:	fa00 f303 	lsl.w	r3, r0, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4019      	ands	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	08db      	lsrs	r3, r3, #3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <RCC_DeInit+0x60>)
 8001ada:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <RCC_DeInit+0x60>)
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <RCC_DeInit+0x60>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <RCC_DeInit+0x60>)
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <RCC_DeInit+0x60>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <RCC_DeInit+0x60>)
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <RCC_DeInit+0x64>)
 8001afe:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <RCC_DeInit+0x60>)
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <RCC_DeInit+0x68>)
 8001b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <RCC_DeInit+0x60>)
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <RCC_DeInit+0x6c>)
 8001b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <RCC_DeInit+0x60>)
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <RCC_DeInit+0x60>)
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <RCC_DeInit+0x60>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <RCC_DeInit+0x60>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	andmi	r3, r2, r0, lsl #16
 8001b38:	24003010 	strcs	r3, [r0], #-16
 8001b3c:	20003000 	andcs	r3, r0, r0
 8001b40:	24003000 	strcs	r3, [r0], #-0

08001b44 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <RCC_HSEConfig+0x20>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <RCC_HSEConfig+0x20>)
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	701a      	strb	r2, [r3, #0]
}
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40023802 	andmi	r3, r2, r2, lsl #16

08001b68 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001b7a:	2031      	movs	r0, #49	; 0x31
 8001b7c:	f000 fd56 	bl	800262c <RCC_GetFlagStatus>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001b90:	d002      	beq.n	8001b98 <RCC_WaitForHSEStartUp+0x30>
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001b98:	2031      	movs	r0, #49	; 0x31
 8001b9a:	f000 fd47 	bl	800262c <RCC_GetFlagStatus>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	e001      	b.n	8001bae <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001baa:	2300      	movs	r3, #0
 8001bac:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <RCC_AdjustHSICalibrationValue+0x38>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <RCC_AdjustHSICalibrationValue+0x38>)
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	andmi	r3, r2, r0, lsl #16

08001bf4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <RCC_HSICmd+0x1c>)
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	42470000 	submi	r0, r7, #0

08001c14 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <RCC_LSEConfig+0x3c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <RCC_LSEConfig+0x3c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d002      	beq.n	8001c36 <RCC_LSEConfig+0x22>
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d004      	beq.n	8001c3e <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8001c34:	e007      	b.n	8001c46 <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <RCC_LSEConfig+0x3c>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e003      	b.n	8001c46 <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <RCC_LSEConfig+0x3c>)
 8001c40:	2205      	movs	r2, #5
 8001c42:	701a      	strb	r2, [r3, #0]
      break;
 8001c44:	bf00      	nop
    default:
      break;
  }
}
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023870 	andmi	r3, r2, r0, ror r8

08001c54 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <RCC_LSICmd+0x1c>)
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	42470e80 	submi	r0, r7, #128, 28	; 0x800

08001c74 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <RCC_PLLConfig+0x38>)
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	0191      	lsls	r1, r2, #6
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	0852      	lsrs	r2, r2, #1
 8001c90:	3a01      	subs	r2, #1
 8001c92:	0412      	lsls	r2, r2, #16
 8001c94:	4311      	orrs	r1, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023800 	andmi	r3, r2, r0, lsl #16

08001cb0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <RCC_PLLCmd+0x1c>)
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	42470060 	submi	r0, r7, #96	; 0x60

08001cd0 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <RCC_PLLI2SConfig+0x2c>)
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	0191      	lsls	r1, r2, #6
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	0612      	lsls	r2, r2, #24
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	0712      	lsls	r2, r2, #28
 8001cec:	430a      	orrs	r2, r1
 8001cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40023800 	andmi	r3, r2, r0, lsl #16

08001d00 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <RCC_PLLI2SCmd+0x1c>)
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	42470068 	submi	r0, r7, #104	; 0x68

08001d20 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <RCC_PLLSAIConfig+0x2c>)
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	0191      	lsls	r1, r2, #6
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	0612      	lsls	r2, r2, #24
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	0712      	lsls	r2, r2, #28
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40023800 	andmi	r3, r2, r0, lsl #16

08001d50 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <RCC_PLLSAICmd+0x1c>)
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	601a      	str	r2, [r3, #0]
}
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	42470070 	submi	r0, r7, #112	; 0x70

08001d70 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <RCC_ClockSecuritySystemCmd+0x1c>)
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	4247004c 	submi	r0, r7, #76	; 0x4c

08001d90 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <RCC_MCO1Config+0x38>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <RCC_MCO1Config+0x38>)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
}
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40023800 	andmi	r3, r2, r0, lsl #16

08001dcc <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <RCC_MCO2Config+0x38>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <RCC_MCO2Config+0x38>)
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	609a      	str	r2, [r3, #8]
}
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	andmi	r3, r2, r0, lsl #16

08001e08 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <RCC_SYSCLKConfig+0x34>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f023 0303 	bic.w	r3, r3, #3
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <RCC_SYSCLKConfig+0x34>)
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	andmi	r3, r2, r0, lsl #16

08001e40 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <RCC_GetSYSCLKSource+0x1c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	b2db      	uxtb	r3, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	andmi	r3, r2, r0, lsl #16

08001e60 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <RCC_HCLKConfig+0x34>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <RCC_HCLKConfig+0x34>)
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	andmi	r3, r2, r0, lsl #16

08001e98 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <RCC_PCLK1Config+0x34>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <RCC_PCLK1Config+0x34>)
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	andmi	r3, r2, r0, lsl #16

08001ed0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <RCC_PCLK2Config+0x34>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <RCC_PCLK2Config+0x34>)
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
}
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40023800 	andmi	r3, r2, r0, lsl #16

08001f08 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	2302      	movs	r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f28:	4b48      	ldr	r3, [pc, #288]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d007      	beq.n	8001f48 <RCC_GetClocksFreq+0x40>
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d009      	beq.n	8001f50 <RCC_GetClocksFreq+0x48>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d13f      	bne.n	8001fc0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a43      	ldr	r2, [pc, #268]	; (8002050 <RCC_GetClocksFreq+0x148>)
 8001f44:	601a      	str	r2, [r3, #0]
      break;
 8001f46:	e03f      	b.n	8001fc8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a42      	ldr	r2, [pc, #264]	; (8002054 <RCC_GetClocksFreq+0x14c>)
 8001f4c:	601a      	str	r2, [r3, #0]
      break;
 8001f4e:	e03b      	b.n	8001fc8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001f50:	4b3e      	ldr	r3, [pc, #248]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	0d9b      	lsrs	r3, r3, #22
 8001f5a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001f6c:	4a39      	ldr	r2, [pc, #228]	; (8002054 <RCC_GetClocksFreq+0x14c>)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	fb03 f302 	mul.w	r3, r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e00c      	b.n	8001fa2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001f88:	4a31      	ldr	r2, [pc, #196]	; (8002050 <RCC_GetClocksFreq+0x148>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f98:	400b      	ands	r3, r1
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	fb03 f302 	mul.w	r3, r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	3301      	adds	r3, #1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
      break;
 8001fbe:	e003      	b.n	8001fc8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <RCC_GetClocksFreq+0x148>)
 8001fc4:	601a      	str	r2, [r3, #0]
      break;
 8001fc6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <RCC_GetClocksFreq+0x150>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	40da      	lsrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <RCC_GetClocksFreq+0x144>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ff8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	0a9b      	lsrs	r3, r3, #10
 8001ffe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <RCC_GetClocksFreq+0x150>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	40da      	lsrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <RCC_GetClocksFreq+0x144>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002020:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	0b5b      	lsrs	r3, r3, #13
 8002026:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <RCC_GetClocksFreq+0x150>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	40da      	lsrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
}
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	andmi	r3, r2, r0, lsl #16
 8002050:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8002054:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8002058:	20000014 	andcs	r0, r0, r4, lsl r0

0800205c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002072:	d111      	bne.n	8002098 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <RCC_RTCCLKConfig+0x58>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002080:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <RCC_RTCCLKConfig+0x58>)
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <RCC_RTCCLKConfig+0x58>)
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <RCC_RTCCLKConfig+0x58>)
 800209c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80020a4:	430a      	orrs	r2, r1
 80020a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	andmi	r3, r2, r0, lsl #16

080020b8 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <RCC_RTCCLKCmd+0x1c>)
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

080020d8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <RCC_BackupResetCmd+0x1c>)
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	42470e40 	submi	r0, r7, #64, 28	; 0x400

080020f8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <RCC_I2SCLKConfig+0x18>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	4247015c 	submi	r0, r7, #92, 2

08002114 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCC_SAIPLLI2SClkDivConfig+0x38>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002126:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 031f 	bic.w	r3, r3, #31
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40023800 	andmi	r3, r2, r0, lsl #16

08002150 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800215e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002162:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800216a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	andmi	r3, r2, r0, lsl #16

08002190 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <RCC_SAIBlockACLKConfig+0x38>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <RCC_SAIBlockACLKConfig+0x38>)
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	andmi	r3, r2, r0, lsl #16

080021cc <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <RCC_SAIBlockBCLKConfig+0x38>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021de:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <RCC_SAIBlockBCLKConfig+0x38>)
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	andmi	r3, r2, r0, lsl #16

08002208 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <RCC_LTDCCLKDivConfig+0x38>)
 8002216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800221a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <RCC_LTDCCLKDivConfig+0x38>)
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	andmi	r3, r2, r0, lsl #16

08002244 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <RCC_TIMCLKPresConfig+0x18>)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
  
}
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	424711e0 	submi	r1, r7, #224, 2	; 0x38

08002260 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <RCC_AHB1PeriphClockCmd+0x38>)
 8002274:	4a08      	ldr	r2, [pc, #32]	; (8002298 <RCC_AHB1PeriphClockCmd+0x38>)
 8002276:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
 800227e:	e006      	b.n	800228e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <RCC_AHB1PeriphClockCmd+0x38>)
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <RCC_AHB1PeriphClockCmd+0x38>)
 8002284:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	43d2      	mvns	r2, r2
 800228a:	400a      	ands	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40023800 	andmi	r3, r2, r0, lsl #16

0800229c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <RCC_AHB2PeriphClockCmd+0x38>)
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <RCC_AHB2PeriphClockCmd+0x38>)
 80022b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ba:	e006      	b.n	80022ca <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <RCC_AHB2PeriphClockCmd+0x38>)
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <RCC_AHB2PeriphClockCmd+0x38>)
 80022c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	43d2      	mvns	r2, r2
 80022c6:	400a      	ands	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40023800 	andmi	r3, r2, r0, lsl #16

080022d8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <RCC_AHB3PeriphClockCmd+0x38>)
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <RCC_AHB3PeriphClockCmd+0x38>)
 80022ee:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
 80022f6:	e006      	b.n	8002306 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <RCC_AHB3PeriphClockCmd+0x38>)
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <RCC_AHB3PeriphClockCmd+0x38>)
 80022fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	43d2      	mvns	r2, r2
 8002302:	400a      	ands	r2, r1
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40023800 	andmi	r3, r2, r0, lsl #16

08002314 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <RCC_APB1PeriphClockCmd+0x38>)
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <RCC_APB1PeriphClockCmd+0x38>)
 800232a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	430a      	orrs	r2, r1
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
 8002332:	e006      	b.n	8002342 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <RCC_APB1PeriphClockCmd+0x38>)
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <RCC_APB1PeriphClockCmd+0x38>)
 8002338:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	43d2      	mvns	r2, r2
 800233e:	400a      	ands	r2, r1
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40023800 	andmi	r3, r2, r0, lsl #16

08002350 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <RCC_APB2PeriphClockCmd+0x38>)
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <RCC_APB2PeriphClockCmd+0x38>)
 8002366:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	430a      	orrs	r2, r1
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
 800236e:	e006      	b.n	800237e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <RCC_APB2PeriphClockCmd+0x38>)
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <RCC_APB2PeriphClockCmd+0x38>)
 8002374:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	43d2      	mvns	r2, r2
 800237a:	400a      	ands	r2, r1
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40023800 	andmi	r3, r2, r0, lsl #16

0800238c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <RCC_AHB1PeriphResetCmd+0x38>)
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <RCC_AHB1PeriphResetCmd+0x38>)
 80023a2:	6911      	ldr	r1, [r2, #16]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e006      	b.n	80023ba <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <RCC_AHB1PeriphResetCmd+0x38>)
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <RCC_AHB1PeriphResetCmd+0x38>)
 80023b0:	6911      	ldr	r1, [r2, #16]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	43d2      	mvns	r2, r2
 80023b6:	400a      	ands	r2, r1
 80023b8:	611a      	str	r2, [r3, #16]
  }
}
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40023800 	andmi	r3, r2, r0, lsl #16

080023c8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <RCC_AHB2PeriphResetCmd+0x38>)
 80023dc:	4a08      	ldr	r2, [pc, #32]	; (8002400 <RCC_AHB2PeriphResetCmd+0x38>)
 80023de:	6951      	ldr	r1, [r2, #20]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	615a      	str	r2, [r3, #20]
 80023e6:	e006      	b.n	80023f6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <RCC_AHB2PeriphResetCmd+0x38>)
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <RCC_AHB2PeriphResetCmd+0x38>)
 80023ec:	6951      	ldr	r1, [r2, #20]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	43d2      	mvns	r2, r2
 80023f2:	400a      	ands	r2, r1
 80023f4:	615a      	str	r2, [r3, #20]
  }
}
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40023800 	andmi	r3, r2, r0, lsl #16

08002404 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <RCC_AHB3PeriphResetCmd+0x38>)
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <RCC_AHB3PeriphResetCmd+0x38>)
 800241a:	6991      	ldr	r1, [r2, #24]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	430a      	orrs	r2, r1
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	e006      	b.n	8002432 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <RCC_AHB3PeriphResetCmd+0x38>)
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <RCC_AHB3PeriphResetCmd+0x38>)
 8002428:	6991      	ldr	r1, [r2, #24]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	43d2      	mvns	r2, r2
 800242e:	400a      	ands	r2, r1
 8002430:	619a      	str	r2, [r3, #24]
  }
}
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40023800 	andmi	r3, r2, r0, lsl #16

08002440 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <RCC_APB1PeriphResetCmd+0x38>)
 8002454:	4a08      	ldr	r2, [pc, #32]	; (8002478 <RCC_APB1PeriphResetCmd+0x38>)
 8002456:	6a11      	ldr	r1, [r2, #32]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	430a      	orrs	r2, r1
 800245c:	621a      	str	r2, [r3, #32]
 800245e:	e006      	b.n	800246e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <RCC_APB1PeriphResetCmd+0x38>)
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <RCC_APB1PeriphResetCmd+0x38>)
 8002464:	6a11      	ldr	r1, [r2, #32]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	43d2      	mvns	r2, r2
 800246a:	400a      	ands	r2, r1
 800246c:	621a      	str	r2, [r3, #32]
  }
}
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023800 	andmi	r3, r2, r0, lsl #16

0800247c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <RCC_APB2PeriphResetCmd+0x38>)
 8002490:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <RCC_APB2PeriphResetCmd+0x38>)
 8002492:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	430a      	orrs	r2, r1
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
 800249a:	e006      	b.n	80024aa <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <RCC_APB2PeriphResetCmd+0x38>)
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <RCC_APB2PeriphResetCmd+0x38>)
 80024a0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	43d2      	mvns	r2, r2
 80024a6:	400a      	ands	r2, r1
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40023800 	andmi	r3, r2, r0, lsl #16

080024b8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80024cc:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80024ce:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50
 80024d6:	e006      	b.n	80024e6 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 80024dc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	43d2      	mvns	r2, r2
 80024e2:	400a      	ands	r2, r1
 80024e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40023800 	andmi	r3, r2, r0, lsl #16

080024f4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8002508:	4a08      	ldr	r2, [pc, #32]	; (800252c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800250a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	430a      	orrs	r2, r1
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
 8002512:	e006      	b.n	8002522 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8002518:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	43d2      	mvns	r2, r2
 800251e:	400a      	ands	r2, r1
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40023800 	andmi	r3, r2, r0, lsl #16

08002530 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002546:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	430a      	orrs	r2, r1
 800254c:	659a      	str	r2, [r3, #88]	; 0x58
 800254e:	e006      	b.n	800255e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8002554:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	43d2      	mvns	r2, r2
 800255a:	400a      	ands	r2, r1
 800255c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40023800 	andmi	r3, r2, r0, lsl #16

0800256c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002582:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	430a      	orrs	r2, r1
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
 800258a:	e006      	b.n	800259a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8002590:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	43d2      	mvns	r2, r2
 8002596:	400a      	ands	r2, r1
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40023800 	andmi	r3, r2, r0, lsl #16

080025a8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 80025bc:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 80025be:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	665a      	str	r2, [r3, #100]	; 0x64
 80025c6:	e006      	b.n	80025d6 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 80025cc:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	43d2      	mvns	r2, r2
 80025d2:	400a      	ands	r2, r1
 80025d4:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40023800 	andmi	r3, r2, r0, lsl #16

080025e4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	71fa      	strb	r2, [r7, #7]
 80025f0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <RCC_ITConfig+0x44>)
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <RCC_ITConfig+0x44>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	b2d1      	uxtb	r1, r2
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	430a      	orrs	r2, r1
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e009      	b.n	800261e <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <RCC_ITConfig+0x44>)
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <RCC_ITConfig+0x44>)
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	b2d1      	uxtb	r1, r2
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	43d2      	mvns	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	400a      	ands	r2, r1
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
  }
}
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	4002380d 	andmi	r3, r2, sp, lsl #16

0800262c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	b2db      	uxtb	r3, r3
 8002648:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d103      	bne.n	8002658 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <RCC_GetFlagStatus+0x70>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e009      	b.n	800266c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d103      	bne.n	8002666 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <RCC_GetFlagStatus+0x70>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e002      	b.n	800266c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <RCC_GetFlagStatus+0x70>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002684:	2301      	movs	r3, #1
 8002686:	74fb      	strb	r3, [r7, #19]
 8002688:	e001      	b.n	800268e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40023800 	andmi	r3, r2, r0, lsl #16

080026a0 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <RCC_ClearFlag+0x18>)
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <RCC_ClearFlag+0x18>)
 80026a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80026ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40023800 	andmi	r3, r2, r0, lsl #16

080026bc <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <RCC_GetITStatus+0x34>)
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e001      	b.n	80026e0 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	andmi	r3, r2, r0, lsl #16

080026f4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <RCC_ClearITPendingBit+0x1c>)
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	4002380e 	andmi	r3, r2, lr, lsl #16

08002714 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <USART_DeInit+0xf4>)
 8002720:	429a      	cmp	r2, r3
 8002722:	d108      	bne.n	8002736 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002724:	2010      	movs	r0, #16
 8002726:	2101      	movs	r1, #1
 8002728:	f7ff fea8 	bl	800247c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800272c:	2010      	movs	r0, #16
 800272e:	2100      	movs	r1, #0
 8002730:	f7ff fea4 	bl	800247c <RCC_APB2PeriphResetCmd>
 8002734:	e065      	b.n	8002802 <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <USART_DeInit+0xf8>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d10a      	bne.n	8002754 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800273e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002742:	2101      	movs	r1, #1
 8002744:	f7ff fe7c 	bl	8002440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002748:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800274c:	2100      	movs	r1, #0
 800274e:	f7ff fe77 	bl	8002440 <RCC_APB1PeriphResetCmd>
 8002752:	e056      	b.n	8002802 <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <USART_DeInit+0xfc>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d10a      	bne.n	8002772 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800275c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002760:	2101      	movs	r1, #1
 8002762:	f7ff fe6d 	bl	8002440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002766:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800276a:	2100      	movs	r1, #0
 800276c:	f7ff fe68 	bl	8002440 <RCC_APB1PeriphResetCmd>
 8002770:	e047      	b.n	8002802 <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <USART_DeInit+0x100>)
 8002776:	429a      	cmp	r2, r3
 8002778:	d10a      	bne.n	8002790 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800277a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800277e:	2101      	movs	r1, #1
 8002780:	f7ff fe5e 	bl	8002440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002784:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002788:	2100      	movs	r1, #0
 800278a:	f7ff fe59 	bl	8002440 <RCC_APB1PeriphResetCmd>
 800278e:	e038      	b.n	8002802 <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <USART_DeInit+0x104>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d10a      	bne.n	80027ae <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002798:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800279c:	2101      	movs	r1, #1
 800279e:	f7ff fe4f 	bl	8002440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80027a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027a6:	2100      	movs	r1, #0
 80027a8:	f7ff fe4a 	bl	8002440 <RCC_APB1PeriphResetCmd>
 80027ac:	e029      	b.n	8002802 <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <USART_DeInit+0x108>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d108      	bne.n	80027c8 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80027b6:	2020      	movs	r0, #32
 80027b8:	2101      	movs	r1, #1
 80027ba:	f7ff fe5f 	bl	800247c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80027be:	2020      	movs	r0, #32
 80027c0:	2100      	movs	r1, #0
 80027c2:	f7ff fe5b 	bl	800247c <RCC_APB2PeriphResetCmd>
 80027c6:	e01c      	b.n	8002802 <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <USART_DeInit+0x10c>)
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d10a      	bne.n	80027e6 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 80027d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027d4:	2101      	movs	r1, #1
 80027d6:	f7ff fe33 	bl	8002440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 80027da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027de:	2100      	movs	r1, #0
 80027e0:	f7ff fe2e 	bl	8002440 <RCC_APB1PeriphResetCmd>
 80027e4:	e00d      	b.n	8002802 <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <USART_DeInit+0x110>)
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d109      	bne.n	8002802 <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 80027ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80027f2:	2101      	movs	r1, #1
 80027f4:	f7ff fe24 	bl	8002440 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 80027f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80027fc:	2100      	movs	r1, #0
 80027fe:	f7ff fe1f 	bl	8002440 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40011000 	andmi	r1, r1, r0
 800280c:	40004400 	andmi	r4, r0, r0, lsl #8
 8002810:	40004800 	andmi	r4, r0, r0, lsl #16
 8002814:	40004c00 	andmi	r4, r0, r0, lsl #24
 8002818:	40005000 	andmi	r5, r0, r0
 800281c:	40011400 	andmi	r1, r1, r0, lsl #8
 8002820:	40007800 	andmi	r7, r0, r0, lsl #16
 8002824:	40007c00 	andmi	r7, r0, r0, lsl #24

08002828 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8a1b      	ldrh	r3, [r3, #16]
 8002846:	b29b      	uxth	r3, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	88db      	ldrh	r3, [r3, #6]
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	4313      	orrs	r3, r2
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	899b      	ldrh	r3, [r3, #12]
 8002868:	b29b      	uxth	r3, r3
 800286a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002872:	f023 030c 	bic.w	r3, r3, #12
 8002876:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	889a      	ldrh	r2, [r3, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	891b      	ldrh	r3, [r3, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002888:	4313      	orrs	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	4313      	orrs	r3, r2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8a9b      	ldrh	r3, [r3, #20]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	899b      	ldrh	r3, [r3, #12]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	4313      	orrs	r3, r2
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fb21 	bl	8001f08 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <USART_Init+0x168>)
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d003      	beq.n	80028d6 <USART_Init+0xae>
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <USART_Init+0x16c>)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d102      	bne.n	80028dc <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	e001      	b.n	80028e0 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	899b      	ldrh	r3, [r3, #12]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da0c      	bge.n	8002908 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009a      	lsls	r2, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e00b      	b.n	8002920 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <USART_Init+0x170>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	2264      	movs	r2, #100	; 0x64
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	899b      	ldrh	r3, [r3, #12]
 8002942:	b29b      	uxth	r3, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	b21b      	sxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0d      	bge.n	8002968 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <USART_Init+0x170>)
 8002956:	fba3 1302 	umull	r1, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	4313      	orrs	r3, r2
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	e00c      	b.n	8002982 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <USART_Init+0x170>)
 8002972:	fba3 1302 	umull	r1, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	4313      	orrs	r3, r2
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	b29a      	uxth	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	811a      	strh	r2, [r3, #8]
}
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40011000 	andmi	r1, r1, r0
 8002994:	40011400 	andmi	r1, r1, r0, lsl #8
 8002998:	51eb851f 	mvnpl	r8, pc, lsl r5

0800299c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029aa:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	220c      	movs	r2, #12
 80029c2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	819a      	strh	r2, [r3, #12]
}
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8a1b      	ldrh	r3, [r3, #16]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80029fa:	4313      	orrs	r3, r2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	889b      	ldrh	r3, [r3, #4]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	88db      	ldrh	r3, [r3, #6]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	821a      	strh	r2, [r3, #16]
}
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	80da      	strh	r2, [r3, #6]
}
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	899b      	ldrh	r3, [r3, #12]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	819a      	strh	r2, [r3, #12]
 8002a76:	e007      	b.n	8002a88 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	899b      	ldrh	r3, [r3, #12]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	819a      	strh	r2, [r3, #12]
  }
}
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop

08002a94 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8b1b      	ldrh	r3, [r3, #24]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8b1b      	ldrh	r3, [r3, #24]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	831a      	strh	r2, [r3, #24]
}
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	899b      	ldrh	r3, [r3, #12]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	819a      	strh	r2, [r3, #12]
 8002af2:	e007      	b.n	8002b04 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	899b      	ldrh	r3, [r3, #12]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	819a      	strh	r2, [r3, #12]
  }
}  
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8a9b      	ldrh	r3, [r3, #20]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	829a      	strh	r2, [r3, #20]
 8002b32:	e007      	b.n	8002b44 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8a9b      	ldrh	r3, [r3, #20]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	829a      	strh	r2, [r3, #20]
  }
}
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	809a      	strh	r2, [r3, #4]
}
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop

08002b74 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	889b      	ldrh	r3, [r3, #4]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	b29b      	uxth	r3, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8a1b      	ldrh	r3, [r3, #16]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f023 030f 	bic.w	r3, r3, #15
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8a1b      	ldrh	r3, [r3, #16]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	821a      	strh	r2, [r3, #16]
}
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	899b      	ldrh	r3, [r3, #12]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	819a      	strh	r2, [r3, #12]
 8002bee:	e007      	b.n	8002c00 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	899b      	ldrh	r3, [r3, #12]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f023 0302 	bic.w	r3, r3, #2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	819a      	strh	r2, [r3, #12]
  }
}
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop

08002c0c <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	899b      	ldrh	r3, [r3, #12]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	899b      	ldrh	r3, [r3, #12]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	819a      	strh	r2, [r3, #12]
}
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop

08002c44 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8a1b      	ldrh	r3, [r3, #16]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f023 0320 	bic.w	r3, r3, #32
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8a1b      	ldrh	r3, [r3, #16]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	821a      	strh	r2, [r3, #16]
}
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop

08002c7c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8a1b      	ldrh	r3, [r3, #16]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	821a      	strh	r2, [r3, #16]
 8002c9e:	e007      	b.n	8002cb0 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8a1b      	ldrh	r3, [r3, #16]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	821a      	strh	r2, [r3, #16]
  }
}
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	899b      	ldrh	r3, [r3, #12]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	819a      	strh	r2, [r3, #12]
}
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8a9b      	ldrh	r3, [r3, #20]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	829a      	strh	r2, [r3, #20]
 8002d02:	e007      	b.n	8002d14 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8a9b      	ldrh	r3, [r3, #20]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f023 0308 	bic.w	r3, r3, #8
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	829a      	strh	r2, [r3, #20]
  }
}
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8b1b      	ldrh	r3, [r3, #24]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8b1b      	ldrh	r3, [r3, #24]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	831a      	strh	r2, [r3, #24]
}
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop

08002d5c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8a9b      	ldrh	r3, [r3, #20]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f043 0320 	orr.w	r3, r3, #32
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	829a      	strh	r2, [r3, #20]
 8002d7e:	e007      	b.n	8002d90 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8a9b      	ldrh	r3, [r3, #20]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f023 0320 	bic.w	r3, r3, #32
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	829a      	strh	r2, [r3, #20]
  }
}
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8a9b      	ldrh	r3, [r3, #20]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	829a      	strh	r2, [r3, #20]
 8002dbe:	e007      	b.n	8002dd0 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8a9b      	ldrh	r3, [r3, #20]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	829a      	strh	r2, [r3, #20]
  }
}
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop

08002ddc <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8a9b      	ldrh	r3, [r3, #20]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8a9b      	ldrh	r3, [r3, #20]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	829a      	strh	r2, [r3, #20]
}
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop

08002e14 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8a9b      	ldrh	r3, [r3, #20]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	829a      	strh	r2, [r3, #20]
 8002e36:	e007      	b.n	8002e48 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8a9b      	ldrh	r3, [r3, #20]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f023 0302 	bic.w	r3, r3, #2
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	829a      	strh	r2, [r3, #20]
  }
}
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	460a      	mov	r2, r1
 8002e60:	807a      	strh	r2, [r7, #2]
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8a9b      	ldrh	r3, [r3, #20]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	829a      	strh	r2, [r3, #20]
 8002e7a:	e009      	b.n	8002e90 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8a9b      	ldrh	r3, [r3, #20]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	829a      	strh	r2, [r3, #20]
  }
}
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	807a      	strh	r2, [r7, #2]
 8002eaa:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d103      	bne.n	8002eea <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e009      	b.n	8002efe <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d103      	bne.n	8002ef8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3310      	adds	r3, #16
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e002      	b.n	8002efe <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3314      	adds	r3, #20
 8002efc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002efe:	787b      	ldrb	r3, [r7, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6811      	ldr	r1, [r2, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e006      	b.n	8002f20 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6811      	ldr	r1, [r2, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	43d2      	mvns	r2, r2
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
  }
}
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	e001      	b.n	8002f56 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	801a      	strh	r2, [r3, #0]
}
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d106      	bne.n	8002fd0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	899b      	ldrh	r3, [r3, #12]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e00f      	b.n	8002ff0 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d106      	bne.n	8002fe4 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8a1b      	ldrh	r3, [r3, #16]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e005      	b.n	8002ff0 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8a9b      	ldrh	r3, [r3, #20]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <USART_GetITStatus+0x9c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	74fb      	strb	r3, [r7, #19]
 800301e:	e001      	b.n	8003024 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003024:	7cfb      	ldrb	r3, [r7, #19]
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8003040:	2300      	movs	r3, #0
 8003042:	81fb      	strh	r3, [r7, #14]
 8003044:	2300      	movs	r3, #0
 8003046:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800304e:	89fb      	ldrh	r3, [r7, #14]
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8003058:	89bb      	ldrh	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	801a      	strh	r2, [r3, #0]
}
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003070:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003074:	2101      	movs	r1, #1
 8003076:	f7ff fa01 	bl	800247c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800307a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800307e:	2100      	movs	r1, #0
 8003080:	f7ff f9fc 	bl	800247c <RCC_APB2PeriphResetCmd>
}
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop

08003088 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <SYSCFG_MemoryRemapConfig+0x1c>)
 8003094:	79fa      	ldrb	r2, [r7, #7]
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40013800 	andmi	r3, r1, r0, lsl #16

080030a8 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SYSCFG_MemorySwappingBank+0x1c>)
 80030b4:	79fa      	ldrb	r2, [r7, #7]
 80030b6:	601a      	str	r2, [r3, #0]
}
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	42270020 	eormi	r0, r7, #32

080030c8 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80030c8:	b490      	push	{r4, r7}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	71fa      	strb	r2, [r7, #7]
 80030d4:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80030da:	79bb      	ldrb	r3, [r7, #6]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <SYSCFG_EXTILineConfig+0x78>)
 80030ec:	79ba      	ldrb	r2, [r7, #6]
 80030ee:	0892      	lsrs	r2, r2, #2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4913      	ldr	r1, [pc, #76]	; (8003140 <SYSCFG_EXTILineConfig+0x78>)
 80030f4:	79b8      	ldrb	r0, [r7, #6]
 80030f6:	0880      	lsrs	r0, r0, #2
 80030f8:	b2c0      	uxtb	r0, r0
 80030fa:	3002      	adds	r0, #2
 80030fc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	43c9      	mvns	r1, r1
 8003104:	4001      	ands	r1, r0
 8003106:	3202      	adds	r2, #2
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <SYSCFG_EXTILineConfig+0x78>)
 800310e:	79ba      	ldrb	r2, [r7, #6]
 8003110:	0892      	lsrs	r2, r2, #2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	490a      	ldr	r1, [pc, #40]	; (8003140 <SYSCFG_EXTILineConfig+0x78>)
 8003116:	79b8      	ldrb	r0, [r7, #6]
 8003118:	0880      	lsrs	r0, r0, #2
 800311a:	b2c0      	uxtb	r0, r0
 800311c:	3002      	adds	r0, #2
 800311e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003122:	79fc      	ldrb	r4, [r7, #7]
 8003124:	79b9      	ldrb	r1, [r7, #6]
 8003126:	f001 0103 	and.w	r1, r1, #3
 800312a:	0089      	lsls	r1, r1, #2
 800312c:	fa04 f101 	lsl.w	r1, r4, r1
 8003130:	4301      	orrs	r1, r0
 8003132:	3202      	adds	r2, #2
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bc90      	pop	{r4, r7}
 800313e:	4770      	bx	lr
 8003140:	40013800 	andmi	r3, r1, r0, lsl #16

08003144 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	422700dc 	eormi	r0, r7, #220	; 0xdc

08003160 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <SYSCFG_CompensationCellCmd+0x1c>)
 800316c:	79fa      	ldrb	r2, [r7, #7]
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	42270400 	eormi	r0, r7, #0, 8

08003180 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8003186:	2300      	movs	r3, #0
 8003188:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <SYSCFG_GetCompensationCellStatus+0x30>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	71fb      	strb	r3, [r7, #7]
 800319a:	e001      	b.n	80031a0 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80031a0:	79fb      	ldrb	r3, [r7, #7]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40013800 	andmi	r3, r1, r0, lsl #16

080031b4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <I2C_DeInit+0x68>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10a      	bne.n	80031da <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80031c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80031c8:	2101      	movs	r1, #1
 80031ca:	f7ff f939 	bl	8002440 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80031ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80031d2:	2100      	movs	r1, #0
 80031d4:	f7ff f934 	bl	8002440 <RCC_APB1PeriphResetCmd>
 80031d8:	e01c      	b.n	8003214 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <I2C_DeInit+0x6c>)
 80031de:	429a      	cmp	r2, r3
 80031e0:	d10a      	bne.n	80031f8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80031e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80031e6:	2101      	movs	r1, #1
 80031e8:	f7ff f92a 	bl	8002440 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80031ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80031f0:	2100      	movs	r1, #0
 80031f2:	f7ff f925 	bl	8002440 <RCC_APB1PeriphResetCmd>
 80031f6:	e00d      	b.n	8003214 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <I2C_DeInit+0x70>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d109      	bne.n	8003214 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8003200:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003204:	2101      	movs	r1, #1
 8003206:	f7ff f91b 	bl	8002440 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800320a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800320e:	2100      	movs	r1, #0
 8003210:	f7ff f916 	bl	8002440 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40005400 	andmi	r5, r0, r0, lsl #8
 8003220:	40005800 	andmi	r5, r0, r0, lsl #16
 8003224:	40005c00 	andmi	r5, r0, r0, lsl #24

08003228 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003236:	2300      	movs	r3, #0
 8003238:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800323a:	2304      	movs	r3, #4
 800323c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800323e:	4b57      	ldr	r3, [pc, #348]	; (800339c <I2C_Init+0x174>)
 8003240:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	889b      	ldrh	r3, [r3, #4]
 8003246:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800324a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800324e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fe57 	bl	8001f08 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <I2C_Init+0x178>)
 8003262:	fba3 1302 	umull	r1, r3, r3, r2
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800326a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800326c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800326e:	4313      	orrs	r3, r2
 8003270:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003276:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <I2C_Init+0x17c>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d815      	bhi.n	80032c2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80032a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d801      	bhi.n	80032ae <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80032aa:	2304      	movs	r3, #4
 80032ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80032ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032b2:	4313      	orrs	r3, r2
 80032b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80032b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	841a      	strh	r2, [r3, #32]
 80032c0:	e040      	b.n	8003344 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	88da      	ldrh	r2, [r3, #6]
 80032c6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d109      	bne.n	80032e2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80032e0:	e00e      	b.n	8003300 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009a      	lsls	r2, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80032f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8003300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800330a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8003312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003316:	4313      	orrs	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003322:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <I2C_Init+0x180>)
 8003330:	fb82 1203 	smull	r1, r2, r2, r3
 8003334:	1192      	asrs	r2, r2, #6
 8003336:	17db      	asrs	r3, r3, #31
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b29b      	uxth	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003348:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003362:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003366:	f023 0302 	bic.w	r3, r3, #2
 800336a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	889a      	ldrh	r2, [r3, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	895b      	ldrh	r3, [r3, #10]
 8003374:	4313      	orrs	r3, r2
 8003376:	b29a      	uxth	r2, r3
 8003378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800337a:	4313      	orrs	r3, r2
 800337c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003382:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	899a      	ldrh	r2, [r3, #12]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	891b      	ldrh	r3, [r3, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	811a      	strh	r2, [r3, #8]
}
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80033a0:	431bde83 	tstmi	fp, #2096	; 0x830
 80033a4:	000186a0 	andeq	r8, r1, r0, lsr #13
 80033a8:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

080033ac <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80033c8:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033dc:	819a      	strh	r2, [r3, #12]
}
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e007      	b.n	800341c <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	801a      	strh	r2, [r3, #0]
  }
}
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800343e:	b29b      	uxth	r3, r3
 8003440:	f023 0310 	bic.w	r3, r3, #16
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	849a      	strh	r2, [r3, #36]	; 0x24
 800344a:	e007      	b.n	800345c <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003450:	b29b      	uxth	r3, r3
 8003452:	f043 0310 	orr.w	r3, r3, #16
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop

08003468 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800347c:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800347e:	89fb      	ldrh	r3, [r7, #14]
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b29a      	uxth	r2, r3
 800348e:	89fb      	ldrh	r3, [r7, #14]
 8003490:	4313      	orrs	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	e007      	b.n	80034dc <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	801a      	strh	r2, [r3, #0]
  }
}
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	e007      	b.n	800351c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	801a      	strh	r2, [r3, #0]
  }
}
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	460a      	mov	r2, r1
 8003534:	70fa      	strb	r2, [r7, #3]
 8003536:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003538:	78bb      	ldrb	r3, [r7, #2]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	70fb      	strb	r3, [r7, #3]
 8003546:	e003      	b.n	8003550 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	821a      	strh	r2, [r3, #16]
}
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	e007      	b.n	8003598 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	801a      	strh	r2, [r3, #0]
  }
}
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	899b      	ldrh	r3, [r3, #12]
 80035b8:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80035c0:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	89fa      	ldrh	r2, [r7, #14]
 80035d8:	819a      	strh	r2, [r3, #12]
}
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	899b      	ldrh	r3, [r3, #12]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	819a      	strh	r2, [r3, #12]
 8003606:	e007      	b.n	8003618 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	899b      	ldrh	r3, [r3, #12]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	819a      	strh	r2, [r3, #12]
  }
}
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e007      	b.n	8003658 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	801a      	strh	r2, [r3, #0]
  }
}
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e007      	b.n	800369c <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	801a      	strh	r2, [r3, #0]
  }
}
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop

080036a8 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e007      	b.n	80036dc <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	801a      	strh	r2, [r3, #0]
  }
}
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fa:	d008      	beq.n	800370e <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8b9b      	ldrh	r3, [r3, #28]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	839a      	strh	r2, [r3, #28]
 800370c:	e007      	b.n	800371e <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8b9b      	ldrh	r3, [r3, #28]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	839a      	strh	r2, [r3, #28]
  }
}
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373a:	d108      	bne.n	800374e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	e007      	b.n	800375e <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	801a      	strh	r2, [r3, #0]
  }
}
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377a:	d108      	bne.n	800378e <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	e007      	b.n	800379e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	801a      	strh	r2, [r3, #0]
  }
}
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	e007      	b.n	80037dc <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	801a      	strh	r2, [r3, #0]
  }
}
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	821a      	strh	r2, [r3, #16]
}
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8a1b      	ldrh	r3, [r3, #16]
 8003814:	b29b      	uxth	r3, r3
 8003816:	b2db      	uxtb	r3, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	801a      	strh	r2, [r3, #0]
  }
}
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	d108      	bne.n	800388a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e007      	b.n	800389a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	801a      	strh	r2, [r3, #0]
  }
}
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f023 0320 	bic.w	r3, r3, #32
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	801a      	strh	r2, [r3, #0]
  }
}
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop

080038e4 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8b1b      	ldrh	r3, [r3, #24]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	809a      	strh	r2, [r3, #4]
 8003926:	e007      	b.n	8003938 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	889b      	ldrh	r3, [r3, #4]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	809a      	strh	r2, [r3, #4]
  }
}
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop

08003944 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	889b      	ldrh	r3, [r3, #4]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	809a      	strh	r2, [r3, #4]
 8003966:	e007      	b.n	8003978 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	889b      	ldrh	r3, [r3, #4]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	809a      	strh	r2, [r3, #4]
  }
}
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	460a      	mov	r2, r1
 80039c0:	807a      	strh	r2, [r7, #2]
 80039c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	889b      	ldrh	r3, [r3, #4]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	809a      	strh	r2, [r3, #4]
 80039da:	e009      	b.n	80039f0 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	809a      	strh	r2, [r3, #4]
  }
}
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop

080039fc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8a9b      	ldrh	r3, [r3, #20]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8b1b      	ldrh	r3, [r3, #24]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a36:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d102      	bne.n	8003a4a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
 8003a48:	e001      	b.n	8003a4e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8a9b      	ldrh	r3, [r3, #20]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8b1b      	ldrh	r3, [r3, #24]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a90:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8003a92:	697b      	ldr	r3, [r7, #20]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	0f1b      	lsrs	r3, r3, #28
 8003abe:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ac6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e005      	b.n	8003ae2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
 8003af2:	e001      	b.n	8003af8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop

08003b08 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	829a      	strh	r2, [r3, #20]
}
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003b4c:	0c1a      	lsrs	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b5e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8a9b      	ldrh	r3, [r3, #20]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <I2C_GetITStatus+0x48>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e001      	b.n	8003b80 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	829a      	strh	r2, [r3, #20]
}
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 0201 	bic.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <DMA_DeInit+0x150>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d103      	bne.n	8003c04 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8003bfc:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <DMA_DeInit+0x154>)
 8003bfe:	223d      	movs	r2, #61	; 0x3d
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e07e      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <DMA_DeInit+0x158>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d104      	bne.n	8003c16 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8003c0c:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <DMA_DeInit+0x154>)
 8003c0e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	e075      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <DMA_DeInit+0x15c>)
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d104      	bne.n	8003c28 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <DMA_DeInit+0x154>)
 8003c20:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003c24:	609a      	str	r2, [r3, #8]
 8003c26:	e06c      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <DMA_DeInit+0x160>)
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d104      	bne.n	8003c3a <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003c30:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <DMA_DeInit+0x154>)
 8003c32:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e063      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4b38      	ldr	r3, [pc, #224]	; (8003d20 <DMA_DeInit+0x164>)
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d103      	bne.n	8003c4a <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003c42:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <DMA_DeInit+0x154>)
 8003c44:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <DMA_DeInit+0x168>)
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	e05b      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <DMA_DeInit+0x16c>)
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d103      	bne.n	8003c5a <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <DMA_DeInit+0x154>)
 8003c54:	4a35      	ldr	r2, [pc, #212]	; (8003d2c <DMA_DeInit+0x170>)
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e053      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <DMA_DeInit+0x174>)
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d103      	bne.n	8003c6a <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <DMA_DeInit+0x154>)
 8003c64:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <DMA_DeInit+0x178>)
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e04b      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <DMA_DeInit+0x17c>)
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d104      	bne.n	8003c7c <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <DMA_DeInit+0x154>)
 8003c74:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e042      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <DMA_DeInit+0x180>)
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d103      	bne.n	8003c8c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003c84:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <DMA_DeInit+0x184>)
 8003c86:	223d      	movs	r2, #61	; 0x3d
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	e03a      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <DMA_DeInit+0x188>)
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d104      	bne.n	8003c9e <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <DMA_DeInit+0x184>)
 8003c96:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e031      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <DMA_DeInit+0x18c>)
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d104      	bne.n	8003cb0 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <DMA_DeInit+0x184>)
 8003ca8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e028      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <DMA_DeInit+0x190>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d104      	bne.n	8003cc2 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <DMA_DeInit+0x184>)
 8003cba:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e01f      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <DMA_DeInit+0x194>)
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d103      	bne.n	8003cd2 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <DMA_DeInit+0x184>)
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <DMA_DeInit+0x168>)
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	e017      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <DMA_DeInit+0x198>)
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d103      	bne.n	8003ce2 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <DMA_DeInit+0x184>)
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <DMA_DeInit+0x170>)
 8003cde:	60da      	str	r2, [r3, #12]
 8003ce0:	e00f      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <DMA_DeInit+0x19c>)
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d103      	bne.n	8003cf2 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <DMA_DeInit+0x184>)
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <DMA_DeInit+0x178>)
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e007      	b.n	8003d02 <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <DMA_DeInit+0x1a0>)
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d103      	bne.n	8003d02 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <DMA_DeInit+0x184>)
 8003cfc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003d00:	60da      	str	r2, [r3, #12]
    }
  }
}
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40026010 	andmi	r6, r2, r0, lsl r0
 8003d10:	40026000 	andmi	r6, r2, r0
 8003d14:	40026028 	andmi	r6, r2, r8, lsr #32
 8003d18:	40026040 	andmi	r6, r2, r0, asr #32
 8003d1c:	40026058 	andmi	r6, r2, r8, asr r0
 8003d20:	40026070 	andmi	r6, r2, r0, ror r0
 8003d24:	2000003d 	andcs	r0, r0, sp, lsr r0
 8003d28:	40026088 	andmi	r6, r2, r8, lsl #1
 8003d2c:	20000f40 	andcs	r0, r0, r0, asr #30
 8003d30:	400260a0 	andmi	r6, r2, r0, lsr #1
 8003d34:	203d0000 	eorscs	r0, sp, r0
 8003d38:	400260b8 	strhmi	r6, [r2], -r8
 8003d3c:	40026410 	andmi	r6, r2, r0, lsl r4
 8003d40:	40026400 	andmi	r6, r2, r0, lsl #8
 8003d44:	40026428 	andmi	r6, r2, r8, lsr #8
 8003d48:	40026440 	andmi	r6, r2, r0, asr #8
 8003d4c:	40026458 	andmi	r6, r2, r8, asr r4
 8003d50:	40026470 	andmi	r6, r2, r0, ror r4
 8003d54:	40026488 	andmi	r6, r2, r8, lsl #9
 8003d58:	400264a0 	andmi	r6, r2, r0, lsr #9
 8003d5c:	400264b8 			; <UNDEFINED> instruction: 0x400264b8

08003d60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <DMA_Init+0xa8>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003d96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003da2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003dae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]
}
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	f01c803f 			; <UNDEFINED> instruction: 0xf01c803f

08003e0c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e005      	b.n	8003ea4 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0201 	bic.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
  }
}
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e005      	b.n	8003eda <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
  }
}
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e005      	b.n	8003f0e <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0220 	bic.w	r2, r3, #32
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
  }
}
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]
}
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	b29b      	uxth	r3, r3
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e005      	b.n	8003f7c <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	611a      	str	r2, [r3, #16]
}
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e005      	b.n	8003fb8 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
  }
}
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	611a      	str	r2, [r3, #16]
 8003fdc:	e002      	b.n	8003fe4 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
  }
}
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop

08003ff0 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e001      	b.n	8004012 <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e001      	b.n	8004042 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004064:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <DMA_GetFlagStatus+0x6c>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d802      	bhi.n	8004094 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <DMA_GetFlagStatus+0x70>)
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e001      	b.n	8004098 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <DMA_GetFlagStatus+0x74>)
 8004096:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e002      	b.n	80040b0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80040b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
 80040ca:	e001      	b.n	80040d0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80040cc:	2300      	movs	r3, #0
 80040ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	4002640f 	andmi	r6, r2, pc, lsl #8
 80040e4:	40026000 	andmi	r6, r2, r0
 80040e8:	40026400 	andmi	r6, r2, r0, lsl #8

080040ec <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <DMA_ClearFlag+0x50>)
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d802      	bhi.n	8004104 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <DMA_ClearFlag+0x54>)
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e001      	b.n	8004108 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <DMA_ClearFlag+0x58>)
 8004106:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004118:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	60d3      	str	r3, [r2, #12]
 8004120:	e006      	b.n	8004130 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004128:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6093      	str	r3, [r2, #8]
  }    
}
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	4002640f 	andmi	r6, r2, pc, lsl #8
 8004140:	40026000 	andmi	r6, r2, r0
 8004144:	40026400 	andmi	r6, r2, r0, lsl #8

08004148 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00f      	beq.n	8004180 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	615a      	str	r2, [r3, #20]
 8004172:	e005      	b.n	8004180 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d014      	beq.n	80041b0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031e 	and.w	r3, r3, #30
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e008      	b.n	80041b0 <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 031e 	and.w	r3, r3, #30
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop

080041bc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4b22      	ldr	r3, [pc, #136]	; (8004260 <DMA_GetITStatus+0xa4>)
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d802      	bhi.n	80041e0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <DMA_GetITStatus+0xa8>)
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e001      	b.n	80041e4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <DMA_GetITStatus+0xac>)
 80041e2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80041ea:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	0adb      	lsrs	r3, r3, #11
 80041f6:	f003 031e 	and.w	r3, r3, #30
 80041fa:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4013      	ands	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	e004      	b.n	8004212 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e002      	b.n	800422a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004230:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004234:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <DMA_GetITStatus+0x90>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
 800424a:	e001      	b.n	8004250 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800424c:	2300      	movs	r3, #0
 800424e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
}
 8004252:	4618      	mov	r0, r3
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	4002640f 	andmi	r6, r2, pc, lsl #8
 8004264:	40026000 	andmi	r6, r2, r0
 8004268:	40026400 	andmi	r6, r2, r0, lsl #8

0800426c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <DMA_ClearITPendingBit+0x50>)
 800427a:	429a      	cmp	r2, r3
 800427c:	d802      	bhi.n	8004284 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <DMA_ClearITPendingBit+0x54>)
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e001      	b.n	8004288 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <DMA_ClearITPendingBit+0x58>)
 8004286:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004298:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	60d3      	str	r3, [r2, #12]
 80042a0:	e006      	b.n	80042b0 <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80042a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6093      	str	r3, [r2, #8]
  }   
}
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	4002640f 	andmi	r6, r2, pc, lsl #8
 80042c0:	40026000 	andmi	r6, r2, r0
 80042c4:	40026400 	andmi	r6, r2, r0, lsl #8

080042c8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <SPI_I2S_DeInit+0xc0>)
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d10a      	bne.n	80042ee <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80042d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042dc:	2101      	movs	r1, #1
 80042de:	f7fe f8cd 	bl	800247c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80042e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042e6:	2100      	movs	r1, #0
 80042e8:	f7fe f8c8 	bl	800247c <RCC_APB2PeriphResetCmd>
 80042ec:	e049      	b.n	8004382 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <SPI_I2S_DeInit+0xc4>)
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d10a      	bne.n	800430c <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80042f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80042fa:	2101      	movs	r1, #1
 80042fc:	f7fe f8a0 	bl	8002440 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004304:	2100      	movs	r1, #0
 8004306:	f7fe f89b 	bl	8002440 <RCC_APB1PeriphResetCmd>
 800430a:	e03a      	b.n	8004382 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <SPI_I2S_DeInit+0xc8>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d10a      	bne.n	800432a <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8004314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004318:	2101      	movs	r1, #1
 800431a:	f7fe f891 	bl	8002440 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800431e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004322:	2100      	movs	r1, #0
 8004324:	f7fe f88c 	bl	8002440 <RCC_APB1PeriphResetCmd>
 8004328:	e02b      	b.n	8004382 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <SPI_I2S_DeInit+0xcc>)
 800432e:	429a      	cmp	r2, r3
 8004330:	d10a      	bne.n	8004348 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8004332:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004336:	2101      	movs	r1, #1
 8004338:	f7fe f8a0 	bl	800247c <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800433c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004340:	2100      	movs	r1, #0
 8004342:	f7fe f89b 	bl	800247c <RCC_APB2PeriphResetCmd>
 8004346:	e01c      	b.n	8004382 <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <SPI_I2S_DeInit+0xd0>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d10a      	bne.n	8004366 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8004350:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004354:	2101      	movs	r1, #1
 8004356:	f7fe f891 	bl	800247c <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800435a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800435e:	2100      	movs	r1, #0
 8004360:	f7fe f88c 	bl	800247c <RCC_APB2PeriphResetCmd>
 8004364:	e00d      	b.n	8004382 <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <SPI_I2S_DeInit+0xd4>)
 800436a:	429a      	cmp	r2, r3
 800436c:	d109      	bne.n	8004382 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800436e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004372:	2101      	movs	r1, #1
 8004374:	f7fe f882 	bl	800247c <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004378:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800437c:	2100      	movs	r1, #0
 800437e:	f7fe f87d 	bl	800247c <RCC_APB2PeriphResetCmd>
    }
  }
}
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40013000 	andmi	r3, r1, r0
 800438c:	40003800 	andmi	r3, r0, r0, lsl #16
 8004390:	40003c00 	andmi	r3, r0, r0, lsl #24
 8004394:	40013400 	andmi	r3, r1, r0, lsl #8
 8004398:	40015000 	andmi	r5, r1, r0
 800439c:	40015400 	andmi	r5, r1, r0, lsl #8

080043a0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80043b4:	89fb      	ldrh	r3, [r7, #14]
 80043b6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80043ba:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	885b      	ldrh	r3, [r3, #2]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043d4:	4313      	orrs	r3, r2
 80043d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043dc:	4313      	orrs	r3, r2
 80043de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043ec:	4313      	orrs	r3, r2
 80043ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	89fa      	ldrh	r2, [r7, #14]
 8004402:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8b9b      	ldrh	r3, [r3, #28]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	8a1a      	ldrh	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	821a      	strh	r2, [r3, #16]
}
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004428:	b480      	push	{r7}
 800442a:	b08b      	sub	sp, #44	; 0x2c
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8004432:	2300      	movs	r3, #0
 8004434:	837b      	strh	r3, [r7, #26]
 8004436:	2302      	movs	r3, #2
 8004438:	84fb      	strh	r3, [r7, #38]	; 0x26
 800443a:	2300      	movs	r3, #0
 800443c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800443e:	2301      	movs	r3, #1
 8004440:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8b9b      	ldrh	r3, [r3, #28]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8b9b      	ldrh	r3, [r3, #28]
 8004474:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d104      	bne.n	8004488 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800447e:	2300      	movs	r3, #0
 8004480:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8004482:	2302      	movs	r3, #2
 8004484:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004486:	e071      	b.n	800456c <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	889b      	ldrh	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8004490:	2301      	movs	r3, #1
 8004492:	847b      	strh	r3, [r7, #34]	; 0x22
 8004494:	e001      	b.n	800449a <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8004496:	2302      	movs	r3, #2
 8004498:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800449a:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <I2S_Init+0x1a4>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <I2S_Init+0x1a4>)
 80044a8:	4a48      	ldr	r2, [pc, #288]	; (80045cc <I2S_Init+0x1a4>)
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80044b0:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80044b2:	4b46      	ldr	r3, [pc, #280]	; (80045cc <I2S_Init+0x1a4>)
 80044b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80044b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044bc:	4013      	ands	r3, r2
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <I2S_Init+0x1a4>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80044d0:	0f1b      	lsrs	r3, r3, #28
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <I2S_Init+0x1a4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e0:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <I2S_Init+0x1a8>)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	fb02 f203 	mul.w	r2, r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	88db      	ldrh	r3, [r3, #6]
 80044fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004500:	d10f      	bne.n	8004522 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	0a1a      	lsrs	r2, r3, #8
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	461a      	mov	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	3305      	adds	r3, #5
 800451c:	b29b      	uxth	r3, r3
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e011      	b.n	8004546 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	3305      	adds	r3, #5
 8004542:	b29b      	uxth	r3, r3
 8004544:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <I2S_Init+0x1ac>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	08db      	lsrs	r3, r3, #3
 8004550:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800455c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800456c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800456e:	2b01      	cmp	r3, #1
 8004570:	d902      	bls.n	8004578 <I2S_Init+0x150>
 8004572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004574:	2bff      	cmp	r3, #255	; 0xff
 8004576:	d903      	bls.n	8004580 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8004578:	2302      	movs	r3, #2
 800457a:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	88da      	ldrh	r2, [r3, #6]
 8004584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004586:	4313      	orrs	r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800458c:	4313      	orrs	r3, r2
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	8859      	ldrh	r1, [r3, #2]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80045a4:	4303      	orrs	r3, r0
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	430b      	orrs	r3, r1
 80045aa:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	8b7b      	ldrh	r3, [r7, #26]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ba:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8b7a      	ldrh	r2, [r7, #26]
 80045c0:	839a      	strh	r2, [r3, #28]
}
 80045c2:	372c      	adds	r7, #44	; 0x2c
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40023800 	andmi	r3, r2, r0, lsl #16
 80045d0:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80045d4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

080045d8 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2207      	movs	r2, #7
 8004614:	821a      	strh	r2, [r3, #16]
}
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	819a      	strh	r2, [r3, #12]
}
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop

08004658 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e007      	b.n	800468c <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	801a      	strh	r2, [r3, #0]
  }
}
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8b9b      	ldrh	r3, [r3, #28]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	839a      	strh	r2, [r3, #28]
 80046ba:	e007      	b.n	80046cc <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8b9b      	ldrh	r3, [r3, #28]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	839a      	strh	r2, [r3, #28]
  }
}
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	801a      	strh	r2, [r3, #0]
}
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004722:	d108      	bne.n	8004736 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	e007      	b.n	8004746 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	801a      	strh	r2, [r3, #0]
  }
}
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800475c:	887a      	ldrh	r2, [r7, #2]
 800475e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004762:	429a      	cmp	r2, r3
 8004764:	d008      	beq.n	8004778 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e007      	b.n	8004788 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	801a      	strh	r2, [r3, #0]
  }
}
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	889b      	ldrh	r3, [r3, #4]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	809a      	strh	r2, [r3, #4]
 80047b6:	e007      	b.n	80047c8 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	889b      	ldrh	r3, [r3, #4]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	809a      	strh	r2, [r3, #4]
  }
}
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop

080047d4 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	889b      	ldrh	r3, [r3, #4]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f043 0310 	orr.w	r3, r3, #16
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	809a      	strh	r2, [r3, #4]
 80047f6:	e007      	b.n	8004808 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	889b      	ldrh	r3, [r3, #4]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	809a      	strh	r2, [r3, #4]
  }
}
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	81bb      	strh	r3, [r7, #12]
 8004822:	2300      	movs	r3, #0
 8004824:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8b9b      	ldrh	r3, [r3, #28]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004830:	f023 030f 	bic.w	r3, r3, #15
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8b9b      	ldrh	r3, [r3, #28]
 8004844:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484e:	d003      	beq.n	8004858 <I2S_FullDuplexConfig+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 8004858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800485c:	81fb      	strh	r3, [r7, #14]
 800485e:	e00b      	b.n	8004878 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004868:	d004      	beq.n	8004874 <I2S_FullDuplexConfig+0x60>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d101      	bne.n	8004878 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 8004874:	2300      	movs	r3, #0
 8004876:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	885a      	ldrh	r2, [r3, #2]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004884:	430b      	orrs	r3, r1
 8004886:	b29b      	uxth	r3, r3
 8004888:	4313      	orrs	r3, r2
 800488a:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	4313      	orrs	r3, r2
 8004890:	b29a      	uxth	r2, r3
 8004892:	89bb      	ldrh	r3, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800489c:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	89ba      	ldrh	r2, [r7, #12]
 80048a2:	839a      	strh	r2, [r3, #28]
}
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	899b      	ldrh	r3, [r3, #12]
 80048bc:	b29b      	uxth	r3, r3
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	819a      	strh	r2, [r3, #12]
}
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	e007      	b.n	800491c <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	801a      	strh	r2, [r3, #0]
  }
}
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	801a      	strh	r2, [r3, #0]
}
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop

0800494c <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d003      	beq.n	800496a <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8b1b      	ldrh	r3, [r3, #24]
 8004966:	81fb      	strh	r3, [r7, #14]
 8004968:	e002      	b.n	8004970 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8a9b      	ldrh	r3, [r3, #20]
 800496e:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8004970:	89fb      	ldrh	r3, [r7, #14]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8a1b      	ldrh	r3, [r3, #16]
 800498c:	b29b      	uxth	r3, r3
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop

0800499c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	460a      	mov	r2, r1
 80049a8:	807a      	strh	r2, [r7, #2]
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	889b      	ldrh	r3, [r3, #4]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	809a      	strh	r2, [r3, #4]
 80049c2:	e009      	b.n	80049d8 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	809a      	strh	r2, [r3, #4]
  }
}
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop

080049e4 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	460a      	mov	r2, r1
 80049f0:	70fa      	strb	r2, [r7, #3]
 80049f2:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80049f4:	2300      	movs	r3, #0
 80049f6:	81fb      	strh	r3, [r7, #14]
 80049f8:	2300      	movs	r3, #0
 80049fa:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004a04:	89fb      	ldrh	r3, [r7, #14]
 8004a06:	2201      	movs	r2, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8004a0e:	78bb      	ldrb	r3, [r7, #2]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	889b      	ldrh	r3, [r3, #4]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	89bb      	ldrh	r3, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	809a      	strh	r2, [r3, #4]
 8004a24:	e009      	b.n	8004a3a <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	889b      	ldrh	r3, [r3, #4]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	89bb      	ldrh	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4013      	ands	r3, r2
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	809a      	strh	r2, [r3, #4]
  }
}
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	891b      	ldrh	r3, [r3, #8]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e001      	b.n	8004a6e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	811a      	strh	r2, [r3, #8]
}
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	81bb      	strh	r3, [r7, #12]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	817b      	strh	r3, [r7, #10]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	889b      	ldrh	r3, [r3, #4]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	891b      	ldrh	r3, [r3, #8]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	89bb      	ldrh	r3, [r7, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <SPI_I2S_GetITStatus+0x64>
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e001      	b.n	8004b04 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	811a      	strh	r2, [r3, #8]
}
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <EXTI_DeInit+0x2c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <EXTI_DeInit+0x2c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <EXTI_DeInit+0x2c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <EXTI_DeInit+0x2c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <EXTI_DeInit+0x2c>)
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <EXTI_DeInit+0x30>)
 8004b68:	615a      	str	r2, [r3, #20]
}
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40013c00 	andmi	r3, r1, r0, lsl #24
 8004b78:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

08004b7c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <EXTI_Init+0xd8>)
 8004b8a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	799b      	ldrb	r3, [r3, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d04d      	beq.n	8004c30 <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004b94:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <EXTI_Init+0xd8>)
 8004b96:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <EXTI_Init+0xd8>)
 8004b98:	6811      	ldr	r1, [r2, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	43d2      	mvns	r2, r2
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <EXTI_Init+0xd8>)
 8004ba6:	4a2b      	ldr	r2, [pc, #172]	; (8004c54 <EXTI_Init+0xd8>)
 8004ba8:	6851      	ldr	r1, [r2, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	43d2      	mvns	r2, r2
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	791b      	ldrb	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	6811      	ldr	r1, [r2, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <EXTI_Init+0xd8>)
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <EXTI_Init+0xd8>)
 8004bd0:	6891      	ldr	r1, [r2, #8]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	43d2      	mvns	r2, r2
 8004bd8:	400a      	ands	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <EXTI_Init+0xd8>)
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <EXTI_Init+0xd8>)
 8004be0:	68d1      	ldr	r1, [r2, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	43d2      	mvns	r2, r2
 8004be8:	400a      	ands	r2, r1
 8004bea:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	795b      	ldrb	r3, [r3, #5]
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d10e      	bne.n	8004c12 <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <EXTI_Init+0xd8>)
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <EXTI_Init+0xd8>)
 8004bf8:	6891      	ldr	r1, [r2, #8]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <EXTI_Init+0xd8>)
 8004c04:	4a13      	ldr	r2, [pc, #76]	; (8004c54 <EXTI_Init+0xd8>)
 8004c06:	68d1      	ldr	r1, [r2, #12]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e01b      	b.n	8004c4a <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <EXTI_Init+0xd8>)
 8004c14:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	795b      	ldrb	r3, [r3, #5]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e00c      	b.n	8004c4a <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6811      	ldr	r1, [r2, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	43d2      	mvns	r2, r2
 8004c46:	400a      	ands	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
  }
}
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40013c00 	andmi	r3, r1, r0, lsl #24

08004c58 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	220c      	movs	r2, #12
 8004c70:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	719a      	strb	r2, [r3, #6]
}
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop

08004c84 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <EXTI_GenerateSWInterrupt+0x20>)
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <EXTI_GenerateSWInterrupt+0x20>)
 8004c90:	6911      	ldr	r1, [r2, #16]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	611a      	str	r2, [r3, #16]
}
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40013c00 	andmi	r3, r1, r0, lsl #24

08004ca8 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <EXTI_GetFlagStatus+0x30>)
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40013c00 	andmi	r3, r1, r0, lsl #24

08004cdc <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <EXTI_ClearFlag+0x18>)
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	615a      	str	r2, [r3, #20]
}
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40013c00 	andmi	r3, r1, r0, lsl #24

08004cf8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <EXTI_GetITStatus+0x30>)
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	e001      	b.n	8004d1a <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40013c00 	andmi	r3, r1, r0, lsl #24

08004d2c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <EXTI_ClearITPendingBit+0x18>)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	615a      	str	r2, [r3, #20]
}
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40013c00 	andmi	r3, r1, r0, lsl #24

08004d48 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 8004d4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d50:	2101      	movs	r1, #1
 8004d52:	f7fd fb1b 	bl	800238c <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8004d56:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f7fd fb16 	bl	800238c <RCC_AHB1PeriphResetCmd>
}
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop

08004d64 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8004d7c:	4a4f      	ldr	r2, [pc, #316]	; (8004ebc <DMA2D_Init+0x158>)
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <DMA2D_Init+0x158>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 8004d86:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004d8a:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <DMA2D_Init+0x158>)
 8004d8e:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <DMA2D_Init+0x158>)
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8004d9a:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <DMA2D_Init+0x158>)
 8004d9c:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <DMA2D_Init+0x158>)
 8004d9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004da0:	f022 0207 	bic.w	r2, r2, #7
 8004da4:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8004da6:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <DMA2D_Init+0x158>)
 8004da8:	4a44      	ldr	r2, [pc, #272]	; (8004ebc <DMA2D_Init+0x158>)
 8004daa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10c      	bne.n	8004dd6 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e03a      	b.n	8004e4c <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10a      	bne.n	8004df4 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e02b      	b.n	8004e4c <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d10a      	bne.n	8004e12 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	015b      	lsls	r3, r3, #5
 8004e02:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	02db      	lsls	r3, r3, #11
 8004e0a:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e01c      	b.n	8004e4c <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d10c      	bne.n	8004e34 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	015b      	lsls	r3, r3, #5
 8004e20:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	03db      	lsls	r3, r3, #15
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e00b      	b.n	8004e4c <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	031b      	lsls	r3, r3, #12
 8004e4a:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <DMA2D_Init+0x158>)
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <DMA2D_Init+0x158>)
 8004e50:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004e52:	6978      	ldr	r0, [r7, #20]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4310      	orrs	r0, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	4310      	orrs	r0, r2
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4302      	orrs	r2, r0
 8004e62:	430a      	orrs	r2, r1
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <DMA2D_Init+0x158>)
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6992      	ldr	r2, [r2, #24]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <DMA2D_Init+0x158>)
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <DMA2D_Init+0x158>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <DMA2D_Init+0x158>)
 8004e80:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <DMA2D_Init+0x158>)
 8004e82:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	69d2      	ldr	r2, [r2, #28]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <DMA2D_Init+0x158>)
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <DMA2D_Init+0x158>)
 8004e98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e9a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <DMA2D_Init+0x158>)
 8004ea2:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <DMA2D_Init+0x158>)
 8004ea4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6a10      	ldr	r0, [r2, #32]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4302      	orrs	r2, r0
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	4002b000 	andmi	fp, r2, r0

08004ec0 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <DMA2D_StartTransfer+0x18>)
 8004f16:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <DMA2D_StartTransfer+0x18>)
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
}
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	4002b000 	andmi	fp, r2, r0

08004f2c <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <DMA2D_AbortTransfer+0x18>)
 8004f32:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <DMA2D_AbortTransfer+0x18>)
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	f042 0204 	orr.w	r2, r2, #4
 8004f3a:	601a      	str	r2, [r3, #0]

}
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	4002b000 	andmi	fp, r2, r0

08004f48 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <DMA2D_Suspend+0x34>)
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <DMA2D_Suspend+0x34>)
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	f042 0202 	orr.w	r2, r2, #2
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e005      	b.n	8004f72 <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <DMA2D_Suspend+0x34>)
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <DMA2D_Suspend+0x34>)
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	f022 0202 	bic.w	r2, r2, #2
 8004f70:	601a      	str	r2, [r3, #0]
  }
}
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	4002b000 	andmi	fp, r2, r0

08004f80 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fb6:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 8004fb8:	4b26      	ldr	r3, [pc, #152]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fbc:	6911      	ldr	r1, [r2, #16]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 8004fc6:	4a23      	ldr	r2, [pc, #140]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <DMA2D_FGConfig+0xd8>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 8004ff2:	4b18      	ldr	r3, [pc, #96]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8004ff6:	69d1      	ldr	r1, [r2, #28]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6890      	ldr	r0, [r2, #8]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	4310      	orrs	r0, r2
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4310      	orrs	r0, r2
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8005012:	4a10      	ldr	r2, [pc, #64]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8005014:	6a12      	ldr	r2, [r2, #32]
 8005016:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800501a:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <DMA2D_FGConfig+0xd4>)
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8005030:	6a11      	ldr	r1, [r2, #32]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	69d0      	ldr	r0, [r2, #28]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4310      	orrs	r0, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4302      	orrs	r2, r0
 800503e:	430a      	orrs	r2, r1
 8005040:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <DMA2D_FGConfig+0xd4>)
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800504a:	3724      	adds	r7, #36	; 0x24
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	4002b000 	andmi	fp, r2, r0
 8005058:	00fc00c0 	rscseq	r0, ip, r0, asr #1

0800505c <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050e6:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050ec:	6991      	ldr	r1, [r2, #24]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6852      	ldr	r2, [r2, #4]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 80050f6:	4a23      	ldr	r2, [pc, #140]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050f8:	4b22      	ldr	r3, [pc, #136]	; (8005184 <DMA2D_BGConfig+0xd4>)
 80050fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <DMA2D_BGConfig+0xd8>)
 80050fe:	400b      	ands	r3, r1
 8005100:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005124:	4a17      	ldr	r2, [pc, #92]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005126:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6890      	ldr	r0, [r2, #8]
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	4310      	orrs	r0, r2
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4310      	orrs	r0, r2
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800513c:	430a      	orrs	r2, r1
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005142:	4a10      	ldr	r2, [pc, #64]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005144:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005146:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <DMA2D_BGConfig+0xd4>)
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005160:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	69d0      	ldr	r0, [r2, #28]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4310      	orrs	r0, r2
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4302      	orrs	r2, r0
 800516e:	430a      	orrs	r2, r1
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <DMA2D_BGConfig+0xd4>)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005178:	631a      	str	r2, [r3, #48]	; 0x30

}
 800517a:	3724      	adds	r7, #36	; 0x24
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	4002b000 	andmi	fp, r2, r0
 8005188:	00fc00c0 	rscseq	r0, ip, r0, asr #1

0800518c <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <DMA2D_FGStart+0x34>)
 80051f2:	4a08      	ldr	r2, [pc, #32]	; (8005214 <DMA2D_FGStart+0x34>)
 80051f4:	69d2      	ldr	r2, [r2, #28]
 80051f6:	f042 0220 	orr.w	r2, r2, #32
 80051fa:	61da      	str	r2, [r3, #28]
 80051fc:	e005      	b.n	800520a <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <DMA2D_FGStart+0x34>)
 8005200:	4a04      	ldr	r2, [pc, #16]	; (8005214 <DMA2D_FGStart+0x34>)
 8005202:	69d2      	ldr	r2, [r2, #28]
 8005204:	f022 0220 	bic.w	r2, r2, #32
 8005208:	61da      	str	r2, [r3, #28]
  }
}
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	4002b000 	andmi	fp, r2, r0

08005218 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <DMA2D_BGStart+0x34>)
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <DMA2D_BGStart+0x34>)
 800522c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800522e:	f042 0220 	orr.w	r2, r2, #32
 8005232:	625a      	str	r2, [r3, #36]	; 0x24
 8005234:	e005      	b.n	8005242 <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <DMA2D_BGStart+0x34>)
 8005238:	4a04      	ldr	r2, [pc, #16]	; (800524c <DMA2D_BGStart+0x34>)
 800523a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800523c:	f022 0220 	bic.w	r2, r2, #32
 8005240:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	4002b000 	andmi	fp, r2, r0

08005250 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 8005262:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 800527a:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 800527c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	430a      	orrs	r2, r1
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c
 8005288:	e005      	b.n	8005296 <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <DMA2D_DeadTimeConfig+0x50>)
 800528e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	4002b000 	andmi	fp, r2, r0

080052a4 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <DMA2D_LineWatermarkConfig+0x18>)
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	4002b000 	andmi	fp, r2, r0

080052c0 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <DMA2D_ITConfig+0x38>)
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <DMA2D_ITConfig+0x38>)
 80052d6:	6811      	ldr	r1, [r2, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e006      	b.n	80052ee <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <DMA2D_ITConfig+0x38>)
 80052e2:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <DMA2D_ITConfig+0x38>)
 80052e4:	6811      	ldr	r1, [r2, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	43d2      	mvns	r2, r2
 80052ea:	400a      	ands	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
  }
}
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	4002b000 	andmi	fp, r2, r0

080052fc <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <DMA2D_GetFlagStatus+0x30>)
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e001      	b.n	800531e <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	4002b000 	andmi	fp, r2, r0

08005330 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <DMA2D_ClearFlag+0x18>)
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]
}
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	4002b000 	andmi	fp, r2, r0

0800534c <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <DMA2D_GetITStatus+0x54>)
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e001      	b.n	8005374 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <DMA2D_GetITStatus+0x54>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <DMA2D_GetITStatus+0x40>
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
 800538a:	e001      	b.n	8005390 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	4002b000 	andmi	fp, r2, r0

080053a4 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 80053b2:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <DMA2D_ClearITPendingBit+0x20>)
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	4002b000 	andmi	fp, r2, r0

080053c8 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 80053cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053d0:	2101      	movs	r1, #1
 80053d2:	f7fd f853 	bl	800247c <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 80053d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80053da:	2100      	movs	r1, #0
 80053dc:	f7fd f84e 	bl	800247c <RCC_APB2PeriphResetCmd>
}
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005404:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <LTDC_Init+0x120>)
 8005406:	4b3f      	ldr	r3, [pc, #252]	; (8005504 <LTDC_Init+0x120>)
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <LTDC_Init+0x124>)
 800540c:	400b      	ands	r3, r1
 800540e:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8005418:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <LTDC_Init+0x120>)
 800541a:	4a3a      	ldr	r2, [pc, #232]	; (8005504 <LTDC_Init+0x120>)
 800541c:	6891      	ldr	r1, [r2, #8]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6950      	ldr	r0, [r2, #20]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	4302      	orrs	r2, r0
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800542a:	4a36      	ldr	r2, [pc, #216]	; (8005504 <LTDC_Init+0x120>)
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <LTDC_Init+0x120>)
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <LTDC_Init+0x124>)
 8005432:	400b      	ands	r3, r1
 8005434:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <LTDC_Init+0x120>)
 8005440:	4a30      	ldr	r2, [pc, #192]	; (8005504 <LTDC_Init+0x120>)
 8005442:	68d1      	ldr	r1, [r2, #12]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	69d0      	ldr	r0, [r2, #28]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4302      	orrs	r2, r0
 800544c:	430a      	orrs	r2, r1
 800544e:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005450:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <LTDC_Init+0x120>)
 8005452:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <LTDC_Init+0x120>)
 8005454:	6919      	ldr	r1, [r3, #16]
 8005456:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <LTDC_Init+0x124>)
 8005458:	400b      	ands	r3, r1
 800545a:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <LTDC_Init+0x120>)
 8005466:	4a27      	ldr	r2, [pc, #156]	; (8005504 <LTDC_Init+0x120>)
 8005468:	6911      	ldr	r1, [r2, #16]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4302      	orrs	r2, r0
 8005472:	430a      	orrs	r2, r1
 8005474:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005476:	4a23      	ldr	r2, [pc, #140]	; (8005504 <LTDC_Init+0x120>)
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <LTDC_Init+0x120>)
 800547a:	6959      	ldr	r1, [r3, #20]
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <LTDC_Init+0x124>)
 800547e:	400b      	ands	r3, r1
 8005480:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <LTDC_Init+0x120>)
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <LTDC_Init+0x120>)
 800548e:	6951      	ldr	r1, [r2, #20]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4302      	orrs	r2, r0
 8005498:	430a      	orrs	r2, r1
 800549a:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <LTDC_Init+0x120>)
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <LTDC_Init+0x120>)
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <LTDC_Init+0x128>)
 80054a4:	400b      	ands	r3, r1
 80054a6:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80054a8:	4b16      	ldr	r3, [pc, #88]	; (8005504 <LTDC_Init+0x120>)
 80054aa:	4a16      	ldr	r2, [pc, #88]	; (8005504 <LTDC_Init+0x120>)
 80054ac:	6991      	ldr	r1, [r2, #24]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6810      	ldr	r0, [r2, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6852      	ldr	r2, [r2, #4]
 80054b6:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80054bc:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80054c2:	4302      	orrs	r2, r0
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <LTDC_Init+0x120>)
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <LTDC_Init+0x120>)
 80054dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 80054e4:	4b07      	ldr	r3, [pc, #28]	; (8005504 <LTDC_Init+0x120>)
 80054e6:	4a07      	ldr	r2, [pc, #28]	; (8005504 <LTDC_Init+0x120>)
 80054e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054ea:	68b8      	ldr	r0, [r7, #8]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4310      	orrs	r0, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054f4:	4302      	orrs	r2, r0
 80054f6:	430a      	orrs	r2, r1
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054fa:	3724      	adds	r7, #36	; 0x24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40016800 	andmi	r6, r1, r0, lsl #16
 8005508:	f000f800 			; <UNDEFINED> instruction: 0xf000f800
 800550c:	0ffe888f 	svceq	0x00fe888f

08005510 <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <LTDC_Cmd+0x34>)
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <LTDC_Cmd+0x34>)
 8005590:	6992      	ldr	r2, [r2, #24]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	e005      	b.n	80055a6 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <LTDC_Cmd+0x34>)
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <LTDC_Cmd+0x34>)
 800559e:	6992      	ldr	r2, [r2, #24]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	619a      	str	r2, [r3, #24]
  }
}
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40016800 	andmi	r6, r1, r0, lsl #16

080055b4 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <LTDC_DitherCmd+0x34>)
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <LTDC_DitherCmd+0x34>)
 80055c8:	6992      	ldr	r2, [r2, #24]
 80055ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055ce:	619a      	str	r2, [r3, #24]
 80055d0:	e005      	b.n	80055de <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <LTDC_DitherCmd+0x34>)
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <LTDC_DitherCmd+0x34>)
 80055d6:	6992      	ldr	r2, [r2, #24]
 80055d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055dc:	619a      	str	r2, [r3, #24]
  }
}
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40016800 	andmi	r6, r1, r0, lsl #16

080055ec <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <LTDC_GetRGBWidth+0x50>)
 80055f6:	4b11      	ldr	r3, [pc, #68]	; (800563c <LTDC_GetRGBWidth+0x50>)
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <LTDC_GetRGBWidth+0x54>)
 80055fc:	400b      	ands	r3, r1
 80055fe:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <LTDC_GetRGBWidth+0x50>)
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <LTDC_GetRGBWidth+0x50>)
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	0a1b      	lsrs	r3, r3, #8
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <LTDC_GetRGBWidth+0x50>)
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	0b1b      	lsrs	r3, r3, #12
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f107 020c 	add.w	r2, r7, #12
 800562a:	ca07      	ldmia	r2, {r0, r1, r2}
 800562c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40016800 	andmi	r6, r1, r0, lsl #16
 8005640:	0ffe888f 	svceq	0x00fe888f

08005644 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	609a      	str	r2, [r3, #8]
}
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <LTDC_LIPConfig+0x18>)
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40016800 	andmi	r6, r1, r0, lsl #16

08005684 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <LTDC_ReloadConfig+0x18>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40016800 	andmi	r6, r1, r0, lsl #16

080056a0 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f023 0207 	bic.w	r2, r3, #7
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057b8:	f023 0307 	bic.w	r3, r3, #7
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30

}
 80057c8:	3724      	adds	r7, #36	; 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2207      	movs	r2, #7
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e005      	b.n	8005874 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f023 0201 	bic.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
  }
}
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop

08005880 <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <LTDC_GetPosStatus+0x3c>)
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <LTDC_GetPosStatus+0x3c>)
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <LTDC_GetPosStatus+0x3c>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <LTDC_GetPosStatus+0x3c>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	b29b      	uxth	r3, r3
 80058a0:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f107 0208 	add.w	r2, r7, #8
 80058a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ac:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40016800 	andmi	r6, r1, r0, lsl #16

080058c0 <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]
}
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop

080058e0 <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 80058e8:	4b08      	ldr	r3, [pc, #32]	; (800590c <LTDC_GetCDStatus+0x2c>)
 80058ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
 80058f8:	e001      	b.n	80058fe <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40016800 	andmi	r6, r1, r0, lsl #16

08005910 <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01f      	beq.n	800596c <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f043 0202 	orr.w	r2, r3, #2
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	4319      	orrs	r1, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	430b      	orrs	r3, r1
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e005      	b.n	8005978 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f023 0202 	bic.w	r2, r3, #2
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <LTDC_ColorKeyingConfig+0x78>)
 800597a:	2201      	movs	r2, #1
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40016800 	andmi	r6, r1, r0, lsl #16

0800598c <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
}
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d006      	beq.n	80059d0 <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f043 0210 	orr.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e005      	b.n	80059dc <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f023 0210 	bic.w	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <LTDC_CLUTCmd+0x3c>)
 80059de:	2201      	movs	r2, #1
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40016800 	andmi	r6, r1, r0, lsl #16

080059f0 <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	431a      	orrs	r2, r3
                              green | red);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60da      	str	r2, [r3, #12]
}
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	460a      	mov	r2, r1
 8005a74:	807a      	strh	r2, [r7, #2]
 8005a76:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8005a90:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <LTDC_LayerPosition+0xd8>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	0c1a      	lsrs	r2, r3, #16
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	883b      	ldrh	r3, [r7, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3301      	adds	r3, #1
 8005aac:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8005aba:	2304      	movs	r3, #4
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e016      	b.n	8005aee <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	e010      	b.n	8005aee <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d008      	beq.n	8005ae4 <LTDC_LayerPosition+0x7c>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d005      	beq.n	8005ae4 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d002      	beq.n	8005ae4 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d102      	bne.n	8005aea <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e001      	b.n	8005aee <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005afa:	1eda      	subs	r2, r3, #3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	041a      	lsls	r2, r3, #16
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	041a      	lsls	r2, r3, #16
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	3724      	adds	r7, #36	; 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40016800 	andmi	r6, r1, r0, lsl #16

08005b44 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8005b50:	78fa      	ldrb	r2, [r7, #3]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	615a      	str	r2, [r3, #20]
}
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop

08005b7c <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b08b      	sub	sp, #44	; 0x2c
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <LTDC_LayerSize+0x20>
  {
    temp = 4;
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b9a:	e019      	b.n	8005bd0 <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d103      	bne.n	8005baa <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ba8:	e012      	b.n	8005bd0 <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d008      	beq.n	8005bc2 <LTDC_LayerSize+0x46>
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d005      	beq.n	8005bc2 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d002      	beq.n	8005bc2 <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b07      	cmp	r3, #7
 8005bc0:	d103      	bne.n	8005bca <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bc8:	e002      	b.n	8005bd0 <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bdc:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	3b01      	subs	r3, #1
 8005be6:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bf4:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	041a      	lsls	r2, r3, #16
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	041a      	lsls	r2, r3, #16
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	041a      	lsls	r2, r3, #16
 8005c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	3303      	adds	r3, #3
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 8005c3c:	372c      	adds	r7, #44	; 0x2c
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop

08005c48 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8005c5e:	2304      	movs	r3, #4
 8005c60:	73fb      	strb	r3, [r7, #15]
 8005c62:	e016      	b.n	8005c92 <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d102      	bne.n	8005c70 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	73fb      	strb	r3, [r7, #15]
 8005c6e:	e010      	b.n	8005c92 <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d008      	beq.n	8005c88 <LTDC_LayerPixelFormat+0x40>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d005      	beq.n	8005c88 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d002      	beq.n	8005c88 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	d102      	bne.n	8005c8e <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8005c88:	2302      	movs	r3, #2
 8005c8a:	73fb      	strb	r3, [r7, #15]
 8005c8c:	e001      	b.n	8005c92 <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8005caa:	2304      	movs	r3, #4
 8005cac:	73fb      	strb	r3, [r7, #15]
 8005cae:	e016      	b.n	8005cde <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
 8005cba:	e010      	b.n	8005cde <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d008      	beq.n	8005cd4 <LTDC_LayerPixelFormat+0x8c>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d005      	beq.n	8005cd4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d002      	beq.n	8005cd4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d102      	bne.n	8005cda <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	73fb      	strb	r3, [r7, #15]
 8005cd8:	e001      	b.n	8005cde <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	041a      	lsls	r2, r3, #16
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	3303      	adds	r3, #3
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	611a      	str	r2, [r3, #16]
    
}
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <LTDC_ITConfig+0x38>)
 8005d1c:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <LTDC_ITConfig+0x38>)
 8005d1e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
 8005d26:	e006      	b.n	8005d36 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <LTDC_ITConfig+0x38>)
 8005d2a:	4a05      	ldr	r2, [pc, #20]	; (8005d40 <LTDC_ITConfig+0x38>)
 8005d2c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	43d2      	mvns	r2, r2
 8005d32:	400a      	ands	r2, r1
 8005d34:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40016800 	andmi	r6, r1, r0, lsl #16

08005d44 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8005d50:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <LTDC_GetFlagStatus+0x30>)
 8005d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e001      	b.n	8005d66 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40016800 	andmi	r6, r1, r0, lsl #16

08005d78 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <LTDC_ClearFlag+0x18>)
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40016800 	andmi	r6, r1, r0, lsl #16

08005d94 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <LTDC_GetITStatus+0x4c>)
 8005da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e001      	b.n	8005db6 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <LTDC_GetITStatus+0x4c>)
 8005db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <LTDC_GetITStatus+0x3a>
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
 8005dcc:	e001      	b.n	8005dd2 <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40016800 	andmi	r6, r1, r0, lsl #16

08005de4 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <LTDC_ClearITPendingBit+0x18>)
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40016800 	andmi	r6, r1, r0, lsl #16

08005e00 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d107      	bne.n	8005e1e <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8005e0e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	f243 01db 	movw	r1, #12507	; 0x30db
 8005e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e1c:	e006      	b.n	8005e2c <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 8005e1e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8005e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8005e2c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	3201      	adds	r2, #1
 8005e34:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <FMC_NORSRAMDeInit+0x54>)
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	a0000104 	andge	r0, r0, r4, lsl #2

08005e58 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005e64:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005e74:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005e7a:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005e80:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005e86:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005e8c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005e92:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005e98:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005e9e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005ea4:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005eaa:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005eb0:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005eb6:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d10d      	bne.n	8005ee0 <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005ec4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	6800      	ldr	r0, [r0, #0]
 8005ed4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005ed8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee8:	d124      	bne.n	8005f34 <FMC_NORSRAMInit+0xdc>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005ef2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005efc:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005efe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005f02:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005f06:	6811      	ldr	r1, [r2, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 8005f10:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005f14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f1e:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8005f20:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f28:	6912      	ldr	r2, [r2, #16]
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	0511      	lsls	r1, r2, #20
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005f34:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f42:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f48:	6849      	ldr	r1, [r1, #4]
 8005f4a:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005f4c:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f52:	6889      	ldr	r1, [r1, #8]
 8005f54:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005f56:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f5c:	68c9      	ldr	r1, [r1, #12]
 8005f5e:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005f60:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f66:	6909      	ldr	r1, [r1, #16]
 8005f68:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005f6a:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f70:	6949      	ldr	r1, [r1, #20]
 8005f72:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8005f74:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f7a:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005f7c:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f8a:	d120      	bne.n	8005fce <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <FMC_NORSRAMInit+0x190>)
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005f96:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005fa0:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005fa6:	6889      	ldr	r1, [r1, #8]
 8005fa8:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005faa:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005fb0:	6909      	ldr	r1, [r1, #16]
 8005fb2:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005fb4:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005fba:	6949      	ldr	r1, [r1, #20]
 8005fbc:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005fbe:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005fc4:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005fc6:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005fcc:	e006      	b.n	8005fdc <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <FMC_NORSRAMInit+0x190>)
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	a0000104 	andge	r0, r0, r4, lsl #2

08005fec <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2210      	movs	r2, #16
 800600a:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006030:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006038:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	220f      	movs	r2, #15
 8006052:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	220f      	movs	r2, #15
 800605a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	22ff      	movs	r2, #255	; 0xff
 8006062:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	220f      	movs	r2, #15
 800606a:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	220f      	movs	r2, #15
 8006072:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	220f      	movs	r2, #15
 800607a:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	2200      	movs	r2, #0
 8006082:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	220f      	movs	r2, #15
 800608a:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	220f      	movs	r2, #15
 8006092:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006098:	22ff      	movs	r2, #255	; 0xff
 800609a:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	220f      	movs	r2, #15
 80060a2:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a8:	220f      	movs	r2, #15
 80060aa:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	220f      	movs	r2, #15
 80060b2:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]
}
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop

080060c8 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 80060da:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80060de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80060e8:	f042 0101 	orr.w	r1, r2, #1
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060f2:	e00b      	b.n	800610c <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 80060f4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80060f8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <FMC_NORSRAMCmd+0x50>)
 8006104:	400b      	ands	r3, r1
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	000ffffe 	strdeq	pc, [pc], -lr

0800611c <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b10      	cmp	r3, #16
 8006128:	d10e      	bne.n	8006148 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <FMC_NANDDeInit+0x54>)
 800612c:	2218      	movs	r2, #24
 800612e:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 8006130:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <FMC_NANDDeInit+0x54>)
 8006132:	2240      	movs	r2, #64	; 0x40
 8006134:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <FMC_NANDDeInit+0x54>)
 8006138:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800613c:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800613e:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <FMC_NANDDeInit+0x54>)
 8006140:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e00d      	b.n	8006164 <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <FMC_NANDDeInit+0x58>)
 800614a:	2218      	movs	r2, #24
 800614c:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <FMC_NANDDeInit+0x58>)
 8006150:	2240      	movs	r2, #64	; 0x40
 8006152:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <FMC_NANDDeInit+0x58>)
 8006156:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800615a:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <FMC_NANDDeInit+0x58>)
 800615e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006162:	60da      	str	r2, [r3, #12]
  }  
}
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	a0000060 	andge	r0, r0, r0, rrx
 8006174:	a0000080 	andge	r0, r0, r0, lsl #1

08006178 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8006194:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800619a:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 80061a0:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 80061a8:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 80061b0:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80061c6:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80061d0:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80061ec:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80061f6:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b10      	cmp	r3, #16
 800620a:	d109      	bne.n	8006220 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <FMC_NANDInit+0xc4>)
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <FMC_NANDInit+0xc4>)
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <FMC_NANDInit+0xc4>)
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	e008      	b.n	8006232 <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <FMC_NANDInit+0xc8>)
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <FMC_NANDInit+0xc8>)
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <FMC_NANDInit+0xc8>)
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	60da      	str	r2, [r3, #12]
  }
}
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	a0000060 	andge	r0, r0, r0, rrx
 8006240:	a0000080 	andge	r0, r0, r0, lsl #1

08006244 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2210      	movs	r2, #16
 8006250:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2210      	movs	r2, #16
 800625c:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	22fc      	movs	r2, #252	; 0xfc
 800627c:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	22fc      	movs	r2, #252	; 0xfc
 8006284:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	22fc      	movs	r2, #252	; 0xfc
 800628c:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	22fc      	movs	r2, #252	; 0xfc
 8006294:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	22fc      	movs	r2, #252	; 0xfc
 800629c:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	22fc      	movs	r2, #252	; 0xfc
 80062a4:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	22fc      	movs	r2, #252	; 0xfc
 80062ac:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	22fc      	movs	r2, #252	; 0xfc
 80062b4:	60da      	str	r2, [r3, #12]
}
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d010      	beq.n	80062f4 <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d106      	bne.n	80062e6 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <FMC_NANDCmd+0x60>)
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <FMC_NANDCmd+0x60>)
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	f042 0204 	orr.w	r2, r2, #4
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e016      	b.n	8006314 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <FMC_NANDCmd+0x64>)
 80062e8:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <FMC_NANDCmd+0x64>)
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	f042 0204 	orr.w	r2, r2, #4
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e00f      	b.n	8006314 <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d106      	bne.n	8006308 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <FMC_NANDCmd+0x60>)
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <FMC_NANDCmd+0x60>)
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <FMC_NANDCmd+0x68>)
 8006302:	400b      	ands	r3, r1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e005      	b.n	8006314 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8006308:	4a06      	ldr	r2, [pc, #24]	; (8006324 <FMC_NANDCmd+0x64>)
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <FMC_NANDCmd+0x64>)
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <FMC_NANDCmd+0x68>)
 8006310:	400b      	ands	r3, r1
 8006312:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	a0000060 	andge	r0, r0, r0, rrx
 8006324:	a0000080 	andge	r0, r0, r0, lsl #1
 8006328:	000ffffb 	strdeq	pc, [pc], -fp

0800632c <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d010      	beq.n	8006360 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b10      	cmp	r3, #16
 8006342:	d106      	bne.n	8006352 <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <FMC_NANDECCCmd+0x60>)
 8006346:	4a11      	ldr	r2, [pc, #68]	; (800638c <FMC_NANDECCCmd+0x60>)
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e016      	b.n	8006380 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <FMC_NANDECCCmd+0x64>)
 8006354:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <FMC_NANDECCCmd+0x64>)
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e00f      	b.n	8006380 <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b10      	cmp	r3, #16
 8006364:	d106      	bne.n	8006374 <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <FMC_NANDECCCmd+0x60>)
 8006368:	4b08      	ldr	r3, [pc, #32]	; (800638c <FMC_NANDECCCmd+0x60>)
 800636a:	6819      	ldr	r1, [r3, #0]
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <FMC_NANDECCCmd+0x68>)
 800636e:	400b      	ands	r3, r1
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e005      	b.n	8006380 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8006374:	4a06      	ldr	r2, [pc, #24]	; (8006390 <FMC_NANDECCCmd+0x64>)
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <FMC_NANDECCCmd+0x64>)
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <FMC_NANDECCCmd+0x68>)
 800637c:	400b      	ands	r3, r1
 800637e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	a0000060 	andge	r0, r0, r0, rrx
 8006390:	a0000080 	andge	r0, r0, r0, lsl #1
 8006394:	000fffbf 			; <UNDEFINED> instruction: 0x000fffbf

08006398 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d103      	bne.n	80063b2 <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <FMC_GetECC+0x30>)
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e002      	b.n	80063b8 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <FMC_GetECC+0x34>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	a0000060 	andge	r0, r0, r0, rrx
 80063cc:	a0000080 	andge	r0, r0, r0, lsl #1

080063d0 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <FMC_PCCARDDeInit+0x30>)
 80063d6:	2218      	movs	r2, #24
 80063d8:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <FMC_PCCARDDeInit+0x30>)
 80063dc:	2200      	movs	r2, #0
 80063de:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <FMC_PCCARDDeInit+0x30>)
 80063e2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80063e6:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <FMC_PCCARDDeInit+0x30>)
 80063ea:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80063ee:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 80063f0:	4b03      	ldr	r3, [pc, #12]	; (8006400 <FMC_PCCARDDeInit+0x30>)
 80063f2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80063f6:	611a      	str	r2, [r3, #16]
}
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	a00000a0 	andge	r0, r0, r0, lsr #1

08006404 <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800640c:	4b27      	ldr	r3, [pc, #156]	; (80064ac <FMC_PCCARDInit+0xa8>)
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 8006418:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6892      	ldr	r2, [r2, #8]
 800641e:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8006420:	430a      	orrs	r2, r1
 8006422:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8006426:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <FMC_PCCARDInit+0xa8>)
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68d2      	ldr	r2, [r2, #12]
 800642e:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68d2      	ldr	r2, [r2, #12]
 8006434:	6852      	ldr	r2, [r2, #4]
 8006436:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8006438:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68d2      	ldr	r2, [r2, #12]
 800643e:	6892      	ldr	r2, [r2, #8]
 8006440:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006442:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68d2      	ldr	r2, [r2, #12]
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800644c:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800644e:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006450:	4b16      	ldr	r3, [pc, #88]	; (80064ac <FMC_PCCARDInit+0xa8>)
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6912      	ldr	r2, [r2, #16]
 8006456:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6912      	ldr	r2, [r2, #16]
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006460:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6912      	ldr	r2, [r2, #16]
 8006466:	6892      	ldr	r2, [r2, #8]
 8006468:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800646a:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6912      	ldr	r2, [r2, #16]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8006474:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8006476:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <FMC_PCCARDInit+0xa8>)
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6952      	ldr	r2, [r2, #20]
 800647e:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6952      	ldr	r2, [r2, #20]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8006488:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6952      	ldr	r2, [r2, #20]
 800648e:	6892      	ldr	r2, [r2, #8]
 8006490:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8006492:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6952      	ldr	r2, [r2, #20]
 8006498:	68d2      	ldr	r2, [r2, #12]
 800649a:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800649c:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800649e:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	a00000a0 	andge	r0, r0, r0, lsr #1

080064b0 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	22fc      	movs	r2, #252	; 0xfc
 80064d0:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	22fc      	movs	r2, #252	; 0xfc
 80064d8:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	22fc      	movs	r2, #252	; 0xfc
 80064e0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	22fc      	movs	r2, #252	; 0xfc
 80064e8:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	22fc      	movs	r2, #252	; 0xfc
 80064f0:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	22fc      	movs	r2, #252	; 0xfc
 80064f8:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	22fc      	movs	r2, #252	; 0xfc
 8006500:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	22fc      	movs	r2, #252	; 0xfc
 8006508:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	22fc      	movs	r2, #252	; 0xfc
 8006510:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	22fc      	movs	r2, #252	; 0xfc
 8006518:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	22fc      	movs	r2, #252	; 0xfc
 8006520:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	22fc      	movs	r2, #252	; 0xfc
 8006528:	60da      	str	r2, [r3, #12]
}
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8006544:	4b08      	ldr	r3, [pc, #32]	; (8006568 <FMC_PCCARDCmd+0x34>)
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <FMC_PCCARDCmd+0x34>)
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	f042 0204 	orr.w	r2, r2, #4
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e005      	b.n	800655e <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <FMC_PCCARDCmd+0x34>)
 8006554:	4b04      	ldr	r3, [pc, #16]	; (8006568 <FMC_PCCARDCmd+0x34>)
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <FMC_PCCARDCmd+0x38>)
 800655a:	400b      	ands	r3, r1
 800655c:	6013      	str	r3, [r2, #0]
  }
}
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	a00000a0 	andge	r0, r0, r0, lsr #1
 800656c:	000ffffb 	strdeq	pc, [pc], -fp

08006570 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <FMC_SDRAMDeInit+0x40>)
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8006580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <FMC_SDRAMDeInit+0x40>)
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	3202      	adds	r2, #2
 800658a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800658e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <FMC_SDRAMDeInit+0x40>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <FMC_SDRAMDeInit+0x40>)
 800659a:	2200      	movs	r2, #0
 800659c:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <FMC_SDRAMDeInit+0x40>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
}  
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	a0000140 	andge	r0, r0, r0, asr #2

080065b4 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80065d4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80065da:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80065e0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80065e6:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80065ec:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80065f2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80065f8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800660a:	4b40      	ldr	r3, [pc, #256]	; (800670c <FMC_SDRAMInit+0x158>)
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	6979      	ldr	r1, [r7, #20]
 8006612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006616:	e011      	b.n	800663c <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8006620:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800662a:	4b38      	ldr	r3, [pc, #224]	; (800670c <FMC_SDRAMInit+0x158>)
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <FMC_SDRAMInit+0x158>)
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d130      	bne.n	80066a6 <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006656:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8006662:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	3b01      	subs	r3, #1
 800666c:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800666e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	3b01      	subs	r3, #1
 8006678:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800667a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	3b01      	subs	r3, #1
 8006684:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8006686:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	3b01      	subs	r3, #1
 8006690:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <FMC_SDRAMInit+0x158>)
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	3202      	adds	r2, #2
 800669e:	6939      	ldr	r1, [r7, #16]
 80066a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80066a4:	e02c      	b.n	8006700 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80066b8:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80066c4:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	3b01      	subs	r3, #1
 80066dc:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80066ec:	4b07      	ldr	r3, [pc, #28]	; (800670c <FMC_SDRAMInit+0x158>)
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <FMC_SDRAMInit+0x158>)
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	3202      	adds	r2, #2
 80066fa:	6939      	ldr	r1, [r7, #16]
 80066fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	a0000140 	andge	r0, r0, r0, asr #2

08006710 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2210      	movs	r2, #16
 800672e:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2240      	movs	r2, #64	; 0x40
 8006734:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2280      	movs	r2, #128	; 0x80
 800673a:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006742:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	2210      	movs	r2, #16
 800675c:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	2210      	movs	r2, #16
 8006764:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	2210      	movs	r2, #16
 800676c:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	2210      	movs	r2, #16
 8006774:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	2210      	movs	r2, #16
 800677c:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	2210      	movs	r2, #16
 8006784:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	2210      	movs	r2, #16
 800678c:	619a      	str	r2, [r3, #24]
  
}
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80067ac:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 80067b6:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 80067c2:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <FMC_SDRAMCmdConfig+0x3c>)
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	611a      	str	r2, [r3, #16]

}
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	a0000140 	andge	r0, r0, r0, asr #2

080067d8 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <FMC_GetModeStatus+0x38>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0306 	and.w	r3, r3, #6
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e005      	b.n	8006802 <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <FMC_GetModeStatus+0x38>)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 0318 	and.w	r3, r3, #24
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 8006802:	68fb      	ldr	r3, [r7, #12]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	a0000140 	andge	r0, r0, r0, asr #2

08006814 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <FMC_SetRefreshCount+0x20>)
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <FMC_SetRefreshCount+0x20>)
 8006820:	6951      	ldr	r1, [r2, #20]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	430a      	orrs	r2, r1
 8006828:	615a      	str	r2, [r3, #20]
   
}
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	a0000140 	andge	r0, r0, r0, asr #2

08006838 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <FMC_SetAutoRefresh_Number+0x20>)
 8006842:	4a05      	ldr	r2, [pc, #20]	; (8006858 <FMC_SetAutoRefresh_Number+0x20>)
 8006844:	6911      	ldr	r1, [r2, #16]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	0152      	lsls	r2, r2, #5
 800684a:	430a      	orrs	r2, r1
 800684c:	611a      	str	r2, [r3, #16]
}
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	a0000140 	andge	r0, r0, r0, asr #2

0800685c <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006870:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006878:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006882:	e00a      	b.n	800689a <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 8006884:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <FMC_SDRAMWriteProtectionConfig+0x48>)
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800688e:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8006892:	400b      	ands	r3, r1
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	a0000140 	andge	r0, r0, r0, asr #2

080068a8 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d026      	beq.n	800690a <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d106      	bne.n	80068d0 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 80068c2:	4b29      	ldr	r3, [pc, #164]	; (8006968 <FMC_ITConfig+0xc0>)
 80068c4:	4a28      	ldr	r2, [pc, #160]	; (8006968 <FMC_ITConfig+0xc0>)
 80068c6:	6851      	ldr	r1, [r2, #4]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e046      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d6:	d106      	bne.n	80068e6 <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 80068d8:	4b24      	ldr	r3, [pc, #144]	; (800696c <FMC_ITConfig+0xc4>)
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <FMC_ITConfig+0xc4>)
 80068dc:	6851      	ldr	r1, [r2, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	e03b      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d106      	bne.n	80068fc <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 80068ee:	4b20      	ldr	r3, [pc, #128]	; (8006970 <FMC_ITConfig+0xc8>)
 80068f0:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <FMC_ITConfig+0xc8>)
 80068f2:	6851      	ldr	r1, [r2, #4]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e030      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <FMC_ITConfig+0xcc>)
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <FMC_ITConfig+0xcc>)
 8006900:	6951      	ldr	r1, [r2, #20]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	430a      	orrs	r2, r1
 8006906:	615a      	str	r2, [r3, #20]
 8006908:	e029      	b.n	800695e <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b10      	cmp	r3, #16
 800690e:	d107      	bne.n	8006920 <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8006910:	4b15      	ldr	r3, [pc, #84]	; (8006968 <FMC_ITConfig+0xc0>)
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <FMC_ITConfig+0xc0>)
 8006914:	6851      	ldr	r1, [r2, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	43d2      	mvns	r2, r2
 800691a:	400a      	ands	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e01e      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006926:	d107      	bne.n	8006938 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <FMC_ITConfig+0xc4>)
 800692a:	4a10      	ldr	r2, [pc, #64]	; (800696c <FMC_ITConfig+0xc4>)
 800692c:	6851      	ldr	r1, [r2, #4]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	43d2      	mvns	r2, r2
 8006932:	400a      	ands	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	e012      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d107      	bne.n	8006950 <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <FMC_ITConfig+0xc8>)
 8006942:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <FMC_ITConfig+0xc8>)
 8006944:	6851      	ldr	r1, [r2, #4]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	43d2      	mvns	r2, r2
 800694a:	400a      	ands	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	e006      	b.n	800695e <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8006950:	4b08      	ldr	r3, [pc, #32]	; (8006974 <FMC_ITConfig+0xcc>)
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <FMC_ITConfig+0xcc>)
 8006954:	6951      	ldr	r1, [r2, #20]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	43d2      	mvns	r2, r2
 800695a:	400a      	ands	r2, r1
 800695c:	615a      	str	r2, [r3, #20]
    }
  }
}
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	a0000060 	andge	r0, r0, r0, rrx
 800696c:	a0000080 	andge	r0, r0, r0, lsl #1
 8006970:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006974:	a0000140 	andge	r0, r0, r0, asr #2

08006978 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b10      	cmp	r3, #16
 800698e:	d103      	bne.n	8006998 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <FMC_GetFlagStatus+0x6c>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	e012      	b.n	80069be <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d103      	bne.n	80069a8 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 80069a0:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <FMC_GetFlagStatus+0x70>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	e00a      	b.n	80069be <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ae:	d103      	bne.n	80069b8 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <FMC_GetFlagStatus+0x74>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	e002      	b.n	80069be <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80069b8:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <FMC_GetFlagStatus+0x78>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	401a      	ands	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d002      	beq.n	80069d0 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
 80069ce:	e001      	b.n	80069d4 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	a0000060 	andge	r0, r0, r0, rrx
 80069e8:	a0000080 	andge	r0, r0, r0, lsl #1
 80069ec:	a00000a0 	andge	r0, r0, r0, lsr #1
 80069f0:	a0000140 	andge	r0, r0, r0, asr #2

080069f4 <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d107      	bne.n	8006a14 <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 8006a04:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <FMC_ClearFlag+0x68>)
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <FMC_ClearFlag+0x68>)
 8006a08:	6851      	ldr	r1, [r2, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	43d2      	mvns	r2, r2
 8006a0e:	400a      	ands	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e01e      	b.n	8006a52 <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d107      	bne.n	8006a2c <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <FMC_ClearFlag+0x6c>)
 8006a1e:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <FMC_ClearFlag+0x6c>)
 8006a20:	6851      	ldr	r1, [r2, #4]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	43d2      	mvns	r2, r2
 8006a26:	400a      	ands	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	e012      	b.n	8006a52 <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d107      	bne.n	8006a44 <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <FMC_ClearFlag+0x70>)
 8006a36:	4a0b      	ldr	r2, [pc, #44]	; (8006a64 <FMC_ClearFlag+0x70>)
 8006a38:	6851      	ldr	r1, [r2, #4]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	43d2      	mvns	r2, r2
 8006a3e:	400a      	ands	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	e006      	b.n	8006a52 <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <FMC_ClearFlag+0x74>)
 8006a46:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <FMC_ClearFlag+0x74>)
 8006a48:	6951      	ldr	r1, [r2, #20]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	43d2      	mvns	r2, r2
 8006a4e:	400a      	ands	r2, r1
 8006a50:	615a      	str	r2, [r3, #20]
  }
  
}
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	a0000060 	andge	r0, r0, r0, rrx
 8006a60:	a0000080 	andge	r0, r0, r0, lsl #1
 8006a64:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006a68:	a0000140 	andge	r0, r0, r0, asr #2

08006a6c <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d103      	bne.n	8006a98 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 8006a90:	4b1f      	ldr	r3, [pc, #124]	; (8006b10 <FMC_GetITStatus+0xa4>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e015      	b.n	8006ac4 <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d103      	bne.n	8006aa8 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 8006aa0:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <FMC_GetITStatus+0xa8>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e00d      	b.n	8006ac4 <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aae:	d103      	bne.n	8006ab8 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <FMC_GetITStatus+0xac>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e005      	b.n	8006ac4 <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8006ab8:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <FMC_GetITStatus+0xb0>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 8006abe:	4b17      	ldr	r3, [pc, #92]	; (8006b1c <FMC_GetITStatus+0xb0>)
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <FMC_GetITStatus+0x6c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d104      	bne.n	8006ae2 <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	e004      	b.n	8006aec <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	08da      	lsrs	r2, r3, #3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <FMC_GetITStatus+0x92>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e001      	b.n	8006b02 <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 8006afe:	2300      	movs	r3, #0
 8006b00:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 8006b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3724      	adds	r7, #36	; 0x24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	a0000060 	andge	r0, r0, r0, rrx
 8006b14:	a0000080 	andge	r0, r0, r0, lsl #1
 8006b18:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006b1c:	a0000140 	andge	r0, r0, r0, asr #2

08006b20 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d108      	bne.n	8006b42 <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 8006b30:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <FMC_ClearITPendingBit+0x6c>)
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <FMC_ClearITPendingBit+0x6c>)
 8006b34:	6851      	ldr	r1, [r2, #4]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	08d2      	lsrs	r2, r2, #3
 8006b3a:	43d2      	mvns	r2, r2
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	e01f      	b.n	8006b82 <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b48:	d108      	bne.n	8006b5c <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <FMC_ClearITPendingBit+0x70>)
 8006b4c:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <FMC_ClearITPendingBit+0x70>)
 8006b4e:	6851      	ldr	r1, [r2, #4]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	08d2      	lsrs	r2, r2, #3
 8006b54:	43d2      	mvns	r2, r2
 8006b56:	400a      	ands	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	e012      	b.n	8006b82 <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	d108      	bne.n	8006b76 <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <FMC_ClearITPendingBit+0x74>)
 8006b66:	4a0b      	ldr	r2, [pc, #44]	; (8006b94 <FMC_ClearITPendingBit+0x74>)
 8006b68:	6851      	ldr	r1, [r2, #4]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	08d2      	lsrs	r2, r2, #3
 8006b6e:	43d2      	mvns	r2, r2
 8006b70:	400a      	ands	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	e005      	b.n	8006b82 <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 8006b76:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <FMC_ClearITPendingBit+0x78>)
 8006b78:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <FMC_ClearITPendingBit+0x78>)
 8006b7a:	6952      	ldr	r2, [r2, #20]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	615a      	str	r2, [r3, #20]
  }
}
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	a0000060 	andge	r0, r0, r0, rrx
 8006b90:	a0000080 	andge	r0, r0, r0, lsl #1
 8006b94:	a00000a0 	andge	r0, r0, r0, lsr #1
 8006b98:	a0000140 	andge	r0, r0, r0, asr #2

08006b9c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8006ba0:	2040      	movs	r0, #64	; 0x40
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	f7fb fc10 	bl	80023c8 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8006ba8:	2040      	movs	r0, #64	; 0x40
 8006baa:	2100      	movs	r1, #0
 8006bac:	f7fb fc0c 	bl	80023c8 <RCC_AHB2PeriphResetCmd>
}
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8006bc4:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <RNG_Cmd+0x34>)
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <RNG_Cmd+0x34>)
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	f042 0204 	orr.w	r2, r2, #4
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e005      	b.n	8006bde <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <RNG_Cmd+0x34>)
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <RNG_Cmd+0x34>)
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	f022 0204 	bic.w	r2, r2, #4
 8006bdc:	601a      	str	r2, [r3, #0]
  }
}
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	50060800 	andpl	r0, r6, r0, lsl #16

08006bec <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8006bf0:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <RNG_GetRandomNumber+0x14>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	50060800 	andpl	r0, r6, r0, lsl #16

08006c04 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <RNG_ITConfig+0x34>)
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <RNG_ITConfig+0x34>)
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e005      	b.n	8006c2e <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <RNG_ITConfig+0x34>)
 8006c24:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <RNG_ITConfig+0x34>)
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	f022 0208 	bic.w	r2, r2, #8
 8006c2c:	601a      	str	r2, [r3, #0]
  }
}
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	50060800 	andpl	r0, r6, r0, lsl #16

08006c3c <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <RNG_GetFlagStatus+0x34>)
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
 8006c5a:	e001      	b.n	8006c60 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	50060800 	andpl	r0, r6, r0, lsl #16

08006c74 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <RNG_ClearFlag+0x20>)
 8006c80:	79fa      	ldrb	r2, [r7, #7]
 8006c82:	0112      	lsls	r2, r2, #4
 8006c84:	43d2      	mvns	r2, r2
 8006c86:	605a      	str	r2, [r3, #4]
}
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	50060800 	andpl	r0, r6, r0, lsl #16

08006c98 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <RNG_GetITStatus+0x34>)
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	e001      	b.n	8006cbc <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	50060800 	andpl	r0, r6, r0, lsl #16

08006cd0 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <RNG_ClearITPendingBit+0x20>)
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	43d2      	mvns	r2, r2
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	605a      	str	r2, [r3, #4]
}
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	50060800 	andpl	r0, r6, r0, lsl #16

08006cf4 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8006cfe:	79fa      	ldrb	r2, [r7, #7]
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <STM_EVAL_LEDInit+0x50>)
 8006d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d06:	4618      	mov	r0, r3
 8006d08:	2101      	movs	r1, #1
 8006d0a:	f7fb faa9 	bl	8002260 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8006d0e:	79fa      	ldrb	r2, [r7, #7]
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <STM_EVAL_LEDInit+0x54>)
 8006d12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006d24:	2302      	movs	r3, #2
 8006d26:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8006d28:	79fa      	ldrb	r2, [r7, #7]
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <STM_EVAL_LEDInit+0x58>)
 8006d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4610      	mov	r0, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	f7fa fd18 	bl	800176c <GPIO_Init>
}
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	0800c96c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr, pc}
 8006d48:	0800c968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr, pc}
 8006d4c:	20000024 	andcs	r0, r0, r4, lsr #32

08006d50 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8006d5a:	79fa      	ldrb	r2, [r7, #7]
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <STM_EVAL_LEDOn+0x28>)
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	79f9      	ldrb	r1, [r7, #7]
 8006d64:	4a05      	ldr	r2, [pc, #20]	; (8006d7c <STM_EVAL_LEDOn+0x2c>)
 8006d66:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d6a:	831a      	strh	r2, [r3, #24]
}
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000024 	andcs	r0, r0, r4, lsr #32
 8006d7c:	0800c968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr, pc}

08006d80 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8006d8a:	79fa      	ldrb	r2, [r7, #7]
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <STM_EVAL_LEDOff+0x28>)
 8006d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d92:	79f9      	ldrb	r1, [r7, #7]
 8006d94:	4a05      	ldr	r2, [pc, #20]	; (8006dac <STM_EVAL_LEDOff+0x2c>)
 8006d96:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d9a:	835a      	strh	r2, [r3, #26]
}
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000024 	andcs	r0, r0, r4, lsr #32
 8006dac:	0800c968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr, pc}

08006db0 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8006dba:	79fa      	ldrb	r2, [r7, #7]
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <STM_EVAL_LEDToggle+0x34>)
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	79f9      	ldrb	r1, [r7, #7]
 8006dc4:	4a07      	ldr	r2, [pc, #28]	; (8006de4 <STM_EVAL_LEDToggle+0x34>)
 8006dc6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006dca:	6951      	ldr	r1, [r2, #20]
 8006dcc:	79f8      	ldrb	r0, [r7, #7]
 8006dce:	4a06      	ldr	r2, [pc, #24]	; (8006de8 <STM_EVAL_LEDToggle+0x38>)
 8006dd0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8006dd4:	404a      	eors	r2, r1
 8006dd6:	615a      	str	r2, [r3, #20]
}
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000024 	andcs	r0, r0, r4, lsr #32
 8006de8:	0800c968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr, pc}

08006dec <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	71fa      	strb	r2, [r7, #7]
 8006df8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	2101      	movs	r1, #1
 8006e00:	f7fb fa2e 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8006e04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006e08:	2101      	movs	r1, #1
 8006e0a:	f7fb faa1 	bl	8002350 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8006e12:	2302      	movs	r3, #2
 8006e14:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8006e1a:	79fa      	ldrb	r2, [r7, #7]
 8006e1c:	4b17      	ldr	r3, [pc, #92]	; (8006e7c <STM_EVAL_PBInit+0x90>)
 8006e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7fa fc9f 	bl	800176c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8006e2e:	79bb      	ldrb	r3, [r7, #6]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d11f      	bne.n	8006e74 <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8006e34:	2200      	movs	r2, #0
 8006e36:	2300      	movs	r3, #0
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f7fc f944 	bl	80030c8 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8006e40:	2301      	movs	r3, #1
 8006e42:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006e44:	2300      	movs	r3, #0
 8006e46:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8006e48:	2308      	movs	r3, #8
 8006e4a:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8006e50:	f107 0310 	add.w	r3, r7, #16
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd fe91 	bl	8004b7c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8006e5e:	230f      	movs	r3, #15
 8006e60:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8006e62:	230f      	movs	r3, #15
 8006e64:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fa fb1a 	bl	80014a8 <NVIC_Init>
  }
}
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2000002c 	andcs	r0, r0, ip, lsr #32

08006e80 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006e8a:	79fa      	ldrb	r2, [r7, #7]
 8006e8c:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <STM_EVAL_PBGetState+0x28>)
 8006e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	f7fa fd32 	bl	8001900 <GPIO_ReadInputDataBit>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000002c 	andcs	r0, r0, ip, lsr #32

08006eac <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 8006eb2:	4826      	ldr	r0, [pc, #152]	; (8006f4c <sEE_LowLevel_DeInit+0xa0>)
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	f7fc fa97 	bl	80033e8 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 8006eba:	4824      	ldr	r0, [pc, #144]	; (8006f4c <sEE_LowLevel_DeInit+0xa0>)
 8006ebc:	f7fc f97a 	bl	80031b4 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 8006ec0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	f7fb fa25 	bl	8002314 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8006eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8006ed8:	463b      	mov	r3, r7
 8006eda:	481d      	ldr	r0, [pc, #116]	; (8006f50 <sEE_LowLevel_DeInit+0xa4>)
 8006edc:	4619      	mov	r1, r3
 8006ede:	f7fa fc45 	bl	800176c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8006ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee6:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8006ee8:	463b      	mov	r3, r7
 8006eea:	481a      	ldr	r0, [pc, #104]	; (8006f54 <sEE_LowLevel_DeInit+0xa8>)
 8006eec:	4619      	mov	r1, r3
 8006eee:	f7fa fc3d 	bl	800176c <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006ef4:	220f      	movs	r2, #15
 8006ef6:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006ef8:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006efe:	4b16      	ldr	r3, [pc, #88]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8006f04:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006f0a:	4813      	ldr	r0, [pc, #76]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f0c:	f7fa facc 	bl	80014a8 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8006f10:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f12:	220d      	movs	r2, #13
 8006f14:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006f16:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8006f22:	480d      	ldr	r0, [pc, #52]	; (8006f58 <sEE_LowLevel_DeInit+0xac>)
 8006f24:	f7fa fac0 	bl	80014a8 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8006f28:	480c      	ldr	r0, [pc, #48]	; (8006f5c <sEE_LowLevel_DeInit+0xb0>)
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f7fc ffa4 	bl	8003e78 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8006f30:	480b      	ldr	r0, [pc, #44]	; (8006f60 <sEE_LowLevel_DeInit+0xb4>)
 8006f32:	2100      	movs	r1, #0
 8006f34:	f7fc ffa0 	bl	8003e78 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8006f38:	4808      	ldr	r0, [pc, #32]	; (8006f5c <sEE_LowLevel_DeInit+0xb0>)
 8006f3a:	f7fc fe3f 	bl	8003bbc <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 8006f3e:	4808      	ldr	r0, [pc, #32]	; (8006f60 <sEE_LowLevel_DeInit+0xb4>)
 8006f40:	f7fc fe3c 	bl	8003bbc <DMA_DeInit>
}
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40005c00 	andmi	r5, r0, r0, lsl #24
 8006f50:	40020000 	andmi	r0, r2, r0
 8006f54:	40020800 	andmi	r0, r2, r0, lsl #16
 8006f58:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8006f5c:	40026070 	andmi	r6, r2, r0, ror r0
 8006f60:	40026040 	andmi	r6, r2, r0, asr #32

08006f64 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 8006f6a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006f6e:	2101      	movs	r1, #1
 8006f70:	f7fb f9d0 	bl	8002314 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 8006f74:	2005      	movs	r0, #5
 8006f76:	2101      	movs	r1, #1
 8006f78:	f7fb f972 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8006f7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006f80:	2101      	movs	r1, #1
 8006f82:	f7fb f9e5 	bl	8002350 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 8006f86:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	f7fb fa58 	bl	8002440 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 8006f90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006f94:	2100      	movs	r1, #0
 8006f96:	f7fb fa53 	bl	8002440 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8006f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	4849      	ldr	r0, [pc, #292]	; (80070d8 <sEE_LowLevel_Init+0x174>)
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f7fa fbd9 	bl	800176c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8006fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbe:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	4846      	ldr	r0, [pc, #280]	; (80070dc <sEE_LowLevel_Init+0x178>)
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7fa fbd1 	bl	800176c <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 8006fca:	4843      	ldr	r0, [pc, #268]	; (80070d8 <sEE_LowLevel_Init+0x174>)
 8006fcc:	2108      	movs	r1, #8
 8006fce:	2204      	movs	r2, #4
 8006fd0:	f7fa fd3a 	bl	8001a48 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8006fd4:	4841      	ldr	r0, [pc, #260]	; (80070dc <sEE_LowLevel_Init+0x178>)
 8006fd6:	2109      	movs	r1, #9
 8006fd8:	2204      	movs	r2, #4
 8006fda:	f7fa fd35 	bl	8001a48 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8006fde:	4b40      	ldr	r3, [pc, #256]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006fe0:	220f      	movs	r2, #15
 8006fe2:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006fea:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006ff0:	4b3b      	ldr	r3, [pc, #236]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006ff6:	483a      	ldr	r0, [pc, #232]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006ff8:	f7fa fa56 	bl	80014a8 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8006ffc:	4b38      	ldr	r3, [pc, #224]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8006ffe:	220d      	movs	r2, #13
 8007000:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8007004:	2200      	movs	r2, #0
 8007006:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8007008:	4b35      	ldr	r3, [pc, #212]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 800700a:	2200      	movs	r2, #0
 800700c:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 800700e:	4834      	ldr	r0, [pc, #208]	; (80070e0 <sEE_LowLevel_Init+0x17c>)
 8007010:	f7fa fa4a 	bl	80014a8 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8007014:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007018:	2101      	movs	r1, #1
 800701a:	f7fb f921 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 800701e:	4831      	ldr	r0, [pc, #196]	; (80070e4 <sEE_LowLevel_Init+0x180>)
 8007020:	4931      	ldr	r1, [pc, #196]	; (80070e8 <sEE_LowLevel_Init+0x184>)
 8007022:	f7fd f863 	bl	80040ec <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8007026:	482f      	ldr	r0, [pc, #188]	; (80070e4 <sEE_LowLevel_Init+0x180>)
 8007028:	2100      	movs	r1, #0
 800702a:	f7fc ff25 	bl	8003e78 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800702e:	482d      	ldr	r0, [pc, #180]	; (80070e4 <sEE_LowLevel_Init+0x180>)
 8007030:	f7fc fdc4 	bl	8003bbc <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007036:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800703a:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800703c:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800703e:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <sEE_LowLevel_Init+0x18c>)
 8007040:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 8007042:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007044:	2200      	movs	r2, #0
 8007046:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 800704e:	4b27      	ldr	r3, [pc, #156]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007054:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007056:	4b25      	ldr	r3, [pc, #148]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007058:	2200      	movs	r2, #0
 800705a:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800705c:	4b23      	ldr	r3, [pc, #140]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800705e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007062:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8007064:	4b21      	ldr	r3, [pc, #132]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007066:	2200      	movs	r2, #0
 8007068:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800706a:	4b20      	ldr	r3, [pc, #128]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800706c:	2200      	movs	r2, #0
 800706e:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8007070:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007072:	2200      	movs	r2, #0
 8007074:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8007076:	4b1d      	ldr	r3, [pc, #116]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007078:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800707c:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800707e:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007080:	2204      	movs	r2, #4
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8007084:	4b19      	ldr	r3, [pc, #100]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007086:	2203      	movs	r2, #3
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800708c:	2200      	movs	r2, #0
 800708e:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8007090:	4b16      	ldr	r3, [pc, #88]	; (80070ec <sEE_LowLevel_Init+0x188>)
 8007092:	2200      	movs	r2, #0
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 8007096:	4813      	ldr	r0, [pc, #76]	; (80070e4 <sEE_LowLevel_Init+0x180>)
 8007098:	4914      	ldr	r1, [pc, #80]	; (80070ec <sEE_LowLevel_Init+0x188>)
 800709a:	f7fc fe61 	bl	8003d60 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 800709e:	4815      	ldr	r0, [pc, #84]	; (80070f4 <sEE_LowLevel_Init+0x190>)
 80070a0:	4915      	ldr	r1, [pc, #84]	; (80070f8 <sEE_LowLevel_Init+0x194>)
 80070a2:	f7fd f823 	bl	80040ec <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80070a6:	4813      	ldr	r0, [pc, #76]	; (80070f4 <sEE_LowLevel_Init+0x190>)
 80070a8:	2100      	movs	r1, #0
 80070aa:	f7fc fee5 	bl	8003e78 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 80070ae:	4811      	ldr	r0, [pc, #68]	; (80070f4 <sEE_LowLevel_Init+0x190>)
 80070b0:	f7fc fd84 	bl	8003bbc <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 80070b4:	480f      	ldr	r0, [pc, #60]	; (80070f4 <sEE_LowLevel_Init+0x190>)
 80070b6:	490d      	ldr	r1, [pc, #52]	; (80070ec <sEE_LowLevel_Init+0x188>)
 80070b8:	f7fc fe52 	bl	8003d60 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 80070bc:	4809      	ldr	r0, [pc, #36]	; (80070e4 <sEE_LowLevel_Init+0x180>)
 80070be:	2110      	movs	r1, #16
 80070c0:	2201      	movs	r2, #1
 80070c2:	f7fd f841 	bl	8004148 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 80070c6:	480b      	ldr	r0, [pc, #44]	; (80070f4 <sEE_LowLevel_Init+0x190>)
 80070c8:	2110      	movs	r1, #16
 80070ca:	2201      	movs	r2, #1
 80070cc:	f7fd f83c 	bl	8004148 <DMA_ITConfig>
}
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40020000 	andmi	r0, r2, r0
 80070dc:	40020800 	andmi	r0, r2, r0, lsl #16
 80070e0:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80070e4:	40026070 	andmi	r6, r2, r0, ror r0
 80070e8:	2000003d 	andcs	r0, r0, sp, lsr r0
 80070ec:	20000494 	mulcs	r0, r4, r4
 80070f0:	40005c10 	andmi	r5, r0, r0, lsl ip
 80070f4:	40026040 	andmi	r6, r2, r0, asr #32
 80070f8:	103d0000 	eorsne	r0, sp, r0

080070fc <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10d      	bne.n	800712a <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007116:	2240      	movs	r2, #64	; 0x40
 8007118:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 8007120:	480b      	ldr	r0, [pc, #44]	; (8007150 <sEE_LowLevel_DMAConfig+0x54>)
 8007122:	490a      	ldr	r1, [pc, #40]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007124:	f7fc fe1c 	bl	8003d60 <DMA_Init>
 8007128:	e00c      	b.n	8007144 <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007132:	2200      	movs	r2, #0
 8007134:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 800713c:	4805      	ldr	r0, [pc, #20]	; (8007154 <sEE_LowLevel_DMAConfig+0x58>)
 800713e:	4903      	ldr	r1, [pc, #12]	; (800714c <sEE_LowLevel_DMAConfig+0x50>)
 8007140:	f7fc fe0e 	bl	8003d60 <DMA_Init>
  }
}
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000494 	mulcs	r0, r4, r4
 8007150:	40026070 	andmi	r6, r2, r0, ror r0
 8007154:	40026040 	andmi	r6, r2, r0, asr #32

08007158 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	; 0x48
 800715c:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 800715e:	f000 f835 	bl	80071cc <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8007162:	2001      	movs	r0, #1
 8007164:	2101      	movs	r1, #1
 8007166:	f7fb f8b7 	bl	80022d8 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 800716a:	2302      	movs	r3, #2
 800716c:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 800716e:	2307      	movs	r3, #7
 8007170:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 8007172:	2304      	movs	r3, #4
 8007174:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 8007176:	2307      	movs	r3, #7
 8007178:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 800717a:	2302      	movs	r3, #2
 800717c:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 800717e:	2302      	movs	r3, #2
 8007180:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8007182:	2302      	movs	r3, #2
 8007184:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8007186:	2301      	movs	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800718a:	2300      	movs	r3, #0
 800718c:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 800718e:	2304      	movs	r3, #4
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8007192:	2310      	movs	r3, #16
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8007196:	2340      	movs	r3, #64	; 0x40
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 800719a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80071a0:	2300      	movs	r3, #0
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 80071a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80071ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071b2:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 80071b4:	463b      	mov	r3, r7
 80071b6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80071b8:	f107 031c 	add.w	r3, r7, #28
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff f9f9 	bl	80065b4 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 80071c2:	f000 f90d 	bl	80073e0 <SDRAM_InitSequence>
  
}
 80071c6:	3748      	adds	r7, #72	; 0x48
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 80071d2:	207e      	movs	r0, #126	; 0x7e
 80071d4:	2101      	movs	r1, #1
 80071d6:	f7fb f843 	bl	8002260 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80071da:	2302      	movs	r3, #2
 80071dc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80071de:	2302      	movs	r3, #2
 80071e0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80071e2:	2300      	movs	r3, #0
 80071e4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 80071ea:	4877      	ldr	r0, [pc, #476]	; (80073c8 <SDRAM_GPIOConfig+0x1fc>)
 80071ec:	2105      	movs	r1, #5
 80071ee:	220c      	movs	r2, #12
 80071f0:	f7fa fc2a 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 80071f4:	4874      	ldr	r0, [pc, #464]	; (80073c8 <SDRAM_GPIOConfig+0x1fc>)
 80071f6:	2106      	movs	r1, #6
 80071f8:	220c      	movs	r2, #12
 80071fa:	f7fa fc25 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 80071fe:	2360      	movs	r3, #96	; 0x60
 8007200:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8007202:	463b      	mov	r3, r7
 8007204:	4870      	ldr	r0, [pc, #448]	; (80073c8 <SDRAM_GPIOConfig+0x1fc>)
 8007206:	4619      	mov	r1, r3
 8007208:	f7fa fab0 	bl	800176c <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 800720c:	486f      	ldr	r0, [pc, #444]	; (80073cc <SDRAM_GPIOConfig+0x200>)
 800720e:	2100      	movs	r1, #0
 8007210:	220c      	movs	r2, #12
 8007212:	f7fa fc19 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8007216:	2301      	movs	r3, #1
 8007218:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800721a:	463b      	mov	r3, r7
 800721c:	486b      	ldr	r0, [pc, #428]	; (80073cc <SDRAM_GPIOConfig+0x200>)
 800721e:	4619      	mov	r1, r3
 8007220:	f7fa faa4 	bl	800176c <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8007224:	486a      	ldr	r0, [pc, #424]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007226:	2100      	movs	r1, #0
 8007228:	220c      	movs	r2, #12
 800722a:	f7fa fc0d 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 800722e:	4868      	ldr	r0, [pc, #416]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007230:	2101      	movs	r1, #1
 8007232:	220c      	movs	r2, #12
 8007234:	f7fa fc08 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8007238:	4865      	ldr	r0, [pc, #404]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 800723a:	2108      	movs	r1, #8
 800723c:	220c      	movs	r2, #12
 800723e:	f7fa fc03 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8007242:	4863      	ldr	r0, [pc, #396]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007244:	2109      	movs	r1, #9
 8007246:	220c      	movs	r2, #12
 8007248:	f7fa fbfe 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 800724c:	4860      	ldr	r0, [pc, #384]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 800724e:	210a      	movs	r1, #10
 8007250:	220c      	movs	r2, #12
 8007252:	f7fa fbf9 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8007256:	485e      	ldr	r0, [pc, #376]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007258:	210e      	movs	r1, #14
 800725a:	220c      	movs	r2, #12
 800725c:	f7fa fbf4 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8007260:	485b      	ldr	r0, [pc, #364]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007262:	210f      	movs	r1, #15
 8007264:	220c      	movs	r2, #12
 8007266:	f7fa fbef 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 800726a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800726e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8007270:	463b      	mov	r3, r7
 8007272:	4857      	ldr	r0, [pc, #348]	; (80073d0 <SDRAM_GPIOConfig+0x204>)
 8007274:	4619      	mov	r1, r3
 8007276:	f7fa fa79 	bl	800176c <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 800727a:	4856      	ldr	r0, [pc, #344]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 800727c:	2100      	movs	r1, #0
 800727e:	220c      	movs	r2, #12
 8007280:	f7fa fbe2 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8007284:	4853      	ldr	r0, [pc, #332]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 8007286:	2101      	movs	r1, #1
 8007288:	220c      	movs	r2, #12
 800728a:	f7fa fbdd 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 800728e:	4851      	ldr	r0, [pc, #324]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 8007290:	2107      	movs	r1, #7
 8007292:	220c      	movs	r2, #12
 8007294:	f7fa fbd8 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8007298:	484e      	ldr	r0, [pc, #312]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 800729a:	2108      	movs	r1, #8
 800729c:	220c      	movs	r2, #12
 800729e:	f7fa fbd3 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80072a2:	484c      	ldr	r0, [pc, #304]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072a4:	2109      	movs	r1, #9
 80072a6:	220c      	movs	r2, #12
 80072a8:	f7fa fbce 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 80072ac:	4849      	ldr	r0, [pc, #292]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072ae:	210a      	movs	r1, #10
 80072b0:	220c      	movs	r2, #12
 80072b2:	f7fa fbc9 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 80072b6:	4847      	ldr	r0, [pc, #284]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072b8:	210b      	movs	r1, #11
 80072ba:	220c      	movs	r2, #12
 80072bc:	f7fa fbc4 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 80072c0:	4844      	ldr	r0, [pc, #272]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072c2:	210c      	movs	r1, #12
 80072c4:	220c      	movs	r2, #12
 80072c6:	f7fa fbbf 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 80072ca:	4842      	ldr	r0, [pc, #264]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072cc:	210d      	movs	r1, #13
 80072ce:	220c      	movs	r2, #12
 80072d0:	f7fa fbba 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 80072d4:	483f      	ldr	r0, [pc, #252]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072d6:	210e      	movs	r1, #14
 80072d8:	220c      	movs	r2, #12
 80072da:	f7fa fbb5 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 80072de:	483d      	ldr	r0, [pc, #244]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072e0:	210f      	movs	r1, #15
 80072e2:	220c      	movs	r2, #12
 80072e4:	f7fa fbb0 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 80072e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80072ec:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80072ee:	463b      	mov	r3, r7
 80072f0:	4838      	ldr	r0, [pc, #224]	; (80073d4 <SDRAM_GPIOConfig+0x208>)
 80072f2:	4619      	mov	r1, r3
 80072f4:	f7fa fa3a 	bl	800176c <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 80072f8:	4837      	ldr	r0, [pc, #220]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 80072fa:	2100      	movs	r1, #0
 80072fc:	220c      	movs	r2, #12
 80072fe:	f7fa fba3 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8007302:	4835      	ldr	r0, [pc, #212]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007304:	2101      	movs	r1, #1
 8007306:	220c      	movs	r2, #12
 8007308:	f7fa fb9e 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 800730c:	4832      	ldr	r0, [pc, #200]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 800730e:	2102      	movs	r1, #2
 8007310:	220c      	movs	r2, #12
 8007312:	f7fa fb99 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8007316:	4830      	ldr	r0, [pc, #192]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007318:	2103      	movs	r1, #3
 800731a:	220c      	movs	r2, #12
 800731c:	f7fa fb94 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8007320:	482d      	ldr	r0, [pc, #180]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007322:	2104      	movs	r1, #4
 8007324:	220c      	movs	r2, #12
 8007326:	f7fa fb8f 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 800732a:	482b      	ldr	r0, [pc, #172]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 800732c:	2105      	movs	r1, #5
 800732e:	220c      	movs	r2, #12
 8007330:	f7fa fb8a 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 8007334:	4828      	ldr	r0, [pc, #160]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007336:	210b      	movs	r1, #11
 8007338:	220c      	movs	r2, #12
 800733a:	f7fa fb85 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 800733e:	4826      	ldr	r0, [pc, #152]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007340:	210c      	movs	r1, #12
 8007342:	220c      	movs	r2, #12
 8007344:	f7fa fb80 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8007348:	4823      	ldr	r0, [pc, #140]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 800734a:	210d      	movs	r1, #13
 800734c:	220c      	movs	r2, #12
 800734e:	f7fa fb7b 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 8007352:	4821      	ldr	r0, [pc, #132]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007354:	210e      	movs	r1, #14
 8007356:	220c      	movs	r2, #12
 8007358:	f7fa fb76 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 800735c:	481e      	ldr	r0, [pc, #120]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 800735e:	210f      	movs	r1, #15
 8007360:	220c      	movs	r2, #12
 8007362:	f7fa fb71 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 8007366:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800736a:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 800736c:	463b      	mov	r3, r7
 800736e:	481a      	ldr	r0, [pc, #104]	; (80073d8 <SDRAM_GPIOConfig+0x20c>)
 8007370:	4619      	mov	r1, r3
 8007372:	f7fa f9fb 	bl	800176c <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 8007376:	4819      	ldr	r0, [pc, #100]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 8007378:	2100      	movs	r1, #0
 800737a:	220c      	movs	r2, #12
 800737c:	f7fa fb64 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8007380:	4816      	ldr	r0, [pc, #88]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 8007382:	2101      	movs	r1, #1
 8007384:	220c      	movs	r2, #12
 8007386:	f7fa fb5f 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 800738a:	4814      	ldr	r0, [pc, #80]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 800738c:	2104      	movs	r1, #4
 800738e:	220c      	movs	r2, #12
 8007390:	f7fa fb5a 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8007394:	4811      	ldr	r0, [pc, #68]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 8007396:	2105      	movs	r1, #5
 8007398:	220c      	movs	r2, #12
 800739a:	f7fa fb55 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 800739e:	480f      	ldr	r0, [pc, #60]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 80073a0:	2108      	movs	r1, #8
 80073a2:	220c      	movs	r2, #12
 80073a4:	f7fa fb50 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 80073aa:	210f      	movs	r1, #15
 80073ac:	220c      	movs	r2, #12
 80073ae:	f7fa fb4b 	bl	8001a48 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 80073b2:	f248 1333 	movw	r3, #33075	; 0x8133
 80073b6:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 80073b8:	463b      	mov	r3, r7
 80073ba:	4808      	ldr	r0, [pc, #32]	; (80073dc <SDRAM_GPIOConfig+0x210>)
 80073bc:	4619      	mov	r1, r3
 80073be:	f7fa f9d5 	bl	800176c <GPIO_Init>
}
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40020400 	andmi	r0, r2, r0, lsl #8
 80073cc:	40020800 	andmi	r0, r2, r0, lsl #16
 80073d0:	40020c00 	andmi	r0, r2, r0, lsl #24
 80073d4:	40021000 	andmi	r1, r2, r0
 80073d8:	40021400 	andmi	r1, r2, r0, lsl #8
 80073dc:	40021800 	andmi	r1, r2, r0, lsl #16

080073e0 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80073ea:	2301      	movs	r3, #1
 80073ec:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80073ee:	2308      	movs	r3, #8
 80073f0:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80073f2:	2301      	movs	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80073fa:	bf00      	nop
 80073fc:	2001      	movs	r0, #1
 80073fe:	2120      	movs	r1, #32
 8007400:	f7ff faba 	bl	8006978 <FMC_GetFlagStatus>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f8      	bne.n	80073fc <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f9c3 	bl	8006798 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8007412:	200a      	movs	r0, #10
 8007414:	f000 f8aa 	bl	800756c <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8007418:	2302      	movs	r3, #2
 800741a:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 800741c:	2308      	movs	r3, #8
 800741e:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8007420:	2301      	movs	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007428:	bf00      	nop
 800742a:	2001      	movs	r0, #1
 800742c:	2120      	movs	r1, #32
 800742e:	f7ff faa3 	bl	8006978 <FMC_GetFlagStatus>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1f8      	bne.n	800742a <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff f9ac 	bl	8006798 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8007440:	2303      	movs	r3, #3
 8007442:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8007444:	2308      	movs	r3, #8
 8007446:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8007448:	2304      	movs	r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007450:	bf00      	nop
 8007452:	2001      	movs	r0, #1
 8007454:	2120      	movs	r1, #32
 8007456:	f7ff fa8f 	bl	8006978 <FMC_GetFlagStatus>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f8      	bne.n	8007452 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8007460:	1d3b      	adds	r3, r7, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff f998 	bl	8006798 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007468:	bf00      	nop
 800746a:	2001      	movs	r0, #1
 800746c:	2120      	movs	r1, #32
 800746e:	f7ff fa83 	bl	8006978 <FMC_GetFlagStatus>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f8      	bne.n	800746a <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f98c 	bl	8006798 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8007480:	f240 2331 	movw	r3, #561	; 0x231
 8007484:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8007486:	2304      	movs	r3, #4
 8007488:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 800748a:	2308      	movs	r3, #8
 800748c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800748e:	2301      	movs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007496:	bf00      	nop
 8007498:	2001      	movs	r0, #1
 800749a:	2120      	movs	r1, #32
 800749c:	f7ff fa6c 	bl	8006978 <FMC_GetFlagStatus>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f8      	bne.n	8007498 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f975 	bl	8006798 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 80074ae:	f240 506a 	movw	r0, #1386	; 0x56a
 80074b2:	f7ff f9af 	bl	8006814 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80074b6:	bf00      	nop
 80074b8:	2001      	movs	r0, #1
 80074ba:	2120      	movs	r1, #32
 80074bc:	f7ff fa5c 	bl	8006978 <FMC_GetFlagStatus>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f8      	bne.n	80074b8 <SDRAM_InitSequence+0xd8>
  {
  }
}
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 80074dc:	2001      	movs	r0, #1
 80074de:	2100      	movs	r1, #0
 80074e0:	f7ff f9bc 	bl	800685c <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80074e4:	bf00      	nop
 80074e6:	2001      	movs	r0, #1
 80074e8:	2120      	movs	r1, #32
 80074ea:	f7ff fa45 	bl	8006978 <FMC_GetFlagStatus>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f8      	bne.n	80074e6 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 80074f4:	e00e      	b.n	8007514 <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80074fc:	461a      	mov	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1d19      	adds	r1, r3, #4
 8007502:	60f9      	str	r1, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3304      	adds	r3, #4
 800750c:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1ed      	bne.n	80074f6 <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8007530:	bf00      	nop
 8007532:	2001      	movs	r0, #1
 8007534:	2120      	movs	r1, #32
 8007536:	f7ff fa1f 	bl	8006978 <FMC_GetFlagStatus>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f8      	bne.n	8007532 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8007540:	e00d      	b.n	800755e <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	60fa      	str	r2, [r7, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3304      	adds	r3, #4
 8007556:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3b01      	subs	r3, #1
 800755c:	607b      	str	r3, [r7, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1ee      	bne.n	8007542 <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop

0800756c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a08      	ldr	r2, [pc, #32]	; (800759c <delay+0x30>)
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	e002      	b.n	800758a <delay+0x1e>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f9      	bne.n	8007584 <delay+0x18>
  {
  }
}
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	000186a0 	andeq	r8, r1, r0, lsr #13

080075a0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	2300      	movs	r3, #0
 80075ae:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 80075b0:	f000 f984 	bl	80078bc <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	4313      	orrs	r3, r2
 80075be:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	791a      	ldrb	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	795b      	ldrb	r3, [r3, #5]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 80075f4:	f107 030f 	add.w	r3, r7, #15
 80075f8:	4618      	mov	r0, r3
 80075fa:	2120      	movs	r1, #32
 80075fc:	2201      	movs	r2, #1
 80075fe:	f000 f8f7 	bl	80077f0 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 8007602:	f107 030e 	add.w	r3, r7, #14
 8007606:	4618      	mov	r0, r3
 8007608:	2123      	movs	r1, #35	; 0x23
 800760a:	2201      	movs	r2, #1
 800760c:	f000 f8f0 	bl	80077f0 <L3GD20_Write>
}
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop

08007618 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800761e:	1dfb      	adds	r3, r7, #7
 8007620:	4618      	mov	r0, r3
 8007622:	2124      	movs	r1, #36	; 0x24
 8007624:	2201      	movs	r2, #1
 8007626:	f000 f913 	bl	8007850 <L3GD20_Read>
  
  /* Enable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8007634:	1dfb      	adds	r3, r7, #7
 8007636:	4618      	mov	r0, r3
 8007638:	2124      	movs	r1, #36	; 0x24
 800763a:	2201      	movs	r2, #1
 800763c:	f000 f8d8 	bl	80077f0 <L3GD20_Write>
}
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop

08007648 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	2300      	movs	r3, #0
 8007656:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8007658:	f107 030f 	add.w	r3, r7, #15
 800765c:	4618      	mov	r0, r3
 800765e:	2130      	movs	r1, #48	; 0x30
 8007660:	2201      	movs	r2, #1
 8007662:	f000 f8f5 	bl	8007850 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8007666:	f107 030e 	add.w	r3, r7, #14
 800766a:	4618      	mov	r0, r3
 800766c:	2122      	movs	r1, #34	; 0x22
 800766e:	2201      	movs	r2, #1
 8007670:	f000 f8ee 	bl	8007850 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800767a:	b2db      	uxtb	r3, r3
 800767c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	f023 0320 	bic.w	r3, r3, #32
 8007684:	b2db      	uxtb	r3, r3
 8007686:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 8007690:	4313      	orrs	r3, r2
 8007692:	b2da      	uxtb	r2, r3
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4313      	orrs	r3, r2
 8007698:	b2db      	uxtb	r3, r3
 800769a:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	789a      	ldrb	r2, [r3, #2]
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80076a8:	f107 030f 	add.w	r3, r7, #15
 80076ac:	4618      	mov	r0, r3
 80076ae:	2130      	movs	r1, #48	; 0x30
 80076b0:	2201      	movs	r2, #1
 80076b2:	f000 f89d 	bl	80077f0 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80076b6:	f107 030e 	add.w	r3, r7, #14
 80076ba:	4618      	mov	r0, r3
 80076bc:	2122      	movs	r1, #34	; 0x22
 80076be:	2201      	movs	r2, #1
 80076c0:	f000 f896 	bl	80077f0 <L3GD20_Write>
}
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80076d6:	f107 030f 	add.w	r3, r7, #15
 80076da:	4618      	mov	r0, r3
 80076dc:	2122      	movs	r1, #34	; 0x22
 80076de:	2201      	movs	r2, #1
 80076e0:	f000 f8b6 	bl	8007850 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 80076ee:	7bfa      	ldrb	r2, [r7, #15]
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80076f8:	f107 030f 	add.w	r3, r7, #15
 80076fc:	4618      	mov	r0, r3
 80076fe:	2122      	movs	r1, #34	; 0x22
 8007700:	2201      	movs	r2, #1
 8007702:	f000 f875 	bl	80077f0 <L3GD20_Write>
}
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8007716:	f107 030f 	add.w	r3, r7, #15
 800771a:	4618      	mov	r0, r3
 800771c:	2122      	movs	r1, #34	; 0x22
 800771e:	2201      	movs	r2, #1
 8007720:	f000 f896 	bl	8007850 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	f023 0308 	bic.w	r3, r3, #8
 800772a:	b2db      	uxtb	r3, r3
 800772c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800772e:	7bfa      	ldrb	r2, [r7, #15]
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	4313      	orrs	r3, r2
 8007734:	b2db      	uxtb	r3, r3
 8007736:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8007738:	f107 030f 	add.w	r3, r7, #15
 800773c:	4618      	mov	r0, r3
 800773e:	2122      	movs	r1, #34	; 0x22
 8007740:	2201      	movs	r2, #1
 8007742:	f000 f855 	bl	80077f0 <L3GD20_Write>
}
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8007754:	f107 030f 	add.w	r3, r7, #15
 8007758:	4618      	mov	r0, r3
 800775a:	2121      	movs	r1, #33	; 0x21
 800775c:	2201      	movs	r2, #1
 800775e:	f000 f877 	bl	8007850 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 8007774:	4313      	orrs	r3, r2
 8007776:	b2da      	uxtb	r2, r3
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	4313      	orrs	r3, r2
 800777c:	b2db      	uxtb	r3, r3
 800777e:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8007780:	f107 030f 	add.w	r3, r7, #15
 8007784:	4618      	mov	r0, r3
 8007786:	2121      	movs	r1, #33	; 0x21
 8007788:	2201      	movs	r2, #1
 800778a:	f000 f831 	bl	80077f0 <L3GD20_Write>
}
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800779e:	f107 030f 	add.w	r3, r7, #15
 80077a2:	4618      	mov	r0, r3
 80077a4:	2124      	movs	r1, #36	; 0x24
 80077a6:	2201      	movs	r2, #1
 80077a8:	f000 f852 	bl	8007850 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80077c0:	f107 030f 	add.w	r3, r7, #15
 80077c4:	4618      	mov	r0, r3
 80077c6:	2124      	movs	r1, #36	; 0x24
 80077c8:	2201      	movs	r2, #1
 80077ca:	f000 f811 	bl	80077f0 <L3GD20_Write>
}
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval L3GD20 status
  */
uint8_t L3GD20_GetDataStatus(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 80077da:	1dfb      	adds	r3, r7, #7
 80077dc:	4618      	mov	r0, r3
 80077de:	2127      	movs	r1, #39	; 0x27
 80077e0:	2201      	movs	r2, #1
 80077e2:	f000 f835 	bl	8007850 <L3GD20_Read>
                  
  return tmpreg;
 80077e6:	79fb      	ldrb	r3, [r7, #7]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	460a      	mov	r2, r1
 80077fc:	70fa      	strb	r2, [r7, #3]
 80077fe:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8007800:	883b      	ldrh	r3, [r7, #0]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d903      	bls.n	800780e <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <L3GD20_Write+0x5c>)
 8007810:	2102      	movs	r1, #2
 8007812:	f7fa f8d3 	bl	80019bc <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f8eb 	bl	80079f4 <L3GD20_SendByte>

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800781e:	e00a      	b.n	8007836 <L3GD20_Write+0x46>
  {
    L3GD20_SendByte(*pBuffer);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f8e5 	bl	80079f4 <L3GD20_SendByte>
    NumByteToWrite--;
 800782a:	883b      	ldrh	r3, [r7, #0]
 800782c:	3b01      	subs	r3, #1
 800782e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3301      	adds	r3, #1
 8007834:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8007836:	883b      	ldrh	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f1      	bne.n	8007820 <L3GD20_Write+0x30>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 800783c:	4803      	ldr	r0, [pc, #12]	; (800784c <L3GD20_Write+0x5c>)
 800783e:	2102      	movs	r1, #2
 8007840:	f7fa f8ae 	bl	80019a0 <GPIO_SetBits>
}
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40020800 	andmi	r0, r2, r0, lsl #16

08007850 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	460a      	mov	r2, r1
 800785c:	70fa      	strb	r2, [r7, #3]
 800785e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8007860:	883b      	ldrh	r3, [r7, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d904      	bls.n	8007870 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800786c:	70fb      	strb	r3, [r7, #3]
 800786e:	e003      	b.n	8007878 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007876:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 8007878:	480f      	ldr	r0, [pc, #60]	; (80078b8 <L3GD20_Read+0x68>)
 800787a:	2102      	movs	r1, #2
 800787c:	f7fa f89e 	bl	80019bc <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 f8b6 	bl	80079f4 <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8007888:	e00c      	b.n	80078a4 <L3GD20_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 800788a:	2000      	movs	r0, #0
 800788c:	f000 f8b2 	bl	80079f4 <L3GD20_SendByte>
 8007890:	4603      	mov	r3, r0
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8007898:	883b      	ldrh	r3, [r7, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3301      	adds	r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80078a4:	883b      	ldrh	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1ef      	bne.n	800788a <L3GD20_Read+0x3a>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80078aa:	4803      	ldr	r0, [pc, #12]	; (80078b8 <L3GD20_Read+0x68>)
 80078ac:	2102      	movs	r1, #2
 80078ae:	f7fa f877 	bl	80019a0 <GPIO_SetBits>
}  
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40020800 	andmi	r0, r2, r0, lsl #16

080078bc <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 80078c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80078c6:	2101      	movs	r1, #1
 80078c8:	f7fa fd42 	bl	8002350 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 80078cc:	2020      	movs	r0, #32
 80078ce:	2101      	movs	r1, #1
 80078d0:	f7fa fcc6 	bl	8002260 <RCC_AHB1PeriphClockCmd>

  /* Enable CS GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 80078d4:	2004      	movs	r0, #4
 80078d6:	2101      	movs	r1, #1
 80078d8:	f7fa fcc2 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 80078dc:	2001      	movs	r0, #1
 80078de:	2101      	movs	r1, #1
 80078e0:	f7fa fcbe 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 80078e4:	2001      	movs	r0, #1
 80078e6:	2101      	movs	r1, #1
 80078e8:	f7fa fcba 	bl	8002260 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 80078ec:	483d      	ldr	r0, [pc, #244]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 80078ee:	2107      	movs	r1, #7
 80078f0:	2205      	movs	r2, #5
 80078f2:	f7fa f8a9 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 80078f6:	483b      	ldr	r0, [pc, #236]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 80078f8:	2108      	movs	r1, #8
 80078fa:	2205      	movs	r2, #5
 80078fc:	f7fa f8a4 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 8007900:	4838      	ldr	r0, [pc, #224]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 8007902:	2109      	movs	r1, #9
 8007904:	2205      	movs	r2, #5
 8007906:	f7fa f89f 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800790a:	2302      	movs	r3, #2
 800790c:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800790e:	2300      	movs	r3, #0
 8007910:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8007912:	2302      	movs	r3, #2
 8007914:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8007916:	2301      	movs	r3, #1
 8007918:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800791e:	f107 0318 	add.w	r3, r7, #24
 8007922:	4830      	ldr	r0, [pc, #192]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 8007924:	4619      	mov	r1, r3
 8007926:	f7f9 ff21 	bl	800176c <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	482b      	ldr	r0, [pc, #172]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 8007936:	4619      	mov	r1, r3
 8007938:	f7f9 ff18 	bl	800176c <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 800793c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007940:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8007942:	f107 0318 	add.w	r3, r7, #24
 8007946:	4827      	ldr	r0, [pc, #156]	; (80079e4 <L3GD20_LowLevel_Init+0x128>)
 8007948:	4619      	mov	r1, r3
 800794a:	f7f9 ff0f 	bl	800176c <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <L3GD20_LowLevel_Init+0x12c>)
 8007950:	f7fc fcba 	bl	80042c8 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8007954:	2300      	movs	r3, #0
 8007956:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8007958:	f44f 7382 	mov.w	r3, #260	; 0x104
 800795c:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800795e:	2300      	movs	r3, #0
 8007960:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8007962:	2300      	movs	r3, #0
 8007964:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8007966:	2300      	movs	r3, #0
 8007968:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800796a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800796e:	81fb      	strh	r3, [r7, #14]
     to verify these constraints:
        - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
        - l3gd20 SPI interface max baudrate is 10MHz for write/read
        - PCLK2 frequency is set to 90 MHz 
    */
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8007970:	2318      	movs	r3, #24
 8007972:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8007974:	2300      	movs	r3, #0
 8007976:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8007978:	2307      	movs	r3, #7
 800797a:	82bb      	strh	r3, [r7, #20]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 800797c:	1d3b      	adds	r3, r7, #4
 800797e:	481a      	ldr	r0, [pc, #104]	; (80079e8 <L3GD20_LowLevel_Init+0x12c>)
 8007980:	4619      	mov	r1, r3
 8007982:	f7fc fd0d 	bl	80043a0 <SPI_Init>

  /* Enable L3GD20_SPI  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 8007986:	4818      	ldr	r0, [pc, #96]	; (80079e8 <L3GD20_LowLevel_Init+0x12c>)
 8007988:	2101      	movs	r1, #1
 800798a:	f7fc fe65 	bl	8004658 <SPI_Cmd>
  
  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 800798e:	2302      	movs	r3, #2
 8007990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8007992:	2301      	movs	r3, #1
 8007994:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007996:	2300      	movs	r3, #0
 8007998:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800799a:	2301      	movs	r3, #1
 800799c:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 80079a2:	f107 0318 	add.w	r3, r7, #24
 80079a6:	4811      	ldr	r0, [pc, #68]	; (80079ec <L3GD20_LowLevel_Init+0x130>)
 80079a8:	4619      	mov	r1, r3
 80079aa:	f7f9 fedf 	bl	800176c <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 80079ae:	480f      	ldr	r0, [pc, #60]	; (80079ec <L3GD20_LowLevel_Init+0x130>)
 80079b0:	2102      	movs	r1, #2
 80079b2:	f7f9 fff5 	bl	80019a0 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 80079b6:	2302      	movs	r3, #2
 80079b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80079ba:	2300      	movs	r3, #0
 80079bc:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 80079c2:	f107 0318 	add.w	r3, r7, #24
 80079c6:	480a      	ldr	r0, [pc, #40]	; (80079f0 <L3GD20_LowLevel_Init+0x134>)
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7f9 fecf 	bl	800176c <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 80079ce:	2304      	movs	r3, #4
 80079d0:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 80079d2:	f107 0318 	add.w	r3, r7, #24
 80079d6:	4806      	ldr	r0, [pc, #24]	; (80079f0 <L3GD20_LowLevel_Init+0x134>)
 80079d8:	4619      	mov	r1, r3
 80079da:	f7f9 fec7 	bl	800176c <GPIO_Init>
}  
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40021400 	andmi	r1, r2, r0, lsl #8
 80079e8:	40015000 	andmi	r5, r1, r0
 80079ec:	40020800 	andmi	r0, r2, r0, lsl #16
 80079f0:	40020000 	andmi	r0, r2, r0

080079f4 <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80079fe:	4b1f      	ldr	r3, [pc, #124]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a04:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8007a06:	e00b      	b.n	8007a20 <L3GD20_SendByte+0x2c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8007a08:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	1e59      	subs	r1, r3, #1
 8007a0e:	4a1b      	ldr	r2, [pc, #108]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a10:	6011      	str	r1, [r2, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <L3GD20_SendByte+0x2c>
 8007a16:	f000 f835 	bl	8007a84 <L3GD20_TIMEOUT_UserCallback>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e029      	b.n	8007a74 <L3GD20_SendByte+0x80>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8007a20:	4817      	ldr	r0, [pc, #92]	; (8007a80 <L3GD20_SendByte+0x8c>)
 8007a22:	2102      	movs	r1, #2
 8007a24:	f7fd f80e 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0ec      	beq.n	8007a08 <L3GD20_SendByte+0x14>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4813      	ldr	r0, [pc, #76]	; (8007a80 <L3GD20_SendByte+0x8c>)
 8007a34:	4619      	mov	r1, r3
 8007a36:	f7fc ff49 	bl	80048cc <SPI_I2S_SendData>
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8007a3a:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a40:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8007a42:	e00b      	b.n	8007a5c <L3GD20_SendByte+0x68>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8007a44:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	1e59      	subs	r1, r3, #1
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <L3GD20_SendByte+0x88>)
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <L3GD20_SendByte+0x68>
 8007a52:	f000 f817 	bl	8007a84 <L3GD20_TIMEOUT_UserCallback>
 8007a56:	4603      	mov	r3, r0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	e00b      	b.n	8007a74 <L3GD20_SendByte+0x80>
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8007a5c:	4808      	ldr	r0, [pc, #32]	; (8007a80 <L3GD20_SendByte+0x8c>)
 8007a5e:	2101      	movs	r1, #1
 8007a60:	f7fc fff0 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ec      	beq.n	8007a44 <L3GD20_SendByte+0x50>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 8007a6a:	4805      	ldr	r0, [pc, #20]	; (8007a80 <L3GD20_SendByte+0x8c>)
 8007a6c:	f7fc ff20 	bl	80048b0 <SPI_I2S_ReceiveData>
 8007a70:	4603      	mov	r3, r0
 8007a72:	b2db      	uxtb	r3, r3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20000030 	andcs	r0, r0, r0, lsr r0
 8007a80:	40015000 	andmi	r5, r1, r0

08007a84 <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {   
  }
 8007a88:	e7fe      	b.n	8007a88 <L3GD20_TIMEOUT_UserCallback+0x4>
 8007a8a:	bf00      	nop

08007a8c <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 8007a92:	f001 ff9f 	bl	80099d4 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 8007a96:	487f      	ldr	r0, [pc, #508]	; (8007c94 <LCD_DeInit+0x208>)
 8007a98:	2100      	movs	r1, #0
 8007a9a:	f7fc fddd 	bl	8004658 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 8007a9e:	487d      	ldr	r0, [pc, #500]	; (8007c94 <LCD_DeInit+0x208>)
 8007aa0:	f7fc fc12 	bl	80042c8 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 8007aa4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	f7fa fc51 	bl	8002350 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8007aae:	2304      	movs	r3, #4
 8007ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007aba:	463b      	mov	r3, r7
 8007abc:	4876      	ldr	r0, [pc, #472]	; (8007c98 <LCD_DeInit+0x20c>)
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f7f9 fe54 	bl	800176c <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8007ac8:	463b      	mov	r3, r7
 8007aca:	4874      	ldr	r0, [pc, #464]	; (8007c9c <LCD_DeInit+0x210>)
 8007acc:	4619      	mov	r1, r3
 8007ace:	f7f9 fe4d 	bl	800176c <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8007ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ad6:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8007ad8:	463b      	mov	r3, r7
 8007ada:	4870      	ldr	r0, [pc, #448]	; (8007c9c <LCD_DeInit+0x210>)
 8007adc:	4619      	mov	r1, r3
 8007ade:	f7f9 fe45 	bl	800176c <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8007ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae6:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8007ae8:	463b      	mov	r3, r7
 8007aea:	486c      	ldr	r0, [pc, #432]	; (8007c9c <LCD_DeInit+0x210>)
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7f9 fe3d 	bl	800176c <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 8007af2:	486b      	ldr	r0, [pc, #428]	; (8007ca0 <LCD_DeInit+0x214>)
 8007af4:	2103      	movs	r1, #3
 8007af6:	2200      	movs	r2, #0
 8007af8:	f7f9 ffa6 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 8007afc:	4868      	ldr	r0, [pc, #416]	; (8007ca0 <LCD_DeInit+0x214>)
 8007afe:	2104      	movs	r1, #4
 8007b00:	2200      	movs	r2, #0
 8007b02:	f7f9 ffa1 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 8007b06:	4866      	ldr	r0, [pc, #408]	; (8007ca0 <LCD_DeInit+0x214>)
 8007b08:	2106      	movs	r1, #6
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f9 ff9c 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 8007b10:	4863      	ldr	r0, [pc, #396]	; (8007ca0 <LCD_DeInit+0x214>)
 8007b12:	210b      	movs	r1, #11
 8007b14:	2200      	movs	r2, #0
 8007b16:	f7f9 ff97 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 8007b1a:	4861      	ldr	r0, [pc, #388]	; (8007ca0 <LCD_DeInit+0x214>)
 8007b1c:	210c      	movs	r1, #12
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f7f9 ff92 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 8007b24:	f641 0358 	movw	r3, #6232	; 0x1858
 8007b28:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007b32:	2300      	movs	r3, #0
 8007b34:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4858      	ldr	r0, [pc, #352]	; (8007ca0 <LCD_DeInit+0x214>)
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7f9 fe14 	bl	800176c <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 8007b44:	4857      	ldr	r0, [pc, #348]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b46:	2100      	movs	r1, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f9 ff7d 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 8007b4e:	4855      	ldr	r0, [pc, #340]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b50:	2101      	movs	r1, #1
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f9 ff78 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8007b58:	4852      	ldr	r0, [pc, #328]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b5a:	2108      	movs	r1, #8
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f7f9 ff73 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 8007b62:	4850      	ldr	r0, [pc, #320]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b64:	2109      	movs	r1, #9
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7f9 ff6e 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8007b6c:	484d      	ldr	r0, [pc, #308]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b6e:	210a      	movs	r1, #10
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f9 ff69 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8007b76:	484b      	ldr	r0, [pc, #300]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b78:	210b      	movs	r1, #11
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7f9 ff64 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 8007b80:	f640 7303 	movw	r3, #3843	; 0xf03
 8007b84:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007b86:	2302      	movs	r3, #2
 8007b88:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007b96:	463b      	mov	r3, r7
 8007b98:	4842      	ldr	r0, [pc, #264]	; (8007ca4 <LCD_DeInit+0x218>)
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f7f9 fde6 	bl	800176c <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 8007ba0:	483d      	ldr	r0, [pc, #244]	; (8007c98 <LCD_DeInit+0x20c>)
 8007ba2:	2106      	movs	r1, #6
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f7f9 ff4f 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8007baa:	483b      	ldr	r0, [pc, #236]	; (8007c98 <LCD_DeInit+0x20c>)
 8007bac:	2107      	movs	r1, #7
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f7f9 ff4a 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8007bb4:	4838      	ldr	r0, [pc, #224]	; (8007c98 <LCD_DeInit+0x20c>)
 8007bb6:	210a      	movs	r1, #10
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f9 ff45 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 8007bbe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007bc2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	4830      	ldr	r0, [pc, #192]	; (8007c98 <LCD_DeInit+0x20c>)
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f9 fdc7 	bl	800176c <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 8007bde:	4832      	ldr	r0, [pc, #200]	; (8007ca8 <LCD_DeInit+0x21c>)
 8007be0:	2103      	movs	r1, #3
 8007be2:	2200      	movs	r2, #0
 8007be4:	f7f9 ff30 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8007be8:	482f      	ldr	r0, [pc, #188]	; (8007ca8 <LCD_DeInit+0x21c>)
 8007bea:	2106      	movs	r1, #6
 8007bec:	2200      	movs	r2, #0
 8007bee:	f7f9 ff2b 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 8007bf2:	2348      	movs	r3, #72	; 0x48
 8007bf4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 8007c06:	463b      	mov	r3, r7
 8007c08:	4827      	ldr	r0, [pc, #156]	; (8007ca8 <LCD_DeInit+0x21c>)
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f7f9 fdae 	bl	800176c <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 8007c10:	4822      	ldr	r0, [pc, #136]	; (8007c9c <LCD_DeInit+0x210>)
 8007c12:	210a      	movs	r1, #10
 8007c14:	2200      	movs	r2, #0
 8007c16:	f7f9 ff17 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8007c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007c20:	2302      	movs	r3, #2
 8007c22:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c24:	2302      	movs	r3, #2
 8007c26:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 8007c30:	463b      	mov	r3, r7
 8007c32:	481a      	ldr	r0, [pc, #104]	; (8007c9c <LCD_DeInit+0x210>)
 8007c34:	4619      	mov	r1, r3
 8007c36:	f7f9 fd99 	bl	800176c <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8007c3a:	481c      	ldr	r0, [pc, #112]	; (8007cac <LCD_DeInit+0x220>)
 8007c3c:	2106      	movs	r1, #6
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f7f9 ff02 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8007c44:	4819      	ldr	r0, [pc, #100]	; (8007cac <LCD_DeInit+0x220>)
 8007c46:	2107      	movs	r1, #7
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f7f9 fefd 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 8007c4e:	4817      	ldr	r0, [pc, #92]	; (8007cac <LCD_DeInit+0x220>)
 8007c50:	210a      	movs	r1, #10
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f9 fef8 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8007c58:	4814      	ldr	r0, [pc, #80]	; (8007cac <LCD_DeInit+0x220>)
 8007c5a:	210b      	movs	r1, #11
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7f9 fef3 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8007c62:	4812      	ldr	r0, [pc, #72]	; (8007cac <LCD_DeInit+0x220>)
 8007c64:	210c      	movs	r1, #12
 8007c66:	2200      	movs	r2, #0
 8007c68:	f7f9 feee 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8007c6c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8007c70:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007c72:	2302      	movs	r3, #2
 8007c74:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007c76:	2302      	movs	r3, #2
 8007c78:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8007c82:	463b      	mov	r3, r7
 8007c84:	4809      	ldr	r0, [pc, #36]	; (8007cac <LCD_DeInit+0x220>)
 8007c86:	4619      	mov	r1, r3
 8007c88:	f7f9 fd70 	bl	800176c <GPIO_Init>
}
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40015000 	andmi	r5, r1, r0
 8007c98:	40020800 	andmi	r0, r2, r0, lsl #16
 8007c9c:	40021400 	andmi	r1, r2, r0, lsl #8
 8007ca0:	40020000 	andmi	r0, r2, r0
 8007ca4:	40020400 	andmi	r0, r2, r0, lsl #8
 8007ca8:	40020c00 	andmi	r0, r2, r0, lsl #24
 8007cac:	40021800 	andmi	r1, r2, r0, lsl #16

08007cb0 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b090      	sub	sp, #64	; 0x40
 8007cb4:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8007cb6:	f001 fe93 	bl	80099e0 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f000 f8ac 	bl	8007e18 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f000 f8a9 	bl	8007e18 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8007cc6:	f001 fec7 	bl	8009a58 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8007cca:	f001 fd35 	bl	8009738 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8007cce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	f7fa fb3c 	bl	8002350 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8007cd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007cdc:	2101      	movs	r1, #1
 8007cde:	f7fa fabf 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8007ce2:	f001 ff23 	bl	8009b2c <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8007ce6:	f7ff fa37 	bl	8007158 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8007d02:	2300      	movs	r3, #0
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8007d06:	20c0      	movs	r0, #192	; 0xc0
 8007d08:	2107      	movs	r1, #7
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	f7fa f808 	bl	8001d20 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8007d10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007d14:	f7fa fa78 	bl	8002208 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f7fa f819 	bl	8001d50 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8007d1e:	bf00      	nop
 8007d20:	203d      	movs	r0, #61	; 0x3d
 8007d22:	f7fa fc83 	bl	800262c <RCC_GetFlagStatus>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f9      	beq.n	8007d20 <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8007d2c:	2309      	movs	r3, #9
 8007d2e:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8007d30:	2301      	movs	r3, #1
 8007d32:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8007d34:	231d      	movs	r3, #29
 8007d36:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8007d38:	2303      	movs	r3, #3
 8007d3a:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8007d3c:	f240 130d 	movw	r3, #269	; 0x10d
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8007d42:	f240 1343 	movw	r3, #323	; 0x143
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8007d48:	f240 1317 	movw	r3, #279	; 0x117
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8007d4e:	f240 1347 	movw	r3, #327	; 0x147
 8007d52:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8007d54:	1d3b      	adds	r3, r7, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd fb44 	bl	80053e4 <LTDC_Init>
}  
 8007d5c:	3740      	adds	r7, #64	; 0x40
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b090      	sub	sp, #64	; 0x40
 8007d68:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8007d6a:	231e      	movs	r3, #30
 8007d6c:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8007d6e:	f240 130d 	movw	r3, #269	; 0x10d
 8007d72:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8007d74:	2304      	movs	r3, #4
 8007d76:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8007d78:	f240 1343 	movw	r3, #323	; 0x143
 8007d7c:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8007d82:	23ff      	movs	r3, #255	; 0xff
 8007d84:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8007d8e:	2300      	movs	r3, #0
 8007d90:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8007d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8007d9c:	2305      	movs	r3, #5
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8007da0:	f240 13e3 	movw	r3, #483	; 0x1e3
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8007da6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8007dac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8007db2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8007db8:	463b      	mov	r3, r7
 8007dba:	4813      	ldr	r0, [pc, #76]	; (8007e08 <LCD_LayerInit+0xa4>)
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f7fd fc6f 	bl	80056a0 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <LCD_LayerInit+0xa8>)
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8007dc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8007dcc:	2307      	movs	r3, #7
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	480f      	ldr	r0, [pc, #60]	; (8007e10 <LCD_LayerInit+0xac>)
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f7fd fc63 	bl	80056a0 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8007dda:	2001      	movs	r0, #1
 8007ddc:	f7fd fc52 	bl	8005684 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8007de0:	4809      	ldr	r0, [pc, #36]	; (8007e08 <LCD_LayerInit+0xa4>)
 8007de2:	2101      	movs	r1, #1
 8007de4:	f7fd fd30 	bl	8005848 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8007de8:	4809      	ldr	r0, [pc, #36]	; (8007e10 <LCD_LayerInit+0xac>)
 8007dea:	2101      	movs	r1, #1
 8007dec:	f7fd fd2c 	bl	8005848 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8007df0:	2001      	movs	r0, #1
 8007df2:	f7fd fc47 	bl	8005684 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8007df6:	4807      	ldr	r0, [pc, #28]	; (8007e14 <LCD_LayerInit+0xb0>)
 8007df8:	f000 f890 	bl	8007f1c <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f7fd fbd9 	bl	80055b4 <LTDC_DitherCmd>
}
 8007e02:	3740      	adds	r7, #64	; 0x40
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40016884 	andmi	r6, r1, r4, lsl #17
 8007e0c:	d0050000 	andle	r0, r5, r0
 8007e10:	40016904 	andmi	r6, r1, r4, lsl #18
 8007e14:	20000034 	andcs	r0, r0, r4, lsr r0

08007e18 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <LCD_ChipSelect+0x28>)
 8007e2a:	2104      	movs	r1, #4
 8007e2c:	f7f9 fdc6 	bl	80019bc <GPIO_ResetBits>
 8007e30:	e003      	b.n	8007e3a <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8007e32:	4803      	ldr	r0, [pc, #12]	; (8007e40 <LCD_ChipSelect+0x28>)
 8007e34:	2104      	movs	r1, #4
 8007e36:	f7f9 fdb3 	bl	80019a0 <GPIO_SetBits>
  }
}
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40020800 	andmi	r0, r2, r0, lsl #16

08007e44 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d107      	bne.n	8007e62 <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <LCD_SetLayer+0x34>)
 8007e54:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8007e58:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8007e5a:	4b08      	ldr	r3, [pc, #32]	; (8007e7c <LCD_SetLayer+0x38>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	e005      	b.n	8007e6e <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <LCD_SetLayer+0x34>)
 8007e64:	4a06      	ldr	r2, [pc, #24]	; (8007e80 <LCD_SetLayer+0x3c>)
 8007e66:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <LCD_SetLayer+0x38>)
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
  }
}  
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000058 	andcs	r0, r0, r8, asr r0
 8007e7c:	200004dc 	ldrdcs	r0, [r0], -ip
 8007e80:	d0050000 	andle	r0, r5, r0

08007e84 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	80fa      	strh	r2, [r7, #6]
 8007e90:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <LCD_SetColors+0x24>)
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8007e98:	4b04      	ldr	r3, [pc, #16]	; (8007eac <LCD_SetColors+0x28>)
 8007e9a:	88ba      	ldrh	r2, [r7, #4]
 8007e9c:	801a      	strh	r2, [r3, #0]
}
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	200004d8 	ldrdcs	r0, [r0], -r8
 8007eac:	20000054 	andcs	r0, r0, r4, asr r0

08007eb0 <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <LCD_GetColors+0x24>)
 8007ebc:	881a      	ldrh	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <LCD_GetColors+0x28>)
 8007ec4:	881a      	ldrh	r2, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	801a      	strh	r2, [r3, #0]
}
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	200004d8 	ldrdcs	r0, [r0], -r8
 8007ed8:	20000054 	andcs	r0, r0, r4, asr r0

08007edc <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8007ee6:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <LCD_SetTextColor+0x1c>)
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	801a      	strh	r2, [r3, #0]
}
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	200004d8 	ldrdcs	r0, [r0], -r8

08007efc <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <LCD_SetBackColor+0x1c>)
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	801a      	strh	r2, [r3, #0]
}
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000054 	andcs	r0, r0, r4, asr r0

08007f1c <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8007f24:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <LCD_SetFont+0x18>)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
}
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	200004d4 	ldrdcs	r0, [r0], -r4

08007f38 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <LCD_SetTransparency+0x34>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	4808      	ldr	r0, [pc, #32]	; (8007f70 <LCD_SetTransparency+0x38>)
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f7fd fdf8 	bl	8005b44 <LTDC_LayerAlpha>
 8007f54:	e004      	b.n	8007f60 <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	4806      	ldr	r0, [pc, #24]	; (8007f74 <LCD_SetTransparency+0x3c>)
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f7fd fdf2 	bl	8005b44 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7fd fb8f 	bl	8005684 <LTDC_ReloadConfig>
}
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200004dc 	ldrdcs	r0, [r0], -ip
 8007f70:	40016884 	andmi	r6, r1, r4, lsl #17
 8007f74:	40016904 	andmi	r6, r1, r4, lsl #18

08007f78 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <LCD_GetFont+0x14>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200004d4 	ldrdcs	r0, [r0], -r4

08007f90 <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8007f9e:	e00c      	b.n	8007fba <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8007fa0:	88fa      	ldrh	r2, [r7, #6]
 8007fa2:	89fb      	ldrh	r3, [r7, #14]
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f000 f93d 	bl	8008228 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <LCD_ClearLine+0x4c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	889a      	ldrh	r2, [r3, #4]
 8007fb4:	89fb      	ldrh	r3, [r7, #14]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	2bef      	cmp	r3, #239	; 0xef
 8007fbe:	d80a      	bhi.n	8007fd6 <LCD_ClearLine+0x46>
 8007fc0:	89fa      	ldrh	r2, [r7, #14]
 8007fc2:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <LCD_ClearLine+0x4c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	889b      	ldrh	r3, [r3, #4]
 8007fc8:	4413      	add	r3, r2
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <LCD_ClearLine+0x4c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	dae4      	bge.n	8007fa0 <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200004d4 	ldrdcs	r0, [r0], -r4

08007fe0 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	e009      	b.n	8008008 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	005a      	lsls	r2, r3, #1
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <LCD_Clear+0x3c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800800e:	d3f1      	bcc.n	8007ff4 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000058 	andcs	r0, r0, r8, asr r0

08008020 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	80fa      	strh	r2, [r7, #6]
 800802c:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 800802e:	88f9      	ldrh	r1, [r7, #6]
 8008030:	88ba      	ldrh	r2, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	440b      	add	r3, r1
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	461a      	mov	r2, r3
 8008040:	4b04      	ldr	r3, [pc, #16]	; (8008054 <LCD_SetCursor+0x34>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4413      	add	r3, r2
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000058 	andcs	r0, r0, r8, asr r0

08008058 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 800807a:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <LCD_SetColorKeying+0x5c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8008082:	f107 030c 	add.w	r3, r7, #12
 8008086:	480c      	ldr	r0, [pc, #48]	; (80080b8 <LCD_SetColorKeying+0x60>)
 8008088:	4619      	mov	r1, r3
 800808a:	2201      	movs	r2, #1
 800808c:	f7fd fc40 	bl	8005910 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8008090:	2001      	movs	r0, #1
 8008092:	f7fd faf7 	bl	8005684 <LTDC_ReloadConfig>
 8008096:	e009      	b.n	80080ac <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8008098:	f107 030c 	add.w	r3, r7, #12
 800809c:	4807      	ldr	r0, [pc, #28]	; (80080bc <LCD_SetColorKeying+0x64>)
 800809e:	4619      	mov	r1, r3
 80080a0:	2201      	movs	r2, #1
 80080a2:	f7fd fc35 	bl	8005910 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 80080a6:	2001      	movs	r0, #1
 80080a8:	f7fd faec 	bl	8005684 <LTDC_ReloadConfig>
  }
}
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200004dc 	ldrdcs	r0, [r0], -ip
 80080b8:	40016884 	andmi	r6, r1, r4, lsl #17
 80080bc:	40016904 	andmi	r6, r1, r4, lsl #18

080080c0 <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <LCD_ReSetColorKeying+0x3c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	480b      	ldr	r0, [pc, #44]	; (8008100 <LCD_ReSetColorKeying+0x40>)
 80080d2:	4619      	mov	r1, r3
 80080d4:	2200      	movs	r2, #0
 80080d6:	f7fd fc1b 	bl	8005910 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 80080da:	2001      	movs	r0, #1
 80080dc:	f7fd fad2 	bl	8005684 <LTDC_ReloadConfig>
 80080e0:	e008      	b.n	80080f4 <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	4807      	ldr	r0, [pc, #28]	; (8008104 <LCD_ReSetColorKeying+0x44>)
 80080e6:	4619      	mov	r1, r3
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7fd fc11 	bl	8005910 <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 80080ee:	2001      	movs	r0, #1
 80080f0:	f7fd fac8 	bl	8005684 <LTDC_ReloadConfig>
  }
} 
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200004dc 	ldrdcs	r0, [r0], -ip
 8008100:	40016884 	andmi	r6, r1, r4, lsl #17
 8008104:	40016904 	andmi	r6, r1, r4, lsl #18

08008108 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	460b      	mov	r3, r1
 8008110:	603a      	str	r2, [r7, #0]
 8008112:	4602      	mov	r2, r0
 8008114:	80fa      	strh	r2, [r7, #6]
 8008116:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	015b      	lsls	r3, r3, #5
 8008132:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8008134:	88bb      	ldrh	r3, [r7, #4]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e05c      	b.n	80081fc <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8008142:	2300      	movs	r3, #0
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	e048      	b.n	80081da <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <LCD_DrawChar+0x10c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	8899      	ldrh	r1, [r3, #4]
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <LCD_DrawChar+0x110>)
 800815c:	fba3 0301 	umull	r0, r3, r3, r1
 8008160:	08db      	lsrs	r3, r3, #3
 8008162:	b29b      	uxth	r3, r3
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	4099      	lsls	r1, r3
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	fa41 f303 	asr.w	r3, r1, r3
 8008170:	4013      	ands	r3, r2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d104      	bne.n	8008180 <LCD_DrawChar+0x78>
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <LCD_DrawChar+0x10c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	889b      	ldrh	r3, [r3, #4]
 800817c:	2b0c      	cmp	r3, #12
 800817e:	d911      	bls.n	80081a4 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	fa42 f303 	asr.w	r3, r2, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10f      	bne.n	80081ba <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <LCD_DrawChar+0x10c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	889b      	ldrh	r3, [r3, #4]
 80081a0:	2b0c      	cmp	r3, #12
 80081a2:	d90a      	bls.n	80081ba <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	005a      	lsls	r2, r3, #1
 80081a8:	4b1c      	ldr	r3, [pc, #112]	; (800821c <LCD_DrawChar+0x114>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	441a      	add	r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	4a1b      	ldr	r2, [pc, #108]	; (8008220 <LCD_DrawChar+0x118>)
 80081b4:	8812      	ldrh	r2, [r2, #0]
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e009      	b.n	80081ce <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	005a      	lsls	r2, r3, #1
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <LCD_DrawChar+0x114>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	441a      	add	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <LCD_DrawChar+0x11c>)
 80081ca:	8812      	ldrh	r2, [r2, #0]
 80081cc:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <LCD_DrawChar+0x10c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	889b      	ldrh	r3, [r3, #4]
 80081e0:	461a      	mov	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d8af      	bhi.n	8008148 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 80081e8:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <LCD_DrawChar+0x10c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	33f0      	adds	r3, #240	; 0xf0
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	3301      	adds	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	4b05      	ldr	r3, [pc, #20]	; (8008214 <LCD_DrawChar+0x10c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	461a      	mov	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	429a      	cmp	r2, r3
 8008208:	d89b      	bhi.n	8008142 <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	200004d4 	ldrdcs	r0, [r0], -r4
 8008218:	aaaaaaab 	bge	6ab2ccc <_Min_Stack_Size+0x6ab28cc>
 800821c:	20000058 	andcs	r0, r0, r8, asr r0
 8008220:	20000054 	andcs	r0, r0, r4, asr r0
 8008224:	200004d8 	ldrdcs	r0, [r0], -r8

08008228 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	4613      	mov	r3, r2
 8008230:	4602      	mov	r2, r0
 8008232:	80fa      	strh	r2, [r7, #6]
 8008234:	460a      	mov	r2, r1
 8008236:	80ba      	strh	r2, [r7, #4]
 8008238:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	3b20      	subs	r3, #32
 800823e:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <LCD_DisplayChar+0x44>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	4908      	ldr	r1, [pc, #32]	; (800826c <LCD_DisplayChar+0x44>)
 800824a:	6809      	ldr	r1, [r1, #0]
 800824c:	88c9      	ldrh	r1, [r1, #6]
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	88f9      	ldrh	r1, [r7, #6]
 8008258:	88ba      	ldrh	r2, [r7, #4]
 800825a:	4608      	mov	r0, r1
 800825c:	4611      	mov	r1, r2
 800825e:	461a      	mov	r2, r3
 8008260:	f7ff ff52 	bl	8008108 <LCD_DrawChar>
}
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200004d4 	ldrdcs	r0, [r0], -r4

08008270 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8008280:	e011      	b.n	80082a6 <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	88f9      	ldrh	r1, [r7, #6]
 8008288:	89fa      	ldrh	r2, [r7, #14]
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	461a      	mov	r2, r3
 8008290:	f7ff ffca 	bl	8008228 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8008294:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <LCD_DisplayStringLine+0x74>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	889a      	ldrh	r2, [r3, #4]
 800829a:	89fb      	ldrh	r3, [r7, #14]
 800829c:	4413      	add	r3, r2
 800829e:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80082a6:	89fb      	ldrh	r3, [r7, #14]
 80082a8:	2bef      	cmp	r3, #239	; 0xef
 80082aa:	d818      	bhi.n	80082de <LCD_DisplayStringLine+0x6e>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf0c      	ite	eq
 80082b4:	2300      	moveq	r3, #0
 80082b6:	2301      	movne	r3, #1
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	89f9      	ldrh	r1, [r7, #14]
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <LCD_DisplayStringLine+0x74>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	440b      	add	r3, r1
 80082c4:	b299      	uxth	r1, r3
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <LCD_DisplayStringLine+0x74>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	889b      	ldrh	r3, [r3, #4]
 80082cc:	4299      	cmp	r1, r3
 80082ce:	bfb4      	ite	lt
 80082d0:	2300      	movlt	r3, #0
 80082d2:	2301      	movge	r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	4013      	ands	r3, r2
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1d1      	bne.n	8008282 <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	200004d4 	ldrdcs	r0, [r0], -r4

080082e8 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	80f8      	strh	r0, [r7, #6]
 80082f0:	80b9      	strh	r1, [r7, #4]
 80082f2:	807a      	strh	r2, [r7, #2]
 80082f4:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80082f6:	4b18      	ldr	r3, [pc, #96]	; (8008358 <LCD_SetDisplayWindow+0x70>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d114      	bne.n	8008328 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	88bb      	ldrh	r3, [r7, #4]
 8008302:	4816      	ldr	r0, [pc, #88]	; (800835c <LCD_SetDisplayWindow+0x74>)
 8008304:	4611      	mov	r1, r2
 8008306:	461a      	mov	r2, r3
 8008308:	f7fd fbae 	bl	8005a68 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 800830c:	2001      	movs	r0, #1
 800830e:	f7fd f9b9 	bl	8005684 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8008312:	883a      	ldrh	r2, [r7, #0]
 8008314:	887b      	ldrh	r3, [r7, #2]
 8008316:	4811      	ldr	r0, [pc, #68]	; (800835c <LCD_SetDisplayWindow+0x74>)
 8008318:	4611      	mov	r1, r2
 800831a:	461a      	mov	r2, r3
 800831c:	f7fd fc2e 	bl	8005b7c <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8008320:	2001      	movs	r0, #1
 8008322:	f7fd f9af 	bl	8005684 <LTDC_ReloadConfig>
 8008326:	e013      	b.n	8008350 <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	88bb      	ldrh	r3, [r7, #4]
 800832c:	480c      	ldr	r0, [pc, #48]	; (8008360 <LCD_SetDisplayWindow+0x78>)
 800832e:	4611      	mov	r1, r2
 8008330:	461a      	mov	r2, r3
 8008332:	f7fd fb99 	bl	8005a68 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8008336:	2001      	movs	r0, #1
 8008338:	f7fd f9a4 	bl	8005684 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 800833c:	883a      	ldrh	r2, [r7, #0]
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	4807      	ldr	r0, [pc, #28]	; (8008360 <LCD_SetDisplayWindow+0x78>)
 8008342:	4611      	mov	r1, r2
 8008344:	461a      	mov	r2, r3
 8008346:	f7fd fc19 	bl	8005b7c <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 800834a:	2001      	movs	r0, #1
 800834c:	f7fd f99a 	bl	8005684 <LTDC_ReloadConfig>
  }
}
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200004dc 	ldrdcs	r0, [r0], -ip
 800835c:	40016884 	andmi	r6, r1, r4, lsl #17
 8008360:	40016904 	andmi	r6, r1, r4, lsl #18

08008364 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8008368:	2000      	movs	r0, #0
 800836a:	2100      	movs	r1, #0
 800836c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008370:	23f0      	movs	r3, #240	; 0xf0
 8008372:	f7ff ffb9 	bl	80082e8 <LCD_SetDisplayWindow>
}
 8008376:	bd80      	pop	{r7, pc}

08008378 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b090      	sub	sp, #64	; 0x40
 800837c:	af00      	add	r7, sp, #0
 800837e:	80f8      	strh	r0, [r7, #6]
 8008380:	80b9      	strh	r1, [r7, #4]
 8008382:	807a      	strh	r2, [r7, #2]
 8008384:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800838e:	2300      	movs	r3, #0
 8008390:	873b      	strh	r3, [r7, #56]	; 0x38
 8008392:	2300      	movs	r3, #0
 8008394:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8008396:	88ba      	ldrh	r2, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	461a      	mov	r2, r3
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	4413      	add	r3, r2
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	461a      	mov	r2, r3
 80083aa:	4b23      	ldr	r3, [pc, #140]	; (8008438 <LCD_DrawLine+0xc0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4413      	add	r3, r2
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 80083b2:	4b22      	ldr	r3, [pc, #136]	; (800843c <LCD_DrawLine+0xc4>)
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	0adb      	lsrs	r3, r3, #11
 80083b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 80083ba:	4b20      	ldr	r3, [pc, #128]	; (800843c <LCD_DrawLine+0xc4>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 80083c4:	4b1d      	ldr	r3, [pc, #116]	; (800843c <LCD_DrawLine+0xc4>)
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 80083d2:	f7fc fcb9 	bl	8004d48 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 80083d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80083da:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 80083dc:	2302      	movs	r3, #2
 80083de:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 80083e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083e2:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 80083e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083e6:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 80083e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80083ea:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 80083ec:	230f      	movs	r3, #15
 80083ee:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 80083f4:	787b      	ldrb	r3, [r7, #1]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 80083fa:	2300      	movs	r3, #0
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 80083fe:	2301      	movs	r3, #1
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8008402:	887b      	ldrh	r3, [r7, #2]
 8008404:	633b      	str	r3, [r7, #48]	; 0x30
 8008406:	e005      	b.n	8008414 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8008408:	23ef      	movs	r3, #239	; 0xef
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 800840c:	887b      	ldrh	r3, [r7, #2]
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8008410:	2301      	movs	r3, #1
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4618      	mov	r0, r3
 800841a:	f7fc fca3 	bl	8004d64 <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 800841e:	f7fc fd77 	bl	8004f10 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8008422:	bf00      	nop
 8008424:	2002      	movs	r0, #2
 8008426:	f7fc ff69 	bl	80052fc <DMA2D_GetFlagStatus>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f9      	beq.n	8008424 <LCD_DrawLine+0xac>
  {
  }
  
}
 8008430:	3740      	adds	r7, #64	; 0x40
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000058 	andcs	r0, r0, r8, asr r0
 800843c:	200004d8 	ldrdcs	r0, [r0], -r8

08008440 <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	80f8      	strh	r0, [r7, #6]
 8008448:	80b9      	strh	r1, [r7, #4]
 800844a:	807a      	strh	r2, [r7, #2]
 800844c:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 800844e:	88f9      	ldrh	r1, [r7, #6]
 8008450:	88ba      	ldrh	r2, [r7, #4]
 8008452:	883b      	ldrh	r3, [r7, #0]
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	461a      	mov	r2, r3
 800845a:	2300      	movs	r3, #0
 800845c:	f7ff ff8c 	bl	8008378 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8008460:	88ba      	ldrh	r2, [r7, #4]
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	4413      	add	r3, r2
 8008466:	b29a      	uxth	r2, r3
 8008468:	88f9      	ldrh	r1, [r7, #6]
 800846a:	883b      	ldrh	r3, [r7, #0]
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	461a      	mov	r2, r3
 8008472:	2300      	movs	r3, #0
 8008474:	f7ff ff80 	bl	8008378 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8008478:	88f9      	ldrh	r1, [r7, #6]
 800847a:	88ba      	ldrh	r2, [r7, #4]
 800847c:	887b      	ldrh	r3, [r7, #2]
 800847e:	4608      	mov	r0, r1
 8008480:	4611      	mov	r1, r2
 8008482:	461a      	mov	r2, r3
 8008484:	2301      	movs	r3, #1
 8008486:	f7ff ff77 	bl	8008378 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	883b      	ldrh	r3, [r7, #0]
 800848e:	4413      	add	r3, r2
 8008490:	b299      	uxth	r1, r3
 8008492:	88ba      	ldrh	r2, [r7, #4]
 8008494:	887b      	ldrh	r3, [r7, #2]
 8008496:	4608      	mov	r0, r1
 8008498:	4611      	mov	r1, r2
 800849a:	461a      	mov	r2, r3
 800849c:	2301      	movs	r3, #1
 800849e:	f7ff ff6b 	bl	8008378 <LCD_DrawLine>
}
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4613      	mov	r3, r2
 80084b0:	4602      	mov	r2, r0
 80084b2:	80fa      	strh	r2, [r7, #6]
 80084b4:	460a      	mov	r2, r1
 80084b6:	80ba      	strh	r2, [r7, #4]
 80084b8:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80084ba:	887b      	ldrh	r3, [r7, #2]
 80084bc:	425b      	negs	r3, r3
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	887a      	ldrh	r2, [r7, #2]
 80084c6:	4613      	mov	r3, r2
 80084c8:	07db      	lsls	r3, r3, #31
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	3302      	adds	r3, #2
 80084d0:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 80084d2:	88fa      	ldrh	r2, [r7, #6]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	1ad1      	subs	r1, r2, r3
 80084d8:	88ba      	ldrh	r2, [r7, #4]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	441a      	add	r2, r3
 80084de:	4613      	mov	r3, r2
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	440b      	add	r3, r1
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b36      	ldr	r3, [pc, #216]	; (80085c8 <LCD_DrawCircle+0x120>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4413      	add	r3, r2
 80084f2:	4a36      	ldr	r2, [pc, #216]	; (80085cc <LCD_DrawCircle+0x124>)
 80084f4:	8812      	ldrh	r2, [r2, #0]
 80084f6:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 80084f8:	88fa      	ldrh	r2, [r7, #6]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	18d1      	adds	r1, r2, r3
 80084fe:	88ba      	ldrh	r2, [r7, #4]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	441a      	add	r2, r3
 8008504:	4613      	mov	r3, r2
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	440b      	add	r3, r1
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	461a      	mov	r2, r3
 8008512:	4b2d      	ldr	r3, [pc, #180]	; (80085c8 <LCD_DrawCircle+0x120>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4413      	add	r3, r2
 8008518:	4a2c      	ldr	r2, [pc, #176]	; (80085cc <LCD_DrawCircle+0x124>)
 800851a:	8812      	ldrh	r2, [r2, #0]
 800851c:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	18d1      	adds	r1, r2, r3
 8008524:	88ba      	ldrh	r2, [r7, #4]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad2      	subs	r2, r2, r3
 800852a:	4613      	mov	r3, r2
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	440b      	add	r3, r1
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	461a      	mov	r2, r3
 8008538:	4b23      	ldr	r3, [pc, #140]	; (80085c8 <LCD_DrawCircle+0x120>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4413      	add	r3, r2
 800853e:	4a23      	ldr	r2, [pc, #140]	; (80085cc <LCD_DrawCircle+0x124>)
 8008540:	8812      	ldrh	r2, [r2, #0]
 8008542:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	1ad1      	subs	r1, r2, r3
 800854a:	88ba      	ldrh	r2, [r7, #4]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	4613      	mov	r3, r2
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	440b      	add	r3, r1
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	461a      	mov	r2, r3
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <LCD_DrawCircle+0x120>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4413      	add	r3, r2
 8008564:	4a19      	ldr	r2, [pc, #100]	; (80085cc <LCD_DrawCircle+0x124>)
 8008566:	8812      	ldrh	r2, [r2, #0]
 8008568:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	429a      	cmp	r2, r3
 8008574:	dc13      	bgt.n	800859e <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	3301      	adds	r3, #1
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4413      	add	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	425a      	negs	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	429a      	cmp	r2, r3
 8008590:	d105      	bne.n	800859e <LCD_DrawCircle+0xf6>
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	429a      	cmp	r2, r3
 8008598:	dc01      	bgt.n	800859e <LCD_DrawCircle+0xf6>
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	dd08      	ble.n	80085b8 <LCD_DrawCircle+0x110>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	3301      	adds	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	3301      	adds	r3, #1
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dd89      	ble.n	80084d2 <LCD_DrawCircle+0x2a>
}
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20000058 	andcs	r0, r0, r8, asr r0
 80085cc:	200004d8 	ldrdcs	r0, [r0], -r8

080085d0 <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08c      	sub	sp, #48	; 0x30
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	425b      	negs	r3, r3
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e4:	2300      	movs	r3, #0
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	07db      	lsls	r3, r3, #31
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	3302      	adds	r3, #2
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	ee07 3a10 	vmov	s14, r3
 800860e:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8008612:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	ee07 3a10 	vmov	s14, r3
 800861c:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8008620:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	f340 8094 	ble.w	8008756 <LCD_DrawFullEllipse+0x186>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 800862e:	ed97 7a06 	vldr	s14, [r7, #24]
 8008632:	edd7 7a05 	vldr	s15, [r7, #20]
 8008636:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800863a:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b29a      	uxth	r2, r3
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	b29b      	uxth	r3, r3
 8008646:	4413      	add	r3, r2
 8008648:	b299      	uxth	r1, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	b29a      	uxth	r2, r3
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008658:	edd7 7a07 	vldr	s15, [r7, #28]
 800865c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 3a90 	vmov	r3, s15
 8008668:	b29b      	uxth	r3, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	b29a      	uxth	r2, r3
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008678:	edd7 7a07 	vldr	s15, [r7, #28]
 800867c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008684:	ee17 3a90 	vmov	r3, s15
 8008688:	b29b      	uxth	r3, r3
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	b29b      	uxth	r3, r3
 800868e:	3301      	adds	r3, #1
 8008690:	b29b      	uxth	r3, r3
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	461a      	mov	r2, r3
 8008698:	2301      	movs	r3, #1
 800869a:	f7ff fe6d 	bl	8008378 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	b299      	uxth	r1, r3
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80086bc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80086c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c4:	ee17 3a90 	vmov	r3, s15
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80086dc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80086e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e4:	ee17 3a90 	vmov	r3, s15
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3301      	adds	r3, #1
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	461a      	mov	r2, r3
 80086f8:	2301      	movs	r3, #1
 80086fa:	f7ff fe3d 	bl	8008378 <LCD_DrawLine>
      
      e2 = err;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	429a      	cmp	r2, r3
 8008708:	dc13      	bgt.n	8008732 <LCD_DrawFullEllipse+0x162>
      {
        err += ++y*2+1;
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	3301      	adds	r3, #1
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	3301      	adds	r3, #1
 8008716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008718:	4413      	add	r3, r2
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	425a      	negs	r2, r3
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	429a      	cmp	r2, r3
 8008724:	d105      	bne.n	8008732 <LCD_DrawFullEllipse+0x162>
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	429a      	cmp	r2, r3
 800872c:	dc01      	bgt.n	8008732 <LCD_DrawFullEllipse+0x162>
 800872e:	2300      	movs	r3, #0
 8008730:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	429a      	cmp	r2, r3
 8008738:	dd08      	ble.n	800874c <LCD_DrawFullEllipse+0x17c>
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	3301      	adds	r3, #1
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	3301      	adds	r3, #1
 8008746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008748:	4413      	add	r3, r2
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b00      	cmp	r3, #0
 8008750:	f77f af6d 	ble.w	800862e <LCD_DrawFullEllipse+0x5e>
 8008754:	e097      	b.n	8008886 <LCD_DrawFullEllipse+0x2b6>
  }
  else
  {
    y = -Radius2; 
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	425b      	negs	r3, r3
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 8008760:	ed97 7a05 	vldr	s14, [r7, #20]
 8008764:	edd7 7a06 	vldr	s15, [r7, #24]
 8008768:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800876c:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	b29a      	uxth	r2, r3
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800877e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008782:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878a:	ee17 3a90 	vmov	r3, s15
 800878e:	b29b      	uxth	r3, r3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	b299      	uxth	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	b29a      	uxth	r2, r3
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	b29b      	uxth	r3, r3
 800879c:	4413      	add	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80087ae:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80087b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b6:	ee17 3a90 	vmov	r3, s15
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3301      	adds	r3, #1
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	2300      	movs	r3, #0
 80087cc:	f7ff fdd4 	bl	8008378 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087de:	edd7 7a07 	vldr	s15, [r7, #28]
 80087e2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80087e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ea:	ee17 3a90 	vmov	r3, s15
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	b299      	uxth	r1, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800880a:	edd7 7a07 	vldr	s15, [r7, #28]
 800880e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008816:	ee17 3a90 	vmov	r3, s15
 800881a:	b29b      	uxth	r3, r3
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	b29b      	uxth	r3, r3
 8008820:	3301      	adds	r3, #1
 8008822:	b29b      	uxth	r3, r3
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	2300      	movs	r3, #0
 800882c:	f7ff fda4 	bl	8008378 <LCD_DrawLine>
      
      e2 = err;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8008834:	6a3a      	ldr	r2, [r7, #32]
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	429a      	cmp	r2, r3
 800883a:	dc13      	bgt.n	8008864 <LCD_DrawFullEllipse+0x294>
      {
        err += ++x*2+1;
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	3301      	adds	r3, #1
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	3301      	adds	r3, #1
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	4413      	add	r3, r2
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	425a      	negs	r2, r3
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	429a      	cmp	r2, r3
 8008856:	d105      	bne.n	8008864 <LCD_DrawFullEllipse+0x294>
 8008858:	6a3a      	ldr	r2, [r7, #32]
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	429a      	cmp	r2, r3
 800885e:	dc01      	bgt.n	8008864 <LCD_DrawFullEllipse+0x294>
 8008860:	2300      	movs	r3, #0
 8008862:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	429a      	cmp	r2, r3
 800886a:	dd08      	ble.n	800887e <LCD_DrawFullEllipse+0x2ae>
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	3301      	adds	r3, #1
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	3301      	adds	r3, #1
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	4413      	add	r3, r2
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	f77f af6d 	ble.w	8008760 <LCD_DrawFullEllipse+0x190>
  }
}
 8008886:	3730      	adds	r7, #48	; 0x30
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 800888c:	b480      	push	{r7}
 800888e:	b08d      	sub	sp, #52	; 0x34
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	425b      	negs	r3, r3
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a0:	2300      	movs	r3, #0
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	07db      	lsls	r3, r3, #31
 80088aa:	1a9b      	subs	r3, r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	3302      	adds	r3, #2
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	ee07 3a10 	vmov	s14, r3
 80088ca:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80088ce:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	ee07 3a10 	vmov	s14, r3
 80088d8:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80088dc:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	f340 80b6 	ble.w	8008a56 <LCD_DrawEllipse+0x1ca>
  { 
    do {
      K = (float)(rad1/rad2);
 80088ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80088ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80088f2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	1ad1      	subs	r1, r2, r3
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800890a:	edd7 7a07 	vldr	s15, [r7, #28]
 800890e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008916:	ee17 3a90 	vmov	r3, s15
 800891a:	b29b      	uxth	r3, r3
 800891c:	461a      	mov	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	441a      	add	r2, r3
 8008922:	4613      	mov	r3, r2
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	440b      	add	r3, r1
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	461a      	mov	r2, r3
 8008930:	4ba8      	ldr	r3, [pc, #672]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4413      	add	r3, r2
 8008936:	4aa8      	ldr	r2, [pc, #672]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 8008938:	8812      	ldrh	r2, [r2, #0]
 800893a:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	18d1      	adds	r1, r2, r3
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800894c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008950:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008958:	ee17 3a90 	vmov	r3, s15
 800895c:	b29b      	uxth	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	441a      	add	r2, r3
 8008964:	4613      	mov	r3, r2
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	440b      	add	r3, r1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	461a      	mov	r2, r3
 8008972:	4b98      	ldr	r3, [pc, #608]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4413      	add	r3, r2
 8008978:	4a97      	ldr	r2, [pc, #604]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	18d1      	adds	r1, r2, r3
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800898e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008992:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899a:	ee17 3a90 	vmov	r3, s15
 800899e:	b29b      	uxth	r3, r3
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	1ad2      	subs	r2, r2, r3
 80089a4:	4613      	mov	r3, r2
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	440b      	add	r3, r1
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	4a87      	ldr	r2, [pc, #540]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	1ad1      	subs	r1, r2, r3
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80089d2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80089d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089da:	ee17 3a90 	vmov	r3, s15
 80089de:	b29b      	uxth	r3, r3
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	4613      	mov	r3, r2
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	440b      	add	r3, r1
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b78      	ldr	r3, [pc, #480]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4413      	add	r3, r2
 80089f8:	4a77      	ldr	r2, [pc, #476]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 80089fa:	8812      	ldrh	r2, [r2, #0]
 80089fc:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 8008a02:	6a3a      	ldr	r2, [r7, #32]
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	429a      	cmp	r2, r3
 8008a08:	dc13      	bgt.n	8008a32 <LCD_DrawEllipse+0x1a6>
        err += ++y*2+1;
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	3301      	adds	r3, #1
 8008a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a18:	4413      	add	r3, r2
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	425a      	negs	r2, r3
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d105      	bne.n	8008a32 <LCD_DrawEllipse+0x1a6>
 8008a26:	6a3a      	ldr	r2, [r7, #32]
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	dc01      	bgt.n	8008a32 <LCD_DrawEllipse+0x1a6>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8008a32:	6a3a      	ldr	r2, [r7, #32]
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	429a      	cmp	r2, r3
 8008a38:	dd08      	ble.n	8008a4c <LCD_DrawEllipse+0x1c0>
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	3301      	adds	r3, #1
 8008a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a48:	4413      	add	r3, r2
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f77f af4b 	ble.w	80088ea <LCD_DrawEllipse+0x5e>
 8008a54:	e0b9      	b.n	8008bca <LCD_DrawEllipse+0x33e>
  }
  else
  {
    y = -Radius2; 
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	425b      	negs	r3, r3
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 8008a60:	ed97 7a05 	vldr	s14, [r7, #20]
 8008a64:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a68:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008a6c:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a7e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a86:	ee17 3a90 	vmov	r3, s15
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	1ad1      	subs	r1, r2, r3
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	441a      	add	r2, r3
 8008a96:	4613      	mov	r3, r2
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	440b      	add	r3, r1
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4b4b      	ldr	r3, [pc, #300]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4a4b      	ldr	r2, [pc, #300]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 8008aac:	8812      	ldrh	r2, [r2, #0]
 8008aae:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8008abe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac6:	ee17 3a90 	vmov	r3, s15
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	18d1      	adds	r1, r2, r3
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	441a      	add	r2, r3
 8008ad8:	4613      	mov	r3, r2
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	440b      	add	r3, r1
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b3b      	ldr	r3, [pc, #236]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4413      	add	r3, r2
 8008aec:	4a3a      	ldr	r2, [pc, #232]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 8008aee:	8812      	ldrh	r2, [r2, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	ee07 3a90 	vmov	s15, r3
 8008af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008afc:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b00:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b08:	ee17 3a90 	vmov	r3, s15
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	18d1      	adds	r1, r2, r3
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	1ad2      	subs	r2, r2, r3
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	440b      	add	r3, r1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	461a      	mov	r2, r3
 8008b28:	4b2a      	ldr	r3, [pc, #168]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	4a2a      	ldr	r2, [pc, #168]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 8008b30:	8812      	ldrh	r2, [r2, #0]
 8008b32:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b42:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4a:	ee17 3a90 	vmov	r3, s15
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	1ad1      	subs	r1, r2, r3
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	440b      	add	r3, r1
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	461a      	mov	r2, r3
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <LCD_DrawEllipse+0x348>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <LCD_DrawEllipse+0x34c>)
 8008b70:	8812      	ldrh	r2, [r2, #0]
 8008b72:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 8008b78:	6a3a      	ldr	r2, [r7, #32]
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	dc13      	bgt.n	8008ba8 <LCD_DrawEllipse+0x31c>
        err += ++x*2+1;
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	3301      	adds	r3, #1
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8e:	4413      	add	r3, r2
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	425a      	negs	r2, r3
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d105      	bne.n	8008ba8 <LCD_DrawEllipse+0x31c>
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	dc01      	bgt.n	8008ba8 <LCD_DrawEllipse+0x31c>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 8008ba8:	6a3a      	ldr	r2, [r7, #32]
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	429a      	cmp	r2, r3
 8008bae:	dd08      	ble.n	8008bc2 <LCD_DrawEllipse+0x336>
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbe:	4413      	add	r3, r2
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f77f af4b 	ble.w	8008a60 <LCD_DrawEllipse+0x1d4>
  }
}
 8008bca:	3734      	adds	r7, #52	; 0x34
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000058 	andcs	r0, r0, r8, asr r0
 8008bd8:	200004d8 	ldrdcs	r0, [r0], -r8

08008bdc <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	2300      	movs	r3, #0
 8008bea:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e022      	b.n	8008c38 <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	e019      	b.n	8008c2c <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2101      	movs	r1, #1
 8008c06:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 8008c10:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <LCD_DrawMonoPict+0x70>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <LCD_DrawMonoPict+0x74>)
 8008c16:	8812      	ldrh	r2, [r2, #0]
 8008c18:	801a      	strh	r2, [r3, #0]
 8008c1a:	e004      	b.n	8008c26 <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <LCD_DrawMonoPict+0x70>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0c      	ldr	r2, [pc, #48]	; (8008c54 <LCD_DrawMonoPict+0x78>)
 8008c22:	8812      	ldrh	r2, [r2, #0]
 8008c24:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60bb      	str	r3, [r7, #8]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b1f      	cmp	r3, #31
 8008c30:	d9e2      	bls.n	8008bf8 <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8008c3e:	d3d8      	bcc.n	8008bf2 <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000058 	andcs	r0, r0, r8, asr r0
 8008c50:	20000054 	andcs	r0, r0, r4, asr r0
 8008c54:	200004d8 	ldrdcs	r0, [r0], -r8

08008c58 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	; 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8008c7c:	4b69      	ldr	r3, [pc, #420]	; (8008e24 <LCD_WriteBMP+0x1cc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3302      	adds	r3, #2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	330a      	adds	r3, #10
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	330c      	adds	r3, #12
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3312      	adds	r3, #18
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	041b      	lsls	r3, r3, #16
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3316      	adds	r3, #22
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3318      	adds	r3, #24
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	331c      	adds	r3, #28
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8008cea:	4b4f      	ldr	r3, [pc, #316]	; (8008e28 <LCD_WriteBMP+0x1d0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d127      	bne.n	8008d42 <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 8008cf2:	484e      	ldr	r0, [pc, #312]	; (8008e2c <LCD_WriteBMP+0x1d4>)
 8008cf4:	6939      	ldr	r1, [r7, #16]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	f7fc ff40 	bl	8005b7c <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 8008cfc:	2002      	movs	r0, #2
 8008cfe:	f7fc fcc1 	bl	8005684 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3b20      	subs	r3, #32
 8008d06:	2b07      	cmp	r3, #7
 8008d08:	d807      	bhi.n	8008d1a <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 8008d0a:	4848      	ldr	r0, [pc, #288]	; (8008e2c <LCD_WriteBMP+0x1d4>)
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	f7fc ff9b 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008d12:	2002      	movs	r0, #2
 8008d14:	f7fc fcb6 	bl	8005684 <LTDC_ReloadConfig>
 8008d18:	e03a      	b.n	8008d90 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3b10      	subs	r3, #16
 8008d1e:	2b07      	cmp	r3, #7
 8008d20:	d807      	bhi.n	8008d32 <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 8008d22:	4842      	ldr	r0, [pc, #264]	; (8008e2c <LCD_WriteBMP+0x1d4>)
 8008d24:	2102      	movs	r1, #2
 8008d26:	f7fc ff8f 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008d2a:	2002      	movs	r0, #2
 8008d2c:	f7fc fcaa 	bl	8005684 <LTDC_ReloadConfig>
 8008d30:	e02e      	b.n	8008d90 <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8008d32:	483e      	ldr	r0, [pc, #248]	; (8008e2c <LCD_WriteBMP+0x1d4>)
 8008d34:	2101      	movs	r1, #1
 8008d36:	f7fc ff87 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008d3a:	2002      	movs	r0, #2
 8008d3c:	f7fc fca2 	bl	8005684 <LTDC_ReloadConfig>
 8008d40:	e026      	b.n	8008d90 <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8008d42:	483b      	ldr	r0, [pc, #236]	; (8008e30 <LCD_WriteBMP+0x1d8>)
 8008d44:	6939      	ldr	r1, [r7, #16]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	f7fc ff18 	bl	8005b7c <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8008d4c:	2002      	movs	r0, #2
 8008d4e:	f7fc fc99 	bl	8005684 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	3b20      	subs	r3, #32
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d807      	bhi.n	8008d6a <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 8008d5a:	4835      	ldr	r0, [pc, #212]	; (8008e30 <LCD_WriteBMP+0x1d8>)
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f7fc ff73 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008d62:	2002      	movs	r0, #2
 8008d64:	f7fc fc8e 	bl	8005684 <LTDC_ReloadConfig>
 8008d68:	e012      	b.n	8008d90 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3b10      	subs	r3, #16
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	d807      	bhi.n	8008d82 <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8008d72:	482f      	ldr	r0, [pc, #188]	; (8008e30 <LCD_WriteBMP+0x1d8>)
 8008d74:	2102      	movs	r1, #2
 8008d76:	f7fc ff67 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8008d7a:	2002      	movs	r0, #2
 8008d7c:	f7fc fc82 	bl	8005684 <LTDC_ReloadConfig>
 8008d80:	e006      	b.n	8008d90 <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8008d82:	482b      	ldr	r0, [pc, #172]	; (8008e30 <LCD_WriteBMP+0x1d8>)
 8008d84:	2101      	movs	r1, #1
 8008d86:	f7fc ff5f 	bl	8005c48 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 8008d8a:	2002      	movs	r0, #2
 8008d8c:	f7fc fc7a 	bl	8005684 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	08d2      	lsrs	r2, r2, #3
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	4413      	add	r3, r2
 8008db6:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 8008db8:	2300      	movs	r3, #0
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
 8008dbc:	e02a      	b.n	8008e14 <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	7812      	ldrb	r2, [r2, #0]
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
    Address++;
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	623b      	str	r3, [r7, #32]
    currentline++;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d111      	bne.n	8008e0e <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d20d      	bcs.n	8008e0e <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	3301      	adds	r3, #1
 8008df6:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	08db      	lsrs	r3, r3, #3
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	6a3a      	ldr	r2, [r7, #32]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	623b      	str	r3, [r7, #32]
        currentline = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	3301      	adds	r3, #1
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d3d0      	bcc.n	8008dbe <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 8008e1c:	3728      	adds	r7, #40	; 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000058 	andcs	r0, r0, r8, asr r0
 8008e28:	200004dc 	ldrdcs	r0, [r0], -ip
 8008e2c:	40016884 	andmi	r6, r1, r4, lsl #17
 8008e30:	40016904 	andmi	r6, r1, r4, lsl #18

08008e34 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b090      	sub	sp, #64	; 0x40
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	80f8      	strh	r0, [r7, #6]
 8008e3c:	80b9      	strh	r1, [r7, #4]
 8008e3e:	807a      	strh	r2, [r7, #2]
 8008e40:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8008e42:	2300      	movs	r3, #0
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e4e:	2300      	movs	r3, #0
 8008e50:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8008e52:	4b26      	ldr	r3, [pc, #152]	; (8008eec <LCD_DrawFullRect+0xb8>)
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	0adb      	lsrs	r3, r3, #11
 8008e58:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8008e5a:	4b24      	ldr	r3, [pc, #144]	; (8008eec <LCD_DrawFullRect+0xb8>)
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8008e64:	4b21      	ldr	r3, [pc, #132]	; (8008eec <LCD_DrawFullRect+0xb8>)
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8008e72:	88ba      	ldrh	r2, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	4413      	add	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	461a      	mov	r2, r3
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <LCD_DrawFullRect+0xbc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8008e8e:	f7fb ff5b 	bl	8004d48 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8008e92:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008e96:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8008e98:	2302      	movs	r3, #2
 8008e9a:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8008e9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e9e:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8008ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ea2:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8008ea4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008ea6:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8008ea8:	230f      	movs	r3, #15
 8008eaa:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8008eb0:	887b      	ldrh	r3, [r7, #2]
 8008eb2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 8008eb8:	883b      	ldrh	r3, [r7, #0]
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8008ebc:	887b      	ldrh	r3, [r7, #2]
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 8008ec0:	f107 030c 	add.w	r3, r7, #12
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fb ff4d 	bl	8004d64 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 8008eca:	f7fc f821 	bl	8004f10 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8008ece:	bf00      	nop
 8008ed0:	2002      	movs	r0, #2
 8008ed2:	f7fc fa13 	bl	80052fc <DMA2D_GetFlagStatus>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f9      	beq.n	8008ed0 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 8008edc:	4b03      	ldr	r3, [pc, #12]	; (8008eec <LCD_DrawFullRect+0xb8>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fffb 	bl	8007edc <LCD_SetTextColor>
}
 8008ee6:	3740      	adds	r7, #64	; 0x40
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	200004d8 	ldrdcs	r0, [r0], -r8
 8008ef0:	20000058 	andcs	r0, r0, r8, asr r0

08008ef4 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4613      	mov	r3, r2
 8008efc:	4602      	mov	r2, r0
 8008efe:	80fa      	strh	r2, [r7, #6]
 8008f00:	460a      	mov	r2, r1
 8008f02:	80ba      	strh	r2, [r7, #4]
 8008f04:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008f06:	887b      	ldrh	r3, [r7, #2]
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	f1c3 0303 	rsb	r3, r3, #3
 8008f0e:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008f14:	887b      	ldrh	r3, [r7, #2]
 8008f16:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8008f18:	e06d      	b.n	8008ff6 <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d027      	beq.n	8008f70 <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	88fa      	ldrh	r2, [r7, #6]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	b299      	uxth	r1, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	88ba      	ldrh	r2, [r7, #4]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	461a      	mov	r2, r3
 8008f42:	2301      	movs	r3, #1
 8008f44:	f7ff fa18 	bl	8008378 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	4413      	add	r3, r2
 8008f50:	b299      	uxth	r1, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	88ba      	ldrh	r2, [r7, #4]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f7ff fa04 	bl	8008378 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d027      	beq.n	8008fc6 <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	b299      	uxth	r1, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	88ba      	ldrh	r2, [r7, #4]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	4608      	mov	r0, r1
 8008f94:	4611      	mov	r1, r2
 8008f96:	461a      	mov	r2, r3
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f7ff f9ed 	bl	8008378 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	b299      	uxth	r1, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	88ba      	ldrh	r2, [r7, #4]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4608      	mov	r0, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f7ff f9d9 	bl	8008378 <LCD_DrawLine>
    }
    if (D < 0)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da06      	bge.n	8008fda <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	009a      	lsls	r2, r3, #2
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3306      	adds	r3, #6
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e00a      	b.n	8008ff0 <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	009a      	lsls	r2, r3, #2
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	330a      	adds	r3, #10
 8008fe8:	617b      	str	r3, [r7, #20]
      CurY--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d98d      	bls.n	8008f1a <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 8008ffe:	88f9      	ldrh	r1, [r7, #6]
 8009000:	88ba      	ldrh	r2, [r7, #4]
 8009002:	887b      	ldrh	r3, [r7, #2]
 8009004:	4608      	mov	r0, r1
 8009006:	4611      	mov	r1, r2
 8009008:	461a      	mov	r2, r3
 800900a:	f7ff fa4d 	bl	80084a8 <LCD_DrawCircle>
}
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08a      	sub	sp, #40	; 0x28
 8009018:	af00      	add	r7, sp, #0
 800901a:	80f8      	strh	r0, [r7, #6]
 800901c:	80b9      	strh	r1, [r7, #4]
 800901e:	807a      	strh	r2, [r7, #2]
 8009020:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8009022:	2300      	movs	r3, #0
 8009024:	823b      	strh	r3, [r7, #16]
 8009026:	2300      	movs	r3, #0
 8009028:	81fb      	strh	r3, [r7, #14]
 800902a:	2300      	movs	r3, #0
 800902c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800902e:	2300      	movs	r3, #0
 8009030:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009032:	2300      	movs	r3, #0
 8009034:	847b      	strh	r3, [r7, #34]	; 0x22
 8009036:	2300      	movs	r3, #0
 8009038:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800903a:	2300      	movs	r3, #0
 800903c:	83fb      	strh	r3, [r7, #30]
 800903e:	2300      	movs	r3, #0
 8009040:	83bb      	strh	r3, [r7, #28]
 8009042:	2300      	movs	r3, #0
 8009044:	837b      	strh	r3, [r7, #26]
 8009046:	2300      	movs	r3, #0
 8009048:	833b      	strh	r3, [r7, #24]
 800904a:	2300      	movs	r3, #0
 800904c:	82fb      	strh	r3, [r7, #22]
 800904e:	2300      	movs	r3, #0
 8009050:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8009056:	887a      	ldrh	r2, [r7, #2]
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfb8      	it	lt
 8009060:	425b      	neglt	r3, r3
 8009062:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8009064:	883a      	ldrh	r2, [r7, #0]
 8009066:	88bb      	ldrh	r3, [r7, #4]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfb8      	it	lt
 800906e:	425b      	neglt	r3, r3
 8009070:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8009076:	88bb      	ldrh	r3, [r7, #4]
 8009078:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800907a:	887a      	ldrh	r2, [r7, #2]
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	429a      	cmp	r2, r3
 8009080:	d304      	bcc.n	800908c <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8009086:	2301      	movs	r3, #1
 8009088:	843b      	strh	r3, [r7, #32]
 800908a:	e005      	b.n	8009098 <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800908c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009090:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8009092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009096:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8009098:	883a      	ldrh	r2, [r7, #0]
 800909a:	88bb      	ldrh	r3, [r7, #4]
 800909c:	429a      	cmp	r2, r3
 800909e:	d304      	bcc.n	80090aa <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80090a4:	2301      	movs	r3, #1
 80090a6:	83bb      	strh	r3, [r7, #28]
 80090a8:	e005      	b.n	80090b6 <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80090aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090ae:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80090b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090b4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80090b6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80090ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090be:	429a      	cmp	r2, r3
 80090c0:	db10      	blt.n	80090e4 <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80090c2:	2300      	movs	r3, #0
 80090c4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80090c6:	2300      	movs	r3, #0
 80090c8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80090ca:	8a3b      	ldrh	r3, [r7, #16]
 80090cc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80090ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80090d2:	0fda      	lsrs	r2, r3, #31
 80090d4:	4413      	add	r3, r2
 80090d6:	105b      	asrs	r3, r3, #1
 80090d8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80090da:	89fb      	ldrh	r3, [r7, #14]
 80090dc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80090de:	8a3b      	ldrh	r3, [r7, #16]
 80090e0:	82bb      	strh	r3, [r7, #20]
 80090e2:	e00f      	b.n	8009104 <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80090e4:	2300      	movs	r3, #0
 80090e6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80090e8:	2300      	movs	r3, #0
 80090ea:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80090ec:	89fb      	ldrh	r3, [r7, #14]
 80090ee:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80090f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090f4:	0fda      	lsrs	r2, r3, #31
 80090f6:	4413      	add	r3, r2
 80090f8:	105b      	asrs	r3, r3, #1
 80090fa:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80090fc:	8a3b      	ldrh	r3, [r7, #16]
 80090fe:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8009104:	2300      	movs	r3, #0
 8009106:	827b      	strh	r3, [r7, #18]
 8009108:	e02e      	b.n	8009168 <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 800910a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800910e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	f000 fdc5 	bl	8009ca4 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 800911a:	8b3a      	ldrh	r2, [r7, #24]
 800911c:	8afb      	ldrh	r3, [r7, #22]
 800911e:	4413      	add	r3, r2
 8009120:	b29b      	uxth	r3, r3
 8009122:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8009124:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009128:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800912c:	429a      	cmp	r2, r3
 800912e:	db0e      	blt.n	800914e <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 8009130:	8b3a      	ldrh	r2, [r7, #24]
 8009132:	8b7b      	ldrh	r3, [r7, #26]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800913a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800913c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800913e:	4413      	add	r3, r2
 8009140:	b29b      	uxth	r3, r3
 8009142:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8009144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009146:	8bfb      	ldrh	r3, [r7, #30]
 8009148:	4413      	add	r3, r2
 800914a:	b29b      	uxth	r3, r3
 800914c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800914e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009150:	8c3b      	ldrh	r3, [r7, #32]
 8009152:	4413      	add	r3, r2
 8009154:	b29b      	uxth	r3, r3
 8009156:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8009158:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800915a:	8bbb      	ldrh	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	b29b      	uxth	r3, r3
 8009160:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8009162:	8a7b      	ldrh	r3, [r7, #18]
 8009164:	3301      	adds	r3, #1
 8009166:	827b      	strh	r3, [r7, #18]
 8009168:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800916c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009170:	429a      	cmp	r2, r3
 8009172:	ddca      	ble.n	800910a <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8009174:	3728      	adds	r7, #40	; 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop

0800917c <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	81fb      	strh	r3, [r7, #14]
 800918c:	2300      	movs	r3, #0
 800918e:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8009194:	887b      	ldrh	r3, [r7, #2]
 8009196:	2b03      	cmp	r3, #3
 8009198:	d000      	beq.n	800919c <LCD_Triangle+0x20>
  {
    return;
 800919a:	e027      	b.n	80091ec <LCD_Triangle+0x70>
  }

  while(--PointCount)
 800919c:	e012      	b.n	80091c4 <LCD_Triangle+0x48>
  {
    X = Points->X;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	885b      	ldrh	r3, [r3, #2]
 80091a8:	81bb      	strh	r3, [r7, #12]
    Points++;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3304      	adds	r3, #4
 80091ae:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 80091b0:	89f8      	ldrh	r0, [r7, #14]
 80091b2:	89b9      	ldrh	r1, [r7, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f7ff ff28 	bl	8009014 <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 80091c4:	887b      	ldrh	r3, [r7, #2]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	807b      	strh	r3, [r7, #2]
 80091ca:	887b      	ldrh	r3, [r7, #2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e6      	bne.n	800919e <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b298      	uxth	r0, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	885b      	ldrh	r3, [r3, #2]
 80091da:	b299      	uxth	r1, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	f7ff ff14 	bl	8009014 <LCD_DrawUniLine>
}
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop

080091f4 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	80f8      	strh	r0, [r7, #6]
 80091fc:	80b9      	strh	r1, [r7, #4]
 80091fe:	807a      	strh	r2, [r7, #2]
 8009200:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8009202:	2300      	movs	r3, #0
 8009204:	823b      	strh	r3, [r7, #16]
 8009206:	2300      	movs	r3, #0
 8009208:	81fb      	strh	r3, [r7, #14]
 800920a:	2300      	movs	r3, #0
 800920c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800920e:	2300      	movs	r3, #0
 8009210:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009212:	2300      	movs	r3, #0
 8009214:	847b      	strh	r3, [r7, #34]	; 0x22
 8009216:	2300      	movs	r3, #0
 8009218:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800921a:	2300      	movs	r3, #0
 800921c:	83fb      	strh	r3, [r7, #30]
 800921e:	2300      	movs	r3, #0
 8009220:	83bb      	strh	r3, [r7, #28]
 8009222:	2300      	movs	r3, #0
 8009224:	837b      	strh	r3, [r7, #26]
 8009226:	2300      	movs	r3, #0
 8009228:	833b      	strh	r3, [r7, #24]
 800922a:	2300      	movs	r3, #0
 800922c:	82fb      	strh	r3, [r7, #22]
 800922e:	2300      	movs	r3, #0
 8009230:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8009236:	88ba      	ldrh	r2, [r7, #4]
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfb8      	it	lt
 8009240:	425b      	neglt	r3, r3
 8009242:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8009244:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009246:	883b      	ldrh	r3, [r7, #0]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfb8      	it	lt
 800924e:	425b      	neglt	r3, r3
 8009250:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8009256:	883b      	ldrh	r3, [r7, #0]
 8009258:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800925a:	88ba      	ldrh	r2, [r7, #4]
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	429a      	cmp	r2, r3
 8009260:	d304      	bcc.n	800926c <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 8009262:	2301      	movs	r3, #1
 8009264:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8009266:	2301      	movs	r3, #1
 8009268:	843b      	strh	r3, [r7, #32]
 800926a:	e005      	b.n	8009278 <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800926c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009270:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8009272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009276:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8009278:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800927a:	883b      	ldrh	r3, [r7, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d304      	bcc.n	800928a <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8009284:	2301      	movs	r3, #1
 8009286:	83bb      	strh	r3, [r7, #28]
 8009288:	e005      	b.n	8009296 <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800928a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800928e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8009290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009294:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8009296:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800929a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800929e:	429a      	cmp	r2, r3
 80092a0:	db10      	blt.n	80092c4 <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80092a2:	2300      	movs	r3, #0
 80092a4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80092a6:	2300      	movs	r3, #0
 80092a8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80092aa:	8a3b      	ldrh	r3, [r7, #16]
 80092ac:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80092ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80092b2:	0fda      	lsrs	r2, r3, #31
 80092b4:	4413      	add	r3, r2
 80092b6:	105b      	asrs	r3, r3, #1
 80092b8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80092be:	8a3b      	ldrh	r3, [r7, #16]
 80092c0:	82bb      	strh	r3, [r7, #20]
 80092c2:	e00f      	b.n	80092e4 <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80092c4:	2300      	movs	r3, #0
 80092c6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80092c8:	2300      	movs	r3, #0
 80092ca:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80092d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092d4:	0fda      	lsrs	r2, r3, #31
 80092d6:	4413      	add	r3, r2
 80092d8:	105b      	asrs	r3, r3, #1
 80092da:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80092dc:	8a3b      	ldrh	r3, [r7, #16]
 80092de:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80092e4:	2300      	movs	r3, #0
 80092e6:	827b      	strh	r3, [r7, #18]
 80092e8:	e02c      	b.n	8009344 <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 80092ea:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80092ec:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80092ee:	887a      	ldrh	r2, [r7, #2]
 80092f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80092f2:	f7ff fe8f 	bl	8009014 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80092f6:	8b3a      	ldrh	r2, [r7, #24]
 80092f8:	8afb      	ldrh	r3, [r7, #22]
 80092fa:	4413      	add	r3, r2
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8009300:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009308:	429a      	cmp	r2, r3
 800930a:	db0e      	blt.n	800932a <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 800930c:	8b3a      	ldrh	r2, [r7, #24]
 800930e:	8b7b      	ldrh	r3, [r7, #26]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	b29b      	uxth	r3, r3
 8009314:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8009316:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800931a:	4413      	add	r3, r2
 800931c:	b29b      	uxth	r3, r3
 800931e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8009320:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009322:	8bfb      	ldrh	r3, [r7, #30]
 8009324:	4413      	add	r3, r2
 8009326:	b29b      	uxth	r3, r3
 8009328:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800932a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800932c:	8c3b      	ldrh	r3, [r7, #32]
 800932e:	4413      	add	r3, r2
 8009330:	b29b      	uxth	r3, r3
 8009332:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8009334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009336:	8bbb      	ldrh	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	b29b      	uxth	r3, r3
 800933c:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800933e:	8a7b      	ldrh	r3, [r7, #18]
 8009340:	3301      	adds	r3, #1
 8009342:	827b      	strh	r3, [r7, #18]
 8009344:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800934c:	429a      	cmp	r2, r3
 800934e:	ddcc      	ble.n	80092ea <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 8009350:	3728      	adds	r7, #40	; 0x28
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop

08009358 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	81fb      	strh	r3, [r7, #14]
 8009368:	2300      	movs	r3, #0
 800936a:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 800936c:	887b      	ldrh	r3, [r7, #2]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d800      	bhi.n	8009374 <LCD_PolyLine+0x1c>
  {
    return;
 8009372:	e019      	b.n	80093a8 <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 8009374:	e012      	b.n	800939c <LCD_PolyLine+0x44>
  {
    X = Points->X;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	885b      	ldrh	r3, [r3, #2]
 8009380:	81bb      	strh	r3, [r7, #12]
    Points++;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3304      	adds	r3, #4
 8009386:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8009388:	89f8      	ldrh	r0, [r7, #14]
 800938a:	89b9      	ldrh	r1, [r7, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	b29b      	uxth	r3, r3
 8009398:	f7ff fe3c 	bl	8009014 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 800939c:	887b      	ldrh	r3, [r7, #2]
 800939e:	3b01      	subs	r3, #1
 80093a0:	807b      	strh	r3, [r7, #2]
 80093a2:	887b      	ldrh	r3, [r7, #2]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e6      	bne.n	8009376 <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop

080093b0 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 80093b0:	b590      	push	{r4, r7, lr}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	460a      	mov	r2, r1
 80093bc:	807a      	strh	r2, [r7, #2]
 80093be:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	81fb      	strh	r3, [r7, #14]
 80093c4:	2300      	movs	r3, #0
 80093c6:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 80093cc:	887b      	ldrh	r3, [r7, #2]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d800      	bhi.n	80093d4 <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 80093d2:	e03a      	b.n	800944a <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 80093e0:	e020      	b.n	8009424 <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3304      	adds	r3, #4
 80093e6:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 80093e8:	89f8      	ldrh	r0, [r7, #14]
 80093ea:	89b9      	ldrh	r1, [r7, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	89fb      	ldrh	r3, [r7, #14]
 80093f4:	4413      	add	r3, r2
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	885b      	ldrh	r3, [r3, #2]
 80093fc:	b29c      	uxth	r4, r3
 80093fe:	89bb      	ldrh	r3, [r7, #12]
 8009400:	4423      	add	r3, r4
 8009402:	b29b      	uxth	r3, r3
 8009404:	f7ff fe06 	bl	8009014 <LCD_DrawUniLine>
    X = X + Points->X;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	b29a      	uxth	r2, r3
 800940e:	89fb      	ldrh	r3, [r7, #14]
 8009410:	4413      	add	r3, r2
 8009412:	b29b      	uxth	r3, r3
 8009414:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	885b      	ldrh	r3, [r3, #2]
 800941a:	b29a      	uxth	r2, r3
 800941c:	89bb      	ldrh	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	b29b      	uxth	r3, r3
 8009422:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8009424:	887b      	ldrh	r3, [r7, #2]
 8009426:	3b01      	subs	r3, #1
 8009428:	807b      	strh	r3, [r7, #2]
 800942a:	887b      	ldrh	r3, [r7, #2]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1d8      	bne.n	80093e2 <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8009430:	883b      	ldrh	r3, [r7, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b298      	uxth	r0, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	885b      	ldrh	r3, [r3, #2]
 8009440:	b299      	uxth	r1, r3
 8009442:	89fa      	ldrh	r2, [r7, #14]
 8009444:	89bb      	ldrh	r3, [r7, #12]
 8009446:	f7ff fde5 	bl	8009014 <LCD_DrawUniLine>
  }  
}
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}

08009450 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 800945c:	887b      	ldrh	r3, [r7, #2]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4619      	mov	r1, r3
 8009462:	f7ff ff79 	bl	8009358 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b298      	uxth	r0, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	885b      	ldrh	r3, [r3, #2]
 8009470:	b299      	uxth	r1, r3
 8009472:	887b      	ldrh	r3, [r7, #2]
 8009474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009478:	3b01      	subs	r3, #1
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29a      	uxth	r2, r3
 8009484:	887b      	ldrh	r3, [r7, #2]
 8009486:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800948a:	3b01      	subs	r3, #1
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	687c      	ldr	r4, [r7, #4]
 8009490:	4423      	add	r3, r4
 8009492:	885b      	ldrh	r3, [r3, #2]
 8009494:	b29b      	uxth	r3, r3
 8009496:	f7ff fdbd 	bl	8009014 <LCD_DrawUniLine>
}
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	bd90      	pop	{r4, r7, pc}

080094a0 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 80094ac:	887b      	ldrh	r3, [r7, #2]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2200      	movs	r2, #0
 80094b4:	f7ff ff7c 	bl	80093b0 <LCD_PolyLineRelativeClosed>
}
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop

080094c0 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 80094cc:	887b      	ldrh	r3, [r7, #2]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4619      	mov	r1, r3
 80094d2:	2201      	movs	r2, #1
 80094d4:	f7ff ff6c 	bl	80093b0 <LCD_PolyLineRelativeClosed>
}
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop

080094e0 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b08c      	sub	sp, #48	; 0x30
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	833b      	strh	r3, [r7, #24]
 80094f0:	2300      	movs	r3, #0
 80094f2:	82fb      	strh	r3, [r7, #22]
 80094f4:	2300      	movs	r3, #0
 80094f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80094f8:	2300      	movs	r3, #0
 80094fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80094fc:	2300      	movs	r3, #0
 80094fe:	82bb      	strh	r3, [r7, #20]
 8009500:	2300      	movs	r3, #0
 8009502:	827b      	strh	r3, [r7, #18]
 8009504:	2300      	movs	r3, #0
 8009506:	823b      	strh	r3, [r7, #16]
 8009508:	2300      	movs	r3, #0
 800950a:	81fb      	strh	r3, [r7, #14]
 800950c:	2300      	movs	r3, #0
 800950e:	81bb      	strh	r3, [r7, #12]
 8009510:	2300      	movs	r3, #0
 8009512:	817b      	strh	r3, [r7, #10]
 8009514:	2300      	movs	r3, #0
 8009516:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8009518:	2300      	movs	r3, #0
 800951a:	843b      	strh	r3, [r7, #32]
 800951c:	2300      	movs	r3, #0
 800951e:	83fb      	strh	r3, [r7, #30]
 8009520:	2300      	movs	r3, #0
 8009522:	83bb      	strh	r3, [r7, #28]
 8009524:	2300      	movs	r3, #0
 8009526:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	83fb      	strh	r3, [r7, #30]
 800952e:	8bfb      	ldrh	r3, [r7, #30]
 8009530:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	885b      	ldrh	r3, [r3, #2]
 8009536:	837b      	strh	r3, [r7, #26]
 8009538:	8b7b      	ldrh	r3, [r7, #26]
 800953a:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 800953c:	2301      	movs	r3, #1
 800953e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009540:	e02c      	b.n	800959c <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 8009542:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4413      	add	r3, r2
 800954c:	885b      	ldrh	r3, [r3, #2]
 800954e:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8009550:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009554:	8c3b      	ldrh	r3, [r7, #32]
 8009556:	429a      	cmp	r2, r3
 8009558:	da01      	bge.n	800955e <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 800955a:	89bb      	ldrh	r3, [r7, #12]
 800955c:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 800955e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009562:	8bfb      	ldrh	r3, [r7, #30]
 8009564:	429a      	cmp	r2, r3
 8009566:	dd01      	ble.n	800956c <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 8009568:	89bb      	ldrh	r3, [r7, #12]
 800956a:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 800956c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 800957a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800957e:	8bbb      	ldrh	r3, [r7, #28]
 8009580:	429a      	cmp	r2, r3
 8009582:	da01      	bge.n	8009588 <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 8009584:	897b      	ldrh	r3, [r7, #10]
 8009586:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 8009588:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800958c:	8b7b      	ldrh	r3, [r7, #26]
 800958e:	429a      	cmp	r2, r3
 8009590:	dd01      	ble.n	8009596 <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 8009592:	897b      	ldrh	r3, [r7, #10]
 8009594:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 8009596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009598:	3301      	adds	r3, #1
 800959a:	847b      	strh	r3, [r7, #34]	; 0x22
 800959c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80095a0:	887b      	ldrh	r3, [r7, #2]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	dbcd      	blt.n	8009542 <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 80095a6:	887b      	ldrh	r3, [r7, #2]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d800      	bhi.n	80095ae <LCD_FillPolyLine+0xce>
  {
    return;
 80095ac:	e065      	b.n	800967a <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 80095ae:	8c3a      	ldrh	r2, [r7, #32]
 80095b0:	8bfb      	ldrh	r3, [r7, #30]
 80095b2:	4413      	add	r3, r2
 80095b4:	0fda      	lsrs	r2, r3, #31
 80095b6:	4413      	add	r3, r2
 80095b8:	105b      	asrs	r3, r3, #1
 80095ba:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 80095bc:	8b7a      	ldrh	r2, [r7, #26]
 80095be:	8bbb      	ldrh	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	0fda      	lsrs	r2, r3, #31
 80095c4:	4413      	add	r3, r2
 80095c6:	105b      	asrs	r3, r3, #1
 80095c8:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 80095d6:	e02c      	b.n	8009632 <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	82fb      	strh	r3, [r7, #22]
    Points++;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	885b      	ldrh	r3, [r3, #2]
 80095f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80095f6:	8b38      	ldrh	r0, [r7, #24]
 80095f8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80095fa:	8aba      	ldrh	r2, [r7, #20]
 80095fc:	8afb      	ldrh	r3, [r7, #22]
 80095fe:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009600:	8a7c      	ldrh	r4, [r7, #18]
 8009602:	9500      	str	r5, [sp, #0]
 8009604:	9401      	str	r4, [sp, #4]
 8009606:	f7ff fdf5 	bl	80091f4 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 800960a:	8b38      	ldrh	r0, [r7, #24]
 800960c:	8ab9      	ldrh	r1, [r7, #20]
 800960e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009610:	8afb      	ldrh	r3, [r7, #22]
 8009612:	8a7d      	ldrh	r5, [r7, #18]
 8009614:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8009616:	9500      	str	r5, [sp, #0]
 8009618:	9401      	str	r4, [sp, #4]
 800961a:	f7ff fdeb 	bl	80091f4 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800961e:	8ab8      	ldrh	r0, [r7, #20]
 8009620:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009622:	8b3a      	ldrh	r2, [r7, #24]
 8009624:	8a7b      	ldrh	r3, [r7, #18]
 8009626:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009628:	8afc      	ldrh	r4, [r7, #22]
 800962a:	9500      	str	r5, [sp, #0]
 800962c:	9401      	str	r4, [sp, #4]
 800962e:	f7ff fde1 	bl	80091f4 <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 8009632:	887b      	ldrh	r3, [r7, #2]
 8009634:	3b01      	subs	r3, #1
 8009636:	807b      	strh	r3, [r7, #2]
 8009638:	887b      	ldrh	r3, [r7, #2]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1cc      	bne.n	80095d8 <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800963e:	8a38      	ldrh	r0, [r7, #16]
 8009640:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009642:	8aba      	ldrh	r2, [r7, #20]
 8009644:	89fb      	ldrh	r3, [r7, #14]
 8009646:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009648:	8a7c      	ldrh	r4, [r7, #18]
 800964a:	9500      	str	r5, [sp, #0]
 800964c:	9401      	str	r4, [sp, #4]
 800964e:	f7ff fdd1 	bl	80091f4 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8009652:	8a38      	ldrh	r0, [r7, #16]
 8009654:	8ab9      	ldrh	r1, [r7, #20]
 8009656:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009658:	89fb      	ldrh	r3, [r7, #14]
 800965a:	8a7d      	ldrh	r5, [r7, #18]
 800965c:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 800965e:	9500      	str	r5, [sp, #0]
 8009660:	9401      	str	r4, [sp, #4]
 8009662:	f7ff fdc7 	bl	80091f4 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 8009666:	8ab8      	ldrh	r0, [r7, #20]
 8009668:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800966a:	8a3a      	ldrh	r2, [r7, #16]
 800966c:	8a7b      	ldrh	r3, [r7, #18]
 800966e:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8009670:	89fc      	ldrh	r4, [r7, #14]
 8009672:	9500      	str	r5, [sp, #0]
 8009674:	9401      	str	r4, [sp, #4]
 8009676:	f7ff fdbd 	bl	80091f4 <LCD_FillTriangle>
}
 800967a:	3728      	adds	r7, #40	; 0x28
 800967c:	46bd      	mov	sp, r7
 800967e:	bdb0      	pop	{r4, r5, r7, pc}

08009680 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 800968a:	4812      	ldr	r0, [pc, #72]	; (80096d4 <LCD_WriteCommand+0x54>)
 800968c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009690:	2200      	movs	r2, #0
 8009692:	f000 f9cf 	bl	8009a34 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 8009696:	2000      	movs	r0, #0
 8009698:	f7fe fbbe 	bl	8007e18 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	480d      	ldr	r0, [pc, #52]	; (80096d8 <LCD_WriteCommand+0x58>)
 80096a2:	4619      	mov	r1, r3
 80096a4:	f7fb f912 	bl	80048cc <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80096a8:	bf00      	nop
 80096aa:	480b      	ldr	r0, [pc, #44]	; (80096d8 <LCD_WriteCommand+0x58>)
 80096ac:	2102      	movs	r1, #2
 80096ae:	f7fb f9c9 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0f8      	beq.n	80096aa <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80096b8:	bf00      	nop
 80096ba:	4807      	ldr	r0, [pc, #28]	; (80096d8 <LCD_WriteCommand+0x58>)
 80096bc:	2180      	movs	r1, #128	; 0x80
 80096be:	f7fb f9c1 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f8      	bne.n	80096ba <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80096c8:	2001      	movs	r0, #1
 80096ca:	f7fe fba5 	bl	8007e18 <LCD_ChipSelect>
}
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40020c00 	andmi	r0, r2, r0, lsl #24
 80096d8:	40015000 	andmi	r5, r1, r0

080096dc <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 80096e6:	4812      	ldr	r0, [pc, #72]	; (8009730 <LCD_WriteData+0x54>)
 80096e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096ec:	2201      	movs	r2, #1
 80096ee:	f000 f9a1 	bl	8009a34 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80096f2:	2000      	movs	r0, #0
 80096f4:	f7fe fb90 	bl	8007e18 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	480d      	ldr	r0, [pc, #52]	; (8009734 <LCD_WriteData+0x58>)
 80096fe:	4619      	mov	r1, r3
 8009700:	f7fb f8e4 	bl	80048cc <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8009704:	bf00      	nop
 8009706:	480b      	ldr	r0, [pc, #44]	; (8009734 <LCD_WriteData+0x58>)
 8009708:	2102      	movs	r1, #2
 800970a:	f7fb f99b 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0f8      	beq.n	8009706 <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8009714:	bf00      	nop
 8009716:	4807      	ldr	r0, [pc, #28]	; (8009734 <LCD_WriteData+0x58>)
 8009718:	2180      	movs	r1, #128	; 0x80
 800971a:	f7fb f993 	bl	8004a44 <SPI_I2S_GetFlagStatus>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f8      	bne.n	8009716 <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8009724:	2001      	movs	r0, #1
 8009726:	f7fe fb77 	bl	8007e18 <LCD_ChipSelect>
}
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	40020c00 	andmi	r0, r2, r0, lsl #24
 8009734:	40015000 	andmi	r5, r1, r0

08009738 <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 800973c:	20ca      	movs	r0, #202	; 0xca
 800973e:	f7ff ff9f 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8009742:	20c3      	movs	r0, #195	; 0xc3
 8009744:	f7ff ffca 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x08);
 8009748:	2008      	movs	r0, #8
 800974a:	f7ff ffc7 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x50);
 800974e:	2050      	movs	r0, #80	; 0x50
 8009750:	f7ff ffc4 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8009754:	20cf      	movs	r0, #207	; 0xcf
 8009756:	f7ff ff93 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800975a:	2000      	movs	r0, #0
 800975c:	f7ff ffbe 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0xC1);
 8009760:	20c1      	movs	r0, #193	; 0xc1
 8009762:	f7ff ffbb 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x30);
 8009766:	2030      	movs	r0, #48	; 0x30
 8009768:	f7ff ffb8 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 800976c:	20ed      	movs	r0, #237	; 0xed
 800976e:	f7ff ff87 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8009772:	2064      	movs	r0, #100	; 0x64
 8009774:	f7ff ffb2 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x03);
 8009778:	2003      	movs	r0, #3
 800977a:	f7ff ffaf 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x12);
 800977e:	2012      	movs	r0, #18
 8009780:	f7ff ffac 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x81);
 8009784:	2081      	movs	r0, #129	; 0x81
 8009786:	f7ff ffa9 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 800978a:	20e8      	movs	r0, #232	; 0xe8
 800978c:	f7ff ff78 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8009790:	2085      	movs	r0, #133	; 0x85
 8009792:	f7ff ffa3 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 8009796:	2000      	movs	r0, #0
 8009798:	f7ff ffa0 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x78);
 800979c:	2078      	movs	r0, #120	; 0x78
 800979e:	f7ff ff9d 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80097a2:	20cb      	movs	r0, #203	; 0xcb
 80097a4:	f7ff ff6c 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80097a8:	2039      	movs	r0, #57	; 0x39
 80097aa:	f7ff ff97 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x2C);
 80097ae:	202c      	movs	r0, #44	; 0x2c
 80097b0:	f7ff ff94 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 80097b4:	2000      	movs	r0, #0
 80097b6:	f7ff ff91 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x34);
 80097ba:	2034      	movs	r0, #52	; 0x34
 80097bc:	f7ff ff8e 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x02);
 80097c0:	2002      	movs	r0, #2
 80097c2:	f7ff ff8b 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80097c6:	20f7      	movs	r0, #247	; 0xf7
 80097c8:	f7ff ff5a 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80097cc:	2020      	movs	r0, #32
 80097ce:	f7ff ff85 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80097d2:	20ea      	movs	r0, #234	; 0xea
 80097d4:	f7ff ff54 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80097d8:	2000      	movs	r0, #0
 80097da:	f7ff ff7f 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 80097de:	2000      	movs	r0, #0
 80097e0:	f7ff ff7c 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 80097e4:	20b1      	movs	r0, #177	; 0xb1
 80097e6:	f7ff ff4b 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80097ea:	2000      	movs	r0, #0
 80097ec:	f7ff ff76 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x1B);
 80097f0:	201b      	movs	r0, #27
 80097f2:	f7ff ff73 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80097f6:	20b6      	movs	r0, #182	; 0xb6
 80097f8:	f7ff ff42 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80097fc:	200a      	movs	r0, #10
 80097fe:	f7ff ff6d 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0xA2);
 8009802:	20a2      	movs	r0, #162	; 0xa2
 8009804:	f7ff ff6a 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8009808:	20c0      	movs	r0, #192	; 0xc0
 800980a:	f7ff ff39 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800980e:	2010      	movs	r0, #16
 8009810:	f7ff ff64 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8009814:	20c1      	movs	r0, #193	; 0xc1
 8009816:	f7ff ff33 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800981a:	2010      	movs	r0, #16
 800981c:	f7ff ff5e 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8009820:	20c5      	movs	r0, #197	; 0xc5
 8009822:	f7ff ff2d 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8009826:	2045      	movs	r0, #69	; 0x45
 8009828:	f7ff ff58 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x15);
 800982c:	2015      	movs	r0, #21
 800982e:	f7ff ff55 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8009832:	20c7      	movs	r0, #199	; 0xc7
 8009834:	f7ff ff24 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8009838:	2090      	movs	r0, #144	; 0x90
 800983a:	f7ff ff4f 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 800983e:	2036      	movs	r0, #54	; 0x36
 8009840:	f7ff ff1e 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8009844:	20c8      	movs	r0, #200	; 0xc8
 8009846:	f7ff ff49 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 800984a:	20f2      	movs	r0, #242	; 0xf2
 800984c:	f7ff ff18 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009850:	2000      	movs	r0, #0
 8009852:	f7ff ff43 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8009856:	20b0      	movs	r0, #176	; 0xb0
 8009858:	f7ff ff12 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 800985c:	20c2      	movs	r0, #194	; 0xc2
 800985e:	f7ff ff3d 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8009862:	20b6      	movs	r0, #182	; 0xb6
 8009864:	f7ff ff0c 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8009868:	200a      	movs	r0, #10
 800986a:	f7ff ff37 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0xA7);
 800986e:	20a7      	movs	r0, #167	; 0xa7
 8009870:	f7ff ff34 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x27);
 8009874:	2027      	movs	r0, #39	; 0x27
 8009876:	f7ff ff31 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x04);
 800987a:	2004      	movs	r0, #4
 800987c:	f7ff ff2e 	bl	80096dc <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8009880:	202a      	movs	r0, #42	; 0x2a
 8009882:	f7ff fefd 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009886:	2000      	movs	r0, #0
 8009888:	f7ff ff28 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 800988c:	2000      	movs	r0, #0
 800988e:	f7ff ff25 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 8009892:	2000      	movs	r0, #0
 8009894:	f7ff ff22 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0xEF);
 8009898:	20ef      	movs	r0, #239	; 0xef
 800989a:	f7ff ff1f 	bl	80096dc <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 800989e:	202b      	movs	r0, #43	; 0x2b
 80098a0:	f7ff feee 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7ff ff19 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 80098aa:	2000      	movs	r0, #0
 80098ac:	f7ff ff16 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x01);
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7ff ff13 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x3F);
 80098b6:	203f      	movs	r0, #63	; 0x3f
 80098b8:	f7ff ff10 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80098bc:	20f6      	movs	r0, #246	; 0xf6
 80098be:	f7ff fedf 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80098c2:	2001      	movs	r0, #1
 80098c4:	f7ff ff0a 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 80098c8:	2000      	movs	r0, #0
 80098ca:	f7ff ff07 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x06);
 80098ce:	2006      	movs	r0, #6
 80098d0:	f7ff ff04 	bl	80096dc <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80098d4:	202c      	movs	r0, #44	; 0x2c
 80098d6:	f7ff fed3 	bl	8009680 <LCD_WriteCommand>
  delay(200);
 80098da:	20c8      	movs	r0, #200	; 0xc8
 80098dc:	f000 fa06 	bl	8009cec <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 80098e0:	2026      	movs	r0, #38	; 0x26
 80098e2:	f7ff fecd 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80098e6:	2001      	movs	r0, #1
 80098e8:	f7ff fef8 	bl	80096dc <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80098ec:	20e0      	movs	r0, #224	; 0xe0
 80098ee:	f7ff fec7 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80098f2:	200f      	movs	r0, #15
 80098f4:	f7ff fef2 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x29);
 80098f8:	2029      	movs	r0, #41	; 0x29
 80098fa:	f7ff feef 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x24);
 80098fe:	2024      	movs	r0, #36	; 0x24
 8009900:	f7ff feec 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x0C);
 8009904:	200c      	movs	r0, #12
 8009906:	f7ff fee9 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x0E);
 800990a:	200e      	movs	r0, #14
 800990c:	f7ff fee6 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x09);
 8009910:	2009      	movs	r0, #9
 8009912:	f7ff fee3 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x4E);
 8009916:	204e      	movs	r0, #78	; 0x4e
 8009918:	f7ff fee0 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x78);
 800991c:	2078      	movs	r0, #120	; 0x78
 800991e:	f7ff fedd 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x3C);
 8009922:	203c      	movs	r0, #60	; 0x3c
 8009924:	f7ff feda 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x09);
 8009928:	2009      	movs	r0, #9
 800992a:	f7ff fed7 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x13);
 800992e:	2013      	movs	r0, #19
 8009930:	f7ff fed4 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x05);
 8009934:	2005      	movs	r0, #5
 8009936:	f7ff fed1 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x17);
 800993a:	2017      	movs	r0, #23
 800993c:	f7ff fece 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x11);
 8009940:	2011      	movs	r0, #17
 8009942:	f7ff fecb 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x00);
 8009946:	2000      	movs	r0, #0
 8009948:	f7ff fec8 	bl	80096dc <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 800994c:	20e1      	movs	r0, #225	; 0xe1
 800994e:	f7ff fe97 	bl	8009680 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8009952:	2000      	movs	r0, #0
 8009954:	f7ff fec2 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x16);
 8009958:	2016      	movs	r0, #22
 800995a:	f7ff febf 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x1B);
 800995e:	201b      	movs	r0, #27
 8009960:	f7ff febc 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x04);
 8009964:	2004      	movs	r0, #4
 8009966:	f7ff feb9 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x11);
 800996a:	2011      	movs	r0, #17
 800996c:	f7ff feb6 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x07);
 8009970:	2007      	movs	r0, #7
 8009972:	f7ff feb3 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x31);
 8009976:	2031      	movs	r0, #49	; 0x31
 8009978:	f7ff feb0 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x33);
 800997c:	2033      	movs	r0, #51	; 0x33
 800997e:	f7ff fead 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x42);
 8009982:	2042      	movs	r0, #66	; 0x42
 8009984:	f7ff feaa 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x05);
 8009988:	2005      	movs	r0, #5
 800998a:	f7ff fea7 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x0C);
 800998e:	200c      	movs	r0, #12
 8009990:	f7ff fea4 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x0A);
 8009994:	200a      	movs	r0, #10
 8009996:	f7ff fea1 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x28);
 800999a:	2028      	movs	r0, #40	; 0x28
 800999c:	f7ff fe9e 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x2F);
 80099a0:	202f      	movs	r0, #47	; 0x2f
 80099a2:	f7ff fe9b 	bl	80096dc <LCD_WriteData>
  LCD_WriteData(0x0F);
 80099a6:	200f      	movs	r0, #15
 80099a8:	f7ff fe98 	bl	80096dc <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 80099ac:	2011      	movs	r0, #17
 80099ae:	f7ff fe67 	bl	8009680 <LCD_WriteCommand>
  delay(200);
 80099b2:	20c8      	movs	r0, #200	; 0xc8
 80099b4:	f000 f99a 	bl	8009cec <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80099b8:	2029      	movs	r0, #41	; 0x29
 80099ba:	f7ff fe61 	bl	8009680 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 80099be:	202c      	movs	r0, #44	; 0x2c
 80099c0:	f7ff fe5e 	bl	8009680 <LCD_WriteCommand>
 }
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop

080099c8 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80099cc:	2029      	movs	r0, #41	; 0x29
 80099ce:	f7ff fe57 	bl	8009680 <LCD_WriteCommand>
}
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 80099d8:	2028      	movs	r0, #40	; 0x28
 80099da:	f7ff fe51 	bl	8009680 <LCD_WriteCommand>
}
 80099de:	bd80      	pop	{r7, pc}

080099e0 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 80099e6:	200c      	movs	r0, #12
 80099e8:	2101      	movs	r1, #1
 80099ea:	f7f8 fc39 	bl	8002260 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80099ee:	2304      	movs	r3, #4
 80099f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80099f2:	2302      	movs	r3, #2
 80099f4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80099f6:	2301      	movs	r3, #1
 80099f8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80099fa:	2300      	movs	r3, #0
 80099fc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8009a02:	463b      	mov	r3, r7
 8009a04:	4809      	ldr	r0, [pc, #36]	; (8009a2c <LCD_CtrlLinesConfig+0x4c>)
 8009a06:	4619      	mov	r1, r3
 8009a08:	f7f7 feb0 	bl	800176c <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8009a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a10:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8009a12:	463b      	mov	r3, r7
 8009a14:	4806      	ldr	r0, [pc, #24]	; (8009a30 <LCD_CtrlLinesConfig+0x50>)
 8009a16:	4619      	mov	r1, r3
 8009a18:	f7f7 fea8 	bl	800176c <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8009a1c:	4803      	ldr	r0, [pc, #12]	; (8009a2c <LCD_CtrlLinesConfig+0x4c>)
 8009a1e:	2104      	movs	r1, #4
 8009a20:	2201      	movs	r2, #1
 8009a22:	f000 f807 	bl	8009a34 <LCD_CtrlLinesWrite>
}
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40020800 	andmi	r0, r2, r0, lsl #16
 8009a30:	40020c00 	andmi	r0, r2, r0, lsl #24

08009a34 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	460a      	mov	r2, r1
 8009a40:	807a      	strh	r2, [r7, #2]
 8009a42:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8009a44:	887a      	ldrh	r2, [r7, #2]
 8009a46:	787b      	ldrb	r3, [r7, #1]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f7f7 ffc3 	bl	80019d8 <GPIO_WriteBit>
}
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8009a5e:	2020      	movs	r0, #32
 8009a60:	2101      	movs	r1, #1
 8009a62:	f7f8 fbfd 	bl	8002260 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8009a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	f7f8 fc70 	bl	8002350 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8009a70:	2380      	movs	r3, #128	; 0x80
 8009a72:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8009a74:	2301      	movs	r3, #1
 8009a76:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8009a80:	2302      	movs	r3, #2
 8009a82:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8009a84:	1d3b      	adds	r3, r7, #4
 8009a86:	4827      	ldr	r0, [pc, #156]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7f7 fe6f 	bl	800176c <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8009a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a92:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8009a94:	1d3b      	adds	r3, r7, #4
 8009a96:	4823      	ldr	r0, [pc, #140]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f7f7 fe67 	bl	800176c <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8009a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa2:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8009aa4:	1d3b      	adds	r3, r7, #4
 8009aa6:	481f      	ldr	r0, [pc, #124]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f7f7 fe5f 	bl	800176c <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8009aae:	481d      	ldr	r0, [pc, #116]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009ab0:	2107      	movs	r1, #7
 8009ab2:	2205      	movs	r2, #5
 8009ab4:	f7f7 ffc8 	bl	8001a48 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8009ab8:	481a      	ldr	r0, [pc, #104]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009aba:	2108      	movs	r1, #8
 8009abc:	2205      	movs	r2, #5
 8009abe:	f7f7 ffc3 	bl	8001a48 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8009ac2:	4818      	ldr	r0, [pc, #96]	; (8009b24 <LCD_SPIConfig+0xcc>)
 8009ac4:	2109      	movs	r1, #9
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	f7f7 ffbe 	bl	8001a48 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8009acc:	4816      	ldr	r0, [pc, #88]	; (8009b28 <LCD_SPIConfig+0xd0>)
 8009ace:	f7fa fbfb 	bl	80042c8 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 8009ad2:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <LCD_SPIConfig+0xd0>)
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11d      	bne.n	8009b1c <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8009ae4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ae8:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8009aea:	2300      	movs	r3, #0
 8009aec:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8009aee:	2300      	movs	r3, #0
 8009af0:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8009af2:	2300      	movs	r3, #0
 8009af4:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8009af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009afa:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8009afc:	2318      	movs	r3, #24
 8009afe:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8009b00:	2300      	movs	r3, #0
 8009b02:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8009b04:	2307      	movs	r3, #7
 8009b06:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4806      	ldr	r0, [pc, #24]	; (8009b28 <LCD_SPIConfig+0xd0>)
 8009b0e:	4619      	mov	r1, r3
 8009b10:	f7fa fc46 	bl	80043a0 <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 8009b14:	4804      	ldr	r0, [pc, #16]	; (8009b28 <LCD_SPIConfig+0xd0>)
 8009b16:	2101      	movs	r1, #1
 8009b18:	f7fa fd9e 	bl	8004658 <SPI_Cmd>
  }
}
 8009b1c:	3720      	adds	r7, #32
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	40021400 	andmi	r1, r2, r0, lsl #8
 8009b28:	40015000 	andmi	r5, r1, r0

08009b2c <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8009b32:	206f      	movs	r0, #111	; 0x6f
 8009b34:	2101      	movs	r1, #1
 8009b36:	f7f8 fb93 	bl	8002260 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8009b3a:	4854      	ldr	r0, [pc, #336]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b3c:	2103      	movs	r1, #3
 8009b3e:	220e      	movs	r2, #14
 8009b40:	f7f7 ff82 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8009b44:	4851      	ldr	r0, [pc, #324]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b46:	2104      	movs	r1, #4
 8009b48:	220e      	movs	r2, #14
 8009b4a:	f7f7 ff7d 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8009b4e:	484f      	ldr	r0, [pc, #316]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b50:	2106      	movs	r1, #6
 8009b52:	220e      	movs	r2, #14
 8009b54:	f7f7 ff78 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8009b58:	484c      	ldr	r0, [pc, #304]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b5a:	210b      	movs	r1, #11
 8009b5c:	220e      	movs	r2, #14
 8009b5e:	f7f7 ff73 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8009b62:	484a      	ldr	r0, [pc, #296]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b64:	210c      	movs	r1, #12
 8009b66:	220e      	movs	r2, #14
 8009b68:	f7f7 ff6e 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8009b6c:	f641 0358 	movw	r3, #6232	; 0x1858
 8009b70:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8009b72:	2302      	movs	r3, #2
 8009b74:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8009b76:	2302      	movs	r3, #2
 8009b78:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b82:	463b      	mov	r3, r7
 8009b84:	4841      	ldr	r0, [pc, #260]	; (8009c8c <LCD_AF_GPIOConfig+0x160>)
 8009b86:	4619      	mov	r1, r3
 8009b88:	f7f7 fdf0 	bl	800176c <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8009b8c:	4840      	ldr	r0, [pc, #256]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009b8e:	2100      	movs	r1, #0
 8009b90:	2209      	movs	r2, #9
 8009b92:	f7f7 ff59 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8009b96:	483e      	ldr	r0, [pc, #248]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009b98:	2101      	movs	r1, #1
 8009b9a:	2209      	movs	r2, #9
 8009b9c:	f7f7 ff54 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8009ba0:	483b      	ldr	r0, [pc, #236]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009ba2:	2108      	movs	r1, #8
 8009ba4:	220e      	movs	r2, #14
 8009ba6:	f7f7 ff4f 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8009baa:	4839      	ldr	r0, [pc, #228]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009bac:	2109      	movs	r1, #9
 8009bae:	220e      	movs	r2, #14
 8009bb0:	f7f7 ff4a 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8009bb4:	4836      	ldr	r0, [pc, #216]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009bb6:	210a      	movs	r1, #10
 8009bb8:	220e      	movs	r2, #14
 8009bba:	f7f7 ff45 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8009bbe:	4834      	ldr	r0, [pc, #208]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009bc0:	210b      	movs	r1, #11
 8009bc2:	220e      	movs	r2, #14
 8009bc4:	f7f7 ff40 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8009bc8:	f640 7303 	movw	r3, #3843	; 0xf03
 8009bcc:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bce:	463b      	mov	r3, r7
 8009bd0:	482f      	ldr	r0, [pc, #188]	; (8009c90 <LCD_AF_GPIOConfig+0x164>)
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f7f7 fdca 	bl	800176c <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8009bd8:	482e      	ldr	r0, [pc, #184]	; (8009c94 <LCD_AF_GPIOConfig+0x168>)
 8009bda:	2106      	movs	r1, #6
 8009bdc:	220e      	movs	r2, #14
 8009bde:	f7f7 ff33 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8009be2:	482c      	ldr	r0, [pc, #176]	; (8009c94 <LCD_AF_GPIOConfig+0x168>)
 8009be4:	2107      	movs	r1, #7
 8009be6:	220e      	movs	r2, #14
 8009be8:	f7f7 ff2e 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8009bec:	4829      	ldr	r0, [pc, #164]	; (8009c94 <LCD_AF_GPIOConfig+0x168>)
 8009bee:	210a      	movs	r1, #10
 8009bf0:	220e      	movs	r2, #14
 8009bf2:	f7f7 ff29 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8009bf6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8009bfa:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	4825      	ldr	r0, [pc, #148]	; (8009c94 <LCD_AF_GPIOConfig+0x168>)
 8009c00:	4619      	mov	r1, r3
 8009c02:	f7f7 fdb3 	bl	800176c <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8009c06:	4824      	ldr	r0, [pc, #144]	; (8009c98 <LCD_AF_GPIOConfig+0x16c>)
 8009c08:	2103      	movs	r1, #3
 8009c0a:	220e      	movs	r2, #14
 8009c0c:	f7f7 ff1c 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8009c10:	4821      	ldr	r0, [pc, #132]	; (8009c98 <LCD_AF_GPIOConfig+0x16c>)
 8009c12:	2106      	movs	r1, #6
 8009c14:	220e      	movs	r2, #14
 8009c16:	f7f7 ff17 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8009c1a:	2348      	movs	r3, #72	; 0x48
 8009c1c:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c1e:	463b      	mov	r3, r7
 8009c20:	481d      	ldr	r0, [pc, #116]	; (8009c98 <LCD_AF_GPIOConfig+0x16c>)
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7f7 fda2 	bl	800176c <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8009c28:	481c      	ldr	r0, [pc, #112]	; (8009c9c <LCD_AF_GPIOConfig+0x170>)
 8009c2a:	210a      	movs	r1, #10
 8009c2c:	220e      	movs	r2, #14
 8009c2e:	f7f7 ff0b 	bl	8001a48 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8009c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c36:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8009c38:	463b      	mov	r3, r7
 8009c3a:	4818      	ldr	r0, [pc, #96]	; (8009c9c <LCD_AF_GPIOConfig+0x170>)
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f7f7 fd95 	bl	800176c <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8009c42:	4817      	ldr	r0, [pc, #92]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c44:	2106      	movs	r1, #6
 8009c46:	220e      	movs	r2, #14
 8009c48:	f7f7 fefe 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8009c4c:	4814      	ldr	r0, [pc, #80]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c4e:	2107      	movs	r1, #7
 8009c50:	220e      	movs	r2, #14
 8009c52:	f7f7 fef9 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8009c56:	4812      	ldr	r0, [pc, #72]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c58:	210a      	movs	r1, #10
 8009c5a:	2209      	movs	r2, #9
 8009c5c:	f7f7 fef4 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8009c60:	480f      	ldr	r0, [pc, #60]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c62:	210b      	movs	r1, #11
 8009c64:	220e      	movs	r2, #14
 8009c66:	f7f7 feef 	bl	8001a48 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8009c6a:	480d      	ldr	r0, [pc, #52]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c6c:	210c      	movs	r1, #12
 8009c6e:	2209      	movs	r2, #9
 8009c70:	f7f7 feea 	bl	8001a48 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8009c74:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8009c78:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	4808      	ldr	r0, [pc, #32]	; (8009ca0 <LCD_AF_GPIOConfig+0x174>)
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f7f7 fd74 	bl	800176c <GPIO_Init>
 
}
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40020000 	andmi	r0, r2, r0
 8009c90:	40020400 	andmi	r0, r2, r0, lsl #8
 8009c94:	40020800 	andmi	r0, r2, r0, lsl #16
 8009c98:	40020c00 	andmi	r0, r2, r0, lsl #24
 8009c9c:	40021400 	andmi	r1, r2, r0, lsl #8
 8009ca0:	40021800 	andmi	r1, r2, r0, lsl #16

08009ca4 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	80fa      	strh	r2, [r7, #6]
 8009cb0:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8009cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	db0c      	blt.n	8009cd4 <PutPixel+0x30>
 8009cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cbe:	2bef      	cmp	r3, #239	; 0xef
 8009cc0:	dc08      	bgt.n	8009cd4 <PutPixel+0x30>
 8009cc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	db04      	blt.n	8009cd4 <PutPixel+0x30>
 8009cca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009cce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009cd2:	db00      	blt.n	8009cd6 <PutPixel+0x32>
  {
    return;  
 8009cd4:	e007      	b.n	8009ce6 <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 8009cd6:	88fa      	ldrh	r2, [r7, #6]
 8009cd8:	88bb      	ldrh	r3, [r7, #4]
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	2201      	movs	r2, #1
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f7fe fb49 	bl	8008378 <LCD_DrawLine>
}
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e002      	b.n	8009d04 <delay+0x18>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1f9      	bne.n	8009cfe <delay+0x12>
  {
  }
}
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 8009d18:	f000 fcfa 	bl	800a710 <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 8009d1c:	f000 fd3e 	bl	800a79c <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 8009d20:	f000 f8ae 	bl	8009e80 <IOE_IsOperational>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 8009d2a:	2304      	movs	r3, #4
 8009d2c:	e008      	b.n	8009d40 <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 8009d2e:	f000 f8c1 	bl	8009eb4 <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 8009d32:	2001      	movs	r0, #1
 8009d34:	2101      	movs	r1, #1
 8009d36:	f000 f8e7 	bl	8009f08 <IOE_FnctCmd>
  IOE_TP_Config();
 8009d3a:	f000 f957 	bl	8009fec <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <IOE_TPITConfig>:
  * @brief  Enables the touch Panel interrupt.
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_TPITConfig(void)
{    
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Enable the Global interrupt */  
  IOE_GITCmd(ENABLE);     
 8009d48:	2001      	movs	r0, #1
 8009d4a:	f000 f905 	bl	8009f58 <IOE_GITCmd>
          
  /* Enable the Global GPIO Interrupt */
  IOE_GITConfig((uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 8009d4e:	2007      	movs	r0, #7
 8009d50:	2101      	movs	r1, #1
 8009d52:	f000 f923 	bl	8009f9c <IOE_GITConfig>
    
  /* Read the GPIO_IT_STA to clear all pending bits if any */
  I2C_ReadDeviceRegister(IOE_REG_GPIO_INT_STA); 
 8009d56:	200d      	movs	r0, #13
 8009d58:	f000 fe4a 	bl	800a9f0 <I2C_ReadDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop

08009d64 <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 8009d6a:	2040      	movs	r0, #64	; 0x40
 8009d6c:	f000 fe40 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	4b29      	ldr	r3, [pc, #164]	; (8009e20 <IOE_TP_GetState+0xbc>)
 8009d7a:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 8009d7c:	4b28      	ldr	r3, [pc, #160]	; (8009e20 <IOE_TP_GetState+0xbc>)
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d030      	beq.n	8009de6 <IOE_TP_GetState+0x82>
  {
    x = IOE_TP_Read_X();
 8009d84:	f000 fc52 	bl	800a62c <IOE_TP_Read_X>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 8009d8c:	f000 fc82 	bl	800a694 <IOE_TP_Read_Y>
 8009d90:	4603      	mov	r3, r0
 8009d92:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 8009d94:	4b23      	ldr	r3, [pc, #140]	; (8009e24 <IOE_TP_GetState+0xc0>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d904      	bls.n	8009da8 <IOE_TP_GetState+0x44>
 8009d9e:	4b21      	ldr	r3, [pc, #132]	; (8009e24 <IOE_TP_GetState+0xc0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	e003      	b.n	8009db0 <IOE_TP_GetState+0x4c>
 8009da8:	4b1e      	ldr	r3, [pc, #120]	; (8009e24 <IOE_TP_GetState+0xc0>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 8009db2:	4b1d      	ldr	r3, [pc, #116]	; (8009e28 <IOE_TP_GetState+0xc4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d904      	bls.n	8009dc6 <IOE_TP_GetState+0x62>
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <IOE_TP_GetState+0xc4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	e003      	b.n	8009dce <IOE_TP_GetState+0x6a>
 8009dc6:	4b18      	ldr	r3, [pc, #96]	; (8009e28 <IOE_TP_GetState+0xc4>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	2b05      	cmp	r3, #5
 8009dd8:	d905      	bls.n	8009de6 <IOE_TP_GetState+0x82>
    {
      _x = x;
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <IOE_TP_GetState+0xc0>)
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	601a      	str	r2, [r3, #0]
      _y = y;       
 8009de0:	4b11      	ldr	r3, [pc, #68]	; (8009e28 <IOE_TP_GetState+0xc4>)
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	601a      	str	r2, [r3, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <IOE_TP_GetState+0xc0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <IOE_TP_GetState+0xbc>)
 8009dee:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <IOE_TP_GetState+0xc4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <IOE_TP_GetState+0xbc>)
 8009df8:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 8009dfa:	f000 fc75 	bl	800a6e8 <IOE_TP_Read_Z>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	461a      	mov	r2, r3
 8009e02:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <IOE_TP_GetState+0xbc>)
 8009e04:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8009e06:	204b      	movs	r0, #75	; 0x4b
 8009e08:	2101      	movs	r1, #1
 8009e0a:	f000 fd43 	bl	800a894 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8009e0e:	204b      	movs	r0, #75	; 0x4b
 8009e10:	2100      	movs	r1, #0
 8009e12:	f000 fd3f 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 8009e16:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <IOE_TP_GetState+0xbc>)
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200004e0 	andcs	r0, r0, r0, ror #9
 8009e24:	200004e8 	andcs	r0, r0, r8, ror #9
 8009e28:	200004ec 	andcs	r0, r0, ip, ror #9

08009e2c <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t Global_IT)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
  __IO uint8_t tmp = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
 
  /* Get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_STA);
 8009e3a:	200b      	movs	r0, #11
 8009e3c:	f000 fdd8 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <IOE_GetGITStatus+0x2a>
  {
    return SET;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <IOE_GetGITStatus+0x2c>
  }
  else
  {
    return RESET;
 8009e56:	2300      	movs	r3, #0
  }
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t Global_IT)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, Global_IT); 
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	200b      	movs	r0, #11
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f000 fd10 	bl	800a894 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop

08009e80 <IOE_IsOperational>:
  *         communicates correctly ont the I2C bus.
  * @param  None
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 8009e84:	f000 f826 	bl	8009ed4 <IOE_ReadID>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f640 0311 	movw	r3, #2065	; 0x811
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d009      	beq.n	8009ea8 <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <IOE_IsOperational+0x30>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 8009e9c:	f000 ff7c 	bl	800ad98 <IOE_TimeoutUserCallback>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	e002      	b.n	8009eaa <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 8009ea8:	2300      	movs	r3, #0
  }
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	2000005c 	andcs	r0, r0, ip, asr r0

08009eb4 <IOE_Reset>:
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 8009eb8:	2003      	movs	r0, #3
 8009eba:	2102      	movs	r1, #2
 8009ebc:	f000 fcea 	bl	800a894 <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 8009ec0:	2002      	movs	r0, #2
 8009ec2:	f000 ff9f 	bl	800ae04 <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 8009ec6:	2003      	movs	r0, #3
 8009ec8:	2100      	movs	r1, #0
 8009eca:	f000 fce3 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <IOE_ReadID>:
  * @brief  Reads the IOE device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f000 fd86 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 8009eee:	2001      	movs	r0, #1
 8009ef0:	f000 fd7e 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	88fb      	ldrh	r3, [r7, #6]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 8009efe:	88fb      	ldrh	r3, [r7, #6]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	71fa      	strb	r2, [r7, #7]
 8009f14:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 8009f1a:	2004      	movs	r0, #4
 8009f1c:	f000 fd68 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009f24:	79bb      	ldrb	r3, [r7, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <IOE_FnctCmd+0x32>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4013      	ands	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	73fb      	strb	r3, [r7, #15]
 8009f38:	e003      	b.n	8009f42 <IOE_FnctCmd+0x3a>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 8009f3a:	7bfa      	ldrb	r2, [r7, #15]
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	2004      	movs	r0, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	f000 fca4 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop

08009f58 <IOE_GITCmd>:
  * @brief  Enables or disables the Global interrupt.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(FunctionalState NewState)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_CTRL);
 8009f66:	2009      	movs	r0, #9
 8009f68:	f000 fd42 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d004      	beq.n	8009f80 <IOE_GITCmd+0x28>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	73fb      	strb	r3, [r7, #15]
 8009f7e:	e003      	b.n	8009f88 <IOE_GITCmd+0x30>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(IOE_REG_INT_CTRL, tmp);
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2009      	movs	r0, #9
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f000 fc81 	bl	800a894 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <IOE_GITConfig>:
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t Global_IT, FunctionalState NewState)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	71fa      	strb	r2, [r7, #7]
 8009fa8:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_EN);
 8009fae:	200a      	movs	r0, #10
 8009fb0:	f000 fd1e 	bl	800a9f0 <I2C_ReadDeviceRegister>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009fb8:	79bb      	ldrb	r3, [r7, #6]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <IOE_GITConfig+0x2c>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 8009fbe:	7bfa      	ldrb	r2, [r7, #15]
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	73fb      	strb	r3, [r7, #15]
 8009fc6:	e006      	b.n	8009fd6 <IOE_GITConfig+0x3a>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_REG_INT_EN, tmp);
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	200a      	movs	r0, #10
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f000 fc5a 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop

08009fec <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 8009ff0:	2002      	movs	r0, #2
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	f7ff ff88 	bl	8009f08 <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 8009ff8:	2020      	movs	r0, #32
 8009ffa:	2149      	movs	r1, #73	; 0x49
 8009ffc:	f000 fc4a 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 800a000:	2002      	movs	r0, #2
 800a002:	f000 feff 	bl	800ae04 <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 800a006:	2021      	movs	r0, #33	; 0x21
 800a008:	2101      	movs	r1, #1
 800a00a:	f000 fc43 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800a00e:	201e      	movs	r0, #30
 800a010:	2100      	movs	r1, #0
 800a012:	f000 f835 	bl	800a080 <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 800a016:	2041      	movs	r0, #65	; 0x41
 800a018:	219a      	movs	r1, #154	; 0x9a
 800a01a:	f000 fc3b 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 800a01e:	204a      	movs	r0, #74	; 0x4a
 800a020:	2101      	movs	r1, #1
 800a022:	f000 fc37 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 800a026:	204b      	movs	r0, #75	; 0x4b
 800a028:	2101      	movs	r1, #1
 800a02a:	f000 fc33 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800a02e:	204b      	movs	r0, #75	; 0x4b
 800a030:	2100      	movs	r1, #0
 800a032:	f000 fc2f 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 800a036:	2056      	movs	r0, #86	; 0x56
 800a038:	2101      	movs	r1, #1
 800a03a:	f000 fc2b 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 800a03e:	2058      	movs	r0, #88	; 0x58
 800a040:	2101      	movs	r1, #1
 800a042:	f000 fc27 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 800a046:	2040      	movs	r0, #64	; 0x40
 800a048:	2103      	movs	r1, #3
 800a04a:	f000 fc23 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 800a04e:	200b      	movs	r0, #11
 800a050:	21ff      	movs	r1, #255	; 0xff
 800a052:	f000 fc1f 	bl	800a894 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <IOE_TP_Config+0x90>)
 800a058:	2200      	movs	r2, #0
 800a05a:	80da      	strh	r2, [r3, #6]
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <IOE_TP_Config+0x90>)
 800a05e:	88da      	ldrh	r2, [r3, #6]
 800a060:	4b06      	ldr	r3, [pc, #24]	; (800a07c <IOE_TP_Config+0x90>)
 800a062:	809a      	strh	r2, [r3, #4]
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <IOE_TP_Config+0x90>)
 800a066:	889a      	ldrh	r2, [r3, #4]
 800a068:	4b04      	ldr	r3, [pc, #16]	; (800a07c <IOE_TP_Config+0x90>)
 800a06a:	805a      	strh	r2, [r3, #2]
 800a06c:	4b03      	ldr	r3, [pc, #12]	; (800a07c <IOE_TP_Config+0x90>)
 800a06e:	885a      	ldrh	r2, [r3, #2]
 800a070:	4b02      	ldr	r3, [pc, #8]	; (800a07c <IOE_TP_Config+0x90>)
 800a072:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	200004e0 	andcs	r0, r0, r0, ror #9

0800a080 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	71fa      	strb	r2, [r7, #7]
 800a08c:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 800a092:	2017      	movs	r0, #23
 800a094:	f000 fcac 	bl	800a9f0 <I2C_ReadDeviceRegister>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800a09c:	79bb      	ldrb	r3, [r7, #6]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <IOE_IOAFConfig+0x2c>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 800a0a2:	7bfa      	ldrb	r2, [r7, #15]
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	73fb      	strb	r3, [r7, #15]
 800a0aa:	e006      	b.n	800a0ba <IOE_IOAFConfig+0x3a>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	43db      	mvns	r3, r3
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2017      	movs	r0, #23
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f000 fbe8 	bl	800a894 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop

0800a0d0 <I2C_DMA_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_DMA_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	71fa      	strb	r2, [r7, #7]
 800a0dc:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;  
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 800a0e6:	79bb      	ldrb	r3, [r7, #6]
 800a0e8:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 800a0ea:	f107 030b 	add.w	r3, r7, #11
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f000 fb7d 	bl	800a7f0 <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a0f6:	4852      	ldr	r0, [pc, #328]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	f7f9 f9d5 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a0fe:	4b51      	ldr	r3, [pc, #324]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a100:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a104:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800a106:	e00a      	b.n	800a11e <I2C_DMA_WriteDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a108:	4b4e      	ldr	r3, [pc, #312]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	1e59      	subs	r1, r3, #1
 800a10e:	4a4d      	ldr	r2, [pc, #308]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a110:	6011      	str	r1, [r2, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d103      	bne.n	800a11e <I2C_DMA_WriteDeviceRegister+0x4e>
 800a116:	f000 fe3f 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a11a:	4603      	mov	r3, r0
 800a11c:	e08c      	b.n	800a238 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800a11e:	4848      	ldr	r0, [pc, #288]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a120:	4949      	ldr	r1, [pc, #292]	; (800a248 <I2C_DMA_WriteDeviceRegister+0x178>)
 800a122:	f7f9 fcbd 	bl	8003aa0 <I2C_GetFlagStatus>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0ed      	beq.n	800a108 <I2C_DMA_WriteDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a12c:	4844      	ldr	r0, [pc, #272]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a12e:	2182      	movs	r1, #130	; 0x82
 800a130:	2200      	movs	r2, #0
 800a132:	f7f9 f9f9 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a136:	4b43      	ldr	r3, [pc, #268]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a138:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a13c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a13e:	e00a      	b.n	800a156 <I2C_DMA_WriteDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a140:	4b40      	ldr	r3, [pc, #256]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	1e59      	subs	r1, r3, #1
 800a146:	4a3f      	ldr	r2, [pc, #252]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <I2C_DMA_WriteDeviceRegister+0x86>
 800a14e:	f000 fe23 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a152:	4603      	mov	r3, r0
 800a154:	e070      	b.n	800a238 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a156:	483a      	ldr	r0, [pc, #232]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a158:	493c      	ldr	r1, [pc, #240]	; (800a24c <I2C_DMA_WriteDeviceRegister+0x17c>)
 800a15a:	f7f9 fc4f 	bl	80039fc <I2C_CheckEvent>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0ed      	beq.n	800a140 <I2C_DMA_WriteDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	4836      	ldr	r0, [pc, #216]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a168:	4619      	mov	r1, r3
 800a16a:	f7f9 fb3d 	bl	80037e8 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a16e:	4b35      	ldr	r3, [pc, #212]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a170:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a174:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a176:	e00a      	b.n	800a18e <I2C_DMA_WriteDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a178:	4b32      	ldr	r3, [pc, #200]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	1e59      	subs	r1, r3, #1
 800a17e:	4a31      	ldr	r2, [pc, #196]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a180:	6011      	str	r1, [r2, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <I2C_DMA_WriteDeviceRegister+0xbe>
 800a186:	f000 fe07 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a18a:	4603      	mov	r3, r0
 800a18c:	e054      	b.n	800a238 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a18e:	482c      	ldr	r0, [pc, #176]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a190:	492f      	ldr	r1, [pc, #188]	; (800a250 <I2C_DMA_WriteDeviceRegister+0x180>)
 800a192:	f7f9 fc85 	bl	8003aa0 <I2C_GetFlagStatus>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <I2C_DMA_WriteDeviceRegister+0xda>
 800a19c:	4828      	ldr	r0, [pc, #160]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a19e:	492d      	ldr	r1, [pc, #180]	; (800a254 <I2C_DMA_WriteDeviceRegister+0x184>)
 800a1a0:	f7f9 fc7e 	bl	8003aa0 <I2C_GetFlagStatus>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0e6      	beq.n	800a178 <I2C_DMA_WriteDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a1aa:	4825      	ldr	r0, [pc, #148]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	f7f9 fba9 	bl	8003904 <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 800a1b2:	4829      	ldr	r0, [pc, #164]	; (800a258 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f7f9 fe5f 	bl	8003e78 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 800a1ba:	4b22      	ldr	r3, [pc, #136]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a1c0:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800a1c2:	e00a      	b.n	800a1da <I2C_DMA_WriteDeviceRegister+0x10a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a1c4:	4b1f      	ldr	r3, [pc, #124]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	1e59      	subs	r1, r3, #1
 800a1ca:	4a1e      	ldr	r2, [pc, #120]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1cc:	6011      	str	r1, [r2, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <I2C_DMA_WriteDeviceRegister+0x10a>
 800a1d2:	f000 fde1 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	e02e      	b.n	800a238 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800a1da:	481f      	ldr	r0, [pc, #124]	; (800a258 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a1dc:	491f      	ldr	r1, [pc, #124]	; (800a25c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800a1de:	f7f9 ff49 	bl	8004074 <DMA_GetFlagStatus>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0ed      	beq.n	800a1c4 <I2C_DMA_WriteDeviceRegister+0xf4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
 800a1e8:	4b16      	ldr	r3, [pc, #88]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1ea:	4a1d      	ldr	r2, [pc, #116]	; (800a260 <I2C_DMA_WriteDeviceRegister+0x190>)
 800a1ec:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a1ee:	e00a      	b.n	800a206 <I2C_DMA_WriteDeviceRegister+0x136>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a1f0:	4b14      	ldr	r3, [pc, #80]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	1e59      	subs	r1, r3, #1
 800a1f6:	4a13      	ldr	r2, [pc, #76]	; (800a244 <I2C_DMA_WriteDeviceRegister+0x174>)
 800a1f8:	6011      	str	r1, [r2, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <I2C_DMA_WriteDeviceRegister+0x136>
 800a1fe:	f000 fdcb 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a202:	4603      	mov	r3, r0
 800a204:	e018      	b.n	800a238 <I2C_DMA_WriteDeviceRegister+0x168>
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a206:	480e      	ldr	r0, [pc, #56]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a208:	4912      	ldr	r1, [pc, #72]	; (800a254 <I2C_DMA_WriteDeviceRegister+0x184>)
 800a20a:	f7f9 fc49 	bl	8003aa0 <I2C_GetFlagStatus>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0ed      	beq.n	800a1f0 <I2C_DMA_WriteDeviceRegister+0x120>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a214:	480a      	ldr	r0, [pc, #40]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a216:	2101      	movs	r1, #1
 800a218:	f7f9 f966 	bl	80034e8 <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 800a21c:	480e      	ldr	r0, [pc, #56]	; (800a258 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a21e:	2100      	movs	r1, #0
 800a220:	f7f9 fe2a 	bl	8003e78 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a224:	4806      	ldr	r0, [pc, #24]	; (800a240 <I2C_DMA_WriteDeviceRegister+0x170>)
 800a226:	2100      	movs	r1, #0
 800a228:	f7f9 fb6c 	bl	8003904 <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 800a22c:	480a      	ldr	r0, [pc, #40]	; (800a258 <I2C_DMA_WriteDeviceRegister+0x188>)
 800a22e:	490b      	ldr	r1, [pc, #44]	; (800a25c <I2C_DMA_WriteDeviceRegister+0x18c>)
 800a230:	f7f9 ff5c 	bl	80040ec <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	b2db      	uxtb	r3, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a244:	2000005c 	andcs	r0, r0, ip, asr r0
 800a248:	10000001 	andne	r0, r0, r1
 800a24c:	00070082 	andeq	r0, r7, r2, lsl #1
 800a250:	10000080 	andne	r0, r0, r0, lsl #1
 800a254:	10000004 	andne	r0, r0, r4
 800a258:	400260a0 	andmi	r6, r2, r0, lsr #1
 800a25c:	20200000 	eorcs	r0, r0, r0
 800a260:	002fd000 	eoreq	sp, pc, r0

0800a264 <I2C_DMA_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_DMA_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	71fb      	strb	r3, [r7, #7]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800a26e:	2300      	movs	r3, #0
 800a270:	733b      	strb	r3, [r7, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	2001      	movs	r0, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	f000 fab7 	bl	800a7f0 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800a282:	4864      	ldr	r0, [pc, #400]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a284:	2101      	movs	r1, #1
 800a286:	f7f9 fb5d 	bl	8003944 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a28a:	4862      	ldr	r0, [pc, #392]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a28c:	2101      	movs	r1, #1
 800a28e:	f7f9 f90b 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a292:	4b61      	ldr	r3, [pc, #388]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a294:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a298:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a29a:	e00a      	b.n	800a2b2 <I2C_DMA_ReadDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a29c:	4b5e      	ldr	r3, [pc, #376]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	1e59      	subs	r1, r3, #1
 800a2a2:	4a5d      	ldr	r2, [pc, #372]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d103      	bne.n	800a2b2 <I2C_DMA_ReadDeviceRegister+0x4e>
 800a2aa:	f000 fd75 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	e0ac      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a2b2:	4858      	ldr	r0, [pc, #352]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2b4:	4959      	ldr	r1, [pc, #356]	; (800a41c <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800a2b6:	f7f9 fbf3 	bl	8003aa0 <I2C_GetFlagStatus>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0ed      	beq.n	800a29c <I2C_DMA_ReadDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a2c0:	4854      	ldr	r0, [pc, #336]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2c2:	2182      	movs	r1, #130	; 0x82
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7f9 f92f 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a2ca:	4b53      	ldr	r3, [pc, #332]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a2cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a2d0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800a2d2:	e00a      	b.n	800a2ea <I2C_DMA_ReadDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a2d4:	4b50      	ldr	r3, [pc, #320]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1e59      	subs	r1, r3, #1
 800a2da:	4a4f      	ldr	r2, [pc, #316]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a2dc:	6011      	str	r1, [r2, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <I2C_DMA_ReadDeviceRegister+0x86>
 800a2e2:	f000 fd59 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	e090      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800a2ea:	484a      	ldr	r0, [pc, #296]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2ec:	494c      	ldr	r1, [pc, #304]	; (800a420 <I2C_DMA_ReadDeviceRegister+0x1bc>)
 800a2ee:	f7f9 fb85 	bl	80039fc <I2C_CheckEvent>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0ed      	beq.n	800a2d4 <I2C_DMA_ReadDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	4846      	ldr	r0, [pc, #280]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f7f9 fa73 	bl	80037e8 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a302:	4b45      	ldr	r3, [pc, #276]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a304:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a308:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a30a:	e00a      	b.n	800a322 <I2C_DMA_ReadDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a30c:	4b42      	ldr	r3, [pc, #264]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	1e59      	subs	r1, r3, #1
 800a312:	4a41      	ldr	r2, [pc, #260]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a314:	6011      	str	r1, [r2, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <I2C_DMA_ReadDeviceRegister+0xbe>
 800a31a:	f000 fd3d 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a31e:	4603      	mov	r3, r0
 800a320:	e074      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a322:	483c      	ldr	r0, [pc, #240]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a324:	493f      	ldr	r1, [pc, #252]	; (800a424 <I2C_DMA_ReadDeviceRegister+0x1c0>)
 800a326:	f7f9 fbbb 	bl	8003aa0 <I2C_GetFlagStatus>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <I2C_DMA_ReadDeviceRegister+0xda>
 800a330:	4838      	ldr	r0, [pc, #224]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a332:	493d      	ldr	r1, [pc, #244]	; (800a428 <I2C_DMA_ReadDeviceRegister+0x1c4>)
 800a334:	f7f9 fbb4 	bl	8003aa0 <I2C_GetFlagStatus>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0e6      	beq.n	800a30c <I2C_DMA_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a33e:	4835      	ldr	r0, [pc, #212]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a340:	2101      	movs	r1, #1
 800a342:	f7f9 f8b1 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a346:	4b34      	ldr	r3, [pc, #208]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a348:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a34c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a34e:	e00a      	b.n	800a366 <I2C_DMA_ReadDeviceRegister+0x102>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a350:	4b31      	ldr	r3, [pc, #196]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	1e59      	subs	r1, r3, #1
 800a356:	4a30      	ldr	r2, [pc, #192]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a358:	6011      	str	r1, [r2, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <I2C_DMA_ReadDeviceRegister+0x102>
 800a35e:	f000 fd1b 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a362:	4603      	mov	r3, r0
 800a364:	e052      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a366:	482b      	ldr	r0, [pc, #172]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a368:	492c      	ldr	r1, [pc, #176]	; (800a41c <I2C_DMA_ReadDeviceRegister+0x1b8>)
 800a36a:	f7f9 fb99 	bl	8003aa0 <I2C_GetFlagStatus>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0ed      	beq.n	800a350 <I2C_DMA_ReadDeviceRegister+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800a374:	4827      	ldr	r0, [pc, #156]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a376:	2182      	movs	r1, #130	; 0x82
 800a378:	2201      	movs	r2, #1
 800a37a:	f7f9 f8d5 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a37e:	4b26      	ldr	r3, [pc, #152]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a380:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a384:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a386:	e00a      	b.n	800a39e <I2C_DMA_ReadDeviceRegister+0x13a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a388:	4b23      	ldr	r3, [pc, #140]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1e59      	subs	r1, r3, #1
 800a38e:	4a22      	ldr	r2, [pc, #136]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a390:	6011      	str	r1, [r2, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d103      	bne.n	800a39e <I2C_DMA_ReadDeviceRegister+0x13a>
 800a396:	f000 fcff 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a39a:	4603      	mov	r3, r0
 800a39c:	e036      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a39e:	481d      	ldr	r0, [pc, #116]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a3a0:	4922      	ldr	r1, [pc, #136]	; (800a42c <I2C_DMA_ReadDeviceRegister+0x1c8>)
 800a3a2:	f7f9 fb2b 	bl	80039fc <I2C_CheckEvent>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0ed      	beq.n	800a388 <I2C_DMA_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a3ac:	4819      	ldr	r0, [pc, #100]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	f7f9 faa8 	bl	8003904 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800a3b4:	481e      	ldr	r0, [pc, #120]	; (800a430 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	f7f9 fd5e 	bl	8003e78 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800a3bc:	4b16      	ldr	r3, [pc, #88]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a3be:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800a3c2:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800a3c4:	e00a      	b.n	800a3dc <I2C_DMA_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	1e59      	subs	r1, r3, #1
 800a3cc:	4a12      	ldr	r2, [pc, #72]	; (800a418 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800a3ce:	6011      	str	r1, [r2, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <I2C_DMA_ReadDeviceRegister+0x178>
 800a3d4:	f000 fce0 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	e017      	b.n	800a40c <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 800a3dc:	4814      	ldr	r0, [pc, #80]	; (800a430 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a3de:	4915      	ldr	r1, [pc, #84]	; (800a434 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800a3e0:	f7f9 fe48 	bl	8004074 <DMA_GetFlagStatus>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0ed      	beq.n	800a3c6 <I2C_DMA_ReadDeviceRegister+0x162>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a3ea:	480a      	ldr	r0, [pc, #40]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	f7f9 f87b 	bl	80034e8 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800a3f2:	480f      	ldr	r0, [pc, #60]	; (800a430 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	f7f9 fd3f 	bl	8003e78 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a3fa:	4806      	ldr	r0, [pc, #24]	; (800a414 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	f7f9 fa81 	bl	8003904 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800a402:	480b      	ldr	r0, [pc, #44]	; (800a430 <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800a404:	490b      	ldr	r1, [pc, #44]	; (800a434 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800a406:	f7f9 fe71 	bl	80040ec <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 800a40a:	7b3b      	ldrb	r3, [r7, #12]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a418:	2000005c 	andcs	r0, r0, ip, asr r0
 800a41c:	10000001 	andne	r0, r0, r1
 800a420:	00070082 	andeq	r0, r7, r2, lsl #1
 800a424:	10000080 	andne	r0, r0, r0, lsl #1
 800a428:	10000004 	andne	r0, r0, r4
 800a42c:	00030002 	andeq	r0, r3, r2
 800a430:	40026010 	andmi	r6, r2, r0, lsl r0
 800a434:	10000020 	andne	r0, r0, r0, lsr #32

0800a438 <I2C_DMA_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_DMA_ReadDataBuffer(uint32_t RegisterAddr)
{ 
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t tmp= 0;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800a444:	2300      	movs	r3, #0
 800a446:	733b      	strb	r3, [r7, #12]
 800a448:	2300      	movs	r3, #0
 800a44a:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 800a44c:	f107 030c 	add.w	r3, r7, #12
 800a450:	2001      	movs	r0, #1
 800a452:	4619      	mov	r1, r3
 800a454:	f000 f9cc 	bl	800a7f0 <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 800a458:	486b      	ldr	r0, [pc, #428]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a45a:	2101      	movs	r1, #1
 800a45c:	f7f9 fa72 	bl	8003944 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a460:	4869      	ldr	r0, [pc, #420]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a462:	2101      	movs	r1, #1
 800a464:	f7f9 f820 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a468:	4b68      	ldr	r3, [pc, #416]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a46a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a46e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a470:	e00a      	b.n	800a488 <I2C_DMA_ReadDataBuffer+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a472:	4b66      	ldr	r3, [pc, #408]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	1e59      	subs	r1, r3, #1
 800a478:	4a64      	ldr	r2, [pc, #400]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a47a:	6011      	str	r1, [r2, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <I2C_DMA_ReadDataBuffer+0x50>
 800a480:	f000 fc8a 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a484:	4603      	mov	r3, r0
 800a486:	e0ba      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a488:	485f      	ldr	r0, [pc, #380]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a48a:	4961      	ldr	r1, [pc, #388]	; (800a610 <I2C_DMA_ReadDataBuffer+0x1d8>)
 800a48c:	f7f9 fb08 	bl	8003aa0 <I2C_GetFlagStatus>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0ed      	beq.n	800a472 <I2C_DMA_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a496:	485c      	ldr	r0, [pc, #368]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a498:	2182      	movs	r1, #130	; 0x82
 800a49a:	2200      	movs	r2, #0
 800a49c:	f7f9 f844 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a4a0:	4b5a      	ldr	r3, [pc, #360]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4a2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a4a6:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a4a8:	e00a      	b.n	800a4c0 <I2C_DMA_ReadDataBuffer+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a4aa:	4b58      	ldr	r3, [pc, #352]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	1e59      	subs	r1, r3, #1
 800a4b0:	4a56      	ldr	r2, [pc, #344]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4b2:	6011      	str	r1, [r2, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <I2C_DMA_ReadDataBuffer+0x88>
 800a4b8:	f000 fc6e 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	e09e      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800a4c0:	4851      	ldr	r0, [pc, #324]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a4c2:	4954      	ldr	r1, [pc, #336]	; (800a614 <I2C_DMA_ReadDataBuffer+0x1dc>)
 800a4c4:	f7f9 fa9a 	bl	80039fc <I2C_CheckEvent>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0ed      	beq.n	800a4aa <I2C_DMA_ReadDataBuffer+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	484d      	ldr	r0, [pc, #308]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f7f9 f987 	bl	80037e8 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800a4da:	4b4c      	ldr	r3, [pc, #304]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a4e0:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a4e2:	e00a      	b.n	800a4fa <I2C_DMA_ReadDataBuffer+0xc2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a4e4:	4b49      	ldr	r3, [pc, #292]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	1e59      	subs	r1, r3, #1
 800a4ea:	4a48      	ldr	r2, [pc, #288]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d103      	bne.n	800a4fa <I2C_DMA_ReadDataBuffer+0xc2>
 800a4f2:	f000 fc51 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	e081      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800a4fa:	4843      	ldr	r0, [pc, #268]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a4fc:	4946      	ldr	r1, [pc, #280]	; (800a618 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800a4fe:	f7f9 facf 	bl	8003aa0 <I2C_GetFlagStatus>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <I2C_DMA_ReadDataBuffer+0xde>
 800a508:	483f      	ldr	r0, [pc, #252]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a50a:	4944      	ldr	r1, [pc, #272]	; (800a61c <I2C_DMA_ReadDataBuffer+0x1e4>)
 800a50c:	f7f9 fac8 	bl	8003aa0 <I2C_GetFlagStatus>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0e6      	beq.n	800a4e4 <I2C_DMA_ReadDataBuffer+0xac>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a516:	483c      	ldr	r0, [pc, #240]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a518:	2101      	movs	r1, #1
 800a51a:	f7f8 ffc5 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a51e:	4b3b      	ldr	r3, [pc, #236]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a520:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a524:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a526:	e00a      	b.n	800a53e <I2C_DMA_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a528:	4b38      	ldr	r3, [pc, #224]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	1e59      	subs	r1, r3, #1
 800a52e:	4a37      	ldr	r2, [pc, #220]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a530:	6011      	str	r1, [r2, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <I2C_DMA_ReadDataBuffer+0x106>
 800a536:	f000 fc2f 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a53a:	4603      	mov	r3, r0
 800a53c:	e05f      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800a53e:	4832      	ldr	r0, [pc, #200]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a540:	4933      	ldr	r1, [pc, #204]	; (800a610 <I2C_DMA_ReadDataBuffer+0x1d8>)
 800a542:	f7f9 faad 	bl	8003aa0 <I2C_GetFlagStatus>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0ed      	beq.n	800a528 <I2C_DMA_ReadDataBuffer+0xf0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800a54c:	482e      	ldr	r0, [pc, #184]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a54e:	2182      	movs	r1, #130	; 0x82
 800a550:	2201      	movs	r2, #1
 800a552:	f7f8 ffe9 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800a556:	4b2d      	ldr	r3, [pc, #180]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a558:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a55c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a55e:	e00a      	b.n	800a576 <I2C_DMA_ReadDataBuffer+0x13e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a560:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	1e59      	subs	r1, r3, #1
 800a566:	4a29      	ldr	r2, [pc, #164]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a568:	6011      	str	r1, [r2, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <I2C_DMA_ReadDataBuffer+0x13e>
 800a56e:	f000 fc13 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a572:	4603      	mov	r3, r0
 800a574:	e043      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 800a576:	4824      	ldr	r0, [pc, #144]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a578:	4929      	ldr	r1, [pc, #164]	; (800a620 <I2C_DMA_ReadDataBuffer+0x1e8>)
 800a57a:	f7f9 fa3f 	bl	80039fc <I2C_CheckEvent>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0ed      	beq.n	800a560 <I2C_DMA_ReadDataBuffer+0x128>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 800a584:	4820      	ldr	r0, [pc, #128]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a586:	2101      	movs	r1, #1
 800a588:	f7f9 f9bc 	bl	8003904 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 800a58c:	4825      	ldr	r0, [pc, #148]	; (800a624 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a58e:	2101      	movs	r1, #1
 800a590:	f7f9 fc72 	bl	8003e78 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 800a594:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a596:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800a59a:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800a59c:	e00a      	b.n	800a5b4 <I2C_DMA_ReadDataBuffer+0x17c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a59e:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	1e59      	subs	r1, r3, #1
 800a5a4:	4a19      	ldr	r2, [pc, #100]	; (800a60c <I2C_DMA_ReadDataBuffer+0x1d4>)
 800a5a6:	6011      	str	r1, [r2, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <I2C_DMA_ReadDataBuffer+0x17c>
 800a5ac:	f000 fbf4 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	e024      	b.n	800a5fe <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 800a5b4:	481b      	ldr	r0, [pc, #108]	; (800a624 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a5b6:	491c      	ldr	r1, [pc, #112]	; (800a628 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800a5b8:	f7f9 fd5c 	bl	8004074 <DMA_GetFlagStatus>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0ed      	beq.n	800a59e <I2C_DMA_ReadDataBuffer+0x166>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a5c2:	4811      	ldr	r0, [pc, #68]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	f7f8 ff8f 	bl	80034e8 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800a5ca:	4816      	ldr	r0, [pc, #88]	; (800a624 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	f7f9 fc53 	bl	8003e78 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800a5d2:	480d      	ldr	r0, [pc, #52]	; (800a608 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	f7f9 f995 	bl	8003904 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800a5da:	4812      	ldr	r0, [pc, #72]	; (800a624 <I2C_DMA_ReadDataBuffer+0x1ec>)
 800a5dc:	4912      	ldr	r1, [pc, #72]	; (800a628 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800a5de:	f7f9 fd85 	bl	80040ec <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 800a5e2:	7b3b      	ldrb	r3, [r7, #12]
 800a5e4:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 800a5e6:	7b7b      	ldrb	r3, [r7, #13]
 800a5e8:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	737b      	strb	r3, [r7, #13]
  
  /* return the data */
  return (uint16_t) ((uint16_t)IOE_BufferRX[0] | (uint16_t)IOE_BufferRX[1]<< 8);
 800a5ee:	7b3b      	ldrb	r3, [r7, #12]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	7b7b      	ldrb	r3, [r7, #13]
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	b29b      	uxth	r3, r3
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a60c:	2000005c 	andcs	r0, r0, ip, asr r0
 800a610:	10000001 	andne	r0, r0, r1
 800a614:	00070082 	andeq	r0, r7, r2, lsl #1
 800a618:	10000080 	andne	r0, r0, r0, lsl #1
 800a61c:	10000004 	andne	r0, r0, r4
 800a620:	00030002 	andeq	r0, r3, r2
 800a624:	40026010 	andmi	r6, r2, r0, lsl r0
 800a628:	10000020 	andne	r0, r0, r0, lsr #32

0800a62c <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 800a632:	204d      	movs	r0, #77	; 0x4d
 800a634:	f000 faca 	bl	800abcc <I2C_ReadDataBuffer>
 800a638:	4603      	mov	r3, r0
 800a63a:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a642:	429a      	cmp	r2, r3
 800a644:	dc05      	bgt.n	800a652 <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800a64c:	330e      	adds	r3, #14
 800a64e:	607b      	str	r3, [r7, #4]
 800a650:	e004      	b.n	800a65c <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800a658:	3308      	adds	r3, #8
 800a65a:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <IOE_TP_Read_X+0x64>)
 800a660:	fb82 1203 	smull	r1, r2, r2, r3
 800a664:	441a      	add	r2, r3
 800a666:	10d2      	asrs	r2, r2, #3
 800a668:	17db      	asrs	r3, r3, #31
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc02      	bgt.n	800a67a <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	e004      	b.n	800a684 <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2bf0      	cmp	r3, #240	; 0xf0
 800a67e:	dd01      	ble.n	800a684 <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 800a680:	23ef      	movs	r3, #239	; 0xef
 800a682:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	b29b      	uxth	r3, r3
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	88888889 	stmhi	r8, {r0, r3, r7, fp, pc}

0800a694 <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 800a69a:	204f      	movs	r0, #79	; 0x4f
 800a69c:	f000 fa96 	bl	800abcc <I2C_ReadDataBuffer>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a6aa:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	4a0d      	ldr	r2, [pc, #52]	; (800a6e4 <IOE_TP_Read_Y+0x50>)
 800a6b0:	fb82 1203 	smull	r1, r2, r2, r3
 800a6b4:	1052      	asrs	r2, r2, #1
 800a6b6:	17db      	asrs	r3, r3, #31
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dc02      	bgt.n	800a6c8 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	e006      	b.n	800a6d6 <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a6ce:	dd02      	ble.n	800a6d6 <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 800a6d0:	f240 133f 	movw	r3, #319	; 0x13f
 800a6d4:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	b29b      	uxth	r3, r3
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	2e8ba2e9 	cdpcs	2, 8, cr10, cr11, cr9, {7}

0800a6e8 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 800a6ee:	2051      	movs	r0, #81	; 0x51
 800a6f0:	f000 fa6c 	bl	800abcc <I2C_ReadDataBuffer>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <IOE_TP_Read_Z+0x1a>
    z = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	b29b      	uxth	r3, r3
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop

0800a710 <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 800a716:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a71a:	2101      	movs	r1, #1
 800a71c:	f7f7 fdfa 	bl	8002314 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 800a720:	f240 1005 	movw	r0, #261	; 0x105
 800a724:	2101      	movs	r1, #1
 800a726:	f7f7 fd9b 	bl	8002260 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800a72a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a72e:	2101      	movs	r1, #1
 800a730:	f7f7 fe0e 	bl	8002350 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 800a734:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a738:	2101      	movs	r1, #1
 800a73a:	f7f7 fe81 	bl	8002440 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 800a73e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a742:	2100      	movs	r1, #0
 800a744:	f7f7 fe7c 	bl	8002440 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 800a748:	4812      	ldr	r0, [pc, #72]	; (800a794 <IOE_GPIO_Config+0x84>)
 800a74a:	2108      	movs	r1, #8
 800a74c:	2204      	movs	r2, #4
 800a74e:	f7f7 f97b 	bl	8001a48 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 800a752:	4811      	ldr	r0, [pc, #68]	; (800a798 <IOE_GPIO_Config+0x88>)
 800a754:	2109      	movs	r1, #9
 800a756:	2204      	movs	r2, #4
 800a758:	f7f7 f976 	bl	8001a48 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 800a75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a760:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800a762:	2302      	movs	r3, #2
 800a764:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800a766:	2302      	movs	r3, #2
 800a768:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800a76a:	2301      	movs	r3, #1
 800a76c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800a76e:	2300      	movs	r3, #0
 800a770:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800a772:	463b      	mov	r3, r7
 800a774:	4807      	ldr	r0, [pc, #28]	; (800a794 <IOE_GPIO_Config+0x84>)
 800a776:	4619      	mov	r1, r3
 800a778:	f7f6 fff8 	bl	800176c <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 800a77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a780:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800a782:	463b      	mov	r3, r7
 800a784:	4804      	ldr	r0, [pc, #16]	; (800a798 <IOE_GPIO_Config+0x88>)
 800a786:	4619      	mov	r1, r3
 800a788:	f7f6 fff0 	bl	800176c <GPIO_Init>
  
}
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40020000 	andmi	r0, r2, r0
 800a798:	40020800 	andmi	r0, r2, r0, lsl #16

0800a79c <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((IOE_I2C->CR1 & I2C_CR1_PE) == 0)
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <IOE_I2C_Config+0x4c>)
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d117      	bne.n	800a7e0 <IOE_I2C_Config+0x44>
  {   
    /* IOE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800a7b4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800a7b8:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800a7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7c2:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800a7c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7c8:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800a7ca:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <IOE_I2C_Config+0x50>)
 800a7cc:	603b      	str	r3, [r7, #0]
  
    /* Initialize the I2C peripheral */
    I2C_Init(IOE_I2C, &I2C_InitStructure);
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4805      	ldr	r0, [pc, #20]	; (800a7e8 <IOE_I2C_Config+0x4c>)
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f7f8 fd28 	bl	8003228 <I2C_Init>
  
    /* Enable the I2C peripheral */
    I2C_Cmd(IOE_I2C, ENABLE);
 800a7d8:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <IOE_I2C_Config+0x4c>)
 800a7da:	2101      	movs	r1, #1
 800a7dc:	f7f8 fe04 	bl	80033e8 <I2C_Cmd>
  }   
}
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a7ec:	000186a0 	andeq	r8, r1, r0, lsr #13

0800a7f0 <IOE_DMA_Config>:
  * @brief  Configure the DMA Peripheral used to handle communication via I2C.
  * @param  None
  * @retval None
  */
static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b092      	sub	sp, #72	; 0x48
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 800a7fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a800:	2101      	movs	r1, #1
 800a802:	f7f7 fd2d 	bl	8002260 <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 800a806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a80a:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 800a80c:	4b1e      	ldr	r3, [pc, #120]	; (800a888 <IOE_DMA_Config+0x98>)
 800a80e:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800a814:	2300      	movs	r3, #0
 800a816:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800a818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800a81e:	2300      	movs	r3, #0
 800a820:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800a822:	2300      	movs	r3, #0
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800a826:	2300      	movs	r3, #0
 800a828:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 800a82a:	2300      	movs	r3, #0
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800a82e:	2304      	movs	r3, #4
 800a830:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800a836:	2300      	movs	r3, #0
 800a838:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800a83a:	2300      	movs	r3, #0
 800a83c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 800a83e:	79fb      	ldrb	r3, [r7, #7]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d10d      	bne.n	800a860 <IOE_DMA_Config+0x70>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800a844:	2300      	movs	r3, #0
 800a846:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 800a848:	2302      	movs	r3, #2
 800a84a:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 800a84c:	480f      	ldr	r0, [pc, #60]	; (800a88c <IOE_DMA_Config+0x9c>)
 800a84e:	f7f9 f9b5 	bl	8003bbc <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	480d      	ldr	r0, [pc, #52]	; (800a88c <IOE_DMA_Config+0x9c>)
 800a858:	4619      	mov	r1, r3
 800a85a:	f7f9 fa81 	bl	8003d60 <DMA_Init>
 800a85e:	e00f      	b.n	800a880 <IOE_DMA_Config+0x90>
  }
  /* If using DMA for Transmission */
  else if (Direction == IOE_DMA_TX)
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10c      	bne.n	800a880 <IOE_DMA_Config+0x90>
  { 
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800a866:	2340      	movs	r3, #64	; 0x40
 800a868:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 1;
 800a86a:	2301      	movs	r3, #1
 800a86c:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
 800a86e:	4808      	ldr	r0, [pc, #32]	; (800a890 <IOE_DMA_Config+0xa0>)
 800a870:	f7f9 f9a4 	bl	8003bbc <DMA_DeInit>
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4805      	ldr	r0, [pc, #20]	; (800a890 <IOE_DMA_Config+0xa0>)
 800a87a:	4619      	mov	r1, r3
 800a87c:	f7f9 fa70 	bl	8003d60 <DMA_Init>
  }
}
 800a880:	3748      	adds	r7, #72	; 0x48
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	40005c10 	andmi	r5, r0, r0, lsl ip
 800a88c:	40026010 	andmi	r6, r2, r0, lsl r0
 800a890:	400260a0 	andmi	r6, r2, r0, lsr #1

0800a894 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	71fa      	strb	r2, [r7, #7]
 800a8a0:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a8a6:	484c      	ldr	r0, [pc, #304]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	f7f8 fdfd 	bl	80034a8 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a8ae:	4b4b      	ldr	r3, [pc, #300]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a8b4:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a8b6:	e00a      	b.n	800a8ce <I2C_WriteDeviceRegister+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a8b8:	4b48      	ldr	r3, [pc, #288]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	1e59      	subs	r1, r3, #1
 800a8be:	4a47      	ldr	r2, [pc, #284]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8c0:	6011      	str	r1, [r2, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <I2C_WriteDeviceRegister+0x3a>
 800a8c6:	f000 fa67 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	e080      	b.n	800a9d0 <I2C_WriteDeviceRegister+0x13c>
  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800a8ce:	4842      	ldr	r0, [pc, #264]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a8d0:	4943      	ldr	r1, [pc, #268]	; (800a9e0 <I2C_WriteDeviceRegister+0x14c>)
 800a8d2:	f7f9 f8e5 	bl	8003aa0 <I2C_GetFlagStatus>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0ed      	beq.n	800a8b8 <I2C_WriteDeviceRegister+0x24>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800a8dc:	483e      	ldr	r0, [pc, #248]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a8de:	2182      	movs	r1, #130	; 0x82
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f7f8 fe21 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800a8e6:	4b3d      	ldr	r3, [pc, #244]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8e8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a8ec:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a8ee:	e00a      	b.n	800a906 <I2C_WriteDeviceRegister+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a8f0:	4b3a      	ldr	r3, [pc, #232]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	1e59      	subs	r1, r3, #1
 800a8f6:	4a39      	ldr	r2, [pc, #228]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a8f8:	6011      	str	r1, [r2, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d103      	bne.n	800a906 <I2C_WriteDeviceRegister+0x72>
 800a8fe:	f000 fa4b 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a902:	4603      	mov	r3, r0
 800a904:	e064      	b.n	800a9d0 <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800a906:	4834      	ldr	r0, [pc, #208]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a908:	4936      	ldr	r1, [pc, #216]	; (800a9e4 <I2C_WriteDeviceRegister+0x150>)
 800a90a:	f7f9 f8c9 	bl	8003aa0 <I2C_GetFlagStatus>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0ed      	beq.n	800a8f0 <I2C_WriteDeviceRegister+0x5c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800a914:	4b30      	ldr	r3, [pc, #192]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a916:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a918:	4b30      	ldr	r3, [pc, #192]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a91a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a91e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a920:	e00a      	b.n	800a938 <I2C_WriteDeviceRegister+0xa4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a922:	4b2e      	ldr	r3, [pc, #184]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	1e59      	subs	r1, r3, #1
 800a928:	4a2c      	ldr	r2, [pc, #176]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a92a:	6011      	str	r1, [r2, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <I2C_WriteDeviceRegister+0xa4>
 800a930:	f000 fa32 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a934:	4603      	mov	r3, r0
 800a936:	e04b      	b.n	800a9d0 <I2C_WriteDeviceRegister+0x13c>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a938:	4827      	ldr	r0, [pc, #156]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a93a:	492b      	ldr	r1, [pc, #172]	; (800a9e8 <I2C_WriteDeviceRegister+0x154>)
 800a93c:	f7f9 f8b0 	bl	8003aa0 <I2C_GetFlagStatus>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0ed      	beq.n	800a922 <I2C_WriteDeviceRegister+0x8e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	4823      	ldr	r0, [pc, #140]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a94a:	4619      	mov	r1, r3
 800a94c:	f7f8 ff4c 	bl	80037e8 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a950:	4b22      	ldr	r3, [pc, #136]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a952:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a956:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a958:	e00a      	b.n	800a970 <I2C_WriteDeviceRegister+0xdc>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a95a:	4b20      	ldr	r3, [pc, #128]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	1e59      	subs	r1, r3, #1
 800a960:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a962:	6011      	str	r1, [r2, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <I2C_WriteDeviceRegister+0xdc>
 800a968:	f000 fa16 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a96c:	4603      	mov	r3, r0
 800a96e:	e02f      	b.n	800a9d0 <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800a970:	4819      	ldr	r0, [pc, #100]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a972:	491d      	ldr	r1, [pc, #116]	; (800a9e8 <I2C_WriteDeviceRegister+0x154>)
 800a974:	f7f9 f894 	bl	8003aa0 <I2C_GetFlagStatus>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ed      	beq.n	800a95a <I2C_WriteDeviceRegister+0xc6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 800a97e:	79bb      	ldrb	r3, [r7, #6]
 800a980:	4815      	ldr	r0, [pc, #84]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a982:	4619      	mov	r1, r3
 800a984:	f7f8 ff30 	bl	80037e8 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800a988:	4b14      	ldr	r3, [pc, #80]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a98a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a98e:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a990:	e00a      	b.n	800a9a8 <I2C_WriteDeviceRegister+0x114>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800a992:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	1e59      	subs	r1, r3, #1
 800a998:	4a10      	ldr	r2, [pc, #64]	; (800a9dc <I2C_WriteDeviceRegister+0x148>)
 800a99a:	6011      	str	r1, [r2, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d103      	bne.n	800a9a8 <I2C_WriteDeviceRegister+0x114>
 800a9a0:	f000 f9fa 	bl	800ad98 <IOE_TimeoutUserCallback>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	e013      	b.n	800a9d0 <I2C_WriteDeviceRegister+0x13c>
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800a9a8:	480b      	ldr	r0, [pc, #44]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a9aa:	490f      	ldr	r1, [pc, #60]	; (800a9e8 <I2C_WriteDeviceRegister+0x154>)
 800a9ac:	f7f9 f878 	bl	8003aa0 <I2C_GetFlagStatus>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0ed      	beq.n	800a992 <I2C_WriteDeviceRegister+0xfe>
 800a9b6:	4808      	ldr	r0, [pc, #32]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a9b8:	490c      	ldr	r1, [pc, #48]	; (800a9ec <I2C_WriteDeviceRegister+0x158>)
 800a9ba:	f7f9 f871 	bl	8003aa0 <I2C_GetFlagStatus>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0e6      	beq.n	800a992 <I2C_WriteDeviceRegister+0xfe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800a9c4:	4804      	ldr	r0, [pc, #16]	; (800a9d8 <I2C_WriteDeviceRegister+0x144>)
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	f7f8 fd8e 	bl	80034e8 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	b2db      	uxtb	r3, r3
  
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	40005c00 	andmi	r5, r0, r0, lsl #24
 800a9dc:	2000005c 	andcs	r0, r0, ip, asr r0
 800a9e0:	10000001 	andne	r0, r0, r1
 800a9e4:	10000002 	andne	r0, r0, r2
 800a9e8:	10000080 	andne	r0, r0, r0, lsl #1
 800a9ec:	10000004 	andne	r0, r0, r4

0800a9f0 <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800a9fe:	486c      	ldr	r0, [pc, #432]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa00:	2101      	movs	r1, #1
 800aa02:	f7f8 fd51 	bl	80034a8 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aa06:	4b6b      	ldr	r3, [pc, #428]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aa0c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800aa0e:	e00a      	b.n	800aa26 <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aa10:	4b68      	ldr	r3, [pc, #416]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	1e59      	subs	r1, r3, #1
 800aa16:	4a67      	ldr	r2, [pc, #412]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa18:	6011      	str	r1, [r2, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <I2C_ReadDeviceRegister+0x36>
 800aa1e:	f000 f9bb 	bl	800ad98 <IOE_TimeoutUserCallback>
 800aa22:	4603      	mov	r3, r0
 800aa24:	e0c0      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800aa26:	4862      	ldr	r0, [pc, #392]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa28:	4963      	ldr	r1, [pc, #396]	; (800abb8 <I2C_ReadDeviceRegister+0x1c8>)
 800aa2a:	f7f9 f839 	bl	8003aa0 <I2C_GetFlagStatus>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0ed      	beq.n	800aa10 <I2C_ReadDeviceRegister+0x20>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 800aa34:	485e      	ldr	r0, [pc, #376]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa36:	2100      	movs	r1, #0
 800aa38:	f7f8 fd94 	bl	8003564 <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800aa3c:	485c      	ldr	r0, [pc, #368]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa3e:	2182      	movs	r1, #130	; 0x82
 800aa40:	2200      	movs	r2, #0
 800aa42:	f7f8 fd71 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800aa46:	4b5b      	ldr	r3, [pc, #364]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aa4c:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aa4e:	e00a      	b.n	800aa66 <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aa50:	4b58      	ldr	r3, [pc, #352]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	1e59      	subs	r1, r3, #1
 800aa56:	4a57      	ldr	r2, [pc, #348]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa58:	6011      	str	r1, [r2, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <I2C_ReadDeviceRegister+0x76>
 800aa5e:	f000 f99b 	bl	800ad98 <IOE_TimeoutUserCallback>
 800aa62:	4603      	mov	r3, r0
 800aa64:	e0a0      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800aa66:	4852      	ldr	r0, [pc, #328]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa68:	4954      	ldr	r1, [pc, #336]	; (800abbc <I2C_ReadDeviceRegister+0x1cc>)
 800aa6a:	f7f9 f819 	bl	8003aa0 <I2C_GetFlagStatus>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0ed      	beq.n	800aa50 <I2C_ReadDeviceRegister+0x60>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800aa74:	4b4e      	ldr	r3, [pc, #312]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa76:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aa78:	4b4e      	ldr	r3, [pc, #312]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa7a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aa7e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800aa80:	e00a      	b.n	800aa98 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aa82:	4b4c      	ldr	r3, [pc, #304]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	1e59      	subs	r1, r3, #1
 800aa88:	4a4a      	ldr	r2, [pc, #296]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aa8a:	6011      	str	r1, [r2, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d103      	bne.n	800aa98 <I2C_ReadDeviceRegister+0xa8>
 800aa90:	f000 f982 	bl	800ad98 <IOE_TimeoutUserCallback>
 800aa94:	4603      	mov	r3, r0
 800aa96:	e087      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800aa98:	4845      	ldr	r0, [pc, #276]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aa9a:	4949      	ldr	r1, [pc, #292]	; (800abc0 <I2C_ReadDeviceRegister+0x1d0>)
 800aa9c:	f7f9 f800 	bl	8003aa0 <I2C_GetFlagStatus>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0ed      	beq.n	800aa82 <I2C_ReadDeviceRegister+0x92>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	4841      	ldr	r0, [pc, #260]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f7f8 fe9c 	bl	80037e8 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aab0:	4b40      	ldr	r3, [pc, #256]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aab2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aab6:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800aab8:	e00a      	b.n	800aad0 <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aaba:	4b3e      	ldr	r3, [pc, #248]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	1e59      	subs	r1, r3, #1
 800aac0:	4a3c      	ldr	r2, [pc, #240]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aac2:	6011      	str	r1, [r2, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <I2C_ReadDeviceRegister+0xe0>
 800aac8:	f000 f966 	bl	800ad98 <IOE_TimeoutUserCallback>
 800aacc:	4603      	mov	r3, r0
 800aace:	e06b      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 800aad0:	4837      	ldr	r0, [pc, #220]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aad2:	493b      	ldr	r1, [pc, #236]	; (800abc0 <I2C_ReadDeviceRegister+0x1d0>)
 800aad4:	f7f8 ffe4 	bl	8003aa0 <I2C_GetFlagStatus>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0ed      	beq.n	800aaba <I2C_ReadDeviceRegister+0xca>
 800aade:	4834      	ldr	r0, [pc, #208]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aae0:	4938      	ldr	r1, [pc, #224]	; (800abc4 <I2C_ReadDeviceRegister+0x1d4>)
 800aae2:	f7f8 ffdd 	bl	8003aa0 <I2C_GetFlagStatus>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0e6      	beq.n	800aaba <I2C_ReadDeviceRegister+0xca>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800aaec:	4830      	ldr	r0, [pc, #192]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aaee:	2101      	movs	r1, #1
 800aaf0:	f7f8 fcda 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800aaf4:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800aaf6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aafa:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800aafc:	e00a      	b.n	800ab14 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800aafe:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	1e59      	subs	r1, r3, #1
 800ab04:	4a2b      	ldr	r2, [pc, #172]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab06:	6011      	str	r1, [r2, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d103      	bne.n	800ab14 <I2C_ReadDeviceRegister+0x124>
 800ab0c:	f000 f944 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ab10:	4603      	mov	r3, r0
 800ab12:	e049      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800ab14:	4826      	ldr	r0, [pc, #152]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab16:	4928      	ldr	r1, [pc, #160]	; (800abb8 <I2C_ReadDeviceRegister+0x1c8>)
 800ab18:	f7f8 ffc2 	bl	8003aa0 <I2C_GetFlagStatus>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0ed      	beq.n	800aafe <I2C_ReadDeviceRegister+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800ab22:	4823      	ldr	r0, [pc, #140]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab24:	2182      	movs	r1, #130	; 0x82
 800ab26:	2201      	movs	r2, #1
 800ab28:	f7f8 fcfe 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab2e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ab32:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ab34:	e00a      	b.n	800ab4c <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ab36:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	1e59      	subs	r1, r3, #1
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab3e:	6011      	str	r1, [r2, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d103      	bne.n	800ab4c <I2C_ReadDeviceRegister+0x15c>
 800ab44:	f000 f928 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	e02d      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ab4c:	4818      	ldr	r0, [pc, #96]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab4e:	491b      	ldr	r1, [pc, #108]	; (800abbc <I2C_ReadDeviceRegister+0x1cc>)
 800ab50:	f7f8 ffa6 	bl	8003aa0 <I2C_GetFlagStatus>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0ed      	beq.n	800ab36 <I2C_ReadDeviceRegister+0x146>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800ab5a:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab5c:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab60:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ab64:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800ab66:	e00a      	b.n	800ab7e <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ab68:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	1e59      	subs	r1, r3, #1
 800ab6e:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <I2C_ReadDeviceRegister+0x1c4>)
 800ab70:	6011      	str	r1, [r2, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d103      	bne.n	800ab7e <I2C_ReadDeviceRegister+0x18e>
 800ab76:	f000 f90f 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	e014      	b.n	800aba8 <I2C_ReadDeviceRegister+0x1b8>
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 800ab7e:	480c      	ldr	r0, [pc, #48]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab80:	4911      	ldr	r1, [pc, #68]	; (800abc8 <I2C_ReadDeviceRegister+0x1d8>)
 800ab82:	f7f8 ff8d 	bl	8003aa0 <I2C_GetFlagStatus>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0ed      	beq.n	800ab68 <I2C_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800ab8c:	4808      	ldr	r0, [pc, #32]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab8e:	2101      	movs	r1, #1
 800ab90:	f7f8 fcaa 	bl	80034e8 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 800ab94:	4806      	ldr	r0, [pc, #24]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800ab96:	f7f8 fe37 	bl	8003808 <I2C_ReceiveData>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800ab9e:	4804      	ldr	r0, [pc, #16]	; (800abb0 <I2C_ReadDeviceRegister+0x1c0>)
 800aba0:	2101      	movs	r1, #1
 800aba2:	f7f8 fcdf 	bl	8003564 <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40005c00 	andmi	r5, r0, r0, lsl #24
 800abb4:	2000005c 	andcs	r0, r0, ip, asr r0
 800abb8:	10000001 	andne	r0, r0, r1
 800abbc:	10000002 	andne	r0, r0, r2
 800abc0:	10000080 	andne	r0, r0, r0, lsl #1
 800abc4:	10000004 	andne	r0, r0, r4
 800abc8:	10000040 	andne	r0, r0, r0, asr #32

0800abcc <I2C_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 800abd4:	2300      	movs	r3, #0
 800abd6:	733b      	strb	r3, [r7, #12]
 800abd8:	2300      	movs	r3, #0
 800abda:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800abdc:	4868      	ldr	r0, [pc, #416]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800abde:	2101      	movs	r1, #1
 800abe0:	f7f8 fc62 	bl	80034a8 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800abe4:	4b67      	ldr	r3, [pc, #412]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800abe6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800abea:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800abec:	e00a      	b.n	800ac04 <I2C_ReadDataBuffer+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800abee:	4b65      	ldr	r3, [pc, #404]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	1e59      	subs	r1, r3, #1
 800abf4:	4a63      	ldr	r2, [pc, #396]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800abf6:	6011      	str	r1, [r2, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <I2C_ReadDataBuffer+0x38>
 800abfc:	f000 f8cc 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ac00:	4603      	mov	r3, r0
 800ac02:	e0b9      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800ac04:	485e      	ldr	r0, [pc, #376]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac06:	4960      	ldr	r1, [pc, #384]	; (800ad88 <I2C_ReadDataBuffer+0x1bc>)
 800ac08:	f7f8 ff4a 	bl	8003aa0 <I2C_GetFlagStatus>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0ed      	beq.n	800abee <I2C_ReadDataBuffer+0x22>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800ac12:	485b      	ldr	r0, [pc, #364]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac14:	2182      	movs	r1, #130	; 0x82
 800ac16:	2200      	movs	r2, #0
 800ac18:	f7f8 fc86 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 800ac1c:	4b59      	ldr	r3, [pc, #356]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac22:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ac24:	e00a      	b.n	800ac3c <I2C_ReadDataBuffer+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ac26:	4b57      	ldr	r3, [pc, #348]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	1e59      	subs	r1, r3, #1
 800ac2c:	4a55      	ldr	r2, [pc, #340]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac2e:	6011      	str	r1, [r2, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <I2C_ReadDataBuffer+0x70>
 800ac34:	f000 f8b0 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	e09d      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ac3c:	4850      	ldr	r0, [pc, #320]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac3e:	4953      	ldr	r1, [pc, #332]	; (800ad8c <I2C_ReadDataBuffer+0x1c0>)
 800ac40:	f7f8 ff2e 	bl	8003aa0 <I2C_GetFlagStatus>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0ed      	beq.n	800ac26 <I2C_ReadDataBuffer+0x5a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800ac4a:	4b4d      	ldr	r3, [pc, #308]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac4c:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ac4e:	4b4d      	ldr	r3, [pc, #308]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac54:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800ac56:	e00a      	b.n	800ac6e <I2C_ReadDataBuffer+0xa2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ac58:	4b4a      	ldr	r3, [pc, #296]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	1e59      	subs	r1, r3, #1
 800ac5e:	4a49      	ldr	r2, [pc, #292]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac60:	6011      	str	r1, [r2, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <I2C_ReadDataBuffer+0xa2>
 800ac66:	f000 f897 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	e084      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 800ac6e:	4844      	ldr	r0, [pc, #272]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac70:	4947      	ldr	r1, [pc, #284]	; (800ad90 <I2C_ReadDataBuffer+0x1c4>)
 800ac72:	f7f8 ff15 	bl	8003aa0 <I2C_GetFlagStatus>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0ed      	beq.n	800ac58 <I2C_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	483f      	ldr	r0, [pc, #252]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac82:	4619      	mov	r1, r3
 800ac84:	f7f8 fdb0 	bl	80037e8 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800ac88:	483d      	ldr	r0, [pc, #244]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	f7f8 fc0c 	bl	80034a8 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ac90:	4b3c      	ldr	r3, [pc, #240]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac92:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac96:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800ac98:	e00a      	b.n	800acb0 <I2C_ReadDataBuffer+0xe4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ac9a:	4b3a      	ldr	r3, [pc, #232]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	1e59      	subs	r1, r3, #1
 800aca0:	4a38      	ldr	r2, [pc, #224]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800aca2:	6011      	str	r1, [r2, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <I2C_ReadDataBuffer+0xe4>
 800aca8:	f000 f876 	bl	800ad98 <IOE_TimeoutUserCallback>
 800acac:	4603      	mov	r3, r0
 800acae:	e063      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 800acb0:	4833      	ldr	r0, [pc, #204]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800acb2:	4935      	ldr	r1, [pc, #212]	; (800ad88 <I2C_ReadDataBuffer+0x1bc>)
 800acb4:	f7f8 fef4 	bl	8003aa0 <I2C_GetFlagStatus>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0ed      	beq.n	800ac9a <I2C_ReadDataBuffer+0xce>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 800acbe:	4830      	ldr	r0, [pc, #192]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800acc0:	2182      	movs	r1, #130	; 0x82
 800acc2:	2201      	movs	r2, #1
 800acc4:	f7f8 fc30 	bl	8003528 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800acc8:	4b2e      	ldr	r3, [pc, #184]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800acca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800acce:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800acd0:	e00a      	b.n	800ace8 <I2C_ReadDataBuffer+0x11c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800acd2:	4b2c      	ldr	r3, [pc, #176]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	1e59      	subs	r1, r3, #1
 800acd8:	4a2a      	ldr	r2, [pc, #168]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800acda:	6011      	str	r1, [r2, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d103      	bne.n	800ace8 <I2C_ReadDataBuffer+0x11c>
 800ace0:	f000 f85a 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ace4:	4603      	mov	r3, r0
 800ace6:	e047      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 800ace8:	4825      	ldr	r0, [pc, #148]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800acea:	4928      	ldr	r1, [pc, #160]	; (800ad8c <I2C_ReadDataBuffer+0x1c0>)
 800acec:	f7f8 fed8 	bl	8003aa0 <I2C_GetFlagStatus>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0ed      	beq.n	800acd2 <I2C_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 800acf6:	4822      	ldr	r0, [pc, #136]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800acf8:	2100      	movs	r1, #0
 800acfa:	f7f8 fc33 	bl	8003564 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 800acfe:	4820      	ldr	r0, [pc, #128]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad04:	f7f8 fd10 	bl	8003728 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad0a:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 800ad0c:	4b1d      	ldr	r3, [pc, #116]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ad0e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ad12:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800ad14:	e00a      	b.n	800ad2c <I2C_ReadDataBuffer+0x160>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800ad16:	4b1b      	ldr	r3, [pc, #108]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	1e59      	subs	r1, r3, #1
 800ad1c:	4a19      	ldr	r2, [pc, #100]	; (800ad84 <I2C_ReadDataBuffer+0x1b8>)
 800ad1e:	6011      	str	r1, [r2, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d103      	bne.n	800ad2c <I2C_ReadDataBuffer+0x160>
 800ad24:	f000 f838 	bl	800ad98 <IOE_TimeoutUserCallback>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	e025      	b.n	800ad78 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 800ad2c:	4814      	ldr	r0, [pc, #80]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad2e:	4919      	ldr	r1, [pc, #100]	; (800ad94 <I2C_ReadDataBuffer+0x1c8>)
 800ad30:	f7f8 feb6 	bl	8003aa0 <I2C_GetFlagStatus>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0ed      	beq.n	800ad16 <I2C_ReadDataBuffer+0x14a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800ad3a:	4811      	ldr	r0, [pc, #68]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	f7f8 fbd3 	bl	80034e8 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 800ad42:	480f      	ldr	r0, [pc, #60]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad44:	f7f8 fd60 	bl	8003808 <I2C_ReceiveData>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 800ad4c:	480c      	ldr	r0, [pc, #48]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad4e:	f7f8 fd5b 	bl	8003808 <I2C_ReceiveData>
 800ad52:	4603      	mov	r3, r0
 800ad54:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 800ad56:	480a      	ldr	r0, [pc, #40]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad58:	2101      	movs	r1, #1
 800ad5a:	f7f8 fc03 	bl	8003564 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 800ad5e:	4808      	ldr	r0, [pc, #32]	; (800ad80 <I2C_ReadDataBuffer+0x1b4>)
 800ad60:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800ad64:	f7f8 fce0 	bl	8003728 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 800ad68:	7b3b      	ldrb	r3, [r7, #12]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	7b7b      	ldrb	r3, [r7, #13]
 800ad6e:	021b      	lsls	r3, r3, #8
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	b29b      	uxth	r3, r3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	40005c00 	andmi	r5, r0, r0, lsl #24
 800ad84:	2000005c 	andcs	r0, r0, ip, asr r0
 800ad88:	10000001 	andne	r0, r0, r1
 800ad8c:	10000002 	andne	r0, r0, r2
 800ad90:	10000080 	andne	r0, r0, r0, lsl #1
 800ad94:	10000004 	andne	r0, r0, r4

0800ad98 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800ad9e:	4817      	ldr	r0, [pc, #92]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800ada0:	2101      	movs	r1, #1
 800ada2:	f7f8 fba1 	bl	80034e8 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 800ada6:	4815      	ldr	r0, [pc, #84]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800ada8:	2101      	movs	r1, #1
 800adaa:	f7f8 fc5b 	bl	8003664 <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 800adae:	4813      	ldr	r0, [pc, #76]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800adb0:	2100      	movs	r1, #0
 800adb2:	f7f8 fc57 	bl	8003664 <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 800adb6:	f7ff fcab 	bl	800a710 <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 800adba:	4810      	ldr	r0, [pc, #64]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800adbc:	f7f8 f9fa 	bl	80031b4 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800adc0:	2300      	movs	r3, #0
 800adc2:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800adc4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800adc8:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800adca:	2300      	movs	r3, #0
 800adcc:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800adce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add2:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800add4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800add8:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <IOE_TimeoutUserCallback+0x68>)
 800addc:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800adde:	4807      	ldr	r0, [pc, #28]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800ade0:	2101      	movs	r1, #1
 800ade2:	f7f8 fb01 	bl	80033e8 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 800ade6:	463b      	mov	r3, r7
 800ade8:	4804      	ldr	r0, [pc, #16]	; (800adfc <IOE_TimeoutUserCallback+0x64>)
 800adea:	4619      	mov	r1, r3
 800adec:	f7f8 fa1c 	bl	8003228 <I2C_Init>
  
  return 0;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	40005c00 	andmi	r5, r0, r0, lsl #24
 800ae00:	000186a0 	andeq	r8, r1, r0, lsr #13

0800ae04 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <delay+0x30>)
 800ae14:	fb02 f303 	mul.w	r3, r2, r3
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e002      	b.n	800ae22 <delay+0x1e>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1f9      	bne.n	800ae1c <delay+0x18>
  {
  }
}
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	000186a0 	andeq	r8, r1, r0, lsr #13

0800ae38 <atan>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae40:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ae44:	f2c4 430f 	movt	r3, #17423	; 0x440f
 800ae48:	4598      	cmp	r8, r3
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	4683      	mov	fp, r0
 800ae4e:	468a      	mov	sl, r1
 800ae50:	460f      	mov	r7, r1
 800ae52:	dd23      	ble.n	800ae9c <atan+0x64>
 800ae54:	2100      	movs	r1, #0
 800ae56:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 800ae5a:	4588      	cmp	r8, r1
 800ae5c:	f300 80d1 	bgt.w	800b002 <atan+0x1ca>
 800ae60:	bf14      	ite	ne
 800ae62:	2300      	movne	r3, #0
 800ae64:	2301      	moveq	r3, #1
 800ae66:	2800      	cmp	r0, #0
 800ae68:	bf0c      	ite	eq
 800ae6a:	2200      	moveq	r2, #0
 800ae6c:	f003 0201 	andne.w	r2, r3, #1
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	f040 80c6 	bne.w	800b002 <atan+0x1ca>
 800ae76:	f242 1afb 	movw	sl, #8699	; 0x21fb
 800ae7a:	4653      	mov	r3, sl
 800ae7c:	f6c3 73f9 	movt	r3, #16377	; 0x3ff9
 800ae80:	f6cb 7af9 	movt	sl, #49145	; 0xbff9
 800ae84:	f642 5b18 	movw	fp, #11544	; 0x2d18
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	bfc8      	it	gt
 800ae8c:	469a      	movgt	sl, r3
 800ae8e:	f2c5 4b44 	movt	fp, #21572	; 0x5444
 800ae92:	4658      	mov	r0, fp
 800ae94:	4651      	mov	r1, sl
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aea0:	f6c3 73db 	movt	r3, #16347	; 0x3fdb
 800aea4:	4598      	cmp	r8, r3
 800aea6:	f300 80cc 	bgt.w	800b042 <atan+0x20a>
 800aeaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aeae:	f6c3 631f 	movt	r3, #15903	; 0x3e1f
 800aeb2:	4598      	cmp	r8, r3
 800aeb4:	f340 80b2 	ble.w	800b01c <atan+0x1e4>
 800aeb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800aebc:	465a      	mov	r2, fp
 800aebe:	4653      	mov	r3, sl
 800aec0:	4658      	mov	r0, fp
 800aec2:	4651      	mov	r1, sl
 800aec4:	f8cd c004 	str.w	ip, [sp, #4]
 800aec8:	f7f5 fb34 	bl	8000534 <__aeabi_dmul>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4680      	mov	r8, r0
 800aed2:	4689      	mov	r9, r1
 800aed4:	f7f5 fb2e 	bl	8000534 <__aeabi_dmul>
 800aed8:	a3a1      	add	r3, pc, #644	; (adr r3, 800b160 <atan+0x328>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	f7f5 fb27 	bl	8000534 <__aeabi_dmul>
 800aee6:	a3a0      	add	r3, pc, #640	; (adr r3, 800b168 <atan+0x330>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 f970 	bl	80001d0 <__adddf3>
 800aef0:	4622      	mov	r2, r4
 800aef2:	462b      	mov	r3, r5
 800aef4:	f7f5 fb1e 	bl	8000534 <__aeabi_dmul>
 800aef8:	a39d      	add	r3, pc, #628	; (adr r3, 800b170 <atan+0x338>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 f967 	bl	80001d0 <__adddf3>
 800af02:	4622      	mov	r2, r4
 800af04:	462b      	mov	r3, r5
 800af06:	f7f5 fb15 	bl	8000534 <__aeabi_dmul>
 800af0a:	a39b      	add	r3, pc, #620	; (adr r3, 800b178 <atan+0x340>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 f95e 	bl	80001d0 <__adddf3>
 800af14:	4622      	mov	r2, r4
 800af16:	462b      	mov	r3, r5
 800af18:	f7f5 fb0c 	bl	8000534 <__aeabi_dmul>
 800af1c:	a398      	add	r3, pc, #608	; (adr r3, 800b180 <atan+0x348>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f7f5 f955 	bl	80001d0 <__adddf3>
 800af26:	4622      	mov	r2, r4
 800af28:	462b      	mov	r3, r5
 800af2a:	f7f5 fb03 	bl	8000534 <__aeabi_dmul>
 800af2e:	a396      	add	r3, pc, #600	; (adr r3, 800b188 <atan+0x350>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 f94c 	bl	80001d0 <__adddf3>
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	f7f5 fafa 	bl	8000534 <__aeabi_dmul>
 800af40:	a393      	add	r3, pc, #588	; (adr r3, 800b190 <atan+0x358>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	4680      	mov	r8, r0
 800af48:	4689      	mov	r9, r1
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	f7f5 faf1 	bl	8000534 <__aeabi_dmul>
 800af52:	a391      	add	r3, pc, #580	; (adr r3, 800b198 <atan+0x360>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f938 	bl	80001cc <__aeabi_dsub>
 800af5c:	4622      	mov	r2, r4
 800af5e:	462b      	mov	r3, r5
 800af60:	f7f5 fae8 	bl	8000534 <__aeabi_dmul>
 800af64:	a38e      	add	r3, pc, #568	; (adr r3, 800b1a0 <atan+0x368>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f7f5 f92f 	bl	80001cc <__aeabi_dsub>
 800af6e:	4622      	mov	r2, r4
 800af70:	462b      	mov	r3, r5
 800af72:	f7f5 fadf 	bl	8000534 <__aeabi_dmul>
 800af76:	a38c      	add	r3, pc, #560	; (adr r3, 800b1a8 <atan+0x370>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f7f5 f926 	bl	80001cc <__aeabi_dsub>
 800af80:	4622      	mov	r2, r4
 800af82:	462b      	mov	r3, r5
 800af84:	f7f5 fad6 	bl	8000534 <__aeabi_dmul>
 800af88:	a389      	add	r3, pc, #548	; (adr r3, 800b1b0 <atan+0x378>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 f91d 	bl	80001cc <__aeabi_dsub>
 800af92:	4622      	mov	r2, r4
 800af94:	462b      	mov	r3, r5
 800af96:	f7f5 facd 	bl	8000534 <__aeabi_dmul>
 800af9a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800af9e:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	d07a      	beq.n	800b09e <atan+0x266>
 800afa8:	4640      	mov	r0, r8
 800afaa:	4649      	mov	r1, r9
 800afac:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800afb0:	f7f5 f90e 	bl	80001d0 <__adddf3>
 800afb4:	465a      	mov	r2, fp
 800afb6:	4653      	mov	r3, sl
 800afb8:	f7f5 fabc 	bl	8000534 <__aeabi_dmul>
 800afbc:	f24f 3c60 	movw	ip, #62304	; 0xf360
 800afc0:	f6c0 0c00 	movt	ip, #2048	; 0x800
 800afc4:	44a4      	add	ip, r4
 800afc6:	e9dc 2300 	ldrd	r2, r3, [ip]
 800afca:	f7f5 f8ff 	bl	80001cc <__aeabi_dsub>
 800afce:	465a      	mov	r2, fp
 800afd0:	4653      	mov	r3, sl
 800afd2:	f7f5 f8fb 	bl	80001cc <__aeabi_dsub>
 800afd6:	f24f 3580 	movw	r5, #62336	; 0xf380
 800afda:	f6c0 0500 	movt	r5, #2048	; 0x800
 800afde:	4425      	add	r5, r4
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800afe8:	f7f5 f8f0 	bl	80001cc <__aeabi_dsub>
 800afec:	2f00      	cmp	r7, #0
 800afee:	468a      	mov	sl, r1
 800aff0:	4683      	mov	fp, r0
 800aff2:	bfb8      	it	lt
 800aff4:	f101 4a00 	addlt.w	sl, r1, #2147483648	; 0x80000000
 800aff8:	4658      	mov	r0, fp
 800affa:	4651      	mov	r1, sl
 800affc:	b003      	add	sp, #12
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	4658      	mov	r0, fp
 800b004:	4651      	mov	r1, sl
 800b006:	465a      	mov	r2, fp
 800b008:	4653      	mov	r3, sl
 800b00a:	f7f5 f8e1 	bl	80001d0 <__adddf3>
 800b00e:	4683      	mov	fp, r0
 800b010:	468a      	mov	sl, r1
 800b012:	4658      	mov	r0, fp
 800b014:	4651      	mov	r1, sl
 800b016:	b003      	add	sp, #12
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	a366      	add	r3, pc, #408	; (adr r3, 800b1b8 <atan+0x380>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f7f5 f8d5 	bl	80001d0 <__adddf3>
 800b026:	2300      	movs	r3, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b02e:	f7f5 fd11 	bl	8000a54 <__aeabi_dcmpgt>
 800b032:	2800      	cmp	r0, #0
 800b034:	f43f af40 	beq.w	800aeb8 <atan+0x80>
 800b038:	4658      	mov	r0, fp
 800b03a:	4651      	mov	r1, sl
 800b03c:	b003      	add	sp, #12
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	f000 f8bd 	bl	800b1c0 <fabs>
 800b046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b04a:	f6c3 73f2 	movt	r3, #16370	; 0x3ff2
 800b04e:	4598      	cmp	r8, r3
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	dc34      	bgt.n	800b0c0 <atan+0x288>
 800b056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b05a:	f6c3 73e5 	movt	r3, #16357	; 0x3fe5
 800b05e:	4598      	cmp	r8, r3
 800b060:	dc62      	bgt.n	800b128 <atan+0x2f0>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	f7f5 f8b3 	bl	80001d0 <__adddf3>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2200      	movs	r2, #0
 800b06e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b072:	f7f5 f8ab 	bl	80001cc <__aeabi_dsub>
 800b076:	2200      	movs	r2, #0
 800b078:	4680      	mov	r8, r0
 800b07a:	4689      	mov	r9, r1
 800b07c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b080:	4620      	mov	r0, r4
 800b082:	4629      	mov	r1, r5
 800b084:	f7f5 f8a4 	bl	80001d0 <__adddf3>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4640      	mov	r0, r8
 800b08e:	4649      	mov	r1, r9
 800b090:	f7f5 fb7a 	bl	8000788 <__aeabi_ddiv>
 800b094:	f04f 0c00 	mov.w	ip, #0
 800b098:	4683      	mov	fp, r0
 800b09a:	468a      	mov	sl, r1
 800b09c:	e70e      	b.n	800aebc <atan+0x84>
 800b09e:	4640      	mov	r0, r8
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	f7f5 f895 	bl	80001d0 <__adddf3>
 800b0a6:	465a      	mov	r2, fp
 800b0a8:	4653      	mov	r3, sl
 800b0aa:	f7f5 fa43 	bl	8000534 <__aeabi_dmul>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4658      	mov	r0, fp
 800b0b4:	4651      	mov	r1, sl
 800b0b6:	f7f5 f889 	bl	80001cc <__aeabi_dsub>
 800b0ba:	4683      	mov	fp, r0
 800b0bc:	468a      	mov	sl, r1
 800b0be:	e7a8      	b.n	800b012 <atan+0x1da>
 800b0c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b0c4:	f2c4 0303 	movt	r3, #16387	; 0x4003
 800b0c8:	4598      	cmp	r8, r3
 800b0ca:	dc20      	bgt.n	800b10e <atan+0x2d6>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800b0d4:	f7f5 f87a 	bl	80001cc <__aeabi_dsub>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4689      	mov	r9, r1
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 fa24 	bl	8000534 <__aeabi_dmul>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b0f4:	f7f5 f86c 	bl	80001d0 <__adddf3>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fb42 	bl	8000788 <__aeabi_ddiv>
 800b104:	f04f 0c02 	mov.w	ip, #2
 800b108:	4683      	mov	fp, r0
 800b10a:	468a      	mov	sl, r1
 800b10c:	e6d6      	b.n	800aebc <atan+0x84>
 800b10e:	460b      	mov	r3, r1
 800b110:	2100      	movs	r1, #0
 800b112:	4602      	mov	r2, r0
 800b114:	f6cb 71f0 	movt	r1, #49136	; 0xbff0
 800b118:	2000      	movs	r0, #0
 800b11a:	f7f5 fb35 	bl	8000788 <__aeabi_ddiv>
 800b11e:	f04f 0c03 	mov.w	ip, #3
 800b122:	4683      	mov	fp, r0
 800b124:	468a      	mov	sl, r1
 800b126:	e6c9      	b.n	800aebc <atan+0x84>
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b130:	f7f5 f84c 	bl	80001cc <__aeabi_dsub>
 800b134:	2300      	movs	r3, #0
 800b136:	4680      	mov	r8, r0
 800b138:	4689      	mov	r9, r1
 800b13a:	2200      	movs	r2, #0
 800b13c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b140:	4620      	mov	r0, r4
 800b142:	4629      	mov	r1, r5
 800b144:	f7f5 f844 	bl	80001d0 <__adddf3>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4640      	mov	r0, r8
 800b14e:	4649      	mov	r1, r9
 800b150:	f7f5 fb1a 	bl	8000788 <__aeabi_ddiv>
 800b154:	f04f 0c01 	mov.w	ip, #1
 800b158:	4683      	mov	fp, r0
 800b15a:	468a      	mov	sl, r1
 800b15c:	e6ae      	b.n	800aebc <atan+0x84>
 800b15e:	bf00      	nop
 800b160:	e322da11 	teq	r2, #69632	; 0x11000
 800b164:	3f90ad3a 	svccc	0x0090ad3a
 800b168:	24760deb 	ldrbtcs	r0, [r6], #-3563	; 0xdeb
 800b16c:	3fa97b4b 	svccc	0x00a97b4b
 800b170:	a0d03d51 	sbcsge	r3, r0, r1, asr sp
 800b174:	3fb10d66 	svccc	0x00b10d66
 800b178:	c54c206e 	strbgt	r2, [ip, #-110]	; 0x6e
 800b17c:	3fb745cd 	svccc	0x00b745cd
 800b180:	920083ff 	andls	r8, r0, #-67108861	; 0xfc000003
 800b184:	3fc24924 	svccc	0x00c24924
 800b188:	5555550d 	ldrbpl	r5, [r5, #-1293]	; 0x50d
 800b18c:	3fd55555 	svccc	0x00d55555
 800b190:	2c6a6c2f 	stclcs	12, cr6, [sl], #-188	; 0xffffff44
 800b194:	bfa2b444 	svclt	0x00a2b444
 800b198:	52defd9a 	sbcspl	pc, lr, #9856	; 0x2680
 800b19c:	3fadde2d 	svccc	0x00adde2d
 800b1a0:	af749a6d 	svcge	0x00749a6d
 800b1a4:	3fb3b0f2 	svccc	0x00b3b0f2
 800b1a8:	fe231671 	mcr2	6, 1, r1, cr3, cr1, {3}
 800b1ac:	3fbc71c6 	svccc	0x00bc71c6
 800b1b0:	9998ebc4 	ldmibls	r8, {r2, r6, r7, r8, r9, fp, sp, lr, pc}
 800b1b4:	3fc99999 	svccc	0x00c99999
 800b1b8:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800b1bc:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}

0800b1c0 <fabs>:
 800b1c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop

0800b1c8 <asin>:
 800b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	f240 0860 	movw	r8, #96	; 0x60
 800b1d0:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800b1d4:	b08a      	sub	sp, #40	; 0x28
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	460d      	mov	r5, r1
 800b1da:	f000 f9e5 	bl	800b5a8 <__ieee754_asin>
 800b1de:	f998 3000 	ldrsb.w	r3, [r8]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
 800b1e8:	d004      	beq.n	800b1f4 <asin+0x2c>
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f001 fa5d 	bl	800c6ac <__fpclassifyd>
 800b1f2:	b920      	cbnz	r0, 800b1fe <asin+0x36>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	b00a      	add	sp, #40	; 0x28
 800b1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1fe:	4620      	mov	r0, r4
 800b200:	4629      	mov	r1, r5
 800b202:	f7ff ffdd 	bl	800b1c0 <fabs>
 800b206:	2300      	movs	r3, #0
 800b208:	2200      	movs	r2, #0
 800b20a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b20e:	f7f5 fc21 	bl	8000a54 <__aeabi_dcmpgt>
 800b212:	2800      	cmp	r0, #0
 800b214:	d0ee      	beq.n	800b1f4 <asin+0x2c>
 800b216:	f24f 33a0 	movw	r3, #62368	; 0xf3a0
 800b21a:	f24f 30a4 	movw	r0, #62372	; 0xf3a4
 800b21e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b222:	2101      	movs	r1, #1
 800b224:	2200      	movs	r2, #0
 800b226:	f6c0 0000 	movt	r0, #2048	; 0x800
 800b22a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800b22e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b232:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b236:	9208      	str	r2, [sp, #32]
 800b238:	f001 fa62 	bl	800c700 <nan>
 800b23c:	f998 3000 	ldrsb.w	r3, [r8]
 800b240:	2b02      	cmp	r3, #2
 800b242:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b246:	d00a      	beq.n	800b25e <asin+0x96>
 800b248:	4668      	mov	r0, sp
 800b24a:	f001 fa57 	bl	800c6fc <matherr>
 800b24e:	b130      	cbz	r0, 800b25e <asin+0x96>
 800b250:	9b08      	ldr	r3, [sp, #32]
 800b252:	b94b      	cbnz	r3, 800b268 <asin+0xa0>
 800b254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b258:	b00a      	add	sp, #40	; 0x28
 800b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25e:	f001 fb7d 	bl	800c95c <__errno>
 800b262:	2321      	movs	r3, #33	; 0x21
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	e7f3      	b.n	800b250 <asin+0x88>
 800b268:	f001 fb78 	bl	800c95c <__errno>
 800b26c:	9b08      	ldr	r3, [sp, #32]
 800b26e:	6003      	str	r3, [r0, #0]
 800b270:	e7f0      	b.n	800b254 <asin+0x8c>
 800b272:	bf00      	nop

0800b274 <pow>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	f240 0a60 	movw	sl, #96	; 0x60
 800b27c:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800b280:	b08b      	sub	sp, #44	; 0x2c
 800b282:	461d      	mov	r5, r3
 800b284:	4680      	mov	r8, r0
 800b286:	4689      	mov	r9, r1
 800b288:	4614      	mov	r4, r2
 800b28a:	f000 fba1 	bl	800b9d0 <__ieee754_pow>
 800b28e:	f99a 3000 	ldrsb.w	r3, [sl]
 800b292:	3301      	adds	r3, #1
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	d004      	beq.n	800b2a4 <pow+0x30>
 800b29a:	4620      	mov	r0, r4
 800b29c:	4629      	mov	r1, r5
 800b29e:	f001 fa05 	bl	800c6ac <__fpclassifyd>
 800b2a2:	b920      	cbnz	r0, 800b2ae <pow+0x3a>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	b00b      	add	sp, #44	; 0x2c
 800b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	f001 f9fb 	bl	800c6ac <__fpclassifyd>
 800b2b6:	4683      	mov	fp, r0
 800b2b8:	bb30      	cbnz	r0, 800b308 <pow+0x94>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	4629      	mov	r1, r5
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f7f5 fb9f 	bl	8000a04 <__aeabi_dcmpeq>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d0ec      	beq.n	800b2a4 <pow+0x30>
 800b2ca:	f99a 0000 	ldrsb.w	r0, [sl]
 800b2ce:	f8cd b020 	str.w	fp, [sp, #32]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f24f 31a8 	movw	r1, #62376	; 0xf3a8
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b2de:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b2e2:	2601      	movs	r6, #1
 800b2e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b2e8:	bf18      	it	ne
 800b2ea:	2802      	cmpne	r0, #2
 800b2ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b2f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b2f4:	9101      	str	r1, [sp, #4]
 800b2f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b2fa:	9600      	str	r6, [sp, #0]
 800b2fc:	d132      	bne.n	800b364 <pow+0xf0>
 800b2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b302:	b00b      	add	sp, #44	; 0x2c
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	4640      	mov	r0, r8
 800b30a:	4649      	mov	r1, r9
 800b30c:	2200      	movs	r2, #0
 800b30e:	2300      	movs	r3, #0
 800b310:	f7f5 fb78 	bl	8000a04 <__aeabi_dcmpeq>
 800b314:	2800      	cmp	r0, #0
 800b316:	d032      	beq.n	800b37e <pow+0x10a>
 800b318:	4620      	mov	r0, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	f7f5 fb70 	bl	8000a04 <__aeabi_dcmpeq>
 800b324:	4683      	mov	fp, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	d068      	beq.n	800b3fc <pow+0x188>
 800b32a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b32e:	2400      	movs	r4, #0
 800b330:	2500      	movs	r5, #0
 800b332:	f24f 33a8 	movw	r3, #62376	; 0xf3a8
 800b336:	ec45 4b17 	vmov	d7, r4, r5
 800b33a:	f99a 2000 	ldrsb.w	r2, [sl]
 800b33e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b342:	2001      	movs	r0, #1
 800b344:	2100      	movs	r1, #0
 800b346:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b34a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b34e:	e88d 0009 	stmia.w	sp, {r0, r3}
 800b352:	9108      	str	r1, [sp, #32]
 800b354:	b132      	cbz	r2, 800b364 <pow+0xf0>
 800b356:	2300      	movs	r3, #0
 800b358:	2200      	movs	r2, #0
 800b35a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b35e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b362:	e7cc      	b.n	800b2fe <pow+0x8a>
 800b364:	4668      	mov	r0, sp
 800b366:	f001 f9c9 	bl	800c6fc <matherr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d074      	beq.n	800b458 <pow+0x1e4>
 800b36e:	9b08      	ldr	r3, [sp, #32]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0c4      	beq.n	800b2fe <pow+0x8a>
 800b374:	f001 faf2 	bl	800c95c <__errno>
 800b378:	9b08      	ldr	r3, [sp, #32]
 800b37a:	6003      	str	r3, [r0, #0]
 800b37c:	e7bf      	b.n	800b2fe <pow+0x8a>
 800b37e:	4630      	mov	r0, r6
 800b380:	4639      	mov	r1, r7
 800b382:	f001 f98d 	bl	800c6a0 <finite>
 800b386:	4683      	mov	fp, r0
 800b388:	2800      	cmp	r0, #0
 800b38a:	d06a      	beq.n	800b462 <pow+0x1ee>
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	2200      	movs	r2, #0
 800b392:	2300      	movs	r3, #0
 800b394:	f7f5 fb36 	bl	8000a04 <__aeabi_dcmpeq>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d083      	beq.n	800b2a4 <pow+0x30>
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	f001 f97e 	bl	800c6a0 <finite>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	f43f af7d 	beq.w	800b2a4 <pow+0x30>
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f001 f977 	bl	800c6a0 <finite>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	f43f af76 	beq.w	800b2a4 <pow+0x30>
 800b3b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b3bc:	f99a 2000 	ldrsb.w	r2, [sl]
 800b3c0:	2400      	movs	r4, #0
 800b3c2:	2500      	movs	r5, #0
 800b3c4:	f24f 33a8 	movw	r3, #62376	; 0xf3a8
 800b3c8:	ec45 4b17 	vmov	d7, r4, r5
 800b3cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b3d0:	2004      	movs	r0, #4
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2a02      	cmp	r2, #2
 800b3d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b3da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3de:	e88d 0009 	stmia.w	sp, {r0, r3}
 800b3e2:	9108      	str	r1, [sp, #32]
 800b3e4:	f000 808d 	beq.w	800b502 <pow+0x28e>
 800b3e8:	4668      	mov	r0, sp
 800b3ea:	f001 f987 	bl	800c6fc <matherr>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	f000 8087 	beq.w	800b502 <pow+0x28e>
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d081      	beq.n	800b2fe <pow+0x8a>
 800b3fa:	e7bb      	b.n	800b374 <pow+0x100>
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f001 f94e 	bl	800c6a0 <finite>
 800b404:	2800      	cmp	r0, #0
 800b406:	f43f af4d 	beq.w	800b2a4 <pow+0x30>
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	f7f5 fb01 	bl	8000a18 <__aeabi_dcmplt>
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f af44 	beq.w	800b2a4 <pow+0x30>
 800b41c:	f24f 33a8 	movw	r3, #62376	; 0xf3a8
 800b420:	f89a 1000 	ldrb.w	r1, [sl]
 800b424:	f8cd b020 	str.w	fp, [sp, #32]
 800b428:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b42c:	2201      	movs	r2, #1
 800b42e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b432:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b436:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b43a:	2200      	movs	r2, #0
 800b43c:	2300      	movs	r3, #0
 800b43e:	2900      	cmp	r1, #0
 800b440:	d032      	beq.n	800b4a8 <pow+0x234>
 800b442:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
 800b446:	2902      	cmp	r1, #2
 800b448:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b44c:	d12e      	bne.n	800b4ac <pow+0x238>
 800b44e:	f001 fa85 	bl	800c95c <__errno>
 800b452:	2321      	movs	r3, #33	; 0x21
 800b454:	6003      	str	r3, [r0, #0]
 800b456:	e7cd      	b.n	800b3f4 <pow+0x180>
 800b458:	f001 fa80 	bl	800c95c <__errno>
 800b45c:	2321      	movs	r3, #33	; 0x21
 800b45e:	6003      	str	r3, [r0, #0]
 800b460:	e785      	b.n	800b36e <pow+0xfa>
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f001 f91b 	bl	800c6a0 <finite>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d08e      	beq.n	800b38c <pow+0x118>
 800b46e:	4620      	mov	r0, r4
 800b470:	4629      	mov	r1, r5
 800b472:	f001 f915 	bl	800c6a0 <finite>
 800b476:	2800      	cmp	r0, #0
 800b478:	d088      	beq.n	800b38c <pow+0x118>
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f001 f915 	bl	800c6ac <__fpclassifyd>
 800b482:	b9c8      	cbnz	r0, 800b4b8 <pow+0x244>
 800b484:	f24f 33a8 	movw	r3, #62376	; 0xf3a8
 800b488:	f89a 6000 	ldrb.w	r6, [sl]
 800b48c:	9008      	str	r0, [sp, #32]
 800b48e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b492:	2201      	movs	r2, #1
 800b494:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b498:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b49c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	d133      	bne.n	800b50c <pow+0x298>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4ac:	4668      	mov	r0, sp
 800b4ae:	f001 f925 	bl	800c6fc <matherr>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d19e      	bne.n	800b3f4 <pow+0x180>
 800b4b6:	e7ca      	b.n	800b44e <pow+0x1da>
 800b4b8:	f24f 33a8 	movw	r3, #62376	; 0xf3a8
 800b4bc:	f99a 2000 	ldrsb.w	r2, [sl]
 800b4c0:	f8cd b020 	str.w	fp, [sp, #32]
 800b4c4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b4c8:	2103      	movs	r1, #3
 800b4ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b4ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b4d2:	e88d 000a 	stmia.w	sp, {r1, r3}
 800b4d6:	bb22      	cbnz	r2, 800b522 <pow+0x2ae>
 800b4d8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800b4dc:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 800b4e0:	f2c4 77ef 	movt	r7, #18415	; 0x47ef
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4f0:	f7f5 fa92 	bl	8000a18 <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d13b      	bne.n	800b570 <pow+0x2fc>
 800b4f8:	f99a 3000 	ldrsb.w	r3, [sl]
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	f47f af73 	bne.w	800b3e8 <pow+0x174>
 800b502:	f001 fa2b 	bl	800c95c <__errno>
 800b506:	2322      	movs	r3, #34	; 0x22
 800b508:	6003      	str	r3, [r0, #0]
 800b50a:	e773      	b.n	800b3f4 <pow+0x180>
 800b50c:	2000      	movs	r0, #0
 800b50e:	2100      	movs	r1, #0
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	f7f5 f938 	bl	8000788 <__aeabi_ddiv>
 800b518:	2e02      	cmp	r6, #2
 800b51a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b51e:	d096      	beq.n	800b44e <pow+0x1da>
 800b520:	e7c4      	b.n	800b4ac <pow+0x238>
 800b522:	2700      	movs	r7, #0
 800b524:	2600      	movs	r6, #0
 800b526:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800b52a:	4640      	mov	r0, r8
 800b52c:	4649      	mov	r1, r9
 800b52e:	2200      	movs	r2, #0
 800b530:	2300      	movs	r3, #0
 800b532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b536:	f7f5 fa6f 	bl	8000a18 <__aeabi_dcmplt>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d0dc      	beq.n	800b4f8 <pow+0x284>
 800b53e:	2300      	movs	r3, #0
 800b540:	2200      	movs	r2, #0
 800b542:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b546:	4620      	mov	r0, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	f7f4 fff3 	bl	8000534 <__aeabi_dmul>
 800b54e:	4604      	mov	r4, r0
 800b550:	460d      	mov	r5, r1
 800b552:	f001 f8db 	bl	800c70c <rint>
 800b556:	4622      	mov	r2, r4
 800b558:	462b      	mov	r3, r5
 800b55a:	f7f5 fa53 	bl	8000a04 <__aeabi_dcmpeq>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d1ca      	bne.n	800b4f8 <pow+0x284>
 800b562:	2300      	movs	r3, #0
 800b564:	2200      	movs	r2, #0
 800b566:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
 800b56a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b56e:	e7c3      	b.n	800b4f8 <pow+0x284>
 800b570:	2300      	movs	r3, #0
 800b572:	2200      	movs	r2, #0
 800b574:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b578:	4620      	mov	r0, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	f7f4 ffda 	bl	8000534 <__aeabi_dmul>
 800b580:	4604      	mov	r4, r0
 800b582:	460d      	mov	r5, r1
 800b584:	f001 f8c2 	bl	800c70c <rint>
 800b588:	4622      	mov	r2, r4
 800b58a:	462b      	mov	r3, r5
 800b58c:	f7f5 fa3a 	bl	8000a04 <__aeabi_dcmpeq>
 800b590:	2800      	cmp	r0, #0
 800b592:	d1b1      	bne.n	800b4f8 <pow+0x284>
 800b594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b598:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b59c:	f2cc 73ef 	movt	r3, #51183	; 0xc7ef
 800b5a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5a4:	e7a8      	b.n	800b4f8 <pow+0x284>
 800b5a6:	bf00      	nop

0800b5a8 <__ieee754_asin>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5b0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b5b4:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800b5b8:	4598      	cmp	r8, r3
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	4682      	mov	sl, r0
 800b5be:	4689      	mov	r9, r1
 800b5c0:	460f      	mov	r7, r1
 800b5c2:	dd16      	ble.n	800b5f2 <__ieee754_asin+0x4a>
 800b5c4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b5c8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b5cc:	ea58 0800 	orrs.w	r8, r8, r0
 800b5d0:	f000 810f 	beq.w	800b7f2 <__ieee754_asin+0x24a>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	f7f4 fdf8 	bl	80001cc <__aeabi_dsub>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	f7f5 f8d2 	bl	8000788 <__aeabi_ddiv>
 800b5e4:	4682      	mov	sl, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	b007      	add	sp, #28
 800b5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5f6:	f6c3 73df 	movt	r3, #16351	; 0x3fdf
 800b5fa:	4598      	cmp	r8, r3
 800b5fc:	dc10      	bgt.n	800b620 <__ieee754_asin+0x78>
 800b5fe:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b602:	f280 8134 	bge.w	800b86e <__ieee754_asin+0x2c6>
 800b606:	a3d6      	add	r3, pc, #856	; (adr r3, 800b960 <__ieee754_asin+0x3b8>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f4 fde0 	bl	80001d0 <__adddf3>
 800b610:	2300      	movs	r3, #0
 800b612:	2200      	movs	r2, #0
 800b614:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b618:	f7f5 fa1c 	bl	8000a54 <__aeabi_dcmpgt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1e3      	bne.n	800b5e8 <__ieee754_asin+0x40>
 800b620:	4650      	mov	r0, sl
 800b622:	4649      	mov	r1, r9
 800b624:	f7ff fdcc 	bl	800b1c0 <fabs>
 800b628:	460b      	mov	r3, r1
 800b62a:	2100      	movs	r1, #0
 800b62c:	4602      	mov	r2, r0
 800b62e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b632:	2000      	movs	r0, #0
 800b634:	f7f4 fdca 	bl	80001cc <__aeabi_dsub>
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b640:	f7f4 ff78 	bl	8000534 <__aeabi_dmul>
 800b644:	a3c8      	add	r3, pc, #800	; (adr r3, 800b968 <__ieee754_asin+0x3c0>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	4604      	mov	r4, r0
 800b64c:	460d      	mov	r5, r1
 800b64e:	f7f4 ff71 	bl	8000534 <__aeabi_dmul>
 800b652:	a3c7      	add	r3, pc, #796	; (adr r3, 800b970 <__ieee754_asin+0x3c8>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fdba 	bl	80001d0 <__adddf3>
 800b65c:	4622      	mov	r2, r4
 800b65e:	462b      	mov	r3, r5
 800b660:	f7f4 ff68 	bl	8000534 <__aeabi_dmul>
 800b664:	a3c4      	add	r3, pc, #784	; (adr r3, 800b978 <__ieee754_asin+0x3d0>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f4 fdaf 	bl	80001cc <__aeabi_dsub>
 800b66e:	4622      	mov	r2, r4
 800b670:	462b      	mov	r3, r5
 800b672:	f7f4 ff5f 	bl	8000534 <__aeabi_dmul>
 800b676:	a3c2      	add	r3, pc, #776	; (adr r3, 800b980 <__ieee754_asin+0x3d8>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 fda8 	bl	80001d0 <__adddf3>
 800b680:	4622      	mov	r2, r4
 800b682:	462b      	mov	r3, r5
 800b684:	f7f4 ff56 	bl	8000534 <__aeabi_dmul>
 800b688:	a3bf      	add	r3, pc, #764	; (adr r3, 800b988 <__ieee754_asin+0x3e0>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fd9d 	bl	80001cc <__aeabi_dsub>
 800b692:	4622      	mov	r2, r4
 800b694:	462b      	mov	r3, r5
 800b696:	f7f4 ff4d 	bl	8000534 <__aeabi_dmul>
 800b69a:	a3bd      	add	r3, pc, #756	; (adr r3, 800b990 <__ieee754_asin+0x3e8>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fd96 	bl	80001d0 <__adddf3>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 ff44 	bl	8000534 <__aeabi_dmul>
 800b6ac:	a3ba      	add	r3, pc, #744	; (adr r3, 800b998 <__ieee754_asin+0x3f0>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f4 ff3b 	bl	8000534 <__aeabi_dmul>
 800b6be:	a3b8      	add	r3, pc, #736	; (adr r3, 800b9a0 <__ieee754_asin+0x3f8>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 fd82 	bl	80001cc <__aeabi_dsub>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f7f4 ff32 	bl	8000534 <__aeabi_dmul>
 800b6d0:	a3b5      	add	r3, pc, #724	; (adr r3, 800b9a8 <__ieee754_asin+0x400>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fd7b 	bl	80001d0 <__adddf3>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	f7f4 ff29 	bl	8000534 <__aeabi_dmul>
 800b6e2:	a3b3      	add	r3, pc, #716	; (adr r3, 800b9b0 <__ieee754_asin+0x408>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fd70 	bl	80001cc <__aeabi_dsub>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f7f4 ff20 	bl	8000534 <__aeabi_dmul>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f7f4 fd68 	bl	80001d0 <__adddf3>
 800b700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f000 ff0a 	bl	800c520 <__ieee754_sqrt>
 800b70c:	f243 3332 	movw	r3, #13106	; 0x3332
 800b710:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800b714:	4598      	cmp	r8, r3
 800b716:	e9cd 0100 	strd	r0, r1, [sp]
 800b71a:	f300 8085 	bgt.w	800b828 <__ieee754_asin+0x280>
 800b71e:	e9dd ab00 	ldrd	sl, fp, [sp]
 800b722:	4652      	mov	r2, sl
 800b724:	465b      	mov	r3, fp
 800b726:	f7f4 fd53 	bl	80001d0 <__adddf3>
 800b72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b72e:	4680      	mov	r8, r0
 800b730:	4689      	mov	r9, r1
 800b732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b736:	f7f5 f827 	bl	8000788 <__aeabi_ddiv>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f4 fef7 	bl	8000534 <__aeabi_dmul>
 800b746:	f04f 0a00 	mov.w	sl, #0
 800b74a:	4689      	mov	r9, r1
 800b74c:	4652      	mov	r2, sl
 800b74e:	4680      	mov	r8, r0
 800b750:	465b      	mov	r3, fp
 800b752:	4650      	mov	r0, sl
 800b754:	4659      	mov	r1, fp
 800b756:	f7f4 feed 	bl	8000534 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f4 fd33 	bl	80001cc <__aeabi_dsub>
 800b766:	4652      	mov	r2, sl
 800b768:	4604      	mov	r4, r0
 800b76a:	460d      	mov	r5, r1
 800b76c:	465b      	mov	r3, fp
 800b76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b772:	f7f4 fd2d 	bl	80001d0 <__adddf3>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4620      	mov	r0, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	f7f5 f803 	bl	8000788 <__aeabi_ddiv>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	f7f4 fd23 	bl	80001d0 <__adddf3>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	a18a      	add	r1, pc, #552	; (adr r1, 800b9b8 <__ieee754_asin+0x410>)
 800b790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b794:	f7f4 fd1a 	bl	80001cc <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f4 fd14 	bl	80001cc <__aeabi_dsub>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	f7f4 fd0e 	bl	80001d0 <__adddf3>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	a181      	add	r1, pc, #516	; (adr r1, 800b9c0 <__ieee754_asin+0x418>)
 800b7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7be:	f7f4 fd05 	bl	80001cc <__aeabi_dsub>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 fcff 	bl	80001cc <__aeabi_dsub>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	a17b      	add	r1, pc, #492	; (adr r1, 800b9c0 <__ieee754_asin+0x418>)
 800b7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d8:	f7f4 fcf8 	bl	80001cc <__aeabi_dsub>
 800b7dc:	4682      	mov	sl, r0
 800b7de:	4689      	mov	r9, r1
 800b7e0:	2f00      	cmp	r7, #0
 800b7e2:	bfd8      	it	le
 800b7e4:	f109 4900 	addle.w	r9, r9, #2147483648	; 0x80000000
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	b007      	add	sp, #28
 800b7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f2:	a375      	add	r3, pc, #468	; (adr r3, 800b9c8 <__ieee754_asin+0x420>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 fe9c 	bl	8000534 <__aeabi_dmul>
 800b7fc:	a36e      	add	r3, pc, #440	; (adr r3, 800b9b8 <__ieee754_asin+0x410>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4604      	mov	r4, r0
 800b804:	460d      	mov	r5, r1
 800b806:	4650      	mov	r0, sl
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 fe93 	bl	8000534 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fcdb 	bl	80001d0 <__adddf3>
 800b81a:	4682      	mov	sl, r0
 800b81c:	4689      	mov	r9, r1
 800b81e:	4650      	mov	r0, sl
 800b820:	4649      	mov	r1, r9
 800b822:	b007      	add	sp, #28
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b830:	f7f4 ffaa 	bl	8000788 <__aeabi_ddiv>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b83c:	f7f4 fe7a 	bl	8000534 <__aeabi_dmul>
 800b840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b844:	f7f4 fcc4 	bl	80001d0 <__adddf3>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	f7f4 fcc0 	bl	80001d0 <__adddf3>
 800b850:	a359      	add	r3, pc, #356	; (adr r3, 800b9b8 <__ieee754_asin+0x410>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fcb9 	bl	80001cc <__aeabi_dsub>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	a15a      	add	r1, pc, #360	; (adr r1, 800b9c8 <__ieee754_asin+0x420>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	f7f4 fcb2 	bl	80001cc <__aeabi_dsub>
 800b868:	4682      	mov	sl, r0
 800b86a:	4689      	mov	r9, r1
 800b86c:	e7b8      	b.n	800b7e0 <__ieee754_asin+0x238>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	f7f4 fe5f 	bl	8000534 <__aeabi_dmul>
 800b876:	a33c      	add	r3, pc, #240	; (adr r3, 800b968 <__ieee754_asin+0x3c0>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	4604      	mov	r4, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	f7f4 fe58 	bl	8000534 <__aeabi_dmul>
 800b884:	a33a      	add	r3, pc, #232	; (adr r3, 800b970 <__ieee754_asin+0x3c8>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f7f4 fca1 	bl	80001d0 <__adddf3>
 800b88e:	4622      	mov	r2, r4
 800b890:	462b      	mov	r3, r5
 800b892:	f7f4 fe4f 	bl	8000534 <__aeabi_dmul>
 800b896:	a338      	add	r3, pc, #224	; (adr r3, 800b978 <__ieee754_asin+0x3d0>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f4 fc96 	bl	80001cc <__aeabi_dsub>
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	f7f4 fe46 	bl	8000534 <__aeabi_dmul>
 800b8a8:	a335      	add	r3, pc, #212	; (adr r3, 800b980 <__ieee754_asin+0x3d8>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fc8f 	bl	80001d0 <__adddf3>
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	f7f4 fe3d 	bl	8000534 <__aeabi_dmul>
 800b8ba:	a333      	add	r3, pc, #204	; (adr r3, 800b988 <__ieee754_asin+0x3e0>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fc84 	bl	80001cc <__aeabi_dsub>
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	f7f4 fe34 	bl	8000534 <__aeabi_dmul>
 800b8cc:	a330      	add	r3, pc, #192	; (adr r3, 800b990 <__ieee754_asin+0x3e8>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 fc7d 	bl	80001d0 <__adddf3>
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	462b      	mov	r3, r5
 800b8da:	f7f4 fe2b 	bl	8000534 <__aeabi_dmul>
 800b8de:	a32e      	add	r3, pc, #184	; (adr r3, 800b998 <__ieee754_asin+0x3f0>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fe22 	bl	8000534 <__aeabi_dmul>
 800b8f0:	a32b      	add	r3, pc, #172	; (adr r3, 800b9a0 <__ieee754_asin+0x3f8>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7f4 fc69 	bl	80001cc <__aeabi_dsub>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	f7f4 fe19 	bl	8000534 <__aeabi_dmul>
 800b902:	a329      	add	r3, pc, #164	; (adr r3, 800b9a8 <__ieee754_asin+0x400>)
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f7f4 fc62 	bl	80001d0 <__adddf3>
 800b90c:	4622      	mov	r2, r4
 800b90e:	462b      	mov	r3, r5
 800b910:	f7f4 fe10 	bl	8000534 <__aeabi_dmul>
 800b914:	a326      	add	r3, pc, #152	; (adr r3, 800b9b0 <__ieee754_asin+0x408>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fc57 	bl	80001cc <__aeabi_dsub>
 800b91e:	4622      	mov	r2, r4
 800b920:	462b      	mov	r3, r5
 800b922:	f7f4 fe07 	bl	8000534 <__aeabi_dmul>
 800b926:	2300      	movs	r3, #0
 800b928:	2200      	movs	r2, #0
 800b92a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800b92e:	f7f4 fc4f 	bl	80001d0 <__adddf3>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 ff25 	bl	8000788 <__aeabi_ddiv>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4650      	mov	r0, sl
 800b944:	4649      	mov	r1, r9
 800b946:	f7f4 fdf5 	bl	8000534 <__aeabi_dmul>
 800b94a:	4652      	mov	r2, sl
 800b94c:	464b      	mov	r3, r9
 800b94e:	f7f4 fc3f 	bl	80001d0 <__adddf3>
 800b952:	4682      	mov	sl, r0
 800b954:	4689      	mov	r9, r1
 800b956:	4650      	mov	r0, sl
 800b958:	4649      	mov	r1, r9
 800b95a:	b007      	add	sp, #28
 800b95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b960:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800b964:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800b968:	0dfdf709 	ldcleq	7, cr15, [sp, #36]!	; 0x24
 800b96c:	3f023de1 	svccc	0x00023de1
 800b970:	7501b288 	strvc	fp, [r1, #-648]	; 0x288
 800b974:	3f49efe0 	svccc	0x0049efe0
 800b978:	b5688f3b 	strblt	r8, [r8, #-3899]!	; 0xf3b
 800b97c:	3fa48228 	svccc	0x00a48228
 800b980:	0e884455 	mcreq	4, 4, r4, cr8, cr5, {2}
 800b984:	3fc9c155 	svccc	0x00c9c155
 800b988:	03eb6f7d 	mvneq	r6, #500	; 0x1f4
 800b98c:	3fd4d612 	svccc	0x00d4d612
 800b990:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
 800b994:	3fc55555 	svccc	0x00c55555
 800b998:	b12e9282 	smlawblt	lr, r2, r2, r9
 800b99c:	3fb3b8c5 	svccc	0x00b3b8c5
 800b9a0:	1b8d0159 	blne	634bf0c <_Min_Stack_Size+0x634bb0c>
 800b9a4:	3fe6066c 	svccc	0x00e6066c
 800b9a8:	9c598ac8 	mrrcls	10, 12, r8, r9, cr8
 800b9ac:	40002ae5 	andmi	r2, r0, r5, ror #21
 800b9b0:	1c8a2d4b 	stcne	13, cr2, [sl], {75}	; 0x4b
 800b9b4:	40033a27 	andmi	r3, r3, r7, lsr #20
 800b9b8:	33145c07 	tstcc	r4, #1792	; 0x700
 800b9bc:	3c91a626 	ldccc	6, cr10, [r1], {38}	; 0x26
 800b9c0:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800b9c4:	3fe921fb 	svccc	0x00e921fb
 800b9c8:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800b9cc:	3ff921fb 	svccc	0x00f921fb

0800b9d0 <__ieee754_pow>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800b9d8:	4681      	mov	r9, r0
 800b9da:	4606      	mov	r6, r0
 800b9dc:	ea58 0002 	orrs.w	r0, r8, r2
 800b9e0:	b093      	sub	sp, #76	; 0x4c
 800b9e2:	4693      	mov	fp, r2
 800b9e4:	469c      	mov	ip, r3
 800b9e6:	4614      	mov	r4, r2
 800b9e8:	461d      	mov	r5, r3
 800b9ea:	468a      	mov	sl, r1
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	f000 8089 	beq.w	800bb04 <__ieee754_pow+0x134>
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b9f8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800b9fc:	4291      	cmp	r1, r2
 800b9fe:	9102      	str	r1, [sp, #8]
 800ba00:	dd11      	ble.n	800ba26 <__ieee754_pow+0x56>
 800ba02:	9a02      	ldr	r2, [sp, #8]
 800ba04:	f102 4c40 	add.w	ip, r2, #3221225472	; 0xc0000000
 800ba08:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 800ba0c:	ea5c 0606 	orrs.w	r6, ip, r6
 800ba10:	f040 8082 	bne.w	800bb18 <__ieee754_pow+0x148>
 800ba14:	f04f 0a00 	mov.w	sl, #0
 800ba18:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	4651      	mov	r1, sl
 800ba20:	b013      	add	sp, #76	; 0x4c
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	bf14      	ite	ne
 800ba28:	2300      	movne	r3, #0
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	f1b9 0f00 	cmp.w	r9, #0
 800ba30:	bf0c      	ite	eq
 800ba32:	2100      	moveq	r1, #0
 800ba34:	f003 0101 	andne.w	r1, r3, #1
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	d1e2      	bne.n	800ba02 <__ieee754_pow+0x32>
 800ba3c:	4590      	cmp	r8, r2
 800ba3e:	dce0      	bgt.n	800ba02 <__ieee754_pow+0x32>
 800ba40:	bf14      	ite	ne
 800ba42:	2100      	movne	r1, #0
 800ba44:	2101      	moveq	r1, #1
 800ba46:	f1bb 0f00 	cmp.w	fp, #0
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2200      	moveq	r2, #0
 800ba4e:	f001 0201 	andne.w	r2, r1, #1
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	d1d5      	bne.n	800ba02 <__ieee754_pow+0x32>
 800ba56:	2f00      	cmp	r7, #0
 800ba58:	db67      	blt.n	800bb2a <__ieee754_pow+0x15a>
 800ba5a:	9204      	str	r2, [sp, #16]
 800ba5c:	b9a4      	cbnz	r4, 800ba88 <__ieee754_pow+0xb8>
 800ba5e:	2900      	cmp	r1, #0
 800ba60:	f040 8088 	bne.w	800bb74 <__ieee754_pow+0x1a4>
 800ba64:	2200      	movs	r2, #0
 800ba66:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
 800ba6a:	4590      	cmp	r8, r2
 800ba6c:	f000 80b8 	beq.w	800bbe0 <__ieee754_pow+0x210>
 800ba70:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ba74:	bf04      	itt	eq
 800ba76:	4648      	moveq	r0, r9
 800ba78:	4651      	moveq	r1, sl
 800ba7a:	d03c      	beq.n	800baf6 <__ieee754_pow+0x126>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f6c3 72e0 	movt	r2, #16352	; 0x3fe0
 800ba82:	4295      	cmp	r5, r2
 800ba84:	f000 8420 	beq.w	800c2c8 <__ieee754_pow+0x8f8>
 800ba88:	4648      	mov	r0, r9
 800ba8a:	4651      	mov	r1, sl
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	f8cd c000 	str.w	ip, [sp]
 800ba92:	f7ff fb95 	bl	800b1c0 <fabs>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	f8dd c000 	ldr.w	ip, [sp]
 800ba9c:	b956      	cbnz	r6, 800bab4 <__ieee754_pow+0xe4>
 800ba9e:	9a02      	ldr	r2, [sp, #8]
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	bf08      	it	eq
 800baa4:	f043 0301 	orreq.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d17b      	bne.n	800bba4 <__ieee754_pow+0x1d4>
 800baac:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d077      	beq.n	800bba4 <__ieee754_pow+0x1d4>
 800bab4:	0ffb      	lsrs	r3, r7, #31
 800bab6:	9a04      	ldr	r2, [sp, #16]
 800bab8:	3b01      	subs	r3, #1
 800baba:	431a      	orrs	r2, r3
 800babc:	930a      	str	r3, [sp, #40]	; 0x28
 800babe:	f000 808a 	beq.w	800bbd6 <__ieee754_pow+0x206>
 800bac2:	2300      	movs	r3, #0
 800bac4:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
 800bac8:	4598      	cmp	r8, r3
 800baca:	f340 809f 	ble.w	800bc0c <__ieee754_pow+0x23c>
 800bace:	2300      	movs	r3, #0
 800bad0:	f2c4 33f0 	movt	r3, #17392	; 0x43f0
 800bad4:	4598      	cmp	r8, r3
 800bad6:	f340 8441 	ble.w	800c35c <__ieee754_pow+0x98c>
 800bada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bade:	9902      	ldr	r1, [sp, #8]
 800bae0:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800bae4:	4299      	cmp	r1, r3
 800bae6:	f340 83f9 	ble.w	800c2dc <__ieee754_pow+0x90c>
 800baea:	2d00      	cmp	r5, #0
 800baec:	dd57      	ble.n	800bb9e <__ieee754_pow+0x1ce>
 800baee:	f20f 7140 	addw	r1, pc, #1856	; 0x740
 800baf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	f7f4 fd1b 	bl	8000534 <__aeabi_dmul>
 800bafe:	4606      	mov	r6, r0
 800bb00:	468a      	mov	sl, r1
 800bb02:	e78b      	b.n	800ba1c <__ieee754_pow+0x4c>
 800bb04:	f04f 0a00 	mov.w	sl, #0
 800bb08:	4606      	mov	r6, r0
 800bb0a:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4651      	mov	r1, sl
 800bb12:	b013      	add	sp, #76	; 0x4c
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	f24f 30a4 	movw	r0, #62372	; 0xf3a4
 800bb1c:	f6c0 0000 	movt	r0, #2048	; 0x800
 800bb20:	b013      	add	sp, #76	; 0x4c
 800bb22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb26:	f000 bdeb 	b.w	800c700 <nan>
 800bb2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bb2e:	f2c4 303f 	movt	r0, #17215	; 0x433f
 800bb32:	4580      	cmp	r8, r0
 800bb34:	dc64      	bgt.n	800bc00 <__ieee754_pow+0x230>
 800bb36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bb3a:	f6c3 70ef 	movt	r0, #16367	; 0x3fef
 800bb3e:	4580      	cmp	r8, r0
 800bb40:	dd8b      	ble.n	800ba5a <__ieee754_pow+0x8a>
 800bb42:	ea4f 5228 	mov.w	r2, r8, asr #20
 800bb46:	f240 4013 	movw	r0, #1043	; 0x413
 800bb4a:	4282      	cmp	r2, r0
 800bb4c:	f340 84a0 	ble.w	800c490 <__ieee754_pow+0xac0>
 800bb50:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
 800bb54:	3203      	adds	r2, #3
 800bb56:	fa2b f002 	lsr.w	r0, fp, r2
 800bb5a:	fa00 f202 	lsl.w	r2, r0, r2
 800bb5e:	455a      	cmp	r2, fp
 800bb60:	bf02      	ittt	eq
 800bb62:	f000 0001 	andeq.w	r0, r0, #1
 800bb66:	f1c0 0002 	rsbeq	r0, r0, #2
 800bb6a:	9004      	streq	r0, [sp, #16]
 800bb6c:	f43f af76 	beq.w	800ba5c <__ieee754_pow+0x8c>
 800bb70:	2200      	movs	r2, #0
 800bb72:	e772      	b.n	800ba5a <__ieee754_pow+0x8a>
 800bb74:	9902      	ldr	r1, [sp, #8]
 800bb76:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800bb7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bb7e:	431e      	orrs	r6, r3
 800bb80:	f43f af48 	beq.w	800ba14 <__ieee754_pow+0x44>
 800bb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb88:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800bb8c:	4299      	cmp	r1, r3
 800bb8e:	f340 83dc 	ble.w	800c34a <__ieee754_pow+0x97a>
 800bb92:	2d00      	cmp	r5, #0
 800bb94:	bfa4      	itt	ge
 800bb96:	465e      	movge	r6, fp
 800bb98:	46e2      	movge	sl, ip
 800bb9a:	f6bf af3f 	bge.w	800ba1c <__ieee754_pow+0x4c>
 800bb9e:	2600      	movs	r6, #0
 800bba0:	46b2      	mov	sl, r6
 800bba2:	e73b      	b.n	800ba1c <__ieee754_pow+0x4c>
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	f2c0 844f 	blt.w	800c448 <__ieee754_pow+0xa78>
 800bbaa:	2f00      	cmp	r7, #0
 800bbac:	daa7      	bge.n	800bafe <__ieee754_pow+0x12e>
 800bbae:	9a02      	ldr	r2, [sp, #8]
 800bbb0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 800bbb4:	9a04      	ldr	r2, [sp, #16]
 800bbb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	f040 8476 	bne.w	800c4ac <__ieee754_pow+0xadc>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	f7f4 fb02 	bl	80001cc <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	f7f4 fddc 	bl	8000788 <__aeabi_ddiv>
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	468a      	mov	sl, r1
 800bbd4:	e722      	b.n	800ba1c <__ieee754_pow+0x4c>
 800bbd6:	4648      	mov	r0, r9
 800bbd8:	4651      	mov	r1, sl
 800bbda:	464a      	mov	r2, r9
 800bbdc:	4653      	mov	r3, sl
 800bbde:	e7f1      	b.n	800bbc4 <__ieee754_pow+0x1f4>
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	bfa8      	it	ge
 800bbe4:	464e      	movge	r6, r9
 800bbe6:	f6bf af19 	bge.w	800ba1c <__ieee754_pow+0x4c>
 800bbea:	2100      	movs	r1, #0
 800bbec:	4653      	mov	r3, sl
 800bbee:	464a      	mov	r2, r9
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800bbf6:	f7f4 fdc7 	bl	8000788 <__aeabi_ddiv>
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	468a      	mov	sl, r1
 800bbfe:	e70d      	b.n	800ba1c <__ieee754_pow+0x4c>
 800bc00:	2202      	movs	r2, #2
 800bc02:	9204      	str	r2, [sp, #16]
 800bc04:	2c00      	cmp	r4, #0
 800bc06:	f43f af2a 	beq.w	800ba5e <__ieee754_pow+0x8e>
 800bc0a:	e73d      	b.n	800ba88 <__ieee754_pow+0xb8>
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc12:	bfa8      	it	ge
 800bc14:	2500      	movge	r5, #0
 800bc16:	da0c      	bge.n	800bc32 <__ieee754_pow+0x262>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f2c4 3340 	movt	r3, #17216	; 0x4340
 800bc20:	f8cd c000 	str.w	ip, [sp]
 800bc24:	f7f4 fc86 	bl	8000534 <__aeabi_dmul>
 800bc28:	f8dd c000 	ldr.w	ip, [sp]
 800bc2c:	9102      	str	r1, [sp, #8]
 800bc2e:	f06f 0534 	mvn.w	r5, #52	; 0x34
 800bc32:	9a02      	ldr	r2, [sp, #8]
 800bc34:	1514      	asrs	r4, r2, #20
 800bc36:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800bc3a:	f649 028e 	movw	r2, #39054	; 0x988e
 800bc3e:	f2c0 0203 	movt	r2, #3
 800bc42:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800bc46:	4293      	cmp	r3, r2
 800bc48:	442e      	add	r6, r5
 800bc4a:	f043 547f 	orr.w	r4, r3, #1069547520	; 0x3fc00000
 800bc4e:	bfd8      	it	le
 800bc50:	2500      	movle	r5, #0
 800bc52:	9611      	str	r6, [sp, #68]	; 0x44
 800bc54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bc58:	bfd8      	it	le
 800bc5a:	46aa      	movle	sl, r5
 800bc5c:	dd11      	ble.n	800bc82 <__ieee754_pow+0x2b2>
 800bc5e:	f24b 6279 	movw	r2, #46713	; 0xb679
 800bc62:	f2c0 020b 	movt	r2, #11
 800bc66:	4293      	cmp	r3, r2
 800bc68:	bfc1      	itttt	gt
 800bc6a:	4633      	movgt	r3, r6
 800bc6c:	2500      	movgt	r5, #0
 800bc6e:	3301      	addgt	r3, #1
 800bc70:	9311      	strgt	r3, [sp, #68]	; 0x44
 800bc72:	bfc7      	ittee	gt
 800bc74:	f5a4 1480 	subgt.w	r4, r4, #1048576	; 0x100000
 800bc78:	46aa      	movgt	sl, r5
 800bc7a:	f44f 2580 	movle.w	r5, #262144	; 0x40000
 800bc7e:	f04f 0a01 	movle.w	sl, #1
 800bc82:	f24f 31d0 	movw	r1, #62416	; 0xf3d0
 800bc86:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bc8a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800bc8e:	4451      	add	r1, sl
 800bc90:	ed91 7b00 	vldr	d7, [r1]
 800bc94:	4602      	mov	r2, r0
 800bc96:	4623      	mov	r3, r4
 800bc98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bca0:	ec53 2b17 	vmov	r2, r3, d7
 800bca4:	f8cd c000 	str.w	ip, [sp]
 800bca8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bcac:	f7f4 fa8e 	bl	80001cc <__aeabi_dsub>
 800bcb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460f      	mov	r7, r1
 800bcb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bcbc:	f7f4 fa88 	bl	80001d0 <__adddf3>
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7f4 fd5c 	bl	8000788 <__aeabi_ddiv>
 800bcd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bcd4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fc2a 	bl	8000534 <__aeabi_dmul>
 800bce0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bce4:	1061      	asrs	r1, r4, #1
 800bce6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bcea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bcee:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 800bcf2:	186b      	adds	r3, r5, r1
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcfa:	9102      	str	r1, [sp, #8]
 800bcfc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd00:	2200      	movs	r2, #0
 800bd02:	4640      	mov	r0, r8
 800bd04:	4649      	mov	r1, r9
 800bd06:	4614      	mov	r4, r2
 800bd08:	461d      	mov	r5, r3
 800bd0a:	f7f4 fc13 	bl	8000534 <__aeabi_dmul>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4630      	mov	r0, r6
 800bd14:	4639      	mov	r1, r7
 800bd16:	f7f4 fa59 	bl	80001cc <__aeabi_dsub>
 800bd1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460f      	mov	r7, r1
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	f7f4 fa51 	bl	80001cc <__aeabi_dsub>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd32:	f7f4 fa4b 	bl	80001cc <__aeabi_dsub>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	f7f4 fbf9 	bl	8000534 <__aeabi_dmul>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fa3f 	bl	80001cc <__aeabi_dsub>
 800bd4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bd52:	f7f4 fbef 	bl	8000534 <__aeabi_dmul>
 800bd56:	4606      	mov	r6, r0
 800bd58:	460f      	mov	r7, r1
 800bd5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	f7f4 fbe7 	bl	8000534 <__aeabi_dmul>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	f7f4 fbe1 	bl	8000534 <__aeabi_dmul>
 800bd72:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 fbd7 	bl	8000534 <__aeabi_dmul>
 800bd86:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fa1f 	bl	80001d0 <__adddf3>
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 fbcd 	bl	8000534 <__aeabi_dmul>
 800bd9a:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fa15 	bl	80001d0 <__adddf3>
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	f7f4 fbc3 	bl	8000534 <__aeabi_dmul>
 800bdae:	f20f 43a0 	addw	r3, pc, #1184	; 0x4a0
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa0b 	bl	80001d0 <__adddf3>
 800bdba:	4622      	mov	r2, r4
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	f7f4 fbb9 	bl	8000534 <__aeabi_dmul>
 800bdc2:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa01 	bl	80001d0 <__adddf3>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	462b      	mov	r3, r5
 800bdd2:	f7f4 fbaf 	bl	8000534 <__aeabi_dmul>
 800bdd6:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f7f4 f9f7 	bl	80001d0 <__adddf3>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdea:	f7f4 fba3 	bl	8000534 <__aeabi_dmul>
 800bdee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 f9e9 	bl	80001d0 <__adddf3>
 800bdfe:	4632      	mov	r2, r6
 800be00:	463b      	mov	r3, r7
 800be02:	f7f4 fb97 	bl	8000534 <__aeabi_dmul>
 800be06:	4622      	mov	r2, r4
 800be08:	462b      	mov	r3, r5
 800be0a:	f7f4 f9e1 	bl	80001d0 <__adddf3>
 800be0e:	4642      	mov	r2, r8
 800be10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be14:	464b      	mov	r3, r9
 800be16:	4640      	mov	r0, r8
 800be18:	4649      	mov	r1, r9
 800be1a:	f7f4 fb8b 	bl	8000534 <__aeabi_dmul>
 800be1e:	2300      	movs	r3, #0
 800be20:	2200      	movs	r2, #0
 800be22:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800be26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be2a:	f7f4 f9d1 	bl	80001d0 <__adddf3>
 800be2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be32:	f7f4 f9cd 	bl	80001d0 <__adddf3>
 800be36:	9802      	ldr	r0, [sp, #8]
 800be38:	460d      	mov	r5, r1
 800be3a:	4604      	mov	r4, r0
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fb76 	bl	8000534 <__aeabi_dmul>
 800be48:	4622      	mov	r2, r4
 800be4a:	4680      	mov	r8, r0
 800be4c:	4689      	mov	r9, r1
 800be4e:	462b      	mov	r3, r5
 800be50:	4630      	mov	r0, r6
 800be52:	4639      	mov	r1, r7
 800be54:	f7f4 fb6e 	bl	8000534 <__aeabi_dmul>
 800be58:	2300      	movs	r3, #0
 800be5a:	4606      	mov	r6, r0
 800be5c:	460f      	mov	r7, r1
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	2200      	movs	r2, #0
 800be64:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800be68:	f7f4 f9b0 	bl	80001cc <__aeabi_dsub>
 800be6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be70:	f7f4 f9ac 	bl	80001cc <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be7c:	f7f4 f9a6 	bl	80001cc <__aeabi_dsub>
 800be80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be84:	f7f4 fb56 	bl	8000534 <__aeabi_dmul>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 f99e 	bl	80001d0 <__adddf3>
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	4632      	mov	r2, r6
 800be9a:	463b      	mov	r3, r7
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 f996 	bl	80001d0 <__adddf3>
 800bea4:	9802      	ldr	r0, [sp, #8]
 800bea6:	a3f0      	add	r3, pc, #960	; (adr r3, 800c268 <__ieee754_pow+0x898>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	f7f4 fb40 	bl	8000534 <__aeabi_dmul>
 800beb4:	a3ee      	add	r3, pc, #952	; (adr r3, 800c270 <__ieee754_pow+0x8a0>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 fb37 	bl	8000534 <__aeabi_dmul>
 800bec6:	4642      	mov	r2, r8
 800bec8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800becc:	464b      	mov	r3, r9
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	f7f4 f97b 	bl	80001cc <__aeabi_dsub>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 f975 	bl	80001cc <__aeabi_dsub>
 800bee2:	a3e5      	add	r3, pc, #916	; (adr r3, 800c278 <__ieee754_pow+0x8a8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fb24 	bl	8000534 <__aeabi_dmul>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bef4:	f7f4 f96c 	bl	80001d0 <__adddf3>
 800bef8:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
 800befc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf00:	4453      	add	r3, sl
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f963 	bl	80001d0 <__adddf3>
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bf0e:	4689      	mov	r9, r1
 800bf10:	f7f4 faaa 	bl	8000468 <__aeabi_i2d>
 800bf14:	f24f 33b0 	movw	r3, #62384	; 0xf3b0
 800bf18:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf1c:	4453      	add	r3, sl
 800bf1e:	ed93 7b00 	vldr	d7, [r3]
 800bf22:	4604      	mov	r4, r0
 800bf24:	460d      	mov	r5, r1
 800bf26:	4642      	mov	r2, r8
 800bf28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf2c:	464b      	mov	r3, r9
 800bf2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf32:	f7f4 f94d 	bl	80001d0 <__adddf3>
 800bf36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf3a:	f7f4 f949 	bl	80001d0 <__adddf3>
 800bf3e:	4622      	mov	r2, r4
 800bf40:	462b      	mov	r3, r5
 800bf42:	f7f4 f945 	bl	80001d0 <__adddf3>
 800bf46:	9802      	ldr	r0, [sp, #8]
 800bf48:	4622      	mov	r2, r4
 800bf4a:	462b      	mov	r3, r5
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	460f      	mov	r7, r1
 800bf50:	f7f4 f93c 	bl	80001cc <__aeabi_dsub>
 800bf54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf58:	f7f4 f938 	bl	80001cc <__aeabi_dsub>
 800bf5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf60:	f7f4 f934 	bl	80001cc <__aeabi_dsub>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 f92e 	bl	80001cc <__aeabi_dsub>
 800bf70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf74:	f8dd c000 	ldr.w	ip, [sp]
 800bf78:	9904      	ldr	r1, [sp, #16]
 800bf7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7c:	1e4b      	subs	r3, r1, #1
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	f040 81de 	bne.w	800c340 <__ieee754_pow+0x970>
 800bf84:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800c228 <__ieee754_pow+0x858>
 800bf88:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bf8c:	4663      	mov	r3, ip
 800bf8e:	465a      	mov	r2, fp
 800bf90:	2100      	movs	r1, #0
 800bf92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf96:	9102      	str	r1, [sp, #8]
 800bf98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf9c:	4661      	mov	r1, ip
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	f8cd c000 	str.w	ip, [sp]
 800bfa8:	f7f4 f910 	bl	80001cc <__aeabi_dsub>
 800bfac:	463b      	mov	r3, r7
 800bfae:	4632      	mov	r2, r6
 800bfb0:	f7f4 fac0 	bl	8000534 <__aeabi_dmul>
 800bfb4:	f8dd c000 	ldr.w	ip, [sp]
 800bfb8:	4604      	mov	r4, r0
 800bfba:	460d      	mov	r5, r1
 800bfbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfc0:	4661      	mov	r1, ip
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f7f4 fab6 	bl	8000534 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 f8fe 	bl	80001d0 <__adddf3>
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfda:	4632      	mov	r2, r6
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	f7f4 faa8 	bl	8000534 <__aeabi_dmul>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	460d      	mov	r5, r1
 800bfe8:	462b      	mov	r3, r5
 800bfea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfee:	4622      	mov	r2, r4
 800bff0:	f7f4 f8ee 	bl	80001d0 <__adddf3>
 800bff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff8:	f2c4 038f 	movt	r3, #16527	; 0x408f
 800bffc:	4299      	cmp	r1, r3
 800bffe:	4682      	mov	sl, r0
 800c000:	468b      	mov	fp, r1
 800c002:	460f      	mov	r7, r1
 800c004:	f340 816e 	ble.w	800c2e4 <__ieee754_pow+0x914>
 800c008:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c00c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c010:	4303      	orrs	r3, r0
 800c012:	f040 8223 	bne.w	800c45c <__ieee754_pow+0xa8c>
 800c016:	a39a      	add	r3, pc, #616	; (adr r3, 800c280 <__ieee754_pow+0x8b0>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c020:	f7f4 f8d6 	bl	80001d0 <__adddf3>
 800c024:	4622      	mov	r2, r4
 800c026:	4680      	mov	r8, r0
 800c028:	4689      	mov	r9, r1
 800c02a:	462b      	mov	r3, r5
 800c02c:	4650      	mov	r0, sl
 800c02e:	4659      	mov	r1, fp
 800c030:	f7f4 f8cc 	bl	80001cc <__aeabi_dsub>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 fd0a 	bl	8000a54 <__aeabi_dcmpgt>
 800c040:	46d8      	mov	r8, fp
 800c042:	2800      	cmp	r0, #0
 800c044:	f040 820a 	bne.w	800c45c <__ieee754_pow+0xa8c>
 800c048:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c04c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c050:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800c054:	4119      	asrs	r1, r3
 800c056:	4439      	add	r1, r7
 800c058:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c05c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c060:	f2a6 3eff 	subw	lr, r6, #1023	; 0x3ff
 800c064:	f3c1 0a13 	ubfx	sl, r1, #0, #20
 800c068:	f2c0 000f 	movt	r0, #15
 800c06c:	f5c6 6682 	rsb	r6, r6, #1040	; 0x410
 800c070:	fa40 f00e 	asr.w	r0, r0, lr
 800c074:	3603      	adds	r6, #3
 800c076:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c07a:	ea21 0300 	bic.w	r3, r1, r0
 800c07e:	2f00      	cmp	r7, #0
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	fa4a fa06 	asr.w	sl, sl, r6
 800c088:	4620      	mov	r0, r4
 800c08a:	4629      	mov	r1, r5
 800c08c:	bfb8      	it	lt
 800c08e:	f1ca 0a00 	rsblt	sl, sl, #0
 800c092:	f7f4 f89b 	bl	80001cc <__aeabi_dsub>
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	4622      	mov	r2, r4
 800c09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	f7f4 f895 	bl	80001d0 <__adddf3>
 800c0a6:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	a376      	add	r3, pc, #472	; (adr r3, 800c288 <__ieee754_pow+0x8b8>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	f7f4 fa3d 	bl	8000534 <__aeabi_dmul>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	4680      	mov	r8, r0
 800c0be:	4689      	mov	r9, r1
 800c0c0:	462b      	mov	r3, r5
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7f4 f881 	bl	80001cc <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0d2:	f7f4 f87b 	bl	80001cc <__aeabi_dsub>
 800c0d6:	a36e      	add	r3, pc, #440	; (adr r3, 800c290 <__ieee754_pow+0x8c0>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 fa2a 	bl	8000534 <__aeabi_dmul>
 800c0e0:	a36d      	add	r3, pc, #436	; (adr r3, 800c298 <__ieee754_pow+0x8c8>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	f7f4 fa21 	bl	8000534 <__aeabi_dmul>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7f4 f869 	bl	80001d0 <__adddf3>
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	4622      	mov	r2, r4
 800c104:	462b      	mov	r3, r5
 800c106:	4640      	mov	r0, r8
 800c108:	4649      	mov	r1, r9
 800c10a:	f7f4 f861 	bl	80001d0 <__adddf3>
 800c10e:	4642      	mov	r2, r8
 800c110:	464b      	mov	r3, r9
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	f7f4 f859 	bl	80001cc <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 f853 	bl	80001cc <__aeabi_dsub>
 800c126:	4632      	mov	r2, r6
 800c128:	4680      	mov	r8, r0
 800c12a:	4689      	mov	r9, r1
 800c12c:	463b      	mov	r3, r7
 800c12e:	4630      	mov	r0, r6
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 f9ff 	bl	8000534 <__aeabi_dmul>
 800c136:	a35a      	add	r3, pc, #360	; (adr r3, 800c2a0 <__ieee754_pow+0x8d0>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	4604      	mov	r4, r0
 800c13e:	460d      	mov	r5, r1
 800c140:	f7f4 f9f8 	bl	8000534 <__aeabi_dmul>
 800c144:	a358      	add	r3, pc, #352	; (adr r3, 800c2a8 <__ieee754_pow+0x8d8>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 f83f 	bl	80001cc <__aeabi_dsub>
 800c14e:	4622      	mov	r2, r4
 800c150:	462b      	mov	r3, r5
 800c152:	f7f4 f9ef 	bl	8000534 <__aeabi_dmul>
 800c156:	a356      	add	r3, pc, #344	; (adr r3, 800c2b0 <__ieee754_pow+0x8e0>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7f4 f838 	bl	80001d0 <__adddf3>
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	f7f4 f9e6 	bl	8000534 <__aeabi_dmul>
 800c168:	a353      	add	r3, pc, #332	; (adr r3, 800c2b8 <__ieee754_pow+0x8e8>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	f7f4 f82d 	bl	80001cc <__aeabi_dsub>
 800c172:	4622      	mov	r2, r4
 800c174:	462b      	mov	r3, r5
 800c176:	f7f4 f9dd 	bl	8000534 <__aeabi_dmul>
 800c17a:	a351      	add	r3, pc, #324	; (adr r3, 800c2c0 <__ieee754_pow+0x8f0>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f7f4 f826 	bl	80001d0 <__adddf3>
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f4 f9d4 	bl	8000534 <__aeabi_dmul>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 f81a 	bl	80001cc <__aeabi_dsub>
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	4622      	mov	r2, r4
 800c19e:	462b      	mov	r3, r5
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	4639      	mov	r1, r7
 800c1a4:	f7f4 f9c6 	bl	8000534 <__aeabi_dmul>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 f809 	bl	80001cc <__aeabi_dsub>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c2:	f7f4 fae1 	bl	8000788 <__aeabi_ddiv>
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f9af 	bl	8000534 <__aeabi_dmul>
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	464b      	mov	r3, r9
 800c1da:	f7f3 fff9 	bl	80001d0 <__adddf3>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f3 fff1 	bl	80001cc <__aeabi_dsub>
 800c1ea:	4632      	mov	r2, r6
 800c1ec:	463b      	mov	r3, r7
 800c1ee:	f7f3 ffed 	bl	80001cc <__aeabi_dsub>
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	f7f3 ffe5 	bl	80001cc <__aeabi_dsub>
 800c202:	448b      	add	fp, r1
 800c204:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 800c208:	460b      	mov	r3, r1
 800c20a:	4602      	mov	r2, r0
 800c20c:	bfa8      	it	ge
 800c20e:	465b      	movge	r3, fp
 800c210:	f2c0 815a 	blt.w	800c4c8 <__ieee754_pow+0xaf8>
 800c214:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c218:	f7f4 f98c 	bl	8000534 <__aeabi_dmul>
 800c21c:	4606      	mov	r6, r0
 800c21e:	468a      	mov	sl, r1
 800c220:	f7ff bbfc 	b.w	800ba1c <__ieee754_pow+0x4c>
 800c224:	f3af 8000 	nop.w
 800c228:	00000000 	andeq	r0, r0, r0
 800c22c:	bff00000 	svclt	0x00f00000	; IMB
 800c230:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c234:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800c238:	4a454eef 	bmi	915fdfc <_siccmram+0x1150570>
 800c23c:	3fca7e28 	svccc	0x00ca7e28
 800c240:	93c9db65 	bicls	sp, r9, #103424	; 0x19400
 800c244:	3fcd864a 	svccc	0x00cd864a
 800c248:	a91d4101 	ldmdbge	sp, {r0, r8, lr}
 800c24c:	3fd17460 	svccc	0x00d17460
 800c250:	518f264d 	orrpl	r2, pc, sp, asr #12
 800c254:	3fd55555 	svccc	0x00d55555
 800c258:	db6fabff 	blle	9bf725c <_siccmram+0x1be79d0>
 800c25c:	3fdb6db6 	svccc	0x00db6db6
 800c260:	33333303 	teqcc	r3, #201326592	; 0xc000000
 800c264:	3fe33333 	svccc	0x00e33333
 800c268:	e0000000 	and	r0, r0, r0
 800c26c:	3feec709 	svccc	0x00eec709
 800c270:	145b01f5 	ldrbne	r0, [fp], #-501	; 0x1f5
 800c274:	be3e2fe0 	cdplt	15, 3, cr2, cr14, cr0, {7}
 800c278:	dc3a03fd 	ldcle	3, cr0, [sl], #-1012	; 0xfffffc0c
 800c27c:	3feec709 	svccc	0x00eec709
 800c280:	652b82fe 	strvs	r8, [fp, #-766]!	; 0x2fe
 800c284:	3c971547 	cfldr32cc	mvfx1, [r7], {71}	; 0x47
 800c288:	00000000 	andeq	r0, r0, r0
 800c28c:	3fe62e43 	svccc	0x00e62e43
 800c290:	fefa39ef 	cdp2	9, 15, cr3, cr10, cr15, {7}
 800c294:	3fe62e42 	svccc	0x00e62e42
 800c298:	0ca86c39 	stceq	12, cr6, [r8], #228	; 0xe4
 800c29c:	be205c61 	cdplt	12, 2, cr5, cr0, cr1, {3}
 800c2a0:	72bea4d0 	adcsvc	sl, lr, #208, 8	; 0xd0000000
 800c2a4:	3e663769 	cdpcc	7, 6, cr3, cr6, cr9, {3}
 800c2a8:	c5d26bf1 	ldrbgt	r6, [r2, #3057]	; 0xbf1
 800c2ac:	3ebbbd41 	cdpcc	13, 11, cr11, cr11, cr1, {2}
 800c2b0:	af25de2c 	svcge	0x0025de2c
 800c2b4:	3f11566a 	svccc	0x0011566a
 800c2b8:	16bebd93 	ssatne	fp, #31, r3, lsl #27
 800c2bc:	3f66c16c 	svccc	0x0066c16c
 800c2c0:	5555553e 	ldrbpl	r5, [r5, #-1342]	; 0x53e
 800c2c4:	3fc55555 	svccc	0x00c55555
 800c2c8:	2f00      	cmp	r7, #0
 800c2ca:	f6ff abdd 	blt.w	800ba88 <__ieee754_pow+0xb8>
 800c2ce:	4648      	mov	r0, r9
 800c2d0:	4651      	mov	r1, sl
 800c2d2:	b013      	add	sp, #76	; 0x4c
 800c2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	f000 b922 	b.w	800c520 <__ieee754_sqrt>
 800c2dc:	2d00      	cmp	r5, #0
 800c2de:	f6bf ac5e 	bge.w	800bb9e <__ieee754_pow+0x1ce>
 800c2e2:	e404      	b.n	800baee <__ieee754_pow+0x11e>
 800c2e4:	f64c 33ff 	movw	r3, #52223	; 0xcbff
 800c2e8:	f2c4 0390 	movt	r3, #16528	; 0x4090
 800c2ec:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c2f0:	4598      	cmp	r8, r3
 800c2f2:	f340 80c3 	ble.w	800c47c <__ieee754_pow+0xaac>
 800c2f6:	f101 537d 	add.w	r3, r1, #1061158912	; 0x3f400000
 800c2fa:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 800c2fe:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 800c302:	4303      	orrs	r3, r0
 800c304:	d10c      	bne.n	800c320 <__ieee754_pow+0x950>
 800c306:	4622      	mov	r2, r4
 800c308:	462b      	mov	r3, r5
 800c30a:	f7f3 ff5f 	bl	80001cc <__aeabi_dsub>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c316:	f7f4 fb89 	bl	8000a2c <__aeabi_dcmple>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	f43f ae94 	beq.w	800c048 <__ieee754_pow+0x678>
 800c320:	a373      	add	r3, pc, #460	; (adr r3, 800c4f0 <__ieee754_pow+0xb20>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c32a:	f7f4 f903 	bl	8000534 <__aeabi_dmul>
 800c32e:	a370      	add	r3, pc, #448	; (adr r3, 800c4f0 <__ieee754_pow+0xb20>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f4 f8fe 	bl	8000534 <__aeabi_dmul>
 800c338:	4606      	mov	r6, r0
 800c33a:	468a      	mov	sl, r1
 800c33c:	f7ff bb6e 	b.w	800ba1c <__ieee754_pow+0x4c>
 800c340:	ed9f 7b69 	vldr	d7, [pc, #420]	; 800c4e8 <__ieee754_pow+0xb18>
 800c344:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c348:	e620      	b.n	800bf8c <__ieee754_pow+0x5bc>
 800c34a:	2d00      	cmp	r5, #0
 800c34c:	bfbc      	itt	lt
 800c34e:	465e      	movlt	r6, fp
 800c350:	f10c 4a00 	addlt.w	sl, ip, #2147483648	; 0x80000000
 800c354:	f6bf ac23 	bge.w	800bb9e <__ieee754_pow+0x1ce>
 800c358:	f7ff bb60 	b.w	800ba1c <__ieee754_pow+0x4c>
 800c35c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c360:	9a02      	ldr	r2, [sp, #8]
 800c362:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800c366:	429a      	cmp	r2, r3
 800c368:	ddb8      	ble.n	800c2dc <__ieee754_pow+0x90c>
 800c36a:	2300      	movs	r3, #0
 800c36c:	9a02      	ldr	r2, [sp, #8]
 800c36e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800c372:	429a      	cmp	r2, r3
 800c374:	f73f abb9 	bgt.w	800baea <__ieee754_pow+0x11a>
 800c378:	2300      	movs	r3, #0
 800c37a:	2200      	movs	r2, #0
 800c37c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800c380:	f8cd c000 	str.w	ip, [sp]
 800c384:	f7f3 ff22 	bl	80001cc <__aeabi_dsub>
 800c388:	a35b      	add	r3, pc, #364	; (adr r3, 800c4f8 <__ieee754_pow+0xb28>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	4604      	mov	r4, r0
 800c390:	460d      	mov	r5, r1
 800c392:	f7f4 f8cf 	bl	8000534 <__aeabi_dmul>
 800c396:	a35a      	add	r3, pc, #360	; (adr r3, 800c500 <__ieee754_pow+0xb30>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	4680      	mov	r8, r0
 800c39e:	4689      	mov	r9, r1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f7f4 f8c6 	bl	8000534 <__aeabi_dmul>
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ae:	462b      	mov	r3, r5
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	f7f4 f8be 	bl	8000534 <__aeabi_dmul>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	460f      	mov	r7, r1
 800c3be:	4620      	mov	r0, r4
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
 800c3c8:	f7f4 f8b4 	bl	8000534 <__aeabi_dmul>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	a14d      	add	r1, pc, #308	; (adr r1, 800c508 <__ieee754_pow+0xb38>)
 800c3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3d6:	f7f3 fef9 	bl	80001cc <__aeabi_dsub>
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f7f4 f8a9 	bl	8000534 <__aeabi_dmul>
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	f7f3 feed 	bl	80001cc <__aeabi_dsub>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f4 f89b 	bl	8000534 <__aeabi_dmul>
 800c3fe:	a344      	add	r3, pc, #272	; (adr r3, 800c510 <__ieee754_pow+0xb40>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 f896 	bl	8000534 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c410:	f7f3 fedc 	bl	80001cc <__aeabi_dsub>
 800c414:	4604      	mov	r4, r0
 800c416:	460d      	mov	r5, r1
 800c418:	4622      	mov	r2, r4
 800c41a:	462b      	mov	r3, r5
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f3 fed6 	bl	80001d0 <__adddf3>
 800c424:	2000      	movs	r0, #0
 800c426:	4642      	mov	r2, r8
 800c428:	464b      	mov	r3, r9
 800c42a:	4606      	mov	r6, r0
 800c42c:	460f      	mov	r7, r1
 800c42e:	f7f3 fecd 	bl	80001cc <__aeabi_dsub>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4620      	mov	r0, r4
 800c438:	4629      	mov	r1, r5
 800c43a:	f7f3 fec7 	bl	80001cc <__aeabi_dsub>
 800c43e:	f8dd c000 	ldr.w	ip, [sp]
 800c442:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c446:	e597      	b.n	800bf78 <__ieee754_pow+0x5a8>
 800c448:	460b      	mov	r3, r1
 800c44a:	2100      	movs	r1, #0
 800c44c:	4602      	mov	r2, r0
 800c44e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c452:	2000      	movs	r0, #0
 800c454:	f7f4 f998 	bl	8000788 <__aeabi_ddiv>
 800c458:	f7ff bba7 	b.w	800bbaa <__ieee754_pow+0x1da>
 800c45c:	a32e      	add	r3, pc, #184	; (adr r3, 800c518 <__ieee754_pow+0xb48>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c466:	f7f4 f865 	bl	8000534 <__aeabi_dmul>
 800c46a:	a32b      	add	r3, pc, #172	; (adr r3, 800c518 <__ieee754_pow+0xb48>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f4 f860 	bl	8000534 <__aeabi_dmul>
 800c474:	4606      	mov	r6, r0
 800c476:	468a      	mov	sl, r1
 800c478:	f7ff bad0 	b.w	800ba1c <__ieee754_pow+0x4c>
 800c47c:	2300      	movs	r3, #0
 800c47e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c482:	4598      	cmp	r8, r3
 800c484:	f73f ade0 	bgt.w	800c048 <__ieee754_pow+0x678>
 800c488:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c48c:	46da      	mov	sl, fp
 800c48e:	e60c      	b.n	800c0aa <__ieee754_pow+0x6da>
 800c490:	b9b4      	cbnz	r4, 800c4c0 <__ieee754_pow+0xaf0>
 800c492:	f5c2 6282 	rsb	r2, r2, #1040	; 0x410
 800c496:	3203      	adds	r2, #3
 800c498:	fa48 f002 	asr.w	r0, r8, r2
 800c49c:	fa00 f202 	lsl.w	r2, r0, r2
 800c4a0:	4542      	cmp	r2, r8
 800c4a2:	d017      	beq.n	800c4d4 <__ieee754_pow+0xb04>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	9204      	str	r2, [sp, #16]
 800c4a8:	f7ff bad9 	b.w	800ba5e <__ieee754_pow+0x8e>
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	bf08      	it	eq
 800c4b4:	f101 4a00 	addeq.w	sl, r1, #2147483648	; 0x80000000
 800c4b8:	f47f ab22 	bne.w	800bb00 <__ieee754_pow+0x130>
 800c4bc:	f7ff baae 	b.w	800ba1c <__ieee754_pow+0x4c>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	9204      	str	r2, [sp, #16]
 800c4c4:	f7ff bae0 	b.w	800ba88 <__ieee754_pow+0xb8>
 800c4c8:	4652      	mov	r2, sl
 800c4ca:	f000 f9b1 	bl	800c830 <scalbn>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	e69f      	b.n	800c214 <__ieee754_pow+0x844>
 800c4d4:	f000 0001 	and.w	r0, r0, #1
 800c4d8:	f1c0 0002 	rsb	r0, r0, #2
 800c4dc:	9004      	str	r0, [sp, #16]
 800c4de:	f7ff babe 	b.w	800ba5e <__ieee754_pow+0x8e>
 800c4e2:	bf00      	nop
 800c4e4:	f3af 8000 	nop.w
 800c4e8:	00000000 	andeq	r0, r0, r0
 800c4ec:	3ff00000 	svccc	0x00f00000	; IMB
 800c4f0:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
 800c4f4:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f
 800c4f8:	60000000 	andvs	r0, r0, r0
 800c4fc:	3ff71547 	svccc	0x00f71547
 800c500:	f85ddf44 			; <UNDEFINED> instruction: 0xf85ddf44
 800c504:	3e54ae0b 	cdpcc	14, 5, cr10, cr4, cr11, {0}
 800c508:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
 800c50c:	3fd55555 	svccc	0x00d55555
 800c510:	652b82fe 	strvs	r8, [fp, #-766]!	; 0x2fe
 800c514:	3ff71547 	svccc	0x00f71547
 800c518:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c51c:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}

0800c520 <__ieee754_sqrt>:
 800c520:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c528:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 800c52c:	f04f 0800 	mov.w	r8, #0
 800c530:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 800c534:	f6c7 78f0 	movt	r8, #32752	; 0x7ff0
 800c538:	45c4      	cmp	ip, r8
 800c53a:	4606      	mov	r6, r0
 800c53c:	460f      	mov	r7, r1
 800c53e:	460b      	mov	r3, r1
 800c540:	4602      	mov	r2, r0
 800c542:	f000 8092 	beq.w	800c66a <__ieee754_sqrt+0x14a>
 800c546:	2900      	cmp	r1, #0
 800c548:	dd72      	ble.n	800c630 <__ieee754_sqrt+0x110>
 800c54a:	150f      	asrs	r7, r1, #20
 800c54c:	d07b      	beq.n	800c646 <__ieee754_sqrt+0x126>
 800c54e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800c552:	07f9      	lsls	r1, r7, #31
 800c554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c558:	bf48      	it	mi
 800c55a:	0fd1      	lsrmi	r1, r2, #31
 800c55c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c560:	bf44      	itt	mi
 800c562:	0052      	lslmi	r2, r2, #1
 800c564:	eb01 0343 	addmi.w	r3, r1, r3, lsl #1
 800c568:	f04f 0c00 	mov.w	ip, #0
 800c56c:	0fd1      	lsrs	r1, r2, #31
 800c56e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c572:	107f      	asrs	r7, r7, #1
 800c574:	0052      	lsls	r2, r2, #1
 800c576:	4660      	mov	r0, ip
 800c578:	2416      	movs	r4, #22
 800c57a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c57e:	1845      	adds	r5, r0, r1
 800c580:	429d      	cmp	r5, r3
 800c582:	ea4f 76d2 	mov.w	r6, r2, lsr #31
 800c586:	bfde      	ittt	le
 800c588:	ebc5 0303 	rsble	r3, r5, r3
 800c58c:	1868      	addle	r0, r5, r1
 800c58e:	448c      	addle	ip, r1
 800c590:	3c01      	subs	r4, #1
 800c592:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c596:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800c59a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c59e:	d1ee      	bne.n	800c57e <__ieee754_sqrt+0x5e>
 800c5a0:	46a0      	mov	r8, r4
 800c5a2:	2620      	movs	r6, #32
 800c5a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c5a8:	e011      	b.n	800c5ce <__ieee754_sqrt+0xae>
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	1a1b      	subs	r3, r3, r0
 800c5ae:	4295      	cmp	r5, r2
 800c5b0:	bf88      	it	hi
 800c5b2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800c5b6:	1b52      	subs	r2, r2, r5
 800c5b8:	440c      	add	r4, r1
 800c5ba:	4648      	mov	r0, r9
 800c5bc:	0fd5      	lsrs	r5, r2, #31
 800c5be:	3e01      	subs	r6, #1
 800c5c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c5c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c5c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c5cc:	d015      	beq.n	800c5fa <__ieee754_sqrt+0xda>
 800c5ce:	4298      	cmp	r0, r3
 800c5d0:	eb01 0508 	add.w	r5, r1, r8
 800c5d4:	db03      	blt.n	800c5de <__ieee754_sqrt+0xbe>
 800c5d6:	4295      	cmp	r5, r2
 800c5d8:	bf98      	it	ls
 800c5da:	4283      	cmpls	r3, r0
 800c5dc:	d1ee      	bne.n	800c5bc <__ieee754_sqrt+0x9c>
 800c5de:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
 800c5e2:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800c5e6:	eb05 0801 	add.w	r8, r5, r1
 800c5ea:	d1de      	bne.n	800c5aa <__ieee754_sqrt+0x8a>
 800c5ec:	f1b8 0f00 	cmp.w	r8, #0
 800c5f0:	bfa8      	it	ge
 800c5f2:	f100 0901 	addge.w	r9, r0, #1
 800c5f6:	dad9      	bge.n	800c5ac <__ieee754_sqrt+0x8c>
 800c5f8:	e7d7      	b.n	800c5aa <__ieee754_sqrt+0x8a>
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	d007      	beq.n	800c60e <__ieee754_sqrt+0xee>
 800c5fe:	1c63      	adds	r3, r4, #1
 800c600:	bf08      	it	eq
 800c602:	f10c 0c01 	addeq.w	ip, ip, #1
 800c606:	d003      	beq.n	800c610 <__ieee754_sqrt+0xf0>
 800c608:	f004 0301 	and.w	r3, r4, #1
 800c60c:	441c      	add	r4, r3
 800c60e:	0866      	lsrs	r6, r4, #1
 800c610:	ea4f 036c 	mov.w	r3, ip, asr #1
 800c614:	f01c 0f01 	tst.w	ip, #1
 800c618:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c61c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c620:	bf18      	it	ne
 800c622:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
 800c626:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800c62a:	4630      	mov	r0, r6
 800c62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c630:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c634:	4303      	orrs	r3, r0
 800c636:	d022      	beq.n	800c67e <__ieee754_sqrt+0x15e>
 800c638:	bb39      	cbnz	r1, 800c68a <__ieee754_sqrt+0x16a>
 800c63a:	460f      	mov	r7, r1
 800c63c:	0ad3      	lsrs	r3, r2, #11
 800c63e:	3f15      	subs	r7, #21
 800c640:	0552      	lsls	r2, r2, #21
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0fa      	beq.n	800c63c <__ieee754_sqrt+0x11c>
 800c646:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
 800c64a:	d11a      	bne.n	800c682 <__ieee754_sqrt+0x162>
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	02d8      	lsls	r0, r3, #11
 800c650:	f101 0101 	add.w	r1, r1, #1
 800c654:	d5fa      	bpl.n	800c64c <__ieee754_sqrt+0x12c>
 800c656:	f1c1 0001 	rsb	r0, r1, #1
 800c65a:	f1c1 0420 	rsb	r4, r1, #32
 800c65e:	fa22 f404 	lsr.w	r4, r2, r4
 800c662:	4323      	orrs	r3, r4
 800c664:	4407      	add	r7, r0
 800c666:	408a      	lsls	r2, r1
 800c668:	e771      	b.n	800c54e <__ieee754_sqrt+0x2e>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	f7f3 ff61 	bl	8000534 <__aeabi_dmul>
 800c672:	4632      	mov	r2, r6
 800c674:	463b      	mov	r3, r7
 800c676:	f7f3 fdab 	bl	80001d0 <__adddf3>
 800c67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c682:	2420      	movs	r4, #32
 800c684:	2001      	movs	r0, #1
 800c686:	2100      	movs	r1, #0
 800c688:	e7e9      	b.n	800c65e <__ieee754_sqrt+0x13e>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	f7f3 fd9d 	bl	80001cc <__aeabi_dsub>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	f7f4 f877 	bl	8000788 <__aeabi_ddiv>
 800c69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69e:	bf00      	nop

0800c6a0 <finite>:
 800c6a0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c6a4:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c6a8:	0fc0      	lsrs	r0, r0, #31
 800c6aa:	4770      	bx	lr

0800c6ac <__fpclassifyd>:
 800c6ac:	ea50 0301 	orrs.w	r3, r0, r1
 800c6b0:	d101      	bne.n	800c6b6 <__fpclassifyd+0xa>
 800c6b2:	2002      	movs	r0, #2
 800c6b4:	4770      	bx	lr
 800c6b6:	f1d0 0301 	rsbs	r3, r0, #1
 800c6ba:	bf38      	it	cc
 800c6bc:	2300      	movcc	r3, #0
 800c6be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c6c2:	bf08      	it	eq
 800c6c4:	2800      	cmpeq	r0, #0
 800c6c6:	d0f4      	beq.n	800c6b2 <__fpclassifyd+0x6>
 800c6c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d0:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800c6d4:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800c6d8:	4290      	cmp	r0, r2
 800c6da:	d801      	bhi.n	800c6e0 <__fpclassifyd+0x34>
 800c6dc:	2004      	movs	r0, #4
 800c6de:	4770      	bx	lr
 800c6e0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c6e4:	d201      	bcs.n	800c6ea <__fpclassifyd+0x3e>
 800c6e6:	2003      	movs	r0, #3
 800c6e8:	4770      	bx	lr
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c6f0:	4281      	cmp	r1, r0
 800c6f2:	bf14      	ite	ne
 800c6f4:	2000      	movne	r0, #0
 800c6f6:	f003 0001 	andeq.w	r0, r3, #1
 800c6fa:	4770      	bx	lr

0800c6fc <matherr>:
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	4770      	bx	lr

0800c700 <nan>:
 800c700:	2100      	movs	r1, #0
 800c702:	2000      	movs	r0, #0
 800c704:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop

0800c70c <rint>:
 800c70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c710:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c714:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c718:	2e13      	cmp	r6, #19
 800c71a:	b083      	sub	sp, #12
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	460d      	mov	r5, r1
 800c722:	4689      	mov	r9, r1
 800c724:	4684      	mov	ip, r0
 800c726:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800c72a:	dc37      	bgt.n	800c79c <rint+0x90>
 800c72c:	2e00      	cmp	r6, #0
 800c72e:	db52      	blt.n	800c7d6 <rint+0xca>
 800c730:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c734:	f2c0 010f 	movt	r1, #15
 800c738:	4131      	asrs	r1, r6
 800c73a:	ea01 0003 	and.w	r0, r1, r3
 800c73e:	4310      	orrs	r0, r2
 800c740:	d031      	beq.n	800c7a6 <rint+0x9a>
 800c742:	0849      	lsrs	r1, r1, #1
 800c744:	ea01 0c03 	and.w	ip, r1, r3
 800c748:	ea5c 0c02 	orrs.w	ip, ip, r2
 800c74c:	d00c      	beq.n	800c768 <rint+0x5c>
 800c74e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c752:	ea25 0101 	bic.w	r1, r5, r1
 800c756:	4133      	asrs	r3, r6
 800c758:	ea41 0903 	orr.w	r9, r1, r3
 800c75c:	2e13      	cmp	r6, #19
 800c75e:	bf0c      	ite	eq
 800c760:	f04f 4c00 	moveq.w	ip, #2147483648	; 0x80000000
 800c764:	f04f 0c00 	movne.w	ip, #0
 800c768:	f24f 33e0 	movw	r3, #62432	; 0xf3e0
 800c76c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c770:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c774:	464f      	mov	r7, r9
 800c776:	e9d8 8900 	ldrd	r8, r9, [r8]
 800c77a:	4662      	mov	r2, ip
 800c77c:	463b      	mov	r3, r7
 800c77e:	4640      	mov	r0, r8
 800c780:	4649      	mov	r1, r9
 800c782:	f7f3 fd25 	bl	80001d0 <__adddf3>
 800c786:	e9cd 0100 	strd	r0, r1, [sp]
 800c78a:	4642      	mov	r2, r8
 800c78c:	464b      	mov	r3, r9
 800c78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c792:	f7f3 fd1b 	bl	80001cc <__aeabi_dsub>
 800c796:	b003      	add	sp, #12
 800c798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c79c:	2e33      	cmp	r6, #51	; 0x33
 800c79e:	dd07      	ble.n	800c7b0 <rint+0xa4>
 800c7a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c7a4:	d03f      	beq.n	800c826 <rint+0x11a>
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	b003      	add	sp, #12
 800c7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c7b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c7b8:	40f9      	lsrs	r1, r7
 800c7ba:	4201      	tst	r1, r0
 800c7bc:	d0f3      	beq.n	800c7a6 <rint+0x9a>
 800c7be:	0849      	lsrs	r1, r1, #1
 800c7c0:	4201      	tst	r1, r0
 800c7c2:	bf1f      	itttt	ne
 800c7c4:	f04f 4c80 	movne.w	ip, #1073741824	; 0x40000000
 800c7c8:	ea20 0101 	bicne.w	r1, r0, r1
 800c7cc:	fa4c f707 	asrne.w	r7, ip, r7
 800c7d0:	ea41 0c07 	orrne.w	ip, r1, r7
 800c7d4:	e7c8      	b.n	800c768 <rint+0x5c>
 800c7d6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c7da:	4301      	orrs	r1, r0
 800c7dc:	d0e3      	beq.n	800c7a6 <rint+0x9a>
 800c7de:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c7e2:	4301      	orrs	r1, r0
 800c7e4:	4248      	negs	r0, r1
 800c7e6:	4308      	orrs	r0, r1
 800c7e8:	f24f 31e0 	movw	r1, #62432	; 0xf3e0
 800c7ec:	0b00      	lsrs	r0, r0, #12
 800c7ee:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c7f2:	0c5c      	lsrs	r4, r3, #17
 800c7f4:	f400 2000 	and.w	r0, r0, #524288	; 0x80000
 800c7f8:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c7fc:	ea40 4344 	orr.w	r3, r0, r4, lsl #17
 800c800:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 fce2 	bl	80001d0 <__adddf3>
 800c80c:	e9cd 0100 	strd	r0, r1, [sp]
 800c810:	462b      	mov	r3, r5
 800c812:	4622      	mov	r2, r4
 800c814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c818:	f7f3 fcd8 	bl	80001cc <__aeabi_dsub>
 800c81c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c820:	ea43 71c8 	orr.w	r1, r3, r8, lsl #31
 800c824:	e7c1      	b.n	800c7aa <rint+0x9e>
 800c826:	f7f3 fcd3 	bl	80001d0 <__adddf3>
 800c82a:	e7be      	b.n	800c7aa <rint+0x9e>
 800c82c:	0000      	movs	r0, r0
	...

0800c830 <scalbn>:
 800c830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	4690      	mov	r8, r2
 800c83a:	4606      	mov	r6, r0
 800c83c:	460f      	mov	r7, r1
 800c83e:	460a      	mov	r2, r1
 800c840:	bb43      	cbnz	r3, 800c894 <scalbn+0x64>
 800c842:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c846:	4303      	orrs	r3, r0
 800c848:	d039      	beq.n	800c8be <scalbn+0x8e>
 800c84a:	2300      	movs	r3, #0
 800c84c:	f2c4 3350 	movt	r3, #17232	; 0x4350
 800c850:	2200      	movs	r2, #0
 800c852:	f7f3 fe6f 	bl	8000534 <__aeabi_dmul>
 800c856:	f643 43b0 	movw	r3, #15536	; 0x3cb0
 800c85a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800c85e:	4598      	cmp	r8, r3
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	db3b      	blt.n	800c8de <scalbn+0xae>
 800c866:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c86a:	3b36      	subs	r3, #54	; 0x36
 800c86c:	460a      	mov	r2, r1
 800c86e:	4443      	add	r3, r8
 800c870:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c874:	428b      	cmp	r3, r1
 800c876:	dd16      	ble.n	800c8a6 <scalbn+0x76>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	a12e      	add	r1, pc, #184	; (adr r1, 800c938 <scalbn+0x108>)
 800c87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c882:	f000 f861 	bl	800c948 <copysign>
 800c886:	a32c      	add	r3, pc, #176	; (adr r3, 800c938 <scalbn+0x108>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fe52 	bl	8000534 <__aeabi_dmul>
 800c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c894:	f240 74ff 	movw	r4, #2047	; 0x7ff
 800c898:	42a3      	cmp	r3, r4
 800c89a:	d027      	beq.n	800c8ec <scalbn+0xbc>
 800c89c:	4443      	add	r3, r8
 800c89e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c8a2:	428b      	cmp	r3, r1
 800c8a4:	dce8      	bgt.n	800c878 <scalbn+0x48>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dd0b      	ble.n	800c8c2 <scalbn+0x92>
 800c8aa:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c8ae:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c8b2:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c2:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800c8c6:	da17      	bge.n	800c8f8 <scalbn+0xc8>
 800c8c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c8cc:	4598      	cmp	r8, r3
 800c8ce:	4632      	mov	r2, r6
 800c8d0:	463b      	mov	r3, r7
 800c8d2:	dc22      	bgt.n	800c91a <scalbn+0xea>
 800c8d4:	a11a      	add	r1, pc, #104	; (adr r1, 800c940 <scalbn+0x110>)
 800c8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8da:	f000 f835 	bl	800c948 <copysign>
 800c8de:	a318      	add	r3, pc, #96	; (adr r3, 800c940 <scalbn+0x110>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f7f3 fe26 	bl	8000534 <__aeabi_dmul>
 800c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	f7f3 fc6e 	bl	80001d0 <__adddf3>
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c8fc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c900:	3336      	adds	r3, #54	; 0x36
 800c902:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 800c906:	2300      	movs	r3, #0
 800c908:	4630      	mov	r0, r6
 800c90a:	4639      	mov	r1, r7
 800c90c:	2200      	movs	r2, #0
 800c90e:	f6c3 4390 	movt	r3, #15504	; 0x3c90
 800c912:	f7f3 fe0f 	bl	8000534 <__aeabi_dmul>
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91a:	a107      	add	r1, pc, #28	; (adr r1, 800c938 <scalbn+0x108>)
 800c91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c920:	f000 f812 	bl	800c948 <copysign>
 800c924:	a304      	add	r3, pc, #16	; (adr r3, 800c938 <scalbn+0x108>)
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 fe03 	bl	8000534 <__aeabi_dmul>
 800c92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c932:	bf00      	nop
 800c934:	f3af 8000 	nop.w
 800c938:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800c93c:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
 800c940:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
 800c944:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f

0800c948 <copysign>:
 800c948:	b430      	push	{r4, r5}
 800c94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c94e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c952:	ea43 0102 	orr.w	r1, r3, r2
 800c956:	bc30      	pop	{r4, r5}
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop

0800c95c <__errno>:
 800c95c:	f240 4390 	movw	r3, #1168	; 0x490
 800c960:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	4770      	bx	lr

Disassembly of section .rodata:

0800c968 <GPIO_PIN>:
 800c968:	40002000 	andmi	r2, r0, r0

0800c96c <GPIO_CLK>:
 800c96c:	00000040 	andeq	r0, r0, r0, asr #32
 800c970:	00000040 	andeq	r0, r0, r0, asr #32

0800c974 <BUTTON_PIN>:
 800c974:	00000001 	andeq	r0, r0, r1

0800c978 <BUTTON_CLK>:
 800c978:	00000001 	andeq	r0, r0, r1

0800c97c <BUTTON_EXTI_LINE>:
 800c97c:	00000001 	andeq	r0, r0, r1

0800c980 <BUTTON_PORT_SOURCE>:
 800c980:	00000000 	andeq	r0, r0, r0

0800c984 <BUTTON_PIN_SOURCE>:
 800c984:	00000000 	andeq	r0, r0, r0

0800c988 <BUTTON_IRQn>:
 800c988:	00000006 	andeq	r0, r0, r6

0800c98c <ASCII16x24_Table>:
	...
 800c9bc:	01800000 	orreq	r0, r0, r0
 800c9c0:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9c4:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9c8:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9cc:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9d0:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9d4:	01800180 	orreq	r0, r0, r0, lsl #3
 800c9d8:	00000000 	andeq	r0, r0, r0
 800c9dc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800c9f0:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800c9f4:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800c9f8:	00cc00cc 	sbceq	r0, ip, ip, asr #1
	...
 800ca28:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800ca2c:	06300c60 	ldrteq	r0, [r0], -r0, ror #24
 800ca30:	1ffe0630 	svcne	0x00fe0630
 800ca34:	06301ffe 	shsub8eq	r1, r0, lr
 800ca38:	03180738 	tsteq	r8, #56, 14	; 0xe00000
 800ca3c:	1ffe1ffe 	svcne	0x00fe1ffe
 800ca40:	03180318 	tsteq	r8, #24, 6	; 0x60000000
 800ca44:	018c018c 	orreq	r0, ip, ip, lsl #3
 800ca48:	0000018c 	andeq	r0, r0, ip, lsl #3
 800ca4c:	00800000 	addeq	r0, r0, r0
 800ca50:	0ff803e0 	svceq	0x00f803e0
 800ca54:	1c8c0e9c 	stcne	14, cr0, [ip], {156}	; 0x9c
 800ca58:	008c188c 	addeq	r1, ip, ip, lsl #17
 800ca5c:	01f80098 			; <UNDEFINED> instruction: 0x01f80098
 800ca60:	0e8007e0 	cdpeq	7, 8, cr0, cr0, cr0, {7}
 800ca64:	188c1c80 	stmne	ip, {r7, sl, fp, ip}
 800ca68:	189c188c 	ldmne	ip, {r2, r3, r7, fp, ip}
 800ca6c:	0ff00cb8 	svceq	0x00f00cb8
 800ca70:	008003e0 	addeq	r0, r0, r0, ror #7
 800ca74:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800ca80:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
 800ca84:	0c110c1b 	ldceq	12, cr0, [r1], {27}
 800ca88:	06110611 			; <UNDEFINED> instruction: 0x06110611
 800ca8c:	03110311 	tsteq	r1, #1140850688	; 0x44000000
 800ca90:	018e019b 			; <UNDEFINED> instruction: 0x018e019b
 800ca94:	6cc038c0 	stclvs	8, cr3, [r0], {192}	; 0xc0
 800ca98:	44604460 	strbtmi	r4, [r0], #-1120	; 0x460
 800ca9c:	44304430 	ldrtmi	r4, [r0], #-1072	; 0x430
 800caa0:	6c184418 	cfldrsvs	mvf4, [r8], {24}
 800caa4:	0000380c 	andeq	r3, r0, ip, lsl #16
 800caa8:	00000000 	andeq	r0, r0, r0
 800caac:	01e00000 	mvneq	r0, r0
 800cab0:	073803f0 			; <UNDEFINED> instruction: 0x073803f0
 800cab4:	06180618 			; <UNDEFINED> instruction: 0x06180618
 800cab8:	01f00330 	mvnseq	r0, r0, lsr r3
 800cabc:	00f800f0 	ldrshteq	r0, [r8], #0
 800cac0:	330e319c 	movwcc	r3, #57756	; 0xe19c
 800cac4:	1c061e06 	stcne	14, cr1, [r6], {6}
 800cac8:	3f061c06 	svccc	0x00061c06
 800cacc:	21f073fc 	ldrshcs	r7, [r0, #60]!	; 0x3c
	...
 800cae0:	000c000c 	andeq	r0, ip, ip
 800cae4:	000c000c 	andeq	r0, ip, ip
 800cae8:	000c000c 	andeq	r0, ip, ip
	...
 800cb0c:	02000000 	andeq	r0, r0, #0
 800cb10:	01800300 	orreq	r0, r0, r0, lsl #6
 800cb14:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cb18:	00600060 	rsbeq	r0, r0, r0, rrx
 800cb1c:	00300030 	eorseq	r0, r0, r0, lsr r0
 800cb20:	00300030 	eorseq	r0, r0, r0, lsr r0
 800cb24:	00300030 	eorseq	r0, r0, r0, lsr r0
 800cb28:	00300030 	eorseq	r0, r0, r0, lsr r0
 800cb2c:	00600060 	rsbeq	r0, r0, r0, rrx
 800cb30:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cb34:	03000180 	movweq	r0, #384	; 0x180
 800cb38:	00000200 	andeq	r0, r0, r0, lsl #4
 800cb3c:	00200000 	eoreq	r0, r0, r0
 800cb40:	00c00060 	sbceq	r0, r0, r0, rrx
 800cb44:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb48:	03000300 	movweq	r0, #768	; 0x300
 800cb4c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cb50:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cb54:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cb58:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cb5c:	03000300 	movweq	r0, #768	; 0x300
 800cb60:	01800180 	orreq	r0, r0, r0, lsl #3
 800cb64:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800cb68:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800cb78:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cb7c:	07f806d8 	ubfxeq	r0, r8, #13, #25
 800cb80:	033001e0 	teqeq	r0, #224, 2	; 0x38
 800cb84:	00000738 	andeq	r0, r0, r8, lsr r7
	...
 800cba8:	01800180 	orreq	r0, r0, r0, lsl #3
 800cbac:	01800180 	orreq	r0, r0, r0, lsl #3
 800cbb0:	3ffc0180 	svccc	0x00fc0180
 800cbb4:	01803ffc 	strdeq	r3, [r0, ip]
 800cbb8:	01800180 	orreq	r0, r0, r0, lsl #3
 800cbbc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cbec:	01800000 	orreq	r0, r0, r0
 800cbf0:	01000180 	smlabbeq	r0, r0, r1, r0
 800cbf4:	00800100 	addeq	r0, r0, r0, lsl #2
	...
 800cc14:	07e007e0 	strbeq	r0, [r0, r0, ror #15]!
	...
 800cc4c:	00c00000 	sbceq	r0, r0, r0
 800cc50:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800cc5c:	0c000000 	stceq	0, cr0, [r0], {-0}
 800cc60:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cc64:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cc68:	03000300 	movweq	r0, #768	; 0x300
 800cc6c:	03800300 	orreq	r0, r0, #0, 6
 800cc70:	01800180 	orreq	r0, r0, r0, lsl #3
 800cc74:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800cc78:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cc7c:	00600060 	rsbeq	r0, r0, r0, rrx
	...
 800cc8c:	03e00000 	mvneq	r0, #0
 800cc90:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800cc94:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800cc98:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cc9c:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cca0:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cca4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cca8:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800ccac:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800ccbc:	01000000 	mrseq	r0, (UNDEF: 0)
 800ccc0:	01c00180 	biceq	r0, r0, r0, lsl #3
 800ccc4:	019801f0 			; <UNDEFINED> instruction: 0x019801f0
 800ccc8:	01800188 	orreq	r0, r0, r8, lsl #3
 800cccc:	01800180 	orreq	r0, r0, r0, lsl #3
 800ccd0:	01800180 	orreq	r0, r0, r0, lsl #3
 800ccd4:	01800180 	orreq	r0, r0, r0, lsl #3
 800ccd8:	01800180 	orreq	r0, r0, r0, lsl #3
 800ccdc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800ccec:	03e00000 	mvneq	r0, #0
 800ccf0:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800ccf4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800ccf8:	18001800 	stmdane	r0, {fp, ip}
 800ccfc:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cd00:	01800300 	orreq	r0, r0, r0, lsl #6
 800cd04:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800cd08:	00180030 	andseq	r0, r8, r0, lsr r0
 800cd0c:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800cd1c:	01e00000 	mvneq	r0, r0
 800cd20:	0e1807f8 	mrceq	7, 0, r0, cr8, cr8, {7}
 800cd24:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800cd28:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800cd2c:	07c003c0 	strbeq	r0, [r0, r0, asr #7]
 800cd30:	18000c00 	stmdane	r0, {sl, fp}
 800cd34:	180c1800 	stmdane	ip, {fp, ip}
 800cd38:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800cd3c:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800cd4c:	0c000000 	stceq	0, cr0, [r0], {-0}
 800cd50:	0f000e00 	svceq	0x00000e00
 800cd54:	0d800f00 	stceq	15, cr0, [r0]
 800cd58:	0c600cc0 	stcleq	12, cr0, [r0], #-768	; 0xfffffd00
 800cd5c:	0c300c60 	ldceq	12, cr0, [r0], #-384	; 0xfffffe80
 800cd60:	0c0c0c18 	stceq	12, cr0, [ip], {24}
 800cd64:	3ffc3ffc 	svccc	0x00fc3ffc
 800cd68:	0c000c00 	stceq	12, cr0, [r0], {-0}
 800cd6c:	0c000c00 	stceq	12, cr0, [r0], {-0}
	...
 800cd7c:	0ff80000 	svceq	0x00f80000
 800cd80:	00180ff8 			; <UNDEFINED> instruction: 0x00180ff8
 800cd84:	000c0018 	andeq	r0, ip, r8, lsl r0
 800cd88:	07fc03ec 	ldrbeq	r0, [ip, ip, ror #7]!
 800cd8c:	1c000e1c 	stcne	14, cr0, [r0], {28}
 800cd90:	18001800 	stmdane	r0, {fp, ip}
 800cd94:	180c1800 	stmdane	ip, {fp, ip}
 800cd98:	0e180c1c 	mrceq	12, 0, r0, cr8, cr12, {0}
 800cd9c:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800cdac:	07c00000 	strbeq	r0, [r0, r0]
 800cdb0:	1c380ff0 	ldcne	15, cr0, [r8], #-960	; 0xfffffc40
 800cdb4:	00181818 	andseq	r1, r8, r8, lsl r8
 800cdb8:	03cc000c 	biceq	r0, ip, #12
 800cdbc:	0e3c0fec 	cdpeq	15, 3, cr0, cr12, cr12, {7}
 800cdc0:	180c1c1c 	stmdane	ip, {r2, r3, r4, sl, fp, ip}
 800cdc4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cdc8:	0e381c18 	mrceq	12, 1, r1, cr8, cr8, {0}
 800cdcc:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800cddc:	1ffc0000 	svcne	0x00fc0000
 800cde0:	0c001ffc 	stceq	15, cr1, [r0], {252}	; 0xfc
 800cde4:	06000600 	streq	r0, [r0], -r0, lsl #12
 800cde8:	03800300 	orreq	r0, r0, #0, 6
 800cdec:	01c00180 	biceq	r0, r0, r0, lsl #3
 800cdf0:	00e000c0 	rsceq	r0, r0, r0, asr #1
 800cdf4:	00600060 	rsbeq	r0, r0, r0, rrx
 800cdf8:	00300070 	eorseq	r0, r0, r0, ror r0
 800cdfc:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800ce0c:	03e00000 	mvneq	r0, #0
 800ce10:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800ce14:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800ce18:	06380c18 			; <UNDEFINED> instruction: 0x06380c18
 800ce1c:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800ce20:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800ce24:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800ce28:	0c38180c 	ldceq	8, cr1, [r8], #-48	; 0xffffffd0
 800ce2c:	03e00ff8 	mvneq	r0, #248, 30	; 0x3e0
	...
 800ce3c:	03e00000 	mvneq	r0, #0
 800ce40:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800ce44:	180c0c1c 	stmdane	ip, {r2, r3, r4, sl, fp}
 800ce48:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800ce4c:	1e381c1c 	mrcne	12, 1, r1, cr8, cr12, {0}
 800ce50:	19e01bf8 	stmibne	r0!, {r3, r4, r5, r6, r7, r8, r9, fp, ip}^
 800ce54:	0c001800 	stceq	8, cr1, [r0], {-0}
 800ce58:	0e1c0c00 	cdpeq	12, 1, cr0, cr12, cr0, {0}
 800ce5c:	01f007f8 	ldrsheq	r0, [r0, #120]!	; 0x78
	...
 800ce78:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800ce8c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cea8:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800cebc:	01800180 	orreq	r0, r0, r0, lsl #3
 800cec0:	01000100 	mrseq	r0, (UNDEF: 16)
 800cec4:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800cedc:	1c001000 	stcne	0, cr1, [r0], {-0}
 800cee0:	03e00f80 	mvneq	r0, #128, 30	; 0x200
 800cee4:	001800f8 	ldrsheq	r0, [r8], -r8
 800cee8:	03e000f8 	mvneq	r0, #248	; 0xf8
 800ceec:	1c000f80 	stcne	15, cr0, [r0], {128}	; 0x80
 800cef0:	00001000 	andeq	r1, r0, r0
	...
 800cf0c:	00001ff8 	strdeq	r1, [r0], -r8
 800cf10:	00000000 	andeq	r0, r0, r0
 800cf14:	00001ff8 	strdeq	r1, [r0], -r8
	...
 800cf3c:	00380008 	eorseq	r0, r8, r8
 800cf40:	07c001f0 			; <UNDEFINED> instruction: 0x07c001f0
 800cf44:	18001f00 	stmdane	r0, {r8, r9, sl, fp, ip}
 800cf48:	07c01f00 	strbeq	r1, [r0, r0, lsl #30]
 800cf4c:	003801f0 	ldrshteq	r0, [r8], -r0
 800cf50:	00000008 	andeq	r0, r0, r8
	...
 800cf5c:	03e00000 	mvneq	r0, #0
 800cf60:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800cf64:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cf68:	0c001800 	stceq	8, cr1, [r0], {-0}
 800cf6c:	03000600 	movweq	r0, #1536	; 0x600
 800cf70:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800cf74:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800cf78:	00000000 	andeq	r0, r0, r0
 800cf7c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800cf90:	181807e0 	ldmdane	r8, {r5, r6, r7, r8, r9, sl}
 800cf94:	29c22004 	stmibcs	r2, {r2, sp}^
 800cf98:	44114a22 	ldrmi	r4, [r1], #-2594	; 0xa22
 800cf9c:	44094409 	strmi	r4, [r9], #-1033	; 0x409
 800cfa0:	22094409 	andcs	r4, r9, #150994944	; 0x9000000
 800cfa4:	0ce21311 	stcleq	3, cr1, [r2], #68	; 0x44
 800cfa8:	20044002 	andcs	r4, r4, r2
 800cfac:	07e01818 			; <UNDEFINED> instruction: 0x07e01818
	...
 800cfbc:	03800000 	orreq	r0, r0, #0
 800cfc0:	06c00380 	strbeq	r0, [r0], r0, lsl #7
 800cfc4:	06c006c0 	strbeq	r0, [r0], r0, asr #13
 800cfc8:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800cfcc:	18301830 	ldmdane	r0!, {r4, r5, fp, ip}
 800cfd0:	3ff81830 	svccc	0x00f81830
 800cfd4:	701c3ff8 			; <UNDEFINED> instruction: 0x701c3ff8
 800cfd8:	600c600c 	andvs	r6, ip, ip
 800cfdc:	c006c006 	andgt	ip, r6, r6
	...
 800cfec:	03fc0000 	mvnseq	r0, #0
 800cff0:	0c0c0ffc 	stceq	15, cr0, [ip], {252}	; 0xfc
 800cff4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800cff8:	0c0c180c 	stceq	8, cr1, [ip], {12}
 800cffc:	0ffc07fc 	svceq	0x00fc07fc
 800d000:	300c180c 	andcc	r1, ip, ip, lsl #16
 800d004:	300c300c 	andcc	r3, ip, ip
 800d008:	180c300c 	stmdane	ip, {r2, r3, ip, sp}
 800d00c:	07fc1ffc 			; <UNDEFINED> instruction: 0x07fc1ffc
	...
 800d01c:	07c00000 	strbeq	r0, [r0, r0]
 800d020:	38381ff0 	ldmdacc	r8!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d024:	700c301c 	andvc	r3, ip, ip, lsl r0
 800d028:	00066006 	andeq	r6, r6, r6
 800d02c:	00060006 	andeq	r0, r6, r6
 800d030:	00060006 	andeq	r0, r6, r6
 800d034:	60060006 	andvs	r0, r6, r6
 800d038:	301c700c 	andscc	r7, ip, ip
 800d03c:	07e01ff0 			; <UNDEFINED> instruction: 0x07e01ff0
	...
 800d04c:	03fe0000 	mvnseq	r0, #0
 800d050:	0e060ffe 	mcreq	15, 0, r0, cr6, cr14, {7}
 800d054:	18061806 	stmdane	r6, {r1, r2, fp, ip}
 800d058:	30063006 	andcc	r3, r6, r6
 800d05c:	30063006 	andcc	r3, r6, r6
 800d060:	30063006 	andcc	r3, r6, r6
 800d064:	18063006 	stmdane	r6, {r1, r2, ip, sp}
 800d068:	0e061806 	cdpeq	8, 0, cr1, cr6, cr6, {0}
 800d06c:	03fe0ffe 	mvnseq	r0, #1016	; 0x3f8
	...
 800d07c:	3ffc0000 	svccc	0x00fc0000
 800d080:	000c3ffc 	strdeq	r3, [ip], -ip
 800d084:	000c000c 	andeq	r0, ip, ip
 800d088:	000c000c 	andeq	r0, ip, ip
 800d08c:	1ffc1ffc 	svcne	0x00fc1ffc
 800d090:	000c000c 	andeq	r0, ip, ip
 800d094:	000c000c 	andeq	r0, ip, ip
 800d098:	000c000c 	andeq	r0, ip, ip
 800d09c:	3ffc3ffc 	svccc	0x00fc3ffc
	...
 800d0ac:	3ff80000 	svccc	0x00f80000
 800d0b0:	00183ff8 			; <UNDEFINED> instruction: 0x00183ff8
 800d0b4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0b8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0bc:	1ff81ff8 	svcne	0x00f81ff8
 800d0c0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0c4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0c8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d0cc:	00180018 	andseq	r0, r8, r8, lsl r0
	...
 800d0dc:	0fe00000 	svceq	0x00e00000
 800d0e0:	783c3ff8 	ldmdavc	ip!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 800d0e4:	e006600e 	and	r6, r6, lr
 800d0e8:	0003c007 	andeq	ip, r3, r7
 800d0ec:	fe030003 	cdp2	0, 0, cr0, cr3, cr3, {0}
 800d0f0:	c003fe03 	andgt	pc, r3, r3, lsl #28
 800d0f4:	c006c007 	andgt	ip, r6, r7
 800d0f8:	f03cc00e 			; <UNDEFINED> instruction: 0xf03cc00e
 800d0fc:	0fe03ff8 	svceq	0x00e03ff8
	...
 800d10c:	300c0000 	andcc	r0, ip, r0
 800d110:	300c300c 	andcc	r3, ip, ip
 800d114:	300c300c 	andcc	r3, ip, ip
 800d118:	300c300c 	andcc	r3, ip, ip
 800d11c:	3ffc3ffc 	svccc	0x00fc3ffc
 800d120:	300c300c 	andcc	r3, ip, ip
 800d124:	300c300c 	andcc	r3, ip, ip
 800d128:	300c300c 	andcc	r3, ip, ip
 800d12c:	300c300c 	andcc	r3, ip, ip
	...
 800d13c:	01800000 	orreq	r0, r0, r0
 800d140:	01800180 	orreq	r0, r0, r0, lsl #3
 800d144:	01800180 	orreq	r0, r0, r0, lsl #3
 800d148:	01800180 	orreq	r0, r0, r0, lsl #3
 800d14c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d150:	01800180 	orreq	r0, r0, r0, lsl #3
 800d154:	01800180 	orreq	r0, r0, r0, lsl #3
 800d158:	01800180 	orreq	r0, r0, r0, lsl #3
 800d15c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d16c:	06000000 	streq	r0, [r0], -r0
 800d170:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d174:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d178:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d17c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d180:	06000600 	streq	r0, [r0], -r0, lsl #12
 800d184:	06180600 	ldreq	r0, [r8], -r0, lsl #12
 800d188:	07380618 			; <UNDEFINED> instruction: 0x07380618
 800d18c:	01e003f0 	strdeq	r0, [r0, #48]!	; 0x30
	...
 800d19c:	30060000 	andcc	r0, r6, r0
 800d1a0:	0c061806 	stceq	8, cr1, [r6], {6}
 800d1a4:	03060606 	movweq	r0, #26118	; 0x6606
 800d1a8:	00c60186 	sbceq	r0, r6, r6, lsl #3
 800d1ac:	00760066 	rsbseq	r0, r6, r6, rrx
 800d1b0:	018e00de 	ldrdeq	r0, [lr, lr]
 800d1b4:	06060306 	streq	r0, [r6], -r6, lsl #6
 800d1b8:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800d1bc:	60063006 	andvs	r3, r6, r6
	...
 800d1cc:	00180000 	andseq	r0, r8, r0
 800d1d0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1d4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1d8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1dc:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1e0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1e4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1e8:	00180018 	andseq	r0, r8, r8, lsl r0
 800d1ec:	1ff81ff8 	svcne	0x00f81ff8
	...
 800d1fc:	e00e0000 	and	r0, lr, r0
 800d200:	f01ef01e 			; <UNDEFINED> instruction: 0xf01ef01e
 800d204:	d836f01e 	ldmdale	r6!, {r1, r2, r3, r4, ip, sp, lr, pc}
 800d208:	d836d836 	ldmdale	r6!, {r1, r2, r4, r5, fp, ip, lr, pc}
 800d20c:	cc66d836 	stclgt	8, cr13, [r6], #-216	; 0xffffff28
 800d210:	cc66cc66 	stclgt	12, cr12, [r6], #-408	; 0xfffffe68
 800d214:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800d218:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800d21c:	c386c386 	orrgt	ip, r6, #402653186	; 0x18000002
	...
 800d22c:	300c0000 	andcc	r0, ip, r0
 800d230:	303c301c 	eorscc	r3, ip, ip, lsl r0
 800d234:	306c303c 	rsbcc	r3, ip, ip, lsr r0
 800d238:	30cc306c 	sbccc	r3, ip, ip, rrx
 800d23c:	318c30cc 	orrcc	r3, ip, ip, asr #1
 800d240:	330c330c 	movwcc	r3, #49932	; 0xc30c
 800d244:	360c360c 	strcc	r3, [ip], -ip, lsl #12
 800d248:	3c0c3c0c 	stccc	12, cr3, [ip], {12}
 800d24c:	300c380c 	andcc	r3, ip, ip, lsl #16
	...
 800d25c:	07e00000 	strbeq	r0, [r0, r0]!
 800d260:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d264:	6006700e 	andvs	r7, r6, lr
 800d268:	c003c003 	andgt	ip, r3, r3
 800d26c:	c003c003 	andgt	ip, r3, r3
 800d270:	c003c003 	andgt	ip, r3, r3
 800d274:	6006c003 	andvs	ip, r6, r3
 800d278:	381c700e 	ldmdacc	ip, {r1, r2, r3, ip, sp, lr}
 800d27c:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800d28c:	0ffc0000 	svceq	0x00fc0000
 800d290:	380c1ffc 	stmdacc	ip, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d294:	300c300c 	andcc	r3, ip, ip
 800d298:	300c300c 	andcc	r3, ip, ip
 800d29c:	1ffc180c 	svcne	0x00fc180c
 800d2a0:	000c07fc 	strdeq	r0, [ip], -ip
 800d2a4:	000c000c 	andeq	r0, ip, ip
 800d2a8:	000c000c 	andeq	r0, ip, ip
 800d2ac:	000c000c 	andeq	r0, ip, ip
	...
 800d2bc:	07e00000 	strbeq	r0, [r0, r0]!
 800d2c0:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d2c4:	6006700e 	andvs	r7, r6, lr
 800d2c8:	c003e003 	andgt	lr, r3, r3
 800d2cc:	c003c003 	andgt	ip, r3, r3
 800d2d0:	c003c003 	andgt	ip, r3, r3
 800d2d4:	6306e007 	movwvs	lr, #24583	; 0x6007
 800d2d8:	3c1c3f0e 	ldccc	15, cr3, [ip], {14}
 800d2dc:	f7e03ff8 			; <UNDEFINED> instruction: 0xf7e03ff8
 800d2e0:	0000c000 	andeq	ip, r0, r0
	...
 800d2ec:	0ffe0000 	svceq	0x00fe0000
 800d2f0:	38061ffe 	stmdacc	r6, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d2f4:	30063006 	andcc	r3, r6, r6
 800d2f8:	38063006 	stmdacc	r6, {r1, r2, ip, sp}
 800d2fc:	07fe1ffe 			; <UNDEFINED> instruction: 0x07fe1ffe
 800d300:	06060306 	streq	r0, [r6], -r6, lsl #6
 800d304:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800d308:	30061806 	andcc	r1, r6, r6, lsl #16
 800d30c:	60063006 	andvs	r3, r6, r6
	...
 800d31c:	03e00000 	mvneq	r0, #0
 800d320:	0c1c0ff8 	ldceq	15, cr0, [ip], {248}	; 0xf8
 800d324:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800d328:	001c000c 	andseq	r0, ip, ip
 800d32c:	0fe003f8 	svceq	0x00e003f8
 800d330:	38001e00 	stmdacc	r0, {r9, sl, fp, ip}
 800d334:	30063006 	andcc	r3, r6, r6
 800d338:	1c1c300e 	ldcne	0, cr3, [ip], {14}
 800d33c:	07e00ff8 			; <UNDEFINED> instruction: 0x07e00ff8
	...
 800d34c:	7ffe0000 	svcvc	0x00fe0000
 800d350:	01807ffe 	strdeq	r7, [r0, lr]
 800d354:	01800180 	orreq	r0, r0, r0, lsl #3
 800d358:	01800180 	orreq	r0, r0, r0, lsl #3
 800d35c:	01800180 	orreq	r0, r0, r0, lsl #3
 800d360:	01800180 	orreq	r0, r0, r0, lsl #3
 800d364:	01800180 	orreq	r0, r0, r0, lsl #3
 800d368:	01800180 	orreq	r0, r0, r0, lsl #3
 800d36c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d37c:	300c0000 	andcc	r0, ip, r0
 800d380:	300c300c 	andcc	r3, ip, ip
 800d384:	300c300c 	andcc	r3, ip, ip
 800d388:	300c300c 	andcc	r3, ip, ip
 800d38c:	300c300c 	andcc	r3, ip, ip
 800d390:	300c300c 	andcc	r3, ip, ip
 800d394:	300c300c 	andcc	r3, ip, ip
 800d398:	1818300c 	ldmdane	r8, {r2, r3, ip, sp}
 800d39c:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800d3ac:	60030000 	andvs	r0, r3, r0
 800d3b0:	30063006 	andcc	r3, r6, r6
 800d3b4:	180c3006 	stmdane	ip, {r1, r2, ip, sp}
 800d3b8:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800d3bc:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800d3c0:	06300e38 			; <UNDEFINED> instruction: 0x06300e38
 800d3c4:	07700630 			; <UNDEFINED> instruction: 0x07700630
 800d3c8:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d3cc:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800d3dc:	60030000 	andvs	r0, r3, r0
 800d3e0:	61c361c3 	bicvs	r6, r3, r3, asr #3
 800d3e4:	336661c3 	cmncc	r6, #-1073741776	; 0xc0000030
 800d3e8:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800d3ec:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800d3f0:	1b6c3366 	blne	9b1a190 <_siccmram+0x1b0a904>
 800d3f4:	1b6c1b6c 	blne	9b141ac <_siccmram+0x1b04920>
 800d3f8:	1e3c1a2c 	vaddne.f32	s2, s24, s25
 800d3fc:	0e380e38 	mrceq	14, 1, r0, cr8, cr8, {1}
	...
 800d40c:	e00f0000 	and	r0, pc, r0
 800d410:	3018700c 	andscc	r7, r8, ip
 800d414:	0c701830 	ldcleq	8, cr1, [r0], #-192	; 0xffffff40
 800d418:	07c00e60 	strbeq	r0, [r0, r0, ror #28]
 800d41c:	03800380 	orreq	r0, r0, #128, 6
 800d420:	06e003c0 	strbteq	r0, [r0], r0, asr #7
 800d424:	1c300c70 	ldcne	12, cr0, [r0], #-448	; 0xfffffe40
 800d428:	300c1818 	andcc	r1, ip, r8, lsl r8
 800d42c:	e007600e 	and	r6, r7, lr
	...
 800d43c:	c0030000 	andgt	r0, r3, r0
 800d440:	300c6006 	andcc	r6, ip, r6
 800d444:	1838381c 	ldmdane	r8!, {r2, r3, r4, fp, ip, sp}
 800d448:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800d44c:	03c007e0 	biceq	r0, r0, #224, 14	; 0x3800000
 800d450:	01800180 	orreq	r0, r0, r0, lsl #3
 800d454:	01800180 	orreq	r0, r0, r0, lsl #3
 800d458:	01800180 	orreq	r0, r0, r0, lsl #3
 800d45c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800d46c:	7ffc0000 	svcvc	0x00fc0000
 800d470:	60007ffc 	strdvs	r7, [r0], -ip
 800d474:	18003000 	stmdane	r0, {ip, sp}
 800d478:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800d47c:	01800300 	orreq	r0, r0, r0, lsl #6
 800d480:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800d484:	00180030 	andseq	r0, r8, r0, lsr r0
 800d488:	0006000c 	andeq	r0, r6, ip
 800d48c:	7ffe7ffe 	svcvc	0x00fe7ffe
	...
 800d49c:	03e00000 	mvneq	r0, #0
 800d4a0:	006003e0 	rsbeq	r0, r0, r0, ror #7
 800d4a4:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4a8:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4ac:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4b0:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4b4:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4b8:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4bc:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4c0:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4c4:	03e00060 	mvneq	r0, #96	; 0x60
 800d4c8:	000003e0 	andeq	r0, r0, r0, ror #7
 800d4cc:	00300000 	eorseq	r0, r0, r0
 800d4d0:	00600030 	rsbeq	r0, r0, r0, lsr r0
 800d4d4:	00600060 	rsbeq	r0, r0, r0, rrx
 800d4d8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d4dc:	01c000c0 	biceq	r0, r0, r0, asr #1
 800d4e0:	01800180 	orreq	r0, r0, r0, lsl #3
 800d4e4:	03000180 	movweq	r0, #384	; 0x180
 800d4e8:	03000300 	movweq	r0, #768	; 0x300
 800d4ec:	06000600 	streq	r0, [r0], -r0, lsl #12
	...
 800d4fc:	03e00000 	mvneq	r0, #0
 800d500:	030003e0 	movweq	r0, #992	; 0x3e0
 800d504:	03000300 	movweq	r0, #768	; 0x300
 800d508:	03000300 	movweq	r0, #768	; 0x300
 800d50c:	03000300 	movweq	r0, #768	; 0x300
 800d510:	03000300 	movweq	r0, #768	; 0x300
 800d514:	03000300 	movweq	r0, #768	; 0x300
 800d518:	03000300 	movweq	r0, #768	; 0x300
 800d51c:	03000300 	movweq	r0, #768	; 0x300
 800d520:	03000300 	movweq	r0, #768	; 0x300
 800d524:	03e00300 	mvneq	r0, #0, 6
 800d528:	000003e0 	andeq	r0, r0, r0, ror #7
 800d52c:	00000000 	andeq	r0, r0, r0
 800d530:	01c001c0 	biceq	r0, r0, r0, asr #3
 800d534:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d538:	06300360 	ldrteq	r0, [r0], -r0, ror #6
 800d53c:	0c180630 	ldceq	6, cr0, [r8], {48}	; 0x30
 800d540:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 800d57c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800d580:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
 800d58c:	000c0000 	andeq	r0, ip, r0
 800d590:	000c000c 	andeq	r0, ip, ip
 800d594:	000c000c 	andeq	r0, ip, ip
 800d598:	0000000c 	andeq	r0, r0, ip
	...
 800d5c8:	07f803f0 			; <UNDEFINED> instruction: 0x07f803f0
 800d5cc:	0c0c0c1c 	stceq	12, cr0, [ip], {28}
 800d5d0:	0ff00f00 	svceq	0x00f00f00
 800d5d4:	0c0c0cf8 	stceq	12, cr0, [ip], {248}	; 0xf8
 800d5d8:	0f1c0c0c 	svceq	0x001c0c0c
 800d5dc:	18f00ff8 	ldmne	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}^
	...
 800d5ec:	00180000 	andseq	r0, r8, r0
 800d5f0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d5f4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d5f8:	0ff803d8 	svceq	0x00f803d8
 800d5fc:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800d600:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d604:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d608:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800d60c:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
	...
 800d628:	07f003c0 	ldrbeq	r0, [r0, r0, asr #7]!
 800d62c:	0c180e30 	ldceq	14, cr0, [r8], {48}	; 0x30
 800d630:	00180018 	andseq	r0, r8, r8, lsl r0
 800d634:	00180018 	andseq	r0, r8, r8, lsl r0
 800d638:	0e300c18 	mrceq	12, 1, r0, cr0, cr8, {0}
 800d63c:	03c007f0 	biceq	r0, r0, #240, 14	; 0x3c00000
	...
 800d64c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800d650:	18001800 	stmdane	r0, {fp, ip}
 800d654:	18001800 	stmdane	r0, {fp, ip}
 800d658:	1ff01bc0 	svcne	0x00f01bc0
 800d65c:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800d660:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d664:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d668:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800d66c:	1bc01ff0 	blne	7015634 <_Min_Stack_Size+0x7015234>
	...
 800d688:	0ff003c0 	svceq	0x00f003c0
 800d68c:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800d690:	1ff81ff8 	svcne	0x00f81ff8
 800d694:	00180018 	andseq	r0, r8, r8, lsl r0
 800d698:	1c301838 	ldcne	8, cr1, [r0], #-224	; 0xffffff20
 800d69c:	07c00ff0 			; <UNDEFINED> instruction: 0x07c00ff0
	...
 800d6ac:	0f800000 	svceq	0x00800000
 800d6b0:	00c00fc0 	sbceq	r0, r0, r0, asr #31
 800d6b4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6b8:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800d6bc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6c0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6c4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6c8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d6cc:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d6e8:	0ff80de0 	svceq	0x00f80de0
 800d6ec:	0c0c0e18 	stceq	14, cr0, [ip], {24}
 800d6f0:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800d6f4:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800d6f8:	0e180c0c 	cdpeq	12, 1, cr0, cr8, cr12, {0}
 800d6fc:	0de00ff8 	stcleq	15, cr0, [r0, #992]!	; 0x3e0
 800d700:	0c0c0c00 	stceq	12, cr0, [ip], {-0}
 800d704:	07f8061c 			; <UNDEFINED> instruction: 0x07f8061c
 800d708:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800d70c:	00180000 	andseq	r0, r8, r0
 800d710:	00180018 	andseq	r0, r8, r8, lsl r0
 800d714:	00180018 	andseq	r0, r8, r8, lsl r0
 800d718:	0ff807d8 	svceq	0x00f807d8
 800d71c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800d720:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d724:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d728:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d72c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800d73c:	00c00000 	sbceq	r0, r0, r0
 800d740:	000000c0 	andeq	r0, r0, r0, asr #1
 800d744:	00000000 	andeq	r0, r0, r0
 800d748:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d74c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d750:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d754:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d758:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d75c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d76c:	00c00000 	sbceq	r0, r0, r0
 800d770:	000000c0 	andeq	r0, r0, r0, asr #1
 800d774:	00000000 	andeq	r0, r0, r0
 800d778:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d77c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d780:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d784:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d788:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d78c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d790:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d794:	00f800c0 	rscseq	r0, r8, r0, asr #1
 800d798:	00000078 	andeq	r0, r0, r8, ror r0
 800d79c:	000c0000 	andeq	r0, ip, r0
 800d7a0:	000c000c 	andeq	r0, ip, ip
 800d7a4:	000c000c 	andeq	r0, ip, ip
 800d7a8:	060c0c0c 	streq	r0, [ip], -ip, lsl #24
 800d7ac:	018c030c 	orreq	r0, ip, ip, lsl #6
 800d7b0:	006c00cc 	rsbeq	r0, ip, ip, asr #1
 800d7b4:	019c00fc 	ldrsheq	r0, [ip, ip]
 800d7b8:	030c038c 	movweq	r0, #50060	; 0xc38c
 800d7bc:	0c0c060c 	stceq	6, cr0, [ip], {12}
	...
 800d7cc:	00c00000 	sbceq	r0, r0, r0
 800d7d0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7d4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7d8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7dc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7e0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7e4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7e8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d7ec:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800d808:	7eff3c7c 	mrcvc	12, 7, r3, cr15, cr12, {3}
 800d80c:	c183e3c7 	orrgt	lr, r3, r7, asr #7
 800d810:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d814:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d818:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800d81c:	c183c183 	orrgt	ip, r3, r3, lsl #3
	...
 800d838:	0ff80798 	svceq	0x00f80798
 800d83c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800d840:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d844:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d848:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d84c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800d868:	0ff003c0 	svceq	0x00f003c0
 800d86c:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800d870:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d874:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d878:	0c301818 	ldceq	8, cr1, [r0], #-96	; 0xffffffa0
 800d87c:	03c00ff0 	biceq	r0, r0, #240, 30	; 0x3c0
	...
 800d898:	0ff803d8 	svceq	0x00f803d8
 800d89c:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800d8a0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d8a4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d8a8:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800d8ac:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
 800d8b0:	00180018 	andseq	r0, r8, r8, lsl r0
 800d8b4:	00180018 	andseq	r0, r8, r8, lsl r0
 800d8b8:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 800d8c8:	1ff01bc0 	svcne	0x00f01bc0
 800d8cc:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800d8d0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d8d4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d8d8:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800d8dc:	1bc01ff0 	blne	70158a4 <_Min_Stack_Size+0x70154a4>
 800d8e0:	18001800 	stmdane	r0, {fp, ip}
 800d8e4:	18001800 	stmdane	r0, {fp, ip}
 800d8e8:	00001800 	andeq	r1, r0, r0, lsl #16
	...
 800d8f8:	03f007b0 	mvnseq	r0, #176, 14	; 0x2c00000
 800d8fc:	00300070 	eorseq	r0, r0, r0, ror r0
 800d900:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d904:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d908:	00300030 	eorseq	r0, r0, r0, lsr r0
 800d90c:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800d928:	03f003e0 	mvnseq	r0, #224, 6	; 0x80000003
 800d92c:	0c180e38 	ldceq	14, cr0, [r8], {56}	; 0x38
 800d930:	03f00038 	mvnseq	r0, #56	; 0x38
 800d934:	0c0007c0 	stceq	7, cr0, [r0], {192}	; 0xc0
 800d938:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800d93c:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800d950:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800d954:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d958:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800d95c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d960:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d964:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d968:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800d96c:	078007c0 	streq	r0, [r0, r0, asr #15]
	...
 800d988:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d98c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d990:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d994:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800d998:	1c381818 	ldcne	8, cr1, [r8], #-96	; 0xffffffa0
 800d99c:	19e01ff0 	stmibne	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}^
	...
 800d9b8:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800d9bc:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800d9c0:	06300630 			; <UNDEFINED> instruction: 0x06300630
 800d9c4:	03600630 	cmneq	r0, #48, 12	; 0x3000000
 800d9c8:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800d9cc:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800d9e8:	41c141c1 	bicmi	r4, r1, r1, asr #3
 800d9ec:	636361c3 	cmnvs	r3, #-1073741776	; 0xc0000030
 800d9f0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800d9f4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800d9f8:	1c1c3636 	ldcne	6, cr3, [ip], {54}	; 0x36
 800d9fc:	1c1c1c1c 	ldcne	12, cr1, [ip], {28}
	...
 800da18:	1c38381c 	ldcne	8, cr3, [r8], #-112	; 0xffffff90
 800da1c:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800da20:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800da24:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800da28:	0c300660 	ldceq	6, cr0, [r0], #-384	; 0xfffffe80
 800da2c:	381c1c38 	ldmdacc	ip, {r3, r4, r5, sl, fp, ip}
	...
 800da48:	18303018 	ldmdane	r0!, {r3, r4, ip, sp}
 800da4c:	18701830 	ldmdane	r0!, {r4, r5, fp, ip}^
 800da50:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800da54:	06c00ce0 	strbeq	r0, [r0], r0, ror #25
 800da58:	038006c0 	orreq	r0, r0, #192, 12	; 0xc000000
 800da5c:	03800380 	orreq	r0, r0, #128, 6
 800da60:	01800180 	orreq	r0, r0, r0, lsl #3
 800da64:	00f001c0 	rscseq	r0, r0, r0, asr #3
 800da68:	00000070 	andeq	r0, r0, r0, ror r0
	...
 800da78:	1ffc1ffc 	svcne	0x00fc1ffc
 800da7c:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800da80:	01800300 	orreq	r0, r0, r0, lsl #6
 800da84:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800da88:	00180030 	andseq	r0, r8, r0, lsr r0
 800da8c:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800da9c:	03000000 	movweq	r0, #0
 800daa0:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800daa4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800daa8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800daac:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800dab0:	00300060 	eorseq	r0, r0, r0, rrx
 800dab4:	00400060 	subeq	r0, r0, r0, rrx
 800dab8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800dabc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800dac0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800dac4:	03000180 	movweq	r0, #384	; 0x180
 800dac8:	00000000 	andeq	r0, r0, r0
 800dacc:	01800000 	orreq	r0, r0, r0
 800dad0:	01800180 	orreq	r0, r0, r0, lsl #3
 800dad4:	01800180 	orreq	r0, r0, r0, lsl #3
 800dad8:	01800180 	orreq	r0, r0, r0, lsl #3
 800dadc:	01800180 	orreq	r0, r0, r0, lsl #3
 800dae0:	01800180 	orreq	r0, r0, r0, lsl #3
 800dae4:	01800180 	orreq	r0, r0, r0, lsl #3
 800dae8:	01800180 	orreq	r0, r0, r0, lsl #3
 800daec:	01800180 	orreq	r0, r0, r0, lsl #3
 800daf0:	01800180 	orreq	r0, r0, r0, lsl #3
 800daf4:	01800180 	orreq	r0, r0, r0, lsl #3
 800daf8:	00000180 	andeq	r0, r0, r0, lsl #3
 800dafc:	00600000 	rsbeq	r0, r0, r0
 800db00:	01c000c0 	biceq	r0, r0, r0, asr #1
 800db04:	01800180 	orreq	r0, r0, r0, lsl #3
 800db08:	01800180 	orreq	r0, r0, r0, lsl #3
 800db0c:	03000180 	movweq	r0, #384	; 0x180
 800db10:	06000300 	streq	r0, [r0], -r0, lsl #6
 800db14:	01000300 	mrseq	r0, LR_irq
 800db18:	01800180 	orreq	r0, r0, r0, lsl #3
 800db1c:	01800180 	orreq	r0, r0, r0, lsl #3
 800db20:	01800180 	orreq	r0, r0, r0, lsl #3
 800db24:	006000c0 	rsbeq	r0, r0, r0, asr #1
	...
 800db3c:	1ff810f0 	svcne	0x00f810f0
 800db40:	00000f08 	andeq	r0, r0, r8, lsl #30
	...

0800db5c <ASCII12x12_Table>:
	...
 800db74:	20000000 	andcs	r0, r0, r0
 800db78:	20002000 	andcs	r2, r0, r0
 800db7c:	20002000 	andcs	r2, r0, r0
 800db80:	20002000 	andcs	r2, r0, r0
 800db84:	20000000 	andcs	r0, r0, r0
 800db88:	00000000 	andeq	r0, r0, r0
 800db8c:	50000000 	andpl	r0, r0, r0
 800db90:	50005000 	andpl	r5, r0, r0
	...
 800dba4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 800dba8:	12000900 	andne	r0, r0, #0, 18
 800dbac:	12007f00 	andne	r7, r0, #0, 30
 800dbb0:	12007f00 	andne	r7, r0, #0, 30
 800dbb4:	24002400 	strcs	r2, [r0], #-1024	; 0x400
 800dbb8:	00000000 	andeq	r0, r0, r0
 800dbbc:	38001000 	stmdacc	r0, {ip}
 800dbc0:	50005400 	andpl	r5, r0, r0, lsl #8
 800dbc4:	38005000 	stmdacc	r0, {ip, lr}
 800dbc8:	54001400 	strpl	r1, [r0], #-1024	; 0x400
 800dbcc:	38005400 	stmdacc	r0, {sl, ip, lr}
 800dbd0:	00001000 	andeq	r1, r0, r0
 800dbd4:	30800000 	addcc	r0, r0, r0
 800dbd8:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800dbdc:	32c04a00 	sbccc	r4, r0, #0, 20
 800dbe0:	09200520 	stmdbeq	r0!, {r5, r8, sl}
 800dbe4:	10c00920 	sbcne	r0, r0, r0, lsr #18
 800dbe8:	00000000 	andeq	r0, r0, r0
 800dbec:	0c000000 	stceq	0, cr0, [r0], {-0}
 800dbf0:	12001200 	andne	r1, r0, #0, 4
 800dbf4:	18001400 	stmdane	r0, {sl, ip}
 800dbf8:	23002500 	movwcs	r2, #1280	; 0x500
 800dbfc:	1d802300 	stcne	3, cr2, [r0]
 800dc00:	00000000 	andeq	r0, r0, r0
 800dc04:	40000000 	andmi	r0, r0, r0
 800dc08:	40004000 	andmi	r4, r0, r0
	...
 800dc1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dc20:	10001000 	andne	r1, r0, r0
 800dc24:	20002000 	andcs	r2, r0, r0
 800dc28:	20002000 	andcs	r2, r0, r0
 800dc2c:	20002000 	andcs	r2, r0, r0
 800dc30:	10001000 	andne	r1, r0, r0
 800dc34:	40000000 	andmi	r0, r0, r0
 800dc38:	20002000 	andcs	r2, r0, r0
 800dc3c:	10001000 	andne	r1, r0, r0
 800dc40:	10001000 	andne	r1, r0, r0
 800dc44:	10001000 	andne	r1, r0, r0
 800dc48:	20002000 	andcs	r2, r0, r0
 800dc4c:	20000000 	andcs	r0, r0, r0
 800dc50:	20007000 	andcs	r7, r0, r0
 800dc54:	00005000 	andeq	r5, r0, r0
	...
 800dc68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dc6c:	7f000800 	svcvc	0x00000800
 800dc70:	08000800 	stmdaeq	r0, {fp}
	...
 800dc8c:	20000000 	andcs	r0, r0, r0
 800dc90:	40002000 	andmi	r2, r0, r0
	...
 800dca0:	00007000 	andeq	r7, r0, r0
	...
 800dcbc:	20000000 	andcs	r0, r0, r0
 800dcc0:	00000000 	andeq	r0, r0, r0
 800dcc4:	10000000 	andne	r0, r0, r0
 800dcc8:	10001000 	andne	r1, r0, r0
 800dccc:	20002000 	andcs	r2, r0, r0
 800dcd0:	20002000 	andcs	r2, r0, r0
 800dcd4:	40004000 	andmi	r4, r0, r0
 800dcd8:	00000000 	andeq	r0, r0, r0
 800dcdc:	10000000 	andne	r0, r0, r0
 800dce0:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800dce4:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dce8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dcec:	10002800 	andne	r2, r0, r0, lsl #16
 800dcf0:	00000000 	andeq	r0, r0, r0
 800dcf4:	10000000 	andne	r0, r0, r0
 800dcf8:	50003000 	andpl	r3, r0, r0
 800dcfc:	10001000 	andne	r1, r0, r0
 800dd00:	10001000 	andne	r1, r0, r0
 800dd04:	10001000 	andne	r1, r0, r0
 800dd08:	00000000 	andeq	r0, r0, r0
 800dd0c:	30000000 	andcc	r0, r0, r0
 800dd10:	44004800 	strmi	r4, [r0], #-2048	; 0x800
 800dd14:	08000400 	stmdaeq	r0, {sl}
 800dd18:	20001000 	andcs	r1, r0, r0
 800dd1c:	7c004000 	stcvc	0, cr4, [r0], {-0}
 800dd20:	00000000 	andeq	r0, r0, r0
 800dd24:	30000000 	andcc	r0, r0, r0
 800dd28:	04004800 	streq	r4, [r0], #-2048	; 0x800
 800dd2c:	10000800 	andne	r0, r0, r0, lsl #16
 800dd30:	44000800 	strmi	r0, [r0], #-2048	; 0x800
 800dd34:	30004800 	andcc	r4, r0, r0, lsl #16
 800dd38:	00000000 	andeq	r0, r0, r0
 800dd3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800dd40:	18001800 	stmdane	r0, {fp, ip}
 800dd44:	28002800 	stmdacs	r0, {fp, sp}
 800dd48:	7c004800 	stcvc	8, cr4, [r0], {-0}
 800dd4c:	08000800 	stmdaeq	r0, {fp}
 800dd50:	00000000 	andeq	r0, r0, r0
 800dd54:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dd58:	40002000 	andmi	r2, r0, r0
 800dd5c:	48007000 	stmdami	r0, {ip, sp, lr}
 800dd60:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800dd64:	30004800 	andcc	r4, r0, r0, lsl #16
 800dd68:	00000000 	andeq	r0, r0, r0
 800dd6c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800dd70:	40002400 	andmi	r2, r0, r0, lsl #8
 800dd74:	68005000 	stmdavs	r0, {ip, lr}
 800dd78:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800dd7c:	10002800 	andne	r2, r0, r0, lsl #16
 800dd80:	00000000 	andeq	r0, r0, r0
 800dd84:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800dd88:	08000400 	stmdaeq	r0, {sl}
 800dd8c:	10001000 	andne	r1, r0, r0
 800dd90:	20001000 	andcs	r1, r0, r0
 800dd94:	20002000 	andcs	r2, r0, r0
 800dd98:	00000000 	andeq	r0, r0, r0
 800dd9c:	10000000 	andne	r0, r0, r0
 800dda0:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800dda4:	10002800 	andne	r2, r0, r0, lsl #16
 800dda8:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800ddac:	10002800 	andne	r2, r0, r0, lsl #16
 800ddb0:	00000000 	andeq	r0, r0, r0
 800ddb4:	10000000 	andne	r0, r0, r0
 800ddb8:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800ddbc:	2c004400 	cfstrscs	mvf4, [r0], {-0}
 800ddc0:	04001400 	streq	r1, [r0], #-1024	; 0x400
 800ddc4:	30004800 	andcc	r4, r0, r0, lsl #16
	...
 800ddd0:	20000000 	andcs	r0, r0, r0
	...
 800dddc:	20000000 	andcs	r0, r0, r0
	...
 800dde8:	20000000 	andcs	r0, r0, r0
	...
 800ddf4:	20000000 	andcs	r0, r0, r0
 800ddf8:	40002000 	andmi	r2, r0, r0
 800ddfc:	00000000 	andeq	r0, r0, r0
 800de00:	08000400 	stmdaeq	r0, {sl}
 800de04:	40003000 	andmi	r3, r0, r0
 800de08:	08003000 	stmdaeq	r0, {ip, sp}
 800de0c:	00000400 	andeq	r0, r0, r0, lsl #8
	...
 800de18:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800de1c:	00000000 	andeq	r0, r0, r0
 800de20:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
 800de30:	20004000 	andcs	r4, r0, r0
 800de34:	04001800 	streq	r1, [r0], #-2048	; 0x800
 800de38:	20001800 	andcs	r1, r0, r0, lsl #16
 800de3c:	00004000 	andeq	r4, r0, r0
 800de40:	00000000 	andeq	r0, r0, r0
 800de44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800de48:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800de4c:	08000400 	stmdaeq	r0, {sl}
 800de50:	10001000 	andne	r1, r0, r0
 800de54:	10000000 	andne	r0, r0, r0
 800de58:	00000000 	andeq	r0, r0, r0
 800de5c:	0f800000 	svceq	0x00800000
 800de60:	2ea01040 	cdpcs	0, 10, cr1, cr0, cr0, {2}
 800de64:	512051a0 	teqpl	r0, r0, lsr #3
 800de68:	51205120 	teqpl	r0, r0, lsr #2
 800de6c:	4dc05320 	stclmi	3, cr5, [r0, #128]	; 0x80
 800de70:	10402020 	subne	r2, r0, r0, lsr #32
 800de74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800de78:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800de7c:	22001400 	andcs	r1, r0, #0, 8
 800de80:	22003e00 	andcs	r3, r0, #0, 28
 800de84:	41004100 	mrsmi	r4, (UNDEF: 16)
 800de88:	00000000 	andeq	r0, r0, r0
 800de8c:	3c000000 	stccc	0, cr0, [r0], {-0}
 800de90:	22002200 	andcs	r2, r0, #0, 4
 800de94:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800de98:	22002200 	andcs	r2, r0, #0, 4
 800de9c:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dea0:	00000000 	andeq	r0, r0, r0
 800dea4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800dea8:	21001100 	mrscs	r1, (UNDEF: 16)
 800deac:	20002000 	andcs	r2, r0, r0
 800deb0:	21002000 	mrscs	r2, (UNDEF: 0)
 800deb4:	0e001100 	adfeqs	f1, f0, f0
 800deb8:	00000000 	andeq	r0, r0, r0
 800debc:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dec0:	21002200 	mrscs	r2, R8_usr
 800dec4:	21002100 	mrscs	r2, (UNDEF: 16)
 800dec8:	21002100 	mrscs	r2, (UNDEF: 16)
 800decc:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800ded0:	00000000 	andeq	r0, r0, r0
 800ded4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800ded8:	20002000 	andcs	r2, r0, r0
 800dedc:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800dee0:	20002000 	andcs	r2, r0, r0
 800dee4:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800dee8:	00000000 	andeq	r0, r0, r0
 800deec:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800def0:	20002000 	andcs	r2, r0, r0
 800def4:	3c002000 	stccc	0, cr2, [r0], {-0}
 800def8:	20002000 	andcs	r2, r0, r0
 800defc:	20002000 	andcs	r2, r0, r0
 800df00:	00000000 	andeq	r0, r0, r0
 800df04:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800df08:	21001100 	mrscs	r1, (UNDEF: 16)
 800df0c:	27002000 	strcs	r2, [r0, -r0]
 800df10:	21002100 	mrscs	r2, (UNDEF: 16)
 800df14:	0e001100 	adfeqs	f1, f0, f0
 800df18:	00000000 	andeq	r0, r0, r0
 800df1c:	21000000 	mrscs	r0, (UNDEF: 0)
 800df20:	21002100 	mrscs	r2, (UNDEF: 16)
 800df24:	3f002100 	svccc	0x00002100
 800df28:	21002100 	mrscs	r2, (UNDEF: 16)
 800df2c:	21002100 	mrscs	r2, (UNDEF: 16)
 800df30:	00000000 	andeq	r0, r0, r0
 800df34:	20000000 	andcs	r0, r0, r0
 800df38:	20002000 	andcs	r2, r0, r0
 800df3c:	20002000 	andcs	r2, r0, r0
 800df40:	20002000 	andcs	r2, r0, r0
 800df44:	20002000 	andcs	r2, r0, r0
 800df48:	00000000 	andeq	r0, r0, r0
 800df4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800df50:	08000800 	stmdaeq	r0, {fp}
 800df54:	08000800 	stmdaeq	r0, {fp}
 800df58:	48000800 	stmdami	r0, {fp}
 800df5c:	30004800 	andcc	r4, r0, r0, lsl #16
 800df60:	00000000 	andeq	r0, r0, r0
 800df64:	22000000 	andcs	r0, r0, #0
 800df68:	28002400 	stmdacs	r0, {sl, sp}
 800df6c:	38002800 	stmdacc	r0, {fp, sp}
 800df70:	24002800 	strcs	r2, [r0], #-2048	; 0x800
 800df74:	22002400 	andcs	r2, r0, #0, 8
 800df78:	00000000 	andeq	r0, r0, r0
 800df7c:	20000000 	andcs	r0, r0, r0
 800df80:	20002000 	andcs	r2, r0, r0
 800df84:	20002000 	andcs	r2, r0, r0
 800df88:	20002000 	andcs	r2, r0, r0
 800df8c:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800df90:	00000000 	andeq	r0, r0, r0
 800df94:	20800000 	addcs	r0, r0, r0
 800df98:	31803180 	orrcc	r3, r0, r0, lsl #3
 800df9c:	2a803180 	bcs	601a5a4 <_Min_Stack_Size+0x601a1a4>
 800dfa0:	2a802a80 	bcs	60189a8 <_Min_Stack_Size+0x60185a8>
 800dfa4:	24802a80 	strcs	r2, [r0], #2688	; 0xa80
 800dfa8:	00000000 	andeq	r0, r0, r0
 800dfac:	21000000 	mrscs	r0, (UNDEF: 0)
 800dfb0:	31003100 	mrscc	r3, (UNDEF: 16)
 800dfb4:	29002900 	stmdbcs	r0, {r8, fp, sp}
 800dfb8:	23002500 	movwcs	r2, #1280	; 0x500
 800dfbc:	21002300 	mrscs	r2, LR_irq
 800dfc0:	00000000 	andeq	r0, r0, r0
 800dfc4:	0c000000 	stceq	0, cr0, [r0], {-0}
 800dfc8:	21001200 	mrscs	r1, R8_usr
 800dfcc:	21002100 	mrscs	r2, (UNDEF: 16)
 800dfd0:	21002100 	mrscs	r2, (UNDEF: 16)
 800dfd4:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800dfd8:	00000000 	andeq	r0, r0, r0
 800dfdc:	3c000000 	stccc	0, cr0, [r0], {-0}
 800dfe0:	22002200 	andcs	r2, r0, #0, 4
 800dfe4:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800dfe8:	20002000 	andcs	r2, r0, r0
 800dfec:	20002000 	andcs	r2, r0, r0
 800dff0:	00000000 	andeq	r0, r0, r0
 800dff4:	0c000000 	stceq	0, cr0, [r0], {-0}
 800dff8:	21001200 	mrscs	r1, R8_usr
 800dffc:	21002100 	mrscs	r2, (UNDEF: 16)
 800e000:	21002100 	mrscs	r2, (UNDEF: 16)
 800e004:	0d001600 	stceq	6, cr1, [r0, #-0]
 800e008:	00000100 	andeq	r0, r0, r0, lsl #2
 800e00c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800e010:	21002100 	mrscs	r2, (UNDEF: 16)
 800e014:	3e002100 	adfccs	f2, f0, f0
 800e018:	22002400 	andcs	r2, r0, #0, 8
 800e01c:	20802100 	addcs	r2, r0, r0, lsl #2
 800e020:	00000000 	andeq	r0, r0, r0
 800e024:	1c000000 	stcne	0, cr0, [r0], {-0}
 800e028:	22002200 	andcs	r2, r0, #0, 4
 800e02c:	1c002000 	stcne	0, cr2, [r0], {-0}
 800e030:	22000200 	andcs	r0, r0, #0, 4
 800e034:	1c002200 	sfmne	f2, 4, [r0], {-0}
 800e038:	00000000 	andeq	r0, r0, r0
 800e03c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800e040:	08000800 	stmdaeq	r0, {fp}
 800e044:	08000800 	stmdaeq	r0, {fp}
 800e048:	08000800 	stmdaeq	r0, {fp}
 800e04c:	08000800 	stmdaeq	r0, {fp}
 800e050:	00000000 	andeq	r0, r0, r0
 800e054:	21000000 	mrscs	r0, (UNDEF: 0)
 800e058:	21002100 	mrscs	r2, (UNDEF: 16)
 800e05c:	21002100 	mrscs	r2, (UNDEF: 16)
 800e060:	21002100 	mrscs	r2, (UNDEF: 16)
 800e064:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800e068:	00000000 	andeq	r0, r0, r0
 800e06c:	41000000 	mrsmi	r0, (UNDEF: 0)
 800e070:	22004100 	andcs	r4, r0, #0, 2
 800e074:	22002200 	andcs	r2, r0, #0, 4
 800e078:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800e07c:	08001400 	stmdaeq	r0, {sl, ip}
 800e080:	00000000 	andeq	r0, r0, r0
 800e084:	44400000 	strbmi	r0, [r0], #-0
 800e088:	2a404a40 	bcs	9020990 <_siccmram+0x1011104>
 800e08c:	2a802a80 	bcs	6018a94 <_Min_Stack_Size+0x6018694>
 800e090:	2a802a80 	bcs	6018a98 <_Min_Stack_Size+0x6018698>
 800e094:	11002a80 	smlabbne	r0, r0, sl, r2
 800e098:	00000000 	andeq	r0, r0, r0
 800e09c:	41000000 	mrsmi	r0, (UNDEF: 0)
 800e0a0:	14002200 	strne	r2, [r0], #-512	; 0x200
 800e0a4:	08001400 	stmdaeq	r0, {sl, ip}
 800e0a8:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800e0ac:	41002200 	mrsmi	r2, R8_usr
 800e0b0:	00000000 	andeq	r0, r0, r0
 800e0b4:	41000000 	mrsmi	r0, (UNDEF: 0)
 800e0b8:	22002200 	andcs	r2, r0, #0, 4
 800e0bc:	08001400 	stmdaeq	r0, {sl, ip}
 800e0c0:	08000800 	stmdaeq	r0, {fp}
 800e0c4:	08000800 	stmdaeq	r0, {fp}
 800e0c8:	00000000 	andeq	r0, r0, r0
 800e0cc:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800e0d0:	04000200 	streq	r0, [r0], #-512	; 0x200
 800e0d4:	10000800 	andne	r0, r0, r0, lsl #16
 800e0d8:	20001000 	andcs	r1, r0, r0
 800e0dc:	7e004000 	cdpvc	0, 0, cr4, cr0, cr0, {0}
 800e0e0:	00000000 	andeq	r0, r0, r0
 800e0e4:	30000000 	andcc	r0, r0, r0
 800e0e8:	20002000 	andcs	r2, r0, r0
 800e0ec:	20002000 	andcs	r2, r0, r0
 800e0f0:	20002000 	andcs	r2, r0, r0
 800e0f4:	20002000 	andcs	r2, r0, r0
 800e0f8:	20002000 	andcs	r2, r0, r0
 800e0fc:	40000000 	andmi	r0, r0, r0
 800e100:	20004000 	andcs	r4, r0, r0
 800e104:	20002000 	andcs	r2, r0, r0
 800e108:	20002000 	andcs	r2, r0, r0
 800e10c:	10001000 	andne	r1, r0, r0
 800e110:	00000000 	andeq	r0, r0, r0
 800e114:	60000000 	andvs	r0, r0, r0
 800e118:	20002000 	andcs	r2, r0, r0
 800e11c:	20002000 	andcs	r2, r0, r0
 800e120:	20002000 	andcs	r2, r0, r0
 800e124:	20002000 	andcs	r2, r0, r0
 800e128:	20002000 	andcs	r2, r0, r0
 800e12c:	10000000 	andne	r0, r0, r0
 800e130:	28002800 	stmdacs	r0, {fp, sp}
 800e134:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800e158:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800e15c:	20004000 	andcs	r4, r0, r0
	...
 800e178:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e17c:	04004400 	streq	r4, [r0], #-1024	; 0x400
 800e180:	44003c00 	strmi	r3, [r0], #-3072	; 0xc00
 800e184:	3c004400 	cfstrscc	mvf4, [r0], {-0}
 800e188:	00000000 	andeq	r0, r0, r0
 800e18c:	40000000 	andmi	r0, r0, r0
 800e190:	58004000 	stmdapl	r0, {lr}
 800e194:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e198:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e19c:	58006400 	stmdapl	r0, {sl, sp, lr}
	...
 800e1a8:	30000000 	andcc	r0, r0, r0
 800e1ac:	40004800 	andmi	r4, r0, r0, lsl #16
 800e1b0:	40004000 	andmi	r4, r0, r0
 800e1b4:	30004800 	andcc	r4, r0, r0, lsl #16
 800e1b8:	00000000 	andeq	r0, r0, r0
 800e1bc:	04000000 	streq	r0, [r0], #-0
 800e1c0:	34000400 	strcc	r0, [r0], #-1024	; 0x400
 800e1c4:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e1c8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e1cc:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800e1d8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e1dc:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e1e0:	40007c00 	andmi	r7, r0, r0, lsl #24
 800e1e4:	38004400 	stmdacc	r0, {sl, lr}
 800e1e8:	00000000 	andeq	r0, r0, r0
 800e1ec:	60000000 	andvs	r0, r0, r0
 800e1f0:	e0004000 	and	r4, r0, r0
 800e1f4:	40004000 	andmi	r4, r0, r0
 800e1f8:	40004000 	andmi	r4, r0, r0
 800e1fc:	40004000 	andmi	r4, r0, r0
	...
 800e208:	34000000 	strcc	r0, [r0], #-0
 800e20c:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e210:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e214:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800e218:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800e21c:	40000000 	andmi	r0, r0, r0
 800e220:	58004000 	stmdapl	r0, {lr}
 800e224:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e228:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e22c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e230:	00000000 	andeq	r0, r0, r0
 800e234:	40000000 	andmi	r0, r0, r0
 800e238:	40000000 	andmi	r0, r0, r0
 800e23c:	40004000 	andmi	r4, r0, r0
 800e240:	40004000 	andmi	r4, r0, r0
 800e244:	40004000 	andmi	r4, r0, r0
 800e248:	00000000 	andeq	r0, r0, r0
 800e24c:	40000000 	andmi	r0, r0, r0
 800e250:	40000000 	andmi	r0, r0, r0
 800e254:	40004000 	andmi	r4, r0, r0
 800e258:	40004000 	andmi	r4, r0, r0
 800e25c:	40004000 	andmi	r4, r0, r0
 800e260:	40004000 	andmi	r4, r0, r0
 800e264:	40000000 	andmi	r0, r0, r0
 800e268:	48004000 	stmdami	r0, {lr}
 800e26c:	60005000 	andvs	r5, r0, r0
 800e270:	50005000 	andpl	r5, r0, r0
 800e274:	48004800 	stmdami	r0, {fp, lr}
 800e278:	00000000 	andeq	r0, r0, r0
 800e27c:	40000000 	andmi	r0, r0, r0
 800e280:	40004000 	andmi	r4, r0, r0
 800e284:	40004000 	andmi	r4, r0, r0
 800e288:	40004000 	andmi	r4, r0, r0
 800e28c:	40004000 	andmi	r4, r0, r0
	...
 800e298:	52000000 	andpl	r0, r0, #0
 800e29c:	49006d00 	stmdbmi	r0, {r8, sl, fp, sp, lr}
 800e2a0:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800e2a4:	49004900 	stmdbmi	r0, {r8, fp, lr}
	...
 800e2b0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800e2b4:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e2b8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e2bc:	44004400 	strmi	r4, [r0], #-1024	; 0x400
	...
 800e2c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800e2cc:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e2d0:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e2d4:	38004400 	stmdacc	r0, {sl, lr}
	...
 800e2e0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800e2e4:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800e2e8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e2ec:	58006400 	stmdapl	r0, {sl, sp, lr}
 800e2f0:	40004000 	andmi	r4, r0, r0
 800e2f4:	00000000 	andeq	r0, r0, r0
 800e2f8:	34000000 	strcc	r0, [r0], #-0
 800e2fc:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800e300:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e304:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800e308:	04000400 	streq	r0, [r0], #-1024	; 0x400
 800e30c:	00000000 	andeq	r0, r0, r0
 800e310:	50000000 	andpl	r0, r0, r0
 800e314:	40006000 	andmi	r6, r0, r0
 800e318:	40004000 	andmi	r4, r0, r0
 800e31c:	40004000 	andmi	r4, r0, r0
	...
 800e328:	30000000 	andcc	r0, r0, r0
 800e32c:	40004800 	andmi	r4, r0, r0, lsl #16
 800e330:	08003000 	stmdaeq	r0, {ip, sp}
 800e334:	30004800 	andcc	r4, r0, r0, lsl #16
 800e338:	00000000 	andeq	r0, r0, r0
 800e33c:	40000000 	andmi	r0, r0, r0
 800e340:	e0004000 	and	r4, r0, r0
 800e344:	40004000 	andmi	r4, r0, r0
 800e348:	40004000 	andmi	r4, r0, r0
 800e34c:	60004000 	andvs	r4, r0, r0
	...
 800e358:	44000000 	strmi	r0, [r0], #-0
 800e35c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e360:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800e364:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800e370:	44000000 	strmi	r0, [r0], #-0
 800e374:	28004400 	stmdacs	r0, {sl, lr}
 800e378:	28002800 	stmdacs	r0, {fp, sp}
 800e37c:	10002800 	andne	r2, r0, r0, lsl #16
	...
 800e388:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
 800e38c:	55004900 	strpl	r4, [r0, #-2304]	; 0x900
 800e390:	55005500 	strpl	r5, [r0, #-1280]	; 0x500
 800e394:	22005500 	andcs	r5, r0, #0, 10
	...
 800e3a0:	44000000 	strmi	r0, [r0], #-0
 800e3a4:	28002800 	stmdacs	r0, {fp, sp}
 800e3a8:	28001000 	stmdacs	r0, {ip}
 800e3ac:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800e3b8:	44000000 	strmi	r0, [r0], #-0
 800e3bc:	28004400 	stmdacs	r0, {sl, lr}
 800e3c0:	28002800 	stmdacs	r0, {fp, sp}
 800e3c4:	10001000 	andne	r1, r0, r0
 800e3c8:	10001000 	andne	r1, r0, r0
 800e3cc:	00000000 	andeq	r0, r0, r0
 800e3d0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 800e3d4:	10000800 	andne	r0, r0, r0, lsl #16
 800e3d8:	20002000 	andcs	r2, r0, r0
 800e3dc:	78004000 	stmdavc	r0, {lr}
 800e3e0:	00000000 	andeq	r0, r0, r0
 800e3e4:	10000000 	andne	r0, r0, r0
 800e3e8:	20002000 	andcs	r2, r0, r0
 800e3ec:	20002000 	andcs	r2, r0, r0
 800e3f0:	20004000 	andcs	r4, r0, r0
 800e3f4:	20002000 	andcs	r2, r0, r0
 800e3f8:	20002000 	andcs	r2, r0, r0
 800e3fc:	20000000 	andcs	r0, r0, r0
 800e400:	20002000 	andcs	r2, r0, r0
 800e404:	20002000 	andcs	r2, r0, r0
 800e408:	20002000 	andcs	r2, r0, r0
 800e40c:	20002000 	andcs	r2, r0, r0
 800e410:	20002000 	andcs	r2, r0, r0
 800e414:	40000000 	andmi	r0, r0, r0
 800e418:	20002000 	andcs	r2, r0, r0
 800e41c:	20002000 	andcs	r2, r0, r0
 800e420:	20001000 	andcs	r1, r0, r0
 800e424:	20002000 	andcs	r2, r0, r0
 800e428:	20002000 	andcs	r2, r0, r0
	...
 800e434:	58007400 	stmdapl	r0, {sl, ip, sp, lr}
	...
 800e448:	50007000 	andpl	r7, r0, r0
 800e44c:	50005000 	andpl	r5, r0, r0
 800e450:	50005000 	andpl	r5, r0, r0
 800e454:	70005000 	andvc	r5, r0, r0
 800e458:	00000000 	andeq	r0, r0, r0

0800e45c <ASCII8x12_Table>:
	...
 800e478:	00100000 	andseq	r0, r0, r0
 800e47c:	00100010 	andseq	r0, r0, r0, lsl r0
 800e480:	00100010 	andseq	r0, r0, r0, lsl r0
 800e484:	00000010 	andeq	r0, r0, r0, lsl r0
 800e488:	00000010 	andeq	r0, r0, r0, lsl r0
 800e48c:	00000000 	andeq	r0, r0, r0
 800e490:	00280000 	eoreq	r0, r8, r0
 800e494:	00280028 	eoreq	r0, r8, r8, lsr #32
	...
 800e4a8:	00140000 	andseq	r0, r4, r0
 800e4ac:	003e0014 	eorseq	r0, lr, r4, lsl r0
 800e4b0:	00280014 	eoreq	r0, r8, r4, lsl r0
 800e4b4:	0028007c 	eoreq	r0, r8, ip, ror r0
 800e4b8:	00000028 	andeq	r0, r0, r8, lsr #32
 800e4bc:	00000000 	andeq	r0, r0, r0
 800e4c0:	00380010 	eorseq	r0, r8, r0, lsl r0
 800e4c4:	00500054 	subseq	r0, r0, r4, asr r0
 800e4c8:	00140038 	andseq	r0, r4, r8, lsr r0
 800e4cc:	00540014 	subseq	r0, r4, r4, lsl r0
 800e4d0:	00100038 	andseq	r0, r0, r8, lsr r0
 800e4d4:	00000000 	andeq	r0, r0, r0
 800e4d8:	00440000 	subeq	r0, r4, r0
 800e4dc:	00a800a8 	adceq	r0, r8, r8, lsr #1
 800e4e0:	00140050 	andseq	r0, r4, r0, asr r0
 800e4e4:	002a001a 	eoreq	r0, sl, sl, lsl r0
 800e4e8:	00000024 	andeq	r0, r0, r4, lsr #32
 800e4ec:	00000000 	andeq	r0, r0, r0
 800e4f0:	00200000 	eoreq	r0, r0, r0
 800e4f4:	00500050 	subseq	r0, r0, r0, asr r0
 800e4f8:	00e80020 	rsceq	r0, r8, r0, lsr #32
 800e4fc:	00980098 	umullseq	r0, r8, r8, r0
 800e500:	00000060 	andeq	r0, r0, r0, rrx
 800e504:	00000000 	andeq	r0, r0, r0
 800e508:	00800000 	addeq	r0, r0, r0
 800e50c:	00800080 	addeq	r0, r0, r0, lsl #1
	...
 800e520:	00400000 	subeq	r0, r0, r0
 800e524:	00800080 	addeq	r0, r0, r0, lsl #1
 800e528:	00800080 	addeq	r0, r0, r0, lsl #1
 800e52c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e530:	00800080 	addeq	r0, r0, r0, lsl #1
 800e534:	00000000 	andeq	r0, r0, r0
 800e538:	00800000 	addeq	r0, r0, r0
 800e53c:	00400040 	subeq	r0, r0, r0, asr #32
 800e540:	00400040 	subeq	r0, r0, r0, asr #32
 800e544:	00400040 	subeq	r0, r0, r0, asr #32
 800e548:	00400040 	subeq	r0, r0, r0, asr #32
 800e54c:	00000000 	andeq	r0, r0, r0
 800e550:	00400000 	subeq	r0, r0, r0
 800e554:	004000e0 	subeq	r0, r0, r0, ror #1
 800e558:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800e56c:	00200000 	eoreq	r0, r0, r0
 800e570:	00f80020 	rscseq	r0, r8, r0, lsr #32
 800e574:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800e590:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800e5a4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800e5c0:	00000040 	andeq	r0, r0, r0, asr #32
 800e5c4:	00000000 	andeq	r0, r0, r0
 800e5c8:	00200000 	eoreq	r0, r0, r0
 800e5cc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e5d0:	00400040 	subeq	r0, r0, r0, asr #32
 800e5d4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e5d8:	00000080 	andeq	r0, r0, r0, lsl #1
 800e5dc:	00000000 	andeq	r0, r0, r0
 800e5e0:	00600000 	rsbeq	r0, r0, r0
 800e5e4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e5e8:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e5ec:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e5f0:	00000060 	andeq	r0, r0, r0, rrx
 800e5f4:	00000000 	andeq	r0, r0, r0
 800e5f8:	00200000 	eoreq	r0, r0, r0
 800e5fc:	00a00060 	adceq	r0, r0, r0, rrx
 800e600:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e604:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e608:	00000020 	andeq	r0, r0, r0, lsr #32
 800e60c:	00000000 	andeq	r0, r0, r0
 800e610:	00600000 	rsbeq	r0, r0, r0
 800e614:	00100090 	mulseq	r0, r0, r0
 800e618:	00200010 	eoreq	r0, r0, r0, lsl r0
 800e61c:	00800040 	addeq	r0, r0, r0, asr #32
 800e620:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e624:	00000000 	andeq	r0, r0, r0
 800e628:	00600000 	rsbeq	r0, r0, r0
 800e62c:	00100090 	mulseq	r0, r0, r0
 800e630:	00100060 	andseq	r0, r0, r0, rrx
 800e634:	00900010 	addseq	r0, r0, r0, lsl r0
 800e638:	00000060 	andeq	r0, r0, r0, rrx
 800e63c:	00000000 	andeq	r0, r0, r0
 800e640:	00100000 	andseq	r0, r0, r0
 800e644:	00500030 	subseq	r0, r0, r0, lsr r0
 800e648:	00900050 	addseq	r0, r0, r0, asr r0
 800e64c:	001000f8 	ldrsheq	r0, [r0], -r8
 800e650:	00000010 	andeq	r0, r0, r0, lsl r0
 800e654:	00000000 	andeq	r0, r0, r0
 800e658:	00700000 	rsbseq	r0, r0, r0
 800e65c:	00800040 	addeq	r0, r0, r0, asr #32
 800e660:	001000e0 	andseq	r0, r0, r0, ror #1
 800e664:	00900010 	addseq	r0, r0, r0, lsl r0
 800e668:	00000060 	andeq	r0, r0, r0, rrx
 800e66c:	00000000 	andeq	r0, r0, r0
 800e670:	00600000 	rsbeq	r0, r0, r0
 800e674:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e678:	00d000a0 	sbcseq	r0, r0, r0, lsr #1
 800e67c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e680:	00000060 	andeq	r0, r0, r0, rrx
 800e684:	00000000 	andeq	r0, r0, r0
 800e688:	00f00000 	rscseq	r0, r0, r0
 800e68c:	00200010 	eoreq	r0, r0, r0, lsl r0
 800e690:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e694:	00400040 	subeq	r0, r0, r0, asr #32
 800e698:	00000040 	andeq	r0, r0, r0, asr #32
 800e69c:	00000000 	andeq	r0, r0, r0
 800e6a0:	00600000 	rsbeq	r0, r0, r0
 800e6a4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e6a8:	00900060 	addseq	r0, r0, r0, rrx
 800e6ac:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e6b0:	00000060 	andeq	r0, r0, r0, rrx
 800e6b4:	00000000 	andeq	r0, r0, r0
 800e6b8:	00600000 	rsbeq	r0, r0, r0
 800e6bc:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e6c0:	005000b0 	ldrheq	r0, [r0], #-0
 800e6c4:	00900010 	addseq	r0, r0, r0, lsl r0
 800e6c8:	00000060 	andeq	r0, r0, r0, rrx
	...
 800e6d4:	00400000 	subeq	r0, r0, r0
	...
 800e6e0:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800e6ec:	00400000 	subeq	r0, r0, r0
	...
 800e6f8:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800e704:	00100000 	andseq	r0, r0, r0
 800e708:	00800060 	addeq	r0, r0, r0, rrx
 800e70c:	00100060 	andseq	r0, r0, r0, rrx
	...
 800e720:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e724:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 800e734:	00800000 	addeq	r0, r0, r0
 800e738:	00100060 	andseq	r0, r0, r0, rrx
 800e73c:	00800060 	addeq	r0, r0, r0, rrx
	...
 800e748:	00600000 	rsbeq	r0, r0, r0
 800e74c:	00100090 	mulseq	r0, r0, r0
 800e750:	00400020 	subeq	r0, r0, r0, lsr #32
 800e754:	00000040 	andeq	r0, r0, r0, asr #32
 800e758:	00000040 	andeq	r0, r0, r0, asr #32
 800e75c:	00000000 	andeq	r0, r0, r0
 800e760:	001c0000 	andseq	r0, ip, r0
 800e764:	005b0022 	subseq	r0, fp, r2, lsr #32
 800e768:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800e76c:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800e770:	0041009e 	umaaleq	r0, r1, lr, r0
 800e774:	00000000 	andeq	r0, r0, r0
 800e778:	00200000 	eoreq	r0, r0, r0
 800e77c:	00500050 	subseq	r0, r0, r0, asr r0
 800e780:	00500050 	subseq	r0, r0, r0, asr r0
 800e784:	00880070 	addeq	r0, r8, r0, ror r0
 800e788:	00000088 	andeq	r0, r0, r8, lsl #1
 800e78c:	00000000 	andeq	r0, r0, r0
 800e790:	00f00000 	rscseq	r0, r0, r0
 800e794:	00880088 	addeq	r0, r8, r8, lsl #1
 800e798:	008800f0 	strdeq	r0, [r8], r0	; <UNPREDICTABLE>
 800e79c:	00880088 	addeq	r0, r8, r8, lsl #1
 800e7a0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e7a4:	00000000 	andeq	r0, r0, r0
 800e7a8:	00380000 	eorseq	r0, r8, r0
 800e7ac:	00840044 	addeq	r0, r4, r4, asr #32
 800e7b0:	00800080 	addeq	r0, r0, r0, lsl #1
 800e7b4:	00440084 	subeq	r0, r4, r4, lsl #1
 800e7b8:	00000038 	andeq	r0, r0, r8, lsr r0
 800e7bc:	00000000 	andeq	r0, r0, r0
 800e7c0:	00e00000 	rsceq	r0, r0, r0
 800e7c4:	00880090 	umulleq	r0, r8, r0, r0
 800e7c8:	00880088 	addeq	r0, r8, r8, lsl #1
 800e7cc:	00900088 	addseq	r0, r0, r8, lsl #1
 800e7d0:	000000e0 	andeq	r0, r0, r0, ror #1
 800e7d4:	00000000 	andeq	r0, r0, r0
 800e7d8:	00f80000 	rscseq	r0, r8, r0
 800e7dc:	00800080 	addeq	r0, r0, r0, lsl #1
 800e7e0:	008000f8 	strdeq	r0, [r0], r8
 800e7e4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e7e8:	000000f8 	strdeq	r0, [r0], -r8
 800e7ec:	00000000 	andeq	r0, r0, r0
 800e7f0:	00780000 	rsbseq	r0, r8, r0
 800e7f4:	00400040 	subeq	r0, r0, r0, asr #32
 800e7f8:	00400070 	subeq	r0, r0, r0, ror r0
 800e7fc:	00400040 	subeq	r0, r0, r0, asr #32
 800e800:	00000040 	andeq	r0, r0, r0, asr #32
 800e804:	00000000 	andeq	r0, r0, r0
 800e808:	00380000 	eorseq	r0, r8, r0
 800e80c:	00840044 	addeq	r0, r4, r4, asr #32
 800e810:	009c0080 	addseq	r0, ip, r0, lsl #1
 800e814:	00440084 	subeq	r0, r4, r4, lsl #1
 800e818:	00000038 	andeq	r0, r0, r8, lsr r0
 800e81c:	00000000 	andeq	r0, r0, r0
 800e820:	00880000 	addeq	r0, r8, r0
 800e824:	00880088 	addeq	r0, r8, r8, lsl #1
 800e828:	008800f8 	strdeq	r0, [r8], r8
 800e82c:	00880088 	addeq	r0, r8, r8, lsl #1
 800e830:	00000088 	andeq	r0, r0, r8, lsl #1
 800e834:	00000000 	andeq	r0, r0, r0
 800e838:	00800000 	addeq	r0, r0, r0
 800e83c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e840:	00800080 	addeq	r0, r0, r0, lsl #1
 800e844:	00800080 	addeq	r0, r0, r0, lsl #1
 800e848:	00000080 	andeq	r0, r0, r0, lsl #1
 800e84c:	00000000 	andeq	r0, r0, r0
 800e850:	00100000 	andseq	r0, r0, r0
 800e854:	00100010 	andseq	r0, r0, r0, lsl r0
 800e858:	00100010 	andseq	r0, r0, r0, lsl r0
 800e85c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e860:	00000060 	andeq	r0, r0, r0, rrx
 800e864:	00000000 	andeq	r0, r0, r0
 800e868:	00880000 	addeq	r0, r8, r0
 800e86c:	00a00090 	umlaleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e870:	00a000e0 	adceq	r0, r0, r0, ror #1
 800e874:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800e878:	00000088 	andeq	r0, r0, r8, lsl #1
 800e87c:	00000000 	andeq	r0, r0, r0
 800e880:	00800000 	addeq	r0, r0, r0
 800e884:	00800080 	addeq	r0, r0, r0, lsl #1
 800e888:	00800080 	addeq	r0, r0, r0, lsl #1
 800e88c:	00800080 	addeq	r0, r0, r0, lsl #1
 800e890:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800e894:	00000000 	andeq	r0, r0, r0
 800e898:	00820000 	addeq	r0, r2, r0
 800e89c:	00c600c6 	sbceq	r0, r6, r6, asr #1
 800e8a0:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e8a4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e8a8:	00000092 	muleq	r0, r2, r0
 800e8ac:	00000000 	andeq	r0, r0, r0
 800e8b0:	00840000 	addeq	r0, r4, r0
 800e8b4:	00a400c4 	adceq	r0, r4, r4, asr #1
 800e8b8:	009400a4 	addseq	r0, r4, r4, lsr #1
 800e8bc:	008c0094 	umulleq	r0, ip, r4, r0
 800e8c0:	00000084 	andeq	r0, r0, r4, lsl #1
 800e8c4:	00000000 	andeq	r0, r0, r0
 800e8c8:	00300000 	eorseq	r0, r0, r0
 800e8cc:	00840048 	addeq	r0, r4, r8, asr #32
 800e8d0:	00840084 	addeq	r0, r4, r4, lsl #1
 800e8d4:	00480084 	subeq	r0, r8, r4, lsl #1
 800e8d8:	00000030 	andeq	r0, r0, r0, lsr r0
 800e8dc:	00000000 	andeq	r0, r0, r0
 800e8e0:	00f00000 	rscseq	r0, r0, r0
 800e8e4:	00880088 	addeq	r0, r8, r8, lsl #1
 800e8e8:	00f00088 	rscseq	r0, r0, r8, lsl #1
 800e8ec:	00800080 	addeq	r0, r0, r0, lsl #1
 800e8f0:	00000080 	andeq	r0, r0, r0, lsl #1
 800e8f4:	00000000 	andeq	r0, r0, r0
 800e8f8:	00300000 	eorseq	r0, r0, r0
 800e8fc:	00840048 	addeq	r0, r4, r8, asr #32
 800e900:	00840084 	addeq	r0, r4, r4, lsl #1
 800e904:	00580084 	subseq	r0, r8, r4, lsl #1
 800e908:	00040034 	andeq	r0, r4, r4, lsr r0
 800e90c:	00000000 	andeq	r0, r0, r0
 800e910:	00780000 	rsbseq	r0, r8, r0
 800e914:	00440044 	subeq	r0, r4, r4, asr #32
 800e918:	00500078 	subseq	r0, r0, r8, ror r0
 800e91c:	00440048 	subeq	r0, r4, r8, asr #32
 800e920:	00000042 	andeq	r0, r0, r2, asr #32
 800e924:	00000000 	andeq	r0, r0, r0
 800e928:	00700000 	rsbseq	r0, r0, r0
 800e92c:	00800088 	addeq	r0, r0, r8, lsl #1
 800e930:	00080070 	andeq	r0, r8, r0, ror r0
 800e934:	00880088 	addeq	r0, r8, r8, lsl #1
 800e938:	00000070 	andeq	r0, r0, r0, ror r0
 800e93c:	00000000 	andeq	r0, r0, r0
 800e940:	00f80000 	rscseq	r0, r8, r0
 800e944:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e948:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e94c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e950:	00000020 	andeq	r0, r0, r0, lsr #32
 800e954:	00000000 	andeq	r0, r0, r0
 800e958:	00840000 	addeq	r0, r4, r0
 800e95c:	00840084 	addeq	r0, r4, r4, lsl #1
 800e960:	00840084 	addeq	r0, r4, r4, lsl #1
 800e964:	00480084 	subeq	r0, r8, r4, lsl #1
 800e968:	00000030 	andeq	r0, r0, r0, lsr r0
 800e96c:	00000000 	andeq	r0, r0, r0
 800e970:	00880000 	addeq	r0, r8, r0
 800e974:	00500088 	subseq	r0, r0, r8, lsl #1
 800e978:	00500050 	subseq	r0, r0, r0, asr r0
 800e97c:	00500050 	subseq	r0, r0, r0, asr r0
 800e980:	00000020 	andeq	r0, r0, r0, lsr #32
 800e984:	00000000 	andeq	r0, r0, r0
 800e988:	00920000 	addseq	r0, r2, r0
 800e98c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e990:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e994:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800e998:	00000044 	andeq	r0, r0, r4, asr #32
 800e99c:	00000000 	andeq	r0, r0, r0
 800e9a0:	00840000 	addeq	r0, r4, r0
 800e9a4:	00480048 	subeq	r0, r8, r8, asr #32
 800e9a8:	00300030 	eorseq	r0, r0, r0, lsr r0
 800e9ac:	00480048 	subeq	r0, r8, r8, asr #32
 800e9b0:	00000084 	andeq	r0, r0, r4, lsl #1
 800e9b4:	00000000 	andeq	r0, r0, r0
 800e9b8:	00880000 	addeq	r0, r8, r0
 800e9bc:	00500050 	subseq	r0, r0, r0, asr r0
 800e9c0:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e9c4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e9c8:	00000020 	andeq	r0, r0, r0, lsr #32
 800e9cc:	00000000 	andeq	r0, r0, r0
 800e9d0:	00f80000 	rscseq	r0, r8, r0
 800e9d4:	00100008 	andseq	r0, r0, r8
 800e9d8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800e9dc:	00800040 	addeq	r0, r0, r0, asr #32
 800e9e0:	000000f8 	strdeq	r0, [r0], -r8
 800e9e4:	00000000 	andeq	r0, r0, r0
 800e9e8:	00c00000 	sbceq	r0, r0, r0
 800e9ec:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9f0:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9f4:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9f8:	00800080 	addeq	r0, r0, r0, lsl #1
 800e9fc:	00000000 	andeq	r0, r0, r0
 800ea00:	00800000 	addeq	r0, r0, r0
 800ea04:	00400080 	subeq	r0, r0, r0, lsl #1
 800ea08:	00400040 	subeq	r0, r0, r0, asr #32
 800ea0c:	00200040 	eoreq	r0, r0, r0, asr #32
 800ea10:	00000020 	andeq	r0, r0, r0, lsr #32
 800ea14:	00000000 	andeq	r0, r0, r0
 800ea18:	00c00000 	sbceq	r0, r0, r0
 800ea1c:	00400040 	subeq	r0, r0, r0, asr #32
 800ea20:	00400040 	subeq	r0, r0, r0, asr #32
 800ea24:	00400040 	subeq	r0, r0, r0, asr #32
 800ea28:	00400040 	subeq	r0, r0, r0, asr #32
 800ea2c:	00000000 	andeq	r0, r0, r0
 800ea30:	00400000 	subeq	r0, r0, r0
 800ea34:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ea38:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800ea58:	00f80000 	rscseq	r0, r8, r0
 800ea5c:	00000000 	andeq	r0, r0, r0
 800ea60:	00800000 	addeq	r0, r0, r0
 800ea64:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800ea7c:	00e00000 	rsceq	r0, r0, r0
 800ea80:	00700010 	rsbseq	r0, r0, r0, lsl r0
 800ea84:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ea88:	00000070 	andeq	r0, r0, r0, ror r0
 800ea8c:	00000000 	andeq	r0, r0, r0
 800ea90:	00800000 	addeq	r0, r0, r0
 800ea94:	00a00080 	adceq	r0, r0, r0, lsl #1
 800ea98:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800ea9c:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eaa0:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800eaac:	00600000 	rsbeq	r0, r0, r0
 800eab0:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eab4:	00900080 	addseq	r0, r0, r0, lsl #1
 800eab8:	00000060 	andeq	r0, r0, r0, rrx
 800eabc:	00000000 	andeq	r0, r0, r0
 800eac0:	00100000 	andseq	r0, r0, r0
 800eac4:	00500010 	subseq	r0, r0, r0, lsl r0
 800eac8:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800eacc:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ead0:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800eadc:	00600000 	rsbeq	r0, r0, r0
 800eae0:	00f00090 	smlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eae4:	00900080 	addseq	r0, r0, r0, lsl #1
 800eae8:	00000060 	andeq	r0, r0, r0, rrx
 800eaec:	00000000 	andeq	r0, r0, r0
 800eaf0:	00c00000 	sbceq	r0, r0, r0
 800eaf4:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800eaf8:	00800080 	addeq	r0, r0, r0, lsl #1
 800eafc:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb00:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800eb0c:	00500000 	subseq	r0, r0, r0
 800eb10:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800eb14:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eb18:	00100050 	andseq	r0, r0, r0, asr r0
 800eb1c:	00000000 	andeq	r0, r0, r0
 800eb20:	00800000 	addeq	r0, r0, r0
 800eb24:	00a00080 	adceq	r0, r0, r0, lsl #1
 800eb28:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800eb2c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800eb30:	00000090 	muleq	r0, r0, r0
 800eb34:	00000000 	andeq	r0, r0, r0
 800eb38:	00800000 	addeq	r0, r0, r0
 800eb3c:	00800000 	addeq	r0, r0, r0
 800eb40:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb44:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb48:	00000080 	andeq	r0, r0, r0, lsl #1
 800eb4c:	00000000 	andeq	r0, r0, r0
 800eb50:	00800000 	addeq	r0, r0, r0
 800eb54:	00800000 	addeq	r0, r0, r0
 800eb58:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb5c:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb60:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb64:	00000000 	andeq	r0, r0, r0
 800eb68:	00800000 	addeq	r0, r0, r0
 800eb6c:	00900080 	addseq	r0, r0, r0, lsl #1
 800eb70:	00c000a0 	sbceq	r0, r0, r0, lsr #1
 800eb74:	009000a0 	addseq	r0, r0, r0, lsr #1
 800eb78:	00000090 	muleq	r0, r0, r0
 800eb7c:	00000000 	andeq	r0, r0, r0
 800eb80:	00800000 	addeq	r0, r0, r0
 800eb84:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb88:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb8c:	00800080 	addeq	r0, r0, r0, lsl #1
 800eb90:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800eb9c:	00a60000 	adceq	r0, r6, r0
 800eba0:	009200da 	ldrsbeq	r0, [r2], sl
 800eba4:	00920092 	umullseq	r0, r2, r2, r0
 800eba8:	00000092 	muleq	r0, r2, r0
	...
 800ebb4:	00a00000 	adceq	r0, r0, r0
 800ebb8:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800ebbc:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ebc0:	00000090 	muleq	r0, r0, r0
	...
 800ebcc:	00600000 	rsbeq	r0, r0, r0
 800ebd0:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ebd4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ebd8:	00000060 	andeq	r0, r0, r0, rrx
	...
 800ebe4:	00a00000 	adceq	r0, r0, r0
 800ebe8:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800ebec:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ebf0:	008000a0 	addeq	r0, r0, r0, lsr #1
	...
 800ebfc:	00500000 	subseq	r0, r0, r0
 800ec00:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800ec04:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ec08:	00100050 	andseq	r0, r0, r0, asr r0
	...
 800ec14:	00a00000 	adceq	r0, r0, r0
 800ec18:	008000c0 	addeq	r0, r0, r0, asr #1
 800ec1c:	00800080 	addeq	r0, r0, r0, lsl #1
 800ec20:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800ec2c:	00e00000 	rsceq	r0, r0, r0
 800ec30:	00400090 	umaaleq	r0, r0, r0, r0
 800ec34:	00900020 	addseq	r0, r0, r0, lsr #32
 800ec38:	00000060 	andeq	r0, r0, r0, rrx
 800ec3c:	00000000 	andeq	r0, r0, r0
 800ec40:	00800000 	addeq	r0, r0, r0
 800ec44:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800ec48:	00800080 	addeq	r0, r0, r0, lsl #1
 800ec4c:	00800080 	addeq	r0, r0, r0, lsl #1
 800ec50:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800ec5c:	00900000 	addseq	r0, r0, r0
 800ec60:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ec64:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800ec68:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800ec74:	00880000 	addeq	r0, r8, r0
 800ec78:	00500088 	subseq	r0, r0, r8, lsl #1
 800ec7c:	00500050 	subseq	r0, r0, r0, asr r0
 800ec80:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800ec8c:	00920000 	addseq	r0, r2, r0
 800ec90:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800ec94:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800ec98:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800eca4:	00880000 	addeq	r0, r8, r0
 800eca8:	00200050 	eoreq	r0, r0, r0, asr r0
 800ecac:	00500020 	subseq	r0, r0, r0, lsr #32
 800ecb0:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 800ecbc:	00880000 	addeq	r0, r8, r0
 800ecc0:	00500050 	subseq	r0, r0, r0, asr r0
 800ecc4:	00200050 	eoreq	r0, r0, r0, asr r0
 800ecc8:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800ecd4:	00f00000 	rscseq	r0, r0, r0
 800ecd8:	00200010 	eoreq	r0, r0, r0, lsl r0
 800ecdc:	00800040 	addeq	r0, r0, r0, asr #32
 800ece0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800ece4:	00000000 	andeq	r0, r0, r0
 800ece8:	00c00000 	sbceq	r0, r0, r0
 800ecec:	00800080 	addeq	r0, r0, r0, lsl #1
 800ecf0:	00000080 	andeq	r0, r0, r0, lsl #1
 800ecf4:	00800080 	addeq	r0, r0, r0, lsl #1
 800ecf8:	00800080 	addeq	r0, r0, r0, lsl #1
 800ecfc:	00000000 	andeq	r0, r0, r0
 800ed00:	00800000 	addeq	r0, r0, r0
 800ed04:	00800080 	addeq	r0, r0, r0, lsl #1
 800ed08:	00800080 	addeq	r0, r0, r0, lsl #1
 800ed0c:	00800080 	addeq	r0, r0, r0, lsl #1
 800ed10:	00800080 	addeq	r0, r0, r0, lsl #1
 800ed14:	00000000 	andeq	r0, r0, r0
 800ed18:	00c00000 	sbceq	r0, r0, r0
 800ed1c:	00400040 	subeq	r0, r0, r0, asr #32
 800ed20:	00200040 	eoreq	r0, r0, r0, asr #32
 800ed24:	00400040 	subeq	r0, r0, r0, asr #32
 800ed28:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800ed38:	00b000e8 	adcseq	r0, r0, r8, ror #1
	...
 800ed4c:	00a000e0 	adceq	r0, r0, r0, ror #1
 800ed50:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ed54:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ed58:	000000e0 	andeq	r0, r0, r0, ror #1

0800ed5c <ASCII8x8_Table>:
	...
 800ed6c:	00400040 	subeq	r0, r0, r0, asr #32
 800ed70:	00400040 	subeq	r0, r0, r0, asr #32
 800ed74:	00400040 	subeq	r0, r0, r0, asr #32
 800ed78:	00400000 	subeq	r0, r0, r0
 800ed7c:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800ed80:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800ed8c:	00240000 	eoreq	r0, r4, r0
 800ed90:	00fe0024 	rscseq	r0, lr, r4, lsr #32
 800ed94:	00fc0048 	rscseq	r0, ip, r8, asr #32
 800ed98:	00480048 	subeq	r0, r8, r8, asr #32
 800ed9c:	00540038 	subseq	r0, r4, r8, lsr r0
 800eda0:	00380050 	eorseq	r0, r8, r0, asr r0
 800eda4:	00140014 	andseq	r0, r4, r4, lsl r0
 800eda8:	00380054 	eorseq	r0, r8, r4, asr r0
 800edac:	00a80044 	adceq	r0, r8, r4, asr #32
 800edb0:	005000a8 	subseq	r0, r0, r8, lsr #1
 800edb4:	001a0014 	andseq	r0, sl, r4, lsl r0
 800edb8:	0024002a 	eoreq	r0, r4, sl, lsr #32
 800edbc:	00280010 	eoreq	r0, r8, r0, lsl r0
 800edc0:	00100028 	andseq	r0, r0, r8, lsr #32
 800edc4:	004c0074 	subeq	r0, ip, r4, ror r0
 800edc8:	0030004c 	eorseq	r0, r0, ip, asr #32
 800edcc:	00100010 	andseq	r0, r0, r0, lsl r0
 800edd0:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800eddc:	00100008 	andseq	r0, r0, r8
 800ede0:	00100010 	andseq	r0, r0, r0, lsl r0
 800ede4:	00100010 	andseq	r0, r0, r0, lsl r0
 800ede8:	00080010 	andeq	r0, r8, r0, lsl r0
 800edec:	00080010 	andeq	r0, r8, r0, lsl r0
 800edf0:	00080008 	andeq	r0, r8, r8
 800edf4:	00080008 	andeq	r0, r8, r8
 800edf8:	00100008 	andseq	r0, r0, r8
 800edfc:	00000000 	andeq	r0, r0, r0
 800ee00:	00180024 	andseq	r0, r8, r4, lsr #32
 800ee04:	0018003c 	andseq	r0, r8, ip, lsr r0
 800ee08:	00000024 	andeq	r0, r0, r4, lsr #32
 800ee0c:	00000000 	andeq	r0, r0, r0
 800ee10:	00100010 	andseq	r0, r0, r0, lsl r0
 800ee14:	0010007c 	andseq	r0, r0, ip, ror r0
 800ee18:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800ee24:	00080000 	andeq	r0, r8, r0
 800ee28:	00100008 	andseq	r0, r0, r8
	...
 800ee34:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
 800ee48:	00180018 	andseq	r0, r8, r8, lsl r0
 800ee4c:	00080008 	andeq	r0, r8, r8
 800ee50:	00100008 	andseq	r0, r0, r8
 800ee54:	00200010 	eoreq	r0, r0, r0, lsl r0
 800ee58:	00200020 	eoreq	r0, r0, r0, lsr #32
 800ee5c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ee60:	00240024 	eoreq	r0, r4, r4, lsr #32
 800ee64:	00240024 	eoreq	r0, r4, r4, lsr #32
 800ee68:	00180024 	andseq	r0, r8, r4, lsr #32
 800ee6c:	00180008 	andseq	r0, r8, r8
 800ee70:	00080028 	andeq	r0, r8, r8, lsr #32
 800ee74:	00080008 	andeq	r0, r8, r8
 800ee78:	00080008 	andeq	r0, r8, r8
 800ee7c:	00440038 	subeq	r0, r4, r8, lsr r0
 800ee80:	00040000 	andeq	r0, r4, r0
 800ee84:	00100008 	andseq	r0, r0, r8
 800ee88:	007c0020 	rsbseq	r0, ip, r0, lsr #32
 800ee8c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ee90:	00180004 	andseq	r0, r8, r4
 800ee94:	00040004 	andeq	r0, r4, r4
 800ee98:	00180024 	andseq	r0, r8, r4, lsr #32
 800ee9c:	000c0004 	andeq	r0, ip, r4
 800eea0:	00240014 	eoreq	r0, r4, r4, lsl r0
 800eea4:	007e0044 	rsbseq	r0, lr, r4, asr #32
 800eea8:	00040004 	andeq	r0, r4, r4
 800eeac:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800eeb0:	00380020 	eorseq	r0, r8, r0, lsr #32
 800eeb4:	00040004 	andeq	r0, r4, r4
 800eeb8:	00180024 	andseq	r0, r8, r4, lsr #32
 800eebc:	00240018 	eoreq	r0, r4, r8, lsl r0
 800eec0:	00380020 	eorseq	r0, r8, r0, lsr #32
 800eec4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800eec8:	00180024 	andseq	r0, r8, r4, lsr #32
 800eecc:	0004003c 	andeq	r0, r4, ip, lsr r0
 800eed0:	00080008 	andeq	r0, r8, r8
 800eed4:	00100008 	andseq	r0, r0, r8
 800eed8:	00100010 	andseq	r0, r0, r0, lsl r0
 800eedc:	00240018 	eoreq	r0, r4, r8, lsl r0
 800eee0:	00180024 	andseq	r0, r8, r4, lsr #32
 800eee4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800eee8:	00180024 	andseq	r0, r8, r4, lsr #32
 800eeec:	00240018 	eoreq	r0, r4, r8, lsl r0
 800eef0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800eef4:	0004001c 	andeq	r0, r4, ip, lsl r0
 800eef8:	00180024 	andseq	r0, r8, r4, lsr #32
 800eefc:	00000000 	andeq	r0, r0, r0
 800ef00:	00000010 	andeq	r0, r0, r0, lsl r0
 800ef04:	00100000 	andseq	r0, r0, r0
	...
 800ef10:	00000008 	andeq	r0, r0, r8
 800ef14:	00080000 	andeq	r0, r8, r0
 800ef18:	00000010 	andeq	r0, r0, r0, lsl r0
 800ef1c:	00000000 	andeq	r0, r0, r0
 800ef20:	00180004 	andseq	r0, r8, r4
 800ef24:	00180020 	andseq	r0, r8, r0, lsr #32
 800ef28:	00000004 	andeq	r0, r0, r4
 800ef2c:	00000000 	andeq	r0, r0, r0
 800ef30:	003c0000 	eorseq	r0, ip, r0
 800ef34:	003c0000 	eorseq	r0, ip, r0
	...
 800ef40:	00180020 	andseq	r0, r8, r0, lsr #32
 800ef44:	00180004 	andseq	r0, r8, r4
 800ef48:	00000020 	andeq	r0, r0, r0, lsr #32
 800ef4c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800ef50:	00080004 	andeq	r0, r8, r4
 800ef54:	00100010 	andseq	r0, r0, r0, lsl r0
 800ef58:	00100000 	andseq	r0, r0, r0
 800ef5c:	0042003c 	subeq	r0, r2, ip, lsr r0
 800ef60:	00a50099 	umlaleq	r0, r5, r9, r0
 800ef64:	009d00a5 	addseq	r0, sp, r5, lsr #1
 800ef68:	00380042 	eorseq	r0, r8, r2, asr #32
 800ef6c:	00440038 	subeq	r0, r4, r8, lsr r0
 800ef70:	00440044 	subeq	r0, r4, r4, asr #32
 800ef74:	0044007c 	subeq	r0, r4, ip, ror r0
 800ef78:	00440044 	subeq	r0, r4, r4, asr #32
 800ef7c:	00440078 	subeq	r0, r4, r8, ror r0
 800ef80:	00780044 	rsbseq	r0, r8, r4, asr #32
 800ef84:	00440044 	subeq	r0, r4, r4, asr #32
 800ef88:	00780044 	rsbseq	r0, r8, r4, asr #32
 800ef8c:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800ef90:	00400042 	subeq	r0, r0, r2, asr #32
 800ef94:	00420040 	subeq	r0, r2, r0, asr #32
 800ef98:	001c0022 	andseq	r0, ip, r2, lsr #32
 800ef9c:	00480070 	subeq	r0, r8, r0, ror r0
 800efa0:	00440044 	subeq	r0, r4, r4, asr #32
 800efa4:	00440044 	subeq	r0, r4, r4, asr #32
 800efa8:	00700048 	rsbseq	r0, r0, r8, asr #32
 800efac:	0040007c 	subeq	r0, r0, ip, ror r0
 800efb0:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800efb4:	00400040 	subeq	r0, r0, r0, asr #32
 800efb8:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800efbc:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800efc0:	00380020 	eorseq	r0, r8, r0, lsr #32
 800efc4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800efc8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800efcc:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800efd0:	00400042 	subeq	r0, r0, r2, asr #32
 800efd4:	0042004e 	subeq	r0, r2, lr, asr #32
 800efd8:	001c0022 	andseq	r0, ip, r2, lsr #32
 800efdc:	00440044 	subeq	r0, r4, r4, asr #32
 800efe0:	007c0044 	rsbseq	r0, ip, r4, asr #32
 800efe4:	00440044 	subeq	r0, r4, r4, asr #32
 800efe8:	00440044 	subeq	r0, r4, r4, asr #32
 800efec:	00100010 	andseq	r0, r0, r0, lsl r0
 800eff0:	00100010 	andseq	r0, r0, r0, lsl r0
 800eff4:	00100010 	andseq	r0, r0, r0, lsl r0
 800eff8:	00100010 	andseq	r0, r0, r0, lsl r0
 800effc:	00040004 	andeq	r0, r4, r4
 800f000:	00040004 	andeq	r0, r4, r4
 800f004:	00240004 	eoreq	r0, r4, r4
 800f008:	00180024 	andseq	r0, r8, r4, lsr #32
 800f00c:	00480044 	subeq	r0, r8, r4, asr #32
 800f010:	00700050 	rsbseq	r0, r0, r0, asr r0
 800f014:	00480050 	subeq	r0, r8, r0, asr r0
 800f018:	00440048 	subeq	r0, r4, r8, asr #32
 800f01c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f020:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f024:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f028:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800f02c:	00c60082 	sbceq	r0, r6, r2, lsl #1
 800f030:	00aa00c6 	adceq	r0, sl, r6, asr #1
 800f034:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800f038:	009200aa 	addseq	r0, r2, sl, lsr #1
 800f03c:	00620042 	rsbeq	r0, r2, r2, asr #32
 800f040:	00520052 	subseq	r0, r2, r2, asr r0
 800f044:	004a004a 	subeq	r0, sl, sl, asr #32
 800f048:	00420046 	subeq	r0, r2, r6, asr #32
 800f04c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f050:	00420042 	subeq	r0, r2, r2, asr #32
 800f054:	00420042 	subeq	r0, r2, r2, asr #32
 800f058:	00180024 	andseq	r0, r8, r4, lsr #32
 800f05c:	00440078 	subeq	r0, r4, r8, ror r0
 800f060:	00440044 	subeq	r0, r4, r4, asr #32
 800f064:	00400078 	subeq	r0, r0, r8, ror r0
 800f068:	00400040 	subeq	r0, r0, r0, asr #32
 800f06c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f070:	00420042 	subeq	r0, r2, r2, asr #32
 800f074:	00420042 	subeq	r0, r2, r2, asr #32
 800f078:	001a002c 	andseq	r0, sl, ip, lsr #32
 800f07c:	00440078 	subeq	r0, r4, r8, ror r0
 800f080:	00780044 	rsbseq	r0, r8, r4, asr #32
 800f084:	00480050 	subeq	r0, r8, r0, asr r0
 800f088:	00420044 	subeq	r0, r2, r4, asr #32
 800f08c:	00440038 	subeq	r0, r4, r8, lsr r0
 800f090:	00380040 	eorseq	r0, r8, r0, asr #32
 800f094:	00440004 	subeq	r0, r4, r4
 800f098:	00380044 	eorseq	r0, r8, r4, asr #32
 800f09c:	0010007c 	andseq	r0, r0, ip, ror r0
 800f0a0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0a4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0a8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0ac:	00420042 	subeq	r0, r2, r2, asr #32
 800f0b0:	00420042 	subeq	r0, r2, r2, asr #32
 800f0b4:	00420042 	subeq	r0, r2, r2, asr #32
 800f0b8:	00180024 	andseq	r0, r8, r4, lsr #32
 800f0bc:	00440044 	subeq	r0, r4, r4, asr #32
 800f0c0:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f0c4:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f0c8:	00100028 	andseq	r0, r0, r8, lsr #32
 800f0cc:	00aa0092 	umlaleq	r0, sl, r2, r0
 800f0d0:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800f0d4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800f0d8:	004400aa 	subeq	r0, r4, sl, lsr #1
 800f0dc:	00240042 	eoreq	r0, r4, r2, asr #32
 800f0e0:	00180024 	andseq	r0, r8, r4, lsr #32
 800f0e4:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f0e8:	00420024 	subeq	r0, r2, r4, lsr #32
 800f0ec:	00280044 	eoreq	r0, r8, r4, asr #32
 800f0f0:	00100028 	andseq	r0, r0, r8, lsr #32
 800f0f4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0f8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f0fc:	0004007c 	andeq	r0, r4, ip, ror r0
 800f100:	00100008 	andseq	r0, r0, r8
 800f104:	00200010 	eoreq	r0, r0, r0, lsl r0
 800f108:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800f10c:	0010001c 	andseq	r0, r0, ip, lsl r0
 800f110:	00100010 	andseq	r0, r0, r0, lsl r0
 800f114:	00100010 	andseq	r0, r0, r0, lsl r0
 800f118:	001c0010 	andseq	r0, ip, r0, lsl r0
 800f11c:	00100010 	andseq	r0, r0, r0, lsl r0
 800f120:	00080008 	andeq	r0, r8, r8
 800f124:	00080008 	andeq	r0, r8, r8
 800f128:	00040004 	andeq	r0, r4, r4
 800f12c:	0004001c 	andeq	r0, r4, ip, lsl r0
 800f130:	00040004 	andeq	r0, r4, r4
 800f134:	00040004 	andeq	r0, r4, r4
 800f138:	001c0004 	andseq	r0, ip, r4
 800f13c:	00280010 	eoreq	r0, r8, r0, lsl r0
 800f140:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800f15c:	00100020 	andseq	r0, r0, r0, lsr #32
 800f160:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800f170:	00040018 	andeq	r0, r4, r8, lsl r0
 800f174:	0024001c 	eoreq	r0, r4, ip, lsl r0
 800f178:	001c0024 	andseq	r0, ip, r4, lsr #32
 800f17c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f180:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f184:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f188:	00280034 	eoreq	r0, r8, r4, lsr r0
 800f18c:	00000000 	andeq	r0, r0, r0
 800f190:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f194:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f198:	00180024 	andseq	r0, r8, r4, lsr #32
 800f19c:	00040004 	andeq	r0, r4, r4
 800f1a0:	002c0014 	eoreq	r0, ip, r4, lsl r0
 800f1a4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f1a8:	0014002c 	andseq	r0, r4, ip, lsr #32
 800f1ac:	00000000 	andeq	r0, r0, r0
 800f1b0:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f1b4:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800f1b8:	00180024 	andseq	r0, r8, r4, lsr #32
 800f1bc:	00180000 	andseq	r0, r8, r0
 800f1c0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1c4:	00100018 	andseq	r0, r0, r8, lsl r0
 800f1c8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1cc:	00180000 	andseq	r0, r8, r0
 800f1d0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f1d4:	00040018 	andeq	r0, r4, r8, lsl r0
 800f1d8:	00180024 	andseq	r0, r8, r4, lsr #32
 800f1dc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f1e0:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f1e4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f1e8:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 800f1f0:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1f4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1f8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f1fc:	00000008 	andeq	r0, r0, r8
 800f200:	00080008 	andeq	r0, r8, r8
 800f204:	00080008 	andeq	r0, r8, r8
 800f208:	00100028 	andseq	r0, r0, r8, lsr #32
 800f20c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f210:	00280024 	eoreq	r0, r8, r4, lsr #32
 800f214:	00280030 	eoreq	r0, r8, r0, lsr r0
 800f218:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f21c:	00100010 	andseq	r0, r0, r0, lsl r0
 800f220:	00100010 	andseq	r0, r0, r0, lsl r0
 800f224:	00100010 	andseq	r0, r0, r0, lsl r0
 800f228:	00100010 	andseq	r0, r0, r0, lsl r0
 800f22c:	00000000 	andeq	r0, r0, r0
 800f230:	00da00a6 	sbcseq	r0, sl, r6, lsr #1
 800f234:	00920092 	umullseq	r0, r2, r2, r0
 800f238:	00920092 	umullseq	r0, r2, r2, r0
 800f23c:	00000000 	andeq	r0, r0, r0
 800f240:	00340028 	eorseq	r0, r4, r8, lsr #32
 800f244:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f248:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f24c:	00000000 	andeq	r0, r0, r0
 800f250:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f254:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f258:	00180024 	andseq	r0, r8, r4, lsr #32
 800f25c:	00280000 	eoreq	r0, r8, r0
 800f260:	00240034 	eoreq	r0, r4, r4, lsr r0
 800f264:	00200038 	eoreq	r0, r0, r8, lsr r0
 800f268:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f26c:	00140000 	andseq	r0, r4, r0
 800f270:	0024002c 	eoreq	r0, r4, ip, lsr #32
 800f274:	0004001c 	andeq	r0, r4, ip, lsl r0
 800f278:	00040004 	andeq	r0, r4, r4
 800f27c:	00000000 	andeq	r0, r0, r0
 800f280:	0030002c 	eorseq	r0, r0, ip, lsr #32
 800f284:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f288:	00200020 	eoreq	r0, r0, r0, lsr #32
 800f28c:	00000000 	andeq	r0, r0, r0
 800f290:	00240018 	eoreq	r0, r4, r8, lsl r0
 800f294:	00080010 	andeq	r0, r8, r0, lsl r0
 800f298:	00180024 	andseq	r0, r8, r4, lsr #32
 800f29c:	00100000 	andseq	r0, r0, r0
 800f2a0:	00100038 	andseq	r0, r0, r8, lsr r0
 800f2a4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f2a8:	00180010 	andseq	r0, r8, r0, lsl r0
 800f2ac:	00000000 	andeq	r0, r0, r0
 800f2b0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f2b4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800f2b8:	0014002c 	andseq	r0, r4, ip, lsr #32
 800f2bc:	00000000 	andeq	r0, r0, r0
 800f2c0:	00440044 	subeq	r0, r4, r4, asr #32
 800f2c4:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f2c8:	00100028 	andseq	r0, r0, r8, lsr #32
 800f2cc:	00000000 	andeq	r0, r0, r0
 800f2d0:	00aa0092 	umlaleq	r0, sl, r2, r0
 800f2d4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800f2d8:	004400aa 	subeq	r0, r4, sl, lsr #1
 800f2dc:	00000000 	andeq	r0, r0, r0
 800f2e0:	00280044 	eoreq	r0, r8, r4, asr #32
 800f2e4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f2e8:	00440028 	subeq	r0, r4, r8, lsr #32
 800f2ec:	00280000 	eoreq	r0, r8, r0
 800f2f0:	00280028 	eoreq	r0, r8, r8, lsr #32
 800f2f4:	00100010 	andseq	r0, r0, r0, lsl r0
 800f2f8:	00100010 	andseq	r0, r0, r0, lsl r0
 800f2fc:	00000000 	andeq	r0, r0, r0
 800f300:	0004003c 	andeq	r0, r4, ip, lsr r0
 800f304:	00100008 	andseq	r0, r0, r8
 800f308:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800f30c:	00080000 	andeq	r0, r8, r0
 800f310:	00100010 	andseq	r0, r0, r0, lsl r0
 800f314:	00100020 	andseq	r0, r0, r0, lsr #32
 800f318:	00080010 	andeq	r0, r8, r0, lsl r0
 800f31c:	00100010 	andseq	r0, r0, r0, lsl r0
 800f320:	00100010 	andseq	r0, r0, r0, lsl r0
 800f324:	00100010 	andseq	r0, r0, r0, lsl r0
 800f328:	00100010 	andseq	r0, r0, r0, lsl r0
 800f32c:	00100000 	andseq	r0, r0, r0
 800f330:	00080008 	andeq	r0, r8, r8
 800f334:	00080004 	andeq	r0, r8, r4
 800f338:	00100008 	andseq	r0, r0, r8
 800f33c:	00000000 	andeq	r0, r0, r0
 800f340:	00600000 	rsbeq	r0, r0, r0
 800f344:	000c0092 	muleq	ip, r2, r0
 800f348:	00000000 	andeq	r0, r0, r0
 800f34c:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f350:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f354:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f358:	00ff00ff 	ldrshteq	r0, [pc], #15
 800f35c:	00000000 	andeq	r0, r0, r0

0800f360 <atanlo>:
 800f360:	222f65e2 	eorcs	r6, pc, #947912704	; 0x38800000
 800f364:	3c7a2b7f 	ldclcc	11, cr2, [sl], #-508	; 0xfffffe04
 800f368:	33145c07 	tstcc	r4, #1792	; 0x700
 800f36c:	3c81a626 	stccc	6, cr10, [r1], {38}	; 0x26
 800f370:	7af0cbbd 	bvc	7c4226c <_Min_Stack_Size+0x7c41e6c>
 800f374:	3c700788 	ldclcc	7, cr0, [r0], #-544	; 0xfffffde0
 800f378:	33145c07 	tstcc	r4, #1792	; 0x700
 800f37c:	3c91a626 	ldccc	6, cr10, [r1], {38}	; 0x26

0800f380 <atanhi>:
 800f380:	0561bb4f 	strbeq	fp, [r1, #-2895]!	; 0xb4f
 800f384:	3fddac67 	svccc	0x00ddac67
 800f388:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800f38c:	3fe921fb 	svccc	0x00e921fb
 800f390:	d281f69b 	addle	pc, r1, #162529280	; 0x9b00000
 800f394:	3fef730b 	svccc	0x00ef730b
 800f398:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
 800f39c:	3ff921fb 	svccc	0x00f921fb
 800f3a0:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
 800f3a4:	00000000 	andeq	r0, r0, r0
 800f3a8:	00776f70 	rsbseq	r6, r7, r0, ror pc
 800f3ac:	00000000 	andeq	r0, r0, r0

0800f3b0 <dp_h>:
	...
 800f3b8:	40000000 	andmi	r0, r0, r0
 800f3bc:	3fe2b803 	svccc	0x00e2b803

0800f3c0 <dp_l>:
	...
 800f3c8:	43cfd006 	bicmi	sp, pc, #6
 800f3cc:	3e4cfdeb 	cdpcc	13, 4, cr15, cr12, cr11, {7}

0800f3d0 <bp>:
 800f3d0:	00000000 	andeq	r0, r0, r0
 800f3d4:	3ff00000 	svccc	0x00f00000	; IMB
 800f3d8:	00000000 	andeq	r0, r0, r0
 800f3dc:	3ff80000 	svccc	0x00f80000

0800f3e0 <TWO52>:
 800f3e0:	00000000 	andeq	r0, r0, r0
 800f3e4:	43300000 	teqmi	r0, #0
 800f3e8:	00000000 	andeq	r0, r0, r0
 800f3ec:	c3300000 	teqgt	r0, #0
 800f3f0:	00000043 	andeq	r0, r0, r3, asr #32

0800f3f4 <_global_impure_ptr>:
 800f3f4:	20000068 	andcs	r0, r0, r8, rrx

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000004 <AHBPrescTable>:
	...
2000000c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000010:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000024 <GPIO_PORT>:
20000024:	40021800 	andmi	r1, r2, r0, lsl #16
20000028:	40021800 	andmi	r1, r2, r0, lsl #16

2000002c <BUTTON_PORT>:
2000002c:	40020000 	andmi	r0, r2, r0

20000030 <L3GD20Timeout>:
20000030:	00001000 	andeq	r1, r0, r0

20000034 <Font16x24>:
20000034:	0800c98c 	stmdaeq	r0, {r2, r3, r7, r8, fp, lr, pc}
20000038:	00180010 	andseq	r0, r8, r0, lsl r0

2000003c <Font12x12>:
2000003c:	0800db5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, lr, pc}
20000040:	000c000c 	andeq	r0, ip, ip

20000044 <Font8x12>:
20000044:	0800e45c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp, lr, pc}
20000048:	000c0008 	andeq	r0, ip, r8

2000004c <Font8x8>:
2000004c:	0800ed5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp, lr, pc}
20000050:	00080008 	andeq	r0, r8, r8

20000054 <CurrentBackColor>:
20000054:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000058 <CurrentFrameBuffer>:
20000058:	d0000000 	andle	r0, r0, r0

2000005c <IOE_TimeOut>:
2000005c:	00003000 	andeq	r3, r0, r0

20000060 <__fdlib_version>:
20000060:	00000001 	andeq	r0, r0, r1
20000064:	00000000 	andeq	r0, r0, r0

20000068 <impure_data>:
20000068:	00000000 	andeq	r0, r0, r0
2000006c:	20000354 	andcs	r0, r0, r4, asr r3
20000070:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
20000074:	20000424 	andcs	r0, r0, r4, lsr #8
	...
2000009c:	0800f3f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp, lr, pc}
	...
20000110:	00000001 	andeq	r0, r0, r1
20000114:	00000000 	andeq	r0, r0, r0
20000118:	abcd330e 	blge	1f34cd58 <_eccmram+0xf34cd58>
2000011c:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
20000120:	0005deec 	andeq	sp, r5, ip, ror #29
20000124:	0000000b 	andeq	r0, r0, fp
	...

20000490 <_impure_ptr>:
20000490:	20000068 	andcs	r0, r0, r8, rrx

Disassembly of section .bss:

20000494 <__bss_start__>:
	...

200004d0 <NVIC_InitStructure>:
200004d0:	00000000 	andeq	r0, r0, r0

200004d4 <LCD_Currentfonts>:
200004d4:	00000000 	andeq	r0, r0, r0

200004d8 <CurrentTextColor>:
200004d8:	00000000 	andeq	r0, r0, r0

200004dc <CurrentLayer>:
200004dc:	00000000 	andeq	r0, r0, r0

200004e0 <TP_State>:
	...

200004e8 <_x.7853>:
200004e8:	00000000 	andeq	r0, r0, r0

200004ec <_y.7854>:
200004ec:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

200004f0 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	12060a02 	andne	r0, r6, #8192	; 0x2000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1b011a01 	blne	46838 <_Min_Stack_Size+0x46438>
  30:	22061e03 	andcs	r1, r6, #3, 28	; 0x30
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000100 	andeq	r0, r0, r0, lsl #2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000021 	andeq	r0, r0, r1, lsr #32
      10:	00014001 	andeq	r4, r1, r1
      14:	00011400 	andeq	r1, r1, r0, lsl #8
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000014d 	andeq	r0, r0, sp, asr #2
      2c:	4b080102 	blmi	20043c <_Min_Stack_Size+0x20003c>
      30:	02000001 	andeq	r0, r0, #1
      34:	01870502 	orreq	r0, r7, r2, lsl #10
      38:	02020000 	andeq	r0, r2, #0
      3c:	00000e07 	andeq	r0, r0, r7, lsl #28
      40:	01770300 	cmneq	r7, r0, lsl #6
      44:	3f020000 	svccc	0x00020000
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	05050402 	streq	r0, [r5, #-1026]	; 0x402
      50:	02000000 	andeq	r0, r0, #0
      54:	012e0704 	teqeq	lr, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	00000005 	andeq	r0, r0, r5
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	00000129 	andeq	r0, r0, r9, lsr #2
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	01330704 	teqeq	r3, r4, lsl #14
      74:	04020000 	streq	r0, [r2], #-0
      78:	00019107 	andeq	r9, r1, r7, lsl #2
      7c:	08010200 	stmdaeq	r1, {r9}
      80:	00000154 	andeq	r0, r0, r4, asr r1
      84:	70040802 	andvc	r0, r4, r2, lsl #16
      88:	02000001 	andeq	r0, r0, #1
      8c:	01810404 	orreq	r0, r1, r4, lsl #8
      90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      94:	00016b04 	andeq	r6, r1, r4, lsl #22
      98:	01790300 	cmneq	r9, r0, lsl #6
      9c:	41030000 	mrsmi	r0, (UNDEF: 3)
      a0:	00000041 	andeq	r0, r0, r1, asr #32
      a4:	00009905 	andeq	r9, r0, r5, lsl #18
      a8:	01590600 	cmpeq	r9, r0, lsl #12
      ac:	1a010000 	bne	400b4 <_Min_Stack_Size+0x3fcb4>
      b0:	00000068 	andeq	r0, r0, r8, rrx
      b4:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      b8:	00000040 	andeq	r0, r0, r0, asr #32
      bc:	00e79c01 	rsceq	r9, r7, r1, lsl #24
      c0:	0c070000 	stceq	0, cr0, [r7], {-0}
      c4:	01000001 	tsteq	r0, r1
      c8:	0000e71d 	andeq	lr, r0, sp, lsl r7
      cc:	68910200 	ldmvs	r1, {r9}
      d0:	000b2e08 	andeq	r2, fp, r8, lsl #28
      d4:	00001408 	andeq	r1, r0, r8, lsl #8
      d8:	00690900 	rsbeq	r0, r9, r0, lsl #18
      dc:	00682701 	rsbeq	r2, r8, r1, lsl #14
      e0:	91020000 	mrsls	r0, (UNDEF: 2)
      e4:	0a000074 	beq	2bc <_Min_Heap_Size+0x2bc>
      e8:	0000008b 	andeq	r0, r0, fp, lsl #1
      ec:	000000f7 	strdeq	r0, [r0], -r7
      f0:	0000760b 	andeq	r7, r0, fp, lsl #12
      f4:	0c000200 	sfmeq	f0, 4, [r0], {-0}
      f8:	0000015e 	andeq	r0, r0, lr, asr r1
      fc:	a406a704 	strge	sl, [r6], #-1796	; 0x704
     100:	00000000 	andeq	r0, r0, r0
     104:	000001f8 	strdeq	r0, [r0], -r8
     108:	00a20004 	adceq	r0, r2, r4
     10c:	01040000 	mrseq	r0, (UNDEF: 4)
     110:	00000021 	andeq	r0, r0, r1, lsr #32
     114:	0001cf01 	andeq	ip, r1, r1, lsl #30
     118:	00011400 	andeq	r1, r1, r0, lsl #8
     11c:	00001000 	andeq	r1, r0, r0
     120:	00000000 	andeq	r0, r0, r0
     124:	0000d800 	andeq	sp, r0, r0, lsl #16
     128:	06010200 	streq	r0, [r1], -r0, lsl #4
     12c:	0000014d 	andeq	r0, r0, sp, asr #2
     130:	4b080102 	blmi	200540 <_Min_Stack_Size+0x200140>
     134:	02000001 	andeq	r0, r0, #1
     138:	01870502 	orreq	r0, r7, r2, lsl #10
     13c:	02020000 	andeq	r0, r2, #0
     140:	00000e07 	andeq	r0, r0, r7, lsl #28
     144:	01770300 	cmneq	r7, r0, lsl #6
     148:	3f020000 	svccc	0x00020000
     14c:	0000004c 	andeq	r0, r0, ip, asr #32
     150:	05050402 	streq	r0, [r5, #-1026]	; 0x402
     154:	02000000 	andeq	r0, r0, #0
     158:	012e0704 	teqeq	lr, r4, lsl #14
     15c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     160:	00000005 	andeq	r0, r0, r5
     164:	07080200 	streq	r0, [r8, -r0, lsl #4]
     168:	00000129 	andeq	r0, r0, r9, lsr #2
     16c:	69050404 	stmdbvs	r5, {r2, sl}
     170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     174:	01330704 	teqeq	r3, r4, lsl #14
     178:	04020000 	streq	r0, [r2], #-0
     17c:	00019107 	andeq	r9, r1, r7, lsl #2
     180:	08010200 	stmdaeq	r1, {r9}
     184:	00000154 	andeq	r0, r0, r4, asr r1
     188:	70040802 	andvc	r0, r4, r2, lsl #16
     18c:	02000001 	andeq	r0, r0, #1
     190:	01810404 	orreq	r0, r1, r4, lsl #8
     194:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     198:	00016b04 	andeq	r6, r1, r4, lsl #22
     19c:	01790300 	cmneq	r9, r0, lsl #6
     1a0:	41030000 	mrsmi	r0, (UNDEF: 3)
     1a4:	00000041 	andeq	r0, r0, r1, asr #32
     1a8:	00009905 	andeq	r9, r0, r5, lsl #18
     1ac:	02280600 	eoreq	r0, r8, #0, 12
     1b0:	17010000 	strne	r0, [r1, -r0]
     1b4:	0000008b 	andeq	r0, r0, fp, lsl #1
     1b8:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
     1bc:	0000003a 	andeq	r0, r0, sl, lsr r0
     1c0:	00f99c01 	rscseq	r9, r9, r1, lsl #24
     1c4:	ec070000 	stc	0, cr0, [r7], {-0}
     1c8:	01000001 	tsteq	r0, r1
     1cc:	00008b17 	andeq	r8, r0, r7, lsl fp
     1d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     1d4:	0001a807 	andeq	sl, r1, r7, lsl #16
     1d8:	8b170100 	blhi	5c05e0 <_Min_Stack_Size+0x5c01e0>
     1dc:	02000000 	andeq	r0, r0, #0
     1e0:	50087091 	mulpl	r8, r1, r0
     1e4:	01006973 	tsteq	r0, r3, ror r9
     1e8:	00008b17 	andeq	r8, r0, r7, lsl fp
     1ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
     1f0:	01005208 	tsteq	r0, r8, lsl #4
     1f4:	00008b17 	andeq	r8, r0, r7, lsl fp
     1f8:	68910200 	ldmvs	r1, {r9}
     1fc:	01e00600 	mvneq	r0, r0, lsl #12
     200:	1d010000 	stcne	0, cr0, [r1, #-0]
     204:	0000008b 	andeq	r0, r0, fp, lsl #1
     208:	08000b84 	stmdaeq	r0, {r2, r7, r8, r9, fp}
     20c:	0000003a 	andeq	r0, r0, sl, lsr r0
     210:	01499c01 	cmpeq	r9, r1, lsl #24
     214:	9a070000 	bls	1c021c <_Min_Stack_Size+0x1bfe1c>
     218:	01000001 	tsteq	r0, r1
     21c:	00008b1d 	andeq	r8, r0, sp, lsl fp
     220:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     224:	00024c07 	andeq	r4, r2, r7, lsl #24
     228:	8b1d0100 	blhi	740630 <_Min_Stack_Size+0x740230>
     22c:	02000000 	andeq	r0, r0, #0
     230:	50087091 	mulpl	r8, r1, r0
     234:	01006968 	tsteq	r0, r8, ror #18
     238:	00008b1d 	andeq	r8, r0, sp, lsl fp
     23c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     240:	01005108 	tsteq	r0, r8, lsl #2
     244:	00008b1d 	andeq	r8, r0, sp, lsl fp
     248:	68910200 	ldmvs	r1, {r9}
     24c:	01ff0600 	mvnseq	r0, r0, lsl #12
     250:	24010000 	strcs	r0, [r1], #-0
     254:	0000008b 	andeq	r0, r0, fp, lsl #1
     258:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
     25c:	0000003a 	andeq	r0, r0, sl, lsr r0
     260:	01999c01 	orrseq	r9, r9, r1, lsl #24
     264:	0c070000 	stceq	0, cr0, [r7], {-0}
     268:	01000002 	tsteq	r0, r2
     26c:	00008b24 	andeq	r8, r0, r4, lsr #22
     270:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     274:	00023307 	andeq	r3, r2, r7, lsl #6
     278:	8b240100 	blhi	900680 <_Min_Stack_Size+0x900280>
     27c:	02000000 	andeq	r0, r0, #0
     280:	f9077091 			; <UNDEFINED> instruction: 0xf9077091
     284:	01000001 	tsteq	r0, r1
     288:	00008b24 	andeq	r8, r0, r4, lsr #22
     28c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     290:	01005008 	tsteq	r0, r8
     294:	00008b24 	andeq	r8, r0, r4, lsr #22
     298:	68910200 	ldmvs	r1, {r9}
     29c:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
     2a0:	2b010000 	blcs	402a8 <_Min_Stack_Size+0x3fea8>
     2a4:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
     2a8:	00000096 	muleq	r0, r6, r0
     2ac:	01d99c01 	bicseq	r9, r9, r1, lsl #24
     2b0:	1b070000 	blne	1c02b8 <_Min_Stack_Size+0x1bfeb8>
     2b4:	01000002 	tsteq	r0, r2
     2b8:	0001d92b 	andeq	sp, r1, fp, lsr #18
     2bc:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     2c0:	0002430a 	andeq	r4, r2, sl, lsl #6
     2c4:	df2d0100 	svcle	0x002d0100
     2c8:	02000001 	andeq	r0, r0, #1
     2cc:	c60a6491 			; <UNDEFINED> instruction: 0xc60a6491
     2d0:	01000001 	tsteq	r0, r1
     2d4:	0001df2e 	andeq	sp, r1, lr, lsr #30
     2d8:	58910200 	ldmpl	r1, {r9}
     2dc:	8b040b00 	blhi	102ee4 <_Min_Stack_Size+0x102ae4>
     2e0:	0c000000 	stceq	0, cr0, [r0], {-0}
     2e4:	0000008b 	andeq	r0, r0, fp, lsl #1
     2e8:	000001ef 	andeq	r0, r0, pc, ror #3
     2ec:	0000760d 	andeq	r7, r0, sp, lsl #12
     2f0:	0e000200 	cdpeq	2, 0, cr0, cr0, cr0, {0}
     2f4:	0000015e 	andeq	r0, r0, lr, asr r1
     2f8:	a406a704 	strge	sl, [r6], #-1796	; 0x704
     2fc:	00000000 	andeq	r0, r0, r0
     300:	000002dd 	ldrdeq	r0, [r0], -sp
     304:	016f0004 	cmneq	pc, r4
     308:	01040000 	mrseq	r0, (UNDEF: 4)
     30c:	00000021 	andeq	r0, r0, r1, lsr #32
     310:	0002b601 	andeq	fp, r2, r1, lsl #12
     314:	00011400 	andeq	r1, r1, r0, lsl #8
     318:	00003800 	andeq	r3, r0, r0, lsl #16
     31c:	00000000 	andeq	r0, r0, r0
     320:	0001e000 	andeq	lr, r1, r0
     324:	06010200 	streq	r0, [r1], -r0, lsl #4
     328:	0000014d 	andeq	r0, r0, sp, asr #2
     32c:	00026e03 	andeq	r6, r2, r3, lsl #28
     330:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     334:	02000000 	andeq	r0, r0, #0
     338:	014b0801 	cmpeq	fp, r1, lsl #16
     33c:	02020000 	andeq	r0, r2, #0
     340:	00018705 	andeq	r8, r1, r5, lsl #14
     344:	07020200 	streq	r0, [r2, -r0, lsl #4]
     348:	0000000e 	andeq	r0, r0, lr
     34c:	00017703 	andeq	r7, r1, r3, lsl #14
     350:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
     354:	02000000 	andeq	r0, r0, #0
     358:	00050504 	andeq	r0, r5, r4, lsl #10
     35c:	04020000 	streq	r0, [r2], #-0
     360:	00012e07 	andeq	r2, r1, r7, lsl #28
     364:	05080200 	streq	r0, [r8, #-512]	; 0x200
     368:	00000000 	andeq	r0, r0, r0
     36c:	29070802 	stmdbcs	r7, {r1, fp}
     370:	04000001 	streq	r0, [r0], #-1
     374:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     378:	04020074 	streq	r0, [r2], #-116	; 0x74
     37c:	00013307 	andeq	r3, r1, r7, lsl #6
     380:	07040200 	streq	r0, [r4, -r0, lsl #4]
     384:	00000191 	muleq	r0, r1, r1
     388:	54080102 	strpl	r0, [r8], #-258	; 0x102
     38c:	02000001 	andeq	r0, r0, #1
     390:	01700408 	cmneq	r0, r8, lsl #8
     394:	04020000 	streq	r0, [r2], #-0
     398:	00018104 	andeq	r8, r1, r4, lsl #2
     39c:	04080200 	streq	r0, [r8], #-512	; 0x200
     3a0:	0000016b 	andeq	r0, r0, fp, ror #2
     3a4:	00027003 	andeq	r7, r2, r3
     3a8:	2c2a0300 	stccs	3, cr0, [sl], #-0
     3ac:	03000000 	movweq	r0, #0
     3b0:	00000179 	andeq	r0, r0, r9, ror r1
     3b4:	004c4103 	subeq	r4, ip, r3, lsl #2
     3b8:	af050000 	svcge	0x00050000
     3bc:	06000000 	streq	r0, [r0], -r0
     3c0:	1c400407 	cfstrdne	mvd0, [r0], {7}
     3c4:	07000001 	streq	r0, [r0, -r1]
     3c8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3cc:	00a44204 	adceq	r4, r4, r4, lsl #4
     3d0:	07000000 	streq	r0, [r0, -r0]
     3d4:	0000031e 	andeq	r0, r0, lr, lsl r3
     3d8:	00a44304 	adceq	r4, r4, r4, lsl #6
     3dc:	07010000 	streq	r0, [r1, -r0]
     3e0:	000002e6 	andeq	r0, r0, r6, ror #5
     3e4:	00a44404 	adceq	r4, r4, r4, lsl #8
     3e8:	07020000 	streq	r0, [r2, -r0]
     3ec:	000002a0 	andeq	r0, r0, r0, lsr #5
     3f0:	00a44504 	adceq	r4, r4, r4, lsl #10
     3f4:	07030000 	streq	r0, [r3, -r0]
     3f8:	00000343 	andeq	r0, r0, r3, asr #6
     3fc:	00a44604 	adceq	r4, r4, r4, lsl #12
     400:	07040000 	streq	r0, [r4, -r0]
     404:	000002db 	ldrdeq	r0, [r0], -fp
     408:	00a44704 	adceq	r4, r4, r4, lsl #14
     40c:	07050000 	streq	r0, [r5, -r0]
     410:	000002ab 	andeq	r0, r0, fp, lsr #5
     414:	00a44804 	adceq	r4, r4, r4, lsl #16
     418:	00060000 	andeq	r0, r6, r0
     41c:	00025b03 	andeq	r5, r2, r3, lsl #22
     420:	bf490400 	svclt	0x00490400
     424:	06000000 	streq	r0, [r0], -r0
     428:	484c0402 	stmdami	ip, {r1, sl}^
     42c:	07000001 	streq	r0, [r0, -r1]
     430:	00000397 	muleq	r0, r7, r3
     434:	00a44e04 	adceq	r4, r4, r4, lsl #28
     438:	07000000 	streq	r0, [r0, -r0]
     43c:	00000278 	andeq	r0, r0, r8, ror r2
     440:	00a44f04 	adceq	r4, r4, r4, lsl #30
     444:	00010000 	andeq	r0, r1, r0
     448:	00037c03 	andeq	r7, r3, r3, lsl #24
     44c:	27500400 	ldrbcs	r0, [r0, -r0, lsl #8]
     450:	08000001 	stmdaeq	r0, {r0}
     454:	00000309 	andeq	r0, r0, r9, lsl #6
     458:	0c941601 	ldceq	6, cr1, [r4], {1}
     45c:	00480800 	subeq	r0, r8, r0, lsl #16
     460:	9c010000 	stcls	0, cr0, [r1], {-0}
     464:	00000185 	andeq	r0, r0, r5, lsl #3
     468:	00032e09 	andeq	r2, r3, r9, lsl #28
     46c:	1c190100 	ldfnes	f0, [r9], {-0}
     470:	02000001 	andeq	r0, r0, #1
     474:	54097091 	strpl	r7, [r9], #-145	; 0x91
     478:	01000003 	tsteq	r0, r3
     47c:	0001481a 	andeq	r4, r1, sl, lsl r8
     480:	6c910200 	lfmvs	f0, 4, [r1], {0}
     484:	02f90800 	rscseq	r0, r9, #0, 16
     488:	30010000 	andcc	r0, r1, r0
     48c:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
     490:	00000120 	andeq	r0, r0, r0, lsr #2
     494:	021d9c01 	andseq	r9, sp, #256	; 0x100
     498:	f20a0000 	vhadd.s8	d0, d10, d0
     49c:	01000002 	tsteq	r0, r2
     4a0:	00021d30 	andeq	r1, r2, r0, lsr sp
     4a4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     4a8:	00036b09 	andeq	r6, r3, r9, lsl #22
     4ac:	23320100 	teqcs	r2, #0, 2
     4b0:	02000002 	andeq	r0, r0, #2
     4b4:	98096491 	stmdals	r9, {r0, r4, r7, sl, sp, lr}
     4b8:	01000002 	tsteq	r0, r2
     4bc:	00023333 	andeq	r3, r2, r3, lsr r3
     4c0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     4c4:	00037509 	andeq	r7, r3, r9, lsl #10
     4c8:	37340100 	ldrcc	r0, [r4, -r0, lsl #2]!
     4cc:	02000000 	andeq	r0, r0, #0
     4d0:	220b5b91 	andcs	r5, fp, #148480	; 0x24400
     4d4:	4808000d 	stmdami	r8, {r0, r2, r3}
     4d8:	ec000000 	stc	0, cr0, [r0], {-0}
     4dc:	0c000001 	stceq	0, cr0, [r0], {1}
     4e0:	3e010069 	cdpcc	0, 0, cr0, cr1, cr9, {3}
     4e4:	00000073 	andeq	r0, r0, r3, ror r0
     4e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     4ec:	000d6c0b 	andeq	r6, sp, fp, lsl #24
     4f0:	00004808 	andeq	r4, r0, r8, lsl #16
     4f4:	00020600 	andeq	r0, r2, r0, lsl #12
     4f8:	00690c00 	rsbeq	r0, r9, r0, lsl #24
     4fc:	00734501 	rsbseq	r4, r3, r1, lsl #10
     500:	91020000 	mrsls	r0, (UNDEF: 2)
     504:	b40d0070 	strlt	r0, [sp], #-112	; 0x70
     508:	3e08000d 	cdpcc	0, 0, cr0, cr8, cr13, {0}
     50c:	0c000000 	stceq	0, cr0, [r0], {-0}
     510:	4c010069 	stcmi	0, cr0, [r1], {105}	; 0x69
     514:	00000073 	andeq	r0, r0, r3, ror r0
     518:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     51c:	96040e00 	strls	r0, [r4], -r0, lsl #28
     520:	0f000000 	svceq	0x00000000
     524:	00000037 	andeq	r0, r0, r7, lsr r0
     528:	00000233 	andeq	r0, r0, r3, lsr r2
     52c:	00008110 	andeq	r8, r0, r0, lsl r1
     530:	0f000500 	svceq	0x00000500
     534:	0000003e 	andeq	r0, r0, lr, lsr r0
     538:	00000243 	andeq	r0, r0, r3, asr #4
     53c:	00008110 	andeq	r8, r0, r0, lsl r1
     540:	08000200 	stmdaeq	r0, {r9}
     544:	000002c5 	andeq	r0, r0, r5, asr #5
     548:	0dfc5201 	lfmeq	f5, 2, [ip, #4]!
     54c:	03ec0800 	mvneq	r0, #0, 16
     550:	9c010000 	stcls	0, cr0, [r1], {-0}
     554:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     558:	0001c60a 	andeq	ip, r1, sl, lsl #12
     55c:	1d520100 	ldfnee	f0, [r2, #-0]
     560:	03000002 	movweq	r0, #2
     564:	097fa491 	ldmdbeq	pc!, {r0, r4, r7, sl, sp, pc}^	; <UNPREDICTABLE>
     568:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     56c:	02b45401 	adcseq	r5, r4, #16777216	; 0x1000000
     570:	91020000 	mrsls	r0, (UNDEF: 2)
     574:	74640c4c 	strbtvc	r0, [r4], #-3148	; 0xc4c
     578:	96550100 	ldrbls	r0, [r5], -r0, lsl #2
     57c:	02000000 	andeq	r0, r0, #0
     580:	450c5891 	strmi	r5, [ip, #-2193]	; 0x891
     584:	c4560100 	ldrbgt	r0, [r6], #-256	; 0x100
     588:	03000002 	movweq	r0, #2
     58c:	0c7fbc91 	ldcleq	12, cr11, [pc], #-580	; 350 <_Min_Heap_Size+0x350>
     590:	01004564 	tsteq	r0, r4, ror #10
     594:	0002c457 	andeq	ip, r2, r7, asr r4
     598:	ac910300 	ldcge	3, cr0, [r1], {0}
     59c:	0f460d7f 	svceq	0x00460d7f
     5a0:	00520800 	subseq	r0, r2, r0, lsl #16
     5a4:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
     5a8:	73630100 	cmnvc	r3, #0, 2
     5ac:	02000000 	andeq	r0, r0, #0
     5b0:	00005c91 	muleq	r0, r1, ip
     5b4:	0000960f 	andeq	r9, r0, pc, lsl #12
     5b8:	0002c400 	andeq	ip, r2, r0, lsl #8
     5bc:	00811000 	addeq	r1, r1, r0
     5c0:	00020000 	andeq	r0, r2, r0
     5c4:	0000960f 	andeq	r9, r0, pc, lsl #12
     5c8:	0002d400 	andeq	sp, r2, r0, lsl #8
     5cc:	00811000 	addeq	r1, r1, r0
     5d0:	00030000 	andeq	r0, r3, r0
     5d4:	00015e11 	andeq	r5, r1, r1, lsl lr
     5d8:	06a70500 	strteq	r0, [r7], r0, lsl #10
     5dc:	000000ba 	strheq	r0, [r0], -sl
     5e0:	00006700 	andeq	r6, r0, r0, lsl #14
     5e4:	50000200 	andpl	r0, r0, r0, lsl #4
     5e8:	04000002 	streq	r0, [r0], #-2
     5ec:	00038d01 	andeq	r8, r3, r1, lsl #26
     5f0:	00005800 	andeq	r5, r0, r0, lsl #16
     5f4:	636e6900 	cmnvs	lr, #0, 18
     5f8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     5fc:	5f584554 	svcpl	0x00584554
     600:	5f46344d 	svcpl	0x0046344d
     604:	334d5453 	movtcc	r5, #54355	; 0xd453
     608:	2f344632 	svccs	0x00344632
     60c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     610:	5f707574 	svcpl	0x00707574
     614:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     618:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     61c:	33345f39 	teqcc	r4, #57, 30	; 0xe4
     620:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
     624:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     628:	2f656d6f 	svccs	0x00656d6f
     62c:	65696863 	strbvs	r6, [r9, #-2147]!	; 0x863
     630:	69462f68 	stmdbvs	r6, {r3, r5, r6, r8, r9, sl, fp, sp}^
     634:	61776d72 	cmnvs	r7, r2, ror sp
     638:	47006572 	smlsdxmi	r0, r2, r5, r6
     63c:	4120554e 	teqmi	r0, lr, asr #10
     640:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
     644:	352e3432 	strcc	r3, [lr, #-1074]!	; 0x432
     648:	80010031 	andhi	r0, r1, r1, lsr r0
     64c:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
     650:	02620004 	rsbeq	r0, r2, #4
     654:	01040000 	mrseq	r0, (UNDEF: 4)
     658:	00000021 	andeq	r0, r0, r1, lsr #32
     65c:	00040601 	andeq	r0, r4, r1, lsl #12
     660:	00011400 	andeq	r1, r1, r0, lsl #8
     664:	00007800 	andeq	r7, r0, r0, lsl #16
     668:	00000000 	andeq	r0, r0, r0
     66c:	00041900 	andeq	r1, r4, r0, lsl #18
     670:	06010200 	streq	r0, [r1], -r0, lsl #4
     674:	0000014d 	andeq	r0, r0, sp, asr #2
     678:	00026e03 	andeq	r6, r2, r3, lsl #28
     67c:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     680:	02000000 	andeq	r0, r0, #0
     684:	014b0801 	cmpeq	fp, r1, lsl #16
     688:	02020000 	andeq	r0, r2, #0
     68c:	00018705 	andeq	r8, r1, r5, lsl #14
     690:	04380300 	ldrteq	r0, [r8], #-768	; 0x300
     694:	2b020000 	blcs	8069c <_Min_Stack_Size+0x8029c>
     698:	00000050 	andeq	r0, r0, r0, asr r0
     69c:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
     6a0:	03000000 	movweq	r0, #0
     6a4:	00000177 	andeq	r0, r0, r7, ror r1
     6a8:	00623f02 	rsbeq	r3, r2, r2, lsl #30
     6ac:	04020000 	streq	r0, [r2], #-0
     6b0:	00000505 	andeq	r0, r0, r5, lsl #10
     6b4:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
     6b8:	41020000 	mrsmi	r0, (UNDEF: 2)
     6bc:	00000074 	andeq	r0, r0, r4, ror r0
     6c0:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
     6c4:	02000001 	andeq	r0, r0, #1
     6c8:	00000508 	andeq	r0, r0, r8, lsl #10
     6cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     6d0:	00012907 	andeq	r2, r1, r7, lsl #18
     6d4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     6d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     6dc:	33070402 	movwcc	r0, #29698	; 0x7402
     6e0:	03000001 	movweq	r0, #1
     6e4:	00000270 	andeq	r0, r0, r0, ror r2
     6e8:	002c2a03 	eoreq	r2, ip, r3, lsl #20
     6ec:	3a030000 	bcc	c06f4 <_Min_Stack_Size+0xc02f4>
     6f0:	03000004 	movweq	r0, #4
     6f4:	00004536 	andeq	r4, r0, r6, lsr r5
     6f8:	01790300 	cmneq	r9, r0, lsl #6
     6fc:	41030000 	mrsmi	r0, (UNDEF: 3)
     700:	00000057 	andeq	r0, r0, r7, asr r0
     704:	0005b603 	andeq	fp, r5, r3, lsl #12
     708:	69420300 	stmdbvs	r2, {r8, r9}^
     70c:	02000000 	andeq	r0, r0, #0
     710:	01910704 	orrseq	r0, r1, r4, lsl #14
     714:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
     718:	06000000 	streq	r0, [r0], -r0
     71c:	0170048c 	cmneq	r0, ip, lsl #9
     720:	000001ea 	andeq	r0, r0, sl, ror #3
     724:	00045307 	andeq	r5, r4, r7, lsl #6
     728:	01720400 	cmneq	r2, r0, lsl #8
     72c:	000001ea 	andeq	r0, r0, sl, ror #3
     730:	048f0700 	streq	r0, [pc], #1792	; 738 <_Min_Stack_Size+0x338>
     734:	73040000 	movwvc	r0, #16384	; 0x4000
     738:	0000ca01 	andeq	ip, r0, r1, lsl #20
     73c:	39070400 	stmdbcc	r7, {sl}
     740:	04000005 	streq	r0, [r0], #-5
     744:	00ca0174 	sbceq	r0, sl, r4, ror r1
     748:	07080000 	streq	r0, [r8, -r0]
     74c:	000004de 	ldrdeq	r0, [r0], -lr
     750:	ca017504 	bgt	5db68 <_Min_Stack_Size+0x5d768>
     754:	0c000000 	stceq	0, cr0, [r0], {-0}
     758:	52435308 	subpl	r5, r3, #8, 6	; 0x20000000
     75c:	01760400 	cmneq	r6, r0, lsl #8
     760:	000000ca 	andeq	r0, r0, sl, asr #1
     764:	43430810 	movtmi	r0, #14352	; 0x3810
     768:	77040052 	smlsdvc	r4, r2, r0, r0
     76c:	0000ca01 	andeq	ip, r0, r1, lsl #20
     770:	53081400 	movwpl	r1, #33792	; 0x8400
     774:	04005048 	streq	r5, [r0], #-72	; 0x48
     778:	01ff0178 	mvnseq	r0, r8, ror r1
     77c:	07180000 	ldreq	r0, [r8, -r0]
     780:	000004fb 	strdeq	r0, [r0], -fp
     784:	ca017904 	bgt	5eb9c <_Min_Stack_Size+0x5e79c>
     788:	24000000 	strcs	r0, [r0], #-0
     78c:	0004b607 	andeq	fp, r4, r7, lsl #12
     790:	017a0400 	cmneq	sl, r0, lsl #8
     794:	000000ca 	andeq	r0, r0, sl, asr #1
     798:	05580728 	ldrbeq	r0, [r8, #-1832]	; 0x728
     79c:	7b040000 	blvc	1007a4 <_Min_Stack_Size+0x1003a4>
     7a0:	0000ca01 	andeq	ip, r0, r1, lsl #20
     7a4:	43072c00 	movwmi	r2, #31744	; 0x7c00
     7a8:	04000005 	streq	r0, [r0], #-5
     7ac:	00ca017c 	sbceq	r0, sl, ip, ror r1
     7b0:	07300000 	ldreq	r0, [r0, -r0]!
     7b4:	00000517 	andeq	r0, r0, r7, lsl r5
     7b8:	ca017d04 	bgt	5fbd0 <_Min_Stack_Size+0x5f7d0>
     7bc:	34000000 	strcc	r0, [r0], #-0
     7c0:	00049c07 	andeq	r9, r4, r7, lsl #24
     7c4:	017e0400 	cmneq	lr, r0, lsl #8
     7c8:	000000ca 	andeq	r0, r0, sl, asr #1
     7cc:	05c70738 	strbeq	r0, [r7, #1848]	; 0x738
     7d0:	7f040000 	svcvc	0x00040000
     7d4:	0000ca01 	andeq	ip, r0, r1, lsl #20
     7d8:	50083c00 	andpl	r3, r8, r0, lsl #24
     7dc:	04005246 	streq	r5, [r0], #-582	; 0x246
     7e0:	02140180 	andseq	r0, r4, #128, 2
     7e4:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     7e8:	00524644 	subseq	r4, r2, r4, asr #12
     7ec:	ea018104 	b	60c04 <_Min_Stack_Size+0x60804>
     7f0:	48000001 	stmdami	r0, {r0}
     7f4:	52444108 	subpl	r4, r4, #8, 2
     7f8:	01820400 	orreq	r0, r2, r0, lsl #8
     7fc:	000001ea 	andeq	r0, r0, sl, ror #3
     800:	0567074c 	strbeq	r0, [r7, #-1868]!	; 0x74c
     804:	83040000 	movwhi	r0, #16384	; 0x4000
     808:	00022e01 	andeq	r2, r2, r1, lsl #28
     80c:	3e075000 	cdpcc	0, 0, cr5, cr7, cr0, {0}
     810:	04000005 	streq	r0, [r0], #-5
     814:	02480184 	subeq	r0, r8, #132, 2	; 0x21
     818:	07600000 	strbeq	r0, [r0, -r0]!
     81c:	0000056c 	andeq	r0, r0, ip, ror #10
     820:	38018504 	stmdacc	r1, {r2, r8, sl, pc}
     824:	74000002 	strvc	r0, [r0], #-2
     828:	0005ee07 	andeq	lr, r5, r7, lsl #28
     82c:	01860400 	orreq	r0, r6, r0, lsl #8
     830:	000000ca 	andeq	r0, r0, sl, asr #1
     834:	ca090088 	bgt	240a5c <_Min_Stack_Size+0x24065c>
     838:	0a000000 	beq	840 <_Min_Stack_Size+0x440>
     83c:	00000097 	muleq	r0, r7, r0
     840:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     844:	0000c30b 	andeq	ip, r0, fp, lsl #6
     848:	05000b00 	streq	r0, [r0, #-2816]	; 0xb00
     84c:	000001ef 	andeq	r0, r0, pc, ror #3
     850:	0000b80a 	andeq	fp, r0, sl, lsl #16
     854:	00021400 	andeq	r1, r2, r0, lsl #8
     858:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     85c:	00010000 	andeq	r0, r1, r0
     860:	00021909 	andeq	r1, r2, r9, lsl #18
     864:	02040500 	andeq	r0, r4, #0, 10
     868:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     86c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     870:	0b000002 	bleq	880 <_Min_Stack_Size+0x480>
     874:	000000c3 	andeq	r0, r0, r3, asr #1
     878:	33090003 	movwcc	r0, #36867	; 0x9003
     87c:	05000002 	streq	r0, [r0, #-2]
     880:	0000021e 	andeq	r0, r0, lr, lsl r2
     884:	0000b80a 	andeq	fp, r0, sl, lsl #16
     888:	00024800 	andeq	r4, r2, r0, lsl #16
     88c:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     890:	00040000 	andeq	r0, r4, r0
     894:	00024d09 	andeq	r4, r2, r9, lsl #26
     898:	02380500 	eorseq	r0, r8, #0, 10
     89c:	760c0000 	strvc	r0, [ip], -r0
     8a0:	04000004 	streq	r0, [r0], #-4
     8a4:	00cf0187 	sbceq	r0, pc, r7, lsl #3
     8a8:	ad050000 	stcge	0, cr0, [r5, #-0]
     8ac:	0d000000 	stceq	0, cr0, [r0, #-0]
     8b0:	01f70501 	mvnseq	r0, r1, lsl #10
     8b4:	00000279 	andeq	r0, r0, r9, ror r2
     8b8:	00087e0e 	andeq	r7, r8, lr, lsl #28
     8bc:	530f0000 	movwpl	r0, #61440	; 0xf000
     8c0:	01005445 	tsteq	r0, r5, asr #8
     8c4:	051c0600 	ldreq	r0, [ip, #-1536]	; 0x600
     8c8:	02dc033e 	sbcseq	r0, ip, #-134217728	; 0xf8000000
     8cc:	41080000 	mrsmi	r0, (UNDEF: 8)
     8d0:	05005243 	streq	r5, [r0, #-579]	; 0x243
     8d4:	00ca0340 	sbceq	r0, sl, r0, asr #6
     8d8:	07000000 	streq	r0, [r0, -r0]
     8dc:	00000497 	muleq	r0, r7, r4
     8e0:	ca034105 	bgt	d0cfc <_Min_Stack_Size+0xd08fc>
     8e4:	04000000 	streq	r0, [r0], #-0
     8e8:	00049407 	andeq	r9, r4, r7, lsl #8
     8ec:	03420500 	movteq	r0, #9472	; 0x2500
     8f0:	000000ca 	andeq	r0, r0, sl, asr #1
     8f4:	52530808 	subspl	r0, r3, #8, 16	; 0x80000
     8f8:	03430500 	movteq	r0, #13568	; 0x3500
     8fc:	000000ca 	andeq	r0, r0, sl, asr #1
     900:	5243080c 	subpl	r0, r3, #12, 16	; 0xc0000
     904:	03440500 	movteq	r0, #17664	; 0x4500
     908:	000000ca 	andeq	r0, r0, sl, asr #1
     90c:	05fe0710 	ldrbeq	r0, [lr, #1808]!	; 0x710
     910:	45050000 	strmi	r0, [r5, #-0]
     914:	0000ca03 	andeq	ip, r0, r3, lsl #20
     918:	bb071400 	bllt	1c5920 <_Min_Stack_Size+0x1c5520>
     91c:	05000004 	streq	r0, [r0, #-4]
     920:	00ca0346 	sbceq	r0, sl, r6, asr #6
     924:	00180000 	andseq	r0, r8, r0
     928:	0005d50c 	andeq	sp, r5, ip, lsl #10
     92c:	03470500 	movteq	r0, #29952	; 0x7500
     930:	00000279 	andeq	r0, r0, r9, ror r2
     934:	4b050806 	blmi	142954 <_Min_Stack_Size+0x142554>
     938:	00030b04 	andeq	r0, r3, r4, lsl #22
     93c:	52430800 	subpl	r0, r3, #0, 16
     940:	044d0500 	strbeq	r0, [sp], #-1280	; 0x500
     944:	000000ca 	andeq	r0, r0, sl, asr #1
     948:	53430800 	movtpl	r0, #14336	; 0x3800
     94c:	4e050052 	mcrmi	0, 0, r0, cr5, cr2, {2}
     950:	0000ca04 	andeq	ip, r0, r4, lsl #20
     954:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     958:	000003fa 	strdeq	r0, [r0], -sl
     95c:	e8044f05 	stmda	r4, {r0, r2, r8, r9, sl, fp, lr}
     960:	06000002 	streq	r0, [r0], -r2
     964:	04550590 	ldrbeq	r0, [r5], #-1424	; 0x590
     968:	000004c0 	andeq	r0, r0, r0, asr #9
     96c:	00524308 	subseq	r4, r2, r8, lsl #6
     970:	ca045705 	bgt	11658c <_Min_Stack_Size+0x11618c>
     974:	00000000 	andeq	r0, r0, r0
     978:	0003c807 	andeq	ip, r3, r7, lsl #16
     97c:	04580500 	ldrbeq	r0, [r8], #-1280	; 0x500
     980:	000000ca 	andeq	r0, r0, sl, asr #1
     984:	05e90704 	strbeq	r0, [r9, #1796]!	; 0x704
     988:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
     98c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     990:	43080800 	movwmi	r0, #34816	; 0x8800
     994:	05005249 	streq	r5, [r0, #-585]	; 0x249
     998:	00ca045a 	sbceq	r0, sl, sl, asr r4
     99c:	070c0000 	streq	r0, [ip, -r0]
     9a0:	00000459 	andeq	r0, r0, r9, asr r4
     9a4:	ca045b05 	bgt	1175c0 <_Min_Stack_Size+0x1171c0>
     9a8:	10000000 	andne	r0, r0, r0
     9ac:	0003e107 	andeq	lr, r3, r7, lsl #2
     9b0:	045c0500 	ldrbeq	r0, [ip], #-1280	; 0x500
     9b4:	000000ca 	andeq	r0, r0, sl, asr #1
     9b8:	05cc0714 	strbeq	r0, [ip, #1812]	; 0x714
     9bc:	5d050000 	stcpl	0, cr0, [r5, #-0]
     9c0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     9c4:	6c071800 	stcvs	8, cr1, [r7], {-0}
     9c8:	05000005 	streq	r0, [r0, #-5]
     9cc:	00b8045e 	adcseq	r0, r8, lr, asr r4
     9d0:	071c0000 	ldreq	r0, [ip, -r0]
     9d4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9d8:	ca045f05 	bgt	1185f4 <_Min_Stack_Size+0x1181f4>
     9dc:	20000000 	andcs	r0, r0, r0
     9e0:	0004ad07 	andeq	sl, r4, r7, lsl #26
     9e4:	04600500 	strbteq	r0, [r0], #-1280	; 0x500
     9e8:	000000ca 	andeq	r0, r0, sl, asr #1
     9ec:	05760724 	ldrbeq	r0, [r6, #-1828]!	; 0x724
     9f0:	61050000 	mrsvs	r0, (UNDEF: 5)
     9f4:	00020404 	andeq	r0, r2, r4, lsl #8
     9f8:	bf072800 	svclt	0x00072800
     9fc:	05000005 	streq	r0, [r0, #-5]
     a00:	00ca0462 	sbceq	r0, sl, r2, ror #8
     a04:	07300000 	ldreq	r0, [r0, -r0]!
     a08:	000003d9 	ldrdeq	r0, [r0], -r9
     a0c:	ca046305 	bgt	119628 <_Min_Stack_Size+0x119228>
     a10:	34000000 	strcc	r0, [r0], #-0
     a14:	0004cc07 	andeq	ip, r4, r7, lsl #24
     a18:	04640500 	strbteq	r0, [r4], #-1280	; 0x500
     a1c:	000000ca 	andeq	r0, r0, sl, asr #1
     a20:	05800738 	streq	r0, [r0, #1848]	; 0x738
     a24:	65050000 	strvs	r0, [r5, #-0]
     a28:	0000b804 	andeq	fp, r0, r4, lsl #16
     a2c:	7f073c00 	svcvc	0x00073c00
     a30:	05000004 	streq	r0, [r0, #-4]
     a34:	00ca0466 	sbceq	r0, sl, r6, ror #8
     a38:	07400000 	strbeq	r0, [r0, -r0]
     a3c:	000004e4 	andeq	r0, r0, r4, ror #9
     a40:	ca046705 	bgt	11a65c <_Min_Stack_Size+0x11a25c>
     a44:	44000000 	strmi	r0, [r0], #-0
     a48:	00046c07 	andeq	r6, r4, r7, lsl #24
     a4c:	04680500 	strbteq	r0, [r8], #-1280	; 0x500
     a50:	00000204 	andeq	r0, r0, r4, lsl #4
     a54:	03be0748 			; <UNDEFINED> instruction: 0x03be0748
     a58:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     a5c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     a60:	5d075000 	stcpl	0, cr5, [r7, #-0]
     a64:	05000005 	streq	r0, [r0, #-5]
     a68:	00ca046a 	sbceq	r0, sl, sl, ror #8
     a6c:	07540000 	ldrbeq	r0, [r4, -r0]
     a70:	00000462 	andeq	r0, r0, r2, ror #8
     a74:	ca046b05 	bgt	11b690 <_Min_Stack_Size+0x11b290>
     a78:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     a7c:	00059607 	andeq	r9, r5, r7, lsl #12
     a80:	046c0500 	strbteq	r0, [ip], #-1280	; 0x500
     a84:	000000b8 	strheq	r0, [r0], -r8
     a88:	0528075c 	streq	r0, [r8, #-1884]!	; 0x75c
     a8c:	6d050000 	stcvs	0, cr0, [r5, #-0]
     a90:	0000ca04 	andeq	ip, r0, r4, lsl #20
     a94:	f4076000 	vst4.8	{d6-d9}, [r7], r0
     a98:	05000005 	streq	r0, [r0, #-5]
     a9c:	00ca046e 	sbceq	r0, sl, lr, ror #8
     aa0:	07640000 	strbeq	r0, [r4, -r0]!
     aa4:	000005a0 	andeq	r0, r0, r0, lsr #11
     aa8:	04046f05 	streq	r6, [r4], #-3845	; 0xf05
     aac:	68000002 	stmdavs	r0, {r1}
     ab0:	0003ea07 	andeq	lr, r3, r7, lsl #20
     ab4:	04700500 	ldrbteq	r0, [r0], #-1280	; 0x500
     ab8:	000000ca 	andeq	r0, r0, sl, asr #1
     abc:	53430870 	movtpl	r0, #14448	; 0x3870
     ac0:	71050052 	qaddvc	r0, r2, r5
     ac4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     ac8:	aa077400 	bge	1ddad0 <_Min_Stack_Size+0x1dd6d0>
     acc:	05000005 	streq	r0, [r0, #-5]
     ad0:	02040472 	andeq	r0, r4, #1912602624	; 0x72000000
     ad4:	07780000 	ldrbeq	r0, [r8, -r0]!
     ad8:	00000443 	andeq	r0, r0, r3, asr #8
     adc:	ca047305 	bgt	11d6f8 <_Min_Stack_Size+0x11d2f8>
     ae0:	80000000 	andhi	r0, r0, r0
     ae4:	0003ef07 	andeq	lr, r3, r7, lsl #30
     ae8:	04740500 	ldrbteq	r0, [r4], #-1280	; 0x500
     aec:	000000ca 	andeq	r0, r0, sl, asr #1
     af0:	05e30784 	strbeq	r0, [r3, #1924]!	; 0x784
     af4:	75050000 	strvc	r0, [r5, #-0]
     af8:	0000ca04 	andeq	ip, r0, r4, lsl #20
     afc:	87078800 	strhi	r8, [r7, -r0, lsl #16]
     b00:	05000004 	streq	r0, [r0, #-4]
     b04:	00ca0476 	sbceq	r0, sl, r6, ror r4
     b08:	008c0000 	addeq	r0, ip, r0
     b0c:	0004a10c 	andeq	sl, r4, ip, lsl #2
     b10:	04780500 	ldrbteq	r0, [r8], #-1280	; 0x500
     b14:	00000317 	andeq	r0, r0, r7, lsl r3
     b18:	00051d10 	andeq	r1, r5, r0, lsl sp
     b1c:	30d00100 	sbcscc	r0, r0, r0, lsl #2
     b20:	68080012 	stmdavs	r8, {r1, r4}
     b24:	01000000 	mrseq	r0, (UNDEF: 0)
     b28:	0501119c 	streq	r1, [r1, #-412]	; 0x19c
     b2c:	1d010000 	stcne	0, cr0, [r1, #-0]
     b30:	00129801 	andseq	r9, r2, r1, lsl #16
     b34:	0000f808 	andeq	pc, r0, r8, lsl #16
     b38:	3f9c0100 	svccc	0x009c0100
     b3c:	12000005 	andne	r0, r0, #5
     b40:	00706d74 	rsbseq	r6, r0, r4, ror sp
     b44:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     b48:	02000000 	andeq	r0, r0, #0
     b4c:	32137091 	andscc	r7, r3, #145	; 0x91
     b50:	01000005 	tsteq	r0, r5
     b54:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     b58:	91020000 	mrsls	r0, (UNDEF: 2)
     b5c:	04d91374 	ldrbeq	r1, [r9], #884	; 0x374
     b60:	1f010000 	svcne	0x00010000
     b64:	0000b801 	andeq	fp, r0, r1, lsl #16
     b68:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b6c:	0004c213 	andeq	ip, r4, r3, lsl r2
     b70:	011f0100 	tsteq	pc, r0, lsl #2
     b74:	000000b8 	strheq	r0, [r0], -r8
     b78:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     b7c:	000004d4 	ldrdeq	r0, [r0], -r4
     b80:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     b84:	02000000 	andeq	r0, r0, #0
     b88:	14006491 	strne	r6, [r0], #-1169	; 0x491
     b8c:	0000058a 	andeq	r0, r0, sl, lsl #11
     b90:	90015501 	andls	r5, r1, r1, lsl #10
     b94:	f4080013 	vst4.8	{d0-d3}, [r8 :64], r3
     b98:	01000000 	mrseq	r0, (UNDEF: 0)
     b9c:	0005749c 	muleq	r5, ip, r4
     ba0:	04ec1300 	strbteq	r1, [ip], #768	; 0x300
     ba4:	5a010000 	bpl	40bac <_Min_Stack_Size+0x407ac>
     ba8:	0000ca01 	andeq	ip, r0, r1, lsl #20
     bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     bb0:	00044913 	andeq	r4, r4, r3, lsl r9
     bb4:	015a0100 	cmpeq	sl, r0, lsl #2
     bb8:	000000ca 	andeq	r0, r0, sl, asr #1
     bbc:	00709102 	rsbseq	r9, r0, r2, lsl #2
     bc0:	00015e15 	andeq	r5, r1, r5, lsl lr
     bc4:	06a70400 	strteq	r0, [r7], r0, lsl #8
     bc8:	0000025e 	andeq	r0, r0, lr, asr r2
     bcc:	00054816 	andeq	r4, r5, r6, lsl r8
     bd0:	b8b00100 	ldmlt	r0!, {r8}
     bd4:	05000000 	streq	r0, [r0, #-0]
     bd8:	00000003 	andeq	r0, r0, r3
     bdc:	00970a20 	addseq	r0, r7, r0, lsr #20
     be0:	05a10000 	streq	r0, [r1, #0]!
     be4:	c30b0000 	movwgt	r0, #45056	; 0xb000
     be8:	0f000000 	svceq	0x00000000
     bec:	0ff51600 	svceq	0x00f51600
     bf0:	b2010000 	andlt	r0, r1, #0
     bf4:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     bf8:	00040305 	andeq	r0, r4, r5, lsl #6
     bfc:	b7092000 	strlt	r2, [r9, -r0]
     c00:	05000005 	streq	r0, [r0, #-5]
     c04:	00000591 	muleq	r0, r1, r5
     c08:	00053d00 	andeq	r3, r5, r0, lsl #26
     c0c:	9a000400 	bls	1c14 <_Min_Stack_Size+0x1814>
     c10:	04000003 	streq	r0, [r0], #-3
     c14:	00002101 	andeq	r2, r0, r1, lsl #2
     c18:	06b50100 	ldrteq	r0, [r5], r0, lsl #2
     c1c:	01140000 	tsteq	r4, r0
     c20:	00980000 	addseq	r0, r8, r0
     c24:	00000000 	andeq	r0, r0, r0
     c28:	05ca0000 	strbeq	r0, [sl]
     c2c:	01020000 	mrseq	r0, (UNDEF: 2)
     c30:	00014d06 	andeq	r4, r1, r6, lsl #26
     c34:	026e0300 	rsbeq	r0, lr, #0, 6
     c38:	1d020000 	stcne	0, cr0, [r2, #-0]
     c3c:	00000037 	andeq	r0, r0, r7, lsr r0
     c40:	4b080102 	blmi	201050 <_Min_Stack_Size+0x200c50>
     c44:	02000001 	andeq	r0, r0, #1
     c48:	01870502 	orreq	r0, r7, r2, lsl #10
     c4c:	02020000 	andeq	r0, r2, #0
     c50:	00000e07 	andeq	r0, r0, r7, lsl #28
     c54:	01770300 	cmneq	r7, r0, lsl #6
     c58:	3f020000 	svccc	0x00020000
     c5c:	00000057 	andeq	r0, r0, r7, asr r0
     c60:	05050402 	streq	r0, [r5, #-1026]	; 0x402
     c64:	03000000 	movweq	r0, #0
     c68:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     c6c:	00694102 	rsbeq	r4, r9, r2, lsl #2
     c70:	04020000 	streq	r0, [r2], #-0
     c74:	00012e07 	andeq	r2, r1, r7, lsl #28
     c78:	05080200 	streq	r0, [r8, #-512]	; 0x200
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	29070802 	stmdbcs	r7, {r1, fp}
     c84:	04000001 	streq	r0, [r0], #-1
     c88:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c8c:	04020074 	streq	r0, [r2], #-116	; 0x74
     c90:	00013307 	andeq	r3, r1, r7, lsl #6
     c94:	02700300 	rsbseq	r0, r0, #0, 6
     c98:	2a030000 	bcs	c0ca0 <_Min_Stack_Size+0xc08a0>
     c9c:	0000002c 	andeq	r0, r0, ip, lsr #32
     ca0:	00017903 	andeq	r7, r1, r3, lsl #18
     ca4:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
     ca8:	03000000 	movweq	r0, #0
     cac:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     cb0:	005e4203 	subseq	r4, lr, r3, lsl #4
     cb4:	04050000 	streq	r0, [r5], #-0
     cb8:	0150040e 	cmpeq	r0, lr, lsl #8
     cbc:	00000169 	andeq	r0, r0, r9, ror #2
     cc0:	00067306 	andeq	r7, r6, r6, lsl #6
     cc4:	01520400 	cmpeq	r2, r0, lsl #8
     cc8:	00000180 	andeq	r0, r0, r0, lsl #3
     ccc:	056c0600 	strbeq	r0, [ip, #-1536]!	; 0x600
     cd0:	53040000 	movwpl	r0, #16384	; 0x4000
     cd4:	00018501 	andeq	r8, r1, r1, lsl #10
     cd8:	02062000 	andeq	r2, r6, #0
     cdc:	04000007 	streq	r0, [r0], #-7
     ce0:	01950154 	orrseq	r0, r5, r4, asr r1
     ce4:	06800000 	streq	r0, [r0], r0
     ce8:	0000068e 	andeq	r0, r0, lr, lsl #13
     cec:	85015504 	strhi	r5, [r1, #-1284]	; 0x504
     cf0:	a0000001 	andge	r0, r0, r1
     cf4:	00075307 	andeq	r5, r7, r7, lsl #6
     cf8:	01560400 	cmpeq	r6, r0, lsl #8
     cfc:	0000019a 	muleq	r0, sl, r1
     d00:	80070100 	andhi	r0, r7, r0, lsl #2
     d04:	04000005 	streq	r0, [r0], #-5
     d08:	01850157 	orreq	r0, r5, r7, asr r1
     d0c:	01200000 	teqeq	r0, r0
     d10:	0006b007 	andeq	fp, r6, r7
     d14:	01580400 	cmpeq	r8, r0, lsl #8
     d18:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     d1c:	6c070180 	stfvss	f0, [r7], {128}	; 0x80
     d20:	04000004 	streq	r0, [r0], #-4
     d24:	01850159 	orreq	r0, r5, r9, asr r1
     d28:	01a00000 	moveq	r0, r0
     d2c:	00060407 	andeq	r0, r6, r7, lsl #8
     d30:	015a0400 	cmpeq	sl, r0, lsl #8
     d34:	000001a4 	andeq	r0, r0, r4, lsr #3
     d38:	96070200 	strls	r0, [r7], -r0, lsl #4
     d3c:	04000005 	streq	r0, [r0], #-5
     d40:	01a9015b 			; <UNDEFINED> instruction: 0x01a9015b
     d44:	02200000 	eoreq	r0, r0, #0
     d48:	00504908 	subseq	r4, r0, r8, lsl #18
     d4c:	c9015c04 	stmdbgt	r1, {r2, sl, fp, ip, lr}
     d50:	00000001 	andeq	r0, r0, r1
     d54:	05a00703 	streq	r0, [r0, #1795]!	; 0x703
     d58:	5d040000 	stcpl	0, cr0, [r4, #-0]
     d5c:	0001ce01 	andeq	ip, r1, r1, lsl #28
     d60:	0703f000 	streq	pc, [r3, -r0]
     d64:	00000681 	andeq	r0, r0, r1, lsl #13
     d68:	df015e04 	svcle	0x00015e04
     d6c:	00000001 	andeq	r0, r0, r1
     d70:	a209000e 	andge	r0, r9, #14
     d74:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
     d78:	0a000001 	beq	d84 <_Min_Stack_Size+0x984>
     d7c:	00000179 	andeq	r0, r0, r9, ror r1
     d80:	04020007 	streq	r0, [r2], #-7
     d84:	00019107 	andeq	r9, r1, r7, lsl #2
     d88:	01690b00 	cmneq	r9, r0, lsl #22
     d8c:	a2090000 	andge	r0, r9, #0
     d90:	95000000 	strls	r0, [r0, #-0]
     d94:	0a000001 	beq	da0 <_Min_Stack_Size+0x9a0>
     d98:	00000179 	andeq	r0, r0, r9, ror r1
     d9c:	690b0017 	stmdbvs	fp, {r0, r1, r2, r4}
     da0:	0b000001 	bleq	dac <_Min_Stack_Size+0x9ac>
     da4:	00000169 	andeq	r0, r0, r9, ror #2
     da8:	0001690b 	andeq	r6, r1, fp, lsl #18
     dac:	01690b00 	cmneq	r9, r0, lsl #22
     db0:	a2090000 	andge	r0, r9, #0
     db4:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
     db8:	0a000001 	beq	dc4 <_Min_Stack_Size+0x9c4>
     dbc:	00000179 	andeq	r0, r0, r9, ror r1
     dc0:	8c090037 	stchi	0, cr0, [r9], {55}	; 0x37
     dc4:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
     dc8:	0a000001 	beq	dd4 <_Min_Stack_Size+0x9d4>
     dcc:	00000179 	andeq	r0, r0, r9, ror r1
     dd0:	b90b00ef 	stmdblt	fp, {r0, r1, r2, r3, r5, r6, r7}
     dd4:	09000001 	stmdbeq	r0, {r0}
     dd8:	000000a2 	andeq	r0, r0, r2, lsr #1
     ddc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     de0:	0001790c 	andeq	r7, r1, ip, lsl #18
     de4:	00028300 	andeq	r8, r2, r0, lsl #6
     de8:	0000a20b 	andeq	sl, r0, fp, lsl #4
     dec:	07830d00 	streq	r0, [r3, r0, lsl #26]
     df0:	5f040000 	svcpl	0x00040000
     df4:	0000ad01 	andeq	sl, r0, r1, lsl #26
     df8:	048c0e00 	streq	r0, [ip], #3584	; 0xe00
     dfc:	030b0170 	movweq	r0, #45424	; 0xb170
     e00:	53060000 	movwpl	r0, #24576	; 0x6000
     e04:	04000004 	streq	r0, [r0], #-4
     e08:	030b0172 	movweq	r0, #45426	; 0xb172
     e0c:	06000000 	streq	r0, [r0], -r0
     e10:	0000048f 	andeq	r0, r0, pc, lsl #9
     e14:	df017304 	svcle	0x00017304
     e18:	04000001 	streq	r0, [r0], #-1
     e1c:	00053906 	andeq	r3, r5, r6, lsl #18
     e20:	01740400 	cmneq	r4, r0, lsl #8
     e24:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e28:	04de0608 	ldrbeq	r0, [lr], #1544	; 0x608
     e2c:	75040000 	strvc	r0, [r4, #-0]
     e30:	0001df01 	andeq	sp, r1, r1, lsl #30
     e34:	530f0c00 	movwpl	r0, #64512	; 0xfc00
     e38:	04005243 	streq	r5, [r0], #-579	; 0x243
     e3c:	01df0176 	bicseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
     e40:	0f100000 	svceq	0x00100000
     e44:	00524343 	subseq	r4, r2, r3, asr #6
     e48:	df017704 	svcle	0x00017704
     e4c:	14000001 	strne	r0, [r0], #-1
     e50:	5048530f 	subpl	r5, r8, pc, lsl #6
     e54:	01780400 	cmneq	r8, r0, lsl #8
     e58:	00000320 	andeq	r0, r0, r0, lsr #6
     e5c:	04fb0618 	ldrbteq	r0, [fp], #1560	; 0x618
     e60:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     e64:	0001df01 	andeq	sp, r1, r1, lsl #30
     e68:	b6062400 	strlt	r2, [r6], -r0, lsl #8
     e6c:	04000004 	streq	r0, [r0], #-4
     e70:	01df017a 	bicseq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
     e74:	06280000 	strteq	r0, [r8], -r0
     e78:	00000558 	andeq	r0, r0, r8, asr r5
     e7c:	df017b04 	svcle	0x00017b04
     e80:	2c000001 	stccs	0, cr0, [r0], {1}
     e84:	00054306 	andeq	r4, r5, r6, lsl #6
     e88:	017c0400 	cmneq	ip, r0, lsl #8
     e8c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e90:	05170630 	ldreq	r0, [r7, #-1584]	; 0x630
     e94:	7d040000 	stcvc	0, cr0, [r4, #-0]
     e98:	0001df01 	andeq	sp, r1, r1, lsl #30
     e9c:	9c063400 	cfstrsls	mvf3, [r6], {-0}
     ea0:	04000004 	streq	r0, [r0], #-4
     ea4:	01df017e 	bicseq	r0, pc, lr, ror r1	; <UNPREDICTABLE>
     ea8:	06380000 	ldrteq	r0, [r8], -r0
     eac:	000005c7 	andeq	r0, r0, r7, asr #11
     eb0:	df017f04 	svcle	0x00017f04
     eb4:	3c000001 	stccc	0, cr0, [r0], {1}
     eb8:	5246500f 	subpl	r5, r6, #15
     ebc:	01800400 	orreq	r0, r0, r0, lsl #8
     ec0:	00000335 	andeq	r0, r0, r5, lsr r3
     ec4:	46440f40 	strbmi	r0, [r4], -r0, asr #30
     ec8:	81040052 	qaddhi	r0, r2, r4
     ecc:	00030b01 	andeq	r0, r3, r1, lsl #22
     ed0:	410f4800 	tstmi	pc, r0, lsl #16
     ed4:	04005244 	streq	r5, [r0], #-580	; 0x244
     ed8:	030b0182 	movweq	r0, #45442	; 0xb182
     edc:	064c0000 	strbeq	r0, [ip], -r0
     ee0:	00000567 	andeq	r0, r0, r7, ror #10
     ee4:	4f018304 	svcmi	0x00018304
     ee8:	50000003 	andpl	r0, r0, r3
     eec:	00053e06 	andeq	r3, r5, r6, lsl #28
     ef0:	01840400 	orreq	r0, r4, r0, lsl #8
     ef4:	00000369 	andeq	r0, r0, r9, ror #6
     ef8:	056c0660 	strbeq	r0, [ip, #-1632]!	; 0x660
     efc:	85040000 	strhi	r0, [r4, #-0]
     f00:	00035901 	andeq	r5, r3, r1, lsl #18
     f04:	ee067400 	cfcpys	mvf7, mvf6
     f08:	04000005 	streq	r0, [r0], #-5
     f0c:	01df0186 	bicseq	r0, pc, r6, lsl #3
     f10:	00880000 	addeq	r0, r8, r0
     f14:	0001df10 	andeq	sp, r1, r0, lsl pc
     f18:	008c0900 	addeq	r0, ip, r0, lsl #18
     f1c:	03200000 	teqeq	r0, #0
     f20:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
     f24:	0b000001 	bleq	f30 <_Min_Stack_Size+0xb30>
     f28:	03100b00 	tsteq	r0, #0, 22
     f2c:	a2090000 	andge	r0, r9, #0
     f30:	35000000 	strcc	r0, [r0, #-0]
     f34:	0a000003 	beq	f48 <_Min_Stack_Size+0xb48>
     f38:	00000179 	andeq	r0, r0, r9, ror r1
     f3c:	3a100001 	bcc	400f48 <_Min_Stack_Size+0x400b48>
     f40:	0b000003 	bleq	f54 <_Min_Stack_Size+0xb54>
     f44:	00000325 	andeq	r0, r0, r5, lsr #6
     f48:	0000a209 	andeq	sl, r0, r9, lsl #4
     f4c:	00034f00 	andeq	r4, r3, r0, lsl #30
     f50:	01790a00 	cmneq	r9, r0, lsl #20
     f54:	00030000 	andeq	r0, r3, r0
     f58:	00035410 	andeq	r5, r3, r0, lsl r4
     f5c:	033f0b00 	teqeq	pc, #0, 22
     f60:	a2090000 	andge	r0, r9, #0
     f64:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     f68:	0a000003 	beq	f7c <_Min_Stack_Size+0xb7c>
     f6c:	00000179 	andeq	r0, r0, r9, ror r1
     f70:	6e100004 	cdpvs	0, 1, cr0, cr0, cr4, {0}
     f74:	0b000003 	bleq	f88 <_Min_Stack_Size+0xb88>
     f78:	00000359 	andeq	r0, r0, r9, asr r3
     f7c:	0004760d 	andeq	r7, r4, sp, lsl #12
     f80:	01870400 	orreq	r0, r7, r0, lsl #8
     f84:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f88:	6f04100e 	svcvs	0x0004100e
     f8c:	0003bd02 	andeq	fp, r3, r2, lsl #26
     f90:	06970600 	ldreq	r0, [r7], r0, lsl #12
     f94:	71040000 	mrsvc	r0, (UNDEF: 4)
     f98:	0001df02 	andeq	sp, r1, r2, lsl #30
     f9c:	cc060000 	stcgt	0, cr0, [r6], {-0}
     fa0:	04000007 	streq	r0, [r0], #-7
     fa4:	01df0272 	bicseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
     fa8:	0f040000 	svceq	0x00040000
     fac:	004c4156 	subeq	r4, ip, r6, asr r1
     fb0:	df027304 	svcle	0x00027304
     fb4:	08000001 	stmdaeq	r0, {r0}
     fb8:	0006fc06 	andeq	pc, r6, r6, lsl #24
     fbc:	02740400 	rsbseq	r0, r4, #0, 8
     fc0:	0000030b 	andeq	r0, r0, fp, lsl #6
     fc4:	3a0d000c 	bcc	340ffc <_Min_Stack_Size+0x340bfc>
     fc8:	04000007 	streq	r0, [r0], #-7
     fcc:	037f0275 	cmneq	pc, #1342177287	; 0x50000007
     fd0:	970b0000 	strls	r0, [fp, -r0]
     fd4:	11000000 	mrsne	r0, (UNDEF: 0)
     fd8:	01f90501 	mvnseq	r0, r1, lsl #10
     fdc:	000003e4 	andeq	r0, r0, r4, ror #7
     fe0:	00068612 	andeq	r8, r6, r2, lsl r6
     fe4:	de120000 	cdple	0, 1, cr0, cr2, cr0, {0}
     fe8:	01000007 	tsteq	r0, r7
     fec:	07af0d00 	streq	r0, [pc, r0, lsl #26]!
     ff0:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
     ff4:	0003ce01 	andeq	ip, r3, r1, lsl #28
     ff8:	06041300 	streq	r1, [r4], -r0, lsl #6
     ffc:	00042936 	andeq	r2, r4, r6, lsr r9
    1000:	07581400 	ldrbeq	r1, [r8, -r0, lsl #8]
    1004:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    1008:	0000008c 	andeq	r0, r0, ip, lsl #1
    100c:	078d1400 	streq	r1, [sp, r0, lsl #8]
    1010:	3d060000 	stccc	0, cr0, [r6, #-0]
    1014:	0000008c 	andeq	r0, r0, ip, lsl #1
    1018:	07681401 	strbeq	r1, [r8, -r1, lsl #8]!
    101c:	42060000 	andmi	r0, r6, #0
    1020:	0000008c 	andeq	r0, r0, ip, lsl #1
    1024:	061a1402 	ldreq	r1, [sl], -r2, lsl #8
    1028:	47060000 	strmi	r0, [r6, -r0]
    102c:	000003e4 	andeq	r0, r0, r4, ror #7
    1030:	09030003 	stmdbeq	r3, {r0, r1}
    1034:	06000006 	streq	r0, [r0], -r6
    1038:	0003f04a 	andeq	pc, r3, sl, asr #32
    103c:	07e51500 	strbeq	r1, [r5, r0, lsl #10]!
    1040:	76010000 	strvc	r0, [r1], -r0
    1044:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
    1048:	00000024 	andeq	r0, r0, r4, lsr #32
    104c:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xc01
    1050:	4f160000 	svcmi	0x00160000
    1054:	01000006 	tsteq	r0, r6
    1058:	0000a276 	andeq	sl, r0, r6, ror r2
    105c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1060:	06621500 	strbteq	r1, [r2], -r0, lsl #10
    1064:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1068:	080014a8 	stmdaeq	r0, {r3, r5, r7, sl, ip}
    106c:	000000bc 	strheq	r0, [r0], -ip
    1070:	04a69c01 	strteq	r9, [r6], #3073	; 0xc01
    1074:	3f160000 	svccc	0x00160000
    1078:	01000006 	tsteq	r0, r6
    107c:	0004a688 	andeq	sl, r4, r8, lsl #13
    1080:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1084:	00074717 	andeq	r4, r7, r7, lsl r7
    1088:	8c8a0100 	stfhis	f0, [sl], {0}
    108c:	02000000 	andeq	r0, r0, #0
    1090:	6c177791 	ldcvs	7, cr7, [r7], {145}	; 0x91
    1094:	01000006 	tsteq	r0, r6
    1098:	00008c8a 	andeq	r8, r0, sl, lsl #25
    109c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    10a0:	00070717 	andeq	r0, r7, r7, lsl r7
    10a4:	8c8a0100 	stfhis	f0, [sl], {0}
    10a8:	02000000 	andeq	r0, r0, #0
    10ac:	18007591 	stmdane	r0, {r0, r4, r7, r8, sl, ip, sp, lr}
    10b0:	00042904 	andeq	r2, r4, r4, lsl #18
    10b4:	069c1500 	ldreq	r1, [ip], r0, lsl #10
    10b8:	b4010000 	strlt	r0, [r1], #-0
    10bc:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
    10c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c4:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
    10c8:	bf160000 	svclt	0x00160000
    10cc:	01000007 	tsteq	r0, r7
    10d0:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
    10d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10d8:	0029e916 	eoreq	lr, r9, r6, lsl r9
    10dc:	a2b40100 	adcsge	r0, r4, #0, 2
    10e0:	02000000 	andeq	r0, r0, #0
    10e4:	15007091 	strne	r7, [r0, #-145]	; 0x91
    10e8:	0000070e 	andeq	r0, r0, lr, lsl #14
    10ec:	1590c701 	ldrne	ip, [r0, #1793]	; 0x701
    10f0:	00400800 	subeq	r0, r0, r0, lsl #16
    10f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f8:	00000510 	andeq	r0, r0, r0, lsl r5
    10fc:	0007d116 	andeq	sp, r7, r6, lsl r1
    1100:	8cc70100 	stfhie	f0, [r7], {0}
    1104:	02000000 	andeq	r0, r0, #0
    1108:	78167791 	ldmdavc	r6, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    110c:	01000006 	tsteq	r0, r6
    1110:	0003e4c7 	andeq	lr, r3, r7, asr #9
    1114:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1118:	07221500 	streq	r1, [r2, -r0, lsl #10]!
    111c:	df010000 	svcle	0x00010000
    1120:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
    1124:	00000038 	andeq	r0, r0, r8, lsr r0
    1128:	05349c01 	ldreq	r9, [r4, #-3073]!	; 0xc01
    112c:	2d160000 	ldccs	0, cr0, [r6, #-0]
    1130:	01000006 	tsteq	r0, r6
    1134:	0000a2df 	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
    1138:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    113c:	015e1900 	cmpeq	lr, r0, lsl #18
    1140:	a7040000 	strge	r0, [r4, -r0]
    1144:	0003c906 	andeq	ip, r3, r6, lsl #18
    1148:	06050000 	streq	r0, [r5], -r0
    114c:	00040000 	andeq	r0, r4, r0
    1150:	000004e1 	andeq	r0, r0, r1, ror #9
    1154:	00210104 	eoreq	r0, r1, r4, lsl #2
    1158:	b6010000 	strlt	r0, [r1], -r0
    115c:	1400000a 	strne	r0, [r0], #-10
    1160:	c8000001 	stmdagt	r0, {r0}
    1164:	00000000 	andeq	r0, r0, r0
    1168:	c6000000 	strgt	r0, [r0], -r0
    116c:	02000007 	andeq	r0, r0, #7
    1170:	014d0601 	cmpeq	sp, r1, lsl #12
    1174:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    1178:	02000002 	andeq	r0, r0, #2
    117c:	0000371d 	andeq	r3, r0, sp, lsl r7
    1180:	08010200 	stmdaeq	r1, {r9}
    1184:	0000014b 	andeq	r0, r0, fp, asr #2
    1188:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    118c:	03000001 	movweq	r0, #1
    1190:	00000438 	andeq	r0, r0, r8, lsr r4
    1194:	00502b02 	subseq	r2, r0, r2, lsl #22
    1198:	02020000 	andeq	r0, r2, #0
    119c:	00000e07 	andeq	r0, r0, r7, lsl #28
    11a0:	01770300 	cmneq	r7, r0, lsl #6
    11a4:	3f020000 	svccc	0x00020000
    11a8:	00000062 	andeq	r0, r0, r2, rrx
    11ac:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    11b0:	03000000 	movweq	r0, #0
    11b4:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    11b8:	00744102 	rsbseq	r4, r4, r2, lsl #2
    11bc:	04020000 	streq	r0, [r2], #-0
    11c0:	00012e07 	andeq	r2, r1, r7, lsl #28
    11c4:	05080200 	streq	r0, [r8, #-512]	; 0x200
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	29070802 	stmdbcs	r7, {r1, fp}
    11d0:	04000001 	streq	r0, [r0], #-1
    11d4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11d8:	04020074 	streq	r0, [r2], #-116	; 0x74
    11dc:	00013307 	andeq	r3, r1, r7, lsl #6
    11e0:	02700300 	rsbseq	r0, r0, #0, 6
    11e4:	2a030000 	bcs	c11ec <_Min_Stack_Size+0xc0dec>
    11e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    11ec:	00043a03 	andeq	r3, r4, r3, lsl #20
    11f0:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    11f4:	03000000 	movweq	r0, #0
    11f8:	00000179 	andeq	r0, r0, r9, ror r1
    11fc:	00574103 	subseq	r4, r7, r3, lsl #2
    1200:	b6030000 	strlt	r0, [r3], -r0
    1204:	03000005 	movweq	r0, #5
    1208:	00006942 	andeq	r6, r0, r2, asr #18
    120c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1210:	00000191 	muleq	r0, r1, r1
    1214:	0000b805 	andeq	fp, r0, r5, lsl #16
    1218:	00b80600 	adcseq	r0, r8, r0, lsl #12
    121c:	00df0000 	sbcseq	r0, pc, r0
    1220:	c3070000 	movwgt	r0, #28672	; 0x7000
    1224:	01000000 	mrseq	r0, (UNDEF: 0)
    1228:	00a20500 	adceq	r0, r2, r0, lsl #10
    122c:	ad050000 	stcge	0, cr0, [r5, #-0]
    1230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1234:	01f90401 	mvnseq	r0, r1, lsl #8
    1238:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    123c:	00068609 	andeq	r8, r6, r9, lsl #12
    1240:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    1244:	01000007 	tsteq	r0, r7
    1248:	04280a00 	strteq	r0, [r8], #-2560	; 0xa00
    124c:	018b03d4 	ldrdeq	r0, [fp, r4]
    1250:	390b0000 	stmdbcc	fp, {}	; <UNPREDICTABLE>
    1254:	04000009 	streq	r0, [r0], #-9
    1258:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    125c:	0b000000 	bleq	1264 <_Min_Stack_Size+0xe64>
    1260:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1264:	ca03d704 	bgt	f6e7c <_Min_Stack_Size+0xf6a7c>
    1268:	04000000 	streq	r0, [r0], #-0
    126c:	000a150b 	andeq	r1, sl, fp, lsl #10
    1270:	03d80400 	bicseq	r0, r8, #0, 8
    1274:	000000ca 	andeq	r0, r0, sl, asr #1
    1278:	09140b08 	ldmdbeq	r4, {r3, r8, r9, fp}
    127c:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    1280:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1284:	490c0c00 	stmdbmi	ip, {sl, fp}
    1288:	04005244 	streq	r5, [r0], #-580	; 0x244
    128c:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    1290:	0c100000 	ldceq	0, cr0, [r0], {-0}
    1294:	0052444f 	subseq	r4, r2, pc, asr #8
    1298:	ca03db04 	bgt	f7eb0 <_Min_Stack_Size+0xf7ab0>
    129c:	14000000 	strne	r0, [r0], #-0
    12a0:	000b070b 	andeq	r0, fp, fp, lsl #14
    12a4:	03dc0400 	bicseq	r0, ip, #0, 8
    12a8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    12ac:	09330b18 	ldmdbeq	r3!, {r3, r4, r8, r9, fp}
    12b0:	dd040000 	stcle	0, cr0, [r4, #-0]
    12b4:	0000df03 	andeq	sp, r0, r3, lsl #30
    12b8:	e80b1a00 	stmda	fp, {r9, fp, ip}
    12bc:	04000008 	streq	r0, [r0], #-8
    12c0:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    12c4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    12c8:	00524641 	subseq	r4, r2, r1, asr #12
    12cc:	8b03df04 	blhi	f8ee4 <_Min_Stack_Size+0xf8ae4>
    12d0:	20000001 	andcs	r0, r0, r1
    12d4:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    12d8:	fe0d0000 	cdp2	0, 0, cr0, cr13, cr0, {0}
    12dc:	04000007 	streq	r0, [r0], #-7
    12e0:	00ff03e0 	rscseq	r0, pc, r0, ror #7
    12e4:	010e0000 	mrseq	r0, (UNDEF: 14)
    12e8:	01bd4205 			; <UNDEFINED> instruction: 0x01bd4205
    12ec:	1a090000 	bne	2412f4 <_Min_Stack_Size+0x240ef4>
    12f0:	00000009 	andeq	r0, r0, r9
    12f4:	00090609 	andeq	r0, r9, r9, lsl #12
    12f8:	9d090100 	stflss	f0, [r9, #-0]
    12fc:	02000008 	andeq	r0, r0, #8
    1300:	0008cc09 	andeq	ip, r8, r9, lsl #24
    1304:	03000300 	movweq	r0, #768	; 0x300
    1308:	00000837 	andeq	r0, r0, r7, lsr r8
    130c:	019c4705 	orrseq	r4, ip, r5, lsl #14
    1310:	010e0000 	mrseq	r0, (UNDEF: 14)
    1314:	01dd4f05 	bicseq	r4, sp, r5, lsl #30
    1318:	55090000 	strpl	r0, [r9, #-0]
    131c:	00000009 	andeq	r0, r0, r9
    1320:	00086c09 	andeq	r6, r8, r9, lsl #24
    1324:	03000100 	movweq	r0, #256	; 0x100
    1328:	000008ed 	andeq	r0, r0, sp, ror #17
    132c:	01c85205 	biceq	r5, r8, r5, lsl #4
    1330:	010e0000 	mrseq	r0, (UNDEF: 14)
    1334:	02095a05 	andeq	r5, r9, #20480	; 0x5000
    1338:	f4090000 	vst4.8	{d0-d3}, [r9], r0
    133c:	00000009 	andeq	r0, r0, r9
    1340:	000a0309 	andeq	r0, sl, r9, lsl #6
    1344:	b1090100 	mrslt	r0, (UNDEF: 25)
    1348:	02000009 	andeq	r0, r0, #9
    134c:	000a7709 	andeq	r7, sl, r9, lsl #14
    1350:	03000300 	movweq	r0, #768	; 0x300
    1354:	00000a1d 	andeq	r0, r0, sp, lsl sl
    1358:	01e85f05 	mvneq	r5, r5, lsl #30
    135c:	010e0000 	mrseq	r0, (UNDEF: 14)
    1360:	022f6e05 	eoreq	r6, pc, #5, 28	; 0x50
    1364:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    1368:	0000000a 	andeq	r0, r0, sl
    136c:	000a9809 	andeq	r9, sl, r9, lsl #16
    1370:	2f090100 	svccs	0x00090100
    1374:	0200000a 	andeq	r0, r0, #10
    1378:	0a870300 	beq	fe1c1f80 <_estack+0xde191f80>
    137c:	72050000 	andvc	r0, r5, #0
    1380:	00000214 	andeq	r0, r0, r4, lsl r2
    1384:	7a05010e 	bvc	1417c4 <_Min_Stack_Size+0x1413c4>
    1388:	0000024f 	andeq	r0, r0, pc, asr #4
    138c:	00087a09 	andeq	r7, r8, r9, lsl #20
    1390:	1b090000 	blne	241398 <_Min_Stack_Size+0x240f98>
    1394:	01000008 	tsteq	r0, r8
    1398:	09d40300 	ldmibeq	r4, {r8, r9}^
    139c:	7d050000 	stcvc	0, cr0, [r5, #-0]
    13a0:	0000023a 	andeq	r0, r0, sl, lsr r2
    13a4:	8405080f 	strhi	r0, [r5], #-2063	; 0x80f
    13a8:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    13ac:	00081210 	andeq	r1, r8, r0, lsl r2
    13b0:	b8860500 	stmlt	r6, {r8, sl}
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	000b2410 	andeq	r2, fp, r0, lsl r4
    13bc:	bd890500 	cfstr32lt	mvfx0, [r9]
    13c0:	04000001 	streq	r0, [r0], #-1
    13c4:	0008b710 	andeq	fp, r8, r0, lsl r7
    13c8:	098c0500 	stmibeq	ip, {r8, sl}
    13cc:	05000002 	streq	r0, [r0, #-2]
    13d0:	00089210 	andeq	r9, r8, r0, lsl r2
    13d4:	dd8f0500 	cfstr32le	mvfx0, [pc]	; 13dc <_Min_Stack_Size+0xfdc>
    13d8:	06000001 	streq	r0, [r0], -r1
    13dc:	00096d10 	andeq	r6, r9, r0, lsl sp
    13e0:	2f920500 	svccs	0x00920500
    13e4:	07000002 	streq	r0, [r0, -r2]
    13e8:	0a660300 	beq	1981ff0 <_Min_Stack_Size+0x1981bf0>
    13ec:	94050000 	strls	r0, [r5], #-0
    13f0:	0000025a 	andeq	r0, r0, sl, asr r2
    13f4:	00092711 	andeq	r2, r9, r1, lsl r7
    13f8:	087f0100 	ldmdaeq	pc!, {r8}^	; <UNPREDICTABLE>
    13fc:	64080016 	strvs	r0, [r8], #-22
    1400:	01000001 	tsteq	r0, r1
    1404:	0002ce9c 	muleq	r2, ip, lr
    1408:	17751200 	ldrbne	r1, [r5, -r0, lsl #4]!
    140c:	7f010000 	svcvc	0x00010000
    1410:	000002ce 	andeq	r0, r0, lr, asr #5
    1414:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1418:	01900413 	orrseq	r0, r0, r3, lsl r4
    141c:	c2140000 	andsgt	r0, r4, #0
    1420:	01000008 	tsteq	r0, r8
    1424:	00176cca 	andseq	r6, r7, sl, asr #25
    1428:	00011a08 	andeq	r1, r1, r8, lsl #20
    142c:	309c0100 	addscc	r0, ip, r0, lsl #2
    1430:	12000003 	andne	r0, r0, #3
    1434:	00001775 	andeq	r1, r0, r5, ror r7
    1438:	02ceca01 	sbceq	ip, lr, #4096	; 0x1000
    143c:	91020000 	mrsls	r0, (UNDEF: 2)
    1440:	09771264 	ldmdbeq	r7!, {r2, r5, r6, r9, ip}^
    1444:	ca010000 	bgt	4144c <_Min_Stack_Size+0x4104c>
    1448:	00000330 	andeq	r0, r0, r0, lsr r3
    144c:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    1450:	0000080b 	andeq	r0, r0, fp, lsl #16
    1454:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    1458:	91020000 	mrsls	r0, (UNDEF: 2)
    145c:	6f701674 	svcvs	0x00701674
    1460:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    1464:	000000b8 	strheq	r0, [r0], -r8
    1468:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    146c:	000009de 	ldrdeq	r0, [r0], -lr
    1470:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    1474:	91020000 	mrsls	r0, (UNDEF: 2)
    1478:	0413006c 	ldreq	r0, [r3], #-108	; 0x6c
    147c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1480:	00085514 	andeq	r5, r8, r4, lsl r5
    1484:	88fe0100 	ldmhi	lr!, {r8}^
    1488:	32080018 	andcc	r0, r8, #24
    148c:	01000000 	mrseq	r0, (UNDEF: 0)
    1490:	00035a9c 	muleq	r3, ip, sl
    1494:	09771200 	ldmdbeq	r7!, {r9, ip}^
    1498:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    149c:	00000330 	andeq	r0, r0, r0, lsr r3
    14a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14a4:	0009c117 	andeq	ip, r9, r7, lsl r1
    14a8:	01150100 	tsteq	r5, r0, lsl #2
    14ac:	080018bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip}
    14b0:	00000042 	andeq	r0, r0, r2, asr #32
    14b4:	039e9c01 	orrseq	r9, lr, #256	; 0x100
    14b8:	75180000 	ldrvc	r0, [r8, #-0]
    14bc:	01000017 	tsteq	r0, r7, lsl r0
    14c0:	02ce0115 	sbceq	r0, lr, #1073741829	; 0x40000005
    14c4:	91020000 	mrsls	r0, (UNDEF: 2)
    14c8:	0812186c 	ldmdaeq	r2, {r2, r3, r5, r6, fp, ip}
    14cc:	15010000 	strne	r0, [r1, #-0]
    14d0:	0000a201 	andeq	sl, r0, r1, lsl #4
    14d4:	6a910200 	bvs	fe441cdc <_estack+0xde411cdc>
    14d8:	706d7419 	rsbvc	r7, sp, r9, lsl r4
    14dc:	01170100 	tsteq	r7, r0, lsl #2
    14e0:	000000ca 	andeq	r0, r0, sl, asr #1
    14e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    14e8:	00093f1a 	andeq	r3, r9, sl, lsl pc
    14ec:	01430100 	mrseq	r0, (UNDEF: 83)
    14f0:	00000097 	muleq	r0, r7, r0
    14f4:	08001900 	stmdaeq	r0, {r8, fp, ip}
    14f8:	00000034 	andeq	r0, r0, r4, lsr r0
    14fc:	03e69c01 	mvneq	r9, #256	; 0x100
    1500:	75180000 	ldrvc	r0, [r8, #-0]
    1504:	01000017 	tsteq	r0, r7, lsl r0
    1508:	02ce0143 	sbceq	r0, lr, #-1073741808	; 0xc0000010
    150c:	91020000 	mrsls	r0, (UNDEF: 2)
    1510:	0812186c 	ldmdaeq	r2, {r2, r3, r5, r6, fp, ip}
    1514:	43010000 	movwmi	r0, #4096	; 0x1000
    1518:	0000a201 	andeq	sl, r0, r1, lsl #4
    151c:	6a910200 	bvs	fe441d24 <_estack+0xde411d24>
    1520:	0009631b 	andeq	r6, r9, fp, lsl r3
    1524:	01450100 	mrseq	r0, (UNDEF: 85)
    1528:	00000097 	muleq	r0, r7, r0
    152c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1530:	00099e1a 	andeq	r9, r9, sl, lsl lr
    1534:	015d0100 	cmpeq	sp, r0, lsl #2
    1538:	000000a2 	andeq	r0, r0, r2, lsr #1
    153c:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
    1540:	0000001a 	andeq	r0, r0, sl, lsl r0
    1544:	04109c01 	ldreq	r9, [r0], #-3073	; 0xc01
    1548:	75180000 	ldrvc	r0, [r8, #-0]
    154c:	01000017 	tsteq	r0, r7, lsl r0
    1550:	02ce015d 	sbceq	r0, lr, #1073741847	; 0x40000017
    1554:	91020000 	mrsls	r0, (UNDEF: 2)
    1558:	0d1a0074 	ldceq	0, cr0, [sl, #-464]	; 0xfffffe30
    155c:	0100000b 	tsteq	r0, fp
    1560:	0097016e 	addseq	r0, r7, lr, ror #2
    1564:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    1568:	00340800 	eorseq	r0, r4, r0, lsl #16
    156c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1570:	00000458 	andeq	r0, r0, r8, asr r4
    1574:	00177518 	andseq	r7, r7, r8, lsl r5
    1578:	016e0100 	cmneq	lr, r0, lsl #2
    157c:	000002ce 	andeq	r0, r0, lr, asr #5
    1580:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1584:	00000812 	andeq	r0, r0, r2, lsl r8
    1588:	a2016e01 	andge	r6, r1, #1, 28
    158c:	02000000 	andeq	r0, r0, #0
    1590:	631b6a91 	tstvs	fp, #593920	; 0x91000
    1594:	01000009 	tsteq	r0, r9
    1598:	00970170 	addseq	r0, r7, r0, ror r1
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	231a0077 	tstcs	sl, #119	; 0x77
    15a4:	01000008 	tsteq	r0, r8
    15a8:	00a20188 	adceq	r0, r2, r8, lsl #3
    15ac:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    15b0:	001a0800 	andseq	r0, sl, r0, lsl #16
    15b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b8:	00000482 	andeq	r0, r0, r2, lsl #9
    15bc:	00177518 	andseq	r7, r7, r8, lsl r5
    15c0:	01880100 	orreq	r0, r8, r0, lsl #2
    15c4:	000002ce 	andeq	r0, r0, lr, asr #5
    15c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    15cc:	0008aa17 	andeq	sl, r8, r7, lsl sl
    15d0:	019c0100 	orrseq	r0, ip, r0, lsl #2
    15d4:	080019a0 	stmdaeq	r0, {r5, r7, r8, fp, ip}
    15d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    15dc:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    15e0:	75180000 	ldrvc	r0, [r8, #-0]
    15e4:	01000017 	tsteq	r0, r7, lsl r0
    15e8:	02ce019c 	sbceq	r0, lr, #156, 2	; 0x27
    15ec:	91020000 	mrsls	r0, (UNDEF: 2)
    15f0:	08121874 	ldmdaeq	r2, {r2, r4, r5, r6, fp, ip}
    15f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15f8:	0000a201 	andeq	sl, r0, r1, lsl #4
    15fc:	72910200 	addsvc	r0, r1, #0, 4
    1600:	08d91700 	ldmeq	r9, {r8, r9, sl, ip}^
    1604:	b1010000 	mrslt	r0, (UNDEF: 1)
    1608:	0019bc01 	andseq	fp, r9, r1, lsl #24
    160c:	00001c08 	andeq	r1, r0, r8, lsl #24
    1610:	ec9c0100 	ldfs	f0, [ip], {0}
    1614:	18000004 	stmdane	r0, {r2}
    1618:	00001775 	andeq	r1, r0, r5, ror r7
    161c:	ce01b101 	mvfgts	f3, f1
    1620:	02000002 	andeq	r0, r0, #2
    1624:	12187491 	andsne	r7, r8, #-1862270976	; 0x91000000
    1628:	01000008 	tsteq	r0, r8
    162c:	00a201b1 	strhteq	r0, [r2], r1
    1630:	91020000 	mrsls	r0, (UNDEF: 2)
    1634:	84170072 	ldrhi	r0, [r7], #-114	; 0x72
    1638:	01000008 	tsteq	r0, r8
    163c:	19d801c7 	ldmibne	r8, {r0, r1, r2, r6, r7, r8}^
    1640:	002e0800 	eoreq	r0, lr, r0, lsl #16
    1644:	9c010000 	stcls	0, cr0, [r1], {-0}
    1648:	00000530 	andeq	r0, r0, r0, lsr r5
    164c:	00177518 	andseq	r7, r7, r8, lsl r5
    1650:	01c70100 	biceq	r0, r7, r0, lsl #2
    1654:	000002ce 	andeq	r0, r0, lr, asr #5
    1658:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    165c:	00000812 	andeq	r0, r0, r2, lsl r8
    1660:	a201c701 	andge	ip, r1, #262144	; 0x40000
    1664:	02000000 	andeq	r0, r0, #0
    1668:	65187291 	ldrvs	r7, [r8, #-657]	; 0x291
    166c:	01000008 	tsteq	r0, r8
    1670:	024f01c7 	subeq	r0, pc, #-1073741775	; 0xc0000031
    1674:	91020000 	mrsls	r0, (UNDEF: 2)
    1678:	e9170071 	ldmdb	r7, {r0, r4, r5, r6}
    167c:	01000009 	tsteq	r0, r9
    1680:	1a0801e0 	bne	201e08 <_Min_Stack_Size+0x201a08>
    1684:	001c0800 	andseq	r0, ip, r0, lsl #16
    1688:	9c010000 	stcls	0, cr0, [r1], {-0}
    168c:	00000565 	andeq	r0, r0, r5, ror #10
    1690:	00177518 	andseq	r7, r7, r8, lsl r5
    1694:	01e00100 	mvneq	r0, r0, lsl #2
    1698:	000002ce 	andeq	r0, r0, lr, asr #5
    169c:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    16a0:	00000987 	andeq	r0, r0, r7, lsl #19
    16a4:	a201e001 	andge	lr, r1, #1
    16a8:	02000000 	andeq	r0, r0, #0
    16ac:	17007291 			; <UNDEFINED> instruction: 0x17007291
    16b0:	00000a4f 	andeq	r0, r0, pc, asr #20
    16b4:	2401f001 	strcs	pc, [r1], #-1
    16b8:	2208001a 	andcs	r0, r8, #26
    16bc:	01000000 	mrseq	r0, (UNDEF: 0)
    16c0:	00059a9c 	muleq	r5, ip, sl
    16c4:	17751800 	ldrbne	r1, [r5, -r0, lsl #16]!
    16c8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    16cc:	0002ce01 	andeq	ip, r2, r1, lsl #28
    16d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16d4:	00081218 	andeq	r1, r8, r8, lsl r2
    16d8:	01f00100 	mvnseq	r0, r0, lsl #2
    16dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    16e0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    16e4:	000aa517 	andeq	sl, sl, r7, lsl r5
    16e8:	02430100 	subeq	r0, r3, #0, 2
    16ec:	08001a48 	stmdaeq	r0, {r3, r6, r9, fp, ip}
    16f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    16f4:	05fc9c01 	ldrbeq	r9, [ip, #3073]!	; 0xc01
    16f8:	75180000 	ldrvc	r0, [r8, #-0]
    16fc:	01000017 	tsteq	r0, r7, lsl r0
    1700:	02ce0243 	sbceq	r0, lr, #805306372	; 0x30000004
    1704:	91020000 	mrsls	r0, (UNDEF: 2)
    1708:	098f186c 	stmibeq	pc, {r2, r3, r5, r6, fp, ip}	; <UNPREDICTABLE>
    170c:	43010000 	movwmi	r0, #4096	; 0x1000
    1710:	0000a202 	andeq	sl, r0, r2, lsl #4
    1714:	6a910200 	bvs	fe441f1c <_estack+0xde411f1c>
    1718:	00084818 	andeq	r4, r8, r8, lsl r8
    171c:	02430100 	subeq	r0, r3, #0, 2
    1720:	00000097 	muleq	r0, r7, r0
    1724:	1b699102 	blne	1a65b34 <_Min_Stack_Size+0x1a65734>
    1728:	00000850 	andeq	r0, r0, r0, asr r8
    172c:	b8024501 	stmdalt	r2, {r0, r8, sl, lr}
    1730:	02000000 	andeq	r0, r0, #0
    1734:	5f1b7491 	svcpl	0x001b7491
    1738:	0100000a 	tsteq	r0, sl
    173c:	00b80246 	adcseq	r0, r8, r6, asr #4
    1740:	91020000 	mrsls	r0, (UNDEF: 2)
    1744:	5e1c0070 	mrcpl	0, 0, r0, cr12, cr0, {3}
    1748:	06000001 	streq	r0, [r0], -r1
    174c:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    1750:	11000000 	mrsne	r0, (UNDEF: 0)
    1754:	0400000e 	streq	r0, [r0], #-14
    1758:	00068600 	andeq	r8, r6, r0, lsl #12
    175c:	21010400 	tstcs	r1, r0, lsl #8
    1760:	01000000 	mrseq	r0, (UNDEF: 0)
    1764:	000010c2 	andeq	r1, r0, r2, asr #1
    1768:	00000114 	andeq	r0, r0, r4, lsl r1
    176c:	00000140 	andeq	r0, r0, r0, asr #2
    1770:	00000000 	andeq	r0, r0, r0
    1774:	00000ac2 	andeq	r0, r0, r2, asr #21
    1778:	4d060102 	stfmis	f0, [r6, #-8]
    177c:	03000001 	movweq	r0, #1
    1780:	0000026e 	andeq	r0, r0, lr, ror #4
    1784:	00371d02 	eorseq	r1, r7, r2, lsl #26
    1788:	01020000 	mrseq	r0, (UNDEF: 2)
    178c:	00014b08 	andeq	r4, r1, r8, lsl #22
    1790:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1794:	00000187 	andeq	r0, r0, r7, lsl #3
    1798:	00043803 	andeq	r3, r4, r3, lsl #16
    179c:	502b0200 	eorpl	r0, fp, r0, lsl #4
    17a0:	02000000 	andeq	r0, r0, #0
    17a4:	000e0702 	andeq	r0, lr, r2, lsl #14
    17a8:	77030000 	strvc	r0, [r3, -r0]
    17ac:	02000001 	andeq	r0, r0, #1
    17b0:	0000623f 	andeq	r6, r0, pc, lsr r2
    17b4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    17b8:	00000005 	andeq	r0, r0, r5
    17bc:	0005b403 	andeq	fp, r5, r3, lsl #8
    17c0:	74410200 	strbvc	r0, [r1], #-512	; 0x200
    17c4:	02000000 	andeq	r0, r0, #0
    17c8:	012e0704 	teqeq	lr, r4, lsl #14
    17cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17d0:	00000005 	andeq	r0, r0, r5
    17d4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    17d8:	00000129 	andeq	r0, r0, r9, lsr #2
    17dc:	69050404 	stmdbvs	r5, {r2, sl}
    17e0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    17e4:	01330704 	teqeq	r3, r4, lsl #14
    17e8:	70030000 	andvc	r0, r3, r0
    17ec:	03000002 	movweq	r0, #2
    17f0:	00002c2a 	andeq	r2, r0, sl, lsr #24
    17f4:	043a0300 	ldrteq	r0, [sl], #-768	; 0x300
    17f8:	36030000 	strcc	r0, [r3], -r0
    17fc:	00000045 	andeq	r0, r0, r5, asr #32
    1800:	00017903 	andeq	r7, r1, r3, lsl #18
    1804:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    1808:	03000000 	movweq	r0, #0
    180c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    1810:	00694203 	rsbeq	r4, r9, r3, lsl #4
    1814:	04020000 	streq	r0, [r2], #-0
    1818:	00019107 	andeq	r9, r1, r7, lsl #2
    181c:	00b80500 	adcseq	r0, r8, r0, lsl #10
    1820:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    1824:	df000000 	svcle	0x00000000
    1828:	07000000 	streq	r0, [r0, -r0]
    182c:	000000c3 	andeq	r0, r0, r3, asr #1
    1830:	ad050001 	stcge	0, cr0, [r5, #-4]
    1834:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1838:	01f70401 	mvnseq	r0, r1, lsl #8
    183c:	000000fa 	strdeq	r0, [r0], -sl
    1840:	00087e09 	andeq	r7, r8, r9, lsl #28
    1844:	530a0000 	movwpl	r0, #40960	; 0xa000
    1848:	01005445 	tsteq	r0, r5, asr #8
    184c:	1e880b00 	vdivne.f64	d0, d8, d0
    1850:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    1854:	0000e401 	andeq	lr, r0, r1, lsl #8
    1858:	4dd60b00 	vldrmi	d16, [r6]
    185c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    1860:	0000e401 	andeq	lr, r0, r1, lsl #8
    1864:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1868:	012801f9 	strdeq	r0, [r8, -r9]!
    186c:	86090000 	strhi	r0, [r9], -r0
    1870:	00000006 	andeq	r0, r0, r6
    1874:	0007de09 	andeq	sp, r7, r9, lsl #28
    1878:	0b000100 	bleq	1c80 <_Min_Stack_Size+0x1880>
    187c:	000007af 	andeq	r0, r0, pc, lsr #15
    1880:	1201f904 	andne	pc, r1, #4, 18	; 0x10000
    1884:	08000001 	stmdaeq	r0, {r0}
    1888:	01fc0401 	mvnseq	r0, r1, lsl #8
    188c:	0000014a 	andeq	r0, r0, sl, asr #2
    1890:	004fb409 	subeq	fp, pc, r9, lsl #8
    1894:	76090000 	strvc	r0, [r9], -r0
    1898:	01000011 	tsteq	r0, r1, lsl r0
    189c:	0d020b00 	vstreq	d0, [r2, #-0]
    18a0:	fc040000 	stc2	0, cr0, [r4], {-0}
    18a4:	00013401 	andeq	r3, r1, r1, lsl #8
    18a8:	04900c00 	ldreq	r0, [r0], #3072	; 0xc00
    18ac:	02ff0455 	rscseq	r0, pc, #1426063360	; 0x55000000
    18b0:	430d0000 	movwmi	r0, #53248	; 0xd000
    18b4:	57040052 	smlsdpl	r4, r2, r0, r0
    18b8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    18bc:	c80e0000 	stmdagt	lr, {}	; <UNPREDICTABLE>
    18c0:	04000003 	streq	r0, [r0], #-3
    18c4:	00ca0458 	sbceq	r0, sl, r8, asr r4
    18c8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    18cc:	000005e9 	andeq	r0, r0, r9, ror #11
    18d0:	ca045904 	bgt	117ce8 <_Min_Stack_Size+0x1178e8>
    18d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18d8:	5249430d 	subpl	r4, r9, #872415232	; 0x34000000
    18dc:	045a0400 	ldrbeq	r0, [sl], #-1024	; 0x400
    18e0:	000000ca 	andeq	r0, r0, sl, asr #1
    18e4:	04590e0c 	ldrbeq	r0, [r9], #-3596	; 0xe0c
    18e8:	5b040000 	blpl	1018f0 <_Min_Stack_Size+0x1014f0>
    18ec:	0000ca04 	andeq	ip, r0, r4, lsl #20
    18f0:	e10e1000 	mrs	r1, (UNDEF: 14)
    18f4:	04000003 	streq	r0, [r0], #-3
    18f8:	00ca045c 	sbceq	r0, sl, ip, asr r4
    18fc:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1900:	000005cc 	andeq	r0, r0, ip, asr #11
    1904:	ca045d04 	bgt	118d1c <_Min_Stack_Size+0x11891c>
    1908:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    190c:	00056c0e 	andeq	r6, r5, lr, lsl #24
    1910:	045e0400 	ldrbeq	r0, [lr], #-1024	; 0x400
    1914:	000000b8 	strheq	r0, [r0], -r8
    1918:	03d00e1c 	bicseq	r0, r0, #28, 28	; 0x1c0
    191c:	5f040000 	svcpl	0x00040000
    1920:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1924:	ad0e2000 	stcge	0, cr2, [lr, #-0]
    1928:	04000004 	streq	r0, [r0], #-4
    192c:	00ca0460 	sbceq	r0, sl, r0, ror #8
    1930:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    1934:	00000576 	andeq	r0, r0, r6, ror r5
    1938:	cf046104 	svcgt	0x00046104
    193c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1940:	0005bf0e 	andeq	fp, r5, lr, lsl #30
    1944:	04620400 	strbteq	r0, [r2], #-1024	; 0x400
    1948:	000000ca 	andeq	r0, r0, sl, asr #1
    194c:	03d90e30 	bicseq	r0, r9, #48, 28	; 0x300
    1950:	63040000 	movwvs	r0, #16384	; 0x4000
    1954:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1958:	cc0e3400 	cfstrsgt	mvf3, [lr], {-0}
    195c:	04000004 	streq	r0, [r0], #-4
    1960:	00ca0464 	sbceq	r0, sl, r4, ror #8
    1964:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    1968:	00000580 	andeq	r0, r0, r0, lsl #11
    196c:	b8046504 	stmdalt	r4, {r2, r8, sl, sp, lr}
    1970:	3c000000 	stccc	0, cr0, [r0], {-0}
    1974:	00047f0e 	andeq	r7, r4, lr, lsl #30
    1978:	04660400 	strbteq	r0, [r6], #-1024	; 0x400
    197c:	000000ca 	andeq	r0, r0, sl, asr #1
    1980:	04e40e40 	strbteq	r0, [r4], #3648	; 0xe40
    1984:	67040000 	strvs	r0, [r4, -r0]
    1988:	0000ca04 	andeq	ip, r0, r4, lsl #20
    198c:	6c0e4400 	cfstrsvs	mvf4, [lr], {-0}
    1990:	04000004 	streq	r0, [r0], #-4
    1994:	00cf0468 	sbceq	r0, pc, r8, ror #8
    1998:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    199c:	000003be 			; <UNDEFINED> instruction: 0x000003be
    19a0:	ca046904 	bgt	11bdb8 <_Min_Stack_Size+0x11b9b8>
    19a4:	50000000 	andpl	r0, r0, r0
    19a8:	00055d0e 	andeq	r5, r5, lr, lsl #26
    19ac:	046a0400 	strbteq	r0, [sl], #-1024	; 0x400
    19b0:	000000ca 	andeq	r0, r0, sl, asr #1
    19b4:	04620e54 	strbteq	r0, [r2], #-3668	; 0xe54
    19b8:	6b040000 	blvs	1019c0 <_Min_Stack_Size+0x1015c0>
    19bc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    19c0:	960e5800 	strls	r5, [lr], -r0, lsl #16
    19c4:	04000005 	streq	r0, [r0], #-5
    19c8:	00b8046c 	adcseq	r0, r8, ip, ror #8
    19cc:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    19d0:	00000528 	andeq	r0, r0, r8, lsr #10
    19d4:	ca046d04 	bgt	11cdec <_Min_Stack_Size+0x11c9ec>
    19d8:	60000000 	andvs	r0, r0, r0
    19dc:	0005f40e 	andeq	pc, r5, lr, lsl #8
    19e0:	046e0400 	strbteq	r0, [lr], #-1024	; 0x400
    19e4:	000000ca 	andeq	r0, r0, sl, asr #1
    19e8:	05a00e64 	streq	r0, [r0, #3684]!	; 0xe64
    19ec:	6f040000 	svcvs	0x00040000
    19f0:	0000cf04 	andeq	ip, r0, r4, lsl #30
    19f4:	ea0e6800 	b	39b9fc <_Min_Stack_Size+0x39b5fc>
    19f8:	04000003 	streq	r0, [r0], #-3
    19fc:	00ca0470 	sbceq	r0, sl, r0, ror r4
    1a00:	0d700000 	ldcleq	0, cr0, [r0, #-0]
    1a04:	00525343 	subseq	r5, r2, r3, asr #6
    1a08:	ca047104 	bgt	11de20 <_Min_Stack_Size+0x11da20>
    1a0c:	74000000 	strvc	r0, [r0], #-0
    1a10:	0005aa0e 	andeq	sl, r5, lr, lsl #20
    1a14:	04720400 	ldrbteq	r0, [r2], #-1024	; 0x400
    1a18:	000000cf 	andeq	r0, r0, pc, asr #1
    1a1c:	04430e78 	strbeq	r0, [r3], #-3704	; 0xe78
    1a20:	73040000 	movwvc	r0, #16384	; 0x4000
    1a24:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1a28:	ef0e8000 	svc	0x000e8000
    1a2c:	04000003 	streq	r0, [r0], #-3
    1a30:	00ca0474 	sbceq	r0, sl, r4, ror r4
    1a34:	0e840000 	cdpeq	0, 8, cr0, cr4, cr0, {0}
    1a38:	000005e3 	andeq	r0, r0, r3, ror #11
    1a3c:	ca047504 	bgt	11ee54 <_Min_Stack_Size+0x11ea54>
    1a40:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1a44:	0004870e 	andeq	r8, r4, lr, lsl #14
    1a48:	04760400 	ldrbteq	r0, [r6], #-1024	; 0x400
    1a4c:	000000ca 	andeq	r0, r0, sl, asr #1
    1a50:	a10b008c 	smlabbge	fp, ip, r0, r0
    1a54:	04000004 	streq	r0, [r0], #-4
    1a58:	01560478 	cmpeq	r6, r8, ror r4
    1a5c:	100f0000 	andne	r0, pc, r0
    1a60:	03443005 	movteq	r3, #16389	; 0x4005
    1a64:	75100000 	ldrvc	r0, [r0, #-0]
    1a68:	0500000b 	streq	r0, [r0, #-11]
    1a6c:	0000b832 	andeq	fp, r0, r2, lsr r8
    1a70:	46100000 	ldrmi	r0, [r0], -r0
    1a74:	0500000d 	streq	r0, [r0, #-13]
    1a78:	0000b833 	andeq	fp, r0, r3, lsr r8
    1a7c:	e2100400 	ands	r0, r0, #0, 8
    1a80:	0500000f 	streq	r0, [r0, #-15]
    1a84:	0000b834 	andeq	fp, r0, r4, lsr r8
    1a88:	3c100800 	ldccc	8, cr0, [r0], {-0}
    1a8c:	0500000c 	streq	r0, [r0, #-12]
    1a90:	0000b835 	andeq	fp, r0, r5, lsr r8
    1a94:	03000c00 	movweq	r0, #3072	; 0xc00
    1a98:	0000118c 	andeq	r1, r0, ip, lsl #3
    1a9c:	030b3605 	movweq	r3, #46597	; 0xb605
    1aa0:	5c110000 	ldcpl	0, cr0, [r1], {-0}
    1aa4:	01000010 	tsteq	r0, r0, lsl r0
    1aa8:	001ad4d5 			; <UNDEFINED> instruction: 0x001ad4d5
    1aac:	00007008 	andeq	r7, r0, r8
    1ab0:	129c0100 	addsne	r0, ip, #0, 2
    1ab4:	00000f12 	andeq	r0, r0, r2, lsl pc
    1ab8:	44010801 	strmi	r0, [r1], #-2049	; 0x801
    1abc:	2408001b 	strcs	r0, [r8], #-27
    1ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac4:	0003869c 	muleq	r3, ip, r6
    1ac8:	0fda1300 	svceq	0x00da1300
    1acc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1ad0:	00009701 	andeq	r9, r0, r1, lsl #14
    1ad4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1ad8:	0d301400 	cfldrseq	mvf1, [r0, #-0]
    1adc:	20010000 	andcs	r0, r1, r0
    1ae0:	00014a01 	andeq	r4, r1, r1, lsl #20
    1ae4:	001b6800 	andseq	r6, fp, r0, lsl #16
    1ae8:	00005008 	andeq	r5, r0, r8
    1aec:	ce9c0100 	fmlgte	f0, f4, f0
    1af0:	15000003 	strne	r0, [r0, #-3]
    1af4:	000010a4 	andeq	r1, r0, r4, lsr #1
    1af8:	ca012201 	bgt	4a304 <_Min_Stack_Size+0x49f04>
    1afc:	02000000 	andeq	r0, r0, #0
    1b00:	04157091 	ldreq	r7, [r5], #-145	; 0x91
    1b04:	0100001b 	tsteq	r0, fp, lsl r0
    1b08:	014a0123 	cmpeq	sl, r3, lsr #2
    1b0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b10:	10211577 	eorne	r1, r1, r7, ror r5
    1b14:	24010000 	strcs	r0, [r1], #-0
    1b18:	0000fa01 	andeq	pc, r0, r1, lsl #20
    1b1c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1b20:	10031200 	andne	r1, r3, r0, lsl #4
    1b24:	3f010000 	svccc	0x00010000
    1b28:	001bb801 	andseq	fp, fp, r1, lsl #16
    1b2c:	00003c08 	andeq	r3, r0, r8, lsl #24
    1b30:	039c0100 	orrseq	r0, ip, #0, 2
    1b34:	13000004 	movwne	r0, #4
    1b38:	0000100d 	andeq	r1, r0, sp
    1b3c:	97013f01 	strls	r3, [r1, -r1, lsl #30]
    1b40:	02000000 	andeq	r0, r0, #0
    1b44:	75156f91 	ldrvc	r6, [r5, #-3985]	; 0xf91
    1b48:	01000003 	tsteq	r0, r3
    1b4c:	00b80141 	adcseq	r0, r8, r1, asr #2
    1b50:	91020000 	mrsls	r0, (UNDEF: 2)
    1b54:	25120074 	ldrcs	r0, [r2, #-116]	; 0x74
    1b58:	0100000e 	tsteq	r0, lr
    1b5c:	1bf40163 	blne	ffd020f0 <_estack+0xdfcd20f0>
    1b60:	00200800 	eoreq	r0, r0, r0, lsl #16
    1b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b68:	00000429 	andeq	r0, r0, r9, lsr #8
    1b6c:	00067813 	andeq	r7, r6, r3, lsl r8
    1b70:	01630100 	cmneq	r3, r0, lsl #2
    1b74:	00000128 	andeq	r0, r0, r8, lsr #2
    1b78:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1b7c:	000cd812 	andeq	sp, ip, r2, lsl r8
    1b80:	017c0100 	cmneq	ip, r0, lsl #2
    1b84:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
    1b88:	00000040 	andeq	r0, r0, r0, asr #32
    1b8c:	044f9c01 	strbeq	r9, [pc], #-3073	; 1b94 <_Min_Stack_Size+0x1794>
    1b90:	37130000 	ldrcc	r0, [r3, -r0]
    1b94:	0100000b 	tsteq	r0, fp
    1b98:	0097017c 	addseq	r0, r7, ip, ror r1
    1b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ba0:	47120077 			; <UNDEFINED> instruction: 0x47120077
    1ba4:	01000011 	tsteq	r0, r1, lsl r0
    1ba8:	1c5401a4 	ldfnee	f0, [r4], {164}	; 0xa4
    1bac:	00200800 	eoreq	r0, r0, r0, lsl #16
    1bb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bb4:	00000475 	andeq	r0, r0, r5, ror r4
    1bb8:	00067813 	andeq	r7, r6, r3, lsl r8
    1bbc:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    1bc0:	00000128 	andeq	r0, r0, r8, lsr #2
    1bc4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1bc8:	00117e12 	andseq	r7, r1, r2, lsl lr
    1bcc:	01cf0100 	biceq	r0, pc, r0, lsl #2
    1bd0:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
    1bd4:	0000003c 	andeq	r0, r0, ip, lsr r0
    1bd8:	04d79c01 	ldrbeq	r9, [r7], #3073	; 0xc01
    1bdc:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    1be0:	0100000d 	tsteq	r0, sp
    1be4:	00b801cf 	adcseq	r0, r8, pc, asr #3
    1be8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bec:	0beb1374 	bleq	ffac69c4 <_estack+0xdfa969c4>
    1bf0:	cf010000 	svcgt	0x00010000
    1bf4:	0000b801 	andeq	fp, r0, r1, lsl #16
    1bf8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1bfc:	000bac13 	andeq	sl, fp, r3, lsl ip
    1c00:	01cf0100 	biceq	r0, pc, r0, lsl #2
    1c04:	000000b8 	strheq	r0, [r0], -r8
    1c08:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1c0c:	00000bcb 	andeq	r0, r0, fp, asr #23
    1c10:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    1c14:	02000000 	andeq	r0, r0, #0
    1c18:	d0136891 	mulsle	r3, r1, r8
    1c1c:	0100000b 	tsteq	r0, fp
    1c20:	00b801cf 	adcseq	r0, r8, pc, asr #3
    1c24:	91020000 	mrsls	r0, (UNDEF: 2)
    1c28:	63120000 	tstvs	r2, #0
    1c2c:	0100000f 	tsteq	r0, pc
    1c30:	1cb001e6 	ldfnes	f0, [r0], #920	; 0x398
    1c34:	00200800 	eoreq	r0, r0, r0, lsl #16
    1c38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c3c:	000004fd 	strdeq	r0, [r0], -sp
    1c40:	00067813 	andeq	r7, r6, r3, lsl r8
    1c44:	01e60100 	mvneq	r0, r0, lsl #2
    1c48:	00000128 	andeq	r0, r0, r8, lsr #2
    1c4c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1c50:	000e1412 	andeq	r1, lr, r2, lsl r4
    1c54:	02280100 	eoreq	r0, r8, #0, 2
    1c58:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
    1c5c:	00000030 	andeq	r0, r0, r0, lsr r0
    1c60:	05419c01 	strbeq	r9, [r1, #-3073]	; 0xc01
    1c64:	2b130000 	blcs	4c1c6c <_Min_Stack_Size+0x4c186c>
    1c68:	01000010 	tsteq	r0, r0, lsl r0
    1c6c:	00b80228 	adcseq	r0, r8, r8, lsr #4
    1c70:	91020000 	mrsls	r0, (UNDEF: 2)
    1c74:	10671374 	rsbne	r1, r7, r4, ror r3
    1c78:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1c7c:	0000b802 	andeq	fp, r0, r2, lsl #16
    1c80:	70910200 	addsvc	r0, r1, r0, lsl #4
    1c84:	00106f13 	andseq	r6, r0, r3, lsl pc
    1c88:	02280100 	eoreq	r0, r8, #0, 2
    1c8c:	000000b8 	strheq	r0, [r0], -r8
    1c90:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1c94:	000d8f12 	andeq	r8, sp, r2, lsl pc
    1c98:	02390100 	eorseq	r0, r9, #0, 2
    1c9c:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
    1ca0:	00000020 	andeq	r0, r0, r0, lsr #32
    1ca4:	05679c01 	strbeq	r9, [r7, #-3073]!	; 0xc01
    1ca8:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
    1cac:	01000006 	tsteq	r0, r6
    1cb0:	01280239 	teqeq	r8, r9, lsr r2
    1cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cb8:	ac120077 	ldcge	0, cr0, [r2], {119}	; 0x77
    1cbc:	0100000e 	tsteq	r0, lr
    1cc0:	1d200256 	sfmne	f0, 4, [r0, #-344]!	; 0xfffffea8
    1cc4:	00300800 	eorseq	r0, r0, r0, lsl #16
    1cc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ccc:	000005ab 	andeq	r0, r0, fp, lsr #11
    1cd0:	000f3713 	andeq	r3, pc, r3, lsl r7	; <UNPREDICTABLE>
    1cd4:	02560100 	subseq	r0, r6, #0, 2
    1cd8:	000000b8 	strheq	r0, [r0], -r8
    1cdc:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1ce0:	00000f3f 	andeq	r0, r0, pc, lsr pc
    1ce4:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    1ce8:	02000000 	andeq	r0, r0, #0
    1cec:	47137091 			; <UNDEFINED> instruction: 0x47137091
    1cf0:	0100000f 	tsteq	r0, pc
    1cf4:	00b80256 	adcseq	r0, r8, r6, asr r2
    1cf8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cfc:	3f12006c 	svccc	0x0012006c
    1d00:	0100000b 	tsteq	r0, fp
    1d04:	1d500268 	lfmne	f0, 2, [r0, #-416]	; 0xfffffe60
    1d08:	00200800 	eoreq	r0, r0, r0, lsl #16
    1d0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d10:	000005d1 	ldrdeq	r0, [r0], -r1
    1d14:	00067813 	andeq	r7, r6, r3, lsl r8
    1d18:	02680100 	rsbeq	r0, r8, #0, 2
    1d1c:	00000128 	andeq	r0, r0, r8, lsr #2
    1d20:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1d24:	000e8212 	andeq	r8, lr, r2, lsl r2
    1d28:	027a0100 	rsbseq	r0, sl, #0, 2
    1d2c:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
    1d30:	00000020 	andeq	r0, r0, r0, lsr #32
    1d34:	05f79c01 	ldrbeq	r9, [r7, #3073]!	; 0xc01
    1d38:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
    1d3c:	01000006 	tsteq	r0, r6
    1d40:	0128027a 	teqeq	r8, sl, ror r2
    1d44:	91020000 	mrsls	r0, (UNDEF: 2)
    1d48:	75120077 	ldrvc	r0, [r2, #-119]	; 0x77
    1d4c:	0100000d 	tsteq	r0, sp
    1d50:	1d900293 	lfmne	f0, 4, [r0, #588]	; 0x24c
    1d54:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1d58:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d5c:	0000063b 	andeq	r0, r0, fp, lsr r6
    1d60:	000b8613 	andeq	r8, fp, r3, lsl r6
    1d64:	02930100 	addseq	r0, r3, #0, 2
    1d68:	000000b8 	strheq	r0, [r0], -r8
    1d6c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1d70:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    1d74:	b8029301 	stmdalt	r2, {r0, r8, r9, ip, pc}
    1d78:	02000000 	andeq	r0, r0, #0
    1d7c:	75156891 	ldrvc	r6, [r5, #-2193]	; 0x891
    1d80:	01000003 	tsteq	r0, r3
    1d84:	00b80295 	umlalseq	r0, r8, r5, r2
    1d88:	91020000 	mrsls	r0, (UNDEF: 2)
    1d8c:	38120074 	ldmdacc	r2, {r2, r4, r5, r6}
    1d90:	01000011 	tsteq	r0, r1, lsl r0
    1d94:	1dcc02b9 	sfmne	f0, 2, [ip, #740]	; 0x2e4
    1d98:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1d9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1da0:	0000067f 	andeq	r0, r0, pc, ror r6
    1da4:	000ee013 	andeq	lr, lr, r3, lsl r0
    1da8:	02b90100 	adcseq	r0, r9, #0, 2
    1dac:	000000b8 	strheq	r0, [r0], -r8
    1db0:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1db4:	00000e4e 	andeq	r0, r0, lr, asr #28
    1db8:	b802b901 	stmdalt	r2, {r0, r8, fp, ip, sp, pc}
    1dbc:	02000000 	andeq	r0, r0, #0
    1dc0:	75156891 	ldrvc	r6, [r5, #-2193]	; 0x891
    1dc4:	01000003 	tsteq	r0, r3
    1dc8:	00b802bb 	ldrhteq	r0, [r8], fp
    1dcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd0:	c7120074 			; <UNDEFINED> instruction: 0xc7120074
    1dd4:	0100000c 	tsteq	r0, ip
    1dd8:	1e08035f 	mcrne	3, 0, r0, cr8, cr15, {2}
    1ddc:	00380800 	eorseq	r0, r8, r0, lsl #16
    1de0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1de4:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    1de8:	000fc913 	andeq	ip, pc, r3, lsl r9	; <UNPREDICTABLE>
    1dec:	035f0100 	cmpeq	pc, #0, 2
    1df0:	000000b8 	strheq	r0, [r0], -r8
    1df4:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1df8:	00000375 	andeq	r0, r0, r5, ror r3
    1dfc:	b8036101 	stmdalt	r3, {r0, r8, sp, lr}
    1e00:	02000000 	andeq	r0, r0, #0
    1e04:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1e08:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1e0c:	97037b01 	strls	r7, [r3, -r1, lsl #22]
    1e10:	40000000 	andmi	r0, r0, r0
    1e14:	2008001e 	andcs	r0, r8, lr, lsl r0
    1e18:	01000000 	mrseq	r0, (UNDEF: 0)
    1e1c:	0cb8129c 	lfmeq	f1, 4, [r8], #624	; 0x270
    1e20:	94010000 	strls	r0, [r1], #-0
    1e24:	001e6003 	andseq	r6, lr, r3
    1e28:	00003808 	andeq	r3, r0, r8, lsl #16
    1e2c:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1e30:	13000006 	movwne	r0, #6
    1e34:	00000d84 	andeq	r0, r0, r4, lsl #27
    1e38:	b8039401 	stmdalt	r3, {r0, sl, ip, pc}
    1e3c:	02000000 	andeq	r0, r0, #0
    1e40:	75156c91 	ldrvc	r6, [r5, #-3217]	; 0xc91
    1e44:	01000003 	tsteq	r0, r3
    1e48:	00b80396 	umlalseq	r0, r8, r6, r3
    1e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e50:	63120074 	tstvs	r2, #116	; 0x74
    1e54:	0100000c 	tsteq	r0, ip
    1e58:	1e9803b4 	mrcne	3, 4, r0, cr8, cr4, {5}
    1e5c:	00380800 	eorseq	r0, r8, r0, lsl #16
    1e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e64:	00000734 	andeq	r0, r0, r4, lsr r7
    1e68:	000b2e13 	andeq	r2, fp, r3, lsl lr
    1e6c:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    1e70:	000000b8 	strheq	r0, [r0], -r8
    1e74:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1e78:	00000375 	andeq	r0, r0, r5, ror r3
    1e7c:	b803b601 	stmdalt	r3, {r0, r9, sl, ip, sp, pc}
    1e80:	02000000 	andeq	r0, r0, #0
    1e84:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e88:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    1e8c:	d003d301 	andle	sp, r3, r1, lsl #6
    1e90:	3808001e 	stmdacc	r8, {r1, r2, r3, r4}
    1e94:	01000000 	mrseq	r0, (UNDEF: 0)
    1e98:	0007699c 	muleq	r7, ip, r9
    1e9c:	0b2e1300 	bleq	b86aa4 <_Min_Stack_Size+0xb866a4>
    1ea0:	d3010000 	movwle	r0, #4096	; 0x1000
    1ea4:	0000b803 	andeq	fp, r0, r3, lsl #16
    1ea8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1eac:	00037515 	andeq	r7, r3, r5, lsl r5
    1eb0:	03d50100 	bicseq	r0, r5, #0, 2
    1eb4:	000000b8 	strheq	r0, [r0], -r8
    1eb8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ebc:	00103312 	andseq	r3, r0, r2, lsl r3
    1ec0:	04070100 	streq	r0, [r7], #-256	; 0x100
    1ec4:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
    1ec8:	00000154 	andeq	r0, r0, r4, asr r1
    1ecc:	07e99c01 	strbeq	r9, [r9, r1, lsl #24]!
    1ed0:	ff130000 			; <UNDEFINED> instruction: 0xff130000
    1ed4:	0100000b 	tsteq	r0, fp
    1ed8:	07e90407 	strbeq	r0, [r9, r7, lsl #8]!
    1edc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee0:	6d74175c 	ldclvs	7, cr1, [r4, #-368]!	; 0xfffffe90
    1ee4:	09010070 	stmdbeq	r1, {r4, r5, r6}
    1ee8:	0000b804 	andeq	fp, r0, r4, lsl #16
    1eec:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ef0:	000d9d15 	andeq	r9, sp, r5, lsl sp
    1ef4:	04090100 	streq	r0, [r9], #-256	; 0x100
    1ef8:	000000b8 	strheq	r0, [r0], -r8
    1efc:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1f00:	00000532 	andeq	r0, r0, r2, lsr r5
    1f04:	b8040901 	stmdalt	r4, {r0, r8, fp}
    1f08:	02000000 	andeq	r0, r0, #0
    1f0c:	d9157491 	ldmdble	r5, {r0, r4, r7, sl, ip, sp, lr}
    1f10:	01000004 	tsteq	r0, r4
    1f14:	00b80409 	adcseq	r0, r8, r9, lsl #8
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	04c21568 	strbeq	r1, [r2], #1384	; 0x568
    1f20:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1f24:	0000b804 	andeq	fp, r0, r4, lsl #16
    1f28:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1f2c:	0004d415 	andeq	sp, r4, r5, lsl r4
    1f30:	04090100 	streq	r0, [r9], #-256	; 0x100
    1f34:	000000b8 	strheq	r0, [r0], -r8
    1f38:	00609102 	rsbeq	r9, r0, r2, lsl #2
    1f3c:	03440418 	movteq	r0, #17432	; 0x4418
    1f40:	64120000 	ldrvs	r0, [r2], #-0
    1f44:	0100000d 	tsteq	r0, sp
    1f48:	205c0484 	subscs	r0, ip, r4, lsl #9
    1f4c:	005c0800 	subseq	r0, ip, r0, lsl #16
    1f50:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f54:	00000824 	andeq	r0, r0, r4, lsr #16
    1f58:	000da313 	andeq	sl, sp, r3, lsl r3
    1f5c:	04840100 	streq	r0, [r4], #256	; 0x100
    1f60:	000000b8 	strheq	r0, [r0], -r8
    1f64:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1f68:	00000375 	andeq	r0, r0, r5, ror r3
    1f6c:	b8048601 	stmdalt	r4, {r0, r9, sl, pc}
    1f70:	02000000 	andeq	r0, r0, #0
    1f74:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1f78:	00000e74 	andeq	r0, r0, r4, ror lr
    1f7c:	b804a401 	stmdalt	r4, {r0, sl, sp, pc}
    1f80:	20080020 	andcs	r0, r8, r0, lsr #32
    1f84:	01000000 	mrseq	r0, (UNDEF: 0)
    1f88:	00084a9c 	muleq	r8, ip, sl
    1f8c:	06781300 	ldrbteq	r1, [r8], -r0, lsl #6
    1f90:	a4010000 	strge	r0, [r1], #-0
    1f94:	00012804 	andeq	r2, r1, r4, lsl #16
    1f98:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1f9c:	0cef1200 	sfmeq	f1, 2, [pc]	; 1fa4 <_Min_Stack_Size+0x1ba4>
    1fa0:	b5010000 	strlt	r0, [r1, #-0]
    1fa4:	0020d804 	eoreq	sp, r0, r4, lsl #16
    1fa8:	00002008 	andeq	r2, r0, r8
    1fac:	709c0100 	addsvc	r0, ip, r0, lsl #2
    1fb0:	13000008 	movwne	r0, #8
    1fb4:	00000678 	andeq	r0, r0, r8, ror r6
    1fb8:	2804b501 	stmdacs	r4, {r0, r8, sl, ip, sp, pc}
    1fbc:	02000001 	andeq	r0, r0, #1
    1fc0:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    1fc4:	00001127 	andeq	r1, r0, r7, lsr #2
    1fc8:	f804c601 			; <UNDEFINED> instruction: 0xf804c601
    1fcc:	1c080020 	stcne	0, cr0, [r8], {32}
    1fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd4:	0008969c 	muleq	r8, ip, r6
    1fd8:	0eef1300 	cdpeq	3, 14, cr1, cr15, cr0, {0}
    1fdc:	c6010000 	strgt	r0, [r1], -r0
    1fe0:	0000b804 	andeq	fp, r0, r4, lsl #16
    1fe4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fe8:	0e5a1200 	cdpeq	2, 5, cr1, cr10, cr0, {0}
    1fec:	db010000 	blle	41ff4 <_Min_Stack_Size+0x41bf4>
    1ff0:	00211404 	eoreq	r1, r1, r4, lsl #8
    1ff4:	00003c08 	andeq	r3, r0, r8, lsl #24
    1ff8:	cb9c0100 	blgt	fe702400 <_estack+0xde6d2400>
    1ffc:	13000008 	movwne	r0, #8
    2000:	00000e9d 	muleq	r0, sp, lr
    2004:	b804db01 	stmdalt	r4, {r0, r8, r9, fp, ip, lr, pc}
    2008:	02000000 	andeq	r0, r0, #0
    200c:	75156c91 	ldrvc	r6, [r5, #-3217]	; 0xc91
    2010:	01000003 	tsteq	r0, r3
    2014:	00b804dd 	ldrsbteq	r0, [r8], sp
    2018:	91020000 	mrsls	r0, (UNDEF: 2)
    201c:	b1120074 	tstlt	r2, r4, ror r0
    2020:	0100000b 	tsteq	r0, fp
    2024:	215004fb 	ldrshcs	r0, [r0, #-75]	; 0xffffffb5
    2028:	00400800 	subeq	r0, r0, r0, lsl #16
    202c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2030:	00000900 	andeq	r0, r0, r0, lsl #18
    2034:	000b4d13 	andeq	r4, fp, r3, lsl sp
    2038:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    203c:	000000b8 	strheq	r0, [r0], -r8
    2040:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    2044:	00000375 	andeq	r0, r0, r5, ror r3
    2048:	b804fd01 	stmdalt	r4, {r0, r8, sl, fp, ip, sp, lr, pc}
    204c:	02000000 	andeq	r0, r0, #0
    2050:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2054:	00000c8a 	andeq	r0, r0, sl, lsl #25
    2058:	90051f01 	andls	r1, r5, r1, lsl #30
    205c:	3c080021 	stccc	0, cr0, [r8], {33}	; 0x21
    2060:	01000000 	mrseq	r0, (UNDEF: 0)
    2064:	0009359c 	muleq	r9, ip, r5
    2068:	0db41300 	ldceq	3, cr1, [r4]
    206c:	1f010000 	svcne	0x00010000
    2070:	0000b805 	andeq	fp, r0, r5, lsl #16
    2074:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2078:	00037515 	andeq	r7, r3, r5, lsl r5
    207c:	05210100 	streq	r0, [r1, #-256]!	; 0x100
    2080:	000000b8 	strheq	r0, [r0], -r8
    2084:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2088:	000f2012 	andeq	r2, pc, r2, lsl r0	; <UNPREDICTABLE>
    208c:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    2090:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
    2094:	0000003c 	andeq	r0, r0, ip, lsr r0
    2098:	096a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}^
    209c:	cb130000 	blgt	4c20a4 <_Min_Stack_Size+0x4c1ca4>
    20a0:	0100000d 	tsteq	r0, sp
    20a4:	00b80543 	adcseq	r0, r8, r3, asr #10
    20a8:	91020000 	mrsls	r0, (UNDEF: 2)
    20ac:	0375156c 	cmneq	r5, #108, 10	; 0x1b000000
    20b0:	45010000 	strmi	r0, [r1, #-0]
    20b4:	0000b805 	andeq	fp, r0, r5, lsl #16
    20b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20bc:	0de21200 	sfmeq	f1, 2, [r2]
    20c0:	64010000 	strvs	r0, [r1], #-0
    20c4:	00220805 	eoreq	r0, r2, r5, lsl #16
    20c8:	00003c08 	andeq	r3, r0, r8, lsl #24
    20cc:	9f9c0100 	svcls	0x009c0100
    20d0:	13000009 	movwne	r0, #9
    20d4:	00000b5c 	andeq	r0, r0, ip, asr fp
    20d8:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    20dc:	02000000 	andeq	r0, r0, #0
    20e0:	75156c91 	ldrvc	r6, [r5, #-3217]	; 0xc91
    20e4:	01000003 	tsteq	r0, r3
    20e8:	00b80566 	adcseq	r0, r8, r6, ror #10
    20ec:	91020000 	mrsls	r0, (UNDEF: 2)
    20f0:	12120074 	andsne	r0, r2, #116	; 0x74
    20f4:	01000011 	tsteq	r0, r1, lsl r0
    20f8:	22440589 	subcs	r0, r4, #574619648	; 0x22400000
    20fc:	001c0800 	andseq	r0, ip, r0, lsl #16
    2100:	9c010000 	stcls	0, cr0, [r1], {-0}
    2104:	000009c5 	andeq	r0, r0, r5, asr #19
    2108:	000f4f13 	andeq	r4, pc, r3, lsl pc	; <UNPREDICTABLE>
    210c:	05890100 	streq	r0, [r9, #256]	; 0x100
    2110:	000000b8 	strheq	r0, [r0], -r8
    2114:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2118:	000f6e12 	andeq	r6, pc, r2, lsl lr	; <UNPREDICTABLE>
    211c:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    2120:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
    2124:	0000003c 	andeq	r0, r0, ip, lsr r0
    2128:	09fa9c01 	ldmibeq	sl!, {r0, sl, fp, ip, pc}^
    212c:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
    2130:	0100000b 	tsteq	r0, fp
    2134:	00b805b4 	ldrhteq	r0, [r8], r4
    2138:	91020000 	mrsls	r0, (UNDEF: 2)
    213c:	06781374 			; <UNDEFINED> instruction: 0x06781374
    2140:	b4010000 	strlt	r0, [r1], #-0
    2144:	00012805 	andeq	r2, r1, r5, lsl #16
    2148:	73910200 	orrsvc	r0, r1, #0, 4
    214c:	0c4c1200 	sfmeq	f1, 2, [ip], {-0}
    2150:	d4010000 	strle	r0, [r1], #-0
    2154:	00229c05 	eoreq	r9, r2, r5, lsl #24
    2158:	00003c08 	andeq	r3, r0, r8, lsl #24
    215c:	2f9c0100 	svccs	0x009c0100
    2160:	1300000a 	movwne	r0, #10
    2164:	00000e30 	andeq	r0, r0, r0, lsr lr
    2168:	b805d401 	stmdalt	r5, {r0, sl, ip, lr, pc}
    216c:	02000000 	andeq	r0, r0, #0
    2170:	78137491 	ldmdavc	r3, {r0, r4, r7, sl, ip, sp, lr}
    2174:	01000006 	tsteq	r0, r6
    2178:	012805d4 	ldrdeq	r0, [r8, -r4]!
    217c:	91020000 	mrsls	r0, (UNDEF: 2)
    2180:	bb120073 	bllt	482354 <_Min_Stack_Size+0x481f54>
    2184:	01000011 	tsteq	r0, r1, lsl r0
    2188:	22d805f0 	sbcscs	r0, r8, #240, 10	; 0x3c000000
    218c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2190:	9c010000 	stcls	0, cr0, [r1], {-0}
    2194:	00000a64 	andeq	r0, r0, r4, ror #20
    2198:	000e3f13 	andeq	r3, lr, r3, lsl pc
    219c:	05f00100 	ldrbeq	r0, [r0, #256]!	; 0x100
    21a0:	000000b8 	strheq	r0, [r0], -r8
    21a4:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    21a8:	00000678 	andeq	r0, r0, r8, ror r6
    21ac:	2805f001 	stmdacs	r5, {r0, ip, sp, lr, pc}
    21b0:	02000001 	andeq	r0, r0, #1
    21b4:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    21b8:	00001152 	andeq	r1, r0, r2, asr r1
    21bc:	14062401 	strne	r2, [r6], #-1025	; 0x401
    21c0:	3c080023 	stccc	0, cr0, [r8], {35}	; 0x23
    21c4:	01000000 	mrseq	r0, (UNDEF: 0)
    21c8:	000a999c 	muleq	sl, ip, r9
    21cc:	0d551300 	ldcleq	3, cr1, [r5, #-0]
    21d0:	24010000 	strcs	r0, [r1], #-0
    21d4:	0000b806 	andeq	fp, r0, r6, lsl #16
    21d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21dc:	00067813 	andeq	r7, r6, r3, lsl r8
    21e0:	06240100 	strteq	r0, [r4], -r0, lsl #2
    21e4:	00000128 	andeq	r0, r0, r8, lsr #2
    21e8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    21ec:	00104512 	andseq	r4, r0, r2, lsl r5
    21f0:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    21f4:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
    21f8:	0000003c 	andeq	r0, r0, ip, lsr r0
    21fc:	0ace9c01 	beq	ff3a9208 <_estack+0xdf379208>
    2200:	b3130000 	tstlt	r3, #0
    2204:	01000010 	tsteq	r0, r0, lsl r0
    2208:	00b80651 	adcseq	r0, r8, r1, asr r6
    220c:	91020000 	mrsls	r0, (UNDEF: 2)
    2210:	06781374 			; <UNDEFINED> instruction: 0x06781374
    2214:	51010000 	mrspl	r0, (UNDEF: 1)
    2218:	00012806 	andeq	r2, r1, r6, lsl #16
    221c:	73910200 	orrsvc	r0, r1, #0, 4
    2220:	0ca11200 	sfmeq	f1, 4, [r1]
    2224:	7b010000 	blvc	4222c <_Min_Stack_Size+0x41e2c>
    2228:	00238c06 	eoreq	r8, r3, r6, lsl #24
    222c:	00003c08 	andeq	r3, r0, r8, lsl #24
    2230:	039c0100 	orrseq	r0, ip, #0, 2
    2234:	1300000b 	movwne	r0, #11
    2238:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    223c:	b8067b01 	stmdalt	r6, {r0, r8, r9, fp, ip, sp, lr}
    2240:	02000000 	andeq	r0, r0, #0
    2244:	78137491 	ldmdavc	r3, {r0, r4, r7, sl, ip, sp, lr}
    2248:	01000006 	tsteq	r0, r6
    224c:	0128067b 	teqeq	r8, fp, ror r6
    2250:	91020000 	mrsls	r0, (UNDEF: 2)
    2254:	85120073 	ldrhi	r0, [r2, #-115]	; 0x73
    2258:	0100000f 	tsteq	r0, pc
    225c:	23c80698 	biccs	r0, r8, #152, 12	; 0x9800000
    2260:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2264:	9c010000 	stcls	0, cr0, [r1], {-0}
    2268:	00000b38 	andeq	r0, r0, r8, lsr fp
    226c:	000e3013 	andeq	r3, lr, r3, lsl r0
    2270:	06980100 	ldreq	r0, [r8], r0, lsl #2
    2274:	000000b8 	strheq	r0, [r0], -r8
    2278:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    227c:	00000678 	andeq	r0, r0, r8, ror r6
    2280:	28069801 	stmdacs	r6, {r0, fp, ip, pc}
    2284:	02000001 	andeq	r0, r0, #1
    2288:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    228c:	00000c73 	andeq	r0, r0, r3, ror ip
    2290:	0406b101 	streq	fp, [r6], #-257	; 0x101
    2294:	3c080024 	stccc	0, cr0, [r8], {36}	; 0x24
    2298:	01000000 	mrseq	r0, (UNDEF: 0)
    229c:	000b6d9c 	muleq	fp, ip, sp
    22a0:	0e3f1300 	cdpeq	3, 3, cr1, cr15, cr0, {0}
    22a4:	b1010000 	mrslt	r0, (UNDEF: 1)
    22a8:	0000b806 	andeq	fp, r0, r6, lsl #16
    22ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22b0:	00067813 	andeq	r7, r6, r3, lsl r8
    22b4:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    22b8:	00000128 	andeq	r0, r0, r8, lsr #2
    22bc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    22c0:	000b9512 	andeq	r9, fp, r2, lsl r5
    22c4:	06e20100 	strbteq	r0, [r2], r0, lsl #2
    22c8:	08002440 	stmdaeq	r0, {r6, sl, sp}
    22cc:	0000003c 	andeq	r0, r0, ip, lsr r0
    22d0:	0ba29c01 	bleq	fe8a92dc <_estack+0xde8792dc>
    22d4:	55130000 	ldrpl	r0, [r3, #-0]
    22d8:	0100000d 	tsteq	r0, sp
    22dc:	00b806e2 	adcseq	r0, r8, r2, ror #13
    22e0:	91020000 	mrsls	r0, (UNDEF: 2)
    22e4:	06781374 			; <UNDEFINED> instruction: 0x06781374
    22e8:	e2010000 	and	r0, r1, #0
    22ec:	00012806 	andeq	r2, r1, r6, lsl #16
    22f0:	73910200 	orrsvc	r0, r1, #0, 4
    22f4:	0ec91200 	cdpeq	2, 12, cr1, cr9, cr0, {0}
    22f8:	0b010000 	bleq	42300 <_Min_Stack_Size+0x41f00>
    22fc:	00247c07 	eoreq	r7, r4, r7, lsl #24
    2300:	00003c08 	andeq	r3, r0, r8, lsl #24
    2304:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    2308:	1300000b 	movwne	r0, #11
    230c:	000010b3 	strheq	r1, [r0], -r3
    2310:	b8070b01 	stmdalt	r7, {r0, r8, r9, fp}
    2314:	02000000 	andeq	r0, r0, #0
    2318:	78137491 	ldmdavc	r3, {r0, r4, r7, sl, ip, sp, lr}
    231c:	01000006 	tsteq	r0, r6
    2320:	0128070b 	teqeq	r8, fp, lsl #14
    2324:	91020000 	mrsls	r0, (UNDEF: 2)
    2328:	9e120073 	mrcls	0, 0, r0, cr2, cr3, {3}
    232c:	01000011 	tsteq	r0, r1, lsl r0
    2330:	24b8073c 	ldrtcs	r0, [r8], #1852	; 0x73c
    2334:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2338:	9c010000 	stcls	0, cr0, [r1], {-0}
    233c:	00000c0c 	andeq	r0, r0, ip, lsl #24
    2340:	000bf013 	andeq	pc, fp, r3, lsl r0	; <UNPREDICTABLE>
    2344:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    2348:	000000b8 	strheq	r0, [r0], -r8
    234c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2350:	00000678 	andeq	r0, r0, r8, ror r6
    2354:	28073c01 	stmdacs	r7, {r0, sl, fp, ip, sp}
    2358:	02000001 	andeq	r0, r0, #1
    235c:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    2360:	00000df7 	strdeq	r0, [r0], -r7
    2364:	f4075c01 			; <UNDEFINED> instruction: 0xf4075c01
    2368:	3c080024 	stccc	0, cr0, [r8], {36}	; 0x24
    236c:	01000000 	mrseq	r0, (UNDEF: 0)
    2370:	000c419c 	muleq	ip, ip, r1
    2374:	0e301300 	cdpeq	3, 3, cr1, cr0, cr0, {0}
    2378:	5c010000 	stcpl	0, cr0, [r1], {-0}
    237c:	0000b807 	andeq	fp, r0, r7, lsl #16
    2380:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2384:	00067813 	andeq	r7, r6, r3, lsl r8
    2388:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    238c:	00000128 	andeq	r0, r0, r8, lsr #2
    2390:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2394:	00108712 	andseq	r8, r0, r2, lsl r7
    2398:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
    239c:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    23a0:	0000003c 	andeq	r0, r0, ip, lsr r0
    23a4:	0c769c01 	ldcleq	12, cr9, [r6], #-4
    23a8:	3f130000 	svccc	0x00130000
    23ac:	0100000e 	tsteq	r0, lr
    23b0:	00b80778 	adcseq	r0, r8, r8, ror r7
    23b4:	91020000 	mrsls	r0, (UNDEF: 2)
    23b8:	06781374 			; <UNDEFINED> instruction: 0x06781374
    23bc:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    23c0:	00012807 	andeq	r2, r1, r7, lsl #16
    23c4:	73910200 	orrsvc	r0, r1, #0, 4
    23c8:	0f9c1200 	svceq	0x009c1200
    23cc:	ac010000 	stcge	0, cr0, [r1], {-0}
    23d0:	00256c07 	eoreq	r6, r5, r7, lsl #24
    23d4:	00003c08 	andeq	r3, r0, r8, lsl #24
    23d8:	ab9c0100 	blge	fe7027e0 <_estack+0xde6d27e0>
    23dc:	1300000c 	movwne	r0, #12
    23e0:	00000d55 	andeq	r0, r0, r5, asr sp
    23e4:	b807ac01 	stmdalt	r7, {r0, sl, fp, sp, pc}
    23e8:	02000000 	andeq	r0, r0, #0
    23ec:	78137491 	ldmdavc	r3, {r0, r4, r7, sl, ip, sp, lr}
    23f0:	01000006 	tsteq	r0, r6
    23f4:	012807ac 	smulwbeq	r8, ip, r7
    23f8:	91020000 	mrsls	r0, (UNDEF: 2)
    23fc:	0a120073 	beq	4825d0 <_Min_Stack_Size+0x4821d0>
    2400:	0100000c 	tsteq	r0, ip
    2404:	25a807d9 	strcs	r0, [r8, #2009]!	; 0x7d9
    2408:	003c0800 	eorseq	r0, ip, r0, lsl #16
    240c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2410:	00000ce0 	andeq	r0, r0, r0, ror #25
    2414:	0010b313 	andseq	fp, r0, r3, lsl r3
    2418:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
    241c:	000000b8 	strheq	r0, [r0], -r8
    2420:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2424:	00000678 	andeq	r0, r0, r8, ror r6
    2428:	2807d901 	stmdacs	r7, {r0, r8, fp, ip, lr, pc}
    242c:	02000001 	andeq	r0, r0, #1
    2430:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    2434:	00001169 	andeq	r1, r0, r9, ror #2
    2438:	e4080701 	str	r0, [r8], #-1793	; 0x701
    243c:	48080025 	stmdami	r8, {r0, r2, r5}
    2440:	01000000 	mrseq	r0, (UNDEF: 0)
    2444:	000d159c 	muleq	sp, ip, r5
    2448:	0c351300 	ldceq	3, cr1, [r5], #-0
    244c:	07010000 	streq	r0, [r1, -r0]
    2450:	00009708 	andeq	r9, r0, r8, lsl #14
    2454:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2458:	00067813 	andeq	r7, r6, r3, lsl r8
    245c:	08070100 	stmdaeq	r7, {r8}
    2460:	00000128 	andeq	r0, r0, r8, lsr #2
    2464:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2468:	000f0019 	andeq	r0, pc, r9, lsl r0	; <UNPREDICTABLE>
    246c:	082c0100 	stmdaeq	ip!, {r8}
    2470:	000000fa 	strdeq	r0, [r0], -sl
    2474:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
    2478:	00000074 	andeq	r0, r0, r4, ror r0
    247c:	0d6c9c01 	stcleq	12, cr9, [ip, #-4]!
    2480:	e6130000 	ldr	r0, [r3], -r0
    2484:	0100000c 	tsteq	r0, ip
    2488:	0097082c 	addseq	r0, r7, ip, lsr #16
    248c:	91020000 	mrsls	r0, (UNDEF: 2)
    2490:	6d741767 	ldclvs	7, cr1, [r4, #-412]!	; 0xfffffe64
    2494:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    2498:	0000b808 	andeq	fp, r0, r8, lsl #16
    249c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24a0:	000b6b15 	andeq	r6, fp, r5, lsl fp
    24a4:	082f0100 	stmdaeq	pc!, {r8}	; <UNPREDICTABLE>
    24a8:	000000b8 	strheq	r0, [r0], -r8
    24ac:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    24b0:	00000963 	andeq	r0, r0, r3, ror #18
    24b4:	fa083001 	blx	20e4c0 <_Min_Stack_Size+0x20e0c0>
    24b8:	02000000 	andeq	r0, r0, #0
    24bc:	1a007391 	bne	1f308 <_Min_Stack_Size+0x1ef08>
    24c0:	00000c27 	andeq	r0, r0, r7, lsr #24
    24c4:	a0085901 	andge	r5, r8, r1, lsl #18
    24c8:	1c080026 	stcne	0, cr0, [r8], {38}	; 0x26
    24cc:	01000000 	mrseq	r0, (UNDEF: 0)
    24d0:	1077199c 			; <UNDEFINED> instruction: 0x1077199c
    24d4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    24d8:	00010608 	andeq	r0, r1, r8, lsl #12
    24dc:	0026bc00 	eoreq	fp, r6, r0, lsl #24
    24e0:	00003808 	andeq	r3, r0, r8, lsl #16
    24e4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    24e8:	1300000d 	movwne	r0, #13
    24ec:	00000c35 	andeq	r0, r0, r5, lsr ip
    24f0:	97086d01 	strls	r6, [r8, -r1, lsl #26]
    24f4:	02000000 	andeq	r0, r0, #0
    24f8:	63156f91 	tstvs	r5, #580	; 0x244
    24fc:	01000009 	tsteq	r0, r9
    2500:	0106086f 	tsteq	r6, pc, ror #16
    2504:	91020000 	mrsls	r0, (UNDEF: 2)
    2508:	d5120077 	ldrle	r0, [r2, #-119]	; 0x77
    250c:	0100000b 	tsteq	r0, fp
    2510:	26f4088f 	ldrbtcs	r0, [r4], pc, lsl #17
    2514:	00200800 	eoreq	r0, r0, r0, lsl #16
    2518:	9c010000 	stcls	0, cr0, [r1], {-0}
    251c:	00000ddd 	ldrdeq	r0, [r0], -sp
    2520:	000c3513 	andeq	r3, ip, r3, lsl r5
    2524:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    2528:	00000097 	muleq	r0, r7, r0
    252c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2530:	00009706 	andeq	r9, r0, r6, lsl #14
    2534:	000ded00 	andeq	lr, sp, r0, lsl #26
    2538:	00c30700 	sbceq	r0, r3, r0, lsl #14
    253c:	000f0000 	andeq	r0, pc, r0
    2540:	000ff21b 	andeq	pc, pc, fp, lsl r2	; <UNPREDICTABLE>
    2544:	fe8d0100 	cdp2	1, 8, cr0, cr13, cr0, {0}
    2548:	0500000d 	streq	r0, [r0, #-13]
    254c:	00001403 	andeq	r1, r0, r3, lsl #8
    2550:	0e031c20 	cdpeq	12, 0, cr1, cr3, cr0, {1}
    2554:	dd050000 	stcle	0, cr0, [r5, #-0]
    2558:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    255c:	0000015e 	andeq	r0, r0, lr, asr r1
    2560:	df06a706 	svcle	0x0006a706
    2564:	00000000 	andeq	r0, r0, r0
    2568:	000009c2 	andeq	r0, r0, r2, asr #19
    256c:	08420004 	stmdaeq	r2, {r2}^
    2570:	01040000 	mrseq	r0, (UNDEF: 4)
    2574:	00000021 	andeq	r0, r0, r1, lsr #32
    2578:	0015a301 	andseq	sl, r5, r1, lsl #6
    257c:	00011400 	andeq	r1, r1, r0, lsl #8
    2580:	0002e800 	andeq	lr, r2, r0, lsl #16
    2584:	00000000 	andeq	r0, r0, r0
    2588:	0010ba00 	andseq	fp, r0, r0, lsl #20
    258c:	06010200 	streq	r0, [r1], -r0, lsl #4
    2590:	0000014d 	andeq	r0, r0, sp, asr #2
    2594:	00026e03 	andeq	r6, r2, r3, lsl #28
    2598:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    259c:	02000000 	andeq	r0, r0, #0
    25a0:	014b0801 	cmpeq	fp, r1, lsl #16
    25a4:	02020000 	andeq	r0, r2, #0
    25a8:	00018705 	andeq	r8, r1, r5, lsl #14
    25ac:	04380300 	ldrteq	r0, [r8], #-768	; 0x300
    25b0:	2b020000 	blcs	825b8 <_Min_Stack_Size+0x821b8>
    25b4:	00000050 	andeq	r0, r0, r0, asr r0
    25b8:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    25bc:	03000000 	movweq	r0, #0
    25c0:	00000177 	andeq	r0, r0, r7, ror r1
    25c4:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    25c8:	04020000 	streq	r0, [r2], #-0
    25cc:	00000505 	andeq	r0, r0, r5, lsl #10
    25d0:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
    25d4:	41020000 	mrsmi	r0, (UNDEF: 2)
    25d8:	00000074 	andeq	r0, r0, r4, ror r0
    25dc:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    25e0:	02000001 	andeq	r0, r0, #1
    25e4:	00000508 	andeq	r0, r0, r8, lsl #10
    25e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    25ec:	00012907 	andeq	r2, r1, r7, lsl #18
    25f0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    25f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    25f8:	33070402 	movwcc	r0, #29698	; 0x7402
    25fc:	03000001 	movweq	r0, #1
    2600:	00000270 	andeq	r0, r0, r0, ror r2
    2604:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    2608:	3a030000 	bcc	c2610 <_Min_Stack_Size+0xc2210>
    260c:	03000004 	movweq	r0, #4
    2610:	00004536 	andeq	r4, r0, r6, lsr r5
    2614:	01790300 	cmneq	r9, r0, lsl #6
    2618:	41030000 	mrsmi	r0, (UNDEF: 3)
    261c:	00000057 	andeq	r0, r0, r7, asr r0
    2620:	0005b603 	andeq	fp, r5, r3, lsl #12
    2624:	69420300 	stmdbvs	r2, {r8, r9}^
    2628:	02000000 	andeq	r0, r0, #0
    262c:	01910704 	orrseq	r0, r1, r4, lsl #14
    2630:	a2050000 	andge	r0, r5, #0
    2634:	05000000 	streq	r0, [r0, #-0]
    2638:	000000ad 	andeq	r0, r0, sp, lsr #1
    263c:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    2640:	0000ea01 	andeq	lr, r0, r1, lsl #20
    2644:	087e0700 	ldmdaeq	lr!, {r8, r9, sl}^
    2648:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    264c:	00544553 	subseq	r4, r4, r3, asr r5
    2650:	88090001 	stmdahi	r9, {r0}
    2654:	0400001e 	streq	r0, [r0], #-30
    2658:	00d401f7 	ldrsheq	r0, [r4], #23
    265c:	d6090000 	strle	r0, [r9], -r0
    2660:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    2664:	00d401f7 	ldrsheq	r0, [r4], #23
    2668:	01060000 	mrseq	r0, (UNDEF: 6)
    266c:	1801f904 	stmdane	r1, {r2, r8, fp, ip, sp, lr, pc}
    2670:	07000001 	streq	r0, [r0, -r1]
    2674:	00000686 	andeq	r0, r0, r6, lsl #13
    2678:	07de0700 	ldrbeq	r0, [lr, r0, lsl #14]
    267c:	00010000 	andeq	r0, r1, r0
    2680:	0007af09 	andeq	sl, r7, r9, lsl #30
    2684:	01f90400 	mvnseq	r0, r0, lsl #8
    2688:	00000102 	andeq	r0, r0, r2, lsl #2
    268c:	26041c0a 	strcs	r1, [r4], -sl, lsl #24
    2690:	0001e205 	andeq	lr, r1, r5, lsl #4
    2694:	52530b00 	subspl	r0, r3, #0, 22
    2698:	05280400 	streq	r0, [r8, #-1024]!	; 0x400
    269c:	000000ca 	andeq	r0, r0, sl, asr #1
    26a0:	056c0c00 	strbeq	r0, [ip, #-3072]!	; 0xc00
    26a4:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    26a8:	0000a205 	andeq	sl, r0, r5, lsl #4
    26ac:	440b0200 	strmi	r0, [fp], #-512	; 0x200
    26b0:	2a040052 	bcs	102800 <_Min_Stack_Size+0x102400>
    26b4:	0000ca05 	andeq	ip, r0, r5, lsl #20
    26b8:	760c0400 	strvc	r0, [ip], -r0, lsl #8
    26bc:	04000005 	streq	r0, [r0], #-5
    26c0:	00a2052b 	adceq	r0, r2, fp, lsr #10
    26c4:	0b060000 	bleq	1826cc <_Min_Stack_Size+0x1822cc>
    26c8:	00525242 	subseq	r5, r2, r2, asr #4
    26cc:	ca052c04 	bgt	14d6e4 <_Min_Stack_Size+0x14d2e4>
    26d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    26d4:	0005800c 	andeq	r8, r5, ip
    26d8:	052d0400 	streq	r0, [sp, #-1024]!	; 0x400
    26dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    26e0:	52430b0a 	subpl	r0, r3, #10240	; 0x2800
    26e4:	2e040031 	mcrcs	0, 0, r0, cr4, cr1, {1}
    26e8:	0000ca05 	andeq	ip, r0, r5, lsl #20
    26ec:	6c0c0c00 	stcvs	12, cr0, [ip], {-0}
    26f0:	04000004 	streq	r0, [r0], #-4
    26f4:	00a2052f 	adceq	r0, r2, pc, lsr #10
    26f8:	0b0e0000 	bleq	382700 <_Min_Stack_Size+0x382300>
    26fc:	00325243 	eorseq	r5, r2, r3, asr #4
    2700:	ca053004 	bgt	14e718 <_Min_Stack_Size+0x14e318>
    2704:	10000000 	andne	r0, r0, r0
    2708:	0005960c 	andeq	r9, r5, ip, lsl #12
    270c:	05310400 	ldreq	r0, [r1, #-1024]!	; 0x400
    2710:	000000a2 	andeq	r0, r0, r2, lsr #1
    2714:	52430b12 	subpl	r0, r3, #18432	; 0x4800
    2718:	32040033 	andcc	r0, r4, #51	; 0x33
    271c:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2720:	a00c1400 	andge	r1, ip, r0, lsl #8
    2724:	04000005 	streq	r0, [r0], #-5
    2728:	00a20533 	adceq	r0, r2, r3, lsr r5
    272c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    2730:	000011ec 	andeq	r1, r0, ip, ror #3
    2734:	ca053404 	bgt	14f74c <_Min_Stack_Size+0x14f34c>
    2738:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    273c:	0005aa0c 	andeq	sl, r5, ip, lsl #20
    2740:	05350400 	ldreq	r0, [r5, #-1024]!	; 0x400
    2744:	000000a2 	andeq	r0, r0, r2, lsr #1
    2748:	4209001a 	andmi	r0, r9, #26
    274c:	04000012 	streq	r0, [r0], #-18
    2750:	01240536 	teqeq	r4, r6, lsr r5
    2754:	100d0000 	andne	r0, sp, r0
    2758:	02273005 	eoreq	r3, r7, #5
    275c:	750e0000 	strvc	r0, [lr, #-0]
    2760:	0500000b 	streq	r0, [r0, #-11]
    2764:	0000b832 	andeq	fp, r0, r2, lsr r8
    2768:	460e0000 	strmi	r0, [lr], -r0
    276c:	0500000d 	streq	r0, [r0, #-13]
    2770:	0000b833 	andeq	fp, r0, r3, lsr r8
    2774:	e20e0400 	and	r0, lr, #0, 8
    2778:	0500000f 	streq	r0, [r0, #-15]
    277c:	0000b834 	andeq	fp, r0, r4, lsr r8
    2780:	3c0e0800 	stccc	8, cr0, [lr], {-0}
    2784:	0500000c 	streq	r0, [r0, #-12]
    2788:	0000b835 	andeq	fp, r0, r5, lsr r8
    278c:	03000c00 	movweq	r0, #3072	; 0xc00
    2790:	0000118c 	andeq	r1, r0, ip, lsl #3
    2794:	01ee3605 	mvneq	r3, r5, lsl #12
    2798:	100d0000 	andne	r0, sp, r0
    279c:	02833606 	addeq	r3, r3, #6291456	; 0x600000
    27a0:	c80e0000 	stmdagt	lr, {}	; <UNPREDICTABLE>
    27a4:	06000012 			; <UNDEFINED> instruction: 0x06000012
    27a8:	0000b838 	andeq	fp, r0, r8, lsr r8
    27ac:	9c0e0000 	stcls	0, cr0, [lr], {-0}
    27b0:	06000012 			; <UNDEFINED> instruction: 0x06000012
    27b4:	0000a23e 	andeq	sl, r0, lr, lsr r2
    27b8:	500e0400 	andpl	r0, lr, r0, lsl #8
    27bc:	06000012 			; <UNDEFINED> instruction: 0x06000012
    27c0:	0000a241 	andeq	sl, r0, r1, asr #4
    27c4:	7d0e0600 	stcvc	6, cr0, [lr, #-0]
    27c8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    27cc:	0000a244 	andeq	sl, r0, r4, asr #4
    27d0:	670e0800 	strvs	r0, [lr, -r0, lsl #16]
    27d4:	06000014 			; <UNDEFINED> instruction: 0x06000014
    27d8:	0000a24b 	andeq	sl, r0, fp, asr #4
    27dc:	3a0e0a00 	bcc	384fe4 <_Min_Stack_Size+0x384be4>
    27e0:	06000014 			; <UNDEFINED> instruction: 0x06000014
    27e4:	0000a24e 	andeq	sl, r0, lr, asr #4
    27e8:	03000c00 	movweq	r0, #3072	; 0xc00
    27ec:	000013ef 	andeq	r1, r0, pc, ror #7
    27f0:	02325106 	eorseq	r5, r2, #-2147483647	; 0x80000001
    27f4:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    27f8:	02c75706 	sbceq	r5, r7, #1572864	; 0x180000
    27fc:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
    2800:	06000014 			; <UNDEFINED> instruction: 0x06000014
    2804:	0000a25a 	andeq	sl, r0, sl, asr r2
    2808:	910e0000 	mrsls	r0, (UNDEF: 14)
    280c:	06000015 			; <UNDEFINED> instruction: 0x06000015
    2810:	0000a25d 	andeq	sl, r0, sp, asr r2
    2814:	e10e0200 	mrs	r0, LR_fiq
    2818:	06000011 			; <UNDEFINED> instruction: 0x06000011
    281c:	0000a260 	andeq	sl, r0, r0, ror #4
    2820:	ba0e0400 	blt	383828 <_Min_Stack_Size+0x383428>
    2824:	06000012 			; <UNDEFINED> instruction: 0x06000012
    2828:	0000a263 	andeq	sl, r0, r3, ror #4
    282c:	03000600 	movweq	r0, #1536	; 0x600
    2830:	0000125f 	andeq	r1, r0, pc, asr r2
    2834:	028e6606 	addeq	r6, lr, #6291456	; 0x600000
    2838:	430f0000 	movwmi	r0, #61440	; 0xf000
    283c:	01000013 	tsteq	r0, r3, lsl r0
    2840:	002714bb 	strhteq	r1, [r7], -fp
    2844:	00011408 	andeq	r1, r1, r8, lsl #8
    2848:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    284c:	10000002 	andne	r0, r0, r2
    2850:	0000141d 	andeq	r1, r0, sp, lsl r4
    2854:	02f6bb01 	rscseq	fp, r6, #1024	; 0x400
    2858:	91020000 	mrsls	r0, (UNDEF: 2)
    285c:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    2860:	000001e2 	andeq	r0, r0, r2, ror #3
    2864:	00121c0f 	andseq	r1, r2, pc, lsl #24
    2868:	28f60100 	ldmcs	r6!, {r8}^
    286c:	74080028 	strvc	r0, [r8], #-40	; 0x28
    2870:	01000001 	tsteq	r0, r1
    2874:	0003749c 	muleq	r3, ip, r4
    2878:	141d1000 	ldrne	r1, [sp], #-0
    287c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2880:	000002f6 	strdeq	r0, [r0], -r6
    2884:	10549102 	subsne	r9, r4, r2, lsl #2
    2888:	00001517 	andeq	r1, r0, r7, lsl r5
    288c:	0374f601 	cmneq	r4, #1048576	; 0x100000
    2890:	91020000 	mrsls	r0, (UNDEF: 2)
    2894:	03751250 	cmneq	r5, #80, 4
    2898:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    289c:	000000b8 	strheq	r0, [r0], -r8
    28a0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    28a4:	000012e6 	andeq	r1, r0, r6, ror #5
    28a8:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    28ac:	91020000 	mrsls	r0, (UNDEF: 2)
    28b0:	11d21270 	bicsne	r1, r2, r0, ror r2
    28b4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    28b8:	000000b8 	strheq	r0, [r0], -r8
    28bc:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    28c0:	000014e8 	andeq	r1, r0, r8, ror #9
    28c4:	00b8fa01 	adcseq	pc, r8, r1, lsl #20
    28c8:	91020000 	mrsls	r0, (UNDEF: 2)
    28cc:	15281268 	strne	r1, [r8, #-616]!	; 0x268
    28d0:	fb010000 	blx	428da <_Min_Stack_Size+0x424da>
    28d4:	00000227 	andeq	r0, r0, r7, lsr #4
    28d8:	00589102 	subseq	r9, r8, r2, lsl #2
    28dc:	02830411 	addeq	r0, r3, #285212672	; 0x11000000
    28e0:	70130000 	andsvc	r0, r3, r0
    28e4:	01000015 	tsteq	r0, r5, lsl r0
    28e8:	299c0167 	ldmibcs	ip, {r0, r1, r2, r5, r6, r8}
    28ec:	00380800 	eorseq	r0, r8, r0, lsl #16
    28f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    28f4:	000003a0 	andeq	r0, r0, r0, lsr #7
    28f8:	00151714 	andseq	r1, r5, r4, lsl r7
    28fc:	01670100 	cmneq	r7, r0, lsl #2
    2900:	00000374 	andeq	r0, r0, r4, ror r3
    2904:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2908:	00153913 	andseq	r3, r5, r3, lsl r9
    290c:	017b0100 	cmneq	fp, r0, lsl #2
    2910:	080029d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp}
    2914:	00000052 	andeq	r0, r0, r2, asr r0
    2918:	03e49c01 	mvneq	r9, #256	; 0x100
    291c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2920:	01000014 	tsteq	r0, r4, lsl r0
    2924:	02f6017b 	rscseq	r0, r6, #-1073741794	; 0xc000001e
    2928:	91020000 	mrsls	r0, (UNDEF: 2)
    292c:	1350146c 	cmpne	r0, #108, 8	; 0x6c000000
    2930:	7b010000 	blvc	42938 <_Min_Stack_Size+0x42538>
    2934:	0003e401 	andeq	lr, r3, r1, lsl #8
    2938:	68910200 	ldmvs	r1, {r9}
    293c:	00037515 	andeq	r7, r3, r5, lsl r5
    2940:	017d0100 	cmneq	sp, r0, lsl #2
    2944:	000000b8 	strheq	r0, [r0], -r8
    2948:	00749102 	rsbseq	r9, r4, r2, lsl #2
    294c:	02c70411 	sbceq	r0, r7, #285212672	; 0x11000000
    2950:	8a130000 	bhi	4c2958 <_Min_Stack_Size+0x4c2558>
    2954:	01000013 	tsteq	r0, r3, lsl r0
    2958:	2a28019a 	bcs	a02fc8 <_Min_Stack_Size+0xa02bc8>
    295c:	002a0800 	eoreq	r0, sl, r0, lsl #16
    2960:	9c010000 	stcls	0, cr0, [r1], {-0}
    2964:	00000410 	andeq	r0, r0, r0, lsl r4
    2968:	00135014 	andseq	r5, r3, r4, lsl r0
    296c:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2970:	000003e4 	andeq	r0, r0, r4, ror #7
    2974:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2978:	00127613 	andseq	r7, r2, r3, lsl r6
    297c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2980:	08002a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp}
    2984:	0000003e 	andeq	r0, r0, lr, lsr r0
    2988:	04459c01 	strbeq	r9, [r5], #-3073	; 0xc01
    298c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2990:	01000014 	tsteq	r0, r4, lsl r0
    2994:	02f601ab 	rscseq	r0, r6, #-1073741782	; 0xc000002a
    2998:	91020000 	mrsls	r0, (UNDEF: 2)
    299c:	06781474 			; <UNDEFINED> instruction: 0x06781474
    29a0:	ab010000 	blge	429a8 <_Min_Stack_Size+0x425a8>
    29a4:	00011801 	andeq	r1, r1, r1, lsl #16
    29a8:	73910200 	orrsvc	r0, r1, #0, 4
    29ac:	12091300 	andne	r1, r9, #0, 6
    29b0:	c5010000 	strgt	r0, [r1, #-0]
    29b4:	002a9401 	eoreq	r9, sl, r1, lsl #8
    29b8:	00003808 	andeq	r3, r0, r8, lsl #16
    29bc:	7a9c0100 	bvc	fe702dc4 <_estack+0xde6d2dc4>
    29c0:	14000004 	strne	r0, [r0], #-4
    29c4:	0000141d 	andeq	r1, r0, sp, lsl r4
    29c8:	f601c501 			; <UNDEFINED> instruction: 0xf601c501
    29cc:	02000002 	andeq	r0, r0, #2
    29d0:	81147491 			; <UNDEFINED> instruction: 0x81147491
    29d4:	01000015 	tsteq	r0, r5, lsl r0
    29d8:	009701c5 	addseq	r0, r7, r5, asr #3
    29dc:	91020000 	mrsls	r0, (UNDEF: 2)
    29e0:	87130073 			; <UNDEFINED> instruction: 0x87130073
    29e4:	01000014 	tsteq	r0, r4, lsl r0
    29e8:	2acc01da 	bcs	ff303158 <_estack+0xdf2d3158>
    29ec:	00420800 	subeq	r0, r2, r0, lsl #16
    29f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29f4:	000004af 	andeq	r0, r0, pc, lsr #9
    29f8:	00141d14 	andseq	r1, r4, r4, lsl sp
    29fc:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2a00:	000002f6 	strdeq	r0, [r0], -r6
    2a04:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2a08:	00000678 	andeq	r0, r0, r8, ror r6
    2a0c:	1801da01 	stmdane	r1, {r0, r9, fp, ip, lr, pc}
    2a10:	02000001 	andeq	r0, r0, #1
    2a14:	13007391 	movwne	r7, #913	; 0x391
    2a18:	00001424 	andeq	r1, r0, r4, lsr #8
    2a1c:	1001f401 	andne	pc, r1, r1, lsl #8
    2a20:	3e08002b 	cdpcc	0, 0, cr0, cr8, cr11, {1}
    2a24:	01000000 	mrseq	r0, (UNDEF: 0)
    2a28:	0004e49c 	muleq	r4, ip, r4
    2a2c:	141d1400 	ldrne	r1, [sp], #-1024	; 0x400
    2a30:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2a34:	0002f601 	andeq	pc, r2, r1, lsl #12
    2a38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a3c:	00067814 	andeq	r7, r6, r4, lsl r8
    2a40:	01f40100 	mvnseq	r0, r0, lsl #2
    2a44:	00000118 	andeq	r0, r0, r8, lsl r1
    2a48:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2a4c:	00128013 	andseq	r8, r2, r3, lsl r0
    2a50:	022d0100 	eoreq	r0, sp, #0, 2
    2a54:	08002b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp}
    2a58:	00000022 	andeq	r0, r0, r2, lsr #32
    2a5c:	05199c01 	ldreq	r9, [r9, #-3073]	; 0xc01
    2a60:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2a64:	01000014 	tsteq	r0, r4, lsl r0
    2a68:	02f6022d 	rscseq	r0, r6, #-805306366	; 0xd0000002
    2a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a70:	18491474 	stmdane	r9, {r2, r4, r5, r6, sl, ip}^
    2a74:	2d010000 	stccs	0, cr0, [r1, #-0]
    2a78:	0000a202 	andeq	sl, r0, r2, lsl #4
    2a7c:	72910200 	addsvc	r0, r1, #0, 4
    2a80:	15f51600 	ldrbne	r1, [r5, #1536]!	; 0x600
    2a84:	3d010000 	stccc	0, cr0, [r1, #-0]
    2a88:	0000a202 	andeq	sl, r0, r2, lsl #4
    2a8c:	002b7400 	eoreq	r7, fp, r0, lsl #8
    2a90:	00002008 	andeq	r2, r0, r8
    2a94:	439c0100 	orrsmi	r0, ip, #0, 2
    2a98:	14000005 	strne	r0, [r0], #-5
    2a9c:	0000141d 	andeq	r1, r0, sp, lsl r4
    2aa0:	f6023d01 			; <UNDEFINED> instruction: 0xf6023d01
    2aa4:	02000002 	andeq	r0, r0, #2
    2aa8:	13007491 	movwne	r7, #1169	; 0x491
    2aac:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    2ab0:	94027101 	strls	r7, [r2], #-257	; 0x101
    2ab4:	3808002b 	stmdacc	r8, {r0, r1, r3, r5}
    2ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    2abc:	0005789c 	muleq	r5, ip, r8
    2ac0:	141d1400 	ldrne	r1, [sp], #-1024	; 0x400
    2ac4:	71010000 	mrsvc	r0, (UNDEF: 1)
    2ac8:	0002f602 	andeq	pc, r2, r2, lsl #12
    2acc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ad0:	00147214 	andseq	r7, r4, r4, lsl r2
    2ad4:	02710100 	rsbseq	r0, r1, #0, 2
    2ad8:	00000097 	muleq	r0, r7, r0
    2adc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2ae0:	0011f113 	andseq	pc, r1, r3, lsl r1	; <UNPREDICTABLE>
    2ae4:	02850100 	addeq	r0, r5, #0, 2
    2ae8:	08002bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp}
    2aec:	0000003e 	andeq	r0, r0, lr, lsr r0
    2af0:	05ad9c01 	streq	r9, [sp, #3073]!	; 0xc01
    2af4:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2af8:	01000014 	tsteq	r0, r4, lsl r0
    2afc:	02f60285 	rscseq	r0, r6, #1342177288	; 0x50000008
    2b00:	91020000 	mrsls	r0, (UNDEF: 2)
    2b04:	06781474 			; <UNDEFINED> instruction: 0x06781474
    2b08:	85010000 	strhi	r0, [r1, #-0]
    2b0c:	00011802 	andeq	r1, r1, r2, lsl #16
    2b10:	73910200 	orrsvc	r0, r1, #0, 4
    2b14:	15491300 	strbne	r1, [r9, #-768]	; 0x300
    2b18:	a0010000 	andge	r0, r1, r0
    2b1c:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    2b20:	00003608 	andeq	r3, r0, r8, lsl #12
    2b24:	e29c0100 	adds	r0, ip, #0, 2
    2b28:	14000005 	strne	r0, [r0], #-5
    2b2c:	0000141d 	andeq	r1, r0, sp, lsl r4
    2b30:	f602a001 			; <UNDEFINED> instruction: 0xf602a001
    2b34:	02000002 	andeq	r0, r0, #2
    2b38:	8f147491 	svchi	0x00147491
    2b3c:	01000012 	tsteq	r0, r2, lsl r0
    2b40:	00a202a0 	adceq	r0, r2, r0, lsr #5
    2b44:	91020000 	mrsls	r0, (UNDEF: 2)
    2b48:	17130072 			; <UNDEFINED> instruction: 0x17130072
    2b4c:	01000013 	tsteq	r0, r3, lsl r0
    2b50:	2c4402e5 	sfmcs	f0, 2, [r4], {229}	; 0xe5
    2b54:	00360800 	eorseq	r0, r6, r0, lsl #16
    2b58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b5c:	00000617 	andeq	r0, r0, r7, lsl r6
    2b60:	00141d14 	andseq	r1, r4, r4, lsl sp
    2b64:	02e50100 	rsceq	r0, r5, #0, 2
    2b68:	000002f6 	strdeq	r0, [r0], -r6
    2b6c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2b70:	00001227 	andeq	r1, r0, r7, lsr #4
    2b74:	a202e501 	andge	lr, r2, #4194304	; 0x400000
    2b78:	02000000 	andeq	r0, r0, #0
    2b7c:	13007291 	movwne	r7, #657	; 0x291
    2b80:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
    2b84:	7c02f701 	stcvc	7, cr15, [r2], {1}
    2b88:	3e08002c 	cdpcc	0, 0, cr0, cr8, cr12, {1}
    2b8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2b90:	00064c9c 	muleq	r6, ip, ip
    2b94:	141d1400 	ldrne	r1, [sp], #-1024	; 0x400
    2b98:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2b9c:	0002f602 	andeq	pc, r2, r2, lsl #12
    2ba0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ba4:	00067814 	andeq	r7, r6, r4, lsl r8
    2ba8:	02f70100 	rscseq	r0, r7, #0, 2
    2bac:	00000118 	andeq	r0, r0, r8, lsl r1
    2bb0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2bb4:	0013df13 	andseq	sp, r3, r3, lsl pc
    2bb8:	030f0100 	movweq	r0, #61696	; 0xf100
    2bbc:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
    2bc0:	00000022 	andeq	r0, r0, r2, lsr #32
    2bc4:	06729c01 	ldrbteq	r9, [r2], -r1, lsl #24
    2bc8:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2bcc:	01000014 	tsteq	r0, r4, lsl r0
    2bd0:	02f6030f 	rscseq	r0, r6, #1006632960	; 0x3c000000
    2bd4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bd8:	5c130074 	ldcpl	0, cr0, [r3], {116}	; 0x74
    2bdc:	01000015 	tsteq	r0, r5, lsl r0
    2be0:	2ce00344 	stclcs	3, cr0, [r0], #272	; 0x110
    2be4:	003e0800 	eorseq	r0, lr, r0, lsl #16
    2be8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bec:	000006a7 	andeq	r0, r0, r7, lsr #13
    2bf0:	00141d14 	andseq	r1, r4, r4, lsl sp
    2bf4:	03440100 	movteq	r0, #16640	; 0x4100
    2bf8:	000002f6 	strdeq	r0, [r0], -r6
    2bfc:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2c00:	00000678 	andeq	r0, r0, r8, ror r6
    2c04:	18034401 	stmdane	r3, {r0, sl, lr}
    2c08:	02000001 	andeq	r0, r0, #1
    2c0c:	13007391 	movwne	r7, #913	; 0x391
    2c10:	000013cc 	andeq	r1, r0, ip, asr #7
    2c14:	20039801 	andcs	r9, r3, r1, lsl #16
    2c18:	3a08002d 	bcc	202cd4 <_Min_Stack_Size+0x2028d4>
    2c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c20:	0006dc9c 	muleq	r6, ip, ip
    2c24:	141d1400 	ldrne	r1, [sp], #-1024	; 0x400
    2c28:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2c2c:	0002f603 	andeq	pc, r2, r3, lsl #12
    2c30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2c34:	00130714 	andseq	r0, r3, r4, lsl r7
    2c38:	03980100 	orrseq	r0, r8, #0, 2
    2c3c:	00000097 	muleq	r0, r7, r0
    2c40:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2c44:	00145413 	andseq	r5, r4, r3, lsl r4
    2c48:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2c4c:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
    2c50:	0000003e 	andeq	r0, r0, lr, lsr r0
    2c54:	07119c01 	ldreq	r9, [r1, -r1, lsl #24]
    2c58:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2c5c:	01000014 	tsteq	r0, r4, lsl r0
    2c60:	02f603ab 	rscseq	r0, r6, #-1409286142	; 0xac000002
    2c64:	91020000 	mrsls	r0, (UNDEF: 2)
    2c68:	06781474 			; <UNDEFINED> instruction: 0x06781474
    2c6c:	ab010000 	blge	42c74 <_Min_Stack_Size+0x42874>
    2c70:	00011803 	andeq	r1, r1, r3, lsl #16
    2c74:	73910200 	orrsvc	r0, r1, #0, 4
    2c78:	13661300 	cmnne	r6, #0, 6
    2c7c:	c4010000 	strgt	r0, [r1], #-0
    2c80:	002d9c03 	eoreq	r9, sp, r3, lsl #24
    2c84:	00003e08 	andeq	r3, r0, r8, lsl #28
    2c88:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    2c8c:	14000007 	strne	r0, [r0], #-7
    2c90:	0000141d 	andeq	r1, r0, sp, lsl r4
    2c94:	f603c401 			; <UNDEFINED> instruction: 0xf603c401
    2c98:	02000002 	andeq	r0, r0, #2
    2c9c:	78147491 	ldmdavc	r4, {r0, r4, r7, sl, ip, sp, lr}
    2ca0:	01000006 	tsteq	r0, r6
    2ca4:	011803c4 	tsteq	r8, r4, asr #7
    2ca8:	91020000 	mrsls	r0, (UNDEF: 2)
    2cac:	bd130073 	ldclt	0, cr0, [r3, #-460]	; 0xfffffe34
    2cb0:	01000014 	tsteq	r0, r4, lsl r0
    2cb4:	2ddc040b 	cfldrdcs	mvd0, [ip, #44]	; 0x2c
    2cb8:	00360800 	eorseq	r0, r6, r0, lsl #16
    2cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cc0:	0000077b 	andeq	r0, r0, fp, ror r7
    2cc4:	00141d14 	andseq	r1, r4, r4, lsl sp
    2cc8:	040b0100 	streq	r0, [fp], #-256	; 0x100
    2ccc:	000002f6 	strdeq	r0, [r0], -r6
    2cd0:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2cd4:	000012d7 	ldrdeq	r1, [r0], -r7
    2cd8:	a2040b01 	andge	r0, r4, #1024	; 0x400
    2cdc:	02000000 	andeq	r0, r0, #0
    2ce0:	13007291 	movwne	r7, #657	; 0x291
    2ce4:	000014da 	ldrdeq	r1, [r0], -sl
    2ce8:	14041d01 	strne	r1, [r4], #-3329	; 0xd01
    2cec:	3e08002e 	cdpcc	0, 0, cr0, cr8, cr14, {1}
    2cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    2cf4:	0007b09c 	muleq	r7, ip, r0
    2cf8:	141d1400 	ldrne	r1, [sp], #-1024	; 0x400
    2cfc:	1d010000 	stcne	0, cr0, [r1, #-0]
    2d00:	0002f604 	andeq	pc, r2, r4, lsl #12
    2d04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d08:	00067814 	andeq	r7, r6, r4, lsl r8
    2d0c:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    2d10:	00000118 	andeq	r0, r0, r8, lsl r1
    2d14:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2d18:	0012ad13 	andseq	sl, r2, r3, lsl sp
    2d1c:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2d20:	08002e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp}
    2d24:	00000046 	andeq	r0, r0, r6, asr #32
    2d28:	07f49c01 	ldrbeq	r9, [r4, r1, lsl #24]!
    2d2c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2d30:	01000014 	tsteq	r0, r4, lsl r0
    2d34:	02f6044b 	rscseq	r0, r6, #1258291200	; 0x4b000000
    2d38:	91020000 	mrsls	r0, (UNDEF: 2)
    2d3c:	14101474 	ldrne	r1, [r0], #-1140	; 0x474
    2d40:	4b010000 	blmi	42d48 <_Min_Stack_Size+0x42948>
    2d44:	0000a204 	andeq	sl, r0, r4, lsl #4
    2d48:	72910200 	addsvc	r0, r1, #0, 4
    2d4c:	00067814 	andeq	r7, r6, r4, lsl r8
    2d50:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2d54:	00000118 	andeq	r0, r0, r8, lsl r1
    2d58:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2d5c:	00140113 	andseq	r0, r4, r3, lsl r1
    2d60:	04cf0100 	strbeq	r0, [pc], #256	; 2d68 <_Min_Stack_Size+0x2968>
    2d64:	08002e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp}
    2d68:	0000008e 	andeq	r0, r0, lr, lsl #1
    2d6c:	08749c01 	ldmdaeq	r4!, {r0, sl, fp, ip, pc}^
    2d70:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2d74:	01000014 	tsteq	r0, r4, lsl r0
    2d78:	02f604cf 	rscseq	r0, r6, #-822083584	; 0xcf000000
    2d7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d80:	150e1464 	strne	r1, [lr, #-1124]	; 0x464
    2d84:	cf010000 	svcgt	0x00010000
    2d88:	0000a204 	andeq	sl, r0, r4, lsl #4
    2d8c:	62910200 	addsvs	r0, r1, #0, 4
    2d90:	00067814 	andeq	r7, r6, r4, lsl r8
    2d94:	04cf0100 	strbeq	r0, [pc], #256	; 2d9c <_Min_Stack_Size+0x299c>
    2d98:	00000118 	andeq	r0, r0, r8, lsl r1
    2d9c:	15619102 	strbne	r9, [r1, #-258]!	; 0x102
    2da0:	00001607 	andeq	r1, r0, r7, lsl #12
    2da4:	b804d101 	stmdalt	r4, {r0, r8, ip, lr, pc}
    2da8:	02000000 	andeq	r0, r0, #0
    2dac:	81157091 			; <UNDEFINED> instruction: 0x81157091
    2db0:	01000014 	tsteq	r0, r4, lsl r0
    2db4:	00b804d1 	ldrsbteq	r0, [r8], r1
    2db8:	91020000 	mrsls	r0, (UNDEF: 2)
    2dbc:	159c156c 	ldrne	r1, [ip, #1388]	; 0x56c
    2dc0:	d1010000 	mrsle	r0, (UNDEF: 1)
    2dc4:	0000b804 	andeq	fp, r0, r4, lsl #16
    2dc8:	68910200 	ldmvs	r1, {r9}
    2dcc:	0013a015 	andseq	sl, r3, r5, lsl r0
    2dd0:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2dd4:	000000b8 	strheq	r0, [r0], -r8
    2dd8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ddc:	0014fa16 	andseq	pc, r4, r6, lsl sl	; <UNPREDICTABLE>
    2de0:	050f0100 	streq	r0, [pc, #-256]	; 2ce8 <_Min_Stack_Size+0x28e8>
    2de4:	000000ea 	andeq	r0, r0, sl, ror #1
    2de8:	08002f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, sp}
    2dec:	00000038 	andeq	r0, r0, r8, lsr r0
    2df0:	08bc9c01 	ldmeq	ip!, {r0, sl, fp, ip, pc}
    2df4:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2df8:	01000014 	tsteq	r0, r4, lsl r0
    2dfc:	02f6050f 	rscseq	r0, r6, #62914560	; 0x3c00000
    2e00:	91020000 	mrsls	r0, (UNDEF: 2)
    2e04:	1338146c 	teqne	r8, #108, 8	; 0x6c000000
    2e08:	0f010000 	svceq	0x00010000
    2e0c:	0000a205 	andeq	sl, r0, r5, lsl #4
    2e10:	6a910200 	bvs	fe443618 <_estack+0xde413618>
    2e14:	00096315 	andeq	r6, r9, r5, lsl r3
    2e18:	05110100 	ldreq	r0, [r1, #-256]	; 0x100
    2e1c:	000000ea 	andeq	r0, r0, sl, ror #1
    2e20:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2e24:	0013ab13 	andseq	sl, r3, r3, lsl fp
    2e28:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    2e2c:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
    2e30:	00000020 	andeq	r0, r0, r0, lsr #32
    2e34:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    2e38:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2e3c:	01000014 	tsteq	r0, r4, lsl r0
    2e40:	02f60540 	rscseq	r0, r6, #64, 10	; 0x10000000
    2e44:	91020000 	mrsls	r0, (UNDEF: 2)
    2e48:	13381474 	teqne	r8, #116, 8	; 0x74000000
    2e4c:	40010000 	andmi	r0, r1, r0
    2e50:	0000a205 	andeq	sl, r0, r5, lsl #4
    2e54:	72910200 	addsvc	r0, r1, #0, 4
    2e58:	149e1600 	ldrne	r1, [lr], #1536	; 0x600
    2e5c:	62010000 	andvs	r0, r1, #0
    2e60:	0000f605 	andeq	pc, r0, r5, lsl #12
    2e64:	002f8400 	eoreq	r8, pc, r0, lsl #8
    2e68:	0000ae08 	andeq	sl, r0, r8, lsl #28
    2e6c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    2e70:	14000009 	strne	r0, [r0], #-9
    2e74:	0000141d 	andeq	r1, r0, sp, lsl r4
    2e78:	f6056201 			; <UNDEFINED> instruction: 0xf6056201
    2e7c:	02000002 	andeq	r0, r0, #2
    2e80:	0e146491 	cfcmpseq	r6, mvf4, mvf1
    2e84:	01000015 	tsteq	r0, r5, lsl r0
    2e88:	00a20562 	adceq	r0, r2, r2, ror #10
    2e8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e90:	14801562 	strne	r1, [r0], #1378	; 0x562
    2e94:	64010000 	strvs	r0, [r1], #-0
    2e98:	0000b805 	andeq	fp, r0, r5, lsl #16
    2e9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ea0:	00159c15 	andseq	r9, r5, r5, lsl ip
    2ea4:	05640100 	strbeq	r0, [r4, #-256]!	; 0x100
    2ea8:	000000b8 	strheq	r0, [r0], -r8
    2eac:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    2eb0:	00001607 	andeq	r1, r0, r7, lsl #12
    2eb4:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    2eb8:	02000000 	andeq	r0, r0, #0
    2ebc:	63156891 	tstvs	r5, #9502720	; 0x910000
    2ec0:	01000009 	tsteq	r0, r9
    2ec4:	00f60565 	rscseq	r0, r6, r5, ror #10
    2ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    2ecc:	ef130073 	svc	0x00130073
    2ed0:	01000012 	tsteq	r0, r2, lsl r0
    2ed4:	303405ac 	eorscc	r0, r4, ip, lsr #11
    2ed8:	00380800 	eorseq	r0, r8, r0, lsl #16
    2edc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ee0:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    2ee4:	00141d14 	andseq	r1, r4, r4, lsl sp
    2ee8:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    2eec:	000002f6 	strdeq	r0, [r0], -r6
    2ef0:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    2ef4:	0000150e 	andeq	r1, r0, lr, lsl #10
    2ef8:	a205ac01 	andge	sl, r5, #256	; 0x100
    2efc:	02000000 	andeq	r0, r0, #0
    2f00:	80156a91 	mulshi	r5, r1, sl
    2f04:	01000014 	tsteq	r0, r4, lsl r0
    2f08:	00a205ae 	adceq	r0, r2, lr, lsr #11
    2f0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f10:	159c1576 	ldrne	r1, [ip, #1398]	; 0x576
    2f14:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2f18:	0000a205 	andeq	sl, r0, r5, lsl #4
    2f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f20:	015e1700 	cmpeq	lr, r0, lsl #14
    2f24:	a7070000 	strge	r0, [r7, -r0]
    2f28:	0000cf06 	andeq	ip, r0, r6, lsl #30
    2f2c:	02900000 	addseq	r0, r0, #0
    2f30:	00040000 	andeq	r0, r4, r0
    2f34:	00000999 	muleq	r0, r9, r9
    2f38:	00210104 	eoreq	r0, r1, r4, lsl #2
    2f3c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2f40:	14000016 	strne	r0, [r0], #-22
    2f44:	d8000001 	stmdale	r0, {r0}
    2f48:	00000003 	andeq	r0, r0, r3
    2f4c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2f50:	02000015 	andeq	r0, r0, #21
    2f54:	014d0601 	cmpeq	sp, r1, lsl #12
    2f58:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    2f5c:	02000002 	andeq	r0, r0, #2
    2f60:	0000371d 	andeq	r3, r0, sp, lsl r7
    2f64:	08010200 	stmdaeq	r1, {r9}
    2f68:	0000014b 	andeq	r0, r0, fp, asr #2
    2f6c:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    2f70:	02000001 	andeq	r0, r0, #1
    2f74:	000e0702 	andeq	r0, lr, r2, lsl #14
    2f78:	77030000 	strvc	r0, [r3, -r0]
    2f7c:	02000001 	andeq	r0, r0, #1
    2f80:	0000573f 	andeq	r5, r0, pc, lsr r7
    2f84:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2f88:	00000005 	andeq	r0, r0, r5
    2f8c:	0005b403 	andeq	fp, r5, r3, lsl #8
    2f90:	69410200 	stmdbvs	r1, {r9}^
    2f94:	02000000 	andeq	r0, r0, #0
    2f98:	012e0704 	teqeq	lr, r4, lsl #14
    2f9c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2fa0:	00000005 	andeq	r0, r0, r5
    2fa4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2fa8:	00000129 	andeq	r0, r0, r9, lsr #2
    2fac:	69050404 	stmdbvs	r5, {r2, sl}
    2fb0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2fb4:	01330704 	teqeq	r3, r4, lsl #14
    2fb8:	70030000 	andvc	r0, r3, r0
    2fbc:	03000002 	movweq	r0, #2
    2fc0:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2fc4:	01790300 	cmneq	r9, r0, lsl #6
    2fc8:	41030000 	mrsmi	r0, (UNDEF: 3)
    2fcc:	0000004c 	andeq	r0, r0, ip, asr #32
    2fd0:	0005b603 	andeq	fp, r5, r3, lsl #12
    2fd4:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    2fd8:	02000000 	andeq	r0, r0, #0
    2fdc:	01910704 	orrseq	r0, r1, r4, lsl #14
    2fe0:	a2050000 	andge	r0, r5, #0
    2fe4:	06000000 	streq	r0, [r0], -r0
    2fe8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fec:	000000c9 	andeq	r0, r0, r9, asr #1
    2ff0:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2ff4:	06000100 	streq	r0, [r0], -r0, lsl #2
    2ff8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2ffc:	000000d9 	ldrdeq	r0, [r0], -r9
    3000:	0000ad07 	andeq	sl, r0, r7, lsl #26
    3004:	05000300 	streq	r0, [r0, #-768]	; 0x300
    3008:	00000097 	muleq	r0, r7, r0
    300c:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    3010:	0000f401 	andeq	pc, r0, r1, lsl #8
    3014:	087e0900 	ldmdaeq	lr!, {r8, fp}^
    3018:	0a000000 	beq	3020 <_Min_Stack_Size+0x2c20>
    301c:	00544553 	subseq	r4, r4, r3, asr r5
    3020:	880b0001 	stmdahi	fp, {r0}
    3024:	0400001e 	streq	r0, [r0], #-30
    3028:	00de01f7 	ldrsheq	r0, [lr], #23
    302c:	01080000 	mrseq	r0, (UNDEF: 8)
    3030:	1601f904 	strne	pc, [r1], -r4, lsl #18
    3034:	09000001 	stmdbeq	r0, {r0}
    3038:	00000686 	andeq	r0, r0, r6, lsl #13
    303c:	07de0900 	ldrbeq	r0, [lr, r0, lsl #18]
    3040:	00010000 	andeq	r0, r1, r0
    3044:	0007af0b 	andeq	sl, r7, fp, lsl #30
    3048:	01f90400 	mvnseq	r0, r0, lsl #8
    304c:	00000100 	andeq	r0, r0, r0, lsl #2
    3050:	e604240c 	str	r2, [r4], -ip, lsl #8
    3054:	00016d03 	andeq	r6, r1, r3, lsl #26
    3058:	16760d00 	ldrbtne	r0, [r6], -r0, lsl #26
    305c:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
    3060:	0000b403 	andeq	fp, r0, r3, lsl #8
    3064:	500e0000 	andpl	r0, lr, r0
    3068:	0400434d 	streq	r4, [r0], #-845	; 0x34d
    306c:	00b403e9 	adcseq	r0, r4, r9, ror #7
    3070:	0d040000 	stceq	0, cr0, [r4, #-0]
    3074:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
    3078:	6d03ea04 	vstrvs	s28, [r3, #-16]
    307c:	08000001 	stmdaeq	r0, {r0}
    3080:	0016970d 	andseq	r9, r6, sp, lsl #14
    3084:	03eb0400 	mvneq	r0, #0, 8
    3088:	000000b9 	strheq	r0, [r0], -r9
    308c:	16700d18 			; <UNDEFINED> instruction: 0x16700d18
    3090:	ec040000 	stc	0, cr0, [r4], {-0}
    3094:	0000b403 	andeq	fp, r0, r3, lsl #8
    3098:	05002000 	streq	r2, [r0, #-0]
    309c:	000000c9 	andeq	r0, r0, r9, asr #1
    30a0:	0017570b 	andseq	r5, r7, fp, lsl #14
    30a4:	03ed0400 	mvneq	r0, #0, 8
    30a8:	00000122 	andeq	r0, r0, r2, lsr #2
    30ac:	00164c0f 	andseq	r4, r6, pc, lsl #24
    30b0:	6c640100 	stfvse	f0, [r4], #-0
    30b4:	1a080030 	bne	20317c <_Min_Stack_Size+0x202d7c>
    30b8:	01000000 	mrseq	r0, (UNDEF: 0)
    30bc:	177b109c 			; <UNDEFINED> instruction: 0x177b109c
    30c0:	76010000 	strvc	r0, [r1], -r0
    30c4:	08003088 	stmdaeq	r0, {r3, r7, ip, sp}
    30c8:	00000020 	andeq	r0, r0, r0, lsr #32
    30cc:	01b39c01 			; <UNDEFINED> instruction: 0x01b39c01
    30d0:	44110000 	ldrmi	r0, [r1], #-0
    30d4:	01000017 	tsteq	r0, r7, lsl r0
    30d8:	00008c76 	andeq	r8, r0, r6, ror ip
    30dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    30e0:	16a01000 	strtne	r1, [r0], r0
    30e4:	8b010000 	blhi	430ec <_Min_Stack_Size+0x42cec>
    30e8:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
    30ec:	00000020 	andeq	r0, r0, r0, lsr #32
    30f0:	01d79c01 	bicseq	r9, r7, r1, lsl #24
    30f4:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    30f8:	01000006 	tsteq	r0, r6
    30fc:	0001168b 	andeq	r1, r1, fp, lsl #13
    3100:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3104:	165a1000 	ldrbne	r1, [sl], -r0
    3108:	a2010000 	andge	r0, r1, #0
    310c:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    3110:	0000007c 	andeq	r0, r0, ip, ror r0
    3114:	02179c01 	andseq	r9, r7, #256	; 0x100
    3118:	66110000 	ldrvs	r0, [r1], -r0
    311c:	01000017 	tsteq	r0, r7, lsl r0
    3120:	00008ca2 	andeq	r8, r0, r2, lsr #25
    3124:	6f910200 	svcvs	0x00910200
    3128:	00171411 	andseq	r1, r7, r1, lsl r4
    312c:	8ca20100 	stfhis	f0, [r2]
    3130:	02000000 	andeq	r0, r0, #0
    3134:	74126e91 	ldrvc	r6, [r2], #-3729	; 0xe91
    3138:	0100706d 	tsteq	r0, sp, rrx
    313c:	0000a2a4 	andeq	sl, r0, r4, lsr #5
    3140:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3144:	17241000 	strne	r1, [r4, -r0]!
    3148:	b7010000 	strlt	r0, [r1, -r0]
    314c:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
    3150:	0000001c 	andeq	r0, r0, ip, lsl r0
    3154:	023b9c01 	eorseq	r9, fp, #256	; 0x100
    3158:	7d110000 	ldcvc	0, cr0, [r1, #-0]
    315c:	01000016 	tsteq	r0, r6, lsl r0
    3160:	0000a2b7 			; <UNDEFINED> instruction: 0x0000a2b7
    3164:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3168:	16101000 	ldrne	r1, [r0], -r0
    316c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3170:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
    3174:	00000020 	andeq	r0, r0, r0, lsr #32
    3178:	025f9c01 	subseq	r9, pc, #256	; 0x100
    317c:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    3180:	01000006 	tsteq	r0, r6
    3184:	000116c8 	andeq	r1, r1, r8, asr #13
    3188:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    318c:	162b1300 	strtne	r1, [fp], -r0, lsl #6
    3190:	d5010000 	strle	r0, [r1, #-0]
    3194:	000000f4 	strdeq	r0, [r0], -r4
    3198:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
    319c:	00000034 	andeq	r0, r0, r4, lsr r0
    31a0:	02879c01 	addeq	r9, r7, #256	; 0x100
    31a4:	63140000 	tstvs	r4, #0
    31a8:	01000009 	tsteq	r0, r9
    31ac:	0000f4d7 	ldrdeq	pc, [r0], -r7
    31b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    31b4:	015e1500 	cmpeq	lr, r0, lsl #10
    31b8:	a7050000 	strge	r0, [r5, -r0]
    31bc:	0000d906 	andeq	sp, r0, r6, lsl #18
    31c0:	0b870000 	bleq	fe1c31c8 <_estack+0xde1931c8>
    31c4:	00040000 	andeq	r0, r4, r0
    31c8:	00000acc 	andeq	r0, r0, ip, asr #21
    31cc:	00210104 	eoreq	r0, r1, r4, lsl #2
    31d0:	b1010000 	mrslt	r0, (UNDEF: 1)
    31d4:	14000019 	strne	r0, [r0], #-25
    31d8:	18000001 	stmdane	r0, {r0}
    31dc:	00000004 	andeq	r0, r0, r4
    31e0:	f3000000 	vhadd.u8	d0, d0, d0
    31e4:	02000016 	andeq	r0, r0, #22
    31e8:	014d0601 	cmpeq	sp, r1, lsl #12
    31ec:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    31f0:	02000002 	andeq	r0, r0, #2
    31f4:	0000371d 	andeq	r3, r0, sp, lsl r7
    31f8:	08010200 	stmdaeq	r1, {r9}
    31fc:	0000014b 	andeq	r0, r0, fp, asr #2
    3200:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    3204:	03000001 	movweq	r0, #1
    3208:	00000438 	andeq	r0, r0, r8, lsr r4
    320c:	00502b02 	subseq	r2, r0, r2, lsl #22
    3210:	02020000 	andeq	r0, r2, #0
    3214:	00000e07 	andeq	r0, r0, r7, lsl #28
    3218:	01770300 	cmneq	r7, r0, lsl #6
    321c:	3f020000 	svccc	0x00020000
    3220:	00000062 	andeq	r0, r0, r2, rrx
    3224:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    3228:	03000000 	movweq	r0, #0
    322c:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    3230:	00744102 	rsbseq	r4, r4, r2, lsl #2
    3234:	04020000 	streq	r0, [r2], #-0
    3238:	00012e07 	andeq	r2, r1, r7, lsl #28
    323c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    3240:	00000000 	andeq	r0, r0, r0
    3244:	29070802 	stmdbcs	r7, {r1, fp}
    3248:	04000001 	streq	r0, [r0], #-1
    324c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3250:	04020074 	streq	r0, [r2], #-116	; 0x74
    3254:	00013307 	andeq	r3, r1, r7, lsl #6
    3258:	02700300 	rsbseq	r0, r0, #0, 6
    325c:	2a030000 	bcs	c3264 <_Min_Stack_Size+0xc2e64>
    3260:	0000002c 	andeq	r0, r0, ip, lsr #32
    3264:	00043a03 	andeq	r3, r4, r3, lsl #20
    3268:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    326c:	03000000 	movweq	r0, #0
    3270:	00000179 	andeq	r0, r0, r9, ror r1
    3274:	00574103 	subseq	r4, r7, r3, lsl #2
    3278:	b6030000 	strlt	r0, [r3], -r0
    327c:	03000005 	movweq	r0, #5
    3280:	00006942 	andeq	r6, r0, r2, asr #18
    3284:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3288:	00000191 	muleq	r0, r1, r1
    328c:	0000b805 	andeq	fp, r0, r5, lsl #16
    3290:	00a20500 	adceq	r0, r2, r0, lsl #10
    3294:	ad050000 	stcge	0, cr0, [r5, #-0]
    3298:	06000000 	streq	r0, [r0], -r0
    329c:	01f70401 	mvnseq	r0, r1, lsl #8
    32a0:	000000ef 	andeq	r0, r0, pc, ror #1
    32a4:	00087e07 	andeq	r7, r8, r7, lsl #28
    32a8:	53080000 	movwpl	r0, #32768	; 0x8000
    32ac:	01005445 	tsteq	r0, r5, asr #8
    32b0:	1e880900 	cdpne	9, 8, cr0, cr8, cr0, {0}
    32b4:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    32b8:	0000d901 	andeq	sp, r0, r1, lsl #18
    32bc:	4dd60900 	ldclmi	9, cr0, [r6]
    32c0:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    32c4:	0000d901 	andeq	sp, r0, r1, lsl #18
    32c8:	04010600 	streq	r0, [r1], #-1536	; 0x600
    32cc:	011d01f9 			; <UNDEFINED> instruction: 0x011d01f9
    32d0:	86070000 	strhi	r0, [r7], -r0
    32d4:	00000006 	andeq	r0, r0, r6
    32d8:	0007de07 	andeq	sp, r7, r7, lsl #28
    32dc:	09000100 	stmdbeq	r0, {r8}
    32e0:	000007af 	andeq	r0, r0, pc, lsr #15
    32e4:	0701f904 	streq	pc, [r1, -r4, lsl #18]
    32e8:	06000001 	streq	r0, [r0], -r1
    32ec:	01fc0401 	mvnseq	r0, r1, lsl #8
    32f0:	0000013f 	andeq	r0, r0, pc, lsr r1
    32f4:	004fb407 	subeq	fp, pc, r7, lsl #8
    32f8:	76070000 	strvc	r0, [r7], -r0
    32fc:	01000011 	tsteq	r0, r1, lsl r0
    3300:	0d020900 	stceq	9, cr0, [r2, #-0]
    3304:	fc040000 	stc2	0, cr0, [r4], {-0}
    3308:	00012901 	andeq	r2, r1, r1, lsl #18
    330c:	04280a00 	strteq	r0, [r8], #-2560	; 0xa00
    3310:	025803f3 	subseq	r0, r8, #-872415229	; 0xcc000003
    3314:	430b0000 	movwmi	r0, #45056	; 0xb000
    3318:	04003152 	streq	r3, [r0], #-338	; 0x152
    331c:	00cf03f5 	strdeq	r0, [pc], #53	; <UNPREDICTABLE>
    3320:	0c000000 	stceq	0, cr0, [r0], {-0}
    3324:	0000056c 	andeq	r0, r0, ip, ror #10
    3328:	a203f604 	andge	pc, r3, #4, 12	; 0x400000
    332c:	02000000 	andeq	r0, r0, #0
    3330:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    3334:	03f70400 	mvnseq	r0, #0, 8
    3338:	000000cf 	andeq	r0, r0, pc, asr #1
    333c:	05760c04 	ldrbeq	r0, [r6, #-3076]!	; 0xc04
    3340:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
    3344:	0000a203 	andeq	sl, r0, r3, lsl #4
    3348:	860c0600 	strhi	r0, [ip], -r0, lsl #12
    334c:	04000018 	streq	r0, [r0], #-24
    3350:	00cf03f9 	strdeq	r0, [pc], #57	; <UNPREDICTABLE>
    3354:	0c080000 	stceq	0, cr0, [r8], {-0}
    3358:	00000580 	andeq	r0, r0, r0, lsl #11
    335c:	a203fa04 	andge	pc, r3, #4, 20	; 0x4000
    3360:	0a000000 	beq	3368 <_Min_Stack_Size+0x2f68>
    3364:	001b7f0c 	andseq	r7, fp, ip, lsl #30
    3368:	03fb0400 	mvnseq	r0, #0, 8
    336c:	000000cf 	andeq	r0, r0, pc, asr #1
    3370:	046c0c0c 	strbteq	r0, [ip], #-3084	; 0xc0c
    3374:	fc040000 	stc2	0, cr0, [r4], {-0}
    3378:	0000a203 	andeq	sl, r0, r3, lsl #4
    337c:	440b0e00 	strmi	r0, [fp], #-3584	; 0xe00
    3380:	fd040052 	stc2	0, cr0, [r4, #-328]	; 0xfffffeb8
    3384:	0000cf03 	andeq	ip, r0, r3, lsl #30
    3388:	960c1000 	strls	r1, [ip], -r0
    338c:	04000005 	streq	r0, [r0], #-5
    3390:	00a203fe 	strdeq	r0, [r2], lr	; <UNPREDICTABLE>
    3394:	0b120000 	bleq	48339c <_Min_Stack_Size+0x482f9c>
    3398:	00315253 	eorseq	r5, r1, r3, asr r2
    339c:	cf03ff04 	svcgt	0x0003ff04
    33a0:	14000000 	strne	r0, [r0], #-0
    33a4:	0005a00c 	andeq	sl, r5, ip
    33a8:	04000400 	streq	r0, [r0], #-1024	; 0x400
    33ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    33b0:	52530b16 	subspl	r0, r3, #22528	; 0x5800
    33b4:	01040032 	tsteq	r4, r2, lsr r0
    33b8:	0000cf04 	andeq	ip, r0, r4, lsl #30
    33bc:	aa0c1800 	bge	3093c4 <_Min_Stack_Size+0x308fc4>
    33c0:	04000005 	streq	r0, [r0], #-5
    33c4:	00a20402 	adceq	r0, r2, r2, lsl #8
    33c8:	0b1a0000 	bleq	6833d0 <_Min_Stack_Size+0x682fd0>
    33cc:	00524343 	subseq	r4, r2, r3, asr #6
    33d0:	cf040304 	svcgt	0x00040304
    33d4:	1c000000 	stcne	0, cr0, [r0], {-0}
    33d8:	001a310c 	andseq	r3, sl, ip, lsl #2
    33dc:	04040400 	streq	r0, [r4], #-1024	; 0x400
    33e0:	000000a2 	andeq	r0, r0, r2, lsr #1
    33e4:	17e80c1e 			; <UNDEFINED> instruction: 0x17e80c1e
    33e8:	05040000 	streq	r0, [r4, #-0]
    33ec:	0000cf04 	andeq	ip, r0, r4, lsl #30
    33f0:	3b0c2000 	blcc	30b3f8 <_Min_Stack_Size+0x30aff8>
    33f4:	0400001a 	streq	r0, [r0], #-26
    33f8:	00a20406 	adceq	r0, r2, r6, lsl #8
    33fc:	0c220000 	stceq	0, cr0, [r2], #-0
    3400:	0000188b 	andeq	r1, r0, fp, lsl #17
    3404:	cf040704 	svcgt	0x00040704
    3408:	24000000 	strcs	r0, [r0], #-0
    340c:	001a450c 	andseq	r4, sl, ip, lsl #10
    3410:	04080400 	streq	r0, [r8], #-1024	; 0x400
    3414:	000000a2 	andeq	r0, r0, r2, lsr #1
    3418:	bc090026 	stclt	0, cr0, [r9], {38}	; 0x26
    341c:	04000018 	streq	r0, [r0], #-24
    3420:	014b0409 	cmpeq	fp, r9, lsl #8
    3424:	100d0000 	andne	r0, sp, r0
    3428:	029d3005 	addseq	r3, sp, #5
    342c:	750e0000 	strvc	r0, [lr, #-0]
    3430:	0500000b 	streq	r0, [r0, #-11]
    3434:	0000b832 	andeq	fp, r0, r2, lsr r8
    3438:	460e0000 	strmi	r0, [lr], -r0
    343c:	0500000d 	streq	r0, [r0, #-13]
    3440:	0000b833 	andeq	fp, r0, r3, lsr r8
    3444:	e20e0400 	and	r0, lr, #0, 8
    3448:	0500000f 	streq	r0, [r0, #-15]
    344c:	0000b834 	andeq	fp, r0, r4, lsr r8
    3450:	3c0e0800 	stccc	8, cr0, [lr], {-0}
    3454:	0500000c 	streq	r0, [r0, #-12]
    3458:	0000b835 	andeq	fp, r0, r5, lsr r8
    345c:	03000c00 	movweq	r0, #3072	; 0xc00
    3460:	0000118c 	andeq	r1, r0, ip, lsl #3
    3464:	02643605 	rsbeq	r3, r4, #5242880	; 0x500000
    3468:	100d0000 	andne	r0, sp, r0
    346c:	02f93606 	rscseq	r3, r9, #6291456	; 0x600000
    3470:	5f0e0000 	svcpl	0x000e0000
    3474:	06000018 			; <UNDEFINED> instruction: 0x06000018
    3478:	0000b838 	andeq	fp, r0, r8, lsr r8
    347c:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    3480:	06000018 			; <UNDEFINED> instruction: 0x06000018
    3484:	0000a23b 	andeq	sl, r0, fp, lsr r2
    3488:	120e0400 	andne	r0, lr, #0, 8
    348c:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3490:	0000a23e 	andeq	sl, r0, lr, lsr r2
    3494:	4f0e0600 	svcmi	0x000e0600
    3498:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    349c:	0000a241 	andeq	sl, r0, r1, asr #4
    34a0:	6a0e0800 	bvs	3854a8 <_Min_Stack_Size+0x3850a8>
    34a4:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    34a8:	0000a244 	andeq	sl, r0, r4, asr #4
    34ac:	9a0e0a00 	bls	385cb4 <_Min_Stack_Size+0x3858b4>
    34b0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    34b4:	0000a247 	andeq	sl, r0, r7, asr #4
    34b8:	03000c00 	movweq	r0, #3072	; 0xc00
    34bc:	00001a0c 	andeq	r1, r0, ip, lsl #20
    34c0:	02a84906 	adceq	r4, r8, #98304	; 0x18000
    34c4:	840f0000 	strhi	r0, [pc], #-0	; 34cc <_Min_Stack_Size+0x30cc>
    34c8:	01000019 	tsteq	r0, r9, lsl r0
    34cc:	0031b489 	eorseq	fp, r1, r9, lsl #9
    34d0:	00007408 	andeq	r7, r0, r8, lsl #8
    34d4:	289c0100 	ldmcs	ip, {r8}
    34d8:	10000003 	andne	r0, r0, r3
    34dc:	00001946 	andeq	r1, r0, r6, asr #18
    34e0:	03288901 	teqeq	r8, #16384	; 0x4000
    34e4:	91020000 	mrsls	r0, (UNDEF: 2)
    34e8:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    34ec:	00000258 	andeq	r0, r0, r8, asr r2
    34f0:	0018fe0f 	andseq	pc, r8, pc, lsl #28
    34f4:	28b40100 	ldmcs	r4!, {r8}
    34f8:	84080032 	strhi	r0, [r8], #-50	; 0x32
    34fc:	01000001 	tsteq	r0, r1
    3500:	0003a69c 	muleq	r3, ip, r6
    3504:	19461000 	stmdbne	r6, {ip}^
    3508:	b4010000 	strlt	r0, [r1], #-0
    350c:	00000328 	andeq	r0, r0, r8, lsr #6
    3510:	10549102 	subsne	r9, r4, r2, lsl #2
    3514:	00001828 	andeq	r1, r0, r8, lsr #16
    3518:	03a6b401 			; <UNDEFINED> instruction: 0x03a6b401
    351c:	91020000 	mrsls	r0, (UNDEF: 2)
    3520:	03751250 	cmneq	r5, #80, 4
    3524:	b6010000 	strlt	r0, [r1], -r0
    3528:	000000a2 	andeq	r0, r0, r2, lsr #1
    352c:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
    3530:	00001837 	andeq	r1, r0, r7, lsr r8
    3534:	00a2b601 	adceq	fp, r2, r1, lsl #12
    3538:	91020000 	mrsls	r0, (UNDEF: 2)
    353c:	5a121272 	bpl	487f0c <_Min_Stack_Size+0x487b0c>
    3540:	b7010000 	strlt	r0, [r1, -r0]
    3544:	000000a2 	andeq	r0, r0, r2, lsr #1
    3548:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    354c:	00001a23 	andeq	r1, r0, r3, lsr #20
    3550:	00b8b801 	adcseq	fp, r8, r1, lsl #16
    3554:	91020000 	mrsls	r0, (UNDEF: 2)
    3558:	1a5f126c 	bne	17c7f10 <_Min_Stack_Size+0x17c7b10>
    355c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    3560:	0000029d 	muleq	r0, sp, r2
    3564:	005c9102 	subseq	r9, ip, r2, lsl #2
    3568:	02f90411 	rscseq	r0, r9, #285212672	; 0x11000000
    356c:	77130000 	ldrvc	r0, [r3, -r0]
    3570:	01000018 	tsteq	r0, r8, lsl r0
    3574:	33ac0121 			; <UNDEFINED> instruction: 0x33ac0121
    3578:	003c0800 	eorseq	r0, ip, r0, lsl #16
    357c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3580:	000003d2 	ldrdeq	r0, [r0], -r2
    3584:	00182814 	andseq	r2, r8, r4, lsl r8
    3588:	01210100 	teqeq	r1, r0, lsl #2
    358c:	000003a6 	andeq	r0, r0, r6, lsr #7
    3590:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3594:	001a2913 	andseq	r2, sl, r3, lsl r9
    3598:	01390100 	teqeq	r9, r0, lsl #2
    359c:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
    35a0:	0000003e 	andeq	r0, r0, lr, lsr r0
    35a4:	04079c01 	streq	r9, [r7], #-3073	; 0xc01
    35a8:	46140000 	ldrmi	r0, [r4], -r0
    35ac:	01000019 	tsteq	r0, r9, lsl r0
    35b0:	03280139 	teqeq	r8, #1073741838	; 0x4000000e
    35b4:	91020000 	mrsls	r0, (UNDEF: 2)
    35b8:	06781474 			; <UNDEFINED> instruction: 0x06781474
    35bc:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    35c0:	00011d01 	andeq	r1, r1, r1, lsl #26
    35c4:	73910200 	orrsvc	r0, r1, #0, 4
    35c8:	1bb71300 	blne	fedc81d0 <_estack+0xded981d0>
    35cc:	56010000 	strpl	r0, [r1], -r0
    35d0:	00342801 	eorseq	r2, r4, r1, lsl #16
    35d4:	00003e08 	andeq	r3, r0, r8, lsl #28
    35d8:	3c9c0100 	ldfccs	f0, [ip], {0}
    35dc:	14000004 	strne	r0, [r0], #-4
    35e0:	00001946 	andeq	r1, r0, r6, asr #18
    35e4:	28015601 	stmdacs	r1, {r0, r9, sl, ip, lr}
    35e8:	02000003 	andeq	r0, r0, #3
    35ec:	78147491 	ldmdavc	r4, {r0, r4, r7, sl, ip, sp, lr}
    35f0:	01000006 	tsteq	r0, r6
    35f4:	011d0156 	tsteq	sp, r6, asr r1
    35f8:	91020000 	mrsls	r0, (UNDEF: 2)
    35fc:	c8130073 	ldmdagt	r3, {r0, r1, r4, r5, r6}
    3600:	01000018 	tsteq	r0, r8, lsl r0
    3604:	34680173 	strbtcc	r0, [r8], #-371	; 0x173
    3608:	003e0800 	eorseq	r0, lr, r0, lsl #16
    360c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3610:	00000480 	andeq	r0, r0, r0, lsl #9
    3614:	00194614 	andseq	r4, r9, r4, lsl r6
    3618:	01730100 	cmneq	r3, r0, lsl #2
    361c:	00000328 	andeq	r0, r0, r8, lsr #6
    3620:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    3624:	00001b84 	andeq	r1, r0, r4, lsl #23
    3628:	a2017301 	andge	r7, r1, #67108864	; 0x4000000
    362c:	02000000 	andeq	r0, r0, #0
    3630:	75156a91 	ldrvc	r6, [r5, #-2705]	; 0xa91
    3634:	01000003 	tsteq	r0, r3
    3638:	00a20175 	adceq	r0, r2, r5, ror r1
    363c:	91020000 	mrsls	r0, (UNDEF: 2)
    3640:	aa130076 	bge	4c3820 <_Min_Stack_Size+0x4c3420>
    3644:	01000017 	tsteq	r0, r7, lsl r0
    3648:	34a8018f 	strtcc	r0, [r8], #399	; 0x18f
    364c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3650:	9c010000 	stcls	0, cr0, [r1], {-0}
    3654:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    3658:	00194614 	andseq	r4, r9, r4, lsl r6
    365c:	018f0100 	orreq	r0, pc, r0, lsl #2
    3660:	00000328 	andeq	r0, r0, r8, lsr #6
    3664:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3668:	00000678 	andeq	r0, r0, r8, ror r6
    366c:	1d018f01 	stcne	15, cr8, [r1, #-4]
    3670:	02000001 	andeq	r0, r0, #1
    3674:	13007391 	movwne	r7, #913	; 0x391
    3678:	00001b96 	muleq	r0, r6, fp
    367c:	e801a701 	stmda	r1, {r0, r8, r9, sl, sp, pc}
    3680:	3e080034 	mcrcc	0, 0, r0, cr8, cr4, {1}
    3684:	01000000 	mrseq	r0, (UNDEF: 0)
    3688:	0004ea9c 	muleq	r4, ip, sl
    368c:	19461400 	stmdbne	r6, {sl, ip}^
    3690:	a7010000 	strge	r0, [r1, -r0]
    3694:	00032801 	andeq	r2, r3, r1, lsl #16
    3698:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    369c:	00067814 	andeq	r7, r6, r4, lsl r8
    36a0:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    36a4:	0000011d 	andeq	r0, r0, sp, lsl r1
    36a8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    36ac:	001b6213 	andseq	r6, fp, r3, lsl r2
    36b0:	01c30100 	biceq	r0, r3, r0, lsl #2
    36b4:	08003528 	stmdaeq	r0, {r3, r5, r8, sl, ip, sp}
    36b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    36bc:	052e9c01 	streq	r9, [lr, #-3073]!	; 0xc01
    36c0:	46140000 	ldrmi	r0, [r4], -r0
    36c4:	01000019 	tsteq	r0, r9, lsl r0
    36c8:	032801c3 	teqeq	r8, #-1073741776	; 0xc0000030
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	14781474 	ldrbtne	r1, [r8], #-1140	; 0x474
    36d4:	c3010000 	movwgt	r0, #4096	; 0x1000
    36d8:	00009701 	andeq	r9, r0, r1, lsl #14
    36dc:	73910200 	orrsvc	r0, r1, #0, 4
    36e0:	00194b14 	andseq	r4, r9, r4, lsl fp
    36e4:	01c30100 	biceq	r0, r3, r0, lsl #2
    36e8:	00000097 	muleq	r0, r7, r0
    36ec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    36f0:	001b0b13 	andseq	r0, fp, r3, lsl fp
    36f4:	01de0100 	bicseq	r0, lr, r0, lsl #2
    36f8:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
    36fc:	0000003e 	andeq	r0, r0, lr, lsr r0
    3700:	05639c01 	strbeq	r9, [r3, #-3073]!	; 0xc01
    3704:	46140000 	ldrmi	r0, [r4], -r0
    3708:	01000019 	tsteq	r0, r9, lsl r0
    370c:	032801de 	teqeq	r8, #-2147483593	; 0x80000037
    3710:	91020000 	mrsls	r0, (UNDEF: 2)
    3714:	06781474 			; <UNDEFINED> instruction: 0x06781474
    3718:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    371c:	00011d01 	andeq	r1, r1, r1, lsl #26
    3720:	73910200 	orrsvc	r0, r1, #0, 4
    3724:	18121300 	ldmdane	r2, {r8, r9, ip}
    3728:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    372c:	0035a401 	eorseq	sl, r5, r1, lsl #8
    3730:	00004008 	andeq	r4, r0, r8
    3734:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    3738:	14000005 	strne	r0, [r0], #-5
    373c:	00001946 	andeq	r1, r0, r6, asr #18
    3740:	2801f501 	stmdacs	r1, {r0, r8, sl, ip, sp, lr, pc}
    3744:	02000003 	andeq	r0, r0, #3
    3748:	78146c91 	ldmdavc	r4, {r0, r4, r7, sl, fp, sp, lr}
    374c:	01000014 	tsteq	r0, r4, lsl r0
    3750:	009701f5 			; <UNDEFINED> instruction: 0x009701f5
    3754:	91020000 	mrsls	r0, (UNDEF: 2)
    3758:	0375156b 	cmneq	r5, #448790528	; 0x1ac00000
    375c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3760:	0000a201 	andeq	sl, r0, r1, lsl #4
    3764:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3768:	1adf1300 	bne	ff7c8370 <_estack+0xdf798370>
    376c:	10010000 	andne	r0, r1, r0
    3770:	0035e402 	eorseq	lr, r5, r2, lsl #8
    3774:	00003e08 	andeq	r3, r0, r8, lsl #28
    3778:	dc9c0100 	ldfles	f0, [ip], {0}
    377c:	14000005 	strne	r0, [r0], #-5
    3780:	00001946 	andeq	r1, r0, r6, asr #18
    3784:	28021001 	stmdacs	r2, {r0, ip}
    3788:	02000003 	andeq	r0, r0, #3
    378c:	78147491 	ldmdavc	r4, {r0, r4, r7, sl, ip, sp, lr}
    3790:	01000006 	tsteq	r0, r6
    3794:	011d0210 	tsteq	sp, r0, lsl r2
    3798:	91020000 	mrsls	r0, (UNDEF: 2)
    379c:	8f130073 	svchi	0x00130073
    37a0:	01000019 	tsteq	r0, r9, lsl r0
    37a4:	36240228 	strtcc	r0, [r4], -r8, lsr #4
    37a8:	003e0800 	eorseq	r0, lr, r0, lsl #16
    37ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    37b0:	00000611 	andeq	r0, r0, r1, lsl r6
    37b4:	00194614 	andseq	r4, r9, r4, lsl r6
    37b8:	02280100 	eoreq	r0, r8, #0, 2
    37bc:	00000328 	andeq	r0, r0, r8, lsr #6
    37c0:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    37c4:	00000678 	andeq	r0, r0, r8, ror r6
    37c8:	1d022801 	stcne	8, cr2, [r2, #-4]
    37cc:	02000001 	andeq	r0, r0, #1
    37d0:	13007391 	movwne	r7, #913	; 0x391
    37d4:	00001b4d 	andeq	r1, r0, sp, asr #22
    37d8:	64024201 	strvs	r4, [r2], #-513	; 0x201
    37dc:	42080036 	andmi	r0, r8, #54	; 0x36
    37e0:	01000000 	mrseq	r0, (UNDEF: 0)
    37e4:	0006469c 	muleq	r6, ip, r6
    37e8:	19461400 	stmdbne	r6, {sl, ip}^
    37ec:	42010000 	andmi	r0, r1, #0
    37f0:	00032802 	andeq	r2, r3, r2, lsl #16
    37f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    37f8:	00067814 	andeq	r7, r6, r4, lsl r8
    37fc:	02420100 	subeq	r0, r2, #0, 2
    3800:	0000011d 	andeq	r0, r0, sp, lsl r1
    3804:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3808:	0017c713 	andseq	ip, r7, r3, lsl r7
    380c:	025a0100 	subseq	r0, sl, #0, 2
    3810:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
    3814:	0000003e 	andeq	r0, r0, lr, lsr r0
    3818:	067b9c01 	ldrbteq	r9, [fp], -r1, lsl #24
    381c:	46140000 	ldrmi	r0, [r4], -r0
    3820:	01000019 	tsteq	r0, r9, lsl r0
    3824:	0328025a 	teqeq	r8, #-1610612731	; 0xa0000005
    3828:	91020000 	mrsls	r0, (UNDEF: 2)
    382c:	06781474 			; <UNDEFINED> instruction: 0x06781474
    3830:	5a010000 	bpl	43838 <_Min_Stack_Size+0x43438>
    3834:	00011d02 	andeq	r1, r1, r2, lsl #26
    3838:	73910200 	orrsvc	r0, r1, #0, 4
    383c:	1ac31300 	bne	ff0c8444 <_estack+0xdf098444>
    3840:	74010000 	strvc	r0, [r1], #-0
    3844:	0036e802 	eorseq	lr, r6, r2, lsl #16
    3848:	00004008 	andeq	r4, r0, r8
    384c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    3850:	14000006 	strne	r0, [r0], #-6
    3854:	00001946 	andeq	r1, r0, r6, asr #18
    3858:	28027401 	stmdacs	r2, {r0, sl, ip, sp, lr}
    385c:	02000003 	andeq	r0, r0, #3
    3860:	12147491 	andsne	r7, r4, #-1862270976	; 0x91000000
    3864:	01000019 	tsteq	r0, r9, lsl r0
    3868:	00a20274 	adceq	r0, r2, r4, ror r2
    386c:	91020000 	mrsls	r0, (UNDEF: 2)
    3870:	fb130072 	blx	4c3a42 <_Min_Stack_Size+0x4c3642>
    3874:	01000017 	tsteq	r0, r7, lsl r0
    3878:	3728029a 			; <UNDEFINED> instruction: 0x3728029a
    387c:	00400800 	subeq	r0, r0, r0, lsl #16
    3880:	9c010000 	stcls	0, cr0, [r1], {-0}
    3884:	000006e5 	andeq	r0, r0, r5, ror #13
    3888:	00194614 	andseq	r4, r9, r4, lsl r6
    388c:	029a0100 	addseq	r0, sl, #0, 2
    3890:	00000328 	andeq	r0, r0, r8, lsr #6
    3894:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3898:	00001959 	andeq	r1, r0, r9, asr r9
    389c:	a2029a01 	andge	r9, r2, #4096	; 0x1000
    38a0:	02000000 	andeq	r0, r0, #0
    38a4:	13007291 	movwne	r7, #657	; 0x291
    38a8:	000018a7 	andeq	r1, r0, r7, lsr #17
    38ac:	6802b601 	stmdavs	r2, {r0, r9, sl, ip, sp, pc}
    38b0:	40080037 	andmi	r0, r8, r7, lsr r0
    38b4:	01000000 	mrseq	r0, (UNDEF: 0)
    38b8:	00071a9c 	muleq	r7, ip, sl
    38bc:	19461400 	stmdbne	r6, {sl, ip}^
    38c0:	b6010000 	strlt	r0, [r1], -r0
    38c4:	00032802 	andeq	r2, r3, r2, lsl #16
    38c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38cc:	00193714 	andseq	r3, r9, r4, lsl r7
    38d0:	02b60100 	adcseq	r0, r6, #0, 2
    38d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    38d8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    38dc:	00190713 	andseq	r0, r9, r3, lsl r7
    38e0:	02ce0100 	sbceq	r0, lr, #0, 2
    38e4:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
    38e8:	0000003e 	andeq	r0, r0, lr, lsr r0
    38ec:	074f9c01 	strbeq	r9, [pc, -r1, lsl #24]
    38f0:	46140000 	ldrmi	r0, [r4], -r0
    38f4:	01000019 	tsteq	r0, r9, lsl r0
    38f8:	032802ce 	teqeq	r8, #-536870900	; 0xe000000c
    38fc:	91020000 	mrsls	r0, (UNDEF: 2)
    3900:	06781474 			; <UNDEFINED> instruction: 0x06781474
    3904:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    3908:	00011d02 	andeq	r1, r1, r2, lsl #26
    390c:	73910200 	orrsvc	r0, r1, #0, 4
    3910:	18411300 	stmdane	r1, {r8, r9, ip}^
    3914:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3918:	0037e802 	eorseq	lr, r7, r2, lsl #16
    391c:	00001e08 	andeq	r1, r0, r8, lsl #28
    3920:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    3924:	14000007 	strne	r0, [r0], #-7
    3928:	00001946 	andeq	r1, r0, r6, asr #18
    392c:	2802f401 	stmdacs	r2, {r0, sl, ip, sp, lr, pc}
    3930:	02000003 	andeq	r0, r0, #3
    3934:	49147491 	ldmdbmi	r4, {r0, r4, r7, sl, ip, sp, lr}
    3938:	01000018 	tsteq	r0, r8, lsl r0
    393c:	009702f4 			; <UNDEFINED> instruction: 0x009702f4
    3940:	91020000 	mrsls	r0, (UNDEF: 2)
    3944:	7c160073 	ldcvc	0, cr0, [r6], {115}	; 0x73
    3948:	0100001a 	tsteq	r0, sl, lsl r0
    394c:	00970301 	addseq	r0, r7, r1, lsl #6
    3950:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    3954:	001c0800 	andseq	r0, ip, r0, lsl #16
    3958:	9c010000 	stcls	0, cr0, [r1], {-0}
    395c:	000007ae 	andeq	r0, r0, lr, lsr #15
    3960:	00194614 	andseq	r4, r9, r4, lsl r6
    3964:	03010100 	movweq	r0, #4352	; 0x1100
    3968:	00000328 	andeq	r0, r0, r8, lsr #6
    396c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3970:	00192713 	andseq	r2, r9, r3, lsl r7
    3974:	03200100 	teqeq	r0, #0, 2
    3978:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
    397c:	0000003e 	andeq	r0, r0, lr, lsr r0
    3980:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    3984:	46140000 	ldrmi	r0, [r4], -r0
    3988:	01000019 	tsteq	r0, r9, lsl r0
    398c:	03280320 	teqeq	r8, #32, 6	; 0x80000000
    3990:	91020000 	mrsls	r0, (UNDEF: 2)
    3994:	06781474 			; <UNDEFINED> instruction: 0x06781474
    3998:	20010000 	andcs	r0, r1, r0
    399c:	00011d03 	andeq	r1, r1, r3, lsl #26
    39a0:	73910200 	orrsvc	r0, r1, #0, 4
    39a4:	18e01300 	stmiane	r0!, {r8, r9, ip}^
    39a8:	3f010000 	svccc	0x00010000
    39ac:	00386403 	eorseq	r6, r8, r3, lsl #8
    39b0:	00004008 	andeq	r4, r0, r8
    39b4:	189c0100 	ldmne	ip, {r8}
    39b8:	14000008 	strne	r0, [r0], #-8
    39bc:	00001946 	andeq	r1, r0, r6, asr #18
    39c0:	28033f01 	stmdacs	r3, {r0, r8, r9, sl, fp, ip, sp}
    39c4:	02000003 	andeq	r0, r0, #3
    39c8:	21147491 			; <UNDEFINED> instruction: 0x21147491
    39cc:	0100001b 	tsteq	r0, fp, lsl r0
    39d0:	00a2033f 	adceq	r0, r2, pc, lsr r3
    39d4:	91020000 	mrsls	r0, (UNDEF: 2)
    39d8:	4e130072 	mrcmi	0, 0, r0, cr3, cr2, {3}
    39dc:	01000018 	tsteq	r0, r8, lsl r0
    39e0:	38a40357 	stmiacc	r4!, {r0, r1, r2, r4, r6, r8, r9}
    39e4:	003e0800 	eorseq	r0, lr, r0, lsl #16
    39e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    39ec:	0000084d 	andeq	r0, r0, sp, asr #16
    39f0:	00194614 	andseq	r4, r9, r4, lsl r6
    39f4:	03570100 	cmpeq	r7, #0, 2
    39f8:	00000328 	andeq	r0, r0, r8, lsr #6
    39fc:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3a00:	00000678 	andeq	r0, r0, r8, ror r6
    3a04:	1d035701 	stcne	7, cr5, [r3, #-4]
    3a08:	02000001 	andeq	r0, r0, #1
    3a0c:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3a10:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    3a14:	97036d01 	strls	r6, [r3, -r1, lsl #26]
    3a18:	e4000000 	str	r0, [r0], #-0
    3a1c:	20080038 	andcs	r0, r8, r8, lsr r0
    3a20:	01000000 	mrseq	r0, (UNDEF: 0)
    3a24:	0008779c 	muleq	r8, ip, r7
    3a28:	19461400 	stmdbne	r6, {sl, ip}^
    3a2c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3a30:	00032803 	andeq	r2, r3, r3, lsl #16
    3a34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a38:	1a011300 	bne	48640 <_Min_Stack_Size+0x48240>
    3a3c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3a40:	00390403 	eorseq	r0, r9, r3, lsl #8
    3a44:	00003e08 	andeq	r3, r0, r8, lsl #28
    3a48:	ac9c0100 	ldfges	f0, [ip], {0}
    3a4c:	14000008 	strne	r0, [r0], #-8
    3a50:	00001946 	andeq	r1, r0, r6, asr #18
    3a54:	28038e01 	stmdacs	r3, {r0, r9, sl, fp, pc}
    3a58:	02000003 	andeq	r0, r0, #3
    3a5c:	78147491 	ldmdavc	r4, {r0, r4, r7, sl, ip, sp, lr}
    3a60:	01000006 	tsteq	r0, r6
    3a64:	011d038e 	tsteq	sp, lr, lsl #7
    3a68:	91020000 	mrsls	r0, (UNDEF: 2)
    3a6c:	90130073 	andsls	r0, r3, r3, ror r0
    3a70:	01000018 	tsteq	r0, r8, lsl r0
    3a74:	394403a6 	stmdbcc	r4, {r1, r2, r5, r7, r8, r9}^
    3a78:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3a7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a80:	000008e1 	andeq	r0, r0, r1, ror #17
    3a84:	00194614 	andseq	r4, r9, r4, lsl r6
    3a88:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    3a8c:	00000328 	andeq	r0, r0, r8, lsr #6
    3a90:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3a94:	00000678 	andeq	r0, r0, r8, ror r6
    3a98:	1d03a601 	stcne	6, cr10, [r3, #-4]
    3a9c:	02000001 	andeq	r0, r0, #1
    3aa0:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3aa4:	00001ab2 			; <UNDEFINED> instruction: 0x00001ab2
    3aa8:	a2043001 	andge	r3, r4, #1
    3aac:	84000000 	strhi	r0, [r0], #-0
    3ab0:	2e080039 	mcrcs	0, 0, r0, cr8, cr9, {1}
    3ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ab8:	0009299c 	muleq	r9, ip, r9
    3abc:	19461400 	stmdbne	r6, {sl, ip}^
    3ac0:	30010000 	andcc	r0, r1, r0
    3ac4:	00032804 	andeq	r2, r3, r4, lsl #16
    3ac8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3acc:	0017db14 	andseq	sp, r7, r4, lsl fp
    3ad0:	04300100 	ldrteq	r0, [r0], #-256	; 0x100
    3ad4:	00000097 	muleq	r0, r7, r0
    3ad8:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    3adc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3ae0:	ca043201 	bgt	1102ec <_Min_Stack_Size+0x10feec>
    3ae4:	02000000 	andeq	r0, r0, #0
    3ae8:	13007491 	movwne	r7, #1169	; 0x491
    3aec:	000017ee 	andeq	r1, r0, lr, ror #15
    3af0:	b4044b01 	strlt	r4, [r4], #-2817	; 0xb01
    3af4:	46080039 			; <UNDEFINED> instruction: 0x46080039
    3af8:	01000000 	mrseq	r0, (UNDEF: 0)
    3afc:	00096d9c 	muleq	r9, ip, sp
    3b00:	19461400 	stmdbne	r6, {sl, ip}^
    3b04:	4b010000 	blmi	43b0c <_Min_Stack_Size+0x4370c>
    3b08:	00032804 	andeq	r2, r3, r4, lsl #16
    3b0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b10:	001a1c14 	andseq	r1, sl, r4, lsl ip
    3b14:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    3b18:	000000a2 	andeq	r0, r0, r2, lsr #1
    3b1c:	14729102 	ldrbtne	r9, [r2], #-258	; 0x102
    3b20:	00000678 	andeq	r0, r0, r8, ror r6
    3b24:	1d044b01 	vstrne	d4, [r4, #-4]
    3b28:	02000001 	andeq	r0, r0, #1
    3b2c:	16007191 			; <UNDEFINED> instruction: 0x16007191
    3b30:	000019a2 	andeq	r1, r0, r2, lsr #19
    3b34:	3f048601 	svccc	0x00048601
    3b38:	fc000001 	stc2	0, cr0, [r0], {1}
    3b3c:	60080039 	andvs	r0, r8, r9, lsr r0
    3b40:	01000000 	mrseq	r0, (UNDEF: 0)
    3b44:	0009e29c 	muleq	r9, ip, r2
    3b48:	19461400 	stmdbne	r6, {sl, ip}^
    3b4c:	86010000 	strhi	r0, [r1], -r0
    3b50:	00032804 	andeq	r2, r3, r4, lsl #16
    3b54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3b58:	001a7214 	andseq	r7, sl, r4, lsl r2
    3b5c:	04860100 	streq	r0, [r6], #256	; 0x100
    3b60:	000000b8 	strheq	r0, [r0], -r8
    3b64:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    3b68:	00001b43 	andeq	r1, r0, r3, asr #22
    3b6c:	b8048801 	stmdalt	r4, {r0, fp, pc}
    3b70:	02000000 	andeq	r0, r0, #0
    3b74:	f2157091 	vqadd.s16	d7, d21, d1
    3b78:	0100001a 	tsteq	r0, sl, lsl r0
    3b7c:	00b80489 	adcseq	r0, r8, r9, lsl #9
    3b80:	91020000 	mrsls	r0, (UNDEF: 2)
    3b84:	1af8156c 	bne	ffe0913c <_estack+0xdfdd913c>
    3b88:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    3b8c:	0000b804 	andeq	fp, r0, r4, lsl #16
    3b90:	68910200 	ldmvs	r1, {r9}
    3b94:	001b0415 	andseq	r0, fp, r5, lsl r4
    3b98:	048a0100 	streq	r0, [sl], #256	; 0x100
    3b9c:	0000013f 	andeq	r0, r0, pc, lsr r1
    3ba0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3ba4:	00196a16 	andseq	r6, r9, r6, lsl sl
    3ba8:	04b60100 	ldrteq	r0, [r6], #256	; 0x100
    3bac:	000000b8 	strheq	r0, [r0], -r8
    3bb0:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
    3bb4:	00000044 	andeq	r0, r0, r4, asr #32
    3bb8:	0a399c01 	beq	e6abc4 <_Min_Stack_Size+0xe6a7c4>
    3bbc:	46140000 	ldrmi	r0, [r4], -r0
    3bc0:	01000019 	tsteq	r0, r9, lsl r0
    3bc4:	032804b6 	teqeq	r8, #-1241513984	; 0xb6000000
    3bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    3bcc:	1b431564 	blne	10c9164 <_Min_Stack_Size+0x10c8d64>
    3bd0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    3bd4:	0000b804 	andeq	fp, r0, r4, lsl #16
    3bd8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3bdc:	001af215 	andseq	pc, sl, r5, lsl r2	; <UNPREDICTABLE>
    3be0:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    3be4:	000000b8 	strheq	r0, [r0], -r8
    3be8:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    3bec:	00001af8 	strdeq	r1, [r0], -r8
    3bf0:	b804b901 	stmdalt	r4, {r0, r8, fp, ip, sp, pc}
    3bf4:	02000000 	andeq	r0, r0, #0
    3bf8:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    3bfc:	00001b31 	andeq	r1, r0, r1, lsr fp
    3c00:	ef04ed01 	svc	0x0004ed01
    3c04:	a0000000 	andge	r0, r0, r0
    3c08:	6608003a 			; <UNDEFINED> instruction: 0x6608003a
    3c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c10:	000a9f9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    3c14:	19461400 	stmdbne	r6, {sl, ip}^
    3c18:	ed010000 	stc	0, cr0, [r1, #-0]
    3c1c:	00032804 	andeq	r2, r3, r4, lsl #16
    3c20:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3c24:	00197b14 	andseq	r7, r9, r4, lsl fp
    3c28:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    3c2c:	000000b8 	strheq	r0, [r0], -r8
    3c30:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    3c34:	00000963 	andeq	r0, r0, r3, ror #18
    3c38:	ef04ef01 	svc	0x0004ef01
    3c3c:	02000000 	andeq	r0, r0, #0
    3c40:	20157791 	mulscs	r5, r1, r7
    3c44:	01000019 	tsteq	r0, r9, lsl r0
    3c48:	00ca04f0 	strdeq	r0, [sl], #64	; 0x40
    3c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3c50:	1b761570 	blne	1d89218 <_Min_Stack_Size+0x1d88e18>
    3c54:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    3c58:	0000ca04 	andeq	ip, r0, r4, lsl #20
    3c5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3c60:	1a8c1300 	bne	fe308868 <_estack+0xde2d8868>
    3c64:	3a010000 	bcc	43c6c <_Min_Stack_Size+0x4386c>
    3c68:	003b0805 	eorseq	r0, fp, r5, lsl #16
    3c6c:	00002c08 	andeq	r2, r0, r8, lsl #24
    3c70:	e39c0100 	orrs	r0, ip, #0, 2
    3c74:	1400000a 	strne	r0, [r0], #-10
    3c78:	00001946 	andeq	r1, r0, r6, asr #18
    3c7c:	28053a01 	stmdacs	r5, {r0, r9, fp, ip, sp}
    3c80:	02000003 	andeq	r0, r0, #3
    3c84:	7b146c91 	blvc	51eed0 <_Min_Stack_Size+0x51ead0>
    3c88:	01000019 	tsteq	r0, r9, lsl r0
    3c8c:	00b8053a 	adcseq	r0, r8, sl, lsr r5
    3c90:	91020000 	mrsls	r0, (UNDEF: 2)
    3c94:	18f61568 	ldmne	r6!, {r3, r5, r6, r8, sl, ip}^
    3c98:	3c010000 	stccc	0, cr0, [r1], {-0}
    3c9c:	0000b805 	andeq	fp, r0, r5, lsl #16
    3ca0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ca4:	1ba71600 	blne	fe9c94ac <_estack+0xde9994ac>
    3ca8:	5c010000 	stcpl	0, cr0, [r1], {-0}
    3cac:	0000fb05 	andeq	pc, r0, r5, lsl #22
    3cb0:	003b3400 	eorseq	r3, fp, r0, lsl #8
    3cb4:	00005a08 	andeq	r5, r0, r8, lsl #20
    3cb8:	3a9c0100 	bcc	fe7040c0 <_estack+0xde6d40c0>
    3cbc:	1400000b 	strne	r0, [r0], #-11
    3cc0:	00001946 	andeq	r1, r0, r6, asr #18
    3cc4:	28055c01 	stmdacs	r5, {r0, sl, fp, ip, lr}
    3cc8:	02000003 	andeq	r0, r0, #3
    3ccc:	1c146c91 	ldcne	12, cr6, [r4], {145}	; 0x91
    3cd0:	0100001a 	tsteq	r0, sl, lsl r0
    3cd4:	00b8055c 	adcseq	r0, r8, ip, asr r5
    3cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    3cdc:	09631568 	stmdbeq	r3!, {r3, r5, r6, r8, sl, ip}^
    3ce0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3ce4:	0000fb05 	andeq	pc, r0, r5, lsl #22
    3ce8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3cec:	001afe15 	andseq	pc, sl, r5, lsl lr	; <UNPREDICTABLE>
    3cf0:	055f0100 	ldrbeq	r0, [pc, #-256]	; 3bf8 <_Min_Stack_Size+0x37f8>
    3cf4:	000000b8 	strheq	r0, [r0], -r8
    3cf8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3cfc:	00179413 	andseq	r9, r7, r3, lsl r4
    3d00:	05980100 	ldreq	r0, [r8, #256]	; 0x100
    3d04:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
    3d08:	0000002c 	andeq	r0, r0, ip, lsr #32
    3d0c:	0b7e9c01 	bleq	1faad18 <_Min_Stack_Size+0x1faa918>
    3d10:	46140000 	ldrmi	r0, [r4], -r0
    3d14:	01000019 	tsteq	r0, r9, lsl r0
    3d18:	03280598 	teqeq	r8, #152, 10	; 0x26000000
    3d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d20:	1a1c146c 	bne	708ed8 <_Min_Stack_Size+0x708ad8>
    3d24:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    3d28:	0000b805 	andeq	fp, r0, r5, lsl #16
    3d2c:	68910200 	ldmvs	r1, {r9}
    3d30:	0018f615 	andseq	pc, r8, r5, lsl r6	; <UNPREDICTABLE>
    3d34:	059a0100 	ldreq	r0, [sl, #256]	; 0x100
    3d38:	000000b8 	strheq	r0, [r0], -r8
    3d3c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3d40:	00015e18 	andeq	r5, r1, r8, lsl lr
    3d44:	06a70700 	strteq	r0, [r7], r0, lsl #14
    3d48:	000000d4 	ldrdeq	r0, [r0], -r4
    3d4c:	00073900 	andeq	r3, r7, r0, lsl #18
    3d50:	32000400 	andcc	r0, r0, #0, 8
    3d54:	0400000c 	streq	r0, [r0], #-12
    3d58:	00002101 	andeq	r2, r0, r1, lsl #2
    3d5c:	1d210100 	stfnes	f0, [r1, #-0]
    3d60:	01140000 	tsteq	r4, r0
    3d64:	05380000 	ldreq	r0, [r8, #-0]!
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	1baf0000 	blne	febc3d74 <_estack+0xdeb93d74>
    3d70:	01020000 	mrseq	r0, (UNDEF: 2)
    3d74:	00014d06 	andeq	r4, r1, r6, lsl #26
    3d78:	08010200 	stmdaeq	r1, {r9}
    3d7c:	0000014b 	andeq	r0, r0, fp, asr #2
    3d80:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    3d84:	03000001 	movweq	r0, #1
    3d88:	00000438 	andeq	r0, r0, r8, lsr r4
    3d8c:	00452b02 	subeq	r2, r5, r2, lsl #22
    3d90:	02020000 	andeq	r0, r2, #0
    3d94:	00000e07 	andeq	r0, r0, r7, lsl #28
    3d98:	01770300 	cmneq	r7, r0, lsl #6
    3d9c:	3f020000 	svccc	0x00020000
    3da0:	00000057 	andeq	r0, r0, r7, asr r0
    3da4:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    3da8:	03000000 	movweq	r0, #0
    3dac:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    3db0:	00694102 	rsbeq	r4, r9, r2, lsl #2
    3db4:	04020000 	streq	r0, [r2], #-0
    3db8:	00012e07 	andeq	r2, r1, r7, lsl #28
    3dbc:	05080200 	streq	r0, [r8, #-512]	; 0x200
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	29070802 	stmdbcs	r7, {r1, fp}
    3dc8:	04000001 	streq	r0, [r0], #-1
    3dcc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3dd0:	04020074 	streq	r0, [r2], #-116	; 0x74
    3dd4:	00013307 	andeq	r3, r1, r7, lsl #6
    3dd8:	043a0300 	ldrteq	r0, [sl], #-768	; 0x300
    3ddc:	36030000 	strcc	r0, [r3], -r0
    3de0:	0000003a 	andeq	r0, r0, sl, lsr r0
    3de4:	00017903 	andeq	r7, r1, r3, lsl #18
    3de8:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
    3dec:	03000000 	movweq	r0, #0
    3df0:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    3df4:	005e4203 	subseq	r4, lr, r3, lsl #4
    3df8:	04020000 	streq	r0, [r2], #-0
    3dfc:	00019107 	andeq	r9, r1, r7, lsl #2
    3e00:	00a20500 	adceq	r0, r2, r0, lsl #10
    3e04:	97050000 	strls	r0, [r5, -r0]
    3e08:	06000000 	streq	r0, [r0], -r0
    3e0c:	01f70401 	mvnseq	r0, r1, lsl #8
    3e10:	000000d4 	ldrdeq	r0, [r0], -r4
    3e14:	00087e07 	andeq	r7, r8, r7, lsl #28
    3e18:	53080000 	movwpl	r0, #32768	; 0x8000
    3e1c:	01005445 	tsteq	r0, r5, asr #8
    3e20:	1e880900 	cdpne	9, 8, cr0, cr8, cr0, {0}
    3e24:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    3e28:	0000be01 	andeq	fp, r0, r1, lsl #28
    3e2c:	4dd60900 	ldclmi	9, cr0, [r6]
    3e30:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    3e34:	0000be01 	andeq	fp, r0, r1, lsl #28
    3e38:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3e3c:	010201f9 	strdeq	r0, [r2, -r9]
    3e40:	86070000 	strhi	r0, [r7], -r0
    3e44:	00000006 	andeq	r0, r0, r6
    3e48:	0007de07 	andeq	sp, r7, r7, lsl #28
    3e4c:	09000100 	stmdbeq	r0, {r8}
    3e50:	000007af 	andeq	r0, r0, pc, lsr #15
    3e54:	ec01f904 	stc	9, cr15, [r1], {4}
    3e58:	0a000000 	beq	3e60 <_Min_Stack_Size+0x3a60>
    3e5c:	02b10418 	adcseq	r0, r1, #24, 8	; 0x18000000
    3e60:	00000165 	andeq	r0, r0, r5, ror #2
    3e64:	0052430b 	subseq	r4, r2, fp, lsl #6
    3e68:	b402b304 	strlt	fp, [r2], #-772	; 0x304
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	001e9e0c 	andseq	r9, lr, ip, lsl #28
    3e74:	02b40400 	adcseq	r0, r4, #0, 8
    3e78:	000000b4 	strheq	r0, [r0], -r4
    3e7c:	41500b04 	cmpmi	r0, r4, lsl #22
    3e80:	b5040052 	strlt	r0, [r4, #-82]	; 0x52
    3e84:	0000b402 	andeq	fp, r0, r2, lsl #8
    3e88:	990c0800 	stmdbls	ip, {fp}
    3e8c:	0400001e 	streq	r0, [r0], #-30
    3e90:	00b402b6 	ldrhteq	r0, [r4], r6
    3e94:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3e98:	00001e27 	andeq	r1, r0, r7, lsr #28
    3e9c:	b402b704 	strlt	fp, [r2], #-1796	; 0x704
    3ea0:	10000000 	andne	r0, r0, r0
    3ea4:	5243460b 	subpl	r4, r3, #11534336	; 0xb00000
    3ea8:	02b80400 	adcseq	r0, r8, #0, 8
    3eac:	000000b4 	strheq	r0, [r0], -r4
    3eb0:	e5090014 	str	r0, [r9, #-20]
    3eb4:	0400001b 	streq	r0, [r0], #-27
    3eb8:	010e02b9 			; <UNDEFINED> instruction: 0x010e02b9
    3ebc:	100a0000 	andne	r0, sl, r0
    3ec0:	af02bb04 	svcge	0x0002bb04
    3ec4:	0c000001 	stceq	0, cr0, [r0], {1}
    3ec8:	00001d7a 	andeq	r1, r0, sl, ror sp
    3ecc:	b402bd04 	strlt	fp, [r2], #-3332	; 0xd04
    3ed0:	00000000 	andeq	r0, r0, r0
    3ed4:	001e080c 	andseq	r0, lr, ip, lsl #16
    3ed8:	02be0400 	adcseq	r0, lr, #0, 8
    3edc:	000000b4 	strheq	r0, [r0], -r4
    3ee0:	1e930c04 	cdpne	12, 9, cr0, cr3, cr4, {0}
    3ee4:	bf040000 	svclt	0x00040000
    3ee8:	0000b402 	andeq	fp, r0, r2, lsl #8
    3eec:	c10c0800 	tstgt	ip, r0, lsl #16
    3ef0:	0400001c 	streq	r0, [r0], #-28
    3ef4:	00b402c0 	adcseq	r0, r4, r0, asr #5
    3ef8:	000c0000 	andeq	r0, ip, r0
    3efc:	001c4a09 	andseq	r4, ip, r9, lsl #20
    3f00:	02c10400 	sbceq	r0, r1, #0, 8
    3f04:	00000171 	andeq	r0, r0, r1, ror r1
    3f08:	36053c0d 	strcc	r3, [r5], -sp, lsl #24
    3f0c:	00000278 	andeq	r0, r0, r8, ror r2
    3f10:	001ed10e 	andseq	sp, lr, lr, lsl #2
    3f14:	a2380500 	eorsge	r0, r8, #0, 10
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	001c9c0e 	andseq	r9, ip, lr, lsl #24
    3f20:	a23b0500 	eorsge	r0, fp, #0, 10
    3f24:	04000000 	streq	r0, [r0], #-0
    3f28:	001eec0e 	andseq	lr, lr, lr, lsl #24
    3f2c:	a23d0500 	eorsge	r0, sp, #0, 10
    3f30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3f34:	001c940e 	andseq	r9, ip, lr, lsl #8
    3f38:	a2410500 	subge	r0, r1, #0, 10
    3f3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3f40:	001f000e 	andseq	r0, pc, lr
    3f44:	a2450500 	subge	r0, r5, #0, 10
    3f48:	10000000 	andne	r0, r0, r0
    3f4c:	001cf70e 	andseq	pc, ip, lr, lsl #14
    3f50:	a2490500 	subge	r0, r9, #0, 10
    3f54:	14000000 	strne	r0, [r0], #-0
    3f58:	001cb30e 	andseq	fp, ip, lr, lsl #6
    3f5c:	a24c0500 	subge	r0, ip, #0, 10
    3f60:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3f64:	001da40e 	andseq	sl, sp, lr, lsl #8
    3f68:	a24f0500 	subge	r0, pc, #0, 10
    3f6c:	1c000000 	stcne	0, cr0, [r0], {-0}
    3f70:	001f430e 	andseq	r4, pc, lr, lsl #6
    3f74:	a2520500 	subsge	r0, r2, #0, 10
    3f78:	20000000 	andcs	r0, r0, r0
    3f7c:	001f0f0e 	andseq	r0, pc, lr, lsl #30
    3f80:	a2550500 	subsge	r0, r5, #0, 10
    3f84:	24000000 	strcs	r0, [r0], #-0
    3f88:	001bf80e 	andseq	pc, fp, lr, lsl #16
    3f8c:	a25a0500 	subsge	r0, sl, #0, 10
    3f90:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3f94:	001eb30e 	andseq	fp, lr, lr, lsl #6
    3f98:	a25d0500 	subsge	r0, sp, #0, 10
    3f9c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3fa0:	001de60e 	andseq	lr, sp, lr, lsl #12
    3fa4:	a2620500 	rsbge	r0, r2, #0, 10
    3fa8:	30000000 	andcc	r0, r0, r0
    3fac:	001c050e 	andseq	r0, ip, lr, lsl #10
    3fb0:	a2650500 	rsbge	r0, r5, #0, 10
    3fb4:	34000000 	strcc	r0, [r0], #-0
    3fb8:	001c240e 	andseq	r2, ip, lr, lsl #8
    3fbc:	a26a0500 	rsbge	r0, sl, #0, 10
    3fc0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3fc4:	1dbb0300 	ldcne	3, cr0, [fp]
    3fc8:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    3fcc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    3fd0:	001e760f 	andseq	r7, lr, pc, lsl #12
    3fd4:	bcc40100 	stflte	f0, [r4], {0}
    3fd8:	a408003b 	strge	r0, [r8], #-59	; 0x3b
    3fdc:	01000001 	tsteq	r0, r1
    3fe0:	0002a79c 	muleq	r2, ip, r7
    3fe4:	1c871000 	stcne	0, cr1, [r7], {0}
    3fe8:	c4010000 	strgt	r0, [r1], #-0
    3fec:	000002a7 	andeq	r0, r0, r7, lsr #5
    3ff0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3ff4:	01650411 	cmneq	r5, r1, lsl r4
    3ff8:	71120000 	tstvc	r2, r0
    3ffc:	0100001d 	tsteq	r0, sp, lsl r0
    4000:	3d60013f 	stfcce	f0, [r0, #-252]!	; 0xffffff04
    4004:	00ac0800 	adceq	r0, ip, r0, lsl #16
    4008:	9c010000 	stcls	0, cr0, [r1], {-0}
    400c:	000002f1 	strdeq	r0, [r0], -r1
    4010:	001c8713 	andseq	r8, ip, r3, lsl r7
    4014:	013f0100 	teqeq	pc, r0, lsl #2
    4018:	000002a7 	andeq	r0, r0, r7, lsr #5
    401c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    4020:	00001e0d 	andeq	r1, r0, sp, lsl #28
    4024:	f1013f01 			; <UNDEFINED> instruction: 0xf1013f01
    4028:	02000002 	andeq	r0, r0, #2
    402c:	75146891 	ldrvc	r6, [r4, #-2193]	; 0x891
    4030:	01000003 	tsteq	r0, r3
    4034:	00a20141 	adceq	r0, r2, r1, asr #2
    4038:	91020000 	mrsls	r0, (UNDEF: 2)
    403c:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    4040:	00000278 	andeq	r0, r0, r8, ror r2
    4044:	001c1512 	andseq	r1, ip, r2, lsl r5
    4048:	01930100 	orrseq	r0, r3, r0, lsl #2
    404c:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
    4050:	0000006c 	andeq	r0, r0, ip, rrx
    4054:	031d9c01 	tsteq	sp, #256	; 0x100
    4058:	0d130000 	ldceq	0, cr0, [r3, #-0]
    405c:	0100001e 	tsteq	r0, lr, lsl r0
    4060:	02f10193 	rscseq	r0, r1, #-1073741788	; 0xc0000024
    4064:	91020000 	mrsls	r0, (UNDEF: 2)
    4068:	dd120074 	ldcle	0, cr0, [r2, #-464]	; 0xfffffe30
    406c:	0100001b 	tsteq	r0, fp, lsl r0
    4070:	3e7801de 	mrccc	1, 3, r0, cr8, cr14, {6}
    4074:	00360800 	eorseq	r0, r6, r0, lsl #16
    4078:	9c010000 	stcls	0, cr0, [r1], {-0}
    407c:	00000352 	andeq	r0, r0, r2, asr r3
    4080:	001c8713 	andseq	r8, ip, r3, lsl r7
    4084:	01de0100 	bicseq	r0, lr, r0, lsl #2
    4088:	000002a7 	andeq	r0, r0, r7, lsr #5
    408c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    4090:	00000678 	andeq	r0, r0, r8, ror r6
    4094:	0201de01 	andeq	sp, r1, #1, 28
    4098:	02000001 	andeq	r0, r0, #1
    409c:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    40a0:	00001e58 	andeq	r1, r0, r8, asr lr
    40a4:	b0020201 	andlt	r0, r2, r1, lsl #4
    40a8:	3408003e 	strcc	r0, [r8], #-62	; 0x3e
    40ac:	01000000 	mrseq	r0, (UNDEF: 0)
    40b0:	0003879c 	muleq	r3, ip, r7
    40b4:	1c871300 	stcne	3, cr1, [r7], {0}
    40b8:	02010000 	andeq	r0, r1, #0
    40bc:	0002a702 	andeq	sl, r2, r2, lsl #14
    40c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    40c4:	001e1c13 	andseq	r1, lr, r3, lsl ip
    40c8:	02020100 	andeq	r0, r2, #0, 2
    40cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    40d0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    40d4:	001cc712 	andseq	ip, ip, r2, lsl r7
    40d8:	02260100 	eoreq	r0, r6, #0, 2
    40dc:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
    40e0:	00000034 	andeq	r0, r0, r4, lsr r0
    40e4:	03bc9c01 			; <UNDEFINED> instruction: 0x03bc9c01
    40e8:	87130000 	ldrhi	r0, [r3, -r0]
    40ec:	0100001c 	tsteq	r0, ip, lsl r0
    40f0:	02a70226 	adceq	r0, r7, #1610612738	; 0x60000002
    40f4:	91020000 	mrsls	r0, (UNDEF: 2)
    40f8:	1e2c1374 	mcrne	3, 1, r1, cr12, cr4, {3}
    40fc:	26010000 	strcs	r0, [r1], -r0
    4100:	0000a202 	andeq	sl, r0, r2, lsl #4
    4104:	70910200 	addsvc	r0, r1, r0, lsl #4
    4108:	1d8d1200 	sfmne	f1, 4, [sp]
    410c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    4110:	003f1802 	eorseq	r1, pc, r2, lsl #16
    4114:	00001c08 	andeq	r1, r0, r8, lsl #24
    4118:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    411c:	13000003 	movwne	r0, #3
    4120:	00001c87 	andeq	r1, r0, r7, lsl #25
    4124:	a7027801 	strge	r7, [r2, -r1, lsl #16]
    4128:	02000002 	andeq	r0, r0, #2
    412c:	27137491 			; <UNDEFINED> instruction: 0x27137491
    4130:	0100001f 	tsteq	r0, pc, lsl r0
    4134:	008c0278 	addeq	r0, ip, r8, ror r2
    4138:	91020000 	mrsls	r0, (UNDEF: 2)
    413c:	18150072 	ldmdane	r5, {r1, r4, r5, r6}
    4140:	0100001f 	tsteq	r0, pc, lsl r0
    4144:	008c0287 	addeq	r0, ip, r7, lsl #5
    4148:	3f340000 	svccc	0x00340000
    414c:	001a0800 	andseq	r0, sl, r0, lsl #16
    4150:	9c010000 	stcls	0, cr0, [r1], {-0}
    4154:	0000041b 	andeq	r0, r0, fp, lsl r4
    4158:	001c8713 	andseq	r8, ip, r3, lsl r7
    415c:	02870100 	addeq	r0, r7, #0, 2
    4160:	000002a7 	andeq	r0, r0, r7, lsr #5
    4164:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4168:	001dcb12 	andseq	ip, sp, r2, lsl fp
    416c:	02da0100 	sbcseq	r0, sl, #0, 2
    4170:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    4174:	0000003c 	andeq	r0, r0, ip, lsr r0
    4178:	045f9c01 	ldrbeq	r9, [pc], #-3073	; 4180 <_Min_Stack_Size+0x3d80>
    417c:	87130000 	ldrhi	r0, [r3, -r0]
    4180:	0100001c 	tsteq	r0, ip, lsl r0
    4184:	02a702da 	adceq	r0, r7, #-1610612723	; 0xa000000d
    4188:	91020000 	mrsls	r0, (UNDEF: 2)
    418c:	1ea31374 	mcrne	3, 5, r1, cr3, cr4, {3}
    4190:	da010000 	ble	44198 <_Min_Stack_Size+0x43d98>
    4194:	0000a202 	andeq	sl, r0, r2, lsl #4
    4198:	70910200 	addsvc	r0, r1, r0, lsl #4
    419c:	001bcb13 	andseq	ip, fp, r3, lsl fp
    41a0:	02db0100 	sbcseq	r0, fp, #0, 2
    41a4:	000000a2 	andeq	r0, r0, r2, lsr #1
    41a8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    41ac:	001d0912 	andseq	r0, sp, r2, lsl r9
    41b0:	02f90100 	rscseq	r0, r9, #0, 2
    41b4:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
    41b8:	00000036 	andeq	r0, r0, r6, lsr r0
    41bc:	04949c01 	ldreq	r9, [r4], #3073	; 0xc01
    41c0:	87130000 	ldrhi	r0, [r3, -r0]
    41c4:	0100001c 	tsteq	r0, ip, lsl r0
    41c8:	02a702f9 	adceq	r0, r7, #-1879048177	; 0x9000000f
    41cc:	91020000 	mrsls	r0, (UNDEF: 2)
    41d0:	06781374 			; <UNDEFINED> instruction: 0x06781374
    41d4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    41d8:	00010202 	andeq	r0, r1, r2, lsl #4
    41dc:	73910200 	orrsvc	r0, r1, #0, 4
    41e0:	1ce01200 	sfmne	f1, 2, [r0]
    41e4:	22010000 	andcs	r0, r1, #0
    41e8:	003fc403 	eorseq	ip, pc, r3, lsl #8
    41ec:	00002a08 	andeq	r2, r0, r8, lsl #20
    41f0:	d89c0100 	ldmle	ip, {r8}
    41f4:	13000004 	movwne	r0, #4
    41f8:	00001c87 	andeq	r1, r0, r7, lsl #25
    41fc:	a7032201 	strge	r2, [r3, -r1, lsl #4]
    4200:	02000002 	andeq	r0, r0, #2
    4204:	dd137491 	cfldrsle	mvf7, [r3, #-580]	; 0xfffffdbc
    4208:	0100001e 	tsteq	r0, lr, lsl r0
    420c:	00a20322 	adceq	r0, r2, r2, lsr #6
    4210:	91020000 	mrsls	r0, (UNDEF: 2)
    4214:	1c711370 	ldclne	3, cr1, [r1], #-448	; 0xfffffe40
    4218:	23010000 	movwcs	r0, #4096	; 0x1000
    421c:	0000a203 	andeq	sl, r0, r3, lsl #4
    4220:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4224:	1c561500 	cfldr64ne	mvdx1, [r6], {-0}
    4228:	3c010000 	stccc	0, cr0, [r1], {-0}
    422c:	0000a203 	andeq	sl, r0, r3, lsl #4
    4230:	003ff000 	eorseq	pc, pc, r0
    4234:	00003008 	andeq	r3, r0, r8
    4238:	119c0100 	orrsne	r0, ip, r0, lsl #2
    423c:	13000005 	movwne	r0, #5
    4240:	00001c87 	andeq	r1, r0, r7, lsl #25
    4244:	a7033c01 	strge	r3, [r3, -r1, lsl #24]
    4248:	02000002 	andeq	r0, r0, #2
    424c:	74166c91 	ldrvc	r6, [r6], #-3217	; 0xc91
    4250:	0100706d 	tsteq	r0, sp, rrx
    4254:	00a2033e 	adceq	r0, r2, lr, lsr r3
    4258:	91020000 	mrsls	r0, (UNDEF: 2)
    425c:	c0150074 	andsgt	r0, r5, r4, ror r0
    4260:	0100001e 	tsteq	r0, lr, lsl r0
    4264:	010203af 	smlatbeq	r2, pc, r3, r0	; <UNPREDICTABLE>
    4268:	40200000 	eormi	r0, r0, r0
    426c:	00300800 	eorseq	r0, r0, r0, lsl #16
    4270:	9c010000 	stcls	0, cr0, [r1], {-0}
    4274:	0000054a 	andeq	r0, r0, sl, asr #10
    4278:	001c8713 	andseq	r8, ip, r3, lsl r7
    427c:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    4280:	000002a7 	andeq	r0, r0, r7, lsr #5
    4284:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    4288:	00005a39 	andeq	r5, r0, r9, lsr sl
    428c:	0203b101 	andeq	fp, r3, #1073741824	; 0x40000000
    4290:	02000001 	andeq	r0, r0, #1
    4294:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    4298:	00001c38 	andeq	r1, r0, r8, lsr ip
    429c:	a203d101 	andge	sp, r3, #1073741824	; 0x40000000
    42a0:	50000000 	andpl	r0, r0, r0
    42a4:	24080040 	strcs	r0, [r8], #-64	; 0x40
    42a8:	01000000 	mrseq	r0, (UNDEF: 0)
    42ac:	0005839c 	muleq	r5, ip, r3
    42b0:	1c871300 	stcne	3, cr1, [r7], {0}
    42b4:	d1010000 	mrsle	r0, (UNDEF: 1)
    42b8:	0002a703 	andeq	sl, r2, r3, lsl #14
    42bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    42c0:	00037514 	andeq	r7, r3, r4, lsl r5
    42c4:	03d30100 	bicseq	r0, r3, #0, 2
    42c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    42cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    42d0:	001e8115 	andseq	r8, lr, r5, lsl r1
    42d4:	03ec0100 	mvneq	r0, #0, 2
    42d8:	000000d4 	ldrdeq	r0, [r0], -r4
    42dc:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    42e0:	00000078 	andeq	r0, r0, r8, ror r0
    42e4:	05e99c01 	strbeq	r9, [r9, #3073]!	; 0xc01
    42e8:	87130000 	ldrhi	r0, [r3, -r0]
    42ec:	0100001c 	tsteq	r0, ip, lsl r0
    42f0:	02a703ec 	adceq	r0, r7, #236, 6	; 0xb0000003
    42f4:	91020000 	mrsls	r0, (UNDEF: 2)
    42f8:	1e391364 	cdpne	3, 3, cr1, cr9, cr4, {3}
    42fc:	ec010000 	stc	0, cr0, [r1], {-0}
    4300:	0000a203 	andeq	sl, r0, r3, lsl #4
    4304:	60910200 	addsvs	r0, r1, r0, lsl #4
    4308:	00096314 	andeq	r6, r9, r4, lsl r3
    430c:	03ee0100 	mvneq	r0, #0, 2
    4310:	000000d4 	ldrdeq	r0, [r0], -r4
    4314:	14779102 	ldrbtne	r9, [r7], #-258	; 0x102
    4318:	00001c82 	andeq	r1, r0, r2, lsl #25
    431c:	e903ef01 	stmdb	r3, {r0, r8, r9, sl, fp, sp, lr, pc}
    4320:	02000005 	andeq	r0, r0, #5
    4324:	75147091 	ldrvc	r7, [r4, #-145]	; 0x91
    4328:	01000003 	tsteq	r0, r3
    432c:	00a203f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    4330:	91020000 	mrsls	r0, (UNDEF: 2)
    4334:	0411006c 	ldreq	r0, [r1], #-108	; 0x6c
    4338:	000001af 	andeq	r0, r0, pc, lsr #3
    433c:	001d7f12 	andseq	r7, sp, r2, lsl pc
    4340:	042f0100 	strteq	r0, [pc], #-256	; 4348 <_Min_Stack_Size+0x3f48>
    4344:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
    4348:	0000005c 	andeq	r0, r0, ip, asr r0
    434c:	06339c01 	ldrteq	r9, [r3], -r1, lsl #24
    4350:	87130000 	ldrhi	r0, [r3, -r0]
    4354:	0100001c 	tsteq	r0, ip, lsl r0
    4358:	02a7042f 	adceq	r0, r7, #788529152	; 0x2f000000
    435c:	91020000 	mrsls	r0, (UNDEF: 2)
    4360:	1e39136c 	cdpne	3, 3, cr1, cr9, cr12, {3}
    4364:	2f010000 	svccs	0x00010000
    4368:	0000a204 	andeq	sl, r0, r4, lsl #4
    436c:	68910200 	ldmvs	r1, {r9}
    4370:	001c8214 	andseq	r8, ip, r4, lsl r2
    4374:	04310100 	ldrteq	r0, [r1], #-256	; 0x100
    4378:	000005e9 	andeq	r0, r0, r9, ror #11
    437c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4380:	001f2f12 	andseq	r2, pc, r2, lsl pc	; <UNPREDICTABLE>
    4384:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    4388:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
    438c:	00000072 	andeq	r0, r0, r2, ror r0
    4390:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    4394:	87130000 	ldrhi	r0, [r3, -r0]
    4398:	0100001c 	tsteq	r0, ip, lsl r0
    439c:	02a7045e 	adceq	r0, r7, #1577058304	; 0x5e000000
    43a0:	91020000 	mrsls	r0, (UNDEF: 2)
    43a4:	1f3c1374 	svcne	0x003c1374
    43a8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    43ac:	0000a204 	andeq	sl, r0, r4, lsl #4
    43b0:	70910200 	addsvc	r0, r1, r0, lsl #4
    43b4:	00067813 	andeq	r7, r6, r3, lsl r8
    43b8:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    43bc:	00000102 	andeq	r0, r0, r2, lsl #2
    43c0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    43c4:	001df815 	andseq	pc, sp, r5, lsl r8	; <UNPREDICTABLE>
    43c8:	04920100 	ldreq	r0, [r2], #256	; 0x100
    43cc:	000000e0 	andeq	r0, r0, r0, ror #1
    43d0:	080041bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, lr}
    43d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    43d8:	06ec9c01 	strbteq	r9, [ip], r1, lsl #24
    43dc:	87130000 	ldrhi	r0, [r3, -r0]
    43e0:	0100001c 	tsteq	r0, ip, lsl r0
    43e4:	02a70492 	adceq	r0, r7, #-1845493760	; 0x92000000
    43e8:	91020000 	mrsls	r0, (UNDEF: 2)
    43ec:	1f3c1364 	svcne	0x003c1364
    43f0:	92010000 	andls	r0, r1, #0
    43f4:	0000a204 	andeq	sl, r0, r4, lsl #4
    43f8:	60910200 	addsvs	r0, r1, r0, lsl #4
    43fc:	00096314 	andeq	r6, r9, r4, lsl r3
    4400:	04940100 	ldreq	r0, [r4], #256	; 0x100
    4404:	000000e0 	andeq	r0, r0, r0, ror #1
    4408:	14779102 	ldrbtne	r9, [r7], #-258	; 0x102
    440c:	00001c82 	andeq	r1, r0, r2, lsl #25
    4410:	e9049501 	stmdb	r4, {r0, r8, sl, ip, pc}
    4414:	02000005 	andeq	r0, r0, #5
    4418:	75147091 	ldrvc	r7, [r4, #-145]	; 0x91
    441c:	01000003 	tsteq	r0, r3
    4420:	00a20496 	umlaleq	r0, r2, r6, r4
    4424:	91020000 	mrsls	r0, (UNDEF: 2)
    4428:	1afe146c 	bne	fff895e0 <_estack+0xdff595e0>
    442c:	96010000 	strls	r0, [r1], -r0
    4430:	0000a204 	andeq	sl, r0, r4, lsl #4
    4434:	68910200 	ldmvs	r1, {r9}
    4438:	1e421200 	cdpne	2, 4, cr1, cr2, cr0, {0}
    443c:	e4010000 	str	r0, [r1], #-0
    4440:	00426c04 	subeq	r6, r2, r4, lsl #24
    4444:	00005c08 	andeq	r5, r0, r8, lsl #24
    4448:	309c0100 	addscc	r0, ip, r0, lsl #2
    444c:	13000007 	movwne	r0, #7
    4450:	00001c87 	andeq	r1, r0, r7, lsl #25
    4454:	a704e401 	strge	lr, [r4, -r1, lsl #8]
    4458:	02000002 	andeq	r0, r0, #2
    445c:	3c136c91 	ldccc	12, cr6, [r3], {145}	; 0x91
    4460:	0100001f 	tsteq	r0, pc, lsl r0
    4464:	00a204e4 	adceq	r0, r2, r4, ror #9
    4468:	91020000 	mrsls	r0, (UNDEF: 2)
    446c:	1c821468 	cfstrsne	mvf1, [r2], {104}	; 0x68
    4470:	e6010000 	str	r0, [r1], -r0
    4474:	0005e904 	andeq	lr, r5, r4, lsl #18
    4478:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    447c:	015e1700 	cmpeq	lr, r0, lsl #14
    4480:	a7060000 	strge	r0, [r6, -r0]
    4484:	0000b906 	andeq	fp, r0, r6, lsl #18
    4488:	0b210000 	bleq	844490 <_Min_Stack_Size+0x844090>
    448c:	00040000 	andeq	r0, r4, r0
    4490:	00000d89 	andeq	r0, r0, r9, lsl #27
    4494:	00210104 	eoreq	r0, r1, r4, lsl #2
    4498:	7a010000 	bvc	444a0 <_Min_Stack_Size+0x440a0>
    449c:	14000022 	strne	r0, [r0], #-34	; 0x22
    44a0:	d8000001 	stmdale	r0, {r0}
    44a4:	00000005 	andeq	r0, r0, r5
    44a8:	42000000 	andmi	r0, r0, #0
    44ac:	0200001f 	andeq	r0, r0, #31
    44b0:	014d0601 	cmpeq	sp, r1, lsl #12
    44b4:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    44b8:	02000002 	andeq	r0, r0, #2
    44bc:	0000371d 	andeq	r3, r0, sp, lsl r7
    44c0:	08010200 	stmdaeq	r1, {r9}
    44c4:	0000014b 	andeq	r0, r0, fp, asr #2
    44c8:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    44cc:	03000001 	movweq	r0, #1
    44d0:	00000438 	andeq	r0, r0, r8, lsr r4
    44d4:	00502b02 	subseq	r2, r0, r2, lsl #22
    44d8:	02020000 	andeq	r0, r2, #0
    44dc:	00000e07 	andeq	r0, r0, r7, lsl #28
    44e0:	01770300 	cmneq	r7, r0, lsl #6
    44e4:	3f020000 	svccc	0x00020000
    44e8:	00000062 	andeq	r0, r0, r2, rrx
    44ec:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    44f0:	03000000 	movweq	r0, #0
    44f4:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    44f8:	00744102 	rsbseq	r4, r4, r2, lsl #2
    44fc:	04020000 	streq	r0, [r2], #-0
    4500:	00012e07 	andeq	r2, r1, r7, lsl #28
    4504:	05080200 	streq	r0, [r8, #-512]	; 0x200
    4508:	00000000 	andeq	r0, r0, r0
    450c:	29070802 	stmdbcs	r7, {r1, fp}
    4510:	04000001 	streq	r0, [r0], #-1
    4514:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4518:	04020074 	streq	r0, [r2], #-116	; 0x74
    451c:	00013307 	andeq	r3, r1, r7, lsl #6
    4520:	02700300 	rsbseq	r0, r0, #0, 6
    4524:	2a030000 	bcs	c452c <_Min_Stack_Size+0xc412c>
    4528:	0000002c 	andeq	r0, r0, ip, lsr #32
    452c:	00043a03 	andeq	r3, r4, r3, lsl #20
    4530:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    4534:	03000000 	movweq	r0, #0
    4538:	00000179 	andeq	r0, r0, r9, ror r1
    453c:	00574103 	subseq	r4, r7, r3, lsl #2
    4540:	b6030000 	strlt	r0, [r3], -r0
    4544:	03000005 	movweq	r0, #5
    4548:	00006942 	andeq	r6, r0, r2, asr #18
    454c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4550:	00000191 	muleq	r0, r1, r1
    4554:	0000b805 	andeq	fp, r0, r5, lsl #16
    4558:	00b80600 	adcseq	r0, r8, r0, lsl #12
    455c:	00df0000 	sbcseq	r0, pc, r0
    4560:	c3070000 	movwgt	r0, #28672	; 0x7000
    4564:	01000000 	mrseq	r0, (UNDEF: 0)
    4568:	00a20500 	adceq	r0, r2, r0, lsl #10
    456c:	ad050000 	stcge	0, cr0, [r5, #-0]
    4570:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4574:	01f70401 	mvnseq	r0, r1, lsl #8
    4578:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    457c:	00087e09 	andeq	r7, r8, r9, lsl #28
    4580:	530a0000 	movwpl	r0, #40960	; 0xa000
    4584:	01005445 	tsteq	r0, r5, asr #8
    4588:	1e880b00 	vdivne.f64	d0, d8, d0
    458c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    4590:	0000e901 	andeq	lr, r0, r1, lsl #18
    4594:	4dd60b00 	vldrmi	d16, [r6]
    4598:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    459c:	0000e901 	andeq	lr, r0, r1, lsl #18
    45a0:	04010800 	streq	r0, [r1], #-2048	; 0x800
    45a4:	012d01f9 	strdeq	r0, [sp, -r9]!
    45a8:	86090000 	strhi	r0, [r9], -r0
    45ac:	00000006 	andeq	r0, r0, r6
    45b0:	0007de09 	andeq	sp, r7, r9, lsl #28
    45b4:	0b000100 	bleq	49bc <_Min_Stack_Size+0x45bc>
    45b8:	000007af 	andeq	r0, r0, pc, lsr #15
    45bc:	1701f904 	strne	pc, [r1, -r4, lsl #18]
    45c0:	0c000001 	stceq	0, cr0, [r0], {1}
    45c4:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    45c8:	000002e2 	andeq	r0, r0, r2, ror #5
    45cc:	0052430d 	subseq	r4, r2, sp, lsl #6
    45d0:	ca045704 	bgt	11a1e8 <_Min_Stack_Size+0x119de8>
    45d4:	00000000 	andeq	r0, r0, r0
    45d8:	0003c80e 	andeq	ip, r3, lr, lsl #16
    45dc:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    45e0:	000000ca 	andeq	r0, r0, sl, asr #1
    45e4:	05e90e04 	strbeq	r0, [r9, #3588]!	; 0xe04
    45e8:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    45ec:	0000ca04 	andeq	ip, r0, r4, lsl #20
    45f0:	430d0800 	movwmi	r0, #55296	; 0xd800
    45f4:	04005249 	streq	r5, [r0], #-585	; 0x249
    45f8:	00ca045a 	sbceq	r0, sl, sl, asr r4
    45fc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4600:	00000459 	andeq	r0, r0, r9, asr r4
    4604:	ca045b04 	bgt	11b21c <_Min_Stack_Size+0x11ae1c>
    4608:	10000000 	andne	r0, r0, r0
    460c:	0003e10e 	andeq	lr, r3, lr, lsl #2
    4610:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    4614:	000000ca 	andeq	r0, r0, sl, asr #1
    4618:	05cc0e14 	strbeq	r0, [ip, #3604]	; 0xe14
    461c:	5d040000 	stcpl	0, cr0, [r4, #-0]
    4620:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4624:	6c0e1800 	stcvs	8, cr1, [lr], {-0}
    4628:	04000005 	streq	r0, [r0], #-5
    462c:	00b8045e 	adcseq	r0, r8, lr, asr r4
    4630:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    4634:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4638:	ca045f04 	bgt	11c250 <_Min_Stack_Size+0x11be50>
    463c:	20000000 	andcs	r0, r0, r0
    4640:	0004ad0e 	andeq	sl, r4, lr, lsl #26
    4644:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    4648:	000000ca 	andeq	r0, r0, sl, asr #1
    464c:	05760e24 	ldrbeq	r0, [r6, #-3620]!	; 0xe24
    4650:	61040000 	mrsvs	r0, (UNDEF: 4)
    4654:	0000cf04 	andeq	ip, r0, r4, lsl #30
    4658:	bf0e2800 	svclt	0x000e2800
    465c:	04000005 	streq	r0, [r0], #-5
    4660:	00ca0462 	sbceq	r0, sl, r2, ror #8
    4664:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    4668:	000003d9 	ldrdeq	r0, [r0], -r9
    466c:	ca046304 	bgt	11d284 <_Min_Stack_Size+0x11ce84>
    4670:	34000000 	strcc	r0, [r0], #-0
    4674:	0004cc0e 	andeq	ip, r4, lr, lsl #24
    4678:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    467c:	000000ca 	andeq	r0, r0, sl, asr #1
    4680:	05800e38 	streq	r0, [r0, #3640]	; 0xe38
    4684:	65040000 	strvs	r0, [r4, #-0]
    4688:	0000b804 	andeq	fp, r0, r4, lsl #16
    468c:	7f0e3c00 	svcvc	0x000e3c00
    4690:	04000004 	streq	r0, [r0], #-4
    4694:	00ca0466 	sbceq	r0, sl, r6, ror #8
    4698:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    469c:	000004e4 	andeq	r0, r0, r4, ror #9
    46a0:	ca046704 	bgt	11e2b8 <_Min_Stack_Size+0x11deb8>
    46a4:	44000000 	strmi	r0, [r0], #-0
    46a8:	00046c0e 	andeq	r6, r4, lr, lsl #24
    46ac:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    46b0:	000000cf 	andeq	r0, r0, pc, asr #1
    46b4:	03be0e48 			; <UNDEFINED> instruction: 0x03be0e48
    46b8:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    46bc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    46c0:	5d0e5000 	stcpl	0, cr5, [lr, #-0]
    46c4:	04000005 	streq	r0, [r0], #-5
    46c8:	00ca046a 	sbceq	r0, sl, sl, ror #8
    46cc:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    46d0:	00000462 	andeq	r0, r0, r2, ror #8
    46d4:	ca046b04 	bgt	11f2ec <_Min_Stack_Size+0x11eeec>
    46d8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    46dc:	0005960e 	andeq	r9, r5, lr, lsl #12
    46e0:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    46e4:	000000b8 	strheq	r0, [r0], -r8
    46e8:	05280e5c 	streq	r0, [r8, #-3676]!	; 0xe5c
    46ec:	6d040000 	stcvs	0, cr0, [r4, #-0]
    46f0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    46f4:	f40e6000 	vst4.8	{d6-d9}, [lr], r0
    46f8:	04000005 	streq	r0, [r0], #-5
    46fc:	00ca046e 	sbceq	r0, sl, lr, ror #8
    4700:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    4704:	000005a0 	andeq	r0, r0, r0, lsr #11
    4708:	cf046f04 	svcgt	0x00046f04
    470c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4710:	0003ea0e 	andeq	lr, r3, lr, lsl #20
    4714:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    4718:	000000ca 	andeq	r0, r0, sl, asr #1
    471c:	53430d70 	movtpl	r0, #15728	; 0x3d70
    4720:	71040052 	qaddvc	r0, r2, r4
    4724:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4728:	aa0e7400 	bge	3a1730 <_Min_Stack_Size+0x3a1330>
    472c:	04000005 	streq	r0, [r0], #-5
    4730:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    4734:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    4738:	00000443 	andeq	r0, r0, r3, asr #8
    473c:	ca047304 	bgt	121354 <_Min_Stack_Size+0x120f54>
    4740:	80000000 	andhi	r0, r0, r0
    4744:	0003ef0e 	andeq	lr, r3, lr, lsl #30
    4748:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    474c:	000000ca 	andeq	r0, r0, sl, asr #1
    4750:	05e30e84 	strbeq	r0, [r3, #3716]!	; 0xe84
    4754:	75040000 	strvc	r0, [r4, #-0]
    4758:	0000ca04 	andeq	ip, r0, r4, lsl #20
    475c:	870e8800 	strhi	r8, [lr, -r0, lsl #16]
    4760:	04000004 	streq	r0, [r0], #-4
    4764:	00ca0476 	sbceq	r0, sl, r6, ror r4
    4768:	008c0000 	addeq	r0, ip, r0
    476c:	0004a10b 	andeq	sl, r4, fp, lsl #2
    4770:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    4774:	00000139 	andeq	r0, r0, r9, lsr r1
    4778:	e004240c 	and	r2, r4, ip, lsl #8
    477c:	0003e004 	andeq	lr, r3, r4
    4780:	52430d00 	subpl	r0, r3, #0, 26
    4784:	e2040031 	and	r0, r4, #49	; 0x31
    4788:	0000df04 	andeq	sp, r0, r4, lsl #30
    478c:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    4790:	04000005 	streq	r0, [r0], #-5
    4794:	00a204e3 	adceq	r0, r2, r3, ror #9
    4798:	0d020000 	stceq	0, cr0, [r2, #-0]
    479c:	00325243 	eorseq	r5, r2, r3, asr #4
    47a0:	df04e404 	svcle	0x0004e404
    47a4:	04000000 	streq	r0, [r0], #-0
    47a8:	0005760e 	andeq	r7, r5, lr, lsl #12
    47ac:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    47b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    47b4:	52530d06 	subspl	r0, r3, #384	; 0x180
    47b8:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    47bc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    47c0:	05800e08 	streq	r0, [r0, #3592]	; 0xe08
    47c4:	e7040000 	str	r0, [r4, -r0]
    47c8:	0000a204 	andeq	sl, r0, r4, lsl #4
    47cc:	440d0a00 	strmi	r0, [sp], #-2560	; 0xa00
    47d0:	e8040052 	stmda	r4, {r1, r4, r6}
    47d4:	0000df04 	andeq	sp, r0, r4, lsl #30
    47d8:	6c0e0c00 	stcvs	12, cr0, [lr], {-0}
    47dc:	04000004 	streq	r0, [r0], #-4
    47e0:	00a204e9 	adceq	r0, r2, r9, ror #9
    47e4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    47e8:	00001f7f 	andeq	r1, r0, pc, ror pc
    47ec:	df04ea04 	svcle	0x0004ea04
    47f0:	10000000 	andne	r0, r0, r0
    47f4:	0005960e 	andeq	r9, r5, lr, lsl #12
    47f8:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    47fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    4800:	1f560e12 	svcne	0x00560e12
    4804:	ec040000 	stc	0, cr0, [r4], {-0}
    4808:	0000df04 	andeq	sp, r0, r4, lsl #30
    480c:	a00e1400 	andge	r1, lr, r0, lsl #8
    4810:	04000005 	streq	r0, [r0], #-5
    4814:	00a204ed 	adceq	r0, r2, sp, ror #9
    4818:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    481c:	00002078 	andeq	r2, r0, r8, ror r0
    4820:	df04ee04 	svcle	0x0004ee04
    4824:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4828:	0005aa0e 	andeq	sl, r5, lr, lsl #20
    482c:	04ef0400 	strbteq	r0, [pc], #1024	; 4834 <_Min_Stack_Size+0x4434>
    4830:	000000a2 	andeq	r0, r0, r2, lsr #1
    4834:	03f20e1a 	mvnseq	r0, #416	; 0x1a0
    4838:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    483c:	0000df04 	andeq	sp, r0, r4, lsl #30
    4840:	310e1c00 	tstcc	lr, r0, lsl #24
    4844:	0400001a 	streq	r0, [r0], #-26
    4848:	00a204f1 	strdeq	r0, [r2], r1	; <UNPREDICTABLE>
    484c:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    4850:	00002159 	andeq	r2, r0, r9, asr r1
    4854:	df04f204 	svcle	0x0004f204
    4858:	20000000 	andcs	r0, r0, r0
    485c:	001a3b0e 	andseq	r3, sl, lr, lsl #22
    4860:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    4864:	000000a2 	andeq	r0, r0, r2, lsr #1
    4868:	e10b0022 	tst	fp, r2, lsr #32
    486c:	04000021 	streq	r0, [r0], #-33	; 0x21
    4870:	02ee04f4 	rsceq	r0, lr, #244, 8	; 0xf4000000
    4874:	120f0000 	andne	r0, pc, #0
    4878:	04613605 	strbteq	r3, [r1], #-1541	; 0x605
    487c:	7f100000 	svcvc	0x00100000
    4880:	05000020 	streq	r0, [r0, #-32]
    4884:	0000a238 	andeq	sl, r0, r8, lsr r2
    4888:	ed100000 	ldc	0, cr0, [r0, #-0]
    488c:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4890:	0000a23b 	andeq	sl, r0, fp, lsr r2
    4894:	59100200 	ldmdbpl	r0, {r9}
    4898:	05000022 	streq	r0, [r0, #-34]	; 0x22
    489c:	0000a23e 	andeq	sl, r0, lr, lsr r2
    48a0:	9f100400 	svcls	0x00100400
    48a4:	05000021 	streq	r0, [r0, #-33]	; 0x21
    48a8:	0000a241 	andeq	sl, r0, r1, asr #4
    48ac:	bd100600 	ldclt	6, cr0, [r0, #-0]
    48b0:	05000021 	streq	r0, [r0, #-33]	; 0x21
    48b4:	0000a244 	andeq	sl, r0, r4, asr #4
    48b8:	08100800 	ldmdaeq	r0, {fp}
    48bc:	05000022 	streq	r0, [r0, #-34]	; 0x22
    48c0:	0000a247 	andeq	sl, r0, r7, asr #4
    48c4:	cb100a00 	blgt	4070cc <_Min_Stack_Size+0x406ccc>
    48c8:	05000021 	streq	r0, [r0, #-33]	; 0x21
    48cc:	0000a24b 	andeq	sl, r0, fp, asr #4
    48d0:	b0100c00 	andslt	r0, r0, r0, lsl #24
    48d4:	05000021 	streq	r0, [r0, #-33]	; 0x21
    48d8:	0000a251 	andeq	sl, r0, r1, asr r2
    48dc:	f3100e00 	vcge.f<illegal width 64>	d0, d0, d0
    48e0:	05000020 	streq	r0, [r0, #-32]
    48e4:	0000a254 	andeq	sl, r0, r4, asr r2
    48e8:	03001000 	movweq	r1, #0
    48ec:	0000210e 	andeq	r2, r0, lr, lsl #2
    48f0:	03ec5505 	mvneq	r5, #20971520	; 0x1400000
    48f4:	100f0000 	andne	r0, pc, r0
    48f8:	04bd5b05 	ldrteq	r5, [sp], #2821	; 0xb05
    48fc:	67100000 	ldrvs	r0, [r0, -r0]
    4900:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4904:	0000a25e 	andeq	sl, r0, lr, asr r2
    4908:	b5100000 	ldrlt	r0, [r0, #-0]
    490c:	0500001f 	streq	r0, [r0, #-31]
    4910:	0000a261 	andeq	sl, r0, r1, ror #4
    4914:	4a100200 	bmi	40511c <_Min_Stack_Size+0x404d1c>
    4918:	05000021 	streq	r0, [r0, #-33]	; 0x21
    491c:	0000a264 	andeq	sl, r0, r4, ror #4
    4920:	b9100400 	ldmdblt	r0, {sl}
    4924:	05000020 	streq	r0, [r0, #-32]
    4928:	0000a267 	andeq	sl, r0, r7, ror #4
    492c:	91100600 	tstls	r0, r0, lsl #12
    4930:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4934:	0000b86a 	andeq	fp, r0, sl, ror #16
    4938:	05100800 	ldreq	r0, [r0, #-2048]	; 0x800
    493c:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4940:	0000a26d 	andeq	sl, r0, sp, ror #4
    4944:	03000c00 	movweq	r0, #3072	; 0xc00
    4948:	00001f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    494c:	046c6f05 	strbteq	r6, [ip], #-3845	; 0xf05
    4950:	a6110000 	ldrge	r0, [r1], -r0
    4954:	0100001f 	tsteq	r0, pc, lsl r0
    4958:	0042c8e0 	subeq	ip, r2, r0, ror #17
    495c:	0000d808 	andeq	sp, r0, r8, lsl #16
    4960:	ec9c0100 	ldfs	f0, [ip], {0}
    4964:	12000004 	andne	r0, r0, #4
    4968:	000021c6 	andeq	r2, r0, r6, asr #3
    496c:	04ece001 	strbteq	lr, [ip], #1
    4970:	91020000 	mrsls	r0, (UNDEF: 2)
    4974:	04130074 	ldreq	r0, [r3], #-116	; 0x74
    4978:	000003e0 	andeq	r0, r0, r0, ror #7
    497c:	001f6214 	andseq	r6, pc, r4, lsl r2	; <UNPREDICTABLE>
    4980:	011c0100 	tsteq	ip, r0, lsl #2
    4984:	080043a0 	stmdaeq	r0, {r5, r7, r8, r9, lr}
    4988:	00000086 	andeq	r0, r0, r6, lsl #1
    498c:	05369c01 	ldreq	r9, [r6, #-3073]!	; 0xc01
    4990:	c6150000 	ldrgt	r0, [r5], -r0
    4994:	01000021 	tsteq	r0, r1, lsr #32
    4998:	04ec011c 	strbteq	r0, [ip], #284	; 0x11c
    499c:	91020000 	mrsls	r0, (UNDEF: 2)
    49a0:	212d156c 	teqcs	sp, ip, ror #10
    49a4:	1c010000 	stcne	0, cr0, [r1], {-0}
    49a8:	00053601 	andeq	r3, r5, r1, lsl #12
    49ac:	68910200 	ldmvs	r1, {r9}
    49b0:	00037516 	andeq	r7, r3, r6, lsl r5
    49b4:	011e0100 	tsteq	lr, r0, lsl #2
    49b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    49bc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    49c0:	04610413 	strbteq	r0, [r1], #-1043	; 0x413
    49c4:	3b140000 	blcc	5049cc <_Min_Stack_Size+0x5045cc>
    49c8:	01000022 	tsteq	r0, r2, lsr #32
    49cc:	4428015c 	strtmi	r0, [r8], #-348	; 0x15c
    49d0:	01b00800 	lslseq	r0, r0, #16
    49d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49d8:	000005f8 	strdeq	r0, [r0], -r8
    49dc:	0021c615 	eoreq	ip, r1, r5, lsl r6
    49e0:	015c0100 	cmpeq	ip, r0, lsl #2
    49e4:	000004ec 	andeq	r0, r0, ip, ror #9
    49e8:	15549102 	ldrbne	r9, [r4, #-258]	; 0x102
    49ec:	00001f70 	andeq	r1, r0, r0, ror pc
    49f0:	f8015c01 			; <UNDEFINED> instruction: 0xf8015c01
    49f4:	02000005 	andeq	r0, r0, #5
    49f8:	75165091 	ldrvc	r5, [r6, #-145]	; 0x91
    49fc:	01000003 	tsteq	r0, r3
    4a00:	00a2015e 	adceq	r0, r2, lr, asr r1
    4a04:	91020000 	mrsls	r0, (UNDEF: 2)
    4a08:	218a166a 	orrcs	r1, sl, sl, ror #12
    4a0c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    4a10:	0000a201 	andeq	sl, r0, r1, lsl #4
    4a14:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4a18:	00226616 	eoreq	r6, r2, r6, lsl r6
    4a1c:	015e0100 	cmpeq	lr, r0, lsl #2
    4a20:	000000a2 	andeq	r0, r0, r2, lsr #1
    4a24:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4a28:	0000226d 	andeq	r2, r0, sp, ror #4
    4a2c:	a2015e01 	andge	r5, r1, #1, 28
    4a30:	02000000 	andeq	r0, r0, #0
    4a34:	74177291 	ldrvc	r7, [r7], #-657	; 0x291
    4a38:	0100706d 	tsteq	r0, sp, rrx
    4a3c:	00b8015f 	adcseq	r0, r8, pc, asr r1
    4a40:	91020000 	mrsls	r0, (UNDEF: 2)
    4a44:	22ef166c 	rsccs	r1, pc, #108, 12	; 0x6c00000
    4a48:	5f010000 	svcpl	0x00010000
    4a4c:	0000b801 	andeq	fp, r0, r1, lsl #16
    4a50:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4a54:	0004d416 	andeq	sp, r4, r6, lsl r4
    4a58:	01610100 	cmneq	r1, r0, lsl #2
    4a5c:	000000b8 	strheq	r0, [r0], -r8
    4a60:	16609102 	strbtne	r9, [r0], -r2, lsl #2
    4a64:	00001f5d 	andeq	r1, r0, sp, asr pc
    4a68:	b8016101 	stmdalt	r1, {r0, r8, sp, lr}
    4a6c:	02000000 	andeq	r0, r0, #0
    4a70:	6b165c91 	blvs	59bcbc <_Min_Stack_Size+0x59b8bc>
    4a74:	0100001f 	tsteq	r0, pc, lsl r0
    4a78:	00b80161 	adcseq	r0, r8, r1, ror #2
    4a7c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a80:	04130058 	ldreq	r0, [r3], #-88	; 0x58
    4a84:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    4a88:	00203b14 	eoreq	r3, r0, r4, lsl fp
    4a8c:	01e00100 	mvneq	r0, r0, lsl #2
    4a90:	080045d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr}
    4a94:	00000048 	andeq	r0, r0, r8, asr #32
    4a98:	06249c01 	strteq	r9, [r4], -r1, lsl #24
    4a9c:	2d150000 	ldccs	0, cr0, [r5, #-0]
    4aa0:	01000021 	tsteq	r0, r1, lsr #32
    4aa4:	053601e0 	ldreq	r0, [r6, #-480]!	; 0x1e0
    4aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    4aac:	2c140074 	ldccs	0, cr0, [r4], {116}	; 0x74
    4ab0:	01000022 	tsteq	r0, r2, lsr #32
    4ab4:	462001fc 			; <UNDEFINED> instruction: 0x462001fc
    4ab8:	00360800 	eorseq	r0, r6, r0, lsl #16
    4abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ac0:	0000064a 	andeq	r0, r0, sl, asr #12
    4ac4:	001f7015 	andseq	r7, pc, r5, lsl r0	; <UNPREDICTABLE>
    4ac8:	01fc0100 	mvnseq	r0, r0, lsl #2
    4acc:	000005f8 	strdeq	r0, [r0], -r8
    4ad0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4ad4:	00215f14 	eoreq	r5, r1, r4, lsl pc
    4ad8:	02190100 	andseq	r0, r9, #0, 2
    4adc:	08004658 	stmdaeq	r0, {r3, r4, r6, r9, sl, lr}
    4ae0:	0000003e 	andeq	r0, r0, lr, lsr r0
    4ae4:	067f9c01 	ldrbteq	r9, [pc], -r1, lsl #24
    4ae8:	c6150000 	ldrgt	r0, [r5], -r0
    4aec:	01000021 	tsteq	r0, r1, lsr #32
    4af0:	04ec0219 	strbteq	r0, [ip], #537	; 0x219
    4af4:	91020000 	mrsls	r0, (UNDEF: 2)
    4af8:	06781574 			; <UNDEFINED> instruction: 0x06781574
    4afc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    4b00:	00012d02 	andeq	r2, r1, r2, lsl #26
    4b04:	73910200 	orrsvc	r0, r1, #0, 4
    4b08:	21a81400 			; <UNDEFINED> instruction: 0x21a81400
    4b0c:	32010000 	andcc	r0, r1, #0
    4b10:	00469802 	subeq	r9, r6, r2, lsl #16
    4b14:	00003e08 	andeq	r3, r0, r8, lsl #28
    4b18:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    4b1c:	15000006 	strne	r0, [r0, #-6]
    4b20:	000021c6 	andeq	r2, r0, r6, asr #3
    4b24:	ec023201 	sfm	f3, 4, [r2], {1}
    4b28:	02000004 	andeq	r0, r0, #4
    4b2c:	78157491 	ldmdavc	r5, {r0, r4, r7, sl, ip, sp, lr}
    4b30:	01000006 	tsteq	r0, r6
    4b34:	012d0232 	teqeq	sp, r2, lsr r2
    4b38:	91020000 	mrsls	r0, (UNDEF: 2)
    4b3c:	e0140073 	ands	r0, r4, r3, ror r0
    4b40:	01000020 	tsteq	r0, r0, lsr #32
    4b44:	46d8024d 	ldrbmi	r0, [r8], sp, asr #4
    4b48:	00360800 	eorseq	r0, r6, r0, lsl #16
    4b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b50:	000006e9 	andeq	r0, r0, r9, ror #13
    4b54:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4b58:	024d0100 	subeq	r0, sp, #0, 2
    4b5c:	000004ec 	andeq	r0, r0, ip, ror #9
    4b60:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4b64:	00002259 	andeq	r2, r0, r9, asr r2
    4b68:	a2024d01 	andge	r4, r2, #1, 26	; 0x40
    4b6c:	02000000 	andeq	r0, r0, #0
    4b70:	14007291 	strne	r7, [r0], #-657	; 0x291
    4b74:	00001fc2 	andeq	r1, r0, r2, asr #31
    4b78:	10026101 	andne	r6, r2, r1, lsl #2
    4b7c:	40080047 	andmi	r0, r8, r7, asr #32
    4b80:	01000000 	mrseq	r0, (UNDEF: 0)
    4b84:	00071e9c 	muleq	r7, ip, lr
    4b88:	21c61500 	biccs	r1, r6, r0, lsl #10
    4b8c:	61010000 	mrsvs	r0, (UNDEF: 1)
    4b90:	0004ec02 	andeq	lr, r4, r2, lsl #24
    4b94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4b98:	00207f15 	eoreq	r7, r0, r5, lsl pc
    4b9c:	02610100 	rsbeq	r0, r1, #0, 2
    4ba0:	000000a2 	andeq	r0, r0, r2, lsr #1
    4ba4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4ba8:	00201d14 	eoreq	r1, r0, r4, lsl sp
    4bac:	027b0100 	rsbseq	r0, fp, #0, 2
    4bb0:	08004750 	stmdaeq	r0, {r4, r6, r8, r9, sl, lr}
    4bb4:	00000042 	andeq	r0, r0, r2, asr #32
    4bb8:	07539c01 	ldrbeq	r9, [r3, -r1, lsl #24]
    4bbc:	c6150000 	ldrgt	r0, [r5], -r0
    4bc0:	01000021 	tsteq	r0, r1, lsr #32
    4bc4:	04ec027b 	strbteq	r0, [ip], #635	; 0x27b
    4bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    4bcc:	20951574 	addscs	r1, r5, r4, ror r5
    4bd0:	7b010000 	blvc	44bd8 <_Min_Stack_Size+0x447d8>
    4bd4:	0000a202 	andeq	sl, r0, r2, lsl #4
    4bd8:	72910200 	addsvc	r0, r1, #0, 4
    4bdc:	20601400 	rsbcs	r1, r0, r0, lsl #8
    4be0:	93010000 	movwls	r0, #4096	; 0x1000
    4be4:	00479402 	subeq	r9, r7, r2, lsl #8
    4be8:	00003e08 	andeq	r3, r0, r8, lsl #28
    4bec:	889c0100 	ldmhi	ip, {r8}
    4bf0:	15000007 	strne	r0, [r0, #-7]
    4bf4:	000021c6 	andeq	r2, r0, r6, asr #3
    4bf8:	ec029301 	stc	3, cr9, [r2], {1}
    4bfc:	02000004 	andeq	r0, r0, #4
    4c00:	78157491 	ldmdavc	r5, {r0, r4, r7, sl, ip, sp, lr}
    4c04:	01000006 	tsteq	r0, r6
    4c08:	012d0293 			; <UNDEFINED> instruction: 0x012d0293
    4c0c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c10:	3c140073 	ldccc	0, cr0, [r4], {115}	; 0x73
    4c14:	01000021 	tsteq	r0, r1, lsr #32
    4c18:	47d402b2 			; <UNDEFINED> instruction: 0x47d402b2
    4c1c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    4c20:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c24:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    4c28:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4c2c:	02b20100 	adcseq	r0, r2, #0, 2
    4c30:	000004ec 	andeq	r0, r0, ip, ror #9
    4c34:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4c38:	00000678 	andeq	r0, r0, r8, ror r6
    4c3c:	2d02b201 	sfmcs	f3, 1, [r2, #-4]
    4c40:	02000001 	andeq	r0, r0, #1
    4c44:	14007391 	strne	r7, [r0], #-913	; 0x391
    4c48:	00002244 	andeq	r2, r0, r4, asr #4
    4c4c:	1402d701 	strne	sp, [r2], #-1793	; 0x701
    4c50:	9a080048 	bls	204d78 <_Min_Stack_Size+0x204978>
    4c54:	01000000 	mrseq	r0, (UNDEF: 0)
    4c58:	0008109c 	muleq	r8, ip, r0
    4c5c:	20701500 	rsbscs	r1, r0, r0, lsl #10
    4c60:	d7010000 	strle	r0, [r1, -r0]
    4c64:	0004ec02 	andeq	lr, r4, r2, lsl #24
    4c68:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4c6c:	001f7015 	andseq	r7, pc, r5, lsl r0	; <UNPREDICTABLE>
    4c70:	02d70100 	sbcseq	r0, r7, #0, 2
    4c74:	000005f8 	strdeq	r0, [r0], -r8
    4c78:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    4c7c:	00000375 	andeq	r0, r0, r5, ror r3
    4c80:	a202d901 	andge	sp, r2, #16384	; 0x4000
    4c84:	02000000 	andeq	r0, r0, #0
    4c88:	74177491 	ldrvc	r7, [r7], #-1169	; 0x491
    4c8c:	0100706d 	tsteq	r0, sp, rrx
    4c90:	00a202d9 	ldrdeq	r0, [r2], r9	; <UNPREDICTABLE>
    4c94:	91020000 	mrsls	r0, (UNDEF: 2)
    4c98:	db180076 	blle	604e78 <_Min_Stack_Size+0x604a78>
    4c9c:	01000022 	tsteq	r0, r2, lsr #32
    4ca0:	00a20321 	adceq	r0, r2, r1, lsr #6
    4ca4:	48b00000 	ldmmi	r0!, {}	; <UNPREDICTABLE>
    4ca8:	001a0800 	andseq	r0, sl, r0, lsl #16
    4cac:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cb0:	0000083a 	andeq	r0, r0, sl, lsr r8
    4cb4:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4cb8:	03210100 	teqeq	r1, #0, 2
    4cbc:	000004ec 	andeq	r0, r0, ip, ror #9
    4cc0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4cc4:	0022ca14 	eoreq	ip, r2, r4, lsl sl
    4cc8:	03310100 	teqeq	r1, #0, 2
    4ccc:	080048cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr}
    4cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
    4cd4:	086f9c01 	stmdaeq	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    4cd8:	c6150000 	ldrgt	r0, [r5], -r0
    4cdc:	01000021 	tsteq	r0, r1, lsr #32
    4ce0:	04ec0331 	strbteq	r0, [ip], #817	; 0x331
    4ce4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ce8:	18491574 	stmdane	r9, {r2, r4, r5, r6, r8, sl, ip}^
    4cec:	31010000 	mrscc	r0, (UNDEF: 1)
    4cf0:	0000a203 	andeq	sl, r0, r3, lsl #4
    4cf4:	72910200 	addsvc	r0, r1, #0, 4
    4cf8:	22101400 	andscs	r1, r0, #0, 8
    4cfc:	8b010000 	blhi	44d04 <_Min_Stack_Size+0x44904>
    4d00:	0048e803 	subeq	lr, r8, r3, lsl #16
    4d04:	00003e08 	andeq	r3, r0, r8, lsl #28
    4d08:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    4d0c:	15000008 	strne	r0, [r0, #-8]
    4d10:	000021c6 	andeq	r2, r0, r6, asr #3
    4d14:	ec038b01 	stc	11, cr8, [r3], {1}
    4d18:	02000004 	andeq	r0, r0, #4
    4d1c:	78157491 	ldmdavc	r5, {r0, r4, r7, sl, ip, sp, lr}
    4d20:	01000006 	tsteq	r0, r6
    4d24:	012d038b 	smlawbeq	sp, fp, r3, r0
    4d28:	91020000 	mrsls	r0, (UNDEF: 2)
    4d2c:	a9140073 	ldmdbge	r4, {r0, r1, r4, r5, r6}
    4d30:	01000020 	tsteq	r0, r0, lsr #32
    4d34:	492803a1 	stmdbmi	r8!, {r0, r5, r7, r8, r9}
    4d38:	00220800 	eoreq	r0, r2, r0, lsl #16
    4d3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d40:	000008ca 	andeq	r0, r0, sl, asr #17
    4d44:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4d48:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    4d4c:	000004ec 	andeq	r0, r0, ip, ror #9
    4d50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4d54:	00222118 	eoreq	r2, r2, r8, lsl r1
    4d58:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    4d5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d60:	0800494c 	stmdaeq	r0, {r2, r3, r6, r8, fp, lr}
    4d64:	00000032 	andeq	r0, r0, r2, lsr r0
    4d68:	09129c01 	ldmdbeq	r2, {r0, sl, fp, ip, pc}
    4d6c:	c6150000 	ldrgt	r0, [r5], -r0
    4d70:	01000021 	tsteq	r0, r1, lsr #32
    4d74:	04ec03b3 	strbteq	r0, [ip], #947	; 0x3b3
    4d78:	91020000 	mrsls	r0, (UNDEF: 2)
    4d7c:	208d156c 	addcs	r1, sp, ip, ror #10
    4d80:	b3010000 	movwlt	r0, #4096	; 0x1000
    4d84:	00009703 	andeq	r9, r0, r3, lsl #14
    4d88:	6b910200 	blvs	fe445590 <_estack+0xde415590>
    4d8c:	001ff316 	andseq	pc, pc, r6, lsl r3	; <UNPREDICTABLE>
    4d90:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    4d94:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d98:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4d9c:	001fde18 	andseq	sp, pc, r8, lsl lr	; <UNPREDICTABLE>
    4da0:	03cc0100 	biceq	r0, ip, #0, 2
    4da4:	000000a2 	andeq	r0, r0, r2, lsr #1
    4da8:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    4dac:	0000001a 	andeq	r0, r0, sl, lsl r0
    4db0:	093c9c01 	ldmdbeq	ip!, {r0, sl, fp, ip, pc}
    4db4:	c6150000 	ldrgt	r0, [r5], -r0
    4db8:	01000021 	tsteq	r0, r1, lsr #32
    4dbc:	04ec03cc 	strbteq	r0, [ip], #972	; 0x3cc
    4dc0:	91020000 	mrsls	r0, (UNDEF: 2)
    4dc4:	fa140074 	blx	504f9c <_Min_Stack_Size+0x504b9c>
    4dc8:	0100001f 	tsteq	r0, pc, lsl r0
    4dcc:	499c03f1 	ldmibmi	ip, {r0, r4, r5, r6, r7, r8, r9}
    4dd0:	00460800 	subeq	r0, r6, r0, lsl #16
    4dd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4dd8:	00000980 	andeq	r0, r0, r0, lsl #19
    4ddc:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4de0:	03f10100 	mvnseq	r0, #0, 2
    4de4:	000004ec 	andeq	r0, r0, ip, ror #9
    4de8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4dec:	0000211e 	andeq	r2, r0, lr, lsl r1
    4df0:	a203f101 	andge	pc, r3, #1073741824	; 0x40000000
    4df4:	02000000 	andeq	r0, r0, #0
    4df8:	78157291 	ldmdavc	r5, {r0, r4, r7, r9, ip, sp, lr}
    4dfc:	01000006 	tsteq	r0, r6
    4e00:	012d03f1 	strdeq	r0, [sp, -r1]!
    4e04:	91020000 	mrsls	r0, (UNDEF: 2)
    4e08:	85140071 	ldrhi	r0, [r4, #-113]	; 0x71
    4e0c:	0100001f 	tsteq	r0, pc, lsl r0
    4e10:	49e4045d 	stmibmi	r4!, {r0, r2, r3, r4, r6, sl}^
    4e14:	00600800 	rsbeq	r0, r0, r0, lsl #16
    4e18:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e1c:	000009e2 	andeq	r0, r0, r2, ror #19
    4e20:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4e24:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    4e28:	000004ec 	andeq	r0, r0, ip, ror #9
    4e2c:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4e30:	000020d5 	ldrdeq	r2, [r0], -r5
    4e34:	97045d01 	strls	r5, [r4, -r1, lsl #26]
    4e38:	02000000 	andeq	r0, r0, #0
    4e3c:	78156b91 	ldmdavc	r5, {r0, r4, r7, r8, r9, fp, sp, lr}
    4e40:	01000006 	tsteq	r0, r6
    4e44:	012d045d 	teqeq	sp, sp, asr r4
    4e48:	91020000 	mrsls	r0, (UNDEF: 2)
    4e4c:	1481166a 	strne	r1, [r1], #1642	; 0x66a
    4e50:	5f010000 	svcpl	0x00010000
    4e54:	0000a204 	andeq	sl, r0, r4, lsl #4
    4e58:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4e5c:	00159c16 	andseq	r9, r5, r6, lsl ip
    4e60:	045f0100 	ldrbeq	r0, [pc], #-256	; 4e68 <_Min_Stack_Size+0x4a68>
    4e64:	000000a2 	andeq	r0, r0, r2, lsr #1
    4e68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4e6c:	00204a18 	eoreq	r4, r0, r8, lsl sl
    4e70:	04890100 	streq	r0, [r9], #256	; 0x100
    4e74:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4e78:	08004a44 	stmdaeq	r0, {r2, r6, r9, fp, lr}
    4e7c:	00000038 	andeq	r0, r0, r8, lsr r0
    4e80:	0a2a9c01 	beq	aabe8c <_Min_Stack_Size+0xaaba8c>
    4e84:	c6150000 	ldrgt	r0, [r5], -r0
    4e88:	01000021 	tsteq	r0, r1, lsr #32
    4e8c:	04ec0489 	strbteq	r0, [ip], #1161	; 0x489
    4e90:	91020000 	mrsls	r0, (UNDEF: 2)
    4e94:	20c8156c 	sbccs	r1, r8, ip, ror #10
    4e98:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4e9c:	0000a204 	andeq	sl, r0, r4, lsl #4
    4ea0:	6a910200 	bvs	fe4456a8 <_estack+0xde4156a8>
    4ea4:	00096316 	andeq	r6, r9, r6, lsl r3
    4ea8:	048b0100 	streq	r0, [fp], #256	; 0x100
    4eac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4eb0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4eb4:	0021f614 	eoreq	pc, r1, r4, lsl r6	; <UNPREDICTABLE>
    4eb8:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    4ebc:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
    4ec0:	00000020 	andeq	r0, r0, r0, lsr #32
    4ec4:	0a5f9c01 	beq	17ebed0 <_Min_Stack_Size+0x17ebad0>
    4ec8:	c6150000 	ldrgt	r0, [r5], -r0
    4ecc:	01000021 	tsteq	r0, r1, lsr #32
    4ed0:	04ec04b2 	strbteq	r0, [ip], #1202	; 0x4b2
    4ed4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ed8:	20c81574 	sbccs	r1, r8, r4, ror r5
    4edc:	b2010000 	andlt	r0, r1, #0
    4ee0:	0000a204 	andeq	sl, r0, r4, lsl #4
    4ee4:	72910200 	addsvc	r0, r1, #0, 4
    4ee8:	20091800 	andcs	r1, r9, r0, lsl #16
    4eec:	cb010000 	blgt	44ef4 <_Min_Stack_Size+0x44af4>
    4ef0:	00010b04 	andeq	r0, r1, r4, lsl #22
    4ef4:	004a9c00 	subeq	r9, sl, r0, lsl #24
    4ef8:	00007608 	andeq	r7, r0, r8, lsl #12
    4efc:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    4f00:	1500000a 	strne	r0, [r0, #-10]
    4f04:	000021c6 	andeq	r2, r0, r6, asr #3
    4f08:	ec04cb01 	stc	11, cr12, [r4], {1}
    4f0c:	02000004 	andeq	r0, r0, #4
    4f10:	d5156c91 	ldrle	r6, [r5, #-3217]	; 0xc91
    4f14:	01000020 	tsteq	r0, r0, lsr #32
    4f18:	009704cb 	addseq	r0, r7, fp, asr #9
    4f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    4f20:	0963166b 	stmdbeq	r3!, {r0, r1, r3, r5, r6, r9, sl, ip}^
    4f24:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4f28:	00010b04 	andeq	r0, r1, r4, lsl #22
    4f2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4f30:	00148116 	andseq	r8, r4, r6, lsl r1
    4f34:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    4f38:	000000a2 	andeq	r0, r0, r2, lsr #1
    4f3c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4f40:	0000159c 	muleq	r0, ip, r5
    4f44:	a204ce01 	andge	ip, r4, #1, 28
    4f48:	02000000 	andeq	r0, r0, #0
    4f4c:	fe167291 	mrc2	2, 0, r7, cr6, cr1, {4}
    4f50:	0100001a 	tsteq	r0, sl, lsl r0
    4f54:	00a204ce 	adceq	r0, r2, lr, asr #9
    4f58:	91020000 	mrsls	r0, (UNDEF: 2)
    4f5c:	70140070 	andsvc	r0, r4, r0, ror r0
    4f60:	01000021 	tsteq	r0, r1, lsr #32
    4f64:	4b140502 	blmi	506374 <_Min_Stack_Size+0x505f74>
    4f68:	00320800 	eorseq	r0, r2, r0, lsl #16
    4f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f70:	00000b18 	andeq	r0, r0, r8, lsl fp
    4f74:	0021c615 	eoreq	ip, r1, r5, lsl r6
    4f78:	05020100 	streq	r0, [r2, #-256]	; 0x100
    4f7c:	000004ec 	andeq	r0, r0, ip, ror #9
    4f80:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4f84:	000020d5 	ldrdeq	r2, [r0], -r5
    4f88:	97050201 	strls	r0, [r5, -r1, lsl #4]
    4f8c:	02000000 	andeq	r0, r0, #0
    4f90:	81166b91 			; <UNDEFINED> instruction: 0x81166b91
    4f94:	01000014 	tsteq	r0, r4, lsl r0
    4f98:	00a20504 	adceq	r0, r2, r4, lsl #10
    4f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    4fa0:	5e190076 	mrcpl	0, 0, r0, cr9, cr6, {3}
    4fa4:	06000001 	streq	r0, [r0], -r1
    4fa8:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    4fac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4fb0:	04000003 	streq	r0, [r0], #-3
    4fb4:	000ef200 	andeq	pc, lr, r0, lsl #4
    4fb8:	21010400 	tstcs	r1, r0, lsl #8
    4fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    4fc0:	0000244e 	andeq	r2, r0, lr, asr #8
    4fc4:	00000114 	andeq	r0, r0, r4, lsl r1
    4fc8:	000006a8 	andeq	r0, r0, r8, lsr #13
    4fcc:	00000000 	andeq	r0, r0, r0
    4fd0:	00002354 	andeq	r2, r0, r4, asr r3
    4fd4:	4d060102 	stfmis	f0, [r6, #-8]
    4fd8:	02000001 	andeq	r0, r0, #1
    4fdc:	014b0801 	cmpeq	fp, r1, lsl #16
    4fe0:	02020000 	andeq	r0, r2, #0
    4fe4:	00018705 	andeq	r8, r1, r5, lsl #14
    4fe8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4fec:	0000000e 	andeq	r0, r0, lr
    4ff0:	00017703 	andeq	r7, r1, r3, lsl #14
    4ff4:	4c3f0200 	lfmmi	f0, 4, [pc], #-0	; 4ffc <_Min_Stack_Size+0x4bfc>
    4ff8:	02000000 	andeq	r0, r0, #0
    4ffc:	00050504 	andeq	r0, r5, r4, lsl #10
    5000:	b4030000 	strlt	r0, [r3], #-0
    5004:	02000005 	andeq	r0, r0, #5
    5008:	00005e41 	andeq	r5, r0, r1, asr #28
    500c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5010:	0000012e 	andeq	r0, r0, lr, lsr #2
    5014:	00050802 	andeq	r0, r5, r2, lsl #16
    5018:	02000000 	andeq	r0, r0, #0
    501c:	01290708 	teqeq	r9, r8, lsl #14
    5020:	04040000 	streq	r0, [r4], #-0
    5024:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    5028:	07040200 	streq	r0, [r4, -r0, lsl #4]
    502c:	00000133 	andeq	r0, r0, r3, lsr r1
    5030:	00017903 	andeq	r7, r1, r3, lsl #18
    5034:	41410300 	mrsmi	r0, (UNDEF: 113)
    5038:	03000000 	movweq	r0, #0
    503c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    5040:	00534203 	subseq	r4, r3, r3, lsl #4
    5044:	04020000 	streq	r0, [r2], #-0
    5048:	00019107 	andeq	r9, r1, r7, lsl #2
    504c:	008c0500 	addeq	r0, ip, r0, lsl #10
    5050:	81050000 	mrshi	r0, (UNDEF: 5)
    5054:	06000000 	streq	r0, [r0], -r0
    5058:	01f70401 	mvnseq	r0, r1, lsl #8
    505c:	000000be 	strheq	r0, [r0], -lr
    5060:	00087e07 	andeq	r7, r8, r7, lsl #28
    5064:	53080000 	movwpl	r0, #32768	; 0x8000
    5068:	01005445 	tsteq	r0, r5, asr #8
    506c:	1e880900 	cdpne	9, 8, cr0, cr8, cr0, {0}
    5070:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    5074:	0000a801 	andeq	sl, r0, r1, lsl #16
    5078:	4dd60900 	ldclmi	9, cr0, [r6]
    507c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    5080:	0000a801 	andeq	sl, r0, r1, lsl #16
    5084:	04010600 	streq	r0, [r1], #-1536	; 0x600
    5088:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    508c:	86070000 	strhi	r0, [r7], -r0
    5090:	00000006 	andeq	r0, r0, r6
    5094:	0007de07 	andeq	sp, r7, r7, lsl #28
    5098:	09000100 	stmdbeq	r0, {r8}
    509c:	000007af 	andeq	r0, r0, pc, lsr #15
    50a0:	d601f904 	strle	pc, [r1], -r4, lsl #18
    50a4:	0a000000 	beq	50ac <_Min_Stack_Size+0x4cac>
    50a8:	03300418 	teqeq	r0, #24, 8	; 0x18000000
    50ac:	0000014f 	andeq	r0, r0, pc, asr #2
    50b0:	524d490b 	subpl	r4, sp, #180224	; 0x2c000
    50b4:	03320400 	teqeq	r2, #0, 8
    50b8:	0000009e 	muleq	r0, lr, r0
    50bc:	4d450b00 	vstrmi	d16, [r5, #-0]
    50c0:	33040052 	movwcc	r0, #16466	; 0x4052
    50c4:	00009e03 	andeq	r9, r0, r3, lsl #28
    50c8:	af0c0400 	svcge	0x000c0400
    50cc:	04000023 	streq	r0, [r0], #-35	; 0x23
    50d0:	009e0334 	addseq	r0, lr, r4, lsr r3
    50d4:	0c080000 	stceq	0, cr0, [r8], {-0}
    50d8:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    50dc:	9e033504 	cfsh32ls	mvfx3, mvfx3, #4
    50e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    50e4:	0024b80c 	eoreq	fp, r4, ip, lsl #16
    50e8:	03360400 	teqeq	r6, #0, 8
    50ec:	0000009e 	muleq	r0, lr, r0
    50f0:	52500b10 	subspl	r0, r0, #16, 22	; 0x4000
    50f4:	03370400 	teqeq	r7, #0, 8
    50f8:	0000009e 	muleq	r0, lr, r0
    50fc:	a2090014 	andge	r0, r9, #20
    5100:	04000023 	streq	r0, [r0], #-35	; 0x23
    5104:	00f80338 	rscseq	r0, r8, r8, lsr r3
    5108:	010d0000 	mrseq	r0, (UNDEF: 13)
    510c:	01703705 	cmneq	r0, r5, lsl #14
    5110:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5114:	00000023 	andeq	r0, r0, r3, lsr #32
    5118:	00232407 	eoreq	r2, r3, r7, lsl #8
    511c:	03000400 	movweq	r0, #1024	; 0x400
    5120:	00002391 	muleq	r0, r1, r3
    5124:	015b3a05 	cmpeq	fp, r5, lsl #20
    5128:	010d0000 	mrseq	r0, (UNDEF: 13)
    512c:	01964305 	orrseq	r4, r6, r5, lsl #6
    5130:	b4070000 	strlt	r0, [r7], #-0
    5134:	08000023 	stmdaeq	r0, {r0, r1, r5}
    5138:	00243907 	eoreq	r3, r4, r7, lsl #18
    513c:	c8070c00 	stmdagt	r7, {sl, fp}
    5140:	10000023 	andne	r0, r0, r3, lsr #32
    5144:	24a40300 	strtcs	r0, [r4], #768	; 0x300
    5148:	47050000 	strmi	r0, [r5, -r0]
    514c:	0000017b 	andeq	r0, r0, fp, ror r1
    5150:	5005080e 	andpl	r0, r5, lr, lsl #16
    5154:	000001da 	ldrdeq	r0, [r0], -sl
    5158:	0022f60f 	eoreq	pc, r2, pc, lsl #12
    515c:	8c520500 	cfldr64hi	mvdx0, [r2], {-0}
    5160:	00000000 	andeq	r0, r0, r0
    5164:	0023000f 	eoreq	r0, r3, pc
    5168:	70550500 	subsvc	r0, r5, r0, lsl #10
    516c:	04000001 	streq	r0, [r0], #-1
    5170:	0023170f 	eoreq	r1, r3, pc, lsl #14
    5174:	96580500 	ldrbls	r0, [r8], -r0, lsl #10
    5178:	05000001 	streq	r0, [r0, #-1]
    517c:	00230a0f 	eoreq	r0, r3, pc, lsl #20
    5180:	ec5b0500 	cfldr64	mvdx0, [fp], {-0}
    5184:	06000000 	streq	r0, [r0], -r0
    5188:	234d0300 	movtcs	r0, #54016	; 0xd300
    518c:	5d050000 	stcpl	0, cr0, [r5, #-0]
    5190:	000001a1 	andeq	r0, r0, r1, lsr #3
    5194:	0024be10 	eoreq	fp, r4, r0, lsl lr
    5198:	486e0100 	stmdami	lr!, {r8}^
    519c:	3408004b 	strcc	r0, [r8], #-75	; 0x4b
    51a0:	01000000 	mrseq	r0, (UNDEF: 0)
    51a4:	23e4119c 	mvncs	r1, #156, 2	; 0x27
    51a8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    51ac:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
    51b0:	000000dc 	ldrdeq	r0, [r0], -ip
    51b4:	02289c01 	eoreq	r9, r8, #256	; 0x100
    51b8:	5e120000 	cdppl	0, 1, cr0, cr2, cr0, {0}
    51bc:	01000023 	tsteq	r0, r3, lsr #32
    51c0:	0002287e 	andeq	r2, r2, lr, ror r8
    51c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    51c8:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    51cc:	8c800100 	stfhis	f0, [r0], {0}
    51d0:	02000000 	andeq	r0, r0, #0
    51d4:	14007491 	strne	r7, [r0], #-1169	; 0x491
    51d8:	0001da04 	andeq	sp, r1, r4, lsl #20
    51dc:	24011100 	strcs	r1, [r1], #-256	; 0x100
    51e0:	b6010000 	strlt	r0, [r1], -r0
    51e4:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    51e8:	0000002a 	andeq	r0, r0, sl, lsr #32
    51ec:	02529c01 	subseq	r9, r2, #256	; 0x100
    51f0:	5e120000 	cdppl	0, 1, cr0, cr2, cr0, {0}
    51f4:	01000023 	tsteq	r0, r3, lsr #32
    51f8:	000228b6 			; <UNDEFINED> instruction: 0x000228b6
    51fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5200:	23341100 	teqcs	r4, #0, 2
    5204:	c5010000 	strgt	r0, [r1, #-0]
    5208:	08004c84 	stmdaeq	r0, {r2, r7, sl, fp, lr}
    520c:	00000024 	andeq	r0, r0, r4, lsr #32
    5210:	02769c01 	rsbseq	r9, r6, #256	; 0x100
    5214:	f6120000 			; <UNDEFINED> instruction: 0xf6120000
    5218:	01000022 	tsteq	r0, r2, lsr #32
    521c:	00008cc5 	andeq	r8, r0, r5, asr #25
    5220:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5224:	23ee1500 	mvncs	r1, #0, 10
    5228:	e3010000 	movw	r0, #4096	; 0x1000
    522c:	000000be 	strheq	r0, [r0], -lr
    5230:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
    5234:	00000034 	andeq	r0, r0, r4, lsr r0
    5238:	02ac9c01 	adceq	r9, ip, #256	; 0x100
    523c:	f6120000 			; <UNDEFINED> instruction: 0xf6120000
    5240:	01000022 	tsteq	r0, r2, lsr #32
    5244:	00008ce3 	andeq	r8, r0, r3, ror #25
    5248:	6c910200 	lfmvs	f0, 4, [r1], {0}
    524c:	00096316 	andeq	r6, r9, r6, lsl r3
    5250:	bee50100 	cdplt	1, 14, cr0, cr5, cr0, {0}
    5254:	02000000 	andeq	r0, r0, #0
    5258:	11007791 			; <UNDEFINED> instruction: 0x11007791
    525c:	00002382 	andeq	r2, r0, r2, lsl #7
    5260:	4cdcfa01 	vldmiami	ip, {s31}
    5264:	001c0800 	andseq	r0, ip, r0, lsl #16
    5268:	9c010000 	stcls	0, cr0, [r1], {-0}
    526c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5270:	0022f612 	eoreq	pc, r2, r2, lsl r6	; <UNPREDICTABLE>
    5274:	8cfa0100 	ldfhie	f0, [sl]
    5278:	02000000 	andeq	r0, r0, #0
    527c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    5280:	00002411 	andeq	r2, r0, r1, lsl r4
    5284:	ca010801 	bgt	47290 <_Min_Stack_Size+0x46e90>
    5288:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    528c:	3408004c 	strcc	r0, [r8], #-76	; 0x4c
    5290:	01000000 	mrseq	r0, (UNDEF: 0)
    5294:	0003099c 	muleq	r3, ip, r9
    5298:	22f61800 	rscscs	r1, r6, #0, 16
    529c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    52a0:	00008c01 	andeq	r8, r0, r1, lsl #24
    52a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    52a8:	00096319 	andeq	r6, r9, r9, lsl r3
    52ac:	010a0100 	mrseq	r0, (UNDEF: 26)
    52b0:	000000be 	strheq	r0, [r0], -lr
    52b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    52b8:	0024221a 	eoreq	r2, r4, sl, lsl r2
    52bc:	01200100 	teqeq	r0, r0, lsl #2
    52c0:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    52c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    52c8:	032f9c01 	teqeq	pc, #256	; 0x100
    52cc:	f6180000 			; <UNDEFINED> instruction: 0xf6180000
    52d0:	01000022 	tsteq	r0, r2, lsr #32
    52d4:	008c0120 	addeq	r0, ip, r0, lsr #2
    52d8:	91020000 	mrsls	r0, (UNDEF: 2)
    52dc:	5e1b0074 	mrcpl	0, 0, r0, cr11, cr4, {3}
    52e0:	06000001 	streq	r0, [r0], -r1
    52e4:	00a306a7 	adceq	r0, r3, r7, lsr #13
    52e8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    52ec:	04000008 	streq	r0, [r0], #-8
    52f0:	00109900 	andseq	r9, r0, r0, lsl #18
    52f4:	21010400 	tstcs	r1, r0, lsl #8
    52f8:	01000000 	mrseq	r0, (UNDEF: 0)
    52fc:	0000286f 	andeq	r2, r0, pc, ror #16
    5300:	00000114 	andeq	r0, r0, r4, lsl r1
    5304:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5308:	00000000 	andeq	r0, r0, r0
    530c:	000025a7 	andeq	r2, r0, r7, lsr #11
    5310:	4d060102 	stfmis	f0, [r6, #-8]
    5314:	02000001 	andeq	r0, r0, #1
    5318:	014b0801 	cmpeq	fp, r1, lsl #16
    531c:	02020000 	andeq	r0, r2, #0
    5320:	00018705 	andeq	r8, r1, r5, lsl #14
    5324:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5328:	0000000e 	andeq	r0, r0, lr
    532c:	00017703 	andeq	r7, r1, r3, lsl #14
    5330:	4c3f0200 	lfmmi	f0, 4, [pc], #-0	; 5338 <_Min_Stack_Size+0x4f38>
    5334:	02000000 	andeq	r0, r0, #0
    5338:	00050504 	andeq	r0, r5, r4, lsl #10
    533c:	b4030000 	strlt	r0, [r3], #-0
    5340:	02000005 	andeq	r0, r0, #5
    5344:	00005e41 	andeq	r5, r0, r1, asr #28
    5348:	07040200 	streq	r0, [r4, -r0, lsl #4]
    534c:	0000012e 	andeq	r0, r0, lr, lsr #2
    5350:	00050802 	andeq	r0, r5, r2, lsl #16
    5354:	02000000 	andeq	r0, r0, #0
    5358:	01290708 	teqeq	r9, r8, lsl #14
    535c:	04040000 	streq	r0, [r4], #-0
    5360:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    5364:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5368:	00000133 	andeq	r0, r0, r3, lsr r1
    536c:	00017903 	andeq	r7, r1, r3, lsl #18
    5370:	41410300 	mrsmi	r0, (UNDEF: 113)
    5374:	03000000 	movweq	r0, #0
    5378:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    537c:	00534203 	subseq	r4, r3, r3, lsl #4
    5380:	04020000 	streq	r0, [r2], #-0
    5384:	00019107 	andeq	r9, r1, r7, lsl #2
    5388:	008c0500 	addeq	r0, ip, r0, lsl #10
    538c:	81050000 	mrshi	r0, (UNDEF: 5)
    5390:	06000000 	streq	r0, [r0], -r0
    5394:	01f70401 	mvnseq	r0, r1, lsl #8
    5398:	000000be 	strheq	r0, [r0], -lr
    539c:	00087e07 	andeq	r7, r8, r7, lsl #28
    53a0:	53080000 	movwpl	r0, #32768	; 0x8000
    53a4:	01005445 	tsteq	r0, r5, asr #8
    53a8:	1e880900 	cdpne	9, 8, cr0, cr8, cr0, {0}
    53ac:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    53b0:	0000a801 	andeq	sl, r0, r1, lsl #16
    53b4:	4dd60900 	ldclmi	9, cr0, [r6]
    53b8:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    53bc:	0000a801 	andeq	sl, r0, r1, lsl #16
    53c0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    53c4:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    53c8:	86070000 	strhi	r0, [r7], -r0
    53cc:	00000006 	andeq	r0, r0, r6
    53d0:	0007de07 	andeq	sp, r7, r7, lsl #28
    53d4:	09000100 	stmdbeq	r0, {r8}
    53d8:	000007af 	andeq	r0, r0, pc, lsr #15
    53dc:	d601f904 	strle	pc, [r1], -r4, lsl #18
    53e0:	0a000000 	beq	53e8 <_Min_Stack_Size+0x4fe8>
    53e4:	c7040c00 	strgt	r0, [r4, -r0, lsl #24]
    53e8:	00022f02 	andeq	r2, r2, r2, lsl #30
    53ec:	52430b00 	subpl	r0, r3, #0, 22
    53f0:	02c90400 	sbceq	r0, r9, #0, 8
    53f4:	0000009e 	muleq	r0, lr, r0
    53f8:	53490b00 	movtpl	r0, #39680	; 0x9b00
    53fc:	ca040052 	bgt	10554c <_Min_Stack_Size+0x10514c>
    5400:	00009e02 	andeq	r9, r0, r2, lsl #28
    5404:	c20c0400 	andgt	r0, ip, #0, 8
    5408:	0400001c 	streq	r0, [r0], #-28
    540c:	009e02cb 	addseq	r0, lr, fp, asr #5
    5410:	0c080000 	stceq	0, cr0, [r8], {-0}
    5414:	000026c8 	andeq	r2, r0, r8, asr #13
    5418:	9e02cc04 	cdpls	12, 0, cr12, cr2, cr4, {0}
    541c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5420:	0027300c 	eoreq	r3, r7, ip
    5424:	02cd0400 	sbceq	r0, sp, #0, 8
    5428:	0000009e 	muleq	r0, lr, r0
    542c:	298f0c10 	stmibcs	pc, {r4, sl, fp}	; <UNPREDICTABLE>
    5430:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    5434:	00009e02 	andeq	r9, r0, r2, lsl #28
    5438:	d80c1400 	stmdale	ip, {sl, ip}
    543c:	04000029 	streq	r0, [r0], #-41	; 0x29
    5440:	009e02cf 	addseq	r0, lr, pc, asr #5
    5444:	0c180000 	ldceq	0, cr0, [r8], {-0}
    5448:	00002902 	andeq	r2, r0, r2, lsl #18
    544c:	9e02d004 	cdpls	0, 0, cr13, cr2, cr4, {0}
    5450:	1c000000 	stcne	0, cr0, [r0], {-0}
    5454:	0026b20c 	eoreq	fp, r6, ip, lsl #4
    5458:	02d10400 	sbcseq	r0, r1, #0, 8
    545c:	0000009e 	muleq	r0, lr, r0
    5460:	28670c20 	stmdacs	r7!, {r5, sl, fp}^
    5464:	d2040000 	andle	r0, r4, #0
    5468:	00009e02 	andeq	r9, r0, r2, lsl #28
    546c:	0d0c2400 	cfstrseq	mvf2, [ip, #-0]
    5470:	04000028 	streq	r0, [r0], #-40	; 0x28
    5474:	009e02d3 			; <UNDEFINED> instruction: 0x009e02d3
    5478:	0c280000 	stceq	0, cr0, [r8], #-0
    547c:	00002a34 	andeq	r2, r0, r4, lsr sl
    5480:	9e02d404 	cdpls	4, 0, cr13, cr2, cr4, {0}
    5484:	2c000000 	stccs	0, cr0, [r0], {-0}
    5488:	0025f40c 	eoreq	pc, r5, ip, lsl #8
    548c:	02d50400 	sbcseq	r0, r5, #0, 8
    5490:	0000009e 	muleq	r0, lr, r0
    5494:	284d0c30 	stmdacs	sp, {r4, r5, sl, fp}^
    5498:	d6040000 	strle	r0, [r4], -r0
    549c:	00009e02 	andeq	r9, r0, r2, lsl #28
    54a0:	070c3400 	streq	r3, [ip, -r0, lsl #8]
    54a4:	04000028 	streq	r0, [r0], #-40	; 0x28
    54a8:	009e02d7 			; <UNDEFINED> instruction: 0x009e02d7
    54ac:	0c380000 	ldceq	0, cr0, [r8], #-0
    54b0:	000027a6 	andeq	r2, r0, r6, lsr #15
    54b4:	9e02d804 	cdpls	8, 0, cr13, cr2, cr4, {0}
    54b8:	3c000000 	stccc	0, cr0, [r0], {-0}
    54bc:	524f4f0b 	subpl	r4, pc, #11, 30	; 0x2c
    54c0:	02d90400 	sbcseq	r0, r9, #0, 8
    54c4:	0000009e 	muleq	r0, lr, r0
    54c8:	4c4e0b40 	mcrrmi	11, 4, r0, lr, cr0
    54cc:	da040052 	ble	10561c <_Min_Stack_Size+0x10521c>
    54d0:	00009e02 	andeq	r9, r0, r2, lsl #28
    54d4:	4c0b4400 	cfstrsmi	mvf4, [fp], {-0}
    54d8:	04005257 	streq	r5, [r0], #-599	; 0x257
    54dc:	009e02db 			; <UNDEFINED> instruction: 0x009e02db
    54e0:	0c480000 	mareq	acc0, r0, r8
    54e4:	000025fb 	strdeq	r2, [r0], -fp
    54e8:	9e02dc04 	cdpls	12, 0, cr13, cr2, cr4, {0}
    54ec:	4c000000 	stcmi	0, cr0, [r0], {-0}
    54f0:	0016970c 	andseq	r9, r6, ip, lsl #14
    54f4:	02dd0400 	sbcseq	r0, sp, #0, 8
    54f8:	0000022f 	andeq	r0, r0, pc, lsr #4
    54fc:	25610d50 	strbcs	r0, [r1, #-3408]!	; 0xd50
    5500:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    5504:	00024f02 	andeq	r4, r2, r2, lsl #30
    5508:	0d040000 	stceq	0, cr0, [r4, #-0]
    550c:	0000268b 	andeq	r2, r0, fp, lsl #13
    5510:	5402df04 	strpl	sp, [r2], #-3844	; 0xf04
    5514:	00000002 	andeq	r0, r0, r2
    5518:	8c0e0008 	stchi	0, cr0, [lr], {8}
    551c:	3f000000 	svccc	0x00000000
    5520:	0f000002 	svceq	0x00000002
    5524:	00000097 	muleq	r0, r7, r0
    5528:	8c0e00eb 	stchi	0, cr0, [lr], {235}	; 0xeb
    552c:	4f000000 	svcmi	0x00000000
    5530:	0f000002 	svceq	0x00000002
    5534:	00000097 	muleq	r0, r7, r0
    5538:	3f0500ff 	svccc	0x000500ff
    553c:	05000002 	streq	r0, [r0, #-2]
    5540:	0000023f 	andeq	r0, r0, pc, lsr r2
    5544:	00299509 	eoreq	r9, r9, r9, lsl #10
    5548:	02e00400 	rsceq	r0, r0, #0, 8
    554c:	000000f8 	strdeq	r0, [r0], -r8
    5550:	30052810 	andcc	r2, r5, r0, lsl r8
    5554:	000002e6 	andeq	r0, r0, r6, ror #5
    5558:	00265411 	eoreq	r5, r6, r1, lsl r4
    555c:	8c320500 	cfldr32hi	mvfx0, [r2], #-0
    5560:	00000000 	andeq	r0, r0, r0
    5564:	0026e511 	eoreq	lr, r6, r1, lsl r5
    5568:	8c350500 	cfldr32hi	mvfx0, [r5], #-0
    556c:	04000000 	streq	r0, [r0], #-0
    5570:	00250511 	eoreq	r0, r5, r1, lsl r5
    5574:	8c380500 	cfldr32hi	mvfx0, [r8], #-0
    5578:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    557c:	00295d11 	eoreq	r5, r9, r1, lsl sp
    5580:	8c400500 	cfstr64hi	mvdx0, [r0], {-0}
    5584:	0c000000 	stceq	0, cr0, [r0], {-0}
    5588:	00293f11 	eoreq	r3, r9, r1, lsl pc
    558c:	8c480500 	cfstr64hi	mvdx0, [r8], {-0}
    5590:	10000000 	andne	r0, r0, r0
    5594:	002a0211 	eoreq	r0, sl, r1, lsl r2
    5598:	8c500500 	cfldr64hi	mvdx0, [r0], {-0}
    559c:	14000000 	strne	r0, [r0], #-0
    55a0:	00291a11 	eoreq	r1, r9, r1, lsl sl
    55a4:	8c560500 	cfldr64hi	mvdx0, [r6], {-0}
    55a8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    55ac:	0029dd11 	eoreq	sp, r9, r1, lsl sp
    55b0:	8c590500 	cfldr64hi	mvdx0, [r9], {-0}
    55b4:	1c000000 	stcne	0, cr0, [r0], {-0}
    55b8:	00270c11 	eoreq	r0, r7, r1, lsl ip
    55bc:	8c5c0500 	cfldr64hi	mvdx0, [ip], {-0}
    55c0:	20000000 	andcs	r0, r0, r0
    55c4:	00263211 	eoreq	r3, r6, r1, lsl r2
    55c8:	8c5f0500 	cfldr64hi	mvdx0, [pc], {-0}
    55cc:	24000000 	strcs	r0, [r0], #-0
    55d0:	27f50300 	ldrbcs	r0, [r5, r0, lsl #6]!
    55d4:	61050000 	mrsvs	r0, (UNDEF: 5)
    55d8:	00000265 	andeq	r0, r0, r5, ror #4
    55dc:	65052c10 	strvs	r2, [r5, #-3088]	; 0xc10
    55e0:	0000037e 	andeq	r0, r0, lr, ror r3
    55e4:	0025c611 	eoreq	ip, r5, r1, lsl r6
    55e8:	8c670500 	cfstr64hi	mvdx0, [r7], #-0
    55ec:	00000000 	andeq	r0, r0, r0
    55f0:	0025d111 	eoreq	sp, r5, r1, lsl r1
    55f4:	8c6a0500 	cfstr64hi	mvdx0, [sl], #-0
    55f8:	04000000 	streq	r0, [r0], #-0
    55fc:	00296f11 	eoreq	r6, r9, r1, lsl pc
    5600:	8c6d0500 	cfstr64hi	mvdx0, [sp], #-0
    5604:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5608:	00256811 	eoreq	r6, r5, r1, lsl r8
    560c:	8c700500 	cfldr64hi	mvdx0, [r0], #-0
    5610:	0c000000 	stceq	0, cr0, [r0], {-0}
    5614:	0025db11 	eoreq	sp, r5, r1, lsl fp
    5618:	8c730500 	cfldr64hi	mvdx0, [r3], #-0
    561c:	10000000 	andne	r0, r0, r0
    5620:	0029ad11 	eoreq	sl, r9, r1, lsl sp
    5624:	8c760500 	cfldr64hi	mvdx0, [r6], #-0
    5628:	14000000 	strne	r0, [r0], #-0
    562c:	0024d811 	eoreq	sp, r4, r1, lsl r8
    5630:	8c790500 	cfldr64hi	mvdx0, [r9], #-0
    5634:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5638:	00264511 	eoreq	r4, r6, r1, lsl r5
    563c:	8c7c0500 	cfldr64hi	mvdx0, [ip], #-0
    5640:	1c000000 	stcne	0, cr0, [r0], {-0}
    5644:	00290a11 	eoreq	r0, r9, r1, lsl sl
    5648:	8c7f0500 	cfldr64hi	mvdx0, [pc], #-0	; 5650 <_Min_Stack_Size+0x5250>
    564c:	20000000 	andcs	r0, r0, r0
    5650:	00251611 	eoreq	r1, r5, r1, lsl r6
    5654:	8c820500 	cfstr32hi	mvfx0, [r2], {0}
    5658:	24000000 	strcs	r0, [r0], #-0
    565c:	002a2e11 	eoreq	r2, sl, r1, lsl lr
    5660:	8c850500 	cfstr32hi	mvfx0, [r5], {0}
    5664:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5668:	24f00300 	ldrbtcs	r0, [r0], #768	; 0x300
    566c:	87050000 	strhi	r0, [r5, -r0]
    5670:	000002f1 	strdeq	r0, [r0], -r1
    5674:	8a052c10 	bhi	1506bc <_Min_Stack_Size+0x1502bc>
    5678:	00000416 	andeq	r0, r0, r6, lsl r4
    567c:	00281411 	eoreq	r1, r8, r1, lsl r4
    5680:	8c8c0500 	cfstr32hi	mvfx0, [ip], {0}
    5684:	00000000 	andeq	r0, r0, r0
    5688:	0029a311 	eoreq	sl, r9, r1, lsl r3
    568c:	8c8f0500 	cfstr32hi	mvfx0, [pc], {0}
    5690:	04000000 	streq	r0, [r0], #-0
    5694:	0027d111 	eoreq	sp, r7, r1, lsl r1
    5698:	8c920500 	cfldr32hi	mvfx0, [r2], {0}
    569c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56a0:	00255011 	eoreq	r5, r5, r1, lsl r0
    56a4:	8c950500 	cfldr32hi	mvfx0, [r5], {0}
    56a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    56ac:	00285411 	eoreq	r5, r8, r1, lsl r4
    56b0:	8c980500 	cfldr32hi	mvfx0, [r8], {0}
    56b4:	10000000 	andne	r0, r0, r0
    56b8:	0026ce11 	eoreq	ip, r6, r1, lsl lr
    56bc:	8c9b0500 	cfldr32hi	mvfx0, [fp], {0}
    56c0:	14000000 	strne	r0, [r0], #-0
    56c4:	00260111 	eoreq	r0, r6, r1, lsl r1
    56c8:	8c9e0500 	cfldr32hi	mvfx0, [lr], {0}
    56cc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    56d0:	00281f11 	eoreq	r1, r8, r1, lsl pc
    56d4:	8ca10500 	cfstr32hi	mvfx0, [r1]
    56d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    56dc:	00262211 	eoreq	r2, r6, r1, lsl r2
    56e0:	8ca40500 	cfstr32hi	mvfx0, [r4]
    56e4:	20000000 	andcs	r0, r0, r0
    56e8:	002a1411 	eoreq	r1, sl, r1, lsl r4
    56ec:	8ca70500 	cfstr32hi	mvfx0, [r7]
    56f0:	24000000 	strcs	r0, [r0], #-0
    56f4:	0025ee11 	eoreq	lr, r5, r1, lsl lr
    56f8:	8caa0500 	cfstr32hi	mvfx0, [sl]
    56fc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5700:	297a0300 	ldmdbcs	sl!, {r8, r9}^
    5704:	ac050000 	stcge	0, cr0, [r5], {-0}
    5708:	00000389 	andeq	r0, r0, r9, lsl #7
    570c:	00266d12 	eoreq	r6, r6, r2, lsl sp
    5710:	48690100 	stmdami	r9!, {r8}^
    5714:	1a08004d 	bne	205850 <_Min_Stack_Size+0x205450>
    5718:	01000000 	mrseq	r0, (UNDEF: 0)
    571c:	27dc139c 	bfics	r1, ip, #7, #22
    5720:	7a010000 	bvc	45728 <_Min_Stack_Size+0x45328>
    5724:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
    5728:	0000015c 	andeq	r0, r0, ip, asr r1
    572c:	048e9c01 	streq	r9, [lr], #3073	; 0xc01
    5730:	7a140000 	bvc	505738 <_Min_Stack_Size+0x505338>
    5734:	01000026 	tsteq	r0, r6, lsr #32
    5738:	00048e7a 	andeq	r8, r4, sl, ror lr
    573c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5740:	00261915 	eoreq	r1, r6, r5, lsl r9
    5744:	8c7d0100 	ldfhie	f0, [sp], #-0
    5748:	02000000 	andeq	r0, r0, #0
    574c:	38157491 	ldmdacc	r5, {r0, r4, r7, sl, ip, sp, lr}
    5750:	01000029 	tsteq	r0, r9, lsr #32
    5754:	00008c7e 	andeq	r8, r0, lr, ror ip
    5758:	70910200 	addsvc	r0, r1, r0, lsl #4
    575c:	00273515 	eoreq	r3, r7, r5, lsl r5
    5760:	8c7f0100 	ldfhie	f0, [pc], #-0	; 5768 <_Min_Stack_Size+0x5368>
    5764:	02000000 	andeq	r0, r0, #0
    5768:	30156c91 	mulscc	r5, r1, ip
    576c:	01000029 	tsteq	r0, r9, lsr #32
    5770:	00008c80 	andeq	r8, r0, r0, lsl #25
    5774:	68910200 	ldmvs	r1, {r9}
    5778:	e6041600 	str	r1, [r4], -r0, lsl #12
    577c:	13000002 	movwne	r0, #2
    5780:	000026a1 	andeq	r2, r0, r1, lsr #13
    5784:	4ec0d301 	cdpmi	3, 12, cr13, cr0, cr1, {0}
    5788:	004e0800 	subeq	r0, lr, r0, lsl #16
    578c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5790:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    5794:	00267a14 	eoreq	r7, r6, r4, lsl sl
    5798:	8ed30100 	cdphi	1, 13, cr0, cr3, cr0, {0}
    579c:	02000004 	andeq	r0, r0, #4
    57a0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    57a4:	0000282e 	andeq	r2, r0, lr, lsr #16
    57a8:	4f10f201 	svcmi	0x0010f201
    57ac:	001c0800 	andseq	r0, ip, r0, lsl #16
    57b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    57b4:	00276017 	eoreq	r6, r7, r7, lsl r0
    57b8:	2cfe0100 	ldfcse	f0, [lr]
    57bc:	1c08004f 	stcne	0, cr0, [r8], {79}	; 0x4f
    57c0:	01000000 	mrseq	r0, (UNDEF: 0)
    57c4:	273e189c 			; <UNDEFINED> instruction: 0x273e189c
    57c8:	0b010000 	bleq	457d0 <_Min_Stack_Size+0x453d0>
    57cc:	004f4801 	subeq	r4, pc, r1, lsl #16
    57d0:	00003808 	andeq	r3, r0, r8, lsl #16
    57d4:	009c0100 	addseq	r0, ip, r0, lsl #2
    57d8:	19000005 	stmdbne	r0, {r0, r2}
    57dc:	00000678 	andeq	r0, r0, r8, ror r6
    57e0:	ec010b01 	stc	11, cr0, [r1], {1}
    57e4:	02000000 	andeq	r0, r0, #0
    57e8:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    57ec:	000026f1 	strdeq	r2, [r0], -r1
    57f0:	80012401 	andhi	r2, r1, r1, lsl #8
    57f4:	dc08004f 	stcle	0, cr0, [r8], {79}	; 0x4f
    57f8:	01000000 	mrseq	r0, (UNDEF: 0)
    57fc:	0005809c 	muleq	r5, ip, r0
    5800:	28d61900 	ldmcs	r6, {r8, fp, ip}^
    5804:	24010000 	strcs	r0, [r1], #-0
    5808:	00058001 	andeq	r8, r5, r1
    580c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5810:	00271f1a 	eoreq	r1, r7, sl, lsl pc
    5814:	01270100 	teqeq	r7, r0, lsl #2
    5818:	0000008c 	andeq	r0, r0, ip, lsl #1
    581c:	1a749102 	bne	1d29c2c <_Min_Stack_Size+0x1d2982c>
    5820:	0000279a 	muleq	r0, sl, r7
    5824:	8c012801 	stchi	8, cr2, [r1], {1}
    5828:	02000000 	andeq	r0, r0, #0
    582c:	e71a7091 			; <UNDEFINED> instruction: 0xe71a7091
    5830:	01000027 	tsteq	r0, r7, lsr #32
    5834:	008c0129 	addeq	r0, ip, r9, lsr #2
    5838:	91020000 	mrsls	r0, (UNDEF: 2)
    583c:	258d1a6c 	strcs	r1, [sp, #2668]	; 0xa6c
    5840:	2a010000 	bcs	45848 <_Min_Stack_Size+0x45448>
    5844:	00008c01 	andeq	r8, r0, r1, lsl #24
    5848:	68910200 	ldmvs	r1, {r9}
    584c:	00294f1a 	eoreq	r4, r9, sl, lsl pc
    5850:	012b0100 	teqeq	fp, r0, lsl #2
    5854:	0000008c 	andeq	r0, r0, ip, lsl #1
    5858:	1a649102 	bne	1929c68 <_Min_Stack_Size+0x1929868>
    585c:	00002a22 	andeq	r2, r0, r2, lsr #20
    5860:	8c012c01 	stchi	12, cr2, [r1], {1}
    5864:	02000000 	andeq	r0, r0, #0
    5868:	16006091 			; <UNDEFINED> instruction: 0x16006091
    586c:	00037e04 	andeq	r7, r3, r4, lsl #28
    5870:	274c1800 	strbcs	r1, [ip, -r0, lsl #16]
    5874:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    5878:	00505c01 	subseq	r5, r0, r1, lsl #24
    587c:	00005408 	andeq	r5, r0, r8, lsl #8
    5880:	ac9c0100 	ldfges	f0, [ip], {0}
    5884:	19000005 	stmdbne	r0, {r0, r2}
    5888:	000028d6 	ldrdeq	r2, [r0], -r6
    588c:	80015801 	andhi	r5, r1, r1, lsl #16
    5890:	02000005 	andeq	r0, r0, #5
    5894:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    5898:	00002692 	muleq	r0, r2, r6
    589c:	b0018501 	andlt	r8, r1, r1, lsl #10
    58a0:	dc080050 	stcle	0, cr0, [r8], {80}	; 0x50
    58a4:	01000000 	mrseq	r0, (UNDEF: 0)
    58a8:	00062c9c 	muleq	r6, ip, ip
    58ac:	25b21900 	ldrcs	r1, [r2, #2304]!	; 0x900
    58b0:	85010000 	strhi	r0, [r1, #-0]
    58b4:	00062c01 	andeq	r2, r6, r1, lsl #24
    58b8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    58bc:	002a3b1a 	eoreq	r3, sl, sl, lsl fp
    58c0:	01880100 	orreq	r0, r8, r0, lsl #2
    58c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    58c8:	1a749102 	bne	1d29cd8 <_Min_Stack_Size+0x1d298d8>
    58cc:	00002700 	andeq	r2, r0, r0, lsl #14
    58d0:	8c018901 	stchi	9, cr8, [r1], {1}
    58d4:	02000000 	andeq	r0, r0, #0
    58d8:	4c1a7091 	ldcmi	0, cr7, [sl], {145}	; 0x91
    58dc:	0100002a 	tsteq	r0, sl, lsr #32
    58e0:	008c018a 	addeq	r0, ip, sl, lsl #3
    58e4:	91020000 	mrsls	r0, (UNDEF: 2)
    58e8:	278c1a6c 	strcs	r1, [ip, ip, ror #20]
    58ec:	8b010000 	blhi	458f4 <_Min_Stack_Size+0x454f4>
    58f0:	00008c01 	andeq	r8, r0, r1, lsl #24
    58f4:	68910200 	ldmvs	r1, {r9}
    58f8:	00265f1a 	eoreq	r5, r6, sl, lsl pc
    58fc:	018c0100 	orreq	r0, ip, r0, lsl #2
    5900:	0000008c 	andeq	r0, r0, ip, lsl #1
    5904:	1a649102 	bne	1929d14 <_Min_Stack_Size+0x1929914>
    5908:	000027c5 	andeq	r2, r0, r5, asr #15
    590c:	8c018d01 	stchi	13, cr8, [r1], {1}
    5910:	02000000 	andeq	r0, r0, #0
    5914:	16006091 			; <UNDEFINED> instruction: 0x16006091
    5918:	00041604 	andeq	r1, r4, r4, lsl #12
    591c:	25791800 	ldrbcs	r1, [r9, #-2048]!	; 0x800
    5920:	ba010000 	blt	45928 <_Min_Stack_Size+0x45528>
    5924:	00518c01 	subseq	r8, r1, r1, lsl #24
    5928:	00005408 	andeq	r5, r0, r8, lsl #8
    592c:	589c0100 	ldmpl	ip, {r8}
    5930:	19000006 	stmdbne	r0, {r1, r2}
    5934:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
    5938:	2c01ba01 	stccs	10, cr11, [r1], {1}
    593c:	02000006 	andeq	r0, r0, #6
    5940:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    5944:	00002524 	andeq	r2, r0, r4, lsr #10
    5948:	e001e501 	and	lr, r1, r1, lsl #10
    594c:	38080051 	stmdacc	r8, {r0, r4, r6}
    5950:	01000000 	mrseq	r0, (UNDEF: 0)
    5954:	00067e9c 	muleq	r6, ip, lr
    5958:	06781900 	ldrbteq	r1, [r8], -r0, lsl #18
    595c:	e5010000 	str	r0, [r1, #-0]
    5960:	0000ec01 	andeq	lr, r0, r1, lsl #24
    5964:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5968:	24ca1800 	strbcs	r1, [sl], #2048	; 0x800
    596c:	fd010000 	stc2	0, cr0, [r1, #-0]
    5970:	00521801 	subseq	r1, r2, r1, lsl #16
    5974:	00003808 	andeq	r3, r0, r8, lsl #16
    5978:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    597c:	19000006 	stmdbne	r0, {r1, r2}
    5980:	00000678 	andeq	r0, r0, r8, ror r6
    5984:	ec01fd01 	stc	13, cr15, [r1], {1}
    5988:	02000000 	andeq	r0, r0, #0
    598c:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    5990:	000028c1 	andeq	r2, r0, r1, asr #17
    5994:	50021401 	andpl	r1, r2, r1, lsl #8
    5998:	54080052 	strpl	r0, [r8], #-82	; 0x52
    599c:	01000000 	mrseq	r0, (UNDEF: 0)
    59a0:	0006e89c 	muleq	r6, ip, r8
    59a4:	26b91900 	ldrtcs	r1, [r9], r0, lsl #18
    59a8:	14010000 	strne	r0, [r1], #-0
    59ac:	00008c02 	andeq	r8, r0, r2, lsl #24
    59b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    59b4:	00067819 	andeq	r7, r6, r9, lsl r8
    59b8:	02140100 	andseq	r0, r4, #0, 2
    59bc:	000000ec 	andeq	r0, r0, ip, ror #1
    59c0:	1a6b9102 	bne	1ae9dd0 <_Min_Stack_Size+0x1ae99d0>
    59c4:	000026bf 			; <UNDEFINED> instruction: 0x000026bf
    59c8:	8c021601 	stchi	6, cr1, [r2], {1}
    59cc:	02000000 	andeq	r0, r0, #0
    59d0:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    59d4:	000027ab 	andeq	r2, r0, fp, lsr #15
    59d8:	a4022f01 	strge	r2, [r2], #-3841	; 0xf01
    59dc:	1c080052 	stcne	0, cr0, [r8], {82}	; 0x52
    59e0:	01000000 	mrseq	r0, (UNDEF: 0)
    59e4:	00070e9c 	muleq	r7, ip, lr
    59e8:	259b1900 	ldrcs	r1, [fp, #2304]	; 0x900
    59ec:	2f010000 	svccs	0x00010000
    59f0:	00008c02 	andeq	r8, r0, r2, lsl #24
    59f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    59f8:	27741800 	ldrbcs	r1, [r4, -r0, lsl #16]!
    59fc:	72010000 	andvc	r0, r1, #0
    5a00:	0052c002 	subseq	ip, r2, r2
    5a04:	00003c08 	andeq	r3, r0, r8, lsl #24
    5a08:	439c0100 	orrsmi	r0, ip, #0, 2
    5a0c:	19000007 	stmdbne	r0, {r0, r1, r2}
    5a10:	00002783 	andeq	r2, r0, r3, lsl #15
    5a14:	8c027201 	sfmhi	f7, 4, [r2], {1}
    5a18:	02000000 	andeq	r0, r0, #0
    5a1c:	78197491 	ldmdavc	r9, {r0, r4, r7, sl, ip, sp, lr}
    5a20:	01000006 	tsteq	r0, r6
    5a24:	00ec0272 	rsceq	r0, ip, r2, ror r2
    5a28:	91020000 	mrsls	r0, (UNDEF: 2)
    5a2c:	c41b0073 	ldrgt	r0, [fp], #-115	; 0x73
    5a30:	01000029 	tsteq	r0, r9, lsr #32
    5a34:	00be0291 	umlalseq	r0, lr, r1, r2
    5a38:	52fc0000 	rscspl	r0, ip, #0
    5a3c:	00340800 	eorseq	r0, r4, r0, lsl #16
    5a40:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a44:	0000077c 	andeq	r0, r0, ip, ror r7
    5a48:	00284219 	eoreq	r4, r8, r9, lsl r2
    5a4c:	02910100 	addseq	r0, r1, #0, 2
    5a50:	0000008c 	andeq	r0, r0, ip, lsl #1
    5a54:	1a6c9102 	bne	1b29e64 <_Min_Stack_Size+0x1b29a64>
    5a58:	00000963 	andeq	r0, r0, r3, ror #18
    5a5c:	be029301 	cdplt	3, 0, cr9, cr2, cr1, {0}
    5a60:	02000000 	andeq	r0, r0, #0
    5a64:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    5a68:	00002532 	andeq	r2, r0, r2, lsr r5
    5a6c:	3002b301 	andcc	fp, r2, r1, lsl #6
    5a70:	1c080053 	stcne	0, cr0, [r8], {83}	; 0x53
    5a74:	01000000 	mrseq	r0, (UNDEF: 0)
    5a78:	0007a29c 	muleq	r7, ip, r2
    5a7c:	28421900 	stmdacs	r2, {r8, fp, ip}^
    5a80:	b3010000 	movwlt	r0, #4096	; 0x1000
    5a84:	00008c02 	andeq	r8, r0, r2, lsl #24
    5a88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5a8c:	29f01b00 	ldmibcs	r0!, {r8, r9, fp, ip}^
    5a90:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    5a94:	0000ca02 	andeq	ip, r0, r2, lsl #20
    5a98:	00534c00 	subseq	r4, r3, r0, lsl #24
    5a9c:	00005808 	andeq	r5, r0, r8, lsl #16
    5aa0:	ea9c0100 	b	fe705ea8 <_estack+0xde6d5ea8>
    5aa4:	19000007 	stmdbne	r0, {r0, r1, r2}
    5aa8:	00002783 	andeq	r2, r0, r3, lsl #15
    5aac:	8c02c801 	stchi	8, cr12, [r2], {1}
    5ab0:	02000000 	andeq	r0, r0, #0
    5ab4:	631a6c91 	tstvs	sl, #37120	; 0x9100
    5ab8:	01000009 	tsteq	r0, r9
    5abc:	00ca02ca 	sbceq	r0, sl, sl, asr #5
    5ac0:	91020000 	mrsls	r0, (UNDEF: 2)
    5ac4:	25421a77 	strbcs	r1, [r2, #-2679]	; 0xa77
    5ac8:	cb010000 	blgt	45ad0 <_Min_Stack_Size+0x456d0>
    5acc:	00008c02 	andeq	r8, r0, r2, lsl #24
    5ad0:	70910200 	addsvc	r0, r1, r0, lsl #4
    5ad4:	28ea1800 	stmiacs	sl!, {fp, ip}^
    5ad8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    5adc:	0053a402 	subseq	sl, r3, r2, lsl #8
    5ae0:	00002408 	andeq	r2, r0, r8, lsl #8
    5ae4:	109c0100 	addsne	r0, ip, r0, lsl #2
    5ae8:	19000008 	stmdbne	r0, {r3}
    5aec:	00002783 	andeq	r2, r0, r3, lsl #15
    5af0:	8c02f001 	stchi	0, cr15, [r2], {1}
    5af4:	02000000 	andeq	r0, r0, #0
    5af8:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
    5afc:	0000015e 	andeq	r0, r0, lr, asr r1
    5b00:	a306a706 	movwge	sl, #26374	; 0x6706
    5b04:	00000000 	andeq	r0, r0, r0
    5b08:	00000cf8 	strdeq	r0, [r0], -r8
    5b0c:	12410004 	subne	r0, r1, #4
    5b10:	01040000 	mrseq	r0, (UNDEF: 4)
    5b14:	00000021 	andeq	r0, r0, r1, lsr #32
    5b18:	00321001 	eorseq	r1, r2, r1
    5b1c:	00011400 	andeq	r1, r1, r0, lsl #8
    5b20:	00079000 	andeq	r9, r7, r0
    5b24:	00000000 	andeq	r0, r0, r0
    5b28:	00293200 	eoreq	r3, r9, r0, lsl #4
    5b2c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5b30:	0000014d 	andeq	r0, r0, sp, asr #2
    5b34:	00026e03 	andeq	r6, r2, r3, lsl #28
    5b38:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    5b3c:	02000000 	andeq	r0, r0, #0
    5b40:	014b0801 	cmpeq	fp, r1, lsl #16
    5b44:	02020000 	andeq	r0, r2, #0
    5b48:	00018705 	andeq	r8, r1, r5, lsl #14
    5b4c:	04380300 	ldrteq	r0, [r8], #-768	; 0x300
    5b50:	2b020000 	blcs	85b58 <_Min_Stack_Size+0x85758>
    5b54:	00000050 	andeq	r0, r0, r0, asr r0
    5b58:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    5b5c:	03000000 	movweq	r0, #0
    5b60:	00000177 	andeq	r0, r0, r7, ror r1
    5b64:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    5b68:	04020000 	streq	r0, [r2], #-0
    5b6c:	00000505 	andeq	r0, r0, r5, lsl #10
    5b70:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
    5b74:	41020000 	mrsmi	r0, (UNDEF: 2)
    5b78:	00000074 	andeq	r0, r0, r4, ror r0
    5b7c:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    5b80:	02000001 	andeq	r0, r0, #1
    5b84:	00000508 	andeq	r0, r0, r8, lsl #10
    5b88:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5b8c:	00012907 	andeq	r2, r1, r7, lsl #18
    5b90:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    5b94:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5b98:	33070402 	movwcc	r0, #29698	; 0x7402
    5b9c:	03000001 	movweq	r0, #1
    5ba0:	00000270 	andeq	r0, r0, r0, ror r2
    5ba4:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    5ba8:	3a030000 	bcc	c5bb0 <_Min_Stack_Size+0xc57b0>
    5bac:	03000004 	movweq	r0, #4
    5bb0:	00004536 	andeq	r4, r0, r6, lsr r5
    5bb4:	01790300 	cmneq	r9, r0, lsl #6
    5bb8:	41030000 	mrsmi	r0, (UNDEF: 3)
    5bbc:	00000057 	andeq	r0, r0, r7, asr r0
    5bc0:	0005b603 	andeq	fp, r5, r3, lsl #12
    5bc4:	69420300 	stmdbvs	r2, {r8, r9}^
    5bc8:	02000000 	andeq	r0, r0, #0
    5bcc:	01910704 	orrseq	r0, r1, r4, lsl #14
    5bd0:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    5bd4:	06000000 	streq	r0, [r0], -r0
    5bd8:	000000b8 	strheq	r0, [r0], -r8
    5bdc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5be0:	0000c307 	andeq	ip, r0, r7, lsl #6
    5be4:	06000100 	streq	r0, [r0], -r0, lsl #2
    5be8:	000000b8 	strheq	r0, [r0], -r8
    5bec:	000000ef 	andeq	r0, r0, pc, ror #1
    5bf0:	0000c307 	andeq	ip, r0, r7, lsl #6
    5bf4:	05000000 	streq	r0, [r0, #-0]
    5bf8:	000000ad 	andeq	r0, r0, sp, lsr #1
    5bfc:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    5c00:	00010a01 	andeq	r0, r1, r1, lsl #20
    5c04:	087e0900 	ldmdaeq	lr!, {r8, fp}^
    5c08:	0a000000 	beq	5c10 <_Min_Stack_Size+0x5810>
    5c0c:	00544553 	subseq	r4, r4, r3, asr r5
    5c10:	880b0001 	stmdahi	fp, {r0}
    5c14:	0400001e 	streq	r0, [r0], #-30
    5c18:	00f401f7 	ldrshteq	r0, [r4], #23
    5c1c:	d60b0000 	strle	r0, [fp], -r0
    5c20:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    5c24:	00f401f7 	ldrshteq	r0, [r4], #23
    5c28:	01080000 	mrseq	r0, (UNDEF: 8)
    5c2c:	3801f904 	stmdacc	r1, {r2, r8, fp, ip, sp, lr, pc}
    5c30:	09000001 	stmdbeq	r0, {r0}
    5c34:	00000686 	andeq	r0, r0, r6, lsl #13
    5c38:	07de0900 	ldrbeq	r0, [lr, r0, lsl #18]
    5c3c:	00010000 	andeq	r0, r1, r0
    5c40:	0007af0b 	andeq	sl, r7, fp, lsl #30
    5c44:	01f90400 	mvnseq	r0, r0, lsl #8
    5c48:	00000122 	andeq	r0, r0, r2, lsr #2
    5c4c:	1b044c0c 	blne	118c84 <_Min_Stack_Size+0x118884>
    5c50:	00022b04 	andeq	r2, r2, r4, lsl #22
    5c54:	056c0d00 	strbeq	r0, [ip, #-3328]!	; 0xd00
    5c58:	1d040000 	stcne	0, cr0, [r4, #-0]
    5c5c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    5c60:	b90d0000 	stmdblt	sp, {}	; <UNPREDICTABLE>
    5c64:	04000030 	streq	r0, [r0], #-48	; 0x30
    5c68:	00ca041e 	sbceq	r0, sl, lr, lsl r4
    5c6c:	0d080000 	stceq	0, cr0, [r8, #-0]
    5c70:	0000302d 	andeq	r3, r0, sp, lsr #32
    5c74:	ca041f04 	bgt	10d88c <_Min_Stack_Size+0x10d48c>
    5c78:	0c000000 	stceq	0, cr0, [r0], {-0}
    5c7c:	002e9c0d 	eoreq	r9, lr, sp, lsl #24
    5c80:	04200400 	strteq	r0, [r0], #-1024	; 0x400
    5c84:	000000ca 	andeq	r0, r0, sl, asr #1
    5c88:	2e1d0d10 	mrccs	13, 0, r0, cr13, cr0, {0}
    5c8c:	21040000 	mrscs	r0, (UNDEF: 4)
    5c90:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5c94:	470e1400 	strmi	r1, [lr, -r0, lsl #8]
    5c98:	04005243 	streq	r5, [r0], #-579	; 0x243
    5c9c:	00ca0422 	sbceq	r0, sl, r2, lsr #8
    5ca0:	0d180000 	ldceq	0, cr0, [r8, #-0]
    5ca4:	00000576 	andeq	r0, r0, r6, ror r5
    5ca8:	cf042304 	svcgt	0x00042304
    5cac:	1c000000 	stcne	0, cr0, [r0], {-0}
    5cb0:	002e320d 	eoreq	r3, lr, sp, lsl #4
    5cb4:	04240400 	strteq	r0, [r4], #-1024	; 0x400
    5cb8:	000000ca 	andeq	r0, r0, sl, asr #1
    5cbc:	05800d24 	streq	r0, [r0, #3364]	; 0xd24
    5cc0:	25040000 	strcs	r0, [r4, #-0]
    5cc4:	0000df04 	andeq	sp, r0, r4, lsl #30
    5cc8:	b00d2800 	andlt	r2, sp, r0, lsl #16
    5ccc:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    5cd0:	00ca0426 	sbceq	r0, sl, r6, lsr #8
    5cd4:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    5cd8:	0000046c 	andeq	r0, r0, ip, ror #8
    5cdc:	df042704 	svcle	0x00042704
    5ce0:	30000000 	andcc	r0, r0, r0
    5ce4:	5245490e 	subpl	r4, r5, #229376	; 0x38000
    5ce8:	04280400 	strteq	r0, [r8], #-1024	; 0x400
    5cec:	000000ca 	andeq	r0, r0, sl, asr #1
    5cf0:	53490e34 	movtpl	r0, #40500	; 0x9e34
    5cf4:	29040052 	stmdbcs	r4, {r1, r4, r6}
    5cf8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5cfc:	490e3800 	stmdbmi	lr, {fp, ip, sp}
    5d00:	04005243 	streq	r5, [r0], #-579	; 0x243
    5d04:	00ca042a 	sbceq	r0, sl, sl, lsr #8
    5d08:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
    5d0c:	00002fdb 	ldrdeq	r2, [r0], -fp
    5d10:	ca042b04 	bgt	110928 <_Min_Stack_Size+0x110528>
    5d14:	40000000 	andmi	r0, r0, r0
    5d18:	0030280d 	eorseq	r2, r0, sp, lsl #16
    5d1c:	042c0400 	strteq	r0, [ip], #-1024	; 0x400
    5d20:	000000ca 	andeq	r0, r0, sl, asr #1
    5d24:	317e0d44 	cmncc	lr, r4, asr #26
    5d28:	2d040000 	stccs	0, cr0, [r4, #-0]
    5d2c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5d30:	0b004800 	bleq	17d38 <_Min_Stack_Size+0x17938>
    5d34:	00002b63 	andeq	r2, r0, r3, ror #22
    5d38:	44042e04 	strmi	r2, [r4], #-3588	; 0xe04
    5d3c:	0c000001 	stceq	0, cr0, [r0], {1}
    5d40:	04340444 	ldrteq	r0, [r4], #-1092	; 0x444
    5d44:	000002f6 	strdeq	r0, [r0], -r6
    5d48:	0052430e 	subseq	r4, r2, lr, lsl #6
    5d4c:	ca043604 	bgt	113564 <_Min_Stack_Size+0x113164>
    5d50:	00000000 	andeq	r0, r0, r0
    5d54:	002d840d 	eoreq	r8, sp, sp, lsl #8
    5d58:	04370400 	ldrteq	r0, [r7], #-1024	; 0x400
    5d5c:	000000ca 	andeq	r0, r0, sl, asr #1
    5d60:	2b860d04 	blcs	fe189178 <_estack+0xde159178>
    5d64:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    5d68:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5d6c:	3f0d0800 	svccc	0x000d0800
    5d70:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    5d74:	00ca0439 	sbceq	r0, sl, r9, lsr r4
    5d78:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    5d7c:	000031fa 	strdeq	r3, [r0], -sl
    5d80:	ca043a04 	bgt	114598 <_Min_Stack_Size+0x114198>
    5d84:	10000000 	andne	r0, r0, r0
    5d88:	002c880d 	eoreq	r8, ip, sp, lsl #16
    5d8c:	043b0400 	ldrteq	r0, [fp], #-1024	; 0x400
    5d90:	000000ca 	andeq	r0, r0, sl, asr #1
    5d94:	314c0d14 	cmpcc	ip, r4, lsl sp
    5d98:	3c040000 	stccc	0, cr0, [r4], {-0}
    5d9c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5da0:	610d1800 	tstvs	sp, r0, lsl #16
    5da4:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    5da8:	00ca043d 	sbceq	r0, sl, sp, lsr r4
    5dac:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    5db0:	0000056c 	andeq	r0, r0, ip, ror #10
    5db4:	cf043e04 	svcgt	0x00043e04
    5db8:	20000000 	andcs	r0, r0, r0
    5dbc:	002f590d 	eoreq	r5, pc, sp, lsl #18
    5dc0:	043f0400 	ldrteq	r0, [pc], #-1024	; 5dc8 <_Min_Stack_Size+0x59c8>
    5dc4:	000000ca 	andeq	r0, r0, sl, asr #1
    5dc8:	2ab50d28 	bcs	fed49270 <_estack+0xded19270>
    5dcc:	40040000 	andmi	r0, r4, r0
    5dd0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5dd4:	710d2c00 	tstvc	sp, r0, lsl #24
    5dd8:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    5ddc:	00ca0441 	sbceq	r0, sl, r1, asr #8
    5de0:	0d300000 	ldceq	0, cr0, [r0, #-0]
    5de4:	00000576 	andeq	r0, r0, r6, ror r5
    5de8:	f6044204 			; <UNDEFINED> instruction: 0xf6044204
    5dec:	34000002 	strcc	r0, [r0], #-2
    5df0:	002e050d 	eoreq	r0, lr, sp, lsl #10
    5df4:	04430400 	strbeq	r0, [r3], #-1024	; 0x400
    5df8:	000000ca 	andeq	r0, r0, sl, asr #1
    5dfc:	b8060040 	stmdalt	r6, {r6}
    5e00:	06000000 	streq	r0, [r0], -r0
    5e04:	07000003 	streq	r0, [r0, -r3]
    5e08:	000000c3 	andeq	r0, r0, r3, asr #1
    5e0c:	690b0002 	stmdbvs	fp, {r1}
    5e10:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    5e14:	02370445 	eorseq	r0, r7, #1157627904	; 0x45000000
    5e18:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    5e1c:	03cf3005 	biceq	r3, pc, #5
    5e20:	8c100000 	ldchi	0, cr0, [r0], {-0}
    5e24:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5e28:	0000b832 	andeq	fp, r0, r2, lsr r8
    5e2c:	b3100000 	tstlt	r0, #0
    5e30:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5e34:	0000b835 	andeq	fp, r0, r5, lsr r8
    5e38:	d9100400 	ldmdble	r0, {sl}
    5e3c:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5e40:	0000b838 	andeq	fp, r0, r8, lsr r8
    5e44:	44100800 	ldrmi	r0, [r0], #-2048	; 0x800
    5e48:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5e4c:	0000b83b 	andeq	fp, r0, fp, lsr r8
    5e50:	55100c00 	ldrpl	r0, [r0, #-3072]	; 0xc00
    5e54:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5e58:	0000b83e 	andeq	fp, r0, lr, lsr r8
    5e5c:	03101000 	tsteq	r0, #0
    5e60:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5e64:	0000b841 	andeq	fp, r0, r1, asr #16
    5e68:	7b101400 	blvc	40ae70 <_Min_Stack_Size+0x40aa70>
    5e6c:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5e70:	0000b844 	andeq	fp, r0, r4, asr #16
    5e74:	c6101800 	ldrgt	r1, [r0], -r0, lsl #16
    5e78:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5e7c:	0000b847 	andeq	fp, r0, r7, asr #16
    5e80:	f1101c00 			; <UNDEFINED> instruction: 0xf1101c00
    5e84:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5e88:	0000b84a 	andeq	fp, r0, sl, asr #16
    5e8c:	35102000 	ldrcc	r2, [r0, #-0]
    5e90:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5e94:	0000b84d 	andeq	fp, r0, sp, asr #16
    5e98:	22102400 	andscs	r2, r0, #0, 8
    5e9c:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5ea0:	0000b850 	andeq	fp, r0, r0, asr r8
    5ea4:	8f102800 	svchi	0x00102800
    5ea8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5eac:	0000b853 	andeq	fp, r0, r3, asr r8
    5eb0:	52102c00 	andspl	r2, r0, #0, 24
    5eb4:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5eb8:	0000b856 	andeq	fp, r0, r6, asr r8
    5ebc:	ac103000 	ldcge	0, cr3, [r0], {-0}
    5ec0:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5ec4:	0000b859 	andeq	fp, r0, r9, asr r8
    5ec8:	5c103400 	cfldrspl	mvf3, [r0], {-0}
    5ecc:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5ed0:	0000b85c 	andeq	fp, r0, ip, asr r8
    5ed4:	03003800 	movweq	r3, #2048	; 0x800
    5ed8:	00003261 	andeq	r3, r0, r1, ror #4
    5edc:	03125e05 	tsteq	r2, #5, 28	; 0x50
    5ee0:	400f0000 	andmi	r0, pc, r0
    5ee4:	04a36405 	strteq	r6, [r3], #1029	; 0x405
    5ee8:	e5100000 	ldr	r0, [r0, #-0]
    5eec:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5ef0:	0000b866 	andeq	fp, r0, r6, ror #16
    5ef4:	26100000 	ldrcs	r0, [r0], -r0
    5ef8:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5efc:	0000b869 	andeq	fp, r0, r9, ror #16
    5f00:	22100400 	andscs	r0, r0, #0, 8
    5f04:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5f08:	0000b86c 	andeq	fp, r0, ip, ror #16
    5f0c:	b6100800 	ldrlt	r0, [r0], -r0, lsl #16
    5f10:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5f14:	0000b86f 	andeq	fp, r0, pc, ror #16
    5f18:	e9100c00 	ldmdb	r0, {sl, fp}
    5f1c:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5f20:	0000b872 	andeq	fp, r0, r2, ror r8
    5f24:	c1101000 	tstgt	r0, r0
    5f28:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5f2c:	0000b875 	andeq	fp, r0, r5, ror r8
    5f30:	da101400 	ble	40af38 <_Min_Stack_Size+0x40ab38>
    5f34:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5f38:	0000b878 	andeq	fp, r0, r8, ror r8
    5f3c:	8a101800 	bhi	40bf44 <_Min_Stack_Size+0x40bb44>
    5f40:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5f44:	0000b87b 	andeq	fp, r0, fp, ror r8
    5f48:	0d101c00 	ldceq	12, cr1, [r0, #-0]
    5f4c:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5f50:	0000b87e 	andeq	fp, r0, lr, ror r8
    5f54:	c4102000 	ldrgt	r2, [r0], #-0
    5f58:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5f5c:	0000b881 	andeq	fp, r0, r1, lsl #17
    5f60:	20102400 	andscs	r2, r0, r0, lsl #8
    5f64:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5f68:	0000b884 	andeq	fp, r0, r4, lsl #17
    5f6c:	36102800 	ldrcc	r2, [r0], -r0, lsl #16
    5f70:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5f74:	0000b887 	andeq	fp, r0, r7, lsl #17
    5f78:	f9102c00 			; <UNDEFINED> instruction: 0xf9102c00
    5f7c:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5f80:	0000b88a 	andeq	fp, r0, sl, lsl #17
    5f84:	f0103000 			; <UNDEFINED> instruction: 0xf0103000
    5f88:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5f8c:	0000b88c 	andeq	fp, r0, ip, lsl #17
    5f90:	c3103400 	tstgt	r0, #0, 8
    5f94:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5f98:	0000b88f 	andeq	fp, r0, pc, lsl #17
    5f9c:	15103800 	ldrne	r3, [r0, #-2048]	; 0x800
    5fa0:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5fa4:	0000b892 	muleq	r0, r2, r8
    5fa8:	03003c00 	movweq	r3, #3072	; 0xc00
    5fac:	00002a5a 	andeq	r2, r0, sl, asr sl
    5fb0:	03da9405 	bicseq	r9, sl, #83886080	; 0x5000000
    5fb4:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    5fb8:	04cf9a05 	strbeq	r9, [pc], #2565	; 5fc0 <_Min_Stack_Size+0x5bc0>
    5fbc:	ea100000 	b	405fc4 <_Min_Stack_Size+0x405bc4>
    5fc0:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5fc4:	0000b89c 	muleq	r0, ip, r8
    5fc8:	f4100000 			; <UNDEFINED> instruction: 0xf4100000
    5fcc:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5fd0:	0000b89d 	muleq	r0, sp, r8
    5fd4:	03000400 	movweq	r0, #1024	; 0x400
    5fd8:	00003104 	andeq	r3, r0, r4, lsl #2
    5fdc:	04ae9e05 	strteq	r9, [lr], #3589	; 0xe05
    5fe0:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    5fe4:	0507a005 	streq	sl, [r7, #-5]
    5fe8:	75100000 	ldrvc	r0, [r0, #-0]
    5fec:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5ff0:	0000b8a2 	andeq	fp, r0, r2, lsr #17
    5ff4:	32100000 	andscc	r0, r0, #0
    5ff8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5ffc:	0000b8a3 	andeq	fp, r0, r3, lsr #17
    6000:	b3100400 	tstlt	r0, #0, 8
    6004:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    6008:	0000b8a4 	andeq	fp, r0, r4, lsr #17
    600c:	03000800 	movweq	r0, #2048	; 0x800
    6010:	0000316e 	andeq	r3, r0, lr, ror #2
    6014:	04daa505 	ldrbeq	sl, [sl], #1285	; 0x505
    6018:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    601c:	053fa705 	ldreq	sl, [pc, #-1797]!	; 591f <_Min_Stack_Size+0x551f>
    6020:	a7100000 	ldrge	r0, [r0, -r0]
    6024:	05000030 	streq	r0, [r0, #-48]	; 0x30
    6028:	0000b8a9 	andeq	fp, r0, r9, lsr #17
    602c:	9c100000 	ldcls	0, cr0, [r0], {-0}
    6030:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    6034:	0000b8ac 	andeq	fp, r0, ip, lsr #17
    6038:	0c100400 	cfldrseq	mvf0, [r0], {-0}
    603c:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    6040:	0000b8af 	andeq	fp, r0, pc, lsr #17
    6044:	03000800 	movweq	r0, #2048	; 0x800
    6048:	00002dc8 	andeq	r2, r0, r8, asr #27
    604c:	0512b105 	ldreq	fp, [r2, #-261]	; 0x105
    6050:	100f0000 	andne	r0, pc, r0
    6054:	0583b305 	streq	fp, [r3, #773]	; 0x305
    6058:	e9100000 	ldmdb	r0, {}	; <UNPREDICTABLE>
    605c:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    6060:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    6064:	8d100000 	ldchi	0, cr0, [r0, #-0]
    6068:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    606c:	0000b8b8 			; <UNDEFINED> instruction: 0x0000b8b8
    6070:	7d100400 	cfldrsvc	mvf0, [r0, #-0]
    6074:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    6078:	0000b8bb 			; <UNDEFINED> instruction: 0x0000b8bb
    607c:	83100800 	tsthi	r0, #0, 16
    6080:	05000031 	streq	r0, [r0, #-49]	; 0x31
    6084:	0000b8be 			; <UNDEFINED> instruction: 0x0000b8be
    6088:	03000c00 	movweq	r0, #3072	; 0xc00
    608c:	00002ed4 	ldrdeq	r2, [r0], -r4
    6090:	054ac005 	strbeq	ip, [sl, #-5]
    6094:	96110000 	ldrls	r0, [r1], -r0
    6098:	0100002a 	tsteq	r0, sl, lsr #32
    609c:	0053c87b 	subseq	ip, r3, fp, ror r8
    60a0:	00001a08 	andeq	r1, r0, r8, lsl #20
    60a4:	129c0100 	addsne	r0, ip, #0, 2
    60a8:	0000300b 	andeq	r3, r0, fp
    60ac:	53e48c01 	mvnpl	r8, #256	; 0x100
    60b0:	012c0800 	teqeq	ip, r0, lsl #16
    60b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    60b8:	00000617 	andeq	r0, r0, r7, lsl r6
    60bc:	002b9c13 	eoreq	r9, fp, r3, lsl ip
    60c0:	178c0100 	strne	r0, [ip, r0, lsl #2]
    60c4:	02000006 	andeq	r0, r0, #6
    60c8:	27145c91 			; <UNDEFINED> instruction: 0x27145c91
    60cc:	0100002c 	tsteq	r0, ip, lsr #32
    60d0:	0000b88e 	andeq	fp, r0, lr, lsl #17
    60d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    60d8:	002e6614 	eoreq	r6, lr, r4, lsl r6
    60dc:	b88f0100 	stmlt	pc, {r8}	; <UNPREDICTABLE>
    60e0:	02000000 	andeq	r0, r0, #0
    60e4:	bb147091 	bllt	522330 <_Min_Stack_Size+0x521f30>
    60e8:	0100002a 	tsteq	r0, sl, lsr #32
    60ec:	0000b890 	muleq	r0, r0, r8
    60f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    60f4:	002dfa14 	eoreq	pc, sp, r4, lsl sl	; <UNPREDICTABLE>
    60f8:	b8910100 	ldmlt	r1, {r8}
    60fc:	02000000 	andeq	r0, r0, #0
    6100:	d0146891 	mulsle	r4, r1, r8
    6104:	0100002c 	tsteq	r0, ip, lsr #32
    6108:	0000b892 	muleq	r0, r2, r8
    610c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6110:	002c4514 	eoreq	r4, ip, r4, lsl r5
    6114:	b8930100 	ldmlt	r3, {r8}
    6118:	02000000 	andeq	r0, r0, #0
    611c:	15006091 	strne	r6, [r0, #-145]	; 0x91
    6120:	0003cf04 	andeq	ip, r3, r4, lsl #30
    6124:	2d3a1200 	lfmcs	f1, 4, [sl, #-0]
    6128:	cd010000 	stcgt	0, cr0, [r1, #-0]
    612c:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
    6130:	0000006c 	andeq	r0, r0, ip, rrx
    6134:	06419c01 	strbeq	r9, [r1], -r1, lsl #24
    6138:	9c130000 	ldcls	0, cr0, [r3], {-0}
    613c:	0100002b 	tsteq	r0, fp, lsr #32
    6140:	000617cd 	andeq	r1, r6, sp, asr #15
    6144:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6148:	2c361200 	lfmcs	f1, 4, [r6], #-0
    614c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    6150:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
    6154:	00000038 	andeq	r0, r0, r8, lsr r0
    6158:	06659c01 	strbteq	r9, [r5], -r1, lsl #24
    615c:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
    6160:	01000006 	tsteq	r0, r6
    6164:	000138e8 	andeq	r3, r1, r8, ror #17
    6168:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    616c:	2f261600 	svccs	0x00261600
    6170:	00010000 	andeq	r0, r1, r0
    6174:	0055b401 	subseq	fp, r5, r1, lsl #8
    6178:	00003808 	andeq	r3, r0, r8, lsl #16
    617c:	8b9c0100 	blhi	fe706584 <_estack+0xde6d6584>
    6180:	17000006 	strne	r0, [r0, -r6]
    6184:	00000678 	andeq	r0, r0, r8, ror r6
    6188:	38010001 	stmdacc	r1, {r0}
    618c:	02000001 	andeq	r0, r0, #1
    6190:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    6194:	000031ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    6198:	07011801 	streq	r1, [r1, -r1, lsl #16]
    619c:	ec000005 	stc	0, cr0, [r0], {5}
    61a0:	58080055 	stmdapl	r8, {r0, r2, r4, r6}
    61a4:	01000000 	mrseq	r0, (UNDEF: 0)
    61a8:	0006b59c 	muleq	r6, ip, r5
    61ac:	319f1900 	orrscc	r1, pc, r0, lsl #18
    61b0:	1a010000 	bne	461b8 <_Min_Stack_Size+0x45db8>
    61b4:	00050701 	andeq	r0, r5, r1, lsl #14
    61b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    61bc:	2fa91600 	svccs	0x00a91600
    61c0:	2c010000 	stccs	0, cr0, [r1], {-0}
    61c4:	00564401 	subseq	r4, r6, r1, lsl #8
    61c8:	00002408 	andeq	r2, r0, r8, lsl #8
    61cc:	db9c0100 	blle	fe7065d4 <_estack+0xde6d65d4>
    61d0:	17000006 	strne	r0, [r0, -r6]
    61d4:	0000319f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    61d8:	db012c01 	blle	511e4 <_Min_Stack_Size+0x50de4>
    61dc:	02000006 	andeq	r0, r0, #6
    61e0:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    61e4:	00050704 	andeq	r0, r5, r4, lsl #14
    61e8:	315f1600 	cmpcc	pc, r0, lsl #12
    61ec:	3a010000 	bcc	461f4 <_Min_Stack_Size+0x45df4>
    61f0:	00566801 	subseq	r6, r6, r1, lsl #16
    61f4:	00001c08 	andeq	r1, r0, r8, lsl #24
    61f8:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    61fc:	17000007 	strne	r0, [r0, -r7]
    6200:	00002b70 	andeq	r2, r0, r0, ror fp
    6204:	b8013a01 	stmdalt	r1, {r0, r9, fp, ip, sp}
    6208:	02000000 	andeq	r0, r0, #0
    620c:	16007491 			; <UNDEFINED> instruction: 0x16007491
    6210:	00002d4a 	andeq	r2, r0, sl, asr #26
    6214:	84014c01 	strhi	r4, [r1], #-3073	; 0xc01
    6218:	1c080056 	stcne	0, cr0, [r8], {86}	; 0x56
    621c:	01000000 	mrseq	r0, (UNDEF: 0)
    6220:	00072d9c 	muleq	r7, ip, sp
    6224:	31141700 	tstcc	r4, r0, lsl #14
    6228:	4c010000 	stcmi	0, cr0, [r1], {-0}
    622c:	0000b801 	andeq	fp, r0, r1, lsl #16
    6230:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6234:	2bda1600 	blcs	ff68ba3c <_estack+0xdf65ba3c>
    6238:	61010000 	mrsvs	r0, (UNDEF: 1)
    623c:	0056a001 	subseq	sl, r6, r1
    6240:	00013208 	andeq	r3, r1, r8, lsl #4
    6244:	bc9c0100 	ldflts	f0, [ip], {0}
    6248:	17000007 	strne	r0, [r0, -r7]
    624c:	00002c7c 	andeq	r2, r0, ip, ror ip
    6250:	bc016101 	stflts	f6, [r1], {1}
    6254:	02000007 	andeq	r0, r0, #7
    6258:	67175c91 			; <UNDEFINED> instruction: 0x67175c91
    625c:	0100002f 	tsteq	r0, pc, lsr #32
    6260:	07c20161 	strbeq	r0, [r2, r1, ror #2]
    6264:	91020000 	mrsls	r0, (UNDEF: 2)
    6268:	309f1958 	addscc	r1, pc, r8, asr r9	; <UNPREDICTABLE>
    626c:	64010000 	strvs	r0, [r1], #-0
    6270:	0000b801 	andeq	fp, r0, r1, lsl #16
    6274:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6278:	002c4d19 	eoreq	r4, ip, r9, lsl sp
    627c:	01650100 	cmneq	r5, r0, lsl #2
    6280:	000000b8 	strheq	r0, [r0], -r8
    6284:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    6288:	000031d1 	ldrdeq	r3, [r0], -r1
    628c:	b8016601 	stmdalt	r1, {r0, r9, sl, sp, lr}
    6290:	02000000 	andeq	r0, r0, #0
    6294:	3f196c91 	svccc	0x00196c91
    6298:	0100002c 	tsteq	r0, ip, lsr #32
    629c:	00b80167 	adcseq	r0, r8, r7, ror #2
    62a0:	91020000 	mrsls	r0, (UNDEF: 2)
    62a4:	2be91968 	blcs	ffa4c84c <_estack+0xdfa1c84c>
    62a8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    62ac:	0000b801 	andeq	fp, r0, r1, lsl #16
    62b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    62b4:	002fa419 	eoreq	sl, pc, r9, lsl r4	; <UNPREDICTABLE>
    62b8:	01690100 	cmneq	r9, r0, lsl #2
    62bc:	000000b8 	strheq	r0, [r0], -r8
    62c0:	00609102 	rsbeq	r9, r0, r2, lsl #2
    62c4:	03060415 	movweq	r0, #25621	; 0x6415
    62c8:	04150000 	ldreq	r0, [r5], #-0
    62cc:	000004a3 	andeq	r0, r0, r3, lsr #9
    62d0:	002efe16 	eoreq	pc, lr, r6, lsl lr	; <UNPREDICTABLE>
    62d4:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
    62d8:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    62dc:	00000074 	andeq	r0, r0, r4, ror r0
    62e0:	07ee9c01 	strbeq	r9, [lr, r1, lsl #24]!
    62e4:	67170000 	ldrvs	r0, [r7, -r0]
    62e8:	0100002f 	tsteq	r0, pc, lsr #32
    62ec:	07c201af 	strbeq	r0, [r2, pc, lsr #3]
    62f0:	91020000 	mrsls	r0, (UNDEF: 2)
    62f4:	91160074 	tstls	r6, r4, ror r0
    62f8:	01000031 	tsteq	r0, r1, lsr r0
    62fc:	584801e0 	stmdapl	r8, {r5, r6, r7, r8}^
    6300:	00360800 	eorseq	r0, r6, r0, lsl #16
    6304:	9c010000 	stcls	0, cr0, [r1], {-0}
    6308:	00000823 	andeq	r0, r0, r3, lsr #16
    630c:	002c7c17 	eoreq	r7, ip, r7, lsl ip
    6310:	01e00100 	mvneq	r0, r0, lsl #2
    6314:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6318:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    631c:	00000678 	andeq	r0, r0, r8, ror r6
    6320:	3801e001 	stmdacc	r1, {r0, sp, lr, pc}
    6324:	02000001 	andeq	r0, r0, #1
    6328:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    632c:	00002ea1 	andeq	r2, r0, r1, lsr #29
    6330:	cf01f901 	svcgt	0x0001f901
    6334:	80000004 	andhi	r0, r0, r4
    6338:	40080058 	andmi	r0, r8, r8, asr r0
    633c:	01000000 	mrseq	r0, (UNDEF: 0)
    6340:	00084d9c 	muleq	r8, ip, sp
    6344:	2e751900 	cdpcs	9, 7, cr1, cr5, cr0, {0}
    6348:	fb010000 	blx	46352 <_Min_Stack_Size+0x45f52>
    634c:	0004cf01 	andeq	ip, r4, r1, lsl #30
    6350:	70910200 	addsvc	r0, r1, r0, lsl #4
    6354:	2e891600 	cdpcs	6, 8, cr1, cr9, cr0, {0}
    6358:	0c010000 	stceq	0, cr0, [r1], {-0}
    635c:	0058c002 	subseq	ip, r8, r2
    6360:	00001e08 	andeq	r1, r0, r8, lsl #28
    6364:	739c0100 	orrsvc	r0, ip, #0, 2
    6368:	17000008 	strne	r0, [r0, -r8]
    636c:	00002e75 	andeq	r2, r0, r5, ror lr
    6370:	73020c01 	movwvc	r0, #11265	; 0x2c01
    6374:	02000008 	andeq	r0, r0, #8
    6378:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    637c:	0004cf04 	andeq	ip, r4, r4, lsl #30
    6380:	2caf1800 	stccs	8, cr1, [pc]	; 6388 <_Min_Stack_Size+0x5f88>
    6384:	1d010000 	stcne	0, cr0, [r1, #-0]
    6388:	00010a02 	andeq	r0, r1, r2, lsl #20
    638c:	0058e000 	subseq	lr, r8, r0
    6390:	00003008 	andeq	r3, r0, r8
    6394:	b29c0100 	addslt	r0, ip, #0, 2
    6398:	17000008 	strne	r0, [r0, -r8]
    639c:	00002fbc 			; <UNDEFINED> instruction: 0x00002fbc
    63a0:	b8021d01 	stmdalt	r2, {r0, r8, sl, fp, ip}
    63a4:	02000000 	andeq	r0, r0, #0
    63a8:	63196c91 	tstvs	r9, #37120	; 0x9100
    63ac:	01000009 	tsteq	r0, r9
    63b0:	010a021f 	tsteq	sl, pc, lsl r2
    63b4:	91020000 	mrsls	r0, (UNDEF: 2)
    63b8:	78160077 	ldmdavc	r6, {r0, r1, r2, r4, r5, r6}
    63bc:	0100002a 	tsteq	r0, sl, lsr #32
    63c0:	59100238 	ldmdbpl	r0, {r3, r4, r5, r9}
    63c4:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    63c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    63cc:	00000914 	andeq	r0, r0, r4, lsl r9
    63d0:	002c7c17 	eoreq	r7, ip, r7, lsl ip
    63d4:	02380100 	eorseq	r0, r8, #0, 2
    63d8:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    63dc:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    63e0:	00002add 	ldrdeq	r2, [r0], -sp
    63e4:	14023801 	strne	r3, [r2], #-2049	; 0x801
    63e8:	02000009 	andeq	r0, r0, #9
    63ec:	78176891 	ldmdavc	r7, {r0, r4, r7, fp, sp, lr}
    63f0:	01000006 	tsteq	r0, r6
    63f4:	01380238 	teqeq	r8, r8, lsr r2
    63f8:	91020000 	mrsls	r0, (UNDEF: 2)
    63fc:	2cd21967 	ldclcs	9, cr1, [r2], {103}	; 0x67
    6400:	3a010000 	bcc	46408 <_Min_Stack_Size+0x46008>
    6404:	0000b802 	andeq	fp, r0, r2, lsl #16
    6408:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    640c:	002c4719 	eoreq	r4, ip, r9, lsl r7
    6410:	023b0100 	eorseq	r0, fp, #0, 2
    6414:	000000b8 	strheq	r0, [r0], -r8
    6418:	00709102 	rsbseq	r9, r0, r2, lsl #2
    641c:	053f0415 	ldreq	r0, [pc, #-1045]!	; 600f <_Min_Stack_Size+0x5c0f>
    6420:	be160000 	cdplt	0, 1, cr0, cr6, cr0, {0}
    6424:	01000030 	tsteq	r0, r0, lsr r0
    6428:	598c025f 	stmibpl	ip, {r0, r1, r2, r3, r4, r6, r9}
    642c:	00240800 	eoreq	r0, r4, r0, lsl #16
    6430:	9c010000 	stcls	0, cr0, [r1], {-0}
    6434:	00000940 	andeq	r0, r0, r0, asr #18
    6438:	002add17 	eoreq	sp, sl, r7, lsl sp
    643c:	025f0100 	subseq	r0, pc, #0, 2
    6440:	00000914 	andeq	r0, r0, r4, lsl r9
    6444:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6448:	002e5416 	eoreq	r5, lr, r6, lsl r4
    644c:	02710100 	rsbseq	r0, r1, #0, 2
    6450:	080059b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, lr}
    6454:	00000040 	andeq	r0, r0, r0, asr #32
    6458:	09759c01 	ldmdbeq	r5!, {r0, sl, fp, ip, pc}^
    645c:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    6460:	0100002c 	tsteq	r0, ip, lsr #32
    6464:	07bc0271 			; <UNDEFINED> instruction: 0x07bc0271
    6468:	91020000 	mrsls	r0, (UNDEF: 2)
    646c:	06781774 			; <UNDEFINED> instruction: 0x06781774
    6470:	71010000 	mrsvc	r0, (UNDEF: 1)
    6474:	00013802 	andeq	r3, r1, r2, lsl #16
    6478:	73910200 	orrsvc	r0, r1, #0, 4
    647c:	2aa21600 	bcs	fe88bc84 <_estack+0xde85bc84>
    6480:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6484:	0059f002 	subseq	pc, r9, r2
    6488:	00004c08 	andeq	r4, r0, r8, lsl #24
    648c:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    6490:	17000009 	strne	r0, [r0, -r9]
    6494:	00002c7c 	andeq	r2, r0, ip, ror ip
    6498:	bc028e01 	stclt	14, cr8, [r2], {1}
    649c:	02000007 	andeq	r0, r0, #7
    64a0:	a1176491 			; <UNDEFINED> instruction: 0xa1176491
    64a4:	0100002d 	tsteq	r0, sp, lsr #32
    64a8:	09d7028e 	ldmibeq	r7, {r1, r2, r3, r7, r9}^
    64ac:	91020000 	mrsls	r0, (UNDEF: 2)
    64b0:	31d31960 	bicscc	r1, r3, r0, ror #18
    64b4:	90010000 	andls	r0, r1, r0
    64b8:	0000b802 	andeq	fp, r0, r2, lsl #16
    64bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    64c0:	6465721a 	strbtvs	r7, [r5], #-538	; 0x21a
    64c4:	02910100 	addseq	r0, r1, #0, 2
    64c8:	000000b8 	strheq	r0, [r0], -r8
    64cc:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    64d0:	00002f5f 	andeq	r2, r0, pc, asr pc
    64d4:	b8029201 	stmdalt	r2, {r0, r9, ip, pc}
    64d8:	02000000 	andeq	r0, r0, #0
    64dc:	15006c91 	strne	r6, [r0, #-3217]	; 0xc91
    64e0:	00058304 	andeq	r8, r5, r4, lsl #6
    64e4:	2f351600 	svccs	0x00351600
    64e8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    64ec:	005a3c02 	subseq	r3, sl, r2, lsl #24
    64f0:	00002a08 	andeq	r2, r0, r8, lsl #20
    64f4:	039c0100 	orrseq	r0, ip, #0, 2
    64f8:	1700000a 	strne	r0, [r0, -sl]
    64fc:	00002da1 	andeq	r2, r0, r1, lsr #27
    6500:	d702a901 	strle	sl, [r2, -r1, lsl #18]
    6504:	02000009 	andeq	r0, r0, #9
    6508:	16007491 			; <UNDEFINED> instruction: 0x16007491
    650c:	000031d9 	ldrdeq	r3, [r0], -r9
    6510:	6802bd01 	stmdavs	r2, {r0, r8, sl, fp, ip, sp, pc}
    6514:	dc08005a 	stcle	0, cr0, [r8], {90}	; 0x5a
    6518:	01000000 	mrseq	r0, (UNDEF: 0)
    651c:	000aa19c 	muleq	sl, ip, r1
    6520:	2c7c1700 	ldclcs	7, cr1, [ip], #-0
    6524:	bd010000 	stclt	0, cr0, [r1, #-0]
    6528:	0007bc02 	andeq	fp, r7, r2, lsl #24
    652c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6530:	00304217 	eorseq	r4, r0, r7, lsl r2
    6534:	02bd0100 	adcseq	r0, sp, #0, 2
    6538:	000000a2 	andeq	r0, r0, r2, lsr #1
    653c:	175a9102 	ldrbne	r9, [sl, -r2, lsl #2]
    6540:	0000304a 	andeq	r3, r0, sl, asr #32
    6544:	a202bd01 	andge	fp, r2, #1, 26	; 0x40
    6548:	02000000 	andeq	r0, r0, #0
    654c:	e1195891 			; <UNDEFINED> instruction: 0xe1195891
    6550:	0100002f 	tsteq	r0, pc, lsr #32
    6554:	00b802c0 	adcseq	r0, r8, r0, asr #5
    6558:	91020000 	mrsls	r0, (UNDEF: 2)
    655c:	08501970 	ldmdaeq	r0, {r4, r5, r6, r8, fp, ip}^
    6560:	c0010000 	andgt	r0, r1, r0
    6564:	0000b802 	andeq	fp, r0, r2, lsl #16
    6568:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    656c:	00306a19 	eorseq	r6, r0, r9, lsl sl
    6570:	02c10100 	sbceq	r0, r1, #0, 2
    6574:	000000b8 	strheq	r0, [r0], -r8
    6578:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    657c:	00002cc0 	andeq	r2, r0, r0, asr #25
    6580:	b802c201 	stmdalt	r2, {r0, r9, lr, pc}
    6584:	02000000 	andeq	r0, r0, #0
    6588:	18196491 	ldmdane	r9, {r0, r4, r7, sl, sp, lr}
    658c:	0100002c 	tsteq	r0, ip, lsr #32
    6590:	00b802c3 	adcseq	r0, r8, r3, asr #5
    6594:	91020000 	mrsls	r0, (UNDEF: 2)
    6598:	31511968 	cmpcc	r1, r8, ror #18
    659c:	c4010000 	strgt	r0, [r1], #-0
    65a0:	0000b802 	andeq	fp, r0, r2, lsl #16
    65a4:	60910200 	addsvs	r0, r1, r0, lsl #4
    65a8:	2f491600 	svccs	0x00491600
    65ac:	fa010000 	blx	465b4 <_Min_Stack_Size+0x461b4>
    65b0:	005b4402 	subseq	r4, fp, r2, lsl #8
    65b4:	00001c08 	andeq	r1, r0, r8, lsl #24
    65b8:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    65bc:	1700000a 	strne	r0, [r0, -sl]
    65c0:	00002c7c 	andeq	r2, r0, ip, ror ip
    65c4:	bc02fa01 	stclt	10, cr15, [r2], {1}
    65c8:	02000007 	andeq	r0, r0, #7
    65cc:	c6177491 			; <UNDEFINED> instruction: 0xc6177491
    65d0:	0100002e 	tsteq	r0, lr, lsr #32
    65d4:	009702fa 			; <UNDEFINED> instruction: 0x009702fa
    65d8:	91020000 	mrsls	r0, (UNDEF: 2)
    65dc:	f9160073 			; <UNDEFINED> instruction: 0xf9160073
    65e0:	0100002f 	tsteq	r0, pc, lsr #32
    65e4:	5b600309 	blpl	1807210 <_Min_Stack_Size+0x1806e10>
    65e8:	001a0800 	andseq	r0, sl, r0, lsl #16
    65ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    65f0:	00000b0b 	andeq	r0, r0, fp, lsl #22
    65f4:	002c7c17 	eoreq	r7, ip, r7, lsl ip
    65f8:	03090100 	movweq	r0, #37120	; 0x9100
    65fc:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6600:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6604:	00001478 	andeq	r1, r0, r8, ror r4
    6608:	b8030901 	stmdalt	r3, {r0, r8, fp}
    660c:	02000000 	andeq	r0, r0, #0
    6610:	16007091 			; <UNDEFINED> instruction: 0x16007091
    6614:	00002c09 	andeq	r2, r0, r9, lsl #24
    6618:	7c031901 	stcvc	9, cr1, [r3], {1}
    661c:	ca08005b 	bgt	206790 <_Min_Stack_Size+0x206390>
    6620:	01000000 	mrseq	r0, (UNDEF: 0)
    6624:	000ba99c 	muleq	fp, ip, r9
    6628:	2c7c1700 	ldclcs	7, cr1, [ip], #-0
    662c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    6630:	0007bc03 	andeq	fp, r7, r3, lsl #24
    6634:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6638:	00320a17 	eorseq	r0, r2, r7, lsl sl
    663c:	03190100 	tsteq	r9, #0, 2
    6640:	000000b8 	strheq	r0, [r0], -r8
    6644:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    6648:	00002a8f 	andeq	r2, r0, pc, lsl #21
    664c:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    6650:	02000000 	andeq	r0, r0, #0
    6654:	50195491 	mulspl	r9, r1, r4
    6658:	01000008 	tsteq	r0, r8
    665c:	0097031c 	addseq	r0, r7, ip, lsl r3
    6660:	91020000 	mrsls	r0, (UNDEF: 2)
    6664:	2fe11977 	svccs	0x00e11977
    6668:	1d010000 	stcne	0, cr0, [r1, #-0]
    666c:	0000b803 	andeq	fp, r0, r3, lsl #16
    6670:	70910200 	addsvc	r0, r1, r0, lsl #4
    6674:	00306a19 	eorseq	r6, r0, r9, lsl sl
    6678:	031e0100 	tsteq	lr, #0, 2
    667c:	000000b8 	strheq	r0, [r0], -r8
    6680:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    6684:	00002cc0 	andeq	r2, r0, r0, asr #25
    6688:	b8031f01 	stmdalt	r3, {r0, r8, r9, sl, fp, ip}
    668c:	02000000 	andeq	r0, r0, #0
    6690:	18196891 	ldmdane	r9, {r0, r4, r7, fp, sp, lr}
    6694:	0100002c 	tsteq	r0, ip, lsr #32
    6698:	00b80320 	adcseq	r0, r8, r0, lsr #6
    669c:	91020000 	mrsls	r0, (UNDEF: 2)
    66a0:	31511964 	cmpcc	r1, r4, ror #18
    66a4:	21010000 	mrscs	r0, (UNDEF: 1)
    66a8:	0000b803 	andeq	fp, r0, r3, lsl #16
    66ac:	60910200 	addsvs	r0, r1, r0, lsl #4
    66b0:	2b4d1600 	blcs	134beb8 <_Min_Stack_Size+0x134bab8>
    66b4:	57010000 	strpl	r0, [r1, -r0]
    66b8:	005c4803 	subseq	r4, ip, r3, lsl #16
    66bc:	0000c008 	andeq	ip, r0, r8
    66c0:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    66c4:	1700000b 	strne	r0, [r0, -fp]
    66c8:	00002c7c 	andeq	r2, r0, ip, ror ip
    66cc:	bc035701 	stclt	7, cr5, [r3], {1}
    66d0:	02000007 	andeq	r0, r0, #7
    66d4:	ee176c91 	mrc	12, 0, r6, cr7, cr1, {4}
    66d8:	01000030 	tsteq	r0, r0, lsr r0
    66dc:	00b80357 	adcseq	r0, r8, r7, asr r3
    66e0:	91020000 	mrsls	r0, (UNDEF: 2)
    66e4:	08501968 	ldmdaeq	r0, {r3, r5, r6, r8, fp, ip}^
    66e8:	5a010000 	bpl	466f0 <_Min_Stack_Size+0x462f0>
    66ec:	00009703 	andeq	r9, r0, r3, lsl #14
    66f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    66f4:	002fe119 	eoreq	lr, pc, r9, lsl r1	; <UNPREDICTABLE>
    66f8:	035b0100 	cmpeq	fp, #0, 2
    66fc:	000000b8 	strheq	r0, [r0], -r8
    6700:	00709102 	rsbseq	r9, r0, r2, lsl #2
    6704:	0031ec16 	eorseq	lr, r1, r6, lsl ip
    6708:	03c90100 	biceq	r0, r9, #0, 2
    670c:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
    6710:	0000003c 	andeq	r0, r0, ip, lsr r0
    6714:	0c319c01 	ldceq	12, cr9, [r1], #-4
    6718:	37170000 	ldrcc	r0, [r7, -r0]
    671c:	0100002e 	tsteq	r0, lr, lsr #32
    6720:	00b803c9 	adcseq	r0, r8, r9, asr #7
    6724:	91020000 	mrsls	r0, (UNDEF: 2)
    6728:	06781774 			; <UNDEFINED> instruction: 0x06781774
    672c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    6730:	00013803 	andeq	r3, r1, r3, lsl #16
    6734:	73910200 	orrsvc	r0, r1, #0, 4
    6738:	2f131800 	svccs	0x00131800
    673c:	e3010000 	movw	r0, #4096	; 0x1000
    6740:	00010a03 	andeq	r0, r1, r3, lsl #20
    6744:	005d4400 	subseq	r4, sp, r0, lsl #8
    6748:	00003408 	andeq	r3, r0, r8, lsl #8
    674c:	6a9c0100 	bvs	fe706b54 <_estack+0xde6d6b54>
    6750:	1700000c 	strne	r0, [r0, -ip]
    6754:	000030fa 	strdeq	r3, [r0], -sl
    6758:	b803e301 	stmdalt	r3, {r0, r8, r9, sp, lr, pc}
    675c:	02000000 	andeq	r0, r0, #0
    6760:	63196c91 	tstvs	r9, #37120	; 0x9100
    6764:	01000009 	tsteq	r0, r9
    6768:	010a03e5 	smlatteq	sl, r5, r3, r0
    676c:	91020000 	mrsls	r0, (UNDEF: 2)
    6770:	ce160077 	mrcgt	0, 0, r0, cr6, cr7, {3}
    6774:	0100002a 	tsteq	r0, sl, lsr #32
    6778:	5d7803ff 	ldclpl	3, cr0, [r8, #-1020]!	; 0xfffffc04
    677c:	001c0800 	andseq	r0, ip, r0, lsl #16
    6780:	9c010000 	stcls	0, cr0, [r1], {-0}
    6784:	00000c90 	muleq	r0, r0, ip
    6788:	0030fa17 	eorseq	pc, r0, r7, lsl sl	; <UNPREDICTABLE>
    678c:	03ff0100 	mvnseq	r0, #0, 2
    6790:	000000b8 	strheq	r0, [r0], -r8
    6794:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6798:	002d1518 	eoreq	r1, sp, r8, lsl r5
    679c:	04120100 	ldreq	r0, [r2], #-256	; 0x100
    67a0:	00000116 	andeq	r0, r0, r6, lsl r1
    67a4:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
    67a8:	00000050 	andeq	r0, r0, r0, asr r0
    67ac:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    67b0:	37170000 	ldrcc	r0, [r7, -r0]
    67b4:	0100002e 	tsteq	r0, lr, lsr #32
    67b8:	00b80412 	adcseq	r0, r8, r2, lsl r4
    67bc:	91020000 	mrsls	r0, (UNDEF: 2)
    67c0:	0963196c 	stmdbeq	r3!, {r2, r3, r5, r6, r8, fp, ip}^
    67c4:	14010000 	strne	r0, [r1], #-0
    67c8:	00011604 	andeq	r1, r1, r4, lsl #12
    67cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    67d0:	2f8d1600 	svccs	0x008d1600
    67d4:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    67d8:	005de404 	subseq	lr, sp, r4, lsl #8
    67dc:	00001c08 	andeq	r1, r0, r8, lsl #24
    67e0:	ef9c0100 	svc	0x009c0100
    67e4:	1700000c 	strne	r0, [r0, -ip]
    67e8:	00002e37 	andeq	r2, r0, r7, lsr lr
    67ec:	b8043801 	stmdalt	r4, {r0, fp, ip, sp}
    67f0:	02000000 	andeq	r0, r0, #0
    67f4:	1b007491 	blne	23a40 <_Min_Stack_Size+0x23640>
    67f8:	0000015e 	andeq	r0, r0, lr, asr r1
    67fc:	ef06a706 	svc	0x0006a706
    6800:	00000000 	andeq	r0, r0, r0
    6804:	00000c86 	andeq	r0, r0, r6, lsl #25
    6808:	13d10004 	bicsne	r0, r1, #4
    680c:	01040000 	mrseq	r0, (UNDEF: 4)
    6810:	00000021 	andeq	r0, r0, r1, lsr #32
    6814:	0039e601 	eorseq	lr, r9, r1, lsl #12
    6818:	00011400 	andeq	r1, r1, r0, lsl #8
    681c:	00088800 	andeq	r8, r8, r0, lsl #16
    6820:	00000000 	andeq	r0, r0, r0
    6824:	002deb00 	eoreq	lr, sp, r0, lsl #22
    6828:	06010200 	streq	r0, [r1], -r0, lsl #4
    682c:	0000014d 	andeq	r0, r0, sp, asr #2
    6830:	4b080102 	blmi	206c40 <_Min_Stack_Size+0x206840>
    6834:	02000001 	andeq	r0, r0, #1
    6838:	01870502 	orreq	r0, r7, r2, lsl #10
    683c:	02020000 	andeq	r0, r2, #0
    6840:	00000e07 	andeq	r0, r0, r7, lsl #28
    6844:	01770300 	cmneq	r7, r0, lsl #6
    6848:	3f020000 	svccc	0x00020000
    684c:	0000004c 	andeq	r0, r0, ip, asr #32
    6850:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    6854:	03000000 	movweq	r0, #0
    6858:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    685c:	005e4102 	subseq	r4, lr, r2, lsl #2
    6860:	04020000 	streq	r0, [r2], #-0
    6864:	00012e07 	andeq	r2, r1, r7, lsl #28
    6868:	05080200 	streq	r0, [r8, #-512]	; 0x200
    686c:	00000000 	andeq	r0, r0, r0
    6870:	29070802 	stmdbcs	r7, {r1, fp}
    6874:	04000001 	streq	r0, [r0], #-1
    6878:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    687c:	04020074 	streq	r0, [r2], #-116	; 0x74
    6880:	00013307 	andeq	r3, r1, r7, lsl #6
    6884:	01790300 	cmneq	r9, r0, lsl #6
    6888:	41030000 	mrsmi	r0, (UNDEF: 3)
    688c:	00000041 	andeq	r0, r0, r1, asr #32
    6890:	0005b603 	andeq	fp, r5, r3, lsl #12
    6894:	53420300 	movtpl	r0, #8960	; 0x2300
    6898:	05000000 	streq	r0, [r0, #-0]
    689c:	0000008c 	andeq	r0, r0, ip, lsl #1
    68a0:	000000a7 	andeq	r0, r0, r7, lsr #1
    68a4:	0000a706 	andeq	sl, r0, r6, lsl #14
    68a8:	02000700 	andeq	r0, r0, #0, 14
    68ac:	01910704 	orrseq	r0, r1, r4, lsl #14
    68b0:	8c070000 	stchi	0, cr0, [r7], {-0}
    68b4:	05000000 	streq	r0, [r0, #-0]
    68b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    68bc:	000000c3 	andeq	r0, r0, r3, asr #1
    68c0:	0000a706 	andeq	sl, r0, r6, lsl #14
    68c4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    68c8:	00000081 	andeq	r0, r0, r1, lsl #1
    68cc:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    68d0:	0000de01 	andeq	sp, r0, r1, lsl #28
    68d4:	087e0900 	ldmdaeq	lr!, {r8, fp}^
    68d8:	0a000000 	beq	68e0 <_Min_Stack_Size+0x64e0>
    68dc:	00544553 	subseq	r4, r4, r3, asr r5
    68e0:	880b0001 	stmdahi	fp, {r0}
    68e4:	0400001e 	streq	r0, [r0], #-30
    68e8:	00c801f7 	strdeq	r0, [r8], #23
    68ec:	d60b0000 	strle	r0, [fp], -r0
    68f0:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    68f4:	00c801f7 	strdeq	r0, [r8], #23
    68f8:	01080000 	mrseq	r0, (UNDEF: 8)
    68fc:	0c01f904 	stceq	9, cr15, [r1], {4}
    6900:	09000001 	stmdbeq	r0, {r0}
    6904:	00000686 	andeq	r0, r0, r6, lsl #13
    6908:	07de0900 	ldrbeq	r0, [lr, r0, lsl #18]
    690c:	00010000 	andeq	r0, r1, r0
    6910:	0007af0b 	andeq	sl, r7, fp, lsl #30
    6914:	01f90400 	mvnseq	r0, r0, lsl #8
    6918:	000000f6 	strdeq	r0, [r0], -r6
    691c:	8b04200c 	blhi	10e954 <_Min_Stack_Size+0x10e554>
    6920:	00012f03 	andeq	r2, r1, r3, lsl #30
    6924:	3b3d0d00 	blcc	f49d2c <_Min_Stack_Size+0xf4992c>
    6928:	8d040000 	stchi	0, cr0, [r4, #-0]
    692c:	00012f03 	andeq	r2, r1, r3, lsl #30
    6930:	07000000 	streq	r0, [r0, -r0]
    6934:	00000097 	muleq	r0, r7, r0
    6938:	00339a0b 	eorseq	r9, r3, fp, lsl #20
    693c:	038e0400 	orreq	r0, lr, #0, 8
    6940:	00000118 	andeq	r0, r0, r8, lsl r1
    6944:	94041c0c 	strls	r1, [r4], #-3084	; 0xc0c
    6948:	00015703 	andeq	r5, r1, r3, lsl #14
    694c:	38d70d00 	ldmcc	r7, {r8, sl, fp}^
    6950:	96040000 	strls	r0, [r4], -r0
    6954:	00016703 	andeq	r6, r1, r3, lsl #14
    6958:	05000000 	streq	r0, [r0, #-0]
    695c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6960:	00000167 	andeq	r0, r0, r7, ror #2
    6964:	0000a706 	andeq	sl, r0, r6, lsl #14
    6968:	07000600 	streq	r0, [r0, -r0, lsl #12]
    696c:	00000157 	andeq	r0, r0, r7, asr r1
    6970:	0037d30b 	eorseq	sp, r7, fp, lsl #6
    6974:	03970400 	orrseq	r0, r7, #0, 8
    6978:	00000140 	andeq	r0, r0, r0, asr #2
    697c:	9d04180c 	stcls	8, cr1, [r4, #-48]	; 0xffffffd0
    6980:	0001d003 	andeq	sp, r1, r3
    6984:	36d70d00 	ldrbcc	r0, [r7], r0, lsl #26
    6988:	9f040000 	svcls	0x00040000
    698c:	0000ae03 	andeq	sl, r0, r3, lsl #28
    6990:	530e0000 	movwpl	r0, #57344	; 0xe000
    6994:	04003252 	streq	r3, [r0], #-594	; 0x252
    6998:	00ae03a0 	adceq	r0, lr, r0, lsr #7
    699c:	0d040000 	stceq	0, cr0, [r4, #-0]
    69a0:	00003272 	andeq	r3, r0, r2, ror r2
    69a4:	ae03a104 	mvfges	f2, f4
    69a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    69ac:	0037410d 	eorseq	r4, r7, sp, lsl #2
    69b0:	03a20400 			; <UNDEFINED> instruction: 0x03a20400
    69b4:	000000ae 	andeq	r0, r0, lr, lsr #1
    69b8:	056c0d0c 	strbeq	r0, [ip, #-3340]!	; 0xd0c
    69bc:	a3040000 	movwge	r0, #16384	; 0x4000
    69c0:	00008c03 	andeq	r8, r0, r3, lsl #24
    69c4:	1d0d1000 	stcne	0, cr1, [sp, #-0]
    69c8:	04000034 	streq	r0, [r0], #-52	; 0x34
    69cc:	00ae03a4 	adceq	r0, lr, r4, lsr #7
    69d0:	00140000 	andseq	r0, r4, r0
    69d4:	0035460b 	eorseq	r4, r5, fp, lsl #12
    69d8:	03a50400 			; <UNDEFINED> instruction: 0x03a50400
    69dc:	00000178 	andeq	r0, r0, r8, ror r1
    69e0:	ab04180c 	blge	10ca18 <_Min_Stack_Size+0x10c618>
    69e4:	00023403 	andeq	r3, r2, r3, lsl #8
    69e8:	36dc0d00 	ldrbcc	r0, [ip], r0, lsl #26
    69ec:	ad040000 	stcge	0, cr0, [r4, #-0]
    69f0:	0000ae03 	andeq	sl, r0, r3, lsl #28
    69f4:	530e0000 	movwpl	r0, #57344	; 0xe000
    69f8:	04003352 	streq	r3, [r0], #-850	; 0x352
    69fc:	00ae03ae 	adceq	r0, lr, lr, lsr #7
    6a00:	0d040000 	stceq	0, cr0, [r4, #-0]
    6a04:	000032ee 	andeq	r3, r0, lr, ror #5
    6a08:	ae03af04 	cdpge	15, 0, cr10, cr3, cr4, {0}
    6a0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a10:	0037470d 	eorseq	r4, r7, sp, lsl #14
    6a14:	03b00400 	movseq	r0, #0, 8
    6a18:	000000ae 	andeq	r0, r0, lr, lsr #1
    6a1c:	056c0d0c 	strbeq	r0, [ip, #-3340]!	; 0xd0c
    6a20:	b1040000 	mrslt	r0, (UNDEF: 4)
    6a24:	00008c03 	andeq	r8, r0, r3, lsl #24
    6a28:	f00d1000 			; <UNDEFINED> instruction: 0xf00d1000
    6a2c:	04000033 	streq	r0, [r0], #-51	; 0x33
    6a30:	00ae03b2 	strhteq	r0, [lr], r2
    6a34:	00140000 	andseq	r0, r4, r0
    6a38:	00379e0b 	eorseq	r9, r7, fp, lsl #28
    6a3c:	03b30400 			; <UNDEFINED> instruction: 0x03b30400
    6a40:	000001dc 	ldrdeq	r0, [r0], -ip
    6a44:	b904140c 	stmdblt	r4, {r2, r3, sl, ip}
    6a48:	00028b03 	andeq	r8, r2, r3, lsl #22
    6a4c:	36e10d00 	strbtcc	r0, [r1], r0, lsl #26
    6a50:	bb040000 	bllt	106a58 <_Min_Stack_Size+0x106658>
    6a54:	0000ae03 	andeq	sl, r0, r3, lsl #28
    6a58:	530e0000 	movwpl	r0, #57344	; 0xe000
    6a5c:	04003452 	streq	r3, [r0], #-1106	; 0x452
    6a60:	00ae03bc 	strhteq	r0, [lr], ip
    6a64:	0d040000 	stceq	0, cr0, [r4, #-0]
    6a68:	00003289 	andeq	r3, r0, r9, lsl #5
    6a6c:	ae03bd04 	cdpge	13, 0, cr11, cr3, cr4, {0}
    6a70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a74:	0038a80d 	eorseq	sl, r8, sp, lsl #16
    6a78:	03be0400 			; <UNDEFINED> instruction: 0x03be0400
    6a7c:	000000ae 	andeq	r0, r0, lr, lsr #1
    6a80:	3b150d0c 	blcc	549eb8 <_Min_Stack_Size+0x549ab8>
    6a84:	bf040000 	svclt	0x00040000
    6a88:	0000ae03 	andeq	sl, r0, r3, lsl #28
    6a8c:	0b001000 	bleq	aa94 <_Min_Stack_Size+0xa694>
    6a90:	00003811 	andeq	r3, r0, r1, lsl r8
    6a94:	4003c004 	andmi	ip, r3, r4
    6a98:	0c000002 	stceq	0, cr0, [r0], {2}
    6a9c:	03c6041c 	biceq	r0, r6, #28, 8	; 0x1c000000
    6aa0:	000002e2 	andeq	r0, r0, r2, ror #5
    6aa4:	00329d0d 	eorseq	r9, r2, sp, lsl #26
    6aa8:	03c80400 	biceq	r0, r8, #0, 8
    6aac:	000002e2 	andeq	r0, r0, r2, ror #5
    6ab0:	33b10d00 			; <UNDEFINED> instruction: 0x33b10d00
    6ab4:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    6ab8:	0002e703 	andeq	lr, r2, r3, lsl #14
    6abc:	970d0800 	strls	r0, [sp, -r0, lsl #16]
    6ac0:	04000035 	streq	r0, [r0], #-53	; 0x35
    6ac4:	00ae03ca 	adceq	r0, lr, sl, asr #7
    6ac8:	0d100000 	ldceq	0, cr0, [r0, #-0]
    6acc:	00003326 	andeq	r3, r0, r6, lsr #6
    6ad0:	ae03cb04 	vmlage.f64	d12, d3, d4
    6ad4:	14000000 	strne	r0, [r0], #-0
    6ad8:	0033ac0d 	eorseq	sl, r3, sp, lsl #24
    6adc:	03cc0400 	biceq	r0, ip, #0, 8
    6ae0:	000000ae 	andeq	r0, r0, lr, lsr #1
    6ae4:	b3070018 	movwlt	r0, #28696	; 0x7018
    6ae8:	07000000 	streq	r0, [r0, -r0]
    6aec:	000000b3 	strheq	r0, [r0], -r3
    6af0:	0032a20b 	eorseq	sl, r2, fp, lsl #4
    6af4:	03cd0400 	biceq	r0, sp, #0, 8
    6af8:	00000297 	muleq	r0, r7, r2
    6afc:	2f051c0f 	svccs	0x00051c0f
    6b00:	00000355 	andeq	r0, r0, r5, asr r3
    6b04:	00388110 	eorseq	r8, r8, r0, lsl r1
    6b08:	8c310500 	cfldr32hi	mvfx0, [r1], #-0
    6b0c:	00000000 	andeq	r0, r0, r0
    6b10:	0036b810 	eorseq	fp, r6, r0, lsl r8
    6b14:	8c360500 	cfldr32hi	mvfx0, [r6], #-0
    6b18:	04000000 	streq	r0, [r0], #-0
    6b1c:	00350310 	eorseq	r0, r5, r0, lsl r3
    6b20:	8c3b0500 	cfldr32hi	mvfx0, [fp], #-0
    6b24:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6b28:	00367010 	eorseq	r7, r6, r0, lsl r0
    6b2c:	8c400500 	cfstr64hi	mvdx0, [r0], {-0}
    6b30:	0c000000 	stceq	0, cr0, [r0], {-0}
    6b34:	003b2d10 	eorseq	r2, fp, r0, lsl sp
    6b38:	8c450500 	cfstr64hi	mvdx0, [r5], {-0}
    6b3c:	10000000 	andne	r0, r0, r0
    6b40:	00392210 	eorseq	r2, r9, r0, lsl r2
    6b44:	8c490500 	cfstr64hi	mvdx0, [r9], {-0}
    6b48:	14000000 	strne	r0, [r0], #-0
    6b4c:	00376210 	eorseq	r6, r7, r0, lsl r2
    6b50:	8c510500 	cfldr64hi	mvdx0, [r1], {-0}
    6b54:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6b58:	37810300 	strcc	r0, [r1, r0, lsl #6]
    6b5c:	53050000 	movwpl	r0, #20480	; 0x5000
    6b60:	000002f8 	strdeq	r0, [r0], -r8
    6b64:	5805400f 	stmdapl	r5, {r0, r1, r2, r3, lr}
    6b68:	00000429 	andeq	r0, r0, r9, lsr #8
    6b6c:	0037fb10 	eorseq	pc, r7, r0, lsl fp	; <UNPREDICTABLE>
    6b70:	8c5a0500 	cfldr64hi	mvdx0, [sl], {-0}
    6b74:	00000000 	andeq	r0, r0, r0
    6b78:	003b1a10 	eorseq	r1, fp, r0, lsl sl
    6b7c:	8c5d0500 	cfldr64hi	mvdx0, [sp], {-0}
    6b80:	04000000 	streq	r0, [r0], #-0
    6b84:	0038ae10 	eorseq	sl, r8, r0, lsl lr
    6b88:	8c610500 	cfstr64hi	mvdx0, [r1], #-0
    6b8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6b90:	003a3610 	eorseq	r3, sl, r0, lsl r6
    6b94:	8c650500 	cfstr64hi	mvdx0, [r5], #-0
    6b98:	0c000000 	stceq	0, cr0, [r0], {-0}
    6b9c:	00356a10 	eorseq	r6, r5, r0, lsl sl
    6ba0:	8c680500 	cfstr64hi	mvdx0, [r8], #-0
    6ba4:	10000000 	andne	r0, r0, r0
    6ba8:	0032f410 	eorseq	pc, r2, r0, lsl r4	; <UNPREDICTABLE>
    6bac:	8c6c0500 	cfstr64hi	mvdx0, [ip], #-0
    6bb0:	14000000 	strne	r0, [r0], #-0
    6bb4:	00380410 	eorseq	r0, r8, r0, lsl r4
    6bb8:	8c700500 	cfldr64hi	mvdx0, [r0], #-0
    6bbc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6bc0:	0035be10 	eorseq	fp, r5, r0, lsl lr
    6bc4:	8c740500 	cfldr64hi	mvdx0, [r4], #-0
    6bc8:	1c000000 	stcne	0, cr0, [r0], {-0}
    6bcc:	00365010 	eorseq	r5, r6, r0, lsl r0
    6bd0:	8c790500 	cfldr64hi	mvdx0, [r9], #-0
    6bd4:	20000000 	andcs	r0, r0, r0
    6bd8:	0036a910 	eorseq	sl, r6, r0, lsl r9
    6bdc:	8c7c0500 	cfldr64hi	mvdx0, [ip], #-0
    6be0:	24000000 	strcs	r0, [r0], #-0
    6be4:	00327810 	eorseq	r7, r2, r0, lsl r8
    6be8:	8c800500 	cfstr32hi	mvfx0, [r0], {0}
    6bec:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6bf0:	003a8910 	eorseq	r8, sl, r0, lsl r9
    6bf4:	8c830500 	cfstr32hi	mvfx0, [r3], {0}
    6bf8:	2c000000 	stccs	0, cr0, [r0], {-0}
    6bfc:	0037b010 	eorseq	fp, r7, r0, lsl r0
    6c00:	8c870500 	cfstr32hi	mvfx0, [r7], {0}
    6c04:	30000000 	andcc	r0, r0, r0
    6c08:	00334810 	eorseq	r4, r3, r0, lsl r8
    6c0c:	8c8a0500 	cfstr32hi	mvfx0, [sl], {0}
    6c10:	34000000 	strcc	r0, [r0], #-0
    6c14:	0038bd10 	eorseq	fp, r8, r0, lsl sp
    6c18:	29900500 	ldmibcs	r0, {r8, sl}
    6c1c:	38000004 	stmdacc	r0, {r2}
    6c20:	00345610 	eorseq	r5, r4, r0, lsl r6
    6c24:	29920500 	ldmibcs	r2, {r8, sl}
    6c28:	3c000004 	stccc	0, cr0, [r0], {4}
    6c2c:	55041100 	strpl	r1, [r4, #-256]	; 0x100
    6c30:	03000003 	movweq	r0, #3
    6c34:	000033b6 			; <UNDEFINED> instruction: 0x000033b6
    6c38:	03609305 	cmneq	r0, #335544320	; 0x14000000
    6c3c:	100f0000 	andne	r0, pc, r0
    6c40:	04739805 	ldrbteq	r9, [r3], #-2053	; 0x805
    6c44:	d3100000 	tstle	r0, #0
    6c48:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6c4c:	00008c9a 	muleq	r0, sl, ip
    6c50:	01100000 	tsteq	r0, r0
    6c54:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6c58:	00008ca0 	andeq	r8, r0, r0, lsr #25
    6c5c:	23100400 	tstcs	r0, #0, 8
    6c60:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6c64:	00008ca6 	andeq	r8, r0, r6, lsr #25
    6c68:	cd100800 	ldcgt	8, cr0, [r0, #-0]
    6c6c:	05000033 	streq	r0, [r0, #-51]	; 0x33
    6c70:	00008cad 	andeq	r8, r0, sp, lsr #25
    6c74:	03000c00 	movweq	r0, #3072	; 0xc00
    6c78:	00003435 	andeq	r3, r0, r5, lsr r4
    6c7c:	043ab205 	ldrteq	fp, [sl], #-517	; 0x205
    6c80:	240f0000 	strcs	r0, [pc], #-0	; 6c88 <_Min_Stack_Size+0x6888>
    6c84:	04f3b705 	ldrbteq	fp, [r3], #1797	; 0x705
    6c88:	fb100000 	blx	406c92 <_Min_Stack_Size+0x406892>
    6c8c:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6c90:	00008cb9 			; <UNDEFINED> instruction: 0x00008cb9
    6c94:	05100000 	ldreq	r0, [r0, #-0]
    6c98:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    6c9c:	00008cbc 			; <UNDEFINED> instruction: 0x00008cbc
    6ca0:	36100400 	ldrcc	r0, [r0], -r0, lsl #8
    6ca4:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6ca8:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    6cac:	de100800 	cdple	8, 1, cr0, cr0, cr0, {0}
    6cb0:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6cb4:	00008cc2 	andeq	r8, r0, r2, asr #25
    6cb8:	91100c00 	tstls	r0, r0, lsl #24
    6cbc:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6cc0:	00008cc5 	andeq	r8, r0, r5, asr #25
    6cc4:	58101000 	ldmdapl	r0, {ip}
    6cc8:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6ccc:	00008cc8 	andeq	r8, r0, r8, asr #25
    6cd0:	0e101400 	cfmulseq	mvf1, mvf0, mvf0
    6cd4:	05000036 	streq	r0, [r0, #-54]	; 0x36
    6cd8:	00008ccc 	andeq	r8, r0, ip, asr #25
    6cdc:	2c101800 	ldccs	8, cr1, [r0], {-0}
    6ce0:	05000033 	streq	r0, [r0, #-51]	; 0x33
    6ce4:	0004f3d0 	ldrdeq	pc, [r4], -r0
    6ce8:	c5101c00 	ldrgt	r1, [r0, #-3072]	; 0xc00
    6cec:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6cf0:	0004f3d2 	ldrdeq	pc, [r4], -r2
    6cf4:	11002000 	mrsne	r2, (UNDEF: 0)
    6cf8:	00047304 	andeq	r7, r4, r4, lsl #6
    6cfc:	37bf0300 	ldrcc	r0, [pc, r0, lsl #6]!
    6d00:	d3050000 	movwle	r0, #20480	; 0x5000
    6d04:	0000047e 	andeq	r0, r0, lr, ror r4
    6d08:	d905180f 	stmdble	r5, {r0, r1, r2, r3, fp, ip}
    6d0c:	00000555 	andeq	r0, r0, r5, asr r5
    6d10:	003b0510 	eorseq	r0, fp, r0, lsl r5
    6d14:	8cdb0500 	cfldr64hi	mvdx0, [fp], {0}
    6d18:	00000000 	andeq	r0, r0, r0
    6d1c:	00355810 	eorseq	r5, r5, r0, lsl r8
    6d20:	8cde0500 	cfldr64hi	mvdx0, [lr], {0}
    6d24:	04000000 	streq	r0, [r0], #-0
    6d28:	00360e10 	eorseq	r0, r6, r0, lsl lr
    6d2c:	8ce20500 	cfstr64hi	mvdx0, [r2]
    6d30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d34:	00332c10 	eorseq	r2, r3, r0, lsl ip
    6d38:	f3e70500 	vabal.u32	q8, d7, d0
    6d3c:	0c000004 	stceq	0, cr0, [r0], {4}
    6d40:	0034c510 	eorseq	ip, r4, r0, lsl r5
    6d44:	f3e90500 	vabal.u32	q8, d9, d0
    6d48:	10000004 	andne	r0, r0, r4
    6d4c:	003ab710 	eorseq	fp, sl, r0, lsl r7
    6d50:	f3eb0500 	vabal.u32	q8, d11, d0
    6d54:	14000004 	strne	r0, [r0], #-4
    6d58:	36e60300 	strbtcc	r0, [r6], r0, lsl #6
    6d5c:	ec050000 	stc	0, cr0, [r5], {-0}
    6d60:	00000504 	andeq	r0, r0, r4, lsl #10
    6d64:	f2051c0f 			; <UNDEFINED> instruction: 0xf2051c0f
    6d68:	000005c1 	andeq	r0, r0, r1, asr #11
    6d6c:	00394a10 	eorseq	r4, r9, r0, lsl sl
    6d70:	8cf40500 	cfldr64hi	mvdx0, [r4]
    6d74:	00000000 	andeq	r0, r0, r0
    6d78:	00346c10 	eorseq	r6, r4, r0, lsl ip
    6d7c:	8cf80500 	cfldr64hi	mvdx0, [r8]
    6d80:	04000000 	streq	r0, [r0], #-0
    6d84:	0032da10 	eorseq	sp, r2, r0, lsl sl
    6d88:	8cfc0500 	cfldr64hi	mvdx0, [ip]
    6d8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d90:	00361f0d 	eorseq	r1, r6, sp, lsl #30
    6d94:	01000500 	tsteq	r0, r0, lsl #10
    6d98:	0000008c 	andeq	r0, r0, ip, lsl #1
    6d9c:	33700d0c 	cmncc	r0, #12, 26	; 0x300
    6da0:	05050000 	streq	r0, [r5, #-0]
    6da4:	00008c01 	andeq	r8, r0, r1, lsl #24
    6da8:	fc0d1000 	stc2	0, cr1, [sp], {-0}
    6dac:	05000036 	streq	r0, [r0, #-54]	; 0x36
    6db0:	008c0108 	addeq	r0, ip, r8, lsl #2
    6db4:	0d140000 	ldceq	0, cr0, [r4, #-0]
    6db8:	0000359d 	muleq	r0, sp, r5
    6dbc:	8c010c05 	stchi	12, cr0, [r1], {5}
    6dc0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6dc4:	39c30b00 	stmibcc	r3, {r8, r9, fp}^
    6dc8:	10050000 	andne	r0, r5, r0
    6dcc:	00056001 	andeq	r6, r5, r1
    6dd0:	05100c00 	ldreq	r0, [r0, #-3072]	; 0xc00
    6dd4:	060b0117 			; <UNDEFINED> instruction: 0x060b0117
    6dd8:	9e0d0000 	cdpls	0, 0, cr0, cr13, cr0, {0}
    6ddc:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6de0:	008c0119 	addeq	r0, ip, r9, lsl r1
    6de4:	0d000000 	stceq	0, cr0, [r0, #-0]
    6de8:	0000385d 	andeq	r3, r0, sp, asr r8
    6dec:	8c011c05 	stchi	12, cr1, [r1], {5}
    6df0:	04000000 	streq	r0, [r0], #-0
    6df4:	0035300d 	eorseq	r3, r5, sp
    6df8:	011f0500 	tsteq	pc, r0, lsl #10
    6dfc:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e00:	330b0d08 	movwcc	r0, #48392	; 0xbd08
    6e04:	23050000 	movwcs	r0, #20480	; 0x5000
    6e08:	00008c01 	andeq	r8, r0, r1, lsl #24
    6e0c:	0b000c00 	bleq	9e14 <_Min_Stack_Size+0x9a14>
    6e10:	00003932 	andeq	r3, r0, r2, lsr r9
    6e14:	cd012505 	cfstr32gt	mvfx2, [r1, #-20]	; 0xffffffec
    6e18:	0c000005 	stceq	0, cr0, [r0], {5}
    6e1c:	012b052c 	teqeq	fp, ip, lsr #10
    6e20:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    6e24:	0037fb0d 	eorseq	pc, r7, sp, lsl #22
    6e28:	012d0500 	teqeq	sp, r0, lsl #10
    6e2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e30:	374d0d00 	strbcc	r0, [sp, -r0, lsl #26]
    6e34:	30050000 	andcc	r0, r5, r0
    6e38:	00008c01 	andeq	r8, r0, r1, lsl #24
    6e3c:	960d0400 	strls	r0, [sp], -r0, lsl #8
    6e40:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6e44:	008c0133 	addeq	r0, ip, r3, lsr r1
    6e48:	0d080000 	stceq	0, cr0, [r8, #-0]
    6e4c:	000034a0 	andeq	r3, r0, r0, lsr #9
    6e50:	8c013605 	stchi	6, cr3, [r1], {5}
    6e54:	0c000000 	stceq	0, cr0, [r0], {-0}
    6e58:	00368a0d 	eorseq	r8, r6, sp, lsl #20
    6e5c:	01390500 	teqeq	r9, r0, lsl #10
    6e60:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e64:	32c40d10 	sbccc	r0, r4, #16, 26	; 0x400
    6e68:	3c050000 	stccc	0, cr0, [r5], {-0}
    6e6c:	00008c01 	andeq	r8, r0, r1, lsl #24
    6e70:	6e0d1400 	cfcpysvs	mvf1, mvf13
    6e74:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6e78:	008c013f 	addeq	r0, ip, pc, lsr r1
    6e7c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    6e80:	00003960 	andeq	r3, r0, r0, ror #18
    6e84:	8c014205 	sfmhi	f4, 4, [r1], {5}
    6e88:	1c000000 	stcne	0, cr0, [r0], {-0}
    6e8c:	0039830d 	eorseq	r8, r9, sp, lsl #6
    6e90:	01460500 	cmpeq	r6, r0, lsl #10
    6e94:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e98:	357e0d20 	ldrbcc	r0, [lr, #-3360]!	; 0xd20
    6e9c:	4a050000 	bmi	146ea4 <_Min_Stack_Size+0x146aa4>
    6ea0:	00008c01 	andeq	r8, r0, r1, lsl #24
    6ea4:	cf0d2400 	svcgt	0x000d2400
    6ea8:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6eac:	06b0014d 	ldrteq	r0, [r0], sp, asr #2
    6eb0:	00280000 	eoreq	r0, r8, r0
    6eb4:	05c10411 	strbeq	r0, [r1, #1041]	; 0x411
    6eb8:	5b0b0000 	blpl	2c6ec0 <_Min_Stack_Size+0x2c6ac0>
    6ebc:	05000033 	streq	r0, [r0, #-51]	; 0x33
    6ec0:	0617014f 	ldreq	r0, [r7], -pc, asr #2
    6ec4:	23120000 	tstcs	r2, #0
    6ec8:	01000034 	tsteq	r0, r4, lsr r0
    6ecc:	005e0082 	subseq	r0, lr, r2, lsl #1
    6ed0:	00005808 	andeq	r5, r0, r8, lsl #16
    6ed4:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    6ed8:	13000006 	movwne	r0, #6
    6edc:	000037fb 	strdeq	r3, [r0], -fp
    6ee0:	008c8201 	addeq	r8, ip, r1, lsl #4
    6ee4:	91020000 	mrsls	r0, (UNDEF: 2)
    6ee8:	71120074 	tstvc	r2, r4, ror r0
    6eec:	01000037 	tsteq	r0, r7, lsr r0
    6ef0:	005e589d 			; <UNDEFINED> instruction: 0x005e589d
    6ef4:	00019408 	andeq	r9, r1, r8, lsl #8
    6ef8:	189c0100 	ldmne	ip, {r8}
    6efc:	13000007 	movwne	r0, #7
    6f00:	00003515 	andeq	r3, r0, r5, lsl r5
    6f04:	07189d01 	ldreq	r9, [r8, -r1, lsl #26]
    6f08:	91020000 	mrsls	r0, (UNDEF: 2)
    6f0c:	352b146c 	strcc	r1, [fp, #-1132]!	; 0x46c
    6f10:	9f010000 	svcls	0x00010000
    6f14:	0000008c 	andeq	r0, r0, ip, lsl #1
    6f18:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6f1c:	042f0411 	strteq	r0, [pc], #-1041	; 6f24 <_Min_Stack_Size+0x6b24>
    6f20:	f6150000 			; <UNDEFINED> instruction: 0xf6150000
    6f24:	01000033 	tsteq	r0, r3, lsr r0
    6f28:	5fec0101 	svcpl	0x00ec0101
    6f2c:	00da0800 	sbcseq	r0, sl, r0, lsl #16
    6f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f34:	00000744 	andeq	r0, r0, r4, asr #14
    6f38:	00351516 	eorseq	r1, r5, r6, lsl r5
    6f3c:	01010100 	mrseq	r0, (UNDEF: 17)
    6f40:	00000718 	andeq	r0, r0, r8, lsl r7
    6f44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6f48:	00363115 	eorseq	r3, r6, r5, lsl r1
    6f4c:	012e0100 	teqeq	lr, r0, lsl #2
    6f50:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    6f54:	00000054 	andeq	r0, r0, r4, asr r0
    6f58:	07799c01 	ldrbeq	r9, [r9, -r1, lsl #24]!
    6f5c:	fb160000 	blx	586f66 <_Min_Stack_Size+0x586b66>
    6f60:	01000037 	tsteq	r0, r7, lsr r0
    6f64:	008c012e 	addeq	r0, ip, lr, lsr #2
    6f68:	91020000 	mrsls	r0, (UNDEF: 2)
    6f6c:	06781674 			; <UNDEFINED> instruction: 0x06781674
    6f70:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6f74:	00010c01 	andeq	r0, r1, r1, lsl #24
    6f78:	73910200 	orrsvc	r0, r1, #0, 4
    6f7c:	38f21500 	ldmcc	r2!, {r8, sl, ip}^
    6f80:	77010000 	strvc	r0, [r1, -r0]
    6f84:	00611c01 	rsbeq	r1, r1, r1, lsl #24
    6f88:	00005c08 	andeq	r5, r0, r8, lsl #24
    6f8c:	9f9c0100 	svcls	0x009c0100
    6f90:	16000007 	strne	r0, [r0], -r7
    6f94:	000037fb 	strdeq	r3, [r0], -fp
    6f98:	8c017701 	stchi	7, cr7, [r1], {1}
    6f9c:	02000000 	andeq	r0, r0, #0
    6fa0:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    6fa4:	00003663 	andeq	r3, r0, r3, ror #12
    6fa8:	78019601 	stmdavc	r1, {r0, r9, sl, ip, pc}
    6fac:	cc080061 	stcgt	0, cr0, [r8], {97}	; 0x61
    6fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6fb4:	0007f29c 	muleq	r7, ip, r2
    6fb8:	38351600 	ldmdacc	r5!, {r9, sl, ip}
    6fbc:	96010000 	strls	r0, [r1], -r0
    6fc0:	0007f201 	andeq	pc, r7, r1, lsl #4
    6fc4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6fc8:	00359017 	eorseq	r9, r5, r7, lsl r0
    6fcc:	01980100 	orrseq	r0, r8, r0, lsl #2
    6fd0:	0000008c 	andeq	r0, r0, ip, lsl #1
    6fd4:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6fd8:	000036a1 	andeq	r3, r0, r1, lsr #13
    6fdc:	8c019801 	stchi	8, cr9, [r1], {1}
    6fe0:	02000000 	andeq	r0, r0, #0
    6fe4:	85177091 	ldrhi	r7, [r7, #-145]	; 0x91
    6fe8:	01000034 	tsteq	r0, r4, lsr r0
    6fec:	008c0198 	umulleq	r0, ip, r8, r1
    6ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    6ff4:	0411006c 	ldreq	r0, [r1], #-108	; 0x6c
    6ff8:	000004f9 	strdeq	r0, [r0], -r9
    6ffc:	0035fb15 	eorseq	pc, r5, r5, lsl fp	; <UNPREDICTABLE>
    7000:	01d70100 	bicseq	r0, r7, r0, lsl #2
    7004:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
    7008:	0000007c 	andeq	r0, r0, ip, ror r0
    700c:	081e9c01 	ldmdaeq	lr, {r0, sl, fp, ip, pc}
    7010:	35160000 	ldrcc	r0, [r6, #-0]
    7014:	01000038 	tsteq	r0, r8, lsr r0
    7018:	07f201d7 	ubfxeq	r0, r7, #3, #19
    701c:	91020000 	mrsls	r0, (UNDEF: 2)
    7020:	ee150074 	mrc	0, 0, r0, cr5, cr4, {3}
    7024:	0100003a 	tsteq	r0, sl, lsr r0
    7028:	62c001f4 	sbcvs	r0, r0, #244, 2	; 0x3d
    702c:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    7030:	9c010000 	stcls	0, cr0, [r1], {-0}
    7034:	00000853 	andeq	r0, r0, r3, asr r8
    7038:	0037fb16 	eorseq	pc, r7, r6, lsl fp	; <UNPREDICTABLE>
    703c:	01f40100 	mvnseq	r0, r0, lsl #2
    7040:	0000008c 	andeq	r0, r0, ip, lsl #1
    7044:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    7048:	00000678 	andeq	r0, r0, r8, ror r6
    704c:	0c01f401 	cfstrseq	mvf15, [r1], {1}
    7050:	02000001 	andeq	r0, r0, #1
    7054:	15007391 	strne	r7, [r0, #-913]	; 0x391
    7058:	00003913 	andeq	r3, r0, r3, lsl r9
    705c:	2c021c01 	stccs	12, cr1, [r2], {1}
    7060:	6c080063 	stcvs	0, cr0, [r8], {99}	; 0x63
    7064:	01000000 	mrseq	r0, (UNDEF: 0)
    7068:	0008889c 	muleq	r8, ip, r8
    706c:	37fb1600 	ldrbcc	r1, [fp, r0, lsl #12]!
    7070:	1c010000 	stcne	0, cr0, [r1], {-0}
    7074:	00008c02 	andeq	r8, r0, r2, lsl #24
    7078:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    707c:	00067816 	andeq	r7, r6, r6, lsl r8
    7080:	021c0100 	andseq	r0, ip, #0, 2
    7084:	0000010c 	andeq	r0, r0, ip, lsl #2
    7088:	00739102 	rsbseq	r9, r3, r2, lsl #2
    708c:	00397818 	eorseq	r7, r9, r8, lsl r8
    7090:	02430100 	subeq	r0, r3, #0, 2
    7094:	0000008c 	andeq	r0, r0, ip, lsl #1
    7098:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
    709c:	00000038 	andeq	r0, r0, r8, lsr r0
    70a0:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    70a4:	fb160000 	blx	5870ae <_Min_Stack_Size+0x586cae>
    70a8:	01000037 	tsteq	r0, r7, lsr r0
    70ac:	008c0243 	addeq	r0, ip, r3, asr #4
    70b0:	91020000 	mrsls	r0, (UNDEF: 2)
    70b4:	32d3176c 	sbcscc	r1, r3, #108, 14	; 0x1b00000
    70b8:	45010000 	strmi	r0, [r1, #-0]
    70bc:	00008c02 	andeq	r8, r0, r2, lsl #24
    70c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    70c4:	340c1900 	strcc	r1, [ip], #-2304	; 0x900
    70c8:	83010000 	movwhi	r0, #4096	; 0x1000
    70cc:	0063d002 	rsbeq	sp, r3, r2
    70d0:	00003408 	andeq	r3, r0, r8, lsl #8
    70d4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    70d8:	000034b6 			; <UNDEFINED> instruction: 0x000034b6
    70dc:	04029401 	streq	r9, [r2], #-1025	; 0x401
    70e0:	ac080064 	stcge	0, cr0, [r8], {100}	; 0x64
    70e4:	01000000 	mrseq	r0, (UNDEF: 0)
    70e8:	0008f99c 	muleq	r8, ip, r9
    70ec:	39ae1600 	stmibcc	lr!, {r9, sl, ip}
    70f0:	94010000 	strls	r0, [r1], #-0
    70f4:	0008f902 	andeq	pc, r8, r2, lsl #18
    70f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    70fc:	55041100 	strpl	r1, [r4, #-256]	; 0x100
    7100:	15000005 	strne	r0, [r0, #-5]
    7104:	000037e6 	andeq	r3, r0, r6, ror #15
    7108:	b002c801 	andlt	ip, r2, r1, lsl #16
    710c:	84080064 	strhi	r0, [r8], #-100	; 0x64
    7110:	01000000 	mrseq	r0, (UNDEF: 0)
    7114:	0009259c 	muleq	r9, ip, r5
    7118:	39ae1600 	stmibcc	lr!, {r9, sl, ip}
    711c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    7120:	0008f902 	andeq	pc, r8, r2, lsl #18
    7124:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7128:	38481500 	stmdacc	r8, {r8, sl, ip}^
    712c:	e2010000 	and	r0, r1, #0
    7130:	00653402 	rsbeq	r3, r5, r2, lsl #8
    7134:	00003c08 	andeq	r3, r0, r8, lsl #24
    7138:	4b9c0100 	blmi	fe707540 <_estack+0xde6d7540>
    713c:	16000009 	strne	r0, [r0], -r9
    7140:	00000678 	andeq	r0, r0, r8, ror r6
    7144:	0c02e201 	sfmeq	f6, 1, [r2], {1}
    7148:	02000001 	andeq	r0, r0, #1
    714c:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    7150:	00003640 	andeq	r3, r0, r0, asr #12
    7154:	70032a01 	andvc	r2, r3, r1, lsl #20
    7158:	44080065 	strmi	r0, [r8], #-101	; 0x65
    715c:	01000000 	mrseq	r0, (UNDEF: 0)
    7160:	0009719c 	muleq	r9, ip, r1
    7164:	37fb1600 	ldrbcc	r1, [fp, r0, lsl #12]!
    7168:	2a010000 	bcs	47170 <_Min_Stack_Size+0x46d70>
    716c:	00008c03 	andeq	r8, r0, r3, lsl #24
    7170:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7174:	32b61500 	adcscc	r1, r6, #0, 10
    7178:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    717c:	0065b403 	rsbeq	fp, r5, r3, lsl #8
    7180:	00015c08 	andeq	r5, r1, r8, lsl #24
    7184:	d39c0100 	orrsle	r0, ip, #0, 2
    7188:	16000009 	strne	r0, [r0], -r9
    718c:	00003386 	andeq	r3, r0, r6, lsl #7
    7190:	d3033e01 	movwle	r3, #15873	; 0x3e01
    7194:	02000009 	andeq	r0, r0, #9
    7198:	18176491 	ldmdane	r7, {r0, r4, r7, sl, sp, lr}
    719c:	01000037 	tsteq	r0, r7, lsr r0
    71a0:	008c0341 	addeq	r0, ip, r1, asr #6
    71a4:	91020000 	mrsls	r0, (UNDEF: 2)
    71a8:	371e1774 			; <UNDEFINED> instruction: 0x371e1774
    71ac:	42010000 	andmi	r0, r1, #0
    71b0:	00008c03 	andeq	r8, r0, r3, lsl #24
    71b4:	70910200 	addsvc	r0, r1, r0, lsl #4
    71b8:	00372417 	eorseq	r2, r7, r7, lsl r4
    71bc:	03430100 	movteq	r0, #12544	; 0x3100
    71c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    71c4:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    71c8:	00003a54 	andeq	r3, r0, r4, asr sl
    71cc:	8c034401 	cfstrshi	mvf4, [r3], {1}
    71d0:	02000000 	andeq	r0, r0, #0
    71d4:	11006891 			; <UNDEFINED> instruction: 0x11006891
    71d8:	0006b604 	andeq	fp, r6, r4, lsl #12
    71dc:	3a5a1500 	bcc	168c5e4 <_Min_Stack_Size+0x168c1e4>
    71e0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    71e4:	00671003 	rsbeq	r1, r7, r3
    71e8:	00008808 	andeq	r8, r0, r8, lsl #16
    71ec:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    71f0:	16000009 	strne	r0, [r0], -r9
    71f4:	00003386 	andeq	r3, r0, r6, lsl #7
    71f8:	d3039801 	movwle	r9, #14337	; 0x3801
    71fc:	02000009 	andeq	r0, r0, #9
    7200:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    7204:	0000348d 	andeq	r3, r0, sp, lsl #9
    7208:	9803b601 	stmdals	r3, {r0, r9, sl, ip, sp, pc}
    720c:	40080067 	andmi	r0, r8, r7, rrx
    7210:	01000000 	mrseq	r0, (UNDEF: 0)
    7214:	000a349c 	muleq	sl, ip, r4
    7218:	372a1600 	strcc	r1, [sl, -r0, lsl #12]!
    721c:	b6010000 	strlt	r0, [r1], -r0
    7220:	000a3403 	andeq	r3, sl, r3, lsl #8
    7224:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7228:	00352b17 	eorseq	r2, r5, r7, lsl fp
    722c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    7230:	0000008c 	andeq	r0, r0, ip, lsl #1
    7234:	00749102 	rsbseq	r9, r4, r2, lsl #2
    7238:	060b0411 			; <UNDEFINED> instruction: 0x060b0411
    723c:	de180000 	cdple	0, 1, cr0, cr8, cr0, {0}
    7240:	01000033 	tsteq	r0, r3, lsr r0
    7244:	008c03d0 	ldrdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7248:	67d80000 	ldrbvs	r0, [r8, r0]
    724c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    7250:	9c010000 	stcls	0, cr0, [r1], {-0}
    7254:	00000a73 	andeq	r0, r0, r3, ror sl
    7258:	003afa16 	eorseq	pc, sl, r6, lsl sl	; <UNPREDICTABLE>
    725c:	03d00100 	bicseq	r0, r0, #0, 2
    7260:	0000008c 	andeq	r0, r0, ip, lsl #1
    7264:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    7268:	00000375 	andeq	r0, r0, r5, ror r3
    726c:	8c03d201 	sfmhi	f5, 1, [r3], {1}
    7270:	02000000 	andeq	r0, r0, #0
    7274:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    7278:	000035aa 	andeq	r3, r0, sl, lsr #11
    727c:	1403ea01 	strne	lr, [r3], #-2561	; 0xa01
    7280:	24080068 	strcs	r0, [r8], #-104	; 0x68
    7284:	01000000 	mrseq	r0, (UNDEF: 0)
    7288:	000a999c 	muleq	sl, ip, r9
    728c:	3a4a1600 	bcc	128ca94 <_Min_Stack_Size+0x128c694>
    7290:	ea010000 	b	47298 <_Min_Stack_Size+0x46e98>
    7294:	00008c03 	andeq	r8, r0, r3, lsl #24
    7298:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    729c:	35e11500 	strbcc	r1, [r1, #1280]!	; 0x500
    72a0:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    72a4:	00683803 	rsbeq	r3, r8, r3, lsl #16
    72a8:	00002408 	andeq	r2, r0, r8, lsl #8
    72ac:	bf9c0100 	svclt	0x009c0100
    72b0:	1600000a 	strne	r0, [r0], -sl
    72b4:	000036cc 	andeq	r3, r0, ip, asr #13
    72b8:	8c03f801 	stchi	8, cr15, [r3], {1}
    72bc:	02000000 	andeq	r0, r0, #0
    72c0:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    72c4:	000034e4 	andeq	r3, r0, r4, ror #9
    72c8:	5c040801 	stcpl	8, cr0, [r4], {1}
    72cc:	4c080068 	stcmi	0, cr0, [r8], {104}	; 0x68
    72d0:	01000000 	mrseq	r0, (UNDEF: 0)
    72d4:	000af49c 	muleq	sl, ip, r4
    72d8:	3afa1600 	bcc	ffe8cae0 <_estack+0xdfe5cae0>
    72dc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    72e0:	00008c04 	andeq	r8, r0, r4, lsl #24
    72e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    72e8:	00067816 	andeq	r7, r6, r6, lsl r8
    72ec:	04080100 	streq	r0, [r8], #-256	; 0x100
    72f0:	0000010c 	andeq	r0, r0, ip, lsl #2
    72f4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    72f8:	0039a115 	eorseq	sl, r9, r5, lsl r1
    72fc:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7300:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    7304:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7308:	0b389c01 	bleq	e2e314 <_Min_Stack_Size+0xe2df14>
    730c:	fb160000 	blx	587316 <_Min_Stack_Size+0x586f16>
    7310:	01000037 	tsteq	r0, r7, lsr r0
    7314:	008c043c 	addeq	r0, ip, ip, lsr r4
    7318:	91020000 	mrsls	r0, (UNDEF: 2)
    731c:	3a821674 	bcc	fe08ccf4 <_estack+0xde05ccf4>
    7320:	3c010000 	stccc	0, cr0, [r1], {-0}
    7324:	00008c04 	andeq	r8, r0, r4, lsl #24
    7328:	70910200 	addsvc	r0, r1, r0, lsl #4
    732c:	00067816 	andeq	r7, r6, r6, lsl r8
    7330:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7334:	0000010c 	andeq	r0, r0, ip, lsl #2
    7338:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    733c:	00386f18 	eorseq	r6, r8, r8, lsl pc
    7340:	04890100 	streq	r0, [r9], #256	; 0x100
    7344:	000000de 	ldrdeq	r0, [r0], -lr
    7348:	08006978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp, lr}
    734c:	0000007c 	andeq	r0, r0, ip, ror r0
    7350:	0b8f9c01 	bleq	fe3ee35c <_estack+0xde3be35c>
    7354:	fb160000 	blx	58735e <_Min_Stack_Size+0x586f5e>
    7358:	01000037 	tsteq	r0, r7, lsr r0
    735c:	008c0489 	addeq	r0, ip, r9, lsl #9
    7360:	91020000 	mrsls	r0, (UNDEF: 2)
    7364:	3ae5166c 	bcc	ff94cd1c <_estack+0xdf91cd1c>
    7368:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    736c:	00008c04 	andeq	r8, r0, r4, lsl #24
    7370:	68910200 	ldmvs	r1, {r9}
    7374:	00096317 	andeq	r6, r9, r7, lsl r3
    7378:	048b0100 	streq	r0, [fp], #256	; 0x100
    737c:	000000de 	ldrdeq	r0, [r0], -lr
    7380:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
    7384:	00003972 	andeq	r3, r0, r2, ror r9
    7388:	8c048c01 	stchi	12, cr8, [r4], {1}
    738c:	02000000 	andeq	r0, r0, #0
    7390:	15007091 	strne	r7, [r0, #-145]	; 0x91
    7394:	0000328f 	andeq	r3, r0, pc, lsl #5
    7398:	f404c101 	vst4.8	{d12,d14,d16,d18}, [r4], r1
    739c:	78080069 	stmdavc	r8, {r0, r3, r5, r6}
    73a0:	01000000 	mrseq	r0, (UNDEF: 0)
    73a4:	000bc49c 	muleq	fp, ip, r4
    73a8:	37fb1600 	ldrbcc	r1, [fp, r0, lsl #12]!
    73ac:	c1010000 	mrsgt	r0, (UNDEF: 1)
    73b0:	00008c04 	andeq	r8, r0, r4, lsl #24
    73b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    73b8:	003ae516 	eorseq	lr, sl, r6, lsl r5
    73bc:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    73c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    73c4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    73c8:	00370818 	eorseq	r0, r7, r8, lsl r8
    73cc:	04ec0100 	strbteq	r0, [ip], #256	; 0x100
    73d0:	000000ea 	andeq	r0, r0, sl, ror #1
    73d4:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
    73d8:	000000b4 	strheq	r0, [r0], -r4
    73dc:	0c489c01 	mcrreq	12, 0, r9, r8, cr1
    73e0:	fb160000 	blx	5873ea <_Min_Stack_Size+0x586fea>
    73e4:	01000037 	tsteq	r0, r7, lsr r0
    73e8:	008c04ec 	addeq	r0, ip, ip, ror #9
    73ec:	91020000 	mrsls	r0, (UNDEF: 2)
    73f0:	3a82165c 	bcc	fe08cd68 <_estack+0xde05cd68>
    73f4:	ec010000 	stc	0, cr0, [r1], {-0}
    73f8:	00008c04 	andeq	r8, r0, r4, lsl #24
    73fc:	58910200 	ldmpl	r1, {r9}
    7400:	00096317 	andeq	r6, r9, r7, lsl r3
    7404:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    7408:	000000ea 	andeq	r0, r0, sl, ror #1
    740c:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
    7410:	00003972 	andeq	r3, r0, r2, ror r9
    7414:	8c04ef01 	stchi	15, cr14, [r4], {1}
    7418:	02000000 	andeq	r0, r0, #0
    741c:	56177091 			; <UNDEFINED> instruction: 0x56177091
    7420:	01000038 	tsteq	r0, r8, lsr r0
    7424:	008c04f0 	strdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7428:	91020000 	mrsls	r0, (UNDEF: 2)
    742c:	0964176c 	stmdbeq	r4!, {r2, r3, r5, r6, r8, r9, sl, ip}^
    7430:	f1010000 	setend	le
    7434:	00008c04 	andeq	r8, r0, r4, lsl #24
    7438:	68910200 	ldmvs	r1, {r9}
    743c:	003aae17 	eorseq	sl, sl, r7, lsl lr
    7440:	04f20100 	ldrbteq	r0, [r2], #256	; 0x100
    7444:	0000008c 	andeq	r0, r0, ip, lsl #1
    7448:	00649102 	rsbeq	r9, r4, r2, lsl #2
    744c:	0038dc15 	eorseq	sp, r8, r5, lsl ip
    7450:	05340100 	ldreq	r0, [r4, #-256]!	; 0x100
    7454:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
    7458:	0000007c 	andeq	r0, r0, ip, ror r0
    745c:	0c7d9c01 	ldcleq	12, cr9, [sp], #-4
    7460:	fb160000 	blx	58746a <_Min_Stack_Size+0x58706a>
    7464:	01000037 	tsteq	r0, r7, lsr r0
    7468:	008c0534 	addeq	r0, ip, r4, lsr r5
    746c:	91020000 	mrsls	r0, (UNDEF: 2)
    7470:	3a821674 	bcc	fe08ce48 <_estack+0xde05ce48>
    7474:	34010000 	strcc	r0, [r1], #-0
    7478:	00008c05 	andeq	r8, r0, r5, lsl #24
    747c:	70910200 	addsvc	r0, r1, r0, lsl #4
    7480:	015e1a00 	cmpeq	lr, r0, lsl #20
    7484:	a7060000 	strge	r0, [r6, -r0]
    7488:	0000c306 	andeq	ip, r0, r6, lsl #6
    748c:	027f0000 	rsbseq	r0, pc, #0
    7490:	00040000 	andeq	r0, r4, r0
    7494:	00001552 	andeq	r1, r0, r2, asr r5
    7498:	00210104 	eoreq	r0, r1, r4, lsl #2
    749c:	92010000 	andls	r0, r1, #0
    74a0:	1400003b 	strne	r0, [r0], #-59	; 0x3b
    74a4:	68000001 	stmdavs	r0, {r0}
    74a8:	00000009 	andeq	r0, r0, r9
    74ac:	11000000 	mrsne	r0, (UNDEF: 0)
    74b0:	02000033 	andeq	r0, r0, #51	; 0x33
    74b4:	014d0601 	cmpeq	sp, r1, lsl #12
    74b8:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    74bc:	02000002 	andeq	r0, r0, #2
    74c0:	0000371d 	andeq	r3, r0, sp, lsl r7
    74c4:	08010200 	stmdaeq	r1, {r9}
    74c8:	0000014b 	andeq	r0, r0, fp, asr #2
    74cc:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    74d0:	02000001 	andeq	r0, r0, #1
    74d4:	000e0702 	andeq	r0, lr, r2, lsl #14
    74d8:	77030000 	strvc	r0, [r3, -r0]
    74dc:	02000001 	andeq	r0, r0, #1
    74e0:	0000573f 	andeq	r5, r0, pc, lsr r7
    74e4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    74e8:	00000005 	andeq	r0, r0, r5
    74ec:	0005b403 	andeq	fp, r5, r3, lsl #8
    74f0:	69410200 	stmdbvs	r1, {r9}^
    74f4:	02000000 	andeq	r0, r0, #0
    74f8:	012e0704 	teqeq	lr, r4, lsl #14
    74fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7500:	00000005 	andeq	r0, r0, r5
    7504:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7508:	00000129 	andeq	r0, r0, r9, lsr #2
    750c:	69050404 	stmdbvs	r5, {r2, sl}
    7510:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7514:	01330704 	teqeq	r3, r4, lsl #14
    7518:	70030000 	andvc	r0, r3, r0
    751c:	03000002 	movweq	r0, #2
    7520:	00002c2a 	andeq	r2, r0, sl, lsr #24
    7524:	01790300 	cmneq	r9, r0, lsl #6
    7528:	41030000 	mrsmi	r0, (UNDEF: 3)
    752c:	0000004c 	andeq	r0, r0, ip, asr #32
    7530:	0005b603 	andeq	fp, r5, r3, lsl #12
    7534:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    7538:	02000000 	andeq	r0, r0, #0
    753c:	01910704 	orrseq	r0, r1, r4, lsl #14
    7540:	a2050000 	andge	r0, r5, #0
    7544:	05000000 	streq	r0, [r0, #-0]
    7548:	00000097 	muleq	r0, r7, r0
    754c:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    7550:	0000d401 	andeq	sp, r0, r1, lsl #8
    7554:	087e0700 	ldmdaeq	lr!, {r8, r9, sl}^
    7558:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    755c:	00544553 	subseq	r4, r4, r3, asr r5
    7560:	88090001 	stmdahi	r9, {r0}
    7564:	0400001e 	streq	r0, [r0], #-30
    7568:	00be01f7 	ldrshteq	r0, [lr], r7
    756c:	d6090000 	strle	r0, [r9], -r0
    7570:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    7574:	00be01f7 	ldrshteq	r0, [lr], r7
    7578:	01060000 	mrseq	r0, (UNDEF: 6)
    757c:	0201f904 	andeq	pc, r1, #4, 18	; 0x10000
    7580:	07000001 	streq	r0, [r0, -r1]
    7584:	00000686 	andeq	r0, r0, r6, lsl #13
    7588:	07de0700 	ldrbeq	r0, [lr, r0, lsl #14]
    758c:	00010000 	andeq	r0, r1, r0
    7590:	0007af09 	andeq	sl, r7, r9, lsl #30
    7594:	01f90400 	mvnseq	r0, r0, lsl #8
    7598:	000000ec 	andeq	r0, r0, ip, ror #1
    759c:	8c040c0a 	stchi	12, cr0, [r4], {10}
    75a0:	00013c05 	andeq	r3, r1, r5, lsl #24
    75a4:	52430b00 	subpl	r0, r3, #0, 22
    75a8:	058e0400 	streq	r0, [lr, #1024]	; 0x400
    75ac:	000000b4 	strheq	r0, [r0], -r4
    75b0:	52530b00 	subspl	r0, r3, #0, 22
    75b4:	058f0400 	streq	r0, [pc, #1024]	; 79bc <_Min_Stack_Size+0x75bc>
    75b8:	000000b4 	strheq	r0, [r0], -r4
    75bc:	52440b04 	subpl	r0, r4, #4, 22	; 0x1000
    75c0:	05900400 	ldreq	r0, [r0, #1024]	; 0x400
    75c4:	000000b4 	strheq	r0, [r0], -r4
    75c8:	7d090008 	stcvc	0, cr0, [r9, #-32]	; 0xffffffe0
    75cc:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    75d0:	010e0591 			; <UNDEFINED> instruction: 0x010e0591
    75d4:	720c0000 	andvc	r0, ip, #0
    75d8:	0100003b 	tsteq	r0, fp, lsr r0
    75dc:	006b9c63 	rsbeq	r9, fp, r3, ror #24
    75e0:	00001608 	andeq	r1, r0, r8, lsl #12
    75e4:	0d9c0100 	ldfeqs	f0, [ip]
    75e8:	00003b4f 	andeq	r3, r0, pc, asr #22
    75ec:	6bb47201 	blvs	fed23df8 <_estack+0xdecf3df8>
    75f0:	00380800 	eorseq	r0, r8, r0, lsl #16
    75f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    75f8:	0000017d 	andeq	r0, r0, sp, ror r1
    75fc:	0006780e 	andeq	r7, r6, lr, lsl #16
    7600:	02720100 	rsbseq	r0, r2, #0, 2
    7604:	02000001 	andeq	r0, r0, #1
    7608:	0f007791 	svceq	0x00007791
    760c:	00003b5e 	andeq	r3, r0, lr, asr fp
    7610:	00a2b001 	adceq	fp, r2, r1
    7614:	6bec0000 	blvs	ffb0761c <_estack+0xdfad761c>
    7618:	00180800 	andseq	r0, r8, r0, lsl #16
    761c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7620:	003b4210 	eorseq	r4, fp, r0, lsl r2
    7624:	010b0100 	mrseq	r0, (UNDEF: 27)
    7628:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
    762c:	00000038 	andeq	r0, r0, r8, lsr r0
    7630:	01b89c01 			; <UNDEFINED> instruction: 0x01b89c01
    7634:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    7638:	01000006 	tsteq	r0, r6
    763c:	0102010b 	tsteq	r2, fp, lsl #2
    7640:	91020000 	mrsls	r0, (UNDEF: 2)
    7644:	16120077 			; <UNDEFINED> instruction: 0x16120077
    7648:	0100003c 	tsteq	r0, ip, lsr r0
    764c:	00d40125 	sbcseq	r0, r4, r5, lsr #2
    7650:	6c3c0000 	ldcvs	0, cr0, [ip], #-0
    7654:	00380800 	eorseq	r0, r8, r0, lsl #16
    7658:	9c010000 	stcls	0, cr0, [r1], {-0}
    765c:	000001f1 	strdeq	r0, [r0], -r1
    7660:	003b8911 	eorseq	r8, fp, r1, lsl r9
    7664:	01250100 	teqeq	r5, r0, lsl #2
    7668:	0000008c 	andeq	r0, r0, ip, lsl #1
    766c:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    7670:	00000963 	andeq	r0, r0, r3, ror #18
    7674:	d4012701 	strle	r2, [r1], #-1793	; 0x701
    7678:	02000000 	andeq	r0, r0, #0
    767c:	10007791 	mulne	r0, r1, r7
    7680:	00003be2 	andeq	r3, r0, r2, ror #23
    7684:	74014601 	strvc	r4, [r1], #-1537	; 0x601
    7688:	2408006c 	strcs	r0, [r8], #-108	; 0x6c
    768c:	01000000 	mrseq	r0, (UNDEF: 0)
    7690:	0002179c 	muleq	r2, ip, r7
    7694:	3b891100 	blcc	fe24ba9c <_estack+0xde21ba9c>
    7698:	46010000 	strmi	r0, [r1], -r0
    769c:	00008c01 	andeq	r8, r0, r1, lsl #24
    76a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    76a4:	3bf01200 	blcc	ffc0beac <_estack+0xdfbdbeac>
    76a8:	56010000 	strpl	r0, [r1], -r0
    76ac:	0000e001 	andeq	lr, r0, r1
    76b0:	006c9800 	rsbeq	r9, ip, r0, lsl #16
    76b4:	00003808 	andeq	r3, r0, r8, lsl #16
    76b8:	509c0100 	addspl	r0, ip, r0, lsl #2
    76bc:	11000002 	tstne	r0, r2
    76c0:	00003b57 	andeq	r3, r0, r7, asr fp
    76c4:	8c015601 	stchi	6, cr5, [r1], {1}
    76c8:	02000000 	andeq	r0, r0, #0
    76cc:	63136f91 	tstvs	r3, #580	; 0x244
    76d0:	01000009 	tsteq	r0, r9
    76d4:	00e00158 	rsceq	r0, r0, r8, asr r1
    76d8:	91020000 	mrsls	r0, (UNDEF: 2)
    76dc:	00100077 	andseq	r0, r0, r7, ror r0
    76e0:	0100003c 	tsteq	r0, ip, lsr r0
    76e4:	6cd00174 	ldfvse	f0, [r0], {116}	; 0x74
    76e8:	00240800 	eoreq	r0, r4, r0, lsl #16
    76ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    76f0:	00000276 	andeq	r0, r0, r6, ror r2
    76f4:	003b5711 	eorseq	r5, fp, r1, lsl r7
    76f8:	01740100 	cmneq	r4, r0, lsl #2
    76fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    7700:	00779102 	rsbseq	r9, r7, r2, lsl #2
    7704:	00015e14 	andeq	r5, r1, r4, lsl lr
    7708:	06a70500 	strteq	r0, [r7], r0, lsl #10
    770c:	000000b9 	strheq	r0, [r0], -r9
    7710:	000b8f00 	andeq	r8, fp, r0, lsl #30
    7714:	98000400 	stmdals	r0, {sl}
    7718:	04000016 	streq	r0, [r0], #-22
    771c:	00002101 	andeq	r2, r0, r1, lsl #2
    7720:	41a80100 			; <UNDEFINED> instruction: 0x41a80100
    7724:	01140000 	tsteq	r4, r0
    7728:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    772c:	00000000 	andeq	r0, r0, r0
    7730:	34fd0000 	ldrbtcc	r0, [sp], #0
    7734:	c2020000 	andgt	r0, r2, #0
    7738:	01000042 	tsteq	r0, r2, asr #32
    773c:	029fab04 	addseq	sl, pc, #4, 22	; 0x1000
    7740:	13030000 	movwne	r0, #12288	; 0x3000
    7744:	7200003f 	andvc	r0, r0, #63	; 0x3f
    7748:	003f4203 	eorseq	r4, pc, r3, lsl #4
    774c:	a6037400 	strge	r7, [r3], -r0, lsl #8
    7750:	7500003f 	strvc	r0, [r0, #-63]	; 0x3f
    7754:	003e1603 	eorseq	r1, lr, r3, lsl #12
    7758:	00037600 	andeq	r7, r3, r0, lsl #12
    775c:	7b000040 	blvc	7864 <_Min_Stack_Size+0x7464>
    7760:	00425903 	subeq	r5, r2, r3, lsl #18
    7764:	6e037c00 	cdpvs	12, 0, cr7, cr3, cr0, {0}
    7768:	7e000043 	cdpvc	0, 0, cr0, cr0, cr3, {2}
    776c:	003d7f03 	eorseq	r7, sp, r3, lsl #30
    7770:	27037f00 	strcs	r7, [r3, -r0, lsl #30]
    7774:	0000003f 	andeq	r0, r0, pc, lsr r0
    7778:	00422103 	subeq	r2, r2, r3, lsl #2
    777c:	58030100 	stmdapl	r3, {r8}
    7780:	0200003f 	andeq	r0, r0, #63	; 0x3f
    7784:	003c3803 	eorseq	r3, ip, r3, lsl #16
    7788:	c7030300 	strgt	r0, [r3, -r0, lsl #6]
    778c:	0400003c 	streq	r0, [r0], #-60	; 0x3c
    7790:	00429903 	subeq	r9, r2, r3, lsl #18
    7794:	2a030500 	bcs	c8b9c <_Min_Stack_Size+0xc879c>
    7798:	06000042 	streq	r0, [r0], -r2, asr #32
    779c:	003eb303 	eorseq	fp, lr, r3, lsl #6
    77a0:	46030700 	strmi	r0, [r3], -r0, lsl #14
    77a4:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    77a8:	00436303 	subeq	r6, r3, r3, lsl #6
    77ac:	6a030900 	bvs	c9bb4 <_Min_Stack_Size+0xc97b4>
    77b0:	0a000040 	beq	78b8 <_Min_Stack_Size+0x74b8>
    77b4:	00411a03 	subeq	r1, r1, r3, lsl #20
    77b8:	b9030b00 	stmdblt	r3, {r8, r9, fp}
    77bc:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
    77c0:	003db003 	eorseq	fp, sp, r3
    77c4:	a2030d00 	andge	r0, r3, #0, 26
    77c8:	0e000042 	cdpeq	0, 0, cr0, cr0, cr2, {2}
    77cc:	00423503 	subeq	r3, r2, r3, lsl #10
    77d0:	cb030f00 	blgt	cb3d8 <_Min_Stack_Size+0xcafd8>
    77d4:	1000003e 	andne	r0, r0, lr, lsr r0
    77d8:	003c5103 	eorseq	r5, ip, r3, lsl #2
    77dc:	0c031100 	stfeqs	f1, [r3], {-0}
    77e0:	12000042 	andne	r0, r0, #66	; 0x42
    77e4:	003ebe03 	eorseq	fp, lr, r3, lsl #28
    77e8:	30031300 	andcc	r1, r3, r0, lsl #6
    77ec:	1400003e 	strne	r0, [r0], #-62	; 0x3e
    77f0:	00431003 	subeq	r1, r3, r3
    77f4:	68031500 	stmdavs	r3, {r8, sl, ip}
    77f8:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    77fc:	00433f03 	subeq	r3, r3, r3, lsl #30
    7800:	bf031700 	svclt	0x00031700
    7804:	1800003f 	stmdane	r0, {r0, r1, r2, r3, r4, r5}
    7808:	0042b403 	subeq	fp, r2, r3, lsl #8
    780c:	5d031900 	stcpl	9, cr1, [r3, #-0]
    7810:	1a00003d 	bne	790c <_Min_Stack_Size+0x750c>
    7814:	003e9803 	eorseq	r9, lr, r3, lsl #16
    7818:	e7031b00 	str	r1, [r3, -r0, lsl #22]
    781c:	1c00003c 	stcne	0, cr0, [r0], {60}	; 0x3c
    7820:	00418703 	subeq	r8, r1, r3, lsl #14
    7824:	52031d00 	andpl	r1, r3, #0, 26
    7828:	1e00003e 	mcrne	0, 0, r0, cr0, cr14, {1}
    782c:	003e8303 	eorseq	r8, lr, r3, lsl #6
    7830:	de031f00 	cdple	15, 0, cr1, cr3, cr0, {0}
    7834:	2000003d 	andcs	r0, r0, sp, lsr r0
    7838:	00408e03 	subeq	r8, r0, r3, lsl #28
    783c:	99032100 	stmdbls	r3, {r8, sp}
    7840:	2200003f 	andcs	r0, r0, #63	; 0x3f
    7844:	003ff603 	eorseq	pc, pc, r3, lsl #12
    7848:	1e032300 	cdpne	3, 0, cr2, cr3, cr0, {0}
    784c:	2400003d 	strcs	r0, [r0], #-61	; 0x3d
    7850:	00419103 	subeq	r9, r1, r3, lsl #2
    7854:	5c032500 	cfstr32pl	mvfx2, [r3], {-0}
    7858:	2600003e 			; <UNDEFINED> instruction: 0x2600003e
    785c:	003d8c03 	eorseq	r8, sp, r3, lsl #24
    7860:	78032700 	stmdavc	r3, {r8, r9, sl, sp}
    7864:	28000041 	stmdacs	r0, {r0, r6}
    7868:	00413f03 	subeq	r3, r1, r3, lsl #30
    786c:	48032900 	stmdami	r3, {r8, fp, sp}
    7870:	2a000040 	bcs	7978 <_Min_Stack_Size+0x7578>
    7874:	003d2803 	eorseq	r2, sp, r3, lsl #16
    7878:	63032b00 	movwvs	r2, #15104	; 0x3b00
    787c:	2c00003c 	stccs	0, cr0, [r0], {60}	; 0x3c
    7880:	003edd03 	eorseq	sp, lr, r3, lsl #26
    7884:	4c032d00 	stcmi	13, cr2, [r3], {-0}
    7888:	2e000043 	cdpcs	0, 0, cr0, cr0, cr3, {2}
    788c:	00438d03 	subeq	r8, r3, r3, lsl #26
    7890:	58032f00 	stmdapl	r3, {r8, r9, sl, fp, sp}
    7894:	30000041 	andcc	r0, r0, r1, asr #32
    7898:	00435903 	subeq	r5, r3, r3, lsl #18
    789c:	0c033100 	stfeqs	f3, [r3], {-0}
    78a0:	3200003e 	andcc	r0, r0, #62	; 0x3e
    78a4:	003cbd03 	eorseq	fp, ip, r3, lsl #26
    78a8:	3d033300 	stccc	3, cr3, [r3, #-0]
    78ac:	34000040 	strcc	r0, [r0], #-64	; 0x40
    78b0:	003fb403 	eorseq	fp, pc, r3, lsl #8
    78b4:	75033500 	strvc	r3, [r3, #-1280]	; 0x500
    78b8:	36000040 	strcc	r0, [r0], -r0, asr #32
    78bc:	003fd203 	eorseq	sp, pc, r3, lsl #4
    78c0:	76033700 	strvc	r3, [r3], -r0, lsl #14
    78c4:	3800003f 	stmdacc	r0, {r0, r1, r2, r3, r4, r5}
    78c8:	003cab03 	eorseq	sl, ip, r3, lsl #22
    78cc:	9f033900 	svcls	0x00033900
    78d0:	3a000043 	bcc	79e4 <_Min_Stack_Size+0x75e4>
    78d4:	0040d503 	subeq	sp, r0, r3, lsl #10
    78d8:	c2033b00 	andgt	r3, r3, #0, 22
    78dc:	3c00003d 	stccc	0, cr0, [r0], {61}	; 0x3d
    78e0:	00428403 	subeq	r8, r2, r3, lsl #8
    78e4:	dc033d00 	stcle	13, cr3, [r3], {-0}
    78e8:	3e00003f 	mcrcc	0, 0, r0, cr0, cr15, {1}
    78ec:	0040e703 	subeq	lr, r0, r3, lsl #14
    78f0:	04033f00 	streq	r3, [r3], #-3840	; 0xf00
    78f4:	c000003d 	andgt	r0, r0, sp, lsr r0
    78f8:	41fe0300 	mvnsmi	r0, r0, lsl #6
    78fc:	00c10000 	sbceq	r0, r1, r0
    7900:	003deb03 	eorseq	lr, sp, r3, lsl #22
    7904:	0300c200 	movweq	ip, #512	; 0x200
    7908:	00003f07 	andeq	r3, r0, r7, lsl #30
    790c:	4b0300c3 	blmi	c7c20 <_Min_Stack_Size+0xc7820>
    7910:	c400003d 	strgt	r0, [r0], #-61	; 0x3d
    7914:	42470300 	submi	r0, r7, #0, 6
    7918:	00c50000 	sbceq	r0, r5, r0
    791c:	003ef503 	eorseq	pc, lr, r3, lsl #10
    7920:	0300c600 	movweq	ip, #1536	; 0x600
    7924:	00003d12 	andeq	r3, r0, r2, lsl sp
    7928:	770300c7 	strvc	r0, [r3, -r7, asr #1]
    792c:	c8000042 	stmdagt	r0, {r1, r6}
    7930:	41610300 	cmnmi	r1, r0, lsl #6
    7934:	00c90000 	sbceq	r0, r9, r0
    7938:	0042fc03 	subeq	pc, r2, r3, lsl #24
    793c:	0300ca00 	movweq	ip, #2560	; 0xa00
    7940:	0000437a 	andeq	r4, r0, sl, ror r3
    7944:	310300cb 	smlabtcc	r3, fp, r0, r0
    7948:	cc00003f 	stcgt	0, cr0, [r0], {63}	; 0x3f
    794c:	3fea0300 	svccc	0x00ea0300
    7950:	00cd0000 	sbceq	r0, sp, r0
    7954:	003cdd03 	eorseq	sp, ip, r3, lsl #26
    7958:	0300ce00 	movweq	ip, #3584	; 0xe00
    795c:	0000416e 	andeq	r4, r0, lr, ror #2
    7960:	a50300cf 	strge	r0, [r3, #-207]	; 0xcf
    7964:	d000003e 	andle	r0, r0, lr, lsr r0
    7968:	40340300 	eorsmi	r0, r4, r0, lsl #6
    796c:	00d10000 	sbcseq	r0, r1, r0
    7970:	00419d03 	subeq	r9, r1, r3, lsl #26
    7974:	0300d200 	movweq	sp, #512	; 0x200
    7978:	00003e68 	andeq	r3, r0, r8, ror #28
    797c:	4e0300d3 	mcrmi	0, 0, r0, cr3, cr3, {6}
    7980:	d4000041 	strle	r0, [r0], #-65	; 0x41
    7984:	3e3e0300 	cdpcc	3, 3, cr0, cr14, cr0, {0}
    7988:	00d50000 	sbcseq	r0, r5, r0
    798c:	003dd403 	eorseq	sp, sp, r3, lsl #8
    7990:	0300d600 	movweq	sp, #1536	; 0x600
    7994:	00003e48 	andeq	r3, r0, r8, asr #28
    7998:	260300d7 			; <UNDEFINED> instruction: 0x260300d7
    799c:	d800003e 	stmdale	r0, {r1, r2, r3, r4, r5}
    79a0:	42ef0300 	rscmi	r0, pc, #0, 6
    79a4:	00d90000 	sbcseq	r0, r9, r0
    79a8:	00408303 	subeq	r8, r0, r3, lsl #6
    79ac:	0000da00 	andeq	sp, r0, r0, lsl #20
    79b0:	4d060104 	stfmis	f0, [r6, #-16]
    79b4:	05000001 	streq	r0, [r0, #-1]
    79b8:	0000026e 	andeq	r0, r0, lr, ror #4
    79bc:	02b11d02 	adcseq	r1, r1, #2, 26	; 0x80
    79c0:	01040000 	mrseq	r0, (UNDEF: 4)
    79c4:	00014b08 	andeq	r4, r1, r8, lsl #22
    79c8:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    79cc:	00000187 	andeq	r0, r0, r7, lsl #3
    79d0:	00043805 	andeq	r3, r4, r5, lsl #16
    79d4:	ca2b0200 	bgt	ac81dc <_Min_Stack_Size+0xac7ddc>
    79d8:	04000002 	streq	r0, [r0], #-2
    79dc:	000e0702 	andeq	r0, lr, r2, lsl #14
    79e0:	77050000 	strvc	r0, [r5, -r0]
    79e4:	02000001 	andeq	r0, r0, #1
    79e8:	0002dc3f 	andeq	sp, r2, pc, lsr ip
    79ec:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    79f0:	00000005 	andeq	r0, r0, r5
    79f4:	0005b405 	andeq	fp, r5, r5, lsl #8
    79f8:	ee410200 	cdp	2, 4, cr0, cr1, cr0, {0}
    79fc:	04000002 	streq	r0, [r0], #-2
    7a00:	012e0704 	teqeq	lr, r4, lsl #14
    7a04:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7a08:	00000005 	andeq	r0, r0, r5
    7a0c:	07080400 	streq	r0, [r8, -r0, lsl #8]
    7a10:	00000129 	andeq	r0, r0, r9, lsr #2
    7a14:	69050406 	stmdbvs	r5, {r1, r2, sl}
    7a18:	0400746e 	streq	r7, [r0], #-1134	; 0x46e
    7a1c:	01330704 	teqeq	r3, r4, lsl #14
    7a20:	70050000 	andvc	r0, r5, r0
    7a24:	03000002 	movweq	r0, #2
    7a28:	0002a62a 	andeq	sl, r2, sl, lsr #12
    7a2c:	043a0500 	ldrteq	r0, [sl], #-1280	; 0x500
    7a30:	36030000 	strcc	r0, [r3], -r0
    7a34:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    7a38:	00017905 	andeq	r7, r1, r5, lsl #18
    7a3c:	d1410300 	mrsle	r0, (UNDEF: 113)
    7a40:	05000002 	streq	r0, [r0, #-2]
    7a44:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7a48:	02e34203 	rsceq	r4, r3, #805306368	; 0x30000000
    7a4c:	04040000 	streq	r0, [r4], #-0
    7a50:	00019107 	andeq	r9, r1, r7, lsl #2
    7a54:	03320700 	teqeq	r2, #0, 14
    7a58:	32080000 	andcc	r0, r8, #0
    7a5c:	59000003 	stmdbpl	r0, {r0, r1}
    7a60:	09000003 	stmdbeq	r0, {r0, r1}
    7a64:	0000033d 	andeq	r0, r0, sp, lsr r3
    7a68:	32080001 	andcc	r0, r8, #1
    7a6c:	69000003 	stmdbvs	r0, {r0, r1}
    7a70:	09000003 	stmdbeq	r0, {r0, r1}
    7a74:	0000033d 	andeq	r0, r0, sp, lsr r3
    7a78:	1c070000 	stcne	0, cr0, [r7], {-0}
    7a7c:	07000003 	streq	r0, [r0, -r3]
    7a80:	00000327 	andeq	r0, r0, r7, lsr #6
    7a84:	f904010a 			; <UNDEFINED> instruction: 0xf904010a
    7a88:	00038901 	andeq	r8, r3, r1, lsl #18
    7a8c:	06860300 	streq	r0, [r6], r0, lsl #6
    7a90:	03000000 	movweq	r0, #0
    7a94:	000007de 	ldrdeq	r0, [r0], -lr
    7a98:	af0b0001 	svcge	0x000b0001
    7a9c:	04000007 	streq	r0, [r0], #-7
    7aa0:	037301f9 	cmneq	r3, #1073741886	; 0x4000003e
    7aa4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    7aa8:	ec02b104 	stfd	f3, [r2], {4}
    7aac:	0d000003 	stceq	0, cr0, [r0, #-12]
    7ab0:	04005243 	streq	r5, [r0], #-579	; 0x243
    7ab4:	034402b3 	movteq	r0, #17075	; 0x42b3
    7ab8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7abc:	00001e9e 	muleq	r0, lr, lr
    7ac0:	4402b404 	strmi	fp, [r2], #-1028	; 0x404
    7ac4:	04000003 	streq	r0, [r0], #-3
    7ac8:	5241500d 	subpl	r5, r1, #13
    7acc:	02b50400 	adcseq	r0, r5, #0, 8
    7ad0:	00000344 	andeq	r0, r0, r4, asr #6
    7ad4:	1e990e08 	cdpne	14, 9, cr0, cr9, cr8, {0}
    7ad8:	b6040000 	strlt	r0, [r4], -r0
    7adc:	00034402 	andeq	r4, r3, r2, lsl #8
    7ae0:	270e0c00 	strcs	r0, [lr, -r0, lsl #24]
    7ae4:	0400001e 	streq	r0, [r0], #-30
    7ae8:	034402b7 	movteq	r0, #17079	; 0x42b7
    7aec:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7af0:	00524346 	subseq	r4, r2, r6, asr #6
    7af4:	4402b804 	strmi	fp, [r2], #-2052	; 0x804
    7af8:	14000003 	strne	r0, [r0], #-3
    7afc:	1be50b00 	blne	ff94a704 <_estack+0xdf91a704>
    7b00:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    7b04:	00039502 	andeq	r9, r3, r2, lsl #10
    7b08:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
    7b0c:	048403d4 	streq	r0, [r4], #980	; 0x3d4
    7b10:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    7b14:	04000009 	streq	r0, [r0], #-9
    7b18:	034403d6 	movteq	r0, #17366	; 0x43d6
    7b1c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7b20:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7b24:	4403d704 	strmi	sp, [r3], #-1796	; 0x704
    7b28:	04000003 	streq	r0, [r0], #-3
    7b2c:	000a150e 	andeq	r1, sl, lr, lsl #10
    7b30:	03d80400 	bicseq	r0, r8, #0, 8
    7b34:	00000344 	andeq	r0, r0, r4, asr #6
    7b38:	09140e08 	ldmdbeq	r4, {r3, r9, sl, fp}
    7b3c:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    7b40:	00034403 	andeq	r4, r3, r3, lsl #8
    7b44:	490d0c00 	stmdbmi	sp, {sl, fp}
    7b48:	04005244 	streq	r5, [r0], #-580	; 0x244
    7b4c:	034403da 	movteq	r0, #17370	; 0x43da
    7b50:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7b54:	0052444f 	subseq	r4, r2, pc, asr #8
    7b58:	4403db04 	strmi	sp, [r3], #-2820	; 0xb04
    7b5c:	14000003 	strne	r0, [r0], #-3
    7b60:	000b070e 	andeq	r0, fp, lr, lsl #14
    7b64:	03dc0400 	bicseq	r0, ip, #0, 8
    7b68:	00000369 	andeq	r0, r0, r9, ror #6
    7b6c:	09330e18 	ldmdbeq	r3!, {r3, r4, r9, sl, fp}
    7b70:	dd040000 	stcle	0, cr0, [r4, #-0]
    7b74:	00036903 	andeq	r6, r3, r3, lsl #18
    7b78:	e80e1a00 	stmda	lr, {r9, fp, ip}
    7b7c:	04000008 	streq	r0, [r0], #-8
    7b80:	034403de 	movteq	r0, #17374	; 0x43de
    7b84:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    7b88:	00524641 	subseq	r4, r2, r1, asr #12
    7b8c:	8403df04 	strhi	sp, [r3], #-3844	; 0xf04
    7b90:	20000004 	andcs	r0, r0, r4
    7b94:	03490700 	movteq	r0, #38656	; 0x9700
    7b98:	fe0b0000 	cdp2	0, 0, cr0, cr11, cr0, {0}
    7b9c:	04000007 	streq	r0, [r0], #-7
    7ba0:	03f803e0 	mvnseq	r0, #224, 6	; 0x80000003
    7ba4:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    7ba8:	a203f304 	andge	pc, r3, #4, 6	; 0x10000000
    7bac:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    7bb0:	00315243 	eorseq	r5, r1, r3, asr #4
    7bb4:	6903f504 	stmdbvs	r3, {r2, r8, sl, ip, sp, lr, pc}
    7bb8:	00000003 	andeq	r0, r0, r3
    7bbc:	00056c0e 	andeq	r6, r5, lr, lsl #24
    7bc0:	03f60400 	mvnseq	r0, #0, 8
    7bc4:	0000031c 	andeq	r0, r0, ip, lsl r3
    7bc8:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    7bcc:	f7040032 			; <UNDEFINED> instruction: 0xf7040032
    7bd0:	00036903 	andeq	r6, r3, r3, lsl #18
    7bd4:	760e0400 	strvc	r0, [lr], -r0, lsl #8
    7bd8:	04000005 	streq	r0, [r0], #-5
    7bdc:	031c03f8 	tsteq	ip, #248, 6	; 0xe0000003
    7be0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    7be4:	00001886 	andeq	r1, r0, r6, lsl #17
    7be8:	6903f904 	stmdbvs	r3, {r2, r8, fp, ip, sp, lr, pc}
    7bec:	08000003 	stmdaeq	r0, {r0, r1}
    7bf0:	0005800e 	andeq	r8, r5, lr
    7bf4:	03fa0400 	mvnseq	r0, #0, 8
    7bf8:	0000031c 	andeq	r0, r0, ip, lsl r3
    7bfc:	1b7f0e0a 	blne	1fcb42c <_Min_Stack_Size+0x1fcb02c>
    7c00:	fb040000 	blx	107c0a <_Min_Stack_Size+0x10780a>
    7c04:	00036903 	andeq	r6, r3, r3, lsl #18
    7c08:	6c0e0c00 	stcvs	12, cr0, [lr], {-0}
    7c0c:	04000004 	streq	r0, [r0], #-4
    7c10:	031c03fc 	tsteq	ip, #252, 6	; 0xf0000003
    7c14:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    7c18:	04005244 	streq	r5, [r0], #-580	; 0x244
    7c1c:	036903fd 	cmneq	r9, #-201326589	; 0xf4000003
    7c20:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    7c24:	00000596 	muleq	r0, r6, r5
    7c28:	1c03fe04 	stcne	14, cr15, [r3], {4}
    7c2c:	12000003 	andne	r0, r0, #3
    7c30:	3152530d 	cmpcc	r2, sp, lsl #6
    7c34:	03ff0400 	mvnseq	r0, #0, 8
    7c38:	00000369 	andeq	r0, r0, r9, ror #6
    7c3c:	05a00e14 	streq	r0, [r0, #3604]!	; 0xe14
    7c40:	00040000 	andeq	r0, r4, r0
    7c44:	00031c04 	andeq	r1, r3, r4, lsl #24
    7c48:	530d1600 	movwpl	r1, #54784	; 0xd600
    7c4c:	04003252 	streq	r3, [r0], #-594	; 0x252
    7c50:	03690401 	cmneq	r9, #16777216	; 0x1000000
    7c54:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    7c58:	000005aa 	andeq	r0, r0, sl, lsr #11
    7c5c:	1c040204 	sfmne	f0, 4, [r4], {4}
    7c60:	1a000003 	bne	7c74 <_Min_Stack_Size+0x7874>
    7c64:	5243430d 	subpl	r4, r3, #872415232	; 0x34000000
    7c68:	04030400 	streq	r0, [r3], #-1024	; 0x400
    7c6c:	00000369 	andeq	r0, r0, r9, ror #6
    7c70:	1a310e1c 	bne	c4b4e8 <_Min_Stack_Size+0xc4b0e8>
    7c74:	04040000 	streq	r0, [r4], #-0
    7c78:	00031c04 	andeq	r1, r3, r4, lsl #24
    7c7c:	e80e1e00 	stmda	lr, {r9, sl, fp, ip}
    7c80:	04000017 	streq	r0, [r0], #-23
    7c84:	03690405 	cmneq	r9, #83886080	; 0x5000000
    7c88:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    7c8c:	00001a3b 	andeq	r1, r0, fp, lsr sl
    7c90:	1c040604 	stcne	6, cr0, [r4], {4}
    7c94:	22000003 	andcs	r0, r0, #3
    7c98:	00188b0e 	andseq	r8, r8, lr, lsl #22
    7c9c:	04070400 	streq	r0, [r7], #-1024	; 0x400
    7ca0:	00000369 	andeq	r0, r0, r9, ror #6
    7ca4:	1a450e24 	bne	114b53c <_Min_Stack_Size+0x114b13c>
    7ca8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7cac:	00031c04 	andeq	r1, r3, r4, lsl #24
    7cb0:	0b002600 	bleq	114b8 <_Min_Stack_Size+0x110b8>
    7cb4:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    7cb8:	95040904 	strls	r0, [r4, #-2308]	; 0x904
    7cbc:	0f000004 	svceq	0x00000004
    7cc0:	6b36053c 	blvs	d891b8 <_Min_Stack_Size+0xd88db8>
    7cc4:	10000006 	andne	r0, r0, r6
    7cc8:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    7ccc:	03323805 	teqeq	r2, #327680	; 0x50000
    7cd0:	10000000 	andne	r0, r0, r0
    7cd4:	00001c9c 	muleq	r0, ip, ip
    7cd8:	03323b05 	teqeq	r2, #5120	; 0x1400
    7cdc:	10040000 	andne	r0, r4, r0
    7ce0:	00001eec 	andeq	r1, r0, ip, ror #29
    7ce4:	03323d05 	teqeq	r2, #320	; 0x140
    7ce8:	10080000 	andne	r0, r8, r0
    7cec:	00001c94 	muleq	r0, r4, ip
    7cf0:	03324105 	teqeq	r2, #1073741825	; 0x40000001
    7cf4:	100c0000 	andne	r0, ip, r0
    7cf8:	00001f00 	andeq	r1, r0, r0, lsl #30
    7cfc:	03324505 	teqeq	r2, #20971520	; 0x1400000
    7d00:	10100000 	andsne	r0, r0, r0
    7d04:	00001cf7 	strdeq	r1, [r0], -r7
    7d08:	03324905 	teqeq	r2, #81920	; 0x14000
    7d0c:	10140000 	andsne	r0, r4, r0
    7d10:	00001cb3 			; <UNDEFINED> instruction: 0x00001cb3
    7d14:	03324c05 	teqeq	r2, #1280	; 0x500
    7d18:	10180000 	andsne	r0, r8, r0
    7d1c:	00001da4 	andeq	r1, r0, r4, lsr #27
    7d20:	03324f05 	teqeq	r2, #5, 30
    7d24:	101c0000 	andsne	r0, ip, r0
    7d28:	00001f43 	andeq	r1, r0, r3, asr #30
    7d2c:	03325205 	teqeq	r2, #1342177280	; 0x50000000
    7d30:	10200000 	eorne	r0, r0, r0
    7d34:	00001f0f 	andeq	r1, r0, pc, lsl #30
    7d38:	03325505 	teqeq	r2, #20971520	; 0x1400000
    7d3c:	10240000 	eorne	r0, r4, r0
    7d40:	00001bf8 	strdeq	r1, [r0], -r8
    7d44:	03325a05 	teqeq	r2, #20480	; 0x5000
    7d48:	10280000 	eorne	r0, r8, r0
    7d4c:	00001eb3 			; <UNDEFINED> instruction: 0x00001eb3
    7d50:	03325d05 	teqeq	r2, #320	; 0x140
    7d54:	102c0000 	eorne	r0, ip, r0
    7d58:	00001de6 	andeq	r1, r0, r6, ror #27
    7d5c:	03326205 	teqeq	r2, #1342177280	; 0x50000000
    7d60:	10300000 	eorsne	r0, r0, r0
    7d64:	00001c05 	andeq	r1, r0, r5, lsl #24
    7d68:	03326505 	teqeq	r2, #20971520	; 0x1400000
    7d6c:	10340000 	eorsne	r0, r4, r0
    7d70:	00001c24 	andeq	r1, r0, r4, lsr #24
    7d74:	03326a05 	teqeq	r2, #20480	; 0x5000
    7d78:	00380000 	eorseq	r0, r8, r0
    7d7c:	001dbb05 	andseq	fp, sp, r5, lsl #22
    7d80:	ae6e0500 	cdpge	5, 6, cr0, cr14, cr0, {0}
    7d84:	11000005 	tstne	r0, r5
    7d88:	8b370601 	blhi	dc9594 <_Min_Stack_Size+0xdc9194>
    7d8c:	03000006 	movweq	r0, #6
    7d90:	0000236e 	andeq	r2, r0, lr, ror #6
    7d94:	23240300 	teqcs	r4, #0, 6
    7d98:	00040000 	andeq	r0, r4, r0
    7d9c:	00239105 	eoreq	r9, r3, r5, lsl #2
    7da0:	763a0600 	ldrtvc	r0, [sl], -r0, lsl #12
    7da4:	11000006 	tstne	r0, r6
    7da8:	b1430601 	cmplt	r3, r1, lsl #12
    7dac:	03000006 	movweq	r0, #6
    7db0:	000023b4 			; <UNDEFINED> instruction: 0x000023b4
    7db4:	24390308 	ldrtcs	r0, [r9], #-776	; 0x308
    7db8:	030c0000 	movweq	r0, #49152	; 0xc000
    7dbc:	000023c8 	andeq	r2, r0, r8, asr #7
    7dc0:	a4050010 	strge	r0, [r5], #-16
    7dc4:	06000024 	streq	r0, [r0], -r4, lsr #32
    7dc8:	00069647 	andeq	r9, r6, r7, asr #12
    7dcc:	06080f00 	streq	r0, [r8], -r0, lsl #30
    7dd0:	0006f550 	andeq	pc, r6, r0, asr r5	; <UNPREDICTABLE>
    7dd4:	22f61000 	rscscs	r1, r6, #0
    7dd8:	52060000 	andpl	r0, r6, #0
    7ddc:	00000332 	andeq	r0, r0, r2, lsr r3
    7de0:	23001000 	movwcs	r1, #0
    7de4:	55060000 	strpl	r0, [r6, #-0]
    7de8:	0000068b 	andeq	r0, r0, fp, lsl #13
    7dec:	23171004 	tstcs	r7, #4
    7df0:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    7df4:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    7df8:	230a1005 	movwcs	r1, #40965	; 0xa005
    7dfc:	5b060000 	blpl	187e04 <_Min_Stack_Size+0x187a04>
    7e00:	00000389 	andeq	r0, r0, r9, lsl #7
    7e04:	4d050006 	stcmi	0, cr0, [r5, #-24]	; 0xffffffe8
    7e08:	06000023 	streq	r0, [r0], -r3, lsr #32
    7e0c:	0006bc5d 	andeq	fp, r6, sp, asr ip
    7e10:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7e14:	00072142 	andeq	r2, r7, r2, asr #2
    7e18:	091a0300 	ldmdbeq	sl, {r8, r9}
    7e1c:	03000000 	movweq	r0, #0
    7e20:	00000906 	andeq	r0, r0, r6, lsl #18
    7e24:	089d0301 	ldmeq	sp, {r0, r8, r9}
    7e28:	03020000 	movweq	r0, #8192	; 0x2000
    7e2c:	000008cc 	andeq	r0, r0, ip, asr #17
    7e30:	37050003 	strcc	r0, [r5, -r3]
    7e34:	07000008 	streq	r0, [r0, -r8]
    7e38:	00070047 	andeq	r0, r7, r7, asr #32
    7e3c:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7e40:	0007414f 	andeq	r4, r7, pc, asr #2
    7e44:	09550300 	ldmdbeq	r5, {r8, r9}^
    7e48:	03000000 	movweq	r0, #0
    7e4c:	0000086c 	andeq	r0, r0, ip, ror #16
    7e50:	ed050001 	stc	0, cr0, [r5, #-4]
    7e54:	07000008 	streq	r0, [r0, -r8]
    7e58:	00072c52 	andeq	r2, r7, r2, asr ip
    7e5c:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7e60:	00076d5a 	andeq	r6, r7, sl, asr sp
    7e64:	09f40300 	ldmibeq	r4!, {r8, r9}^
    7e68:	03000000 	movweq	r0, #0
    7e6c:	00000a03 	andeq	r0, r0, r3, lsl #20
    7e70:	09b10301 	ldmibeq	r1!, {r0, r8, r9}
    7e74:	03020000 	movweq	r0, #8192	; 0x2000
    7e78:	00000a77 	andeq	r0, r0, r7, ror sl
    7e7c:	1d050003 	stcne	0, cr0, [r5, #-12]
    7e80:	0700000a 	streq	r0, [r0, -sl]
    7e84:	00074c5f 	andeq	r4, r7, pc, asr ip
    7e88:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7e8c:	0007936e 	andeq	r9, r7, lr, ror #6
    7e90:	0a3e0300 	beq	f88a98 <_Min_Stack_Size+0xf88698>
    7e94:	03000000 	movweq	r0, #0
    7e98:	00000a98 	muleq	r0, r8, sl
    7e9c:	0a2f0301 	beq	bc8aa8 <_Min_Stack_Size+0xbc86a8>
    7ea0:	00020000 	andeq	r0, r2, r0
    7ea4:	000a8705 	andeq	r8, sl, r5, lsl #14
    7ea8:	78720700 	ldmdavc	r2!, {r8, r9, sl}^
    7eac:	0f000007 	svceq	0x00000007
    7eb0:	e3840708 	orr	r0, r4, #8, 14	; 0x200000
    7eb4:	10000007 	andne	r0, r0, r7
    7eb8:	00000812 	andeq	r0, r0, r2, lsl r8
    7ebc:	03328607 	teqeq	r2, #7340032	; 0x700000
    7ec0:	10000000 	andne	r0, r0, r0
    7ec4:	00000b24 	andeq	r0, r0, r4, lsr #22
    7ec8:	07218907 	streq	r8, [r1, -r7, lsl #18]!
    7ecc:	10040000 	andne	r0, r4, r0
    7ed0:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    7ed4:	076d8c07 	strbeq	r8, [sp, -r7, lsl #24]!
    7ed8:	10050000 	andne	r0, r5, r0
    7edc:	00000892 	muleq	r0, r2, r8
    7ee0:	07418f07 	strbeq	r8, [r1, -r7, lsl #30]
    7ee4:	10060000 	andne	r0, r6, r0
    7ee8:	0000096d 	andeq	r0, r0, sp, ror #18
    7eec:	07939207 	ldreq	r9, [r3, r7, lsl #4]
    7ef0:	00070000 	andeq	r0, r7, r0
    7ef4:	000a6605 	andeq	r6, sl, r5, lsl #12
    7ef8:	9e940700 	cdpls	7, 9, cr0, cr4, cr0, {0}
    7efc:	0f000007 	svceq	0x00000007
    7f00:	27360804 	ldrcs	r0, [r6, -r4, lsl #16]!
    7f04:	10000008 	andne	r0, r0, r8
    7f08:	00000758 	andeq	r0, r0, r8, asr r7
    7f0c:	03113808 	tsteq	r1, #8, 16	; 0x80000
    7f10:	10000000 	andne	r0, r0, r0
    7f14:	0000078d 	andeq	r0, r0, sp, lsl #15
    7f18:	03113d08 	tsteq	r1, #8, 26	; 0x200
    7f1c:	10010000 	andne	r0, r1, r0
    7f20:	00000768 	andeq	r0, r0, r8, ror #14
    7f24:	03114208 	tsteq	r1, #8, 4	; 0x80000000
    7f28:	10020000 	andne	r0, r2, r0
    7f2c:	0000061a 	andeq	r0, r0, sl, lsl r6
    7f30:	03894708 	orreq	r4, r9, #8, 14	; 0x200000
    7f34:	00030000 	andeq	r0, r3, r0
    7f38:	00060905 	andeq	r0, r6, r5, lsl #18
    7f3c:	ee4a0800 	cdp	8, 4, cr0, cr10, cr0, {0}
    7f40:	11000007 	tstne	r0, r7
    7f44:	473c0901 	ldrmi	r0, [ip, -r1, lsl #18]!
    7f48:	03000008 	movweq	r0, #8
    7f4c:	000040cb 	andeq	r4, r0, fp, asr #1
    7f50:	40d00300 	sbcsmi	r0, r0, r0, lsl #6
    7f54:	00010000 	andeq	r0, r1, r0
    7f58:	00428d05 	subeq	r8, r2, r5, lsl #26
    7f5c:	323f0900 	eorscc	r0, pc, #0, 18
    7f60:	11000008 	tstne	r0, r8
    7f64:	61420901 	cmpvs	r2, r1, lsl #18
    7f68:	03000008 	movweq	r0, #8
    7f6c:	0000410e 	andeq	r4, r0, lr, lsl #2
    7f70:	a1050000 	mrsge	r0, (UNDEF: 5)
    7f74:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
    7f78:	00085244 	andeq	r5, r8, r4, asr #4
    7f7c:	09011100 	stmdbeq	r1, {r8, ip}
    7f80:	00088147 	andeq	r8, r8, r7, asr #2
    7f84:	40590300 	subsmi	r0, r9, r0, lsl #6
    7f88:	03000000 	movweq	r0, #0
    7f8c:	0000400c 	andeq	r4, r0, ip
    7f90:	2c050001 	stccs	0, cr0, [r5], {1}
    7f94:	09000041 	stmdbeq	r0, {r0, r6}
    7f98:	00086c4a 	andeq	r6, r8, sl, asr #24
    7f9c:	3f881200 	svccc	0x00881200
    7fa0:	7a010000 	bvc	47fa8 <_Min_Stack_Size+0x47ba8>
    7fa4:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    7fa8:	0000005c 	andeq	r0, r0, ip, asr r0
    7fac:	08be9c01 	ldmeq	lr!, {r0, sl, fp, ip, pc}
    7fb0:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    7fb4:	01006465 	tsteq	r0, r5, ror #8
    7fb8:	0008477a 	andeq	r4, r8, sl, ror r7
    7fbc:	6f910200 	svcvs	0x00910200
    7fc0:	0041eb14 	subeq	lr, r1, r4, lsl fp
    7fc4:	e37c0100 	cmn	ip, #0, 2
    7fc8:	02000007 	andeq	r0, r0, #7
    7fcc:	15007091 	strne	r7, [r0, #-145]	; 0x91
    7fd0:	00003d3c 	andeq	r3, r0, ip, lsr sp
    7fd4:	6d509201 	lfmvs	f1, 3, [r0, #-4]
    7fd8:	00300800 	eorseq	r0, r0, r0, lsl #16
    7fdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fe0:	000008e2 	andeq	r0, r0, r2, ror #17
    7fe4:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    7fe8:	47920100 	ldrmi	r0, [r2, r0, lsl #2]
    7fec:	02000008 	andeq	r0, r0, #8
    7ff0:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    7ff4:	00003e73 	andeq	r3, r0, r3, ror lr
    7ff8:	6d809f01 	stcvs	15, cr9, [r0, #4]
    7ffc:	00300800 	eorseq	r0, r0, r0, lsl #16
    8000:	9c010000 	stcls	0, cr0, [r1], {-0}
    8004:	00000906 	andeq	r0, r0, r6, lsl #18
    8008:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    800c:	479f0100 	ldrmi	r0, [pc, r0, lsl #2]
    8010:	02000008 	andeq	r0, r0, #8
    8014:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    8018:	0000409b 	muleq	r0, fp, r0
    801c:	6db0ac01 	ldcvs	12, cr10, [r0, #4]!
    8020:	003c0800 	eorseq	r0, ip, r0, lsl #16
    8024:	9c010000 	stcls	0, cr0, [r1], {-0}
    8028:	0000092a 	andeq	r0, r0, sl, lsr #18
    802c:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    8030:	47ac0100 	strmi	r0, [ip, r0, lsl #2]!
    8034:	02000008 	andeq	r0, r0, #8
    8038:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    803c:	00003c28 	andeq	r3, r0, r8, lsr #24
    8040:	6decbc01 	stclvs	12, cr11, [ip, #4]!
    8044:	00940800 	addseq	r0, r4, r0, lsl #16
    8048:	9c010000 	stcls	0, cr0, [r1], {-0}
    804c:	00000986 	andeq	r0, r0, r6, lsl #19
    8050:	00410716 	subeq	r0, r1, r6, lsl r7
    8054:	61bc0100 			; <UNDEFINED> instruction: 0x61bc0100
    8058:	02000008 	andeq	r0, r0, #8
    805c:	1e165f91 	mrcne	15, 0, r5, cr6, cr1, {4}
    8060:	01000043 	tsteq	r0, r3, asr #32
    8064:	000881bc 			; <UNDEFINED> instruction: 0x000881bc
    8068:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    806c:	0041eb14 	subeq	lr, r1, r4, lsl fp
    8070:	e3be0100 			; <UNDEFINED> instruction: 0xe3be0100
    8074:	02000007 	andeq	r0, r0, #7
    8078:	f4147091 			; <UNDEFINED> instruction: 0xf4147091
    807c:	01000040 	tsteq	r0, r0, asr #32
    8080:	0006f5bf 			; <UNDEFINED> instruction: 0x0006f5bf
    8084:	68910200 	ldmvs	r1, {r9}
    8088:	003cf114 	eorseq	pc, ip, r4, lsl r1	; <UNPREDICTABLE>
    808c:	27c00100 	strbcs	r0, [r0, r0, lsl #2]
    8090:	02000008 	andeq	r0, r0, #8
    8094:	17006491 			; <UNDEFINED> instruction: 0x17006491
    8098:	000042db 	ldrdeq	r4, [r0], -fp
    809c:	0332e801 	teqeq	r2, #65536	; 0x10000
    80a0:	6e800000 	cdpvs	0, 8, cr0, cr0, cr0, {0}
    80a4:	002c0800 	eoreq	r0, ip, r0, lsl #16
    80a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    80ac:	000009ae 	andeq	r0, r0, lr, lsr #19
    80b0:	00410716 	subeq	r0, r1, r6, lsl r7
    80b4:	61e80100 	mvnvs	r0, r0, lsl #2
    80b8:	02000008 	andeq	r0, r0, #8
    80bc:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    80c0:	000042c7 	andeq	r4, r0, r7, asr #5
    80c4:	6eacf201 	cdpvs	2, 10, cr15, cr12, cr1, {0}
    80c8:	00b80800 	adcseq	r0, r8, r0, lsl #16
    80cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    80d0:	000009d2 	ldrdeq	r0, [r0], -r2
    80d4:	0041eb14 	subeq	lr, r1, r4, lsl fp
    80d8:	e3f40100 	mvns	r0, #0, 2
    80dc:	02000007 	andeq	r0, r0, #7
    80e0:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    80e4:	00003c76 	andeq	r3, r0, r6, ror ip
    80e8:	64012301 	strvs	r2, [r1], #-769	; 0x301
    80ec:	9808006f 	stmdals	r8, {r0, r1, r2, r3, r5, r6}
    80f0:	01000001 	tsteq	r0, r1
    80f4:	0009f89c 	muleq	r9, ip, r8
    80f8:	41eb1900 	mvnmi	r1, r0, lsl #18
    80fc:	25010000 	strcs	r0, [r1, #-0]
    8100:	0007e301 	andeq	lr, r7, r1, lsl #6
    8104:	70910200 	addsvc	r0, r1, r0, lsl #4
    8108:	401d1800 	andsmi	r1, sp, r0, lsl #16
    810c:	83010000 	movwhi	r0, #4096	; 0x1000
    8110:	0070fc01 	rsbseq	pc, r0, r1, lsl #24
    8114:	00005c08 	andeq	r5, r0, r8, lsl #24
    8118:	3c9c0100 	ldfccs	f0, [ip], {0}
    811c:	1a00000a 	bne	814c <_Min_Stack_Size+0x7d4c>
    8120:	00003e90 	muleq	r0, r0, lr
    8124:	32018301 	andcc	r8, r1, #67108864	; 0x4000000
    8128:	02000003 	andeq	r0, r0, #3
    812c:	041a7491 	ldreq	r7, [sl], #-1169	; 0x491
    8130:	0100001f 	tsteq	r0, pc, lsl r0
    8134:	03320183 	teqeq	r2, #-1073741792	; 0xc0000020
    8138:	91020000 	mrsls	r0, (UNDEF: 2)
    813c:	194f1a70 	stmdbne	pc, {r4, r5, r6, r9, fp, ip}^	; <UNPREDICTABLE>
    8140:	83010000 	movwhi	r0, #4096	; 0x1000
    8144:	00033201 	andeq	r3, r3, r1, lsl #4
    8148:	6c910200 	lfmvs	f0, 4, [r1], {0}
    814c:	015e1b00 	cmpeq	lr, r0, lsl #22
    8150:	a70a0000 	strge	r0, [sl, -r0]
    8154:	00036e06 	andeq	r6, r3, r6, lsl #28
    8158:	0a580800 	beq	160a160 <_Min_Stack_Size+0x1609d60>
    815c:	0a580000 	beq	1608164 <_Min_Stack_Size+0x1607d64>
    8160:	3d090000 	stccc	0, cr0, [r9, #-0]
    8164:	01000003 	tsteq	r0, r3
    8168:	89041c00 	stmdbhi	r4, {sl, fp, ip}
    816c:	1d000004 	stcne	0, cr0, [r0, #-16]
    8170:	00003d75 	andeq	r3, r0, r5, ror sp
    8174:	0a484d01 	beq	121b580 <_Min_Stack_Size+0x121b180>
    8178:	03050000 	movweq	r0, #20480	; 0x5000
    817c:	20000024 	andcs	r0, r0, r4, lsr #32
    8180:	00031c08 	andeq	r1, r3, r8, lsl #24
    8184:	000a7f00 	andeq	r7, sl, r0, lsl #30
    8188:	033d0900 	teqeq	sp, #0, 18
    818c:	00010000 	andeq	r0, r1, r0
    8190:	0041e21d 	subeq	lr, r1, sp, lsl r2
    8194:	904e0100 	subls	r0, lr, r0, lsl #2
    8198:	0500000a 	streq	r0, [r0, #-10]
    819c:	00c96803 	sbceq	r6, r9, r3, lsl #16
    81a0:	0a6f1e08 	beq	1bcf9c8 <_Min_Stack_Size+0x1bcf5c8>
    81a4:	981d0000 	ldmdals	sp, {}	; <UNPREDICTABLE>
    81a8:	0100003d 	tsteq	r0, sp, lsr r0
    81ac:	000aa64f 	andeq	sl, sl, pc, asr #12
    81b0:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    81b4:	1e0800c9 	cdpne	0, 0, cr0, cr8, cr9, {6}
    81b8:	00000349 	andeq	r0, r0, r9, asr #6
    81bc:	000a5808 	andeq	r5, sl, r8, lsl #16
    81c0:	000abb00 	andeq	fp, sl, r0, lsl #22
    81c4:	033d0900 	teqeq	sp, #0, 18
    81c8:	00000000 	andeq	r0, r0, r0
    81cc:	0042151d 	subeq	r1, r2, sp, lsl r5
    81d0:	ab510100 	blge	14485d8 <_Min_Stack_Size+0x14481d8>
    81d4:	0500000a 	streq	r0, [r0, #-10]
    81d8:	00002c03 	andeq	r2, r0, r3, lsl #24
    81dc:	031c0820 	tsteq	ip, #32, 16	; 0x200000
    81e0:	0adc0000 	beq	ff7081e8 <_estack+0xdf6d81e8>
    81e4:	3d090000 	stccc	0, cr0, [r9, #-0]
    81e8:	00000003 	andeq	r0, r0, r3
    81ec:	40ae1d00 	adcmi	r1, lr, r0, lsl #26
    81f0:	53010000 	movwpl	r0, #4096	; 0x1000
    81f4:	00000aed 	andeq	r0, r0, sp, ror #21
    81f8:	c9740305 	ldmdbgt	r4!, {r0, r2, r8, r9}^
    81fc:	cc1e0800 	ldcgt	8, cr0, [lr], {-0}
    8200:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    8204:	00003cd2 	ldrdeq	r3, [r0], -r2
    8208:	0b035501 	bleq	dd614 <_Min_Stack_Size+0xdd214>
    820c:	03050000 	movweq	r0, #20480	; 0x5000
    8210:	0800c978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, lr, pc}
    8214:	0003591e 	andeq	r5, r3, lr, lsl r9
    8218:	3c881d00 	stccc	13, cr1, [r8], {0}
    821c:	57010000 	strpl	r0, [r1, -r0]
    8220:	00000b19 	andeq	r0, r0, r9, lsl fp
    8224:	c97c0305 	ldmdbgt	ip!, {r0, r2, r8, r9}^
    8228:	cc1e0800 	ldcgt	8, cr0, [lr], {-0}
    822c:	0800000a 	stmdaeq	r0, {r1, r3}
    8230:	00000311 	andeq	r0, r0, r1, lsl r3
    8234:	00000b2e 	andeq	r0, r0, lr, lsr #22
    8238:	00033d09 	andeq	r3, r3, r9, lsl #26
    823c:	1d000000 	stcne	0, cr0, [r0, #-0]
    8240:	00003df9 	strdeq	r3, [r0], -r9
    8244:	0b3f5901 	bleq	fde650 <_Min_Stack_Size+0xfde250>
    8248:	03050000 	movweq	r0, #20480	; 0x5000
    824c:	0800c980 	stmdaeq	r0, {r7, r8, fp, lr, pc}
    8250:	000b1e1e 	andeq	r1, fp, lr, lsl lr
    8254:	3c991d00 	ldccc	13, cr1, [r9], {0}
    8258:	5b010000 	blpl	48260 <_Min_Stack_Size+0x47e60>
    825c:	00000b55 	andeq	r0, r0, r5, asr fp
    8260:	c9840305 	stmibgt	r4, {r0, r2, r8, r9}
    8264:	1e1e0800 	cdpne	8, 1, cr0, cr14, cr0, {0}
    8268:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    826c:	0000426b 	andeq	r4, r0, fp, ror #4
    8270:	0b6b5c01 	bleq	1adf27c <_Min_Stack_Size+0x1adee7c>
    8274:	03050000 	movweq	r0, #20480	; 0x5000
    8278:	0800c988 	stmdaeq	r0, {r3, r7, r8, fp, lr, pc}
    827c:	000b1e1e 	andeq	r1, fp, lr, lsl lr
    8280:	432a1d00 	teqmi	sl, #0, 26
    8284:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    8288:	0000066b 	andeq	r0, r0, fp, ror #12
    828c:	04940305 	ldreq	r0, [r4], #773	; 0x305
    8290:	f11d2000 			; <UNDEFINED> instruction: 0xf11d2000
    8294:	0100003c 	tsteq	r0, ip, lsr r0
    8298:	0008275f 	andeq	r2, r8, pc, asr r7
    829c:	d0030500 	andle	r0, r3, r0, lsl #10
    82a0:	00200004 	eoreq	r0, r0, r4
    82a4:	00000575 	andeq	r0, r0, r5, ror r5
    82a8:	18550004 	ldmdane	r5, {r2}^
    82ac:	01040000 	mrseq	r0, (UNDEF: 4)
    82b0:	00000021 	andeq	r0, r0, r1, lsr #32
    82b4:	00446b01 	subeq	r6, r4, r1, lsl #22
    82b8:	00011400 	andeq	r1, r1, r0, lsl #8
    82bc:	000a0000 	andeq	r0, sl, r0
    82c0:	00000000 	andeq	r0, r0, r0
    82c4:	0037dc00 	eorseq	sp, r7, r0, lsl #24
    82c8:	06010200 	streq	r0, [r1], -r0, lsl #4
    82cc:	0000014d 	andeq	r0, r0, sp, asr #2
    82d0:	00026e03 	andeq	r6, r2, r3, lsl #28
    82d4:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    82d8:	02000000 	andeq	r0, r0, #0
    82dc:	014b0801 	cmpeq	fp, r1, lsl #16
    82e0:	02020000 	andeq	r0, r2, #0
    82e4:	00018705 	andeq	r8, r1, r5, lsl #14
    82e8:	04380300 	ldrteq	r0, [r8], #-768	; 0x300
    82ec:	2b020000 	blcs	882f4 <_Min_Stack_Size+0x87ef4>
    82f0:	00000050 	andeq	r0, r0, r0, asr r0
    82f4:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    82f8:	03000000 	movweq	r0, #0
    82fc:	00000177 	andeq	r0, r0, r7, ror r1
    8300:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    8304:	04020000 	streq	r0, [r2], #-0
    8308:	00000505 	andeq	r0, r0, r5, lsl #10
    830c:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
    8310:	41020000 	mrsmi	r0, (UNDEF: 2)
    8314:	00000074 	andeq	r0, r0, r4, ror r0
    8318:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    831c:	02000001 	andeq	r0, r0, #1
    8320:	00000508 	andeq	r0, r0, r8, lsl #10
    8324:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8328:	00012907 	andeq	r2, r1, r7, lsl #18
    832c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    8330:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8334:	33070402 	movwcc	r0, #29698	; 0x7402
    8338:	03000001 	movweq	r0, #1
    833c:	00000270 	andeq	r0, r0, r0, ror r2
    8340:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    8344:	3a030000 	bcc	c834c <_Min_Stack_Size+0xc7f4c>
    8348:	03000004 	movweq	r0, #4
    834c:	00004536 	andeq	r4, r0, r6, lsr r5
    8350:	01790300 	cmneq	r9, r0, lsl #6
    8354:	41030000 	mrsmi	r0, (UNDEF: 3)
    8358:	00000057 	andeq	r0, r0, r7, asr r0
    835c:	0005b603 	andeq	fp, r5, r3, lsl #12
    8360:	69420300 	stmdbvs	r2, {r8, r9}^
    8364:	02000000 	andeq	r0, r0, #0
    8368:	01910704 	orrseq	r0, r1, r4, lsl #14
    836c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    8370:	06000000 	streq	r0, [r0], -r0
    8374:	000000b8 	strheq	r0, [r0], -r8
    8378:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    837c:	0000c307 	andeq	ip, r0, r7, lsl #6
    8380:	05000100 	streq	r0, [r0, #-256]	; 0x100
    8384:	000000a2 	andeq	r0, r0, r2, lsr #1
    8388:	0000ad05 	andeq	sl, r0, r5, lsl #26
    838c:	04010800 	streq	r0, [r1], #-2048	; 0x800
    8390:	00ff01f7 	ldrshteq	r0, [pc], #23
    8394:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    8398:	00000008 	andeq	r0, r0, r8
    839c:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    83a0:	08000100 	stmdaeq	r0, {r8}
    83a4:	01f90401 	mvnseq	r0, r1, lsl #8
    83a8:	00000115 	andeq	r0, r0, r5, lsl r1
    83ac:	00068609 	andeq	r8, r6, r9, lsl #12
    83b0:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    83b4:	01000007 	tsteq	r0, r7
    83b8:	04280b00 	strteq	r0, [r8], #-2816	; 0xb00
    83bc:	01a103d4 	ldrdeq	r0, [r1, r4]!
    83c0:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    83c4:	04000009 	streq	r0, [r0], #-9
    83c8:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    83cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    83d0:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    83d4:	ca03d704 	bgt	fdfec <_Min_Stack_Size+0xfdbec>
    83d8:	04000000 	streq	r0, [r0], #-0
    83dc:	000a150c 	andeq	r1, sl, ip, lsl #10
    83e0:	03d80400 	bicseq	r0, r8, #0, 8
    83e4:	000000ca 	andeq	r0, r0, sl, asr #1
    83e8:	09140c08 	ldmdbeq	r4, {r3, sl, fp}
    83ec:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    83f0:	0000ca03 	andeq	ip, r0, r3, lsl #20
    83f4:	490d0c00 	stmdbmi	sp, {sl, fp}
    83f8:	04005244 	streq	r5, [r0], #-580	; 0x244
    83fc:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    8400:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8404:	0052444f 	subseq	r4, r2, pc, asr #8
    8408:	ca03db04 	bgt	ff020 <_Min_Stack_Size+0xfec20>
    840c:	14000000 	strne	r0, [r0], #-0
    8410:	000b070c 	andeq	r0, fp, ip, lsl #14
    8414:	03dc0400 	bicseq	r0, ip, #0, 8
    8418:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    841c:	09330c18 	ldmdbeq	r3!, {r3, r4, sl, fp}
    8420:	dd040000 	stcle	0, cr0, [r4, #-0]
    8424:	0000df03 	andeq	sp, r0, r3, lsl #30
    8428:	e80c1a00 	stmda	ip, {r9, fp, ip}
    842c:	04000008 	streq	r0, [r0], #-8
    8430:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    8434:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8438:	00524641 	subseq	r4, r2, r1, asr #12
    843c:	a103df04 	tstge	r3, r4, lsl #30
    8440:	20000001 	andcs	r0, r0, r1
    8444:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    8448:	fe0e0000 	cdp2	0, 0, cr0, cr14, cr0, {0}
    844c:	04000007 	streq	r0, [r0], #-7
    8450:	011503e0 	tsteq	r5, r0, ror #7
    8454:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    8458:	0213f205 	andseq	pc, r3, #1342177280	; 0x50000000
    845c:	4a100000 	bmi	408464 <_Min_Stack_Size+0x408064>
    8460:	05000039 	streq	r0, [r0, #-57]	; 0x39
    8464:	0000b8f4 	strdeq	fp, [r0], -r4
    8468:	6c100000 	ldcvs	0, cr0, [r0], {-0}
    846c:	05000034 	streq	r0, [r0, #-52]	; 0x34
    8470:	0000b8f8 	strdeq	fp, [r0], -r8
    8474:	da100400 	ble	40947c <_Min_Stack_Size+0x40907c>
    8478:	05000032 	streq	r0, [r0, #-50]	; 0x32
    847c:	0000b8fc 	strdeq	fp, [r0], -ip
    8480:	1f0c0800 	svcne	0x000c0800
    8484:	05000036 	streq	r0, [r0, #-54]	; 0x36
    8488:	00b80100 	adcseq	r0, r8, r0, lsl #2
    848c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    8490:	00003370 	andeq	r3, r0, r0, ror r3
    8494:	b8010505 	stmdalt	r1, {r0, r2, r8, sl}
    8498:	10000000 	andne	r0, r0, r0
    849c:	0036fc0c 	eorseq	pc, r6, ip, lsl #24
    84a0:	01080500 	tsteq	r8, r0, lsl #10
    84a4:	000000b8 	strheq	r0, [r0], -r8
    84a8:	359d0c14 	ldrcc	r0, [sp, #3092]	; 0xc14
    84ac:	0c050000 	stceq	0, cr0, [r5], {-0}
    84b0:	0000b801 	andeq	fp, r0, r1, lsl #16
    84b4:	0e001800 	cdpeq	8, 0, cr1, cr0, cr0, {0}
    84b8:	000039c3 	andeq	r3, r0, r3, asr #19
    84bc:	b2011005 	andlt	r1, r1, #5
    84c0:	0b000001 	bleq	84cc <_Min_Stack_Size+0x80cc>
    84c4:	01170510 	tsteq	r7, r0, lsl r5
    84c8:	0000025d 	andeq	r0, r0, sp, asr r2
    84cc:	003a9e0c 	eorseq	r9, sl, ip, lsl #28
    84d0:	01190500 	tsteq	r9, r0, lsl #10
    84d4:	000000b8 	strheq	r0, [r0], -r8
    84d8:	385d0c00 	ldmdacc	sp, {sl, fp}^
    84dc:	1c050000 	stcne	0, cr0, [r5], {-0}
    84e0:	0000b801 	andeq	fp, r0, r1, lsl #16
    84e4:	300c0400 	andcc	r0, ip, r0, lsl #8
    84e8:	05000035 	streq	r0, [r0, #-53]	; 0x35
    84ec:	00b8011f 	adcseq	r0, r8, pc, lsl r1
    84f0:	0c080000 	stceq	0, cr0, [r8], {-0}
    84f4:	0000330b 	andeq	r3, r0, fp, lsl #6
    84f8:	b8012305 	stmdalt	r1, {r0, r2, r8, r9, sp}
    84fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    8500:	39320e00 	ldmdbcc	r2!, {r9, sl, fp}
    8504:	25050000 	strcs	r0, [r5, #-0]
    8508:	00021f01 	andeq	r1, r2, r1, lsl #30
    850c:	052c0b00 	streq	r0, [ip, #-2816]!	; 0xb00
    8510:	0302012b 	movweq	r0, #8491	; 0x212b
    8514:	fb0c0000 	blx	30851e <_Min_Stack_Size+0x30811e>
    8518:	05000037 	streq	r0, [r0, #-55]	; 0x37
    851c:	00b8012d 	adcseq	r0, r8, sp, lsr #2
    8520:	0c000000 	stceq	0, cr0, [r0], {-0}
    8524:	0000374d 	andeq	r3, r0, sp, asr #14
    8528:	b8013005 	stmdalt	r1, {r0, r2, ip, sp}
    852c:	04000000 	streq	r0, [r0], #-0
    8530:	0038960c 	eorseq	r9, r8, ip, lsl #12
    8534:	01330500 	teqeq	r3, r0, lsl #10
    8538:	000000b8 	strheq	r0, [r0], -r8
    853c:	34a00c08 	strtcc	r0, [r0], #3080	; 0xc08
    8540:	36050000 	strcc	r0, [r5], -r0
    8544:	0000b801 	andeq	fp, r0, r1, lsl #16
    8548:	8a0c0c00 	bhi	30b550 <_Min_Stack_Size+0x30b150>
    854c:	05000036 	streq	r0, [r0, #-54]	; 0x36
    8550:	00b80139 	adcseq	r0, r8, r9, lsr r1
    8554:	0c100000 	ldceq	0, cr0, [r0], {-0}
    8558:	000032c4 	andeq	r3, r0, r4, asr #5
    855c:	b8013c05 	stmdalt	r1, {r0, r2, sl, fp, ip, sp}
    8560:	14000000 	strne	r0, [r0], #-0
    8564:	003a6e0c 	eorseq	r6, sl, ip, lsl #28
    8568:	013f0500 	teqeq	pc, r0, lsl #10
    856c:	000000b8 	strheq	r0, [r0], -r8
    8570:	39600c18 	stmdbcc	r0!, {r3, r4, sl, fp}^
    8574:	42050000 	andmi	r0, r5, #0
    8578:	0000b801 	andeq	fp, r0, r1, lsl #16
    857c:	830c1c00 	movwhi	r1, #52224	; 0xcc00
    8580:	05000039 	streq	r0, [r0, #-57]	; 0x39
    8584:	00b80146 	adcseq	r0, r8, r6, asr #2
    8588:	0c200000 	stceq	0, cr0, [r0], #-0
    858c:	0000357e 	andeq	r3, r0, lr, ror r5
    8590:	b8014a05 	stmdalt	r1, {r0, r2, r9, fp, lr}
    8594:	24000000 	strcs	r0, [r0], #-0
    8598:	003acf0c 	eorseq	ip, sl, ip, lsl #30
    859c:	014d0500 	cmpeq	sp, r0, lsl #10
    85a0:	00000302 	andeq	r0, r0, r2, lsl #6
    85a4:	04110028 	ldreq	r0, [r1], #-40	; 0x28
    85a8:	00000213 	andeq	r0, r0, r3, lsl r2
    85ac:	00335b0e 	eorseq	r5, r3, lr, lsl #22
    85b0:	014f0500 	cmpeq	pc, r0, lsl #10
    85b4:	00000269 	andeq	r0, r0, r9, ror #4
    85b8:	42060112 	andmi	r0, r6, #-2147483644	; 0x80000004
    85bc:	00000335 	andeq	r0, r0, r5, lsr r3
    85c0:	00091a09 	andeq	r1, r9, r9, lsl #20
    85c4:	06090000 	streq	r0, [r9], -r0
    85c8:	01000009 	tsteq	r0, r9
    85cc:	00089d09 	andeq	r9, r8, r9, lsl #26
    85d0:	cc090200 	sfmgt	f0, 4, [r9], {-0}
    85d4:	03000008 	movweq	r0, #8
    85d8:	08370300 	ldmdaeq	r7!, {r8, r9}
    85dc:	47060000 	strmi	r0, [r6, -r0]
    85e0:	00000314 	andeq	r0, r0, r4, lsl r3
    85e4:	4f060112 	svcmi	0x00060112
    85e8:	00000355 	andeq	r0, r0, r5, asr r3
    85ec:	00095509 	andeq	r5, r9, r9, lsl #10
    85f0:	6c090000 	stcvs	0, cr0, [r9], {-0}
    85f4:	01000008 	tsteq	r0, r8
    85f8:	08ed0300 	stmiaeq	sp!, {r8, r9}^
    85fc:	52060000 	andpl	r0, r6, #0
    8600:	00000340 	andeq	r0, r0, r0, asr #6
    8604:	5a060112 	bpl	188a54 <_Min_Stack_Size+0x188654>
    8608:	00000381 	andeq	r0, r0, r1, lsl #7
    860c:	0009f409 	andeq	pc, r9, r9, lsl #8
    8610:	03090000 	movweq	r0, #36864	; 0x9000
    8614:	0100000a 	tsteq	r0, sl
    8618:	0009b109 	andeq	fp, r9, r9, lsl #2
    861c:	77090200 	strvc	r0, [r9, -r0, lsl #4]
    8620:	0300000a 	movweq	r0, #10
    8624:	0a1d0300 	beq	74922c <_Min_Stack_Size+0x748e2c>
    8628:	5f060000 	svcpl	0x00060000
    862c:	00000360 	andeq	r0, r0, r0, ror #6
    8630:	6e060112 	mcrvs	1, 0, r0, cr6, cr2, {0}
    8634:	000003a7 	andeq	r0, r0, r7, lsr #7
    8638:	000a3e09 	andeq	r3, sl, r9, lsl #28
    863c:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    8640:	0100000a 	tsteq	r0, sl
    8644:	000a2f09 	andeq	r2, sl, r9, lsl #30
    8648:	03000200 	movweq	r0, #512	; 0x200
    864c:	00000a87 	andeq	r0, r0, r7, lsl #21
    8650:	038c7206 	orreq	r7, ip, #1610612736	; 0x60000000
    8654:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    8658:	03f78406 	mvnseq	r8, #100663296	; 0x6000000
    865c:	12100000 	andsne	r0, r0, #0
    8660:	06000008 	streq	r0, [r0], -r8
    8664:	0000b886 	andeq	fp, r0, r6, lsl #17
    8668:	24100000 	ldrcs	r0, [r0], #-0
    866c:	0600000b 	streq	r0, [r0], -fp
    8670:	00033589 	andeq	r3, r3, r9, lsl #11
    8674:	b7100400 	ldrlt	r0, [r0, -r0, lsl #8]
    8678:	06000008 	streq	r0, [r0], -r8
    867c:	0003818c 	andeq	r8, r3, ip, lsl #3
    8680:	92100500 	andsls	r0, r0, #0, 10
    8684:	06000008 	streq	r0, [r0], -r8
    8688:	0003558f 	andeq	r5, r3, pc, lsl #11
    868c:	6d100600 	ldcvs	6, cr0, [r0, #-0]
    8690:	06000009 	streq	r0, [r0], -r9
    8694:	0003a792 	muleq	r3, r2, r7
    8698:	03000700 	movweq	r0, #1792	; 0x700
    869c:	00000a66 	andeq	r0, r0, r6, ror #20
    86a0:	03b29406 			; <UNDEFINED> instruction: 0x03b29406
    86a4:	2f130000 	svccs	0x00130000
    86a8:	01000044 	tsteq	r0, r4, asr #32
    86ac:	00715841 	rsbseq	r5, r1, r1, asr #16
    86b0:	00007408 	andeq	r7, r0, r8, lsl #8
    86b4:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    86b8:	14000004 	strne	r0, [r0], #-4
    86bc:	000044c5 	andeq	r4, r0, r5, asr #9
    86c0:	03084301 	movweq	r4, #33537	; 0x8301
    86c4:	91020000 	mrsls	r0, (UNDEF: 2)
    86c8:	43da144c 	bicsmi	r1, sl, #76, 8	; 0x4c000000
    86cc:	44010000 	strmi	r0, [r1], #-0
    86d0:	00000213 	andeq	r0, r0, r3, lsl r2
    86d4:	7fb09103 	svcvc	0x00b09103
    86d8:	440b1300 	strmi	r1, [fp], #-768	; 0x300
    86dc:	7a010000 	bvc	486e4 <_Min_Stack_Size+0x482e4>
    86e0:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
    86e4:	00000214 	andeq	r0, r0, r4, lsl r2
    86e8:	04599c01 	ldrbeq	r9, [r9], #-3073	; 0xc01
    86ec:	eb140000 	bl	5086f4 <_Min_Stack_Size+0x5082f4>
    86f0:	01000041 	tsteq	r0, r1, asr #32
    86f4:	0003f77c 	andeq	pc, r3, ip, ror r7	; <UNPREDICTABLE>
    86f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    86fc:	441c1300 	ldrmi	r1, [ip], #-768	; 0x300
    8700:	fa010000 	blx	48708 <_Min_Stack_Size+0x48308>
    8704:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
    8708:	000000ec 	andeq	r0, r0, ip, ror #1
    870c:	048b9c01 	streq	r9, [fp], #3073	; 0xc01
    8710:	ab140000 	blge	508718 <_Min_Stack_Size+0x508318>
    8714:	01000044 	tsteq	r0, r4, asr #32
    8718:	00025dfc 	strdeq	r5, [r2], -ip
    871c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8720:	00352b14 	eorseq	r2, r5, r4, lsl fp
    8724:	b8fd0100 	ldmlt	sp!, {r8}^
    8728:	02000000 	andeq	r0, r0, #0
    872c:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    8730:	000043c2 	andeq	r4, r0, r2, asr #7
    8734:	cc015a01 	stcgt	10, cr5, [r1], {1}
    8738:	54080074 	strpl	r0, [r8], #-116	; 0x74
    873c:	01000000 	mrseq	r0, (UNDEF: 0)
    8740:	0004de9c 	muleq	r4, ip, lr
    8744:	3e901600 	cdpcc	6, 9, cr1, cr0, cr0, {0}
    8748:	5a010000 	bpl	48750 <_Min_Stack_Size+0x48350>
    874c:	0004de01 	andeq	sp, r4, r1, lsl #28
    8750:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8754:	00443a16 	subeq	r3, r4, r6, lsl sl
    8758:	015a0100 	cmpeq	sl, r0, lsl #2
    875c:	000000b8 	strheq	r0, [r0], -r8
    8760:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    8764:	00004449 	andeq	r4, r0, r9, asr #8
    8768:	b8015a01 	stmdalt	r1, {r0, r9, fp, ip, lr}
    876c:	02000000 	andeq	r0, r0, #0
    8770:	fd176491 	ldc2	4, cr6, [r7, #-580]	; 0xfffffdbc
    8774:	01000043 	tsteq	r0, r3, asr #32
    8778:	00ca015c 	sbceq	r0, sl, ip, asr r1
    877c:	91020000 	mrsls	r0, (UNDEF: 2)
    8780:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    8784:	000000b8 	strheq	r0, [r0], -r8
    8788:	0043b115 	subeq	fp, r3, r5, lsl r1
    878c:	017a0100 	cmneq	sl, r0, lsl #2
    8790:	08007520 	stmdaeq	r0, {r5, r8, sl, ip, sp, lr}
    8794:	0000004a 	andeq	r0, r0, sl, asr #32
    8798:	05379c01 	ldreq	r9, [r7, #-3073]!	; 0xc01
    879c:	90160000 	andsls	r0, r6, r0
    87a0:	0100003e 	tsteq	r0, lr, lsr r0
    87a4:	04de017a 	ldrbeq	r0, [lr], #378	; 0x17a
    87a8:	91020000 	mrsls	r0, (UNDEF: 2)
    87ac:	4456166c 	ldrbmi	r1, [r6], #-1644	; 0x66c
    87b0:	7a010000 	bvc	487b8 <_Min_Stack_Size+0x483b8>
    87b4:	0000b801 	andeq	fp, r0, r1, lsl #16
    87b8:	68910200 	ldmvs	r1, {r9}
    87bc:	00444916 	subeq	r4, r4, r6, lsl r9
    87c0:	017a0100 	cmneq	sl, r0, lsl #2
    87c4:	000000b8 	strheq	r0, [r0], -r8
    87c8:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    87cc:	000043fd 	strdeq	r4, [r0], -sp
    87d0:	ca017c01 	bgt	677dc <_Min_Stack_Size+0x673dc>
    87d4:	02000000 	andeq	r0, r0, #0
    87d8:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    87dc:	000043f7 	strdeq	r4, [r0], -r7
    87e0:	6c019401 	cfstrsvs	mvf9, [r1], {1}
    87e4:	34080075 	strcc	r0, [r8], #-117	; 0x75
    87e8:	01000000 	mrseq	r0, (UNDEF: 0)
    87ec:	00056c9c 	muleq	r5, ip, ip
    87f0:	44641600 	strbtmi	r1, [r4], #-1536	; 0x600
    87f4:	94010000 	strls	r0, [r1], #-0
    87f8:	0000ca01 	andeq	ip, r0, r1, lsl #20
    87fc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8800:	0043d417 	subeq	sp, r3, r7, lsl r4
    8804:	01960100 	orrseq	r0, r6, r0, lsl #2
    8808:	000000ca 	andeq	r0, r0, sl, asr #1
    880c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8810:	00015e19 	andeq	r5, r1, r9, lsl lr
    8814:	06a70700 	strteq	r0, [r7], r0, lsl #14
    8818:	000000e4 	andeq	r0, r0, r4, ror #1
    881c:	0007af00 	andeq	sl, r7, r0, lsl #30
    8820:	b8000400 	stmdalt	r0, {sl}
    8824:	04000019 	streq	r0, [r0], #-25
    8828:	00002101 	andeq	r2, r0, r1, lsl #2
    882c:	46ad0100 	strtmi	r0, [sp], r0, lsl #2
    8830:	01140000 	tsteq	r4, r0
    8834:	0a380000 	beq	e0883c <_Min_Stack_Size+0xe0843c>
    8838:	00000000 	andeq	r0, r0, r0
    883c:	3ad30000 	bcc	ff4c8844 <_estack+0xdf498844>
    8840:	01020000 	mrseq	r0, (UNDEF: 2)
    8844:	00014d06 	andeq	r4, r1, r6, lsl #26
    8848:	026e0300 	rsbeq	r0, lr, #0, 6
    884c:	1d020000 	stcne	0, cr0, [r2, #-0]
    8850:	00000037 	andeq	r0, r0, r7, lsr r0
    8854:	4b080102 	blmi	208c64 <_Min_Stack_Size+0x208864>
    8858:	02000001 	andeq	r0, r0, #1
    885c:	01870502 	orreq	r0, r7, r2, lsl #10
    8860:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    8864:	02000004 	andeq	r0, r0, #4
    8868:	0000502b 	andeq	r5, r0, fp, lsr #32
    886c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8870:	0000000e 	andeq	r0, r0, lr
    8874:	00017703 	andeq	r7, r1, r3, lsl #14
    8878:	623f0200 	eorsvs	r0, pc, #0, 4
    887c:	02000000 	andeq	r0, r0, #0
    8880:	00050504 	andeq	r0, r5, r4, lsl #10
    8884:	b4030000 	strlt	r0, [r3], #-0
    8888:	02000005 	andeq	r0, r0, #5
    888c:	00007441 	andeq	r7, r0, r1, asr #8
    8890:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8894:	0000012e 	andeq	r0, r0, lr, lsr #2
    8898:	00050802 	andeq	r0, r5, r2, lsl #16
    889c:	02000000 	andeq	r0, r0, #0
    88a0:	01290708 	teqeq	r9, r8, lsl #14
    88a4:	04040000 	streq	r0, [r4], #-0
    88a8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    88ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    88b0:	00000133 	andeq	r0, r0, r3, lsr r1
    88b4:	00027003 	andeq	r7, r2, r3
    88b8:	2c2a0300 	stccs	3, cr0, [sl], #-0
    88bc:	03000000 	movweq	r0, #0
    88c0:	0000043a 	andeq	r0, r0, sl, lsr r4
    88c4:	00453603 	subeq	r3, r5, r3, lsl #12
    88c8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    88cc:	03000001 	movweq	r0, #1
    88d0:	00005741 	andeq	r5, r0, r1, asr #14
    88d4:	05b60300 	ldreq	r0, [r6, #768]!	; 0x300
    88d8:	42030000 	andmi	r0, r3, #0
    88dc:	00000069 	andeq	r0, r0, r9, rrx
    88e0:	91070402 	tstls	r7, r2, lsl #8
    88e4:	05000001 	streq	r0, [r0, #-1]
    88e8:	000000b8 	strheq	r0, [r0], -r8
    88ec:	0000b806 	andeq	fp, r0, r6, lsl #16
    88f0:	0000df00 	andeq	sp, r0, r0, lsl #30
    88f4:	00c30700 	sbceq	r0, r3, r0, lsl #14
    88f8:	00010000 	andeq	r0, r1, r0
    88fc:	0000a205 	andeq	sl, r0, r5, lsl #4
    8900:	00ad0500 	adceq	r0, sp, r0, lsl #10
    8904:	01080000 	mrseq	r0, (UNDEF: 8)
    8908:	ff01f704 			; <UNDEFINED> instruction: 0xff01f704
    890c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8910:	0000087e 	andeq	r0, r0, lr, ror r8
    8914:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    8918:	00010054 	andeq	r0, r1, r4, asr r0
    891c:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    8920:	00011501 	andeq	r1, r1, r1, lsl #10
    8924:	06860900 	streq	r0, [r6], r0, lsl #18
    8928:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    892c:	000007de 	ldrdeq	r0, [r0], -lr
    8930:	280b0001 	stmdacs	fp, {r0}
    8934:	a103d404 	tstge	r3, r4, lsl #8
    8938:	0c000001 	stceq	0, cr0, [r0], {1}
    893c:	00000939 	andeq	r0, r0, r9, lsr r9
    8940:	ca03d604 	bgt	fe158 <_Min_Stack_Size+0xfdd58>
    8944:	00000000 	andeq	r0, r0, r0
    8948:	0008ff0c 	andeq	pc, r8, ip, lsl #30
    894c:	03d70400 	bicseq	r0, r7, #0, 8
    8950:	000000ca 	andeq	r0, r0, sl, asr #1
    8954:	0a150c04 	beq	54b96c <_Min_Stack_Size+0x54b56c>
    8958:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    895c:	0000ca03 	andeq	ip, r0, r3, lsl #20
    8960:	140c0800 	strne	r0, [ip], #-2048	; 0x800
    8964:	04000009 	streq	r0, [r0], #-9
    8968:	00ca03d9 	ldrdeq	r0, [sl], #57	; 0x39
    896c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8970:	00524449 	subseq	r4, r2, r9, asr #8
    8974:	ca03da04 	bgt	ff18c <_Min_Stack_Size+0xfed8c>
    8978:	10000000 	andne	r0, r0, r0
    897c:	52444f0d 	subpl	r4, r4, #13, 30	; 0x34
    8980:	03db0400 	bicseq	r0, fp, #0, 8
    8984:	000000ca 	andeq	r0, r0, sl, asr #1
    8988:	0b070c14 	bleq	1cb9e0 <_Min_Stack_Size+0x1cb5e0>
    898c:	dc040000 	stcle	0, cr0, [r4], {-0}
    8990:	0000df03 	andeq	sp, r0, r3, lsl #30
    8994:	330c1800 	movwcc	r1, #51200	; 0xc800
    8998:	04000009 	streq	r0, [r0], #-9
    899c:	00df03dd 	ldrsbeq	r0, [pc], #61	; <UNPREDICTABLE>
    89a0:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    89a4:	000008e8 	andeq	r0, r0, r8, ror #17
    89a8:	ca03de04 	bgt	1001c0 <_Min_Stack_Size+0xffdc0>
    89ac:	1c000000 	stcne	0, cr0, [r0], {-0}
    89b0:	5246410d 	subpl	r4, r6, #1073741827	; 0x40000003
    89b4:	03df0400 	bicseq	r0, pc, #0, 8
    89b8:	000001a1 	andeq	r0, r0, r1, lsr #3
    89bc:	cf050020 	svcgt	0x00050020
    89c0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    89c4:	000007fe 	strdeq	r0, [r0], -lr
    89c8:	1503e004 	strne	lr, [r3, #-4]
    89cc:	0b000001 	bleq	89d8 <_Min_Stack_Size+0x85d8>
    89d0:	04e00424 	strbteq	r0, [r0], #1060	; 0x424
    89d4:	000002a4 	andeq	r0, r0, r4, lsr #5
    89d8:	3152430d 	cmpcc	r2, sp, lsl #6
    89dc:	04e20400 	strbteq	r0, [r2], #1024	; 0x400
    89e0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    89e4:	056c0c00 	strbeq	r0, [ip, #-3072]!	; 0xc00
    89e8:	e3040000 	movw	r0, #16384	; 0x4000
    89ec:	0000a204 	andeq	sl, r0, r4, lsl #4
    89f0:	430d0200 	movwmi	r0, #53760	; 0xd200
    89f4:	04003252 	streq	r3, [r0], #-594	; 0x252
    89f8:	00df04e4 	sbcseq	r0, pc, r4, ror #9
    89fc:	0c040000 	stceq	0, cr0, [r4], {-0}
    8a00:	00000576 	andeq	r0, r0, r6, ror r5
    8a04:	a204e504 	andge	lr, r4, #4, 10	; 0x1000000
    8a08:	06000000 	streq	r0, [r0], -r0
    8a0c:	0052530d 	subseq	r5, r2, sp, lsl #6
    8a10:	df04e604 	svcle	0x0004e604
    8a14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8a18:	0005800c 	andeq	r8, r5, ip
    8a1c:	04e70400 	strbteq	r0, [r7], #1024	; 0x400
    8a20:	000000a2 	andeq	r0, r0, r2, lsr #1
    8a24:	52440d0a 	subpl	r0, r4, #640	; 0x280
    8a28:	04e80400 	strbteq	r0, [r8], #1024	; 0x400
    8a2c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8a30:	046c0c0c 	strbteq	r0, [ip], #-3084	; 0xc0c
    8a34:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    8a38:	0000a204 	andeq	sl, r0, r4, lsl #4
    8a3c:	7f0c0e00 	svcvc	0x000c0e00
    8a40:	0400001f 	streq	r0, [r0], #-31
    8a44:	00df04ea 	sbcseq	r0, pc, sl, ror #9
    8a48:	0c100000 	ldceq	0, cr0, [r0], {-0}
    8a4c:	00000596 	muleq	r0, r6, r5
    8a50:	a204eb04 	andge	lr, r4, #4, 22	; 0x1000
    8a54:	12000000 	andne	r0, r0, #0
    8a58:	001f560c 	andseq	r5, pc, ip, lsl #12
    8a5c:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    8a60:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8a64:	05a00c14 	streq	r0, [r0, #3092]!	; 0xc14
    8a68:	ed040000 	stc	0, cr0, [r4, #-0]
    8a6c:	0000a204 	andeq	sl, r0, r4, lsl #4
    8a70:	780c1600 	stmdavc	ip, {r9, sl, ip}
    8a74:	04000020 	streq	r0, [r0], #-32
    8a78:	00df04ee 	sbcseq	r0, pc, lr, ror #9
    8a7c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    8a80:	000005aa 	andeq	r0, r0, sl, lsr #11
    8a84:	a204ef04 	andge	lr, r4, #4, 30
    8a88:	1a000000 	bne	8a90 <_Min_Stack_Size+0x8690>
    8a8c:	0003f20c 	andeq	pc, r3, ip, lsl #4
    8a90:	04f00400 	ldrbteq	r0, [r0], #1024	; 0x400
    8a94:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8a98:	1a310c1c 	bne	c4bb10 <_Min_Stack_Size+0xc4b710>
    8a9c:	f1040000 	cps	#0
    8aa0:	0000a204 	andeq	sl, r0, r4, lsl #4
    8aa4:	590c1e00 	stmdbpl	ip, {r9, sl, fp, ip}
    8aa8:	04000021 	streq	r0, [r0], #-33	; 0x21
    8aac:	00df04f2 	ldrsheq	r0, [pc], #66	; <UNPREDICTABLE>
    8ab0:	0c200000 	stceq	0, cr0, [r0], #-0
    8ab4:	00001a3b 	andeq	r1, r0, fp, lsr sl
    8ab8:	a204f304 	andge	pc, r4, #4, 6	; 0x10000000
    8abc:	22000000 	andcs	r0, r0, #0
    8ac0:	21e10e00 	mvncs	r0, r0, lsl #28
    8ac4:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    8ac8:	0001b204 	andeq	fp, r1, r4, lsl #4
    8acc:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8ad0:	0002d142 	andeq	sp, r2, r2, asr #2
    8ad4:	091a0900 	ldmdbeq	sl, {r8, fp}
    8ad8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8adc:	00000906 	andeq	r0, r0, r6, lsl #18
    8ae0:	089d0901 	ldmeq	sp, {r0, r8, fp}
    8ae4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    8ae8:	000008cc 	andeq	r0, r0, ip, asr #17
    8aec:	37030003 	strcc	r0, [r3, -r3]
    8af0:	05000008 	streq	r0, [r0, #-8]
    8af4:	0002b047 	andeq	fp, r2, r7, asr #32
    8af8:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8afc:	0002f14f 	andeq	pc, r2, pc, asr #2
    8b00:	09550900 	ldmdbeq	r5, {r8, fp}^
    8b04:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8b08:	0000086c 	andeq	r0, r0, ip, ror #16
    8b0c:	ed030001 	stc	0, cr0, [r3, #-4]
    8b10:	05000008 	streq	r0, [r0, #-8]
    8b14:	0002dc52 	andeq	sp, r2, r2, asr ip
    8b18:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8b1c:	00031d5a 	andeq	r1, r3, sl, asr sp
    8b20:	09f40900 	ldmibeq	r4!, {r8, fp}^
    8b24:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8b28:	00000a03 	andeq	r0, r0, r3, lsl #20
    8b2c:	09b10901 	ldmibeq	r1!, {r0, r8, fp}
    8b30:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    8b34:	00000a77 	andeq	r0, r0, r7, ror sl
    8b38:	1d030003 	stcne	0, cr0, [r3, #-12]
    8b3c:	0500000a 	streq	r0, [r0, #-10]
    8b40:	0002fc5f 	andeq	pc, r2, pc, asr ip	; <UNPREDICTABLE>
    8b44:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8b48:	0003436e 	andeq	r4, r3, lr, ror #6
    8b4c:	0a3e0900 	beq	f8af54 <_Min_Stack_Size+0xf8ab54>
    8b50:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8b54:	00000a98 	muleq	r0, r8, sl
    8b58:	0a2f0901 	beq	bcaf64 <_Min_Stack_Size+0xbcab64>
    8b5c:	00020000 	andeq	r0, r2, r0
    8b60:	000a8703 	andeq	r8, sl, r3, lsl #14
    8b64:	28720500 	ldmdacs	r2!, {r8, sl}^
    8b68:	10000003 	andne	r0, r0, r3
    8b6c:	93840508 	orrls	r0, r4, #8, 10	; 0x2000000
    8b70:	11000003 	tstne	r0, r3
    8b74:	00000812 	andeq	r0, r0, r2, lsl r8
    8b78:	00b88605 	adcseq	r8, r8, r5, lsl #12
    8b7c:	11000000 	mrsne	r0, (UNDEF: 0)
    8b80:	00000b24 	andeq	r0, r0, r4, lsr #22
    8b84:	02d18905 	sbcseq	r8, r1, #81920	; 0x14000
    8b88:	11040000 	mrsne	r0, (UNDEF: 4)
    8b8c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    8b90:	031d8c05 	tsteq	sp, #1280	; 0x500
    8b94:	11050000 	mrsne	r0, (UNDEF: 5)
    8b98:	00000892 	muleq	r0, r2, r8
    8b9c:	02f18f05 	rscseq	r8, r1, #5, 30
    8ba0:	11060000 	mrsne	r0, (UNDEF: 6)
    8ba4:	0000096d 	andeq	r0, r0, sp, ror #18
    8ba8:	03439205 	movteq	r9, #12805	; 0x3205
    8bac:	00070000 	andeq	r0, r7, r0
    8bb0:	000a6603 	andeq	r6, sl, r3, lsl #12
    8bb4:	4e940500 	cdpmi	5, 9, cr0, cr4, cr0, {0}
    8bb8:	10000003 	andne	r0, r0, r3
    8bbc:	13360612 	teqne	r6, #18874368	; 0x1200000
    8bc0:	11000004 	tstne	r0, r4
    8bc4:	0000207f 	andeq	r2, r0, pc, ror r0
    8bc8:	00a23806 	adceq	r3, r2, r6, lsl #16
    8bcc:	11000000 	mrsne	r0, (UNDEF: 0)
    8bd0:	000021ed 	andeq	r2, r0, sp, ror #3
    8bd4:	00a23b06 	adceq	r3, r2, r6, lsl #22
    8bd8:	11020000 	mrsne	r0, (UNDEF: 2)
    8bdc:	00002259 	andeq	r2, r0, r9, asr r2
    8be0:	00a23e06 	adceq	r3, r2, r6, lsl #28
    8be4:	11040000 	mrsne	r0, (UNDEF: 4)
    8be8:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    8bec:	00a24106 	adceq	r4, r2, r6, lsl #2
    8bf0:	11060000 	mrsne	r0, (UNDEF: 6)
    8bf4:	000021bd 			; <UNDEFINED> instruction: 0x000021bd
    8bf8:	00a24406 	adceq	r4, r2, r6, lsl #8
    8bfc:	11080000 	mrsne	r0, (UNDEF: 8)
    8c00:	00002208 	andeq	r2, r0, r8, lsl #4
    8c04:	00a24706 	adceq	r4, r2, r6, lsl #14
    8c08:	110a0000 	mrsne	r0, (UNDEF: 10)
    8c0c:	000021cb 	andeq	r2, r0, fp, asr #3
    8c10:	00a24b06 	adceq	r4, r2, r6, lsl #22
    8c14:	110c0000 	mrsne	r0, (UNDEF: 12)
    8c18:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    8c1c:	00a25106 	adceq	r5, r2, r6, lsl #2
    8c20:	110e0000 	mrsne	r0, (UNDEF: 14)
    8c24:	000020f3 	strdeq	r2, [r0], -r3
    8c28:	00a25406 	adceq	r5, r2, r6, lsl #8
    8c2c:	00100000 	andseq	r0, r0, r0
    8c30:	00210e03 	eoreq	r0, r1, r3, lsl #28
    8c34:	9e550600 	cdpls	6, 5, cr0, cr5, cr0, {0}
    8c38:	10000003 	andne	r0, r0, r3
    8c3c:	7b400707 	blvc	100a860 <_Min_Stack_Size+0x100a460>
    8c40:	11000004 	tstne	r0, r4
    8c44:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8c48:	00974207 	addseq	r4, r7, r7, lsl #4
    8c4c:	11000000 	mrsne	r0, (UNDEF: 0)
    8c50:	0000031e 	andeq	r0, r0, lr, lsl r3
    8c54:	00974307 	addseq	r4, r7, r7, lsl #6
    8c58:	11010000 	mrsne	r0, (UNDEF: 1)
    8c5c:	000002e6 	andeq	r0, r0, r6, ror #5
    8c60:	00974407 	addseq	r4, r7, r7, lsl #8
    8c64:	11020000 	mrsne	r0, (UNDEF: 2)
    8c68:	000002a0 	andeq	r0, r0, r0, lsr #5
    8c6c:	00974507 	addseq	r4, r7, r7, lsl #10
    8c70:	11030000 	mrsne	r0, (UNDEF: 3)
    8c74:	00000343 	andeq	r0, r0, r3, asr #6
    8c78:	00974607 	addseq	r4, r7, r7, lsl #12
    8c7c:	11040000 	mrsne	r0, (UNDEF: 4)
    8c80:	000002db 	ldrdeq	r0, [r0], -fp
    8c84:	00974707 	addseq	r4, r7, r7, lsl #14
    8c88:	11050000 	mrsne	r0, (UNDEF: 5)
    8c8c:	000002ab 	andeq	r0, r0, fp, lsr #5
    8c90:	00974807 	addseq	r4, r7, r7, lsl #16
    8c94:	00060000 	andeq	r0, r6, r0
    8c98:	00025b03 	andeq	r5, r2, r3, lsl #22
    8c9c:	1e490700 	cdpne	7, 4, cr0, cr9, cr0, {0}
    8ca0:	10000004 	andne	r0, r0, r4
    8ca4:	a74c0702 	strbge	r0, [ip, -r2, lsl #14]
    8ca8:	11000004 	tstne	r0, r4
    8cac:	00000397 	muleq	r0, r7, r3
    8cb0:	00974e07 	addseq	r4, r7, r7, lsl #28
    8cb4:	11000000 	mrsne	r0, (UNDEF: 0)
    8cb8:	00000278 	andeq	r0, r0, r8, ror r2
    8cbc:	00974f07 	addseq	r4, r7, r7, lsl #30
    8cc0:	00010000 	andeq	r0, r1, r0
    8cc4:	00037c03 	andeq	r7, r3, r3, lsl #24
    8cc8:	86500700 	ldrbhi	r0, [r0], -r0, lsl #14
    8ccc:	10000004 	andne	r0, r0, r4
    8cd0:	df530703 	svcle	0x00530703
    8cd4:	11000004 	tstne	r0, r4
    8cd8:	000044fe 	strdeq	r4, [r0], -lr
    8cdc:	00975507 	addseq	r5, r7, r7, lsl #10
    8ce0:	11000000 	mrsne	r0, (UNDEF: 0)
    8ce4:	000046ee 	andeq	r4, r0, lr, ror #13
    8ce8:	00975607 	addseq	r5, r7, r7, lsl #12
    8cec:	11010000 	mrsne	r0, (UNDEF: 1)
    8cf0:	0000455d 	andeq	r4, r0, sp, asr r5
    8cf4:	00975707 	addseq	r5, r7, r7, lsl #14
    8cf8:	00020000 	andeq	r0, r2, r0
    8cfc:	0045b403 	subeq	fp, r5, r3, lsl #8
    8d00:	b2580700 	subslt	r0, r8, #0, 14
    8d04:	12000004 	andne	r0, r0, #4
    8d08:	00004692 	muleq	r0, r2, r6
    8d0c:	75a06201 	strvc	r6, [r0, #513]!	; 0x201
    8d10:	00760800 	rsbseq	r0, r6, r0, lsl #16
    8d14:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d18:	0000052a 	andeq	r0, r0, sl, lsr #10
    8d1c:	0044dc13 	subeq	sp, r4, r3, lsl ip
    8d20:	2a620100 	bcs	1889128 <_Min_Stack_Size+0x1888d28>
    8d24:	02000005 	andeq	r0, r0, #5
    8d28:	04146c91 	ldreq	r6, [r4], #-3217	; 0xc91
    8d2c:	01000046 	tsteq	r0, r6, asr #32
    8d30:	00009764 	andeq	r9, r0, r4, ror #14
    8d34:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8d38:	00461014 	subeq	r1, r6, r4, lsl r0
    8d3c:	97640100 	strbls	r0, [r4, -r0, lsl #2]!
    8d40:	02000000 	andeq	r0, r0, #0
    8d44:	15007691 	strne	r7, [r0, #-1681]	; 0x691
    8d48:	00047b04 	andeq	r7, r4, r4, lsl #22
    8d4c:	45211200 	strmi	r1, [r1, #-512]!	; 0x200
    8d50:	7c010000 	stcvc	0, cr0, [r1], {-0}
    8d54:	08007618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp, lr}
    8d58:	0000002e 	andeq	r0, r0, lr, lsr #32
    8d5c:	05549c01 	ldrbeq	r9, [r4, #-3073]	; 0xc01
    8d60:	75140000 	ldrvc	r0, [r4, #-0]
    8d64:	01000003 	tsteq	r0, r3
    8d68:	0000977e 	andeq	r9, r0, lr, ror r7
    8d6c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8d70:	47151200 	ldrmi	r1, [r5, -r0, lsl #4]
    8d74:	90010000 	andls	r0, r1, r0
    8d78:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
    8d7c:	00000082 	andeq	r0, r0, r2, lsl #1
    8d80:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
    8d84:	37130000 	ldrcc	r0, [r3, -r0]
    8d88:	01000046 	tsteq	r0, r6, asr #32
    8d8c:	00059490 	muleq	r5, r0, r4
    8d90:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8d94:	00453214 	subeq	r3, r5, r4, lsl r2
    8d98:	97920100 	ldrls	r0, [r2, r0, lsl #2]
    8d9c:	02000000 	andeq	r0, r0, #0
    8da0:	0a147791 	beq	526bec <_Min_Stack_Size+0x5267ec>
    8da4:	01000046 	tsteq	r0, r6, asr #32
    8da8:	00009792 	muleq	r0, r2, r7
    8dac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    8db0:	df041500 	svcle	0x00041500
    8db4:	12000004 	andne	r0, r0, #4
    8db8:	00004586 	andeq	r4, r0, r6, lsl #11
    8dbc:	76ccb301 	strbvc	fp, [ip], r1, lsl #6
    8dc0:	00400800 	subeq	r0, r0, r0, lsl #16
    8dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    8dc8:	000005cc 	andeq	r0, r0, ip, asr #11
    8dcc:	00469e13 	subeq	r9, r6, r3, lsl lr
    8dd0:	97b30100 	ldrls	r0, [r3, r0, lsl #2]!
    8dd4:	02000000 	andeq	r0, r0, #0
    8dd8:	75146f91 	ldrvc	r6, [r4, #-3985]	; 0xf91
    8ddc:	01000003 	tsteq	r0, r3
    8de0:	000097b5 			; <UNDEFINED> instruction: 0x000097b5
    8de4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8de8:	46fd1200 	ldrbtmi	r1, [sp], r0, lsl #4
    8dec:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    8df0:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
    8df4:	00000040 	andeq	r0, r0, r0, asr #32
    8df8:	05fe9c01 	ldrbeq	r9, [lr, #3073]!	; 0xc01
    8dfc:	9e130000 	cdpls	0, 1, cr0, cr3, cr0, {0}
    8e00:	01000046 	tsteq	r0, r6, asr #32
    8e04:	000097c9 	andeq	r9, r0, r9, asr #15
    8e08:	6f910200 	svcvs	0x00910200
    8e0c:	00037514 	andeq	r7, r3, r4, lsl r5
    8e10:	97cb0100 	strbls	r0, [fp, r0, lsl #2]
    8e14:	02000000 	andeq	r0, r0, #0
    8e18:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    8e1c:	00004616 	andeq	r4, r0, r6, lsl r6
    8e20:	774cdd01 	strbvc	sp, [ip, -r1, lsl #26]
    8e24:	00480800 	subeq	r0, r8, r0, lsl #16
    8e28:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e2c:	00000630 	andeq	r0, r0, r0, lsr r6
    8e30:	00457213 	subeq	r7, r5, r3, lsl r2
    8e34:	30dd0100 	sbcscc	r0, sp, r0, lsl #2
    8e38:	02000006 	andeq	r0, r0, #6
    8e3c:	75146c91 	ldrvc	r6, [r4, #-3217]	; 0xc91
    8e40:	01000003 	tsteq	r0, r3
    8e44:	000097df 	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    8e48:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8e4c:	a7041500 	strge	r1, [r4, -r0, lsl #10]
    8e50:	12000004 	andne	r0, r0, #4
    8e54:	0000464e 	andeq	r4, r0, lr, asr #12
    8e58:	7794f601 	ldrvc	pc, [r4, r1, lsl #12]
    8e5c:	00400800 	subeq	r0, r0, r0, lsl #16
    8e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e64:	00000668 	andeq	r0, r0, r8, ror #12
    8e68:	00454913 	subeq	r4, r5, r3, lsl r9
    8e6c:	97f60100 	ldrbls	r0, [r6, r0, lsl #2]!
    8e70:	02000000 	andeq	r0, r0, #0
    8e74:	75146f91 	ldrvc	r6, [r4, #-3985]	; 0xf91
    8e78:	01000003 	tsteq	r0, r3
    8e7c:	000097f8 	strdeq	r9, [r0], -r8
    8e80:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8e84:	450c1600 	strmi	r1, [ip, #-1536]	; 0x600
    8e88:	0a010000 	beq	48e90 <_Min_Stack_Size+0x48a90>
    8e8c:	00009701 	andeq	r9, r0, r1, lsl #14
    8e90:	0077d400 	rsbseq	sp, r7, r0, lsl #8
    8e94:	00001c08 	andeq	r1, r0, r8, lsl #24
    8e98:	929c0100 	addsls	r0, ip, #0, 2
    8e9c:	17000006 	strne	r0, [r0, -r6]
    8ea0:	00000375 	andeq	r0, r0, r5, ror r3
    8ea4:	97010c01 	strls	r0, [r1, -r1, lsl #24]
    8ea8:	02000000 	andeq	r0, r0, #0
    8eac:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    8eb0:	0000462a 	andeq	r4, r0, sl, lsr #12
    8eb4:	f0011b01 			; <UNDEFINED> instruction: 0xf0011b01
    8eb8:	60080077 	andvs	r0, r8, r7, ror r0
    8ebc:	01000000 	mrseq	r0, (UNDEF: 0)
    8ec0:	0006d69c 	muleq	r6, ip, r6
    8ec4:	3e901900 	cdpcc	9, 9, cr1, cr0, cr0, {0}
    8ec8:	1b010000 	blne	48ed0 <_Min_Stack_Size+0x48ad0>
    8ecc:	0006d601 	andeq	sp, r6, r1, lsl #12
    8ed0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8ed4:	0045aa19 	subeq	sl, r5, r9, lsl sl
    8ed8:	011b0100 	tsteq	fp, r0, lsl #2
    8edc:	00000097 	muleq	r0, r7, r0
    8ee0:	19739102 	ldmdbne	r3!, {r1, r8, ip, pc}^
    8ee4:	000045e7 	andeq	r4, r0, r7, ror #11
    8ee8:	a2011b01 	andge	r1, r1, #1024	; 0x400
    8eec:	02000000 	andeq	r0, r0, #0
    8ef0:	15007091 	strne	r7, [r0, #-145]	; 0x91
    8ef4:	00009704 	andeq	r9, r0, r4, lsl #14
    8ef8:	459e1800 	ldrmi	r1, [lr, #2048]	; 0x800
    8efc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8f00:	00785001 	rsbseq	r5, r8, r1
    8f04:	00006c08 	andeq	r6, r0, r8, lsl #24
    8f08:	209c0100 	addscs	r0, ip, r0, lsl #2
    8f0c:	19000007 	stmdbne	r0, {r0, r1, r2}
    8f10:	00003e90 	muleq	r0, r0, lr
    8f14:	d6013e01 	strle	r3, [r1], -r1, lsl #28
    8f18:	02000006 	andeq	r0, r0, #6
    8f1c:	30197491 	mulscc	r9, r1, r4
    8f20:	01000047 	tsteq	r0, r7, asr #32
    8f24:	0097013e 	addseq	r0, r7, lr, lsr r1
    8f28:	91020000 	mrsls	r0, (UNDEF: 2)
    8f2c:	453b1973 	ldrmi	r1, [fp, #-2419]!	; 0x973
    8f30:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8f34:	0000a201 	andeq	sl, r0, r1, lsl #4
    8f38:	70910200 	addsvc	r0, r1, r0, lsl #4
    8f3c:	45d21a00 	ldrbmi	r1, [r2, #2560]	; 0xa00
    8f40:	60010000 	andvs	r0, r1, r0
    8f44:	0078bc01 	rsbseq	fp, r8, r1, lsl #24
    8f48:	00013808 	andeq	r3, r1, r8, lsl #16
    8f4c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    8f50:	17000007 	strne	r0, [r0, -r7]
    8f54:	000041eb 	andeq	r4, r0, fp, ror #3
    8f58:	93016201 	movwls	r6, #4609	; 0x1201
    8f5c:	02000003 	andeq	r0, r0, #3
    8f60:	7b177091 	blvc	5e51ac <_Min_Stack_Size+0x5e4dac>
    8f64:	01000046 	tsteq	r0, r6, asr #32
    8f68:	04130163 	ldreq	r0, [r3], #-355	; 0x163
    8f6c:	91020000 	mrsls	r0, (UNDEF: 2)
    8f70:	ee1b005c 	mrc	0, 0, r0, cr11, cr12, {2}
    8f74:	01000044 	tsteq	r0, r4, asr #32
    8f78:	009701ba 			; <UNDEFINED> instruction: 0x009701ba
    8f7c:	79f40000 	ldmibvc	r4!, {}^	; <UNPREDICTABLE>
    8f80:	00900800 	addseq	r0, r0, r0, lsl #16
    8f84:	9c010000 	stcls	0, cr0, [r1], {-0}
    8f88:	0000077f 	andeq	r0, r0, pc, ror r7
    8f8c:	00468d19 	subeq	r8, r6, r9, lsl sp
    8f90:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    8f94:	00000097 	muleq	r0, r7, r0
    8f98:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8f9c:	00465f1c 	subeq	r5, r6, ip, lsl pc
    8fa0:	01d60100 	bicseq	r0, r6, r0, lsl #2
    8fa4:	000000b8 	strheq	r0, [r0], -r8
    8fa8:	08007a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp, lr}
    8fac:	00000006 	andeq	r0, r0, r6
    8fb0:	5e1d9c01 	cdppl	12, 1, cr9, cr13, cr1, {0}
    8fb4:	08000001 	stmdaeq	r0, {r0}
    8fb8:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    8fbc:	f61e0000 			; <UNDEFINED> instruction: 0xf61e0000
    8fc0:	01000045 	tsteq	r0, r5, asr #32
    8fc4:	0000ca4a 	andeq	ip, r0, sl, asr #20
    8fc8:	30030500 	andcc	r0, r3, r0, lsl #10
    8fcc:	00200000 	eoreq	r0, r0, r0
    8fd0:	0000190a 	andeq	r1, r0, sl, lsl #18
    8fd4:	1b8b0004 	blne	fe2c8fec <_estack+0xde298fec>
    8fd8:	01040000 	mrseq	r0, (UNDEF: 4)
    8fdc:	00000021 	andeq	r0, r0, r1, lsr #32
    8fe0:	004bb901 	subeq	fp, fp, r1, lsl #18
    8fe4:	00011400 	andeq	r1, r1, r0, lsl #8
    8fe8:	000aa800 	andeq	sl, sl, r0, lsl #16
    8fec:	00000000 	andeq	r0, r0, r0
    8ff0:	003e1400 	eorseq	r1, lr, r0, lsl #8
    8ff4:	06010200 	streq	r0, [r1], -r0, lsl #4
    8ff8:	0000014d 	andeq	r0, r0, sp, asr #2
    8ffc:	4b080102 	blmi	20940c <_Min_Stack_Size+0x20900c>
    9000:	02000001 	andeq	r0, r0, #1
    9004:	01870502 	orreq	r0, r7, r2, lsl #10
    9008:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    900c:	02000004 	andeq	r0, r0, #4
    9010:	0000452b 	andeq	r4, r0, fp, lsr #10
    9014:	07020200 	streq	r0, [r2, -r0, lsl #4]
    9018:	0000000e 	andeq	r0, r0, lr
    901c:	00017703 	andeq	r7, r1, r3, lsl #14
    9020:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    9024:	02000000 	andeq	r0, r0, #0
    9028:	00050504 	andeq	r0, r5, r4, lsl #10
    902c:	b4030000 	strlt	r0, [r3], #-0
    9030:	02000005 	andeq	r0, r0, #5
    9034:	00006941 	andeq	r6, r0, r1, asr #18
    9038:	07040200 	streq	r0, [r4, -r0, lsl #4]
    903c:	0000012e 	andeq	r0, r0, lr, lsr #2
    9040:	00050802 	andeq	r0, r5, r2, lsl #16
    9044:	02000000 	andeq	r0, r0, #0
    9048:	01290708 	teqeq	r9, r8, lsl #14
    904c:	04040000 	streq	r0, [r4], #-0
    9050:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    9054:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9058:	00000133 	andeq	r0, r0, r3, lsr r1
    905c:	00043a03 	andeq	r3, r4, r3, lsl #20
    9060:	3a360300 	bcc	d89c68 <_Min_Stack_Size+0xd89868>
    9064:	03000000 	movweq	r0, #0
    9068:	00000179 	andeq	r0, r0, r9, ror r1
    906c:	004c4103 	subeq	r4, ip, r3, lsl #2
    9070:	b6030000 	strlt	r0, [r3], -r0
    9074:	03000005 	movweq	r0, #5
    9078:	00005e42 	andeq	r5, r0, r2, asr #28
    907c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9080:	00000191 	muleq	r0, r1, r1
    9084:	0000a205 	andeq	sl, r0, r5, lsl #4
    9088:	00a20600 	adceq	r0, r2, r0, lsl #12
    908c:	00c90000 	sbceq	r0, r9, r0
    9090:	ad070000 	stcge	0, cr0, [r7, #-0]
    9094:	01000000 	mrseq	r0, (UNDEF: 0)
    9098:	008c0500 	addeq	r0, ip, r0, lsl #10
    909c:	97050000 	strls	r0, [r5, -r0]
    90a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    90a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    90a8:	f7040109 			; <UNDEFINED> instruction: 0xf7040109
    90ac:	0000ee01 	andeq	lr, r0, r1, lsl #28
    90b0:	087e0a00 	ldmdaeq	lr!, {r9, fp}^
    90b4:	0b000000 	bleq	90bc <_Min_Stack_Size+0x8cbc>
    90b8:	00544553 	subseq	r4, r4, r3, asr r5
    90bc:	01090001 	tsteq	r9, r1
    90c0:	0401f904 	streq	pc, [r1], #-2308	; 0x904
    90c4:	0a000001 	beq	90d0 <_Min_Stack_Size+0x8cd0>
    90c8:	00000686 	andeq	r0, r0, r6, lsl #13
    90cc:	07de0a00 	ldrbeq	r0, [lr, r0, lsl #20]
    90d0:	00010000 	andeq	r0, r1, r0
    90d4:	0007af0c 	andeq	sl, r7, ip, lsl #30
    90d8:	01f90400 	mvnseq	r0, r0, lsl #8
    90dc:	000000ee 	andeq	r0, r0, lr, ror #1
    90e0:	d404280d 	strle	r2, [r4], #-2061	; 0x80d
    90e4:	00019c03 	andeq	r9, r1, r3, lsl #24
    90e8:	09390e00 	ldmdbeq	r9!, {r9, sl, fp}
    90ec:	d6040000 	strle	r0, [r4], -r0
    90f0:	0000b403 	andeq	fp, r0, r3, lsl #8
    90f4:	ff0e0000 			; <UNDEFINED> instruction: 0xff0e0000
    90f8:	04000008 	streq	r0, [r0], #-8
    90fc:	00b403d7 	ldrsbteq	r0, [r4], r7
    9100:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    9104:	00000a15 	andeq	r0, r0, r5, lsl sl
    9108:	b403d804 	strlt	sp, [r3], #-2052	; 0x804
    910c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9110:	0009140e 	andeq	r1, r9, lr, lsl #8
    9114:	03d90400 	bicseq	r0, r9, #0, 8
    9118:	000000b4 	strheq	r0, [r0], -r4
    911c:	44490f0c 	strbmi	r0, [r9], #-3852	; 0xf0c
    9120:	da040052 	ble	109270 <_Min_Stack_Size+0x108e70>
    9124:	0000b403 	andeq	fp, r0, r3, lsl #8
    9128:	4f0f1000 	svcmi	0x000f1000
    912c:	04005244 	streq	r5, [r0], #-580	; 0x244
    9130:	00b403db 	ldrsbteq	r0, [r4], fp
    9134:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    9138:	00000b07 	andeq	r0, r0, r7, lsl #22
    913c:	c903dc04 	stmdbgt	r3, {r2, sl, fp, ip, lr, pc}
    9140:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9144:	0009330e 	andeq	r3, r9, lr, lsl #6
    9148:	03dd0400 	bicseq	r0, sp, #0, 8
    914c:	000000c9 	andeq	r0, r0, r9, asr #1
    9150:	08e80e1a 	stmiaeq	r8!, {r1, r3, r4, r9, sl, fp}^
    9154:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    9158:	0000b403 	andeq	fp, r0, r3, lsl #8
    915c:	410f1c00 	tstmi	pc, r0, lsl #24
    9160:	04005246 	streq	r5, [r0], #-582	; 0x246
    9164:	019c03df 			; <UNDEFINED> instruction: 0x019c03df
    9168:	00200000 	eoreq	r0, r0, r0
    916c:	0000b905 	andeq	fp, r0, r5, lsl #18
    9170:	07fe0c00 	ldrbeq	r0, [lr, r0, lsl #24]!
    9174:	e0040000 	and	r0, r4, r0
    9178:	00011003 	andeq	r1, r1, r3
    917c:	04440d00 	strbeq	r0, [r4], #-3328	; 0xd00
    9180:	026c0434 	rsbeq	r0, ip, #52, 8	; 0x34000000
    9184:	430f0000 	movwmi	r0, #61440	; 0xf000
    9188:	36040052 			; <UNDEFINED> instruction: 0x36040052
    918c:	0000b404 	andeq	fp, r0, r4, lsl #8
    9190:	840e0000 	strhi	r0, [lr], #-0
    9194:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    9198:	00b40437 	adcseq	r0, r4, r7, lsr r4
    919c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    91a0:	00002b86 	andeq	r2, r0, r6, lsl #23
    91a4:	b4043804 	strlt	r3, [r4], #-2052	; 0x804
    91a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    91ac:	002e3f0e 	eoreq	r3, lr, lr, lsl #30
    91b0:	04390400 	ldrteq	r0, [r9], #-1024	; 0x400
    91b4:	000000b4 	strheq	r0, [r0], -r4
    91b8:	31fa0e0c 	mvnscc	r0, ip, lsl #28
    91bc:	3a040000 	bcc	1091c4 <_Min_Stack_Size+0x108dc4>
    91c0:	0000b404 	andeq	fp, r0, r4, lsl #8
    91c4:	880e1000 	stmdahi	lr, {ip}
    91c8:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    91cc:	00b4043b 	adcseq	r0, r4, fp, lsr r4
    91d0:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    91d4:	0000314c 	andeq	r3, r0, ip, asr #2
    91d8:	b4043c04 	strlt	r3, [r4], #-3076	; 0xc04
    91dc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    91e0:	002e610e 	eoreq	r6, lr, lr, lsl #2
    91e4:	043d0400 	ldrteq	r0, [sp], #-1024	; 0x400
    91e8:	000000b4 	strheq	r0, [r0], -r4
    91ec:	056c0e1c 	strbeq	r0, [ip, #-3612]!	; 0xe1c
    91f0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    91f4:	0000b904 	andeq	fp, r0, r4, lsl #18
    91f8:	590e2000 	stmdbpl	lr, {sp}
    91fc:	0400002f 	streq	r0, [r0], #-47	; 0x2f
    9200:	00b4043f 	adcseq	r0, r4, pc, lsr r4
    9204:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    9208:	00002ab5 			; <UNDEFINED> instruction: 0x00002ab5
    920c:	b4044004 	strlt	r4, [r4], #-4
    9210:	2c000000 	stccs	0, cr0, [r0], {-0}
    9214:	002a710e 	eoreq	r7, sl, lr, lsl #2
    9218:	04410400 	strbeq	r0, [r1], #-1024	; 0x400
    921c:	000000b4 	strheq	r0, [r0], -r4
    9220:	05760e30 	ldrbeq	r0, [r6, #-3632]!	; 0xe30
    9224:	42040000 	andmi	r0, r4, #0
    9228:	00026c04 	andeq	r6, r2, r4, lsl #24
    922c:	050e3400 	streq	r3, [lr, #-1024]	; 0x400
    9230:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    9234:	00b40443 	adcseq	r0, r4, r3, asr #8
    9238:	00400000 	subeq	r0, r0, r0
    923c:	0000a206 	andeq	sl, r0, r6, lsl #4
    9240:	00027c00 	andeq	r7, r2, r0, lsl #24
    9244:	00ad0700 	adceq	r0, sp, r0, lsl #14
    9248:	00020000 	andeq	r0, r2, r0
    924c:	002c690c 	eoreq	r6, ip, ip, lsl #18
    9250:	04450400 	strbeq	r0, [r5], #-1024	; 0x400
    9254:	000001ad 	andeq	r0, r0, sp, lsr #3
    9258:	e004240d 	and	r2, r4, sp, lsl #8
    925c:	00037a04 	andeq	r7, r3, r4, lsl #20
    9260:	52430f00 	subpl	r0, r3, #0, 30
    9264:	e2040031 	and	r0, r4, #49	; 0x31
    9268:	0000c904 	andeq	ip, r0, r4, lsl #18
    926c:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    9270:	04000005 	streq	r0, [r0], #-5
    9274:	008c04e3 	addeq	r0, ip, r3, ror #9
    9278:	0f020000 	svceq	0x00020000
    927c:	00325243 	eorseq	r5, r2, r3, asr #4
    9280:	c904e404 	stmdbgt	r4, {r2, sl, sp, lr, pc}
    9284:	04000000 	streq	r0, [r0], #-0
    9288:	0005760e 	andeq	r7, r5, lr, lsl #12
    928c:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    9290:	0000008c 	andeq	r0, r0, ip, lsl #1
    9294:	52530f06 	subspl	r0, r3, #6, 30
    9298:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    929c:	000000c9 	andeq	r0, r0, r9, asr #1
    92a0:	05800e08 	streq	r0, [r0, #3592]	; 0xe08
    92a4:	e7040000 	str	r0, [r4, -r0]
    92a8:	00008c04 	andeq	r8, r0, r4, lsl #24
    92ac:	440f0a00 	strmi	r0, [pc], #-2560	; 92b4 <_Min_Stack_Size+0x8eb4>
    92b0:	e8040052 	stmda	r4, {r1, r4, r6}
    92b4:	0000c904 	andeq	ip, r0, r4, lsl #18
    92b8:	6c0e0c00 	stcvs	12, cr0, [lr], {-0}
    92bc:	04000004 	streq	r0, [r0], #-4
    92c0:	008c04e9 	addeq	r0, ip, r9, ror #9
    92c4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    92c8:	00001f7f 	andeq	r1, r0, pc, ror pc
    92cc:	c904ea04 	stmdbgt	r4, {r2, r9, fp, sp, lr, pc}
    92d0:	10000000 	andne	r0, r0, r0
    92d4:	0005960e 	andeq	r9, r5, lr, lsl #12
    92d8:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    92dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    92e0:	1f560e12 	svcne	0x00560e12
    92e4:	ec040000 	stc	0, cr0, [r4], {-0}
    92e8:	0000c904 	andeq	ip, r0, r4, lsl #18
    92ec:	a00e1400 	andge	r1, lr, r0, lsl #8
    92f0:	04000005 	streq	r0, [r0], #-5
    92f4:	008c04ed 	addeq	r0, ip, sp, ror #9
    92f8:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    92fc:	00002078 	andeq	r2, r0, r8, ror r0
    9300:	c904ee04 	stmdbgt	r4, {r2, r9, sl, fp, sp, lr, pc}
    9304:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9308:	0005aa0e 	andeq	sl, r5, lr, lsl #20
    930c:	04ef0400 	strbteq	r0, [pc], #1024	; 9314 <_Min_Stack_Size+0x8f14>
    9310:	0000008c 	andeq	r0, r0, ip, lsl #1
    9314:	03f20e1a 	mvnseq	r0, #416	; 0x1a0
    9318:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    931c:	0000c904 	andeq	ip, r0, r4, lsl #18
    9320:	310e1c00 	tstcc	lr, r0, lsl #24
    9324:	0400001a 	streq	r0, [r0], #-26
    9328:	008c04f1 	strdeq	r0, [ip], r1
    932c:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    9330:	00002159 	andeq	r2, r0, r9, asr r1
    9334:	c904f204 	stmdbgt	r4, {r2, r9, ip, sp, lr, pc}
    9338:	20000000 	andcs	r0, r0, r0
    933c:	001a3b0e 	andseq	r3, sl, lr, lsl #22
    9340:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    9344:	0000008c 	andeq	r0, r0, ip, lsl #1
    9348:	e10c0022 	tst	ip, r2, lsr #32
    934c:	04000021 	streq	r0, [r0], #-33	; 0x21
    9350:	028804f4 	addeq	r0, r8, #244, 8	; 0xf4000000
    9354:	3c100000 	ldccc	0, cr0, [r0], {-0}
    9358:	04433005 	strbeq	r3, [r3], #-5
    935c:	8c110000 	ldchi	0, cr0, [r1], {-0}
    9360:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9364:	0000a232 	andeq	sl, r0, r2, lsr r2
    9368:	b3110000 	tstlt	r1, #0
    936c:	05000031 	streq	r0, [r0, #-49]	; 0x31
    9370:	0000a235 	andeq	sl, r0, r5, lsr r2
    9374:	d9110400 	ldmdble	r1, {sl}
    9378:	05000030 	streq	r0, [r0, #-48]	; 0x30
    937c:	0000a238 	andeq	sl, r0, r8, lsr r2
    9380:	44110800 	ldrmi	r0, [r1], #-2048	; 0x800
    9384:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    9388:	0000a23b 	andeq	sl, r0, fp, lsr r2
    938c:	55110c00 	ldrpl	r0, [r1, #-3072]	; 0xc00
    9390:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    9394:	0000a23e 	andeq	sl, r0, lr, lsr r2
    9398:	03111000 	tsteq	r1, #0
    939c:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    93a0:	0000a241 	andeq	sl, r0, r1, asr #4
    93a4:	7b111400 	blvc	44e3ac <_Min_Stack_Size+0x44dfac>
    93a8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    93ac:	0000a244 	andeq	sl, r0, r4, asr #4
    93b0:	c6111800 	ldrgt	r1, [r1], -r0, lsl #16
    93b4:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    93b8:	0000a247 	andeq	sl, r0, r7, asr #4
    93bc:	f1111c00 			; <UNDEFINED> instruction: 0xf1111c00
    93c0:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    93c4:	0000a24a 	andeq	sl, r0, sl, asr #4
    93c8:	35112000 	ldrcc	r2, [r1, #-0]
    93cc:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    93d0:	0000a24d 	andeq	sl, r0, sp, asr #4
    93d4:	22112400 	andscs	r2, r1, #0, 8
    93d8:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    93dc:	0000a250 	andeq	sl, r0, r0, asr r2
    93e0:	8f112800 	svchi	0x00112800
    93e4:	05000030 	streq	r0, [r0, #-48]	; 0x30
    93e8:	0000a253 	andeq	sl, r0, r3, asr r2
    93ec:	52112c00 	andspl	r2, r1, #0, 24
    93f0:	05000030 	streq	r0, [r0, #-48]	; 0x30
    93f4:	0000a256 	andeq	sl, r0, r6, asr r2
    93f8:	ac113000 	ldcge	0, cr3, [r1], {-0}
    93fc:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9400:	0000a259 	andeq	sl, r0, r9, asr r2
    9404:	5c113400 	cfldrspl	mvf3, [r1], {-0}
    9408:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    940c:	0000a25c 	andeq	sl, r0, ip, asr r2
    9410:	03003800 	movweq	r3, #2048	; 0x800
    9414:	00003261 	andeq	r3, r0, r1, ror #4
    9418:	03865e05 	orreq	r5, r6, #5, 28	; 0x50
    941c:	40100000 	andsmi	r0, r0, r0
    9420:	05176405 	ldreq	r6, [r7, #-1029]	; 0x405
    9424:	e5110000 	ldr	r0, [r1, #-0]
    9428:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    942c:	0000a266 	andeq	sl, r0, r6, ror #4
    9430:	26110000 	ldrcs	r0, [r1], -r0
    9434:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9438:	0000a269 	andeq	sl, r0, r9, ror #4
    943c:	22110400 	andscs	r0, r1, #0, 8
    9440:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9444:	0000a26c 	andeq	sl, r0, ip, ror #4
    9448:	b6110800 	ldrlt	r0, [r1], -r0, lsl #16
    944c:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9450:	0000a26f 	andeq	sl, r0, pc, ror #4
    9454:	e9110c00 	ldmdb	r1, {sl, fp}
    9458:	05000030 	streq	r0, [r0, #-48]	; 0x30
    945c:	0000a272 	andeq	sl, r0, r2, ror r2
    9460:	c1111000 	tstgt	r1, r0
    9464:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    9468:	0000a275 	andeq	sl, r0, r5, ror r2
    946c:	da111400 	ble	44e474 <_Min_Stack_Size+0x44e074>
    9470:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    9474:	0000a278 	andeq	sl, r0, r8, ror r2
    9478:	8a111800 	bhi	44f480 <_Min_Stack_Size+0x44f080>
    947c:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9480:	0000a27b 	andeq	sl, r0, fp, ror r2
    9484:	0d111c00 	ldceq	12, cr1, [r1, #-0]
    9488:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    948c:	0000a27e 	andeq	sl, r0, lr, ror r2
    9490:	c4112000 	ldrgt	r2, [r1], #-0
    9494:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    9498:	0000a281 	andeq	sl, r0, r1, lsl #5
    949c:	20112400 	andscs	r2, r1, r0, lsl #8
    94a0:	05000031 	streq	r0, [r0, #-49]	; 0x31
    94a4:	0000a284 	andeq	sl, r0, r4, lsl #5
    94a8:	36112800 	ldrcc	r2, [r1], -r0, lsl #16
    94ac:	05000031 	streq	r0, [r0, #-49]	; 0x31
    94b0:	0000a287 	andeq	sl, r0, r7, lsl #5
    94b4:	f9112c00 			; <UNDEFINED> instruction: 0xf9112c00
    94b8:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    94bc:	0000a28a 	andeq	sl, r0, sl, lsl #5
    94c0:	f0113000 			; <UNDEFINED> instruction: 0xf0113000
    94c4:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    94c8:	0000a28c 	andeq	sl, r0, ip, lsl #5
    94cc:	c3113400 	tstgt	r1, #0, 8
    94d0:	05000031 	streq	r0, [r0, #-49]	; 0x31
    94d4:	0000a28f 	andeq	sl, r0, pc, lsl #5
    94d8:	15113800 	ldrne	r3, [r1, #-2048]	; 0x800
    94dc:	05000030 	streq	r0, [r0, #-48]	; 0x30
    94e0:	0000a292 	muleq	r0, r2, r2
    94e4:	03003c00 	movweq	r3, #3072	; 0xc00
    94e8:	00002a5a 	andeq	r2, r0, sl, asr sl
    94ec:	044e9405 	strbeq	r9, [lr], #-1029	; 0x405
    94f0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    94f4:	054fa705 	strbeq	sl, [pc, #-1797]	; 8df7 <_Min_Stack_Size+0x89f7>
    94f8:	a7110000 	ldrge	r0, [r1, -r0]
    94fc:	05000030 	streq	r0, [r0, #-48]	; 0x30
    9500:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    9504:	9c110000 	ldcls	0, cr0, [r1], {-0}
    9508:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    950c:	0000a2ac 	andeq	sl, r0, ip, lsr #5
    9510:	0c110400 	cfldrseq	mvf0, [r1], {-0}
    9514:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    9518:	0000a2af 	andeq	sl, r0, pc, lsr #5
    951c:	03000800 	movweq	r0, #2048	; 0x800
    9520:	00002dc8 	andeq	r2, r0, r8, asr #27
    9524:	0522b105 	streq	fp, [r2, #-261]!	; 0x105
    9528:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    952c:	05db3006 	ldrbeq	r3, [fp, #6]
    9530:	54110000 	ldrpl	r0, [r1], #-0
    9534:	06000026 	streq	r0, [r0], -r6, lsr #32
    9538:	0000a232 	andeq	sl, r0, r2, lsr r2
    953c:	e5110000 	ldr	r0, [r1, #-0]
    9540:	06000026 	streq	r0, [r0], -r6, lsr #32
    9544:	0000a235 	andeq	sl, r0, r5, lsr r2
    9548:	05110400 	ldreq	r0, [r1, #-1024]	; 0x400
    954c:	06000025 	streq	r0, [r0], -r5, lsr #32
    9550:	0000a238 	andeq	sl, r0, r8, lsr r2
    9554:	5d110800 	ldcpl	8, cr0, [r1, #-0]
    9558:	06000029 	streq	r0, [r0], -r9, lsr #32
    955c:	0000a240 	andeq	sl, r0, r0, asr #4
    9560:	3f110c00 	svccc	0x00110c00
    9564:	06000029 	streq	r0, [r0], -r9, lsr #32
    9568:	0000a248 	andeq	sl, r0, r8, asr #4
    956c:	02111000 	andseq	r1, r1, #0
    9570:	0600002a 	streq	r0, [r0], -sl, lsr #32
    9574:	0000a250 	andeq	sl, r0, r0, asr r2
    9578:	1a111400 	bne	44e580 <_Min_Stack_Size+0x44e180>
    957c:	06000029 	streq	r0, [r0], -r9, lsr #32
    9580:	0000a256 	andeq	sl, r0, r6, asr r2
    9584:	dd111800 	ldcle	8, cr1, [r1, #-0]
    9588:	06000029 	streq	r0, [r0], -r9, lsr #32
    958c:	0000a259 	andeq	sl, r0, r9, asr r2
    9590:	0c111c00 	ldceq	12, cr1, [r1], {-0}
    9594:	06000027 	streq	r0, [r0], -r7, lsr #32
    9598:	0000a25c 	andeq	sl, r0, ip, asr r2
    959c:	32112000 	andscc	r2, r1, #0
    95a0:	06000026 	streq	r0, [r0], -r6, lsr #32
    95a4:	0000a25f 	andeq	sl, r0, pc, asr r2
    95a8:	03002400 	movweq	r2, #1024	; 0x400
    95ac:	000027f5 	strdeq	r2, [r0], -r5
    95b0:	055a6106 	ldrbeq	r6, [sl, #-262]	; 0x106
    95b4:	01120000 	tsteq	r2, r0
    95b8:	06074207 	streq	r4, [r7], -r7, lsl #4
    95bc:	1a0a0000 	bne	2895c4 <_Min_Stack_Size+0x2891c4>
    95c0:	00000009 	andeq	r0, r0, r9
    95c4:	0009060a 	andeq	r0, r9, sl, lsl #12
    95c8:	9d0a0100 	stflss	f0, [sl, #-0]
    95cc:	02000008 	andeq	r0, r0, #8
    95d0:	0008cc0a 	andeq	ip, r8, sl, lsl #24
    95d4:	03000300 	movweq	r0, #768	; 0x300
    95d8:	00000837 	andeq	r0, r0, r7, lsr r8
    95dc:	05e64707 	strbeq	r4, [r6, #1799]!	; 0x707
    95e0:	01120000 	tsteq	r2, r0
    95e4:	06274f07 	strteq	r4, [r7], -r7, lsl #30
    95e8:	550a0000 	strpl	r0, [sl, #-0]
    95ec:	00000009 	andeq	r0, r0, r9
    95f0:	00086c0a 	andeq	r6, r8, sl, lsl #24
    95f4:	03000100 	movweq	r0, #256	; 0x100
    95f8:	000008ed 	andeq	r0, r0, sp, ror #17
    95fc:	06125207 	ldreq	r5, [r2], -r7, lsl #4
    9600:	01120000 	tsteq	r2, r0
    9604:	06535a07 	ldrbeq	r5, [r3], -r7, lsl #20
    9608:	f40a0000 	vst4.8	{d0-d3}, [sl], r0
    960c:	00000009 	andeq	r0, r0, r9
    9610:	000a030a 	andeq	r0, sl, sl, lsl #6
    9614:	b10a0100 	mrslt	r0, (UNDEF: 26)
    9618:	02000009 	andeq	r0, r0, #9
    961c:	000a770a 	andeq	r7, sl, sl, lsl #14
    9620:	03000300 	movweq	r0, #768	; 0x300
    9624:	00000a1d 	andeq	r0, r0, sp, lsl sl
    9628:	06325f07 	ldrteq	r5, [r2], -r7, lsl #30
    962c:	01120000 	tsteq	r2, r0
    9630:	06796e07 	ldrbteq	r6, [r9], -r7, lsl #28
    9634:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
    9638:	0000000a 	andeq	r0, r0, sl
    963c:	000a980a 	andeq	r9, sl, sl, lsl #16
    9640:	2f0a0100 	svccs	0x000a0100
    9644:	0200000a 	andeq	r0, r0, #10
    9648:	0a870300 	beq	fe1ca250 <_estack+0xde19a250>
    964c:	72070000 	andvc	r0, r7, #0
    9650:	0000065e 	andeq	r0, r0, lr, asr r6
    9654:	7a070112 	bvc	1c9aa4 <_Min_Stack_Size+0x1c96a4>
    9658:	00000699 	muleq	r0, r9, r6
    965c:	00087a0a 	andeq	r7, r8, sl, lsl #20
    9660:	1b0a0000 	blne	289668 <_Min_Stack_Size+0x289268>
    9664:	01000008 	tsteq	r0, r8
    9668:	09d40300 	ldmibeq	r4, {r8, r9}^
    966c:	7d070000 	stcvc	0, cr0, [r7, #-0]
    9670:	00000684 	andeq	r0, r0, r4, lsl #13
    9674:	84070810 	strhi	r0, [r7], #-2064	; 0x810
    9678:	000006e9 	andeq	r0, r0, r9, ror #13
    967c:	00081211 	andeq	r1, r8, r1, lsl r2
    9680:	a2860700 	addge	r0, r6, #0, 14
    9684:	00000000 	andeq	r0, r0, r0
    9688:	000b2411 	andeq	r2, fp, r1, lsl r4
    968c:	07890700 	streq	r0, [r9, r0, lsl #14]
    9690:	04000006 	streq	r0, [r0], #-6
    9694:	0008b711 	andeq	fp, r8, r1, lsl r7
    9698:	538c0700 	orrpl	r0, ip, #0, 14
    969c:	05000006 	streq	r0, [r0, #-6]
    96a0:	00089211 	andeq	r9, r8, r1, lsl r2
    96a4:	278f0700 	strcs	r0, [pc, r0, lsl #14]
    96a8:	06000006 	streq	r0, [r0], -r6
    96ac:	00096d11 	andeq	r6, r9, r1, lsl sp
    96b0:	79920700 	ldmibvc	r2, {r8, r9, sl}
    96b4:	07000006 	streq	r0, [r0, -r6]
    96b8:	0a660300 	beq	198a2c0 <_Min_Stack_Size+0x1989ec0>
    96bc:	94070000 	strls	r0, [r7], #-0
    96c0:	000006a4 	andeq	r0, r0, r4, lsr #13
    96c4:	36081210 			; <UNDEFINED> instruction: 0x36081210
    96c8:	00000769 	andeq	r0, r0, r9, ror #14
    96cc:	00207f11 	eoreq	r7, r0, r1, lsl pc
    96d0:	8c380800 	ldchi	8, cr0, [r8], #-0
    96d4:	00000000 	andeq	r0, r0, r0
    96d8:	0021ed11 	eoreq	lr, r1, r1, lsl sp
    96dc:	8c3b0800 	ldchi	8, cr0, [fp], #-0
    96e0:	02000000 	andeq	r0, r0, #0
    96e4:	00225911 	eoreq	r5, r2, r1, lsl r9
    96e8:	8c3e0800 	ldchi	8, cr0, [lr], #-0
    96ec:	04000000 	streq	r0, [r0], #-0
    96f0:	00219f11 	eoreq	r9, r1, r1, lsl pc
    96f4:	8c410800 	mcrrhi	8, 0, r0, r1, cr0
    96f8:	06000000 	streq	r0, [r0], -r0
    96fc:	0021bd11 	eoreq	fp, r1, r1, lsl sp
    9700:	8c440800 	mcrrhi	8, 0, r0, r4, cr0
    9704:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9708:	00220811 	eoreq	r0, r2, r1, lsl r8
    970c:	8c470800 	mcrrhi	8, 0, r0, r7, cr0
    9710:	0a000000 	beq	9718 <_Min_Stack_Size+0x9318>
    9714:	0021cb11 	eoreq	ip, r1, r1, lsl fp
    9718:	8c4b0800 	mcrrhi	8, 0, r0, fp, cr0
    971c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9720:	0021b011 	eoreq	fp, r1, r1, lsl r0
    9724:	8c510800 	mrrchi	8, 0, r0, r1, cr0
    9728:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    972c:	0020f311 	eoreq	pc, r0, r1, lsl r3	; <UNPREDICTABLE>
    9730:	8c540800 	mrrchi	8, 0, r0, r4, cr0
    9734:	10000000 	andne	r0, r0, r0
    9738:	210e0300 	mrscs	r0, ELR_hyp
    973c:	55080000 	strpl	r0, [r8, #-0]
    9740:	000006f4 	strdeq	r0, [r0], -r4
    9744:	00489f13 	subeq	r9, r8, r3, lsl pc
    9748:	3a090800 	bcc	24b750 <_Min_Stack_Size+0x24b350>
    974c:	000007a5 	andeq	r0, r0, r5, lsr #15
    9750:	00486011 	subeq	r6, r8, r1, lsl r0
    9754:	a53c0900 	ldrge	r0, [ip, #-2304]!	; 0x900
    9758:	00000007 	andeq	r0, r0, r7
    975c:	00320a11 	eorseq	r0, r2, r1, lsl sl
    9760:	8c3d0900 	ldchi	9, cr0, [sp], #-0
    9764:	04000000 	streq	r0, [r0], #-0
    9768:	002a8f11 	eoreq	r8, sl, r1, lsl pc
    976c:	8c3e0900 	ldchi	9, cr0, [lr], #-0
    9770:	06000000 	streq	r0, [r0], -r0
    9774:	d3041400 	movwle	r1, #17408	; 0x4400
    9778:	03000000 	movweq	r0, #0
    977c:	00004ca5 	andeq	r4, r0, r5, lsr #25
    9780:	07744009 	ldrbeq	r4, [r4, -r9]!
    9784:	04100000 	ldreq	r0, [r0], #-0
    9788:	07d33f0a 	ldrbeq	r3, [r3, sl, lsl #30]
    978c:	58150000 	ldmdapl	r5, {}	; <UNPREDICTABLE>
    9790:	33410a00 	movtcc	r0, #6656	; 0x1a00
    9794:	00000000 	andeq	r0, r0, r0
    9798:	0a005915 	beq	1fbf4 <_Min_Stack_Size+0x1f7f4>
    979c:	00003342 	andeq	r3, r0, r2, asr #6
    97a0:	03000200 	movweq	r0, #512	; 0x200
    97a4:	000049a6 	andeq	r4, r0, r6, lsr #19
    97a8:	07de430a 	ldrbeq	r4, [lr, sl, lsl #6]
    97ac:	04140000 	ldreq	r0, [r4], #-0
    97b0:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    97b4:	00484016 	subeq	r4, r8, r6, lsl r0
    97b8:	8c720100 	ldfhie	f0, [r2], #-0
    97bc:	2408007a 	strcs	r0, [r8], #-122	; 0x7a
    97c0:	01000002 	tsteq	r0, r2
    97c4:	0008089c 	muleq	r8, ip, r8
    97c8:	41eb1700 	mvnmi	r1, r0, lsl #14
    97cc:	74010000 	strvc	r0, [r1], #-0
    97d0:	000006e9 	andeq	r0, r0, r9, ror #13
    97d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    97d8:	0047ab16 	subeq	sl, r7, r6, lsl fp
    97dc:	b0e70100 	rsclt	r0, r7, r0, lsl #2
    97e0:	b208007c 	andlt	r0, r8, #124	; 0x7c
    97e4:	01000000 	mrseq	r0, (UNDEF: 0)
    97e8:	00082d9c 	muleq	r8, ip, sp
    97ec:	2b9c1700 	blcs	fe70f3f4 <_estack+0xde6df3f4>
    97f0:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    97f4:	00000443 	andeq	r0, r0, r3, asr #8
    97f8:	7fbc9103 	svcvc	0x00bc9103
    97fc:	47ce1800 	strbmi	r1, [lr, r0, lsl #16]
    9800:	3c010000 	stccc	0, cr0, [r1], {-0}
    9804:	007d6401 	rsbseq	r6, sp, r1, lsl #8
    9808:	0000b408 	andeq	fp, r0, r8, lsl #8
    980c:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    9810:	19000008 	stmdbne	r0, {r3}
    9814:	00002f67 	andeq	r2, r0, r7, ror #30
    9818:	17013e01 	strne	r3, [r1, -r1, lsl #28]
    981c:	03000005 	movweq	r0, #5
    9820:	007fb891 			; <UNDEFINED> instruction: 0x007fb891
    9824:	00492918 	subeq	r2, r9, r8, lsl r9
    9828:	018d0100 	orreq	r0, sp, r0, lsl #2
    982c:	08007e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp, lr}
    9830:	0000002c 	andeq	r0, r0, ip, lsr #32
    9834:	087a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}^
    9838:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    983c:	01000006 	tsteq	r0, r6
    9840:	0104018d 	smlabbeq	r4, sp, r1, r0
    9844:	91020000 	mrsls	r0, (UNDEF: 2)
    9848:	121b0077 	andsne	r0, fp, #119	; 0x77
    984c:	0100004c 	tsteq	r0, ip, asr #32
    9850:	7e44019e 	mcrvc	1, 2, r0, cr4, cr14, {4}
    9854:	00400800 	subeq	r0, r0, r0, lsl #16
    9858:	9c010000 	stcls	0, cr0, [r1], {-0}
    985c:	000008a0 	andeq	r0, r0, r0, lsr #17
    9860:	002c811a 	eoreq	r8, ip, sl, lsl r1
    9864:	019e0100 	orrseq	r0, lr, r0, lsl #2
    9868:	00000069 	andeq	r0, r0, r9, rrx
    986c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9870:	00494d1b 	subeq	r4, r9, fp, lsl sp
    9874:	01b20100 			; <UNDEFINED> instruction: 0x01b20100
    9878:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
    987c:	0000002c 	andeq	r0, r0, ip, lsr #32
    9880:	08d59c01 	ldmeq	r5, {r0, sl, fp, ip, pc}^
    9884:	4c1a0000 	ldcmi	0, cr0, [sl], {-0}
    9888:	01000047 	tsteq	r0, r7, asr #32
    988c:	004501b2 	strheq	r0, [r5], #-18	; 0xffffffee
    9890:	91020000 	mrsls	r0, (UNDEF: 2)
    9894:	49b41a76 	ldmibmi	r4!, {r1, r2, r4, r5, r6, r9, fp, ip}
    9898:	b2010000 	andlt	r0, r1, #0
    989c:	00004501 	andeq	r4, r0, r1, lsl #10
    98a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    98a4:	4b631b00 	blmi	18d04ac <_Min_Stack_Size+0x18d00ac>
    98a8:	c0010000 	andgt	r0, r1, r0
    98ac:	007eb001 	rsbseq	fp, lr, r1
    98b0:	00002c08 	andeq	r2, r0, r8, lsl #24
    98b4:	0a9c0100 	beq	fe709cbc <_estack+0xde6d9cbc>
    98b8:	1a000009 	bne	98e4 <_Min_Stack_Size+0x94e4>
    98bc:	0000474c 	andeq	r4, r0, ip, asr #14
    98c0:	0a01c001 	beq	798cc <_Min_Stack_Size+0x794cc>
    98c4:	02000009 	andeq	r0, r0, #9
    98c8:	b41a7491 	ldrlt	r7, [sl], #-1169	; 0x491
    98cc:	01000049 	tsteq	r0, r9, asr #32
    98d0:	090a01c0 	stmdbeq	sl, {r6, r7, r8}
    98d4:	91020000 	mrsls	r0, (UNDEF: 2)
    98d8:	04140070 	ldreq	r0, [r4], #-112	; 0x70
    98dc:	00000045 	andeq	r0, r0, r5, asr #32
    98e0:	0047451b 	subeq	r4, r7, fp, lsl r5
    98e4:	01cb0100 	biceq	r0, fp, r0, lsl #2
    98e8:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    98ec:	00000020 	andeq	r0, r0, r0, lsr #32
    98f0:	09369c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}
    98f4:	b81a0000 	ldmdalt	sl, {}	; <UNPREDICTABLE>
    98f8:	01000049 	tsteq	r0, r9, asr #32
    98fc:	004501cb 	subeq	r0, r5, fp, asr #3
    9900:	91020000 	mrsls	r0, (UNDEF: 2)
    9904:	ad1b0076 	ldcge	0, cr0, [fp, #-472]	; 0xfffffe28
    9908:	01000049 	tsteq	r0, r9, asr #32
    990c:	7efc01d5 	mrcvc	1, 7, r0, cr12, cr5, {6}
    9910:	00200800 	eoreq	r0, r0, r0, lsl #16
    9914:	9c010000 	stcls	0, cr0, [r1], {-0}
    9918:	0000095c 	andeq	r0, r0, ip, asr r9
    991c:	0049b81a 	subeq	fp, r9, sl, lsl r8
    9920:	01d50100 	bicseq	r0, r5, r0, lsl #2
    9924:	00000045 	andeq	r0, r0, r5, asr #32
    9928:	00769102 	rsbseq	r9, r6, r2, lsl #2
    992c:	004c4c1b 	subeq	r4, ip, fp, lsl ip
    9930:	01df0100 	bicseq	r0, pc, r0, lsl #2
    9934:	08007f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
    9938:	0000001c 	andeq	r0, r0, ip, lsl r0
    993c:	09829c01 	stmibeq	r2, {r0, sl, fp, ip, pc}
    9940:	ec1a0000 	ldc	0, cr0, [sl], {-0}
    9944:	0100004c 	tsteq	r0, ip, asr #32
    9948:	098201df 	stmibeq	r2, {r0, r1, r2, r3, r4, r6, r7, r8}
    994c:	91020000 	mrsls	r0, (UNDEF: 2)
    9950:	04140074 	ldreq	r0, [r4], #-116	; 0x74
    9954:	000007ab 	andeq	r0, r0, fp, lsr #15
    9958:	0048a618 	subeq	sl, r8, r8, lsl r6
    995c:	01ea0100 	mvneq	r0, r0, lsl #2
    9960:	08007f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
    9964:	00000040 	andeq	r0, r0, r0, asr #32
    9968:	09ae9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}
    996c:	ba1a0000 	blt	689974 <_Min_Stack_Size+0x689574>
    9970:	01000048 	tsteq	r0, r8, asr #32
    9974:	002c01ea 	eoreq	r0, ip, sl, ror #3
    9978:	91020000 	mrsls	r0, (UNDEF: 2)
    997c:	ba1c0077 	blt	709b60 <_Min_Stack_Size+0x709760>
    9980:	0100004c 	tsteq	r0, ip, asr #32
    9984:	098201fc 	stmibeq	r2, {r2, r3, r4, r5, r6, r7, r8}
    9988:	7f780000 	svcvc	0x00780000
    998c:	00180800 	andseq	r0, r8, r0, lsl #16
    9990:	9c010000 	stcls	0, cr0, [r1], {-0}
    9994:	00475618 	subeq	r5, r7, r8, lsl r6
    9998:	020a0100 	andeq	r0, sl, #0, 2
    999c:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
    99a0:	00000050 	andeq	r0, r0, r0, asr r0
    99a4:	09f99c01 	ldmibeq	r9!, {r0, sl, fp, ip, pc}^
    99a8:	fb1a0000 	blx	6899b2 <_Min_Stack_Size+0x6895b2>
    99ac:	01000022 	tsteq	r0, r2, lsr #32
    99b0:	0045020a 	subeq	r0, r5, sl, lsl #4
    99b4:	91020000 	mrsls	r0, (UNDEF: 2)
    99b8:	4a78196e 	bmi	1e0ff78 <_Min_Stack_Size+0x1e0fb78>
    99bc:	0c010000 	stceq	0, cr0, [r1], {-0}
    99c0:	00004502 	andeq	r4, r0, r2, lsl #10
    99c4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    99c8:	47781b00 	ldrbmi	r1, [r8, -r0, lsl #22]!
    99cc:	1c010000 	stcne	0, cr0, [r1], {-0}
    99d0:	007fe002 	rsbseq	lr, pc, r2
    99d4:	00004008 	andeq	r4, r0, r8
    99d8:	2e9c0100 	fmlcse	f0, f4, f0
    99dc:	1a00000a 	bne	9a0c <_Min_Stack_Size+0x960c>
    99e0:	000049b8 			; <UNDEFINED> instruction: 0x000049b8
    99e4:	45021c01 	strmi	r1, [r2, #-3073]	; 0xc01
    99e8:	02000000 	andeq	r0, r0, #0
    99ec:	d4196e91 	ldrle	r6, [r9], #-3729	; 0xe91
    99f0:	01000043 	tsteq	r0, r3, asr #32
    99f4:	0069021e 	rsbeq	r0, r9, lr, lsl r2
    99f8:	91020000 	mrsls	r0, (UNDEF: 2)
    99fc:	4b1d0074 	blmi	749bd4 <_Min_Stack_Size+0x7497d4>
    9a00:	01000048 	tsteq	r0, r8, asr #32
    9a04:	0069022d 	rsbeq	r0, r9, sp, lsr #4
    9a08:	80200000 	eorhi	r0, r0, r0
    9a0c:	00380800 	eorseq	r0, r8, r0, lsl #16
    9a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a14:	00000a67 	andeq	r0, r0, r7, ror #20
    9a18:	004b711a 	subeq	r7, fp, sl, lsl r1
    9a1c:	022d0100 	eoreq	r0, sp, #0, 2
    9a20:	00000045 	andeq	r0, r0, r5, asr #32
    9a24:	1a769102 	bne	1dade34 <_Min_Stack_Size+0x1dada34>
    9a28:	0000489a 	muleq	r0, sl, r8
    9a2c:	45022d01 	strmi	r2, [r2, #-3329]	; 0xd01
    9a30:	02000000 	andeq	r0, r0, #0
    9a34:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    9a38:	00004824 	andeq	r4, r0, r4, lsr #16
    9a3c:	58023701 	stmdapl	r2, {r0, r8, r9, sl, ip, sp}
    9a40:	68080080 	stmdavs	r8, {r7}
    9a44:	01000000 	mrseq	r0, (UNDEF: 0)
    9a48:	000a9c9c 	muleq	sl, ip, ip
    9a4c:	48ed1a00 	stmiami	sp!, {r9, fp, ip}^
    9a50:	37010000 	strcc	r0, [r1, -r0]
    9a54:	00006902 	andeq	r6, r0, r2, lsl #18
    9a58:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9a5c:	002add19 	eoreq	sp, sl, r9, lsl sp
    9a60:	02390100 	eorseq	r0, r9, #0, 2
    9a64:	0000054f 	andeq	r0, r0, pc, asr #10
    9a68:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    9a6c:	004c6b18 	subeq	r6, ip, r8, lsl fp
    9a70:	02530100 	subseq	r0, r3, #0, 2
    9a74:	080080c0 	stmdaeq	r0, {r6, r7, pc}
    9a78:	00000048 	andeq	r0, r0, r8, asr #32
    9a7c:	0ac29c01 	beq	ff0b0a88 <_estack+0xdf080a88>
    9a80:	dd190000 	ldcle	0, cr0, [r9, #-0]
    9a84:	0100002a 	tsteq	r0, sl, lsr #32
    9a88:	054f0255 	strbeq	r0, [pc, #-597]	; 983b <_Min_Stack_Size+0x943b>
    9a8c:	91020000 	mrsls	r0, (UNDEF: 2)
    9a90:	821b006c 	andshi	r0, fp, #108	; 0x6c
    9a94:	0100004a 	tsteq	r0, sl, asr #32
    9a98:	8108026c 	tsthi	r8, ip, ror #4
    9a9c:	01200800 	teqeq	r0, r0, lsl #16
    9aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9aa4:	00000b40 	andeq	r0, r0, r0, asr #22
    9aa8:	004b711a 	subeq	r7, fp, sl, lsl r1
    9aac:	026c0100 	rsbeq	r0, ip, #0, 2
    9ab0:	00000045 	andeq	r0, r0, r5, asr #32
    9ab4:	1a669102 	bne	19adec4 <_Min_Stack_Size+0x19adac4>
    9ab8:	0000489a 	muleq	r0, sl, r8
    9abc:	45026c01 	strmi	r6, [r2, #-3073]	; 0xc01
    9ac0:	02000000 	andeq	r0, r0, #0
    9ac4:	631e6491 	tstvs	lr, #-1862270976	; 0x91000000
    9ac8:	026c0100 	rsbeq	r0, ip, #0, 2
    9acc:	00000b40 	andeq	r0, r0, r0, asr #22
    9ad0:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    9ad4:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    9ad8:	69026e01 	stmdbvs	r2, {r0, r9, sl, fp, sp, lr}
    9adc:	02000000 	andeq	r0, r0, #0
    9ae0:	ab197491 	blge	666d2c <_Min_Stack_Size+0x66692c>
    9ae4:	01000010 	tsteq	r0, r0, lsl r0
    9ae8:	0069026e 	rsbeq	r0, r9, lr, ror #4
    9aec:	91020000 	mrsls	r0, (UNDEF: 2)
    9af0:	48841970 	stmmi	r4, {r4, r5, r6, r8, fp, ip}
    9af4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9af8:	00006902 	andeq	r6, r0, r2, lsl #18
    9afc:	68910200 	ldmvs	r1, {r9}
    9b00:	0049f419 	subeq	pc, r9, r9, lsl r4	; <UNPREDICTABLE>
    9b04:	026f0100 	rsbeq	r0, pc, #0, 2
    9b08:	00000069 	andeq	r0, r0, r9, rrx
    9b0c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    9b10:	0b460414 	bleq	118ab68 <_Min_Stack_Size+0x118a768>
    9b14:	45080000 	strmi	r0, [r8, #-0]
    9b18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9b1c:	000047f9 	strdeq	r4, [r0], -r9
    9b20:	28029401 	stmdacs	r2, {r0, sl, ip, pc}
    9b24:	48080082 	stmdami	r8, {r1, r7}
    9b28:	01000000 	mrseq	r0, (UNDEF: 0)
    9b2c:	000b8f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    9b30:	22fb1a00 	rscscs	r1, fp, #0, 20
    9b34:	94010000 	strls	r0, [r1], #-0
    9b38:	00004502 	andeq	r4, r0, r2, lsl #10
    9b3c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9b40:	0048891a 	subeq	r8, r8, sl, lsl r9
    9b44:	02940100 	addseq	r0, r4, #0, 2
    9b48:	00000045 	andeq	r0, r0, r5, asr #32
    9b4c:	1a749102 	bne	1d2df5c <_Min_Stack_Size+0x1d2db5c>
    9b50:	00004793 	muleq	r0, r3, r7
    9b54:	2c029401 	cfstrscs	mvf9, [r2], {1}
    9b58:	02000000 	andeq	r0, r0, #0
    9b5c:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    9b60:	000048d7 	ldrdeq	r4, [r0], -r7
    9b64:	7002a301 	andvc	sl, r2, r1, lsl #6
    9b68:	78080082 	stmdavc	r8, {r1, r7}
    9b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    9b70:	000bd39c 	muleq	fp, ip, r3
    9b74:	22fb1a00 	rscscs	r1, fp, #0, 20
    9b78:	a3010000 	movwge	r0, #4096	; 0x1000
    9b7c:	00004502 	andeq	r4, r0, r2, lsl #10
    9b80:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    9b84:	7274701e 	rsbsvc	r7, r4, #30
    9b88:	02a30100 	adceq	r0, r3, #0, 2
    9b8c:	00000bd3 	ldrdeq	r0, [r0], -r3
    9b90:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    9b94:	00004a78 	andeq	r4, r0, r8, ror sl
    9b98:	4502a501 	strmi	sl, [r2, #-1281]	; 0x501
    9b9c:	02000000 	andeq	r0, r0, #0
    9ba0:	14007691 	strne	r7, [r0], #-1681	; 0x691
    9ba4:	00002c04 	andeq	r2, r0, r4, lsl #24
    9ba8:	47dc1800 	ldrbmi	r1, [ip, r0, lsl #16]
    9bac:	ba010000 	blt	49bb4 <_Min_Stack_Size+0x497b4>
    9bb0:	0082e802 	addeq	lr, r2, r2, lsl #16
    9bb4:	00007c08 	andeq	r7, r0, r8, lsl #24
    9bb8:	2c9c0100 	ldfcss	f0, [ip], {0}
    9bbc:	1a00000c 	bne	9bf4 <_Min_Stack_Size+0x97f4>
    9bc0:	00004b71 	andeq	r4, r0, r1, ror fp
    9bc4:	4502ba01 	strmi	fp, [r2, #-2561]	; 0xa01
    9bc8:	02000000 	andeq	r0, r0, #0
    9bcc:	9a1a7691 	bls	6a7618 <_Min_Stack_Size+0x6a7218>
    9bd0:	01000048 	tsteq	r0, r8, asr #32
    9bd4:	004502ba 	strheq	r0, [r5], #-42	; 0xffffffd6
    9bd8:	91020000 	mrsls	r0, (UNDEF: 2)
    9bdc:	2a8f1a74 	bcs	fe3d05b4 <_estack+0xde3a05b4>
    9be0:	ba010000 	blt	49be8 <_Min_Stack_Size+0x497e8>
    9be4:	00004502 	andeq	r4, r0, r2, lsl #10
    9be8:	72910200 	addsvc	r0, r1, #0, 4
    9bec:	00320a1a 	eorseq	r0, r2, sl, lsl sl
    9bf0:	02ba0100 	adcseq	r0, sl, #0, 2
    9bf4:	00000045 	andeq	r0, r0, r5, asr #32
    9bf8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    9bfc:	004ab91f 	subeq	fp, sl, pc, lsl r9
    9c00:	02d80100 	sbcseq	r0, r8, #0, 2
    9c04:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
    9c08:	00000014 	andeq	r0, r0, r4, lsl r0
    9c0c:	56189c01 	ldrpl	r9, [r8], -r1, lsl #24
    9c10:	0100004b 	tsteq	r0, fp, asr #32
    9c14:	837802e6 	cmnhi	r8, #1610612750	; 0x6000000e
    9c18:	00c80800 	sbceq	r0, r8, r0, lsl #16
    9c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c20:	00000ce0 	andeq	r0, r0, r0, ror #25
    9c24:	004b711a 	subeq	r7, fp, sl, lsl r1
    9c28:	02e60100 	rsceq	r0, r6, #0, 2
    9c2c:	00000045 	andeq	r0, r0, r5, asr #32
    9c30:	7fbe9103 	svcvc	0x00be9103
    9c34:	00489a1a 	subeq	r9, r8, sl, lsl sl
    9c38:	02e60100 	rsceq	r0, r6, #0, 2
    9c3c:	00000045 	andeq	r0, r0, r5, asr #32
    9c40:	7fbc9103 	svcvc	0x00bc9103
    9c44:	0012a61a 	andseq	sl, r2, sl, lsl r6
    9c48:	02e60100 	rsceq	r0, r6, #0, 2
    9c4c:	00000045 	andeq	r0, r0, r5, asr #32
    9c50:	7fba9103 	svcvc	0x00ba9103
    9c54:	00194f1a 	andseq	r4, r9, sl, lsl pc
    9c58:	02e60100 	rsceq	r0, r6, #0, 2
    9c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    9c60:	7fb99103 	svcvc	0x00b99103
    9c64:	00267a19 	eoreq	r7, r6, r9, lsl sl
    9c68:	02e80100 	rsceq	r0, r8, #0, 2
    9c6c:	000005db 	ldrdeq	r0, [r0], -fp
    9c70:	19449102 	stmdbne	r4, {r1, r8, ip, pc}^
    9c74:	000049f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    9c78:	6902ea01 	stmdbvs	r2, {r0, r9, fp, sp, lr, pc}
    9c7c:	02000000 	andeq	r0, r0, #0
    9c80:	38197491 	ldmdacc	r9, {r0, r4, r7, sl, ip, sp, lr}
    9c84:	01000049 	tsteq	r0, r9, asr #32
    9c88:	004502eb 	subeq	r0, r5, fp, ror #5
    9c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    9c90:	4a291972 	bmi	a50260 <_Min_Stack_Size+0xa4fe60>
    9c94:	eb010000 	bl	49c9c <_Min_Stack_Size+0x4989c>
    9c98:	00004502 	andeq	r4, r0, r2, lsl #10
    9c9c:	70910200 	addsvc	r0, r1, r0, lsl #4
    9ca0:	0049be19 	subeq	fp, r9, r9, lsl lr
    9ca4:	02eb0100 	rsceq	r0, fp, #0, 2
    9ca8:	00000045 	andeq	r0, r0, r5, asr #32
    9cac:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    9cb0:	004adb18 	subeq	sp, sl, r8, lsl fp
    9cb4:	031c0100 	tsteq	ip, #0, 2
    9cb8:	08008440 	stmdaeq	r0, {r6, sl, pc}
    9cbc:	00000068 	andeq	r0, r0, r8, rrx
    9cc0:	0d339c01 	ldceq	12, cr9, [r3, #-4]!
    9cc4:	711a0000 	tstvc	sl, r0
    9cc8:	0100004b 	tsteq	r0, fp, asr #32
    9ccc:	0045031c 	subeq	r0, r5, ip, lsl r3
    9cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    9cd4:	489a1a76 	ldmmi	sl, {r1, r2, r4, r5, r6, r9, fp, ip}
    9cd8:	1c010000 	stcne	0, cr0, [r1], {-0}
    9cdc:	00004503 	andeq	r4, r0, r3, lsl #10
    9ce0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9ce4:	002a8f1a 	eoreq	r8, sl, sl, lsl pc
    9ce8:	031c0100 	tsteq	ip, #0, 2
    9cec:	00000045 	andeq	r0, r0, r5, asr #32
    9cf0:	1a729102 	bne	1cae100 <_Min_Stack_Size+0x1cadd00>
    9cf4:	0000320a 	andeq	r3, r0, sl, lsl #4
    9cf8:	45031c01 	strmi	r1, [r3, #-3073]	; 0xc01
    9cfc:	02000000 	andeq	r0, r0, #0
    9d00:	1b007091 	blne	25f4c <_Min_Stack_Size+0x25b4c>
    9d04:	00004b47 	andeq	r4, r0, r7, asr #22
    9d08:	a8032e01 	stmdage	r3, {r0, r9, sl, fp, sp}
    9d0c:	28080084 	stmdacs	r8, {r2, r7}
    9d10:	01000001 	tsteq	r0, r1
    9d14:	000dae9c 	muleq	sp, ip, lr
    9d18:	4b711a00 	blmi	1c50520 <_Min_Stack_Size+0x1c50120>
    9d1c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9d20:	00004503 	andeq	r4, r0, r3, lsl #10
    9d24:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    9d28:	00489a1a 	subeq	r9, r8, sl, lsl sl
    9d2c:	032e0100 	teqeq	lr, #0, 2
    9d30:	00000045 	andeq	r0, r0, r5, asr #32
    9d34:	1a649102 	bne	192e144 <_Min_Stack_Size+0x192dd44>
    9d38:	000047c7 	andeq	r4, r0, r7, asr #15
    9d3c:	45032e01 	strmi	r2, [r3, #-3585]	; 0xe01
    9d40:	02000000 	andeq	r0, r0, #0
    9d44:	78206291 	stmdavc	r0!, {r0, r4, r7, r9, sp, lr}
    9d48:	03300100 	teqeq	r0, #0, 2
    9d4c:	0000007e 	andeq	r0, r0, lr, ror r0
    9d50:	20749102 	rsbscs	r9, r4, r2, lsl #2
    9d54:	30010079 	andcc	r0, r1, r9, ror r0
    9d58:	00007e03 	andeq	r7, r0, r3, lsl #28
    9d5c:	70910200 	addsvc	r0, r1, r0, lsl #4
    9d60:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
    9d64:	03300100 	teqeq	r0, #0, 2
    9d68:	0000007e 	andeq	r0, r0, lr, ror r0
    9d6c:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    9d70:	01003265 	tsteq	r0, r5, ror #4
    9d74:	007e0330 	rsbseq	r0, lr, r0, lsr r3
    9d78:	91020000 	mrsls	r0, (UNDEF: 2)
    9d7c:	66180068 	ldrvs	r0, [r8], -r8, rrx
    9d80:	01000048 	tsteq	r0, r8, asr #32
    9d84:	85d00349 	ldrbhi	r0, [r0, #841]	; 0x349
    9d88:	02bc0800 	adcseq	r0, ip, #0, 16
    9d8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9d90:	00000e63 	andeq	r0, r0, r3, ror #28
    9d94:	004b711a 	subeq	r7, fp, sl, lsl r1
    9d98:	03490100 	movteq	r0, #37120	; 0x9100
    9d9c:	0000007e 	andeq	r0, r0, lr, ror r0
    9da0:	1a549102 	bne	152e1b0 <_Min_Stack_Size+0x152ddb0>
    9da4:	0000489a 	muleq	r0, sl, r8
    9da8:	7e034901 	cdpvc	9, 0, cr4, cr3, cr1, {0}
    9dac:	02000000 	andeq	r0, r0, #0
    9db0:	c71a5091 			; <UNDEFINED> instruction: 0xc71a5091
    9db4:	01000047 	tsteq	r0, r7, asr #32
    9db8:	007e0349 	rsbseq	r0, lr, r9, asr #6
    9dbc:	91020000 	mrsls	r0, (UNDEF: 2)
    9dc0:	47f11a4c 	ldrbmi	r1, [r1, ip, asr #20]!
    9dc4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    9dc8:	00007e03 	andeq	r7, r0, r3, lsl #28
    9dcc:	48910200 	ldmmi	r1, {r9}
    9dd0:	01007820 	tsteq	r0, r0, lsr #16
    9dd4:	007e034b 	rsbseq	r0, lr, fp, asr #6
    9dd8:	91020000 	mrsls	r0, (UNDEF: 2)
    9ddc:	00792074 	rsbseq	r2, r9, r4, ror r0
    9de0:	7e034b01 	vmlavc.f64	d4, d3, d1
    9de4:	02000000 	andeq	r0, r0, #0
    9de8:	65207091 	strvs	r7, [r0, #-145]!	; 0x91
    9dec:	01007272 	tsteq	r0, r2, ror r2
    9df0:	007e034b 	rsbseq	r0, lr, fp, asr #6
    9df4:	91020000 	mrsls	r0, (UNDEF: 2)
    9df8:	3265206c 	rsbcc	r2, r5, #108	; 0x6c
    9dfc:	034b0100 	movteq	r0, #45312	; 0xb100
    9e00:	0000007e 	andeq	r0, r0, lr, ror r0
    9e04:	20689102 	rsbcs	r9, r8, r2, lsl #2
    9e08:	4c01004b 	stcmi	0, cr0, [r1], {75}	; 0x4b
    9e0c:	000e6303 	andeq	r6, lr, r3, lsl #6
    9e10:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9e14:	004bf719 	subeq	pc, fp, r9, lsl r7	; <UNPREDICTABLE>
    9e18:	034c0100 	movteq	r0, #49408	; 0xc100
    9e1c:	00000e63 	andeq	r0, r0, r3, ror #28
    9e20:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    9e24:	00004bfc 	strdeq	r4, [r0], -ip
    9e28:	63034c01 	movwvs	r4, #15361	; 0x3c01
    9e2c:	0200000e 	andeq	r0, r0, #14
    9e30:	02005c91 	andeq	r5, r0, #37120	; 0x9100
    9e34:	01810404 	orreq	r0, r1, r4, lsl #8
    9e38:	461b0000 	ldrmi	r0, [fp], -r0
    9e3c:	0100004a 	tsteq	r0, sl, asr #32
    9e40:	888c0382 	stmhi	ip, {r1, r7, r8, r9}
    9e44:	03500800 	cmpeq	r0, #0, 16
    9e48:	9c010000 	stcls	0, cr0, [r1], {-0}
    9e4c:	00000f1f 	andeq	r0, r0, pc, lsl pc
    9e50:	004b711a 	subeq	r7, fp, sl, lsl r1
    9e54:	03820100 	orreq	r0, r2, #0, 2
    9e58:	0000007e 	andeq	r0, r0, lr, ror r0
    9e5c:	1a549102 	bne	152e26c <_Min_Stack_Size+0x152de6c>
    9e60:	0000489a 	muleq	r0, sl, r8
    9e64:	7e038201 	cdpvc	2, 0, cr8, cr3, cr1, {0}
    9e68:	02000000 	andeq	r0, r0, #0
    9e6c:	c71a5091 			; <UNDEFINED> instruction: 0xc71a5091
    9e70:	01000047 	tsteq	r0, r7, asr #32
    9e74:	007e0382 	rsbseq	r0, lr, r2, lsl #7
    9e78:	91020000 	mrsls	r0, (UNDEF: 2)
    9e7c:	47f11a4c 	ldrbmi	r1, [r1, ip, asr #20]!
    9e80:	82010000 	andhi	r0, r1, #0
    9e84:	00007e03 	andeq	r7, r0, r3, lsl #28
    9e88:	48910200 	ldmmi	r1, {r9}
    9e8c:	01007820 	tsteq	r0, r0, lsr #16
    9e90:	007e0384 	rsbseq	r0, lr, r4, lsl #7
    9e94:	91020000 	mrsls	r0, (UNDEF: 2)
    9e98:	00792074 	rsbseq	r2, r9, r4, ror r0
    9e9c:	7e038401 	cdpvc	4, 0, cr8, cr3, cr1, {0}
    9ea0:	02000000 	andeq	r0, r0, #0
    9ea4:	65207091 	strvs	r7, [r0, #-145]!	; 0x91
    9ea8:	01007272 	tsteq	r0, r2, ror r2
    9eac:	007e0384 	rsbseq	r0, lr, r4, lsl #7
    9eb0:	91020000 	mrsls	r0, (UNDEF: 2)
    9eb4:	3265206c 	rsbcc	r2, r5, #108	; 0x6c
    9eb8:	03840100 	orreq	r0, r4, #0, 2
    9ebc:	0000007e 	andeq	r0, r0, lr, ror r0
    9ec0:	20689102 	rsbcs	r9, r8, r2, lsl #2
    9ec4:	8501004b 	strhi	r0, [r1, #-75]	; 0x4b
    9ec8:	000e6303 	andeq	r6, lr, r3, lsl #6
    9ecc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9ed0:	004bf719 	subeq	pc, fp, r9, lsl r7	; <UNPREDICTABLE>
    9ed4:	03850100 	orreq	r0, r5, #0, 2
    9ed8:	00000e63 	andeq	r0, r0, r3, ror #28
    9edc:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    9ee0:	00004bfc 	strdeq	r4, [r0], -ip
    9ee4:	63038501 	movwvs	r8, #13569	; 0x3501
    9ee8:	0200000e 	andeq	r0, r0, #14
    9eec:	1b005c91 	blne	21138 <_Min_Stack_Size+0x20d38>
    9ef0:	00004c01 	andeq	r4, r0, r1, lsl #24
    9ef4:	dc03b701 	stcle	7, cr11, [r3], {1}
    9ef8:	7c08008b 	stcvc	0, cr0, [r8], {139}	; 0x8b
    9efc:	01000000 	mrseq	r0, (UNDEF: 0)
    9f00:	000f639c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    9f04:	4c0d1a00 	stcmi	10, cr1, [sp], {-0}
    9f08:	b7010000 	strlt	r0, [r1, -r0]
    9f0c:	000f6303 	andeq	r6, pc, r3, lsl #6
    9f10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9f14:	0043d419 	subeq	sp, r3, r9, lsl r4
    9f18:	03b90100 			; <UNDEFINED> instruction: 0x03b90100
    9f1c:	00000069 	andeq	r0, r0, r9, rrx
    9f20:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    9f24:	000010ab 	andeq	r1, r0, fp, lsr #1
    9f28:	6903b901 	stmdbvs	r3, {r0, r8, fp, ip, sp, pc}
    9f2c:	02000000 	andeq	r0, r0, #0
    9f30:	14007091 	strne	r7, [r0], #-145	; 0x91
    9f34:	000f6904 	andeq	r6, pc, r4, lsl #18
    9f38:	00690800 	rsbeq	r0, r9, r0, lsl #16
    9f3c:	fd180000 	ldc2	0, cr0, [r8, #-0]
    9f40:	01000049 	tsteq	r0, r9, asr #32
    9f44:	8c5803d1 	mrrchi	3, 13, r0, r8, cr1
    9f48:	01dc0800 	bicseq	r0, ip, r0, lsl #16
    9f4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f50:	0000100c 	andeq	r1, r0, ip
    9f54:	0049421a 	subeq	r4, r9, sl, lsl r2
    9f58:	03d10100 	bicseq	r0, r1, #0, 2
    9f5c:	00000069 	andeq	r0, r0, r9, rrx
    9f60:	19549102 	ldmdbne	r4, {r1, r8, ip, pc}^
    9f64:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    9f68:	6903d301 	stmdbvs	r3, {r0, r8, r9, ip, lr, pc}
    9f6c:	02000000 	andeq	r0, r0, #0
    9f70:	90197491 	mulsls	r9, r1, r4
    9f74:	0100005a 	qaddeq	r0, sl, r0
    9f78:	006903d3 	ldrdeq	r0, [r9], #-51	; 0xffffffcd	; <UNPREDICTABLE>
    9f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    9f80:	2dff1964 	ldclcs	9, cr1, [pc, #400]!	; a118 <_Min_Stack_Size+0x9d18>
    9f84:	d3010000 	movwle	r0, #4096	; 0x1000
    9f88:	00006903 	andeq	r6, r0, r3, lsl #18
    9f8c:	60910200 	addsvs	r0, r1, r0, lsl #4
    9f90:	004b3a19 	subeq	r3, fp, r9, lsl sl
    9f94:	03d30100 	bicseq	r0, r3, #0, 2
    9f98:	00000069 	andeq	r0, r0, r9, rrx
    9f9c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    9fa0:	000049e3 	andeq	r4, r0, r3, ror #19
    9fa4:	6903d301 	stmdbvs	r3, {r0, r8, r9, ip, lr, pc}
    9fa8:	02000000 	andeq	r0, r0, #0
    9fac:	78195891 	ldmdavc	r9, {r0, r4, r7, fp, ip, lr}
    9fb0:	01000014 	tsteq	r0, r4, lsl r0
    9fb4:	006903d4 	ldrdeq	r0, [r9], #-52	; 0xffffffcc	; <UNPREDICTABLE>
    9fb8:	91020000 	mrsls	r0, (UNDEF: 2)
    9fbc:	47391970 			; <UNDEFINED> instruction: 0x47391970
    9fc0:	d5010000 	strle	r0, [r1, #-0]
    9fc4:	00006903 	andeq	r6, r0, r3, lsl #18
    9fc8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9fcc:	0047bc19 	subeq	fp, r7, r9, lsl ip
    9fd0:	03d50100 	bicseq	r0, r5, #0, 2
    9fd4:	00000069 	andeq	r0, r0, r9, rrx
    9fd8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    9fdc:	004b7618 	subeq	r7, fp, r8, lsl r6
    9fe0:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9fe4:	08008e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, pc}
    9fe8:	000000c0 	andeq	r0, r0, r0, asr #1
    9fec:	10ae9c01 	adcne	r9, lr, r1, lsl #24
    9ff0:	711a0000 	tstvc	sl, r0
    9ff4:	0100004b 	tsteq	r0, fp, asr #32
    9ff8:	00450441 	subeq	r0, r5, r1, asr #8
    9ffc:	91030000 	mrsls	r0, (UNDEF: 3)
    a000:	9a1a7fbe 	bls	6a9f00 <_Min_Stack_Size+0x6a9b00>
    a004:	01000048 	tsteq	r0, r8, asr #32
    a008:	00450441 	subeq	r0, r5, r1, asr #8
    a00c:	91030000 	mrsls	r0, (UNDEF: 3)
    a010:	0a1a7fbc 	beq	6a9f08 <_Min_Stack_Size+0x6a9b08>
    a014:	01000032 	tsteq	r0, r2, lsr r0
    a018:	00450441 	subeq	r0, r5, r1, asr #8
    a01c:	91030000 	mrsls	r0, (UNDEF: 3)
    a020:	8f1a7fba 	svchi	0x001a7fba
    a024:	0100002a 	tsteq	r0, sl, lsr #32
    a028:	00450441 	subeq	r0, r5, r1, asr #8
    a02c:	91030000 	mrsls	r0, (UNDEF: 3)
    a030:	7a197fb8 	bvc	669f18 <_Min_Stack_Size+0x669b18>
    a034:	01000026 	tsteq	r0, r6, lsr #32
    a038:	05db0443 	ldrbeq	r0, [fp, #1091]	; 0x443
    a03c:	91020000 	mrsls	r0, (UNDEF: 2)
    a040:	49f41944 	ldmibmi	r4!, {r2, r6, r8, fp, ip}^
    a044:	45010000 	strmi	r0, [r1, #-0]
    a048:	00006904 	andeq	r6, r0, r4, lsl #18
    a04c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a050:	00493819 	subeq	r3, r9, r9, lsl r8
    a054:	04460100 	strbeq	r0, [r6], #-256	; 0x100
    a058:	00000045 	andeq	r0, r0, r5, asr #32
    a05c:	19729102 	ldmdbne	r2!, {r1, r8, ip, pc}^
    a060:	00004a29 	andeq	r4, r0, r9, lsr #20
    a064:	45044601 	strmi	r4, [r4, #-1537]	; 0x601
    a068:	02000000 	andeq	r0, r0, #0
    a06c:	be197091 	mrclt	0, 0, r7, cr9, cr1, {4}
    a070:	01000049 	tsteq	r0, r9, asr #32
    a074:	00450446 	subeq	r0, r5, r6, asr #8
    a078:	91020000 	mrsls	r0, (UNDEF: 2)
    a07c:	e818006e 	ldmda	r8, {r1, r2, r3, r5, r6}
    a080:	0100004a 	tsteq	r0, sl, asr #32
    a084:	8ef4046e 	cdphi	4, 15, cr0, cr4, cr14, {3}
    a088:	01200800 	teqeq	r0, r0, lsl #16
    a08c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a090:	0000111d 	andeq	r1, r0, sp, lsl r1
    a094:	004b711a 	subeq	r7, fp, sl, lsl r1
    a098:	046e0100 	strbteq	r0, [lr], #-256	; 0x100
    a09c:	00000045 	andeq	r0, r0, r5, asr #32
    a0a0:	1a669102 	bne	19ae4b0 <_Min_Stack_Size+0x19ae0b0>
    a0a4:	0000489a 	muleq	r0, sl, r8
    a0a8:	45046e01 	strmi	r6, [r4, #-3585]	; 0xe01
    a0ac:	02000000 	andeq	r0, r0, #0
    a0b0:	c71a6491 			; <UNDEFINED> instruction: 0xc71a6491
    a0b4:	01000047 	tsteq	r0, r7, asr #32
    a0b8:	0045046e 	subeq	r0, r5, lr, ror #8
    a0bc:	91020000 	mrsls	r0, (UNDEF: 2)
    a0c0:	00442062 	subeq	r2, r4, r2, rrx
    a0c4:	57047001 	strpl	r7, [r4, -r1]
    a0c8:	02000000 	andeq	r0, r0, #0
    a0cc:	7a197491 	bvc	667318 <_Min_Stack_Size+0x666f18>
    a0d0:	01000048 	tsteq	r0, r8, asr #32
    a0d4:	00690471 	rsbeq	r0, r9, r1, ror r4
    a0d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a0dc:	487f1970 	ldmdami	pc!, {r4, r5, r6, r8, fp, ip}^	; <UNPREDICTABLE>
    a0e0:	72010000 	andvc	r0, r1, #0
    a0e4:	00006904 	andeq	r6, r0, r4, lsl #18
    a0e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a0ec:	48141800 	ldmdami	r4, {fp, ip}
    a0f0:	9d010000 	stcls	0, cr0, [r1, #-0]
    a0f4:	00901404 	addseq	r1, r0, r4, lsl #8
    a0f8:	00016608 	andeq	r6, r1, r8, lsl #12
    a0fc:	2b9c0100 	blcs	fe70a504 <_estack+0xde6da504>
    a100:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    a104:	01003178 	tsteq	r0, r8, ror r1
    a108:	0045049d 	umaaleq	r0, r5, sp, r4
    a10c:	91020000 	mrsls	r0, (UNDEF: 2)
    a110:	31791e56 	cmncc	r9, r6, asr lr
    a114:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    a118:	00000045 	andeq	r0, r0, r5, asr #32
    a11c:	1e549102 	lognes	f1, f2
    a120:	01003278 	tsteq	r0, r8, ror r2
    a124:	0045049d 	umaaleq	r0, r5, sp, r4
    a128:	91020000 	mrsls	r0, (UNDEF: 2)
    a12c:	32791e52 	rsbscc	r1, r9, #1312	; 0x520
    a130:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    a134:	00000045 	andeq	r0, r0, r5, asr #32
    a138:	19509102 	ldmdbne	r0, {r1, r8, ip, pc}^
    a13c:	00004b96 	muleq	r0, r6, fp
    a140:	33049f01 	movwcc	r9, #20225	; 0x4f01
    a144:	02000000 	andeq	r0, r0, #0
    a148:	9d196091 	ldcls	0, cr6, [r9, #-580]	; 0xfffffdbc
    a14c:	0100004b 	tsteq	r0, fp, asr #32
    a150:	0033049f 	mlaseq	r3, pc, r4, r0	; <UNPREDICTABLE>
    a154:	91020000 	mrsls	r0, (UNDEF: 2)
    a158:	0078205e 	rsbseq	r2, r8, lr, asr r0
    a15c:	33049f01 	movwcc	r9, #20225	; 0x4f01
    a160:	02000000 	andeq	r0, r0, #0
    a164:	79207691 	stmdbvc	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    a168:	049f0100 	ldreq	r0, [pc], #256	; a170 <_Min_Stack_Size+0x9d70>
    a16c:	00000033 	andeq	r0, r0, r3, lsr r0
    a170:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    a174:	00004b41 	andeq	r4, r0, r1, asr #22
    a178:	33049f01 	movwcc	r9, #20225	; 0x4f01
    a17c:	02000000 	andeq	r0, r0, #0
    a180:	c7197291 			; <UNDEFINED> instruction: 0xc7197291
    a184:	01000048 	tsteq	r0, r8, asr #32
    a188:	0033049f 	mlaseq	r3, pc, r4, r0	; <UNPREDICTABLE>
    a18c:	91020000 	mrsls	r0, (UNDEF: 2)
    a190:	4a9c1970 	bmi	fe710758 <_estack+0xde6e0758>
    a194:	a0010000 	andge	r0, r1, r0
    a198:	00003304 	andeq	r3, r0, r4, lsl #6
    a19c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a1a0:	004aa219 	subeq	sl, sl, r9, lsl r2
    a1a4:	04a00100 	strteq	r0, [r0], #256	; 0x100
    a1a8:	00000033 	andeq	r0, r0, r3, lsr r0
    a1ac:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    a1b0:	006e6564 	rsbeq	r6, lr, r4, ror #10
    a1b4:	3304a001 	movwcc	sl, #16385	; 0x4001
    a1b8:	02000000 	andeq	r0, r0, #0
    a1bc:	6e206a91 	mcrvs	10, 1, r6, cr0, cr1, {4}
    a1c0:	01006d75 	tsteq	r0, r5, ror sp
    a1c4:	003304a0 	eorseq	r0, r3, r0, lsr #9
    a1c8:	91020000 	mrsls	r0, (UNDEF: 2)
    a1cc:	49ed1968 	stmibmi	sp!, {r3, r5, r6, r8, fp, ip}^
    a1d0:	a0010000 	andge	r0, r1, r0
    a1d4:	00003304 	andeq	r3, r0, r4, lsl #6
    a1d8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    a1dc:	004c9119 	subeq	r9, ip, r9, lsl r1
    a1e0:	04a00100 	strteq	r0, [r0], #256	; 0x100
    a1e4:	00000033 	andeq	r0, r0, r3, lsr r0
    a1e8:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    a1ec:	00004920 	andeq	r4, r0, r0, lsr #18
    a1f0:	3304a101 	movwcc	sl, #16641	; 0x4101
    a1f4:	02000000 	andeq	r0, r0, #0
    a1f8:	18006291 	stmdane	r0, {r0, r4, r7, r9, sp, lr}
    a1fc:	00004a8f 	andeq	r4, r0, pc, lsl #21
    a200:	7c04e501 	cfstr32vc	mvfx14, [r4], {1}
    a204:	76080091 			; <UNDEFINED> instruction: 0x76080091
    a208:	01000000 	mrseq	r0, (UNDEF: 0)
    a20c:	0012899c 	mulseq	r2, ip, r9
    a210:	4c451a00 	mcrrmi	10, 0, r1, r5, cr0
    a214:	e5010000 	str	r0, [r1, #-0]
    a218:	0007d304 	andeq	sp, r7, r4, lsl #6
    a21c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a220:	004a6d1a 	subeq	r6, sl, sl, lsl sp
    a224:	04e50100 	strbteq	r0, [r5], #256	; 0x100
    a228:	00000045 	andeq	r0, r0, r5, asr #32
    a22c:	206a9102 	rsbcs	r9, sl, r2, lsl #2
    a230:	e7010058 	smlsd	r1, r8, r0, r0
    a234:	00003304 	andeq	r3, r0, r4, lsl #6
    a238:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a23c:	01005920 	tsteq	r0, r0, lsr #18
    a240:	003304e7 	eorseq	r0, r3, r7, ror #9
    a244:	91020000 	mrsls	r0, (UNDEF: 2)
    a248:	4a231974 	bmi	8d0820 <_Min_Stack_Size+0x8d0420>
    a24c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    a250:	0007d304 	andeq	sp, r7, r4, lsl #6
    a254:	70910200 	addsvc	r0, r1, r0, lsl #4
    a258:	4a351800 	bmi	d50260 <_Min_Stack_Size+0xd4fe60>
    a25c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a260:	0091f404 	addseq	pc, r1, r4, lsl #8
    a264:	00016208 	andeq	r6, r1, r8, lsl #4
    a268:	b39c0100 	orrslt	r0, ip, #0, 2
    a26c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    a270:	01003178 	tsteq	r0, r8, ror r1
    a274:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a278:	91020000 	mrsls	r0, (UNDEF: 2)
    a27c:	32781e56 	rsbscc	r1, r8, #1376	; 0x560
    a280:	04ff0100 	ldrbteq	r0, [pc], #256	; a288 <_Min_Stack_Size+0x9e88>
    a284:	00000045 	andeq	r0, r0, r5, asr #32
    a288:	1e549102 	lognes	f1, f2
    a28c:	01003378 	tsteq	r0, r8, ror r3
    a290:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a294:	91020000 	mrsls	r0, (UNDEF: 2)
    a298:	31791e52 	cmncc	r9, r2, asr lr
    a29c:	04ff0100 	ldrbteq	r0, [pc], #256	; a2a4 <_Min_Stack_Size+0x9ea4>
    a2a0:	00000045 	andeq	r0, r0, r5, asr #32
    a2a4:	1e509102 	lognes	f1, f2
    a2a8:	01003279 	tsteq	r0, r9, ror r2
    a2ac:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a2b0:	91020000 	mrsls	r0, (UNDEF: 2)
    a2b4:	33791e00 	cmncc	r9, #0, 28
    a2b8:	04ff0100 	ldrbteq	r0, [pc], #256	; a2c0 <_Min_Stack_Size+0x9ec0>
    a2bc:	00000045 	andeq	r0, r0, r5, asr #32
    a2c0:	19049102 	stmdbne	r4, {r1, r8, ip, pc}
    a2c4:	00004b96 	muleq	r0, r6, fp
    a2c8:	33050201 	movwcc	r0, #20993	; 0x5201
    a2cc:	02000000 	andeq	r0, r0, #0
    a2d0:	9d196091 	ldcls	0, cr6, [r9, #-580]	; 0xfffffdbc
    a2d4:	0100004b 	tsteq	r0, fp, asr #32
    a2d8:	00330502 	eorseq	r0, r3, r2, lsl #10
    a2dc:	91020000 	mrsls	r0, (UNDEF: 2)
    a2e0:	0078205e 	rsbseq	r2, r8, lr, asr r0
    a2e4:	33050201 	movwcc	r0, #20993	; 0x5201
    a2e8:	02000000 	andeq	r0, r0, #0
    a2ec:	79207691 	stmdbvc	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    a2f0:	05020100 	streq	r0, [r2, #-256]	; 0x100
    a2f4:	00000033 	andeq	r0, r0, r3, lsr r0
    a2f8:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    a2fc:	00004b41 	andeq	r4, r0, r1, asr #22
    a300:	33050201 	movwcc	r0, #20993	; 0x5201
    a304:	02000000 	andeq	r0, r0, #0
    a308:	c7197291 			; <UNDEFINED> instruction: 0xc7197291
    a30c:	01000048 	tsteq	r0, r8, asr #32
    a310:	00330502 	eorseq	r0, r3, r2, lsl #10
    a314:	91020000 	mrsls	r0, (UNDEF: 2)
    a318:	4a9c1970 	bmi	fe7108e0 <_estack+0xde6e08e0>
    a31c:	03010000 	movweq	r0, #4096	; 0x1000
    a320:	00003305 	andeq	r3, r0, r5, lsl #6
    a324:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a328:	004aa219 	subeq	sl, sl, r9, lsl r2
    a32c:	05030100 	streq	r0, [r3, #-256]	; 0x100
    a330:	00000033 	andeq	r0, r0, r3, lsr r0
    a334:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    a338:	006e6564 	rsbeq	r6, lr, r4, ror #10
    a33c:	33050301 	movwcc	r0, #21249	; 0x5301
    a340:	02000000 	andeq	r0, r0, #0
    a344:	6e206a91 	mcrvs	10, 1, r6, cr0, cr1, {4}
    a348:	01006d75 	tsteq	r0, r5, ror sp
    a34c:	00330503 	eorseq	r0, r3, r3, lsl #10
    a350:	91020000 	mrsls	r0, (UNDEF: 2)
    a354:	49ed1968 	stmibmi	sp!, {r3, r5, r6, r8, fp, ip}^
    a358:	03010000 	movweq	r0, #4096	; 0x1000
    a35c:	00003305 	andeq	r3, r0, r5, lsl #6
    a360:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    a364:	004c9119 	subeq	r9, ip, r9, lsl r1
    a368:	05030100 	streq	r0, [r3, #-256]	; 0x100
    a36c:	00000033 	andeq	r0, r0, r3, lsr r0
    a370:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    a374:	00004920 	andeq	r4, r0, r0, lsr #18
    a378:	33050401 	movwcc	r0, #21505	; 0x5401
    a37c:	02000000 	andeq	r0, r0, #0
    a380:	18006291 	stmdane	r0, {r0, r4, r7, r9, sp, lr}
    a384:	000048f6 	strdeq	r4, [r0], -r6
    a388:	58054b01 	stmdapl	r5, {r0, r8, r9, fp, lr}
    a38c:	56080093 			; <UNDEFINED> instruction: 0x56080093
    a390:	01000000 	mrseq	r0, (UNDEF: 0)
    a394:	0014029c 	mulseq	r4, ip, r2
    a398:	4c451a00 	mcrrmi	10, 0, r1, r5, cr0
    a39c:	4b010000 	blmi	4a3a4 <_Min_Stack_Size+0x49fa4>
    a3a0:	0007d305 	andeq	sp, r7, r5, lsl #6
    a3a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a3a8:	004a6d1a 	subeq	r6, sl, sl, lsl sp
    a3ac:	054b0100 	strbeq	r0, [fp, #-256]	; 0x100
    a3b0:	00000045 	andeq	r0, r0, r5, asr #32
    a3b4:	206a9102 	rsbcs	r9, sl, r2, lsl #2
    a3b8:	4d010058 	stcmi	0, cr0, [r1, #-352]	; 0xfffffea0
    a3bc:	00003305 	andeq	r3, r0, r5, lsl #6
    a3c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a3c4:	01005920 	tsteq	r0, r0, lsr #18
    a3c8:	0033054d 	eorseq	r0, r3, sp, asr #10
    a3cc:	91020000 	mrsls	r0, (UNDEF: 2)
    a3d0:	0e210074 	mcreq	0, 1, r0, cr1, cr4, {3}
    a3d4:	0100004b 	tsteq	r0, fp, asr #32
    a3d8:	93b00565 	movsls	r0, #423624704	; 0x19400000
    a3dc:	00a00800 	adceq	r0, r0, r0, lsl #16
    a3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3e4:	0000146f 	andeq	r1, r0, pc, ror #8
    a3e8:	004c451a 	subeq	r4, ip, sl, lsl r5
    a3ec:	05650100 	strbeq	r0, [r5, #-256]!	; 0x100
    a3f0:	000007d3 	ldrdeq	r0, [r0], -r3
    a3f4:	1a649102 	bne	192e804 <_Min_Stack_Size+0x192e404>
    a3f8:	00004a6d 	andeq	r4, r0, sp, ror #20
    a3fc:	45056501 	strmi	r6, [r5, #-1281]	; 0x501
    a400:	02000000 	andeq	r0, r0, #0
    a404:	221a6291 	andscs	r6, sl, #268435465	; 0x10000009
    a408:	0100004b 	tsteq	r0, fp, asr #32
    a40c:	00450565 	subeq	r0, r5, r5, ror #10
    a410:	91020000 	mrsls	r0, (UNDEF: 2)
    a414:	00582060 	subseq	r2, r8, r0, rrx
    a418:	33056701 	movwcc	r6, #22273	; 0x5701
    a41c:	02000000 	andeq	r0, r0, #0
    a420:	59206e91 	stmdbpl	r0!, {r0, r4, r7, r9, sl, fp, sp, lr}
    a424:	05670100 	strbeq	r0, [r7, #-256]!	; 0x100
    a428:	00000033 	andeq	r0, r0, r3, lsr r0
    a42c:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    a430:	00004a23 	andeq	r4, r0, r3, lsr #20
    a434:	d3056801 	movwle	r6, #22529	; 0x5801
    a438:	02000007 	andeq	r0, r0, #7
    a43c:	18006891 	stmdane	r0, {r0, r4, r7, fp, sp, lr}
    a440:	00004afb 	strdeq	r4, [r0], -fp
    a444:	50058301 	andpl	r8, r5, r1, lsl #6
    a448:	50080094 	mulpl	r8, r4, r0
    a44c:	01000000 	mrseq	r0, (UNDEF: 0)
    a450:	0014a49c 	mulseq	r4, ip, r4
    a454:	4c451a00 	mcrrmi	10, 0, r1, r5, cr0
    a458:	83010000 	movwhi	r0, #4096	; 0x1000
    a45c:	0007d305 	andeq	sp, r7, r5, lsl #6
    a460:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a464:	004a6d1a 	subeq	r6, sl, sl, lsl sp
    a468:	05830100 	streq	r0, [r3, #256]	; 0x100
    a46c:	00000045 	andeq	r0, r0, r5, asr #32
    a470:	006a9102 	rsbeq	r9, sl, r2, lsl #2
    a474:	004ba418 	subeq	sl, fp, r8, lsl r4
    a478:	058f0100 	streq	r0, [pc, #256]	; a580 <_Min_Stack_Size+0xa180>
    a47c:	080094a0 	stmdaeq	r0, {r5, r7, sl, ip, pc}
    a480:	0000001e 	andeq	r0, r0, lr, lsl r0
    a484:	14d99c01 	ldrbne	r9, [r9], #3073	; 0xc01
    a488:	451a0000 	ldrmi	r0, [sl, #-0]
    a48c:	0100004c 	tsteq	r0, ip, asr #32
    a490:	07d3058f 	ldrbeq	r0, [r3, pc, lsl #11]
    a494:	91020000 	mrsls	r0, (UNDEF: 2)
    a498:	4a6d1a74 	bmi	1b50e70 <_Min_Stack_Size+0x1b50a70>
    a49c:	8f010000 	svchi	0x00010000
    a4a0:	00004505 	andeq	r4, r0, r5, lsl #10
    a4a4:	72910200 	addsvc	r0, r1, #0, 4
    a4a8:	498b1800 	stmibmi	fp, {fp, ip}
    a4ac:	9a010000 	bls	4a4b4 <_Min_Stack_Size+0x4a0b4>
    a4b0:	0094c005 	addseq	ip, r4, r5
    a4b4:	00001e08 	andeq	r1, r0, r8, lsl #28
    a4b8:	0e9c0100 	fmleqe	f0, f4, f0
    a4bc:	1a000015 	bne	a518 <_Min_Stack_Size+0xa118>
    a4c0:	00004c45 	andeq	r4, r0, r5, asr #24
    a4c4:	d3059a01 	movwle	r9, #23041	; 0x5a01
    a4c8:	02000007 	andeq	r0, r0, #7
    a4cc:	6d1a7491 	cfldrsvs	mvf7, [sl, #-580]	; 0xfffffdbc
    a4d0:	0100004a 	tsteq	r0, sl, asr #32
    a4d4:	0045059a 	umaaleq	r0, r5, sl, r5
    a4d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a4dc:	a8180072 	ldmdage	r8, {r1, r4, r5, r6}
    a4e0:	0100004a 	tsteq	r0, sl, asr #32
    a4e4:	94e005a5 	strbtls	r0, [r0], #1445	; 0x5a5
    a4e8:	01a00800 	lsleq	r0, r0, #16
    a4ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4f0:	0000161e 	andeq	r1, r0, lr, lsl r6
    a4f4:	004c451a 	subeq	r4, ip, sl, lsl r5
    a4f8:	05a50100 	streq	r0, [r5, #256]!	; 0x100
    a4fc:	000007d3 	ldrdeq	r0, [r0], -r3
    a500:	1a4c9102 	bne	132e910 <_Min_Stack_Size+0x132e510>
    a504:	00004a6d 	andeq	r4, r0, sp, ror #20
    a508:	4505a501 	strmi	sl, [r5, #-1281]	; 0x501
    a50c:	02000000 	andeq	r0, r0, #0
    a510:	58204a91 	stmdapl	r0!, {r0, r4, r7, r9, fp, lr}
    a514:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a518:	00000033 	andeq	r0, r0, r3, lsr r0
    a51c:	20609102 	rsbcs	r9, r0, r2, lsl #2
    a520:	a8010059 	stmdage	r1, {r0, r3, r4, r6}
    a524:	00003305 	andeq	r3, r0, r5, lsl #6
    a528:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    a52c:	00325820 	eorseq	r5, r2, r0, lsr #16
    a530:	3305a801 	movwcc	sl, #22529	; 0x5801
    a534:	02000000 	andeq	r0, r0, #0
    a538:	59206e91 	stmdbpl	r0!, {r0, r4, r7, r9, sl, fp, sp, lr}
    a53c:	a8010032 	stmdage	r1, {r1, r4, r5}
    a540:	00003305 	andeq	r3, r0, r5, lsl #6
    a544:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a548:	00483719 	subeq	r3, r8, r9, lsl r7
    a54c:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a550:	00000033 	andeq	r0, r0, r3, lsr r0
    a554:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    a558:	00004c1f 	andeq	r4, r0, pc, lsl ip
    a55c:	3305a801 	movwcc	sl, #22529	; 0x5801
    a560:	02000000 	andeq	r0, r0, #0
    a564:	70195a91 	mulsvc	r9, r1, sl
    a568:	01000047 	tsteq	r0, r7, asr #32
    a56c:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a570:	91020000 	mrsls	r0, (UNDEF: 2)
    a574:	47b41958 	sbfxmi	r1, r8, #18, #21
    a578:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    a57c:	00003305 	andeq	r3, r0, r5, lsl #6
    a580:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    a584:	004c3019 	subeq	r3, ip, r9, lsl r0
    a588:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a58c:	00000033 	andeq	r0, r0, r3, lsr r0
    a590:	19549102 	ldmdbne	r4, {r1, r8, ip, pc}^
    a594:	00004859 	andeq	r4, r0, r9, asr r8
    a598:	3305a801 	movwcc	sl, #22529	; 0x5801
    a59c:	02000000 	andeq	r0, r0, #0
    a5a0:	ab195291 	blge	65efec <_Min_Stack_Size+0x65ebec>
    a5a4:	01000010 	tsteq	r0, r0, lsl r0
    a5a8:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a5ac:	91020000 	mrsls	r0, (UNDEF: 2)
    a5b0:	4809196a 	stmdami	r9, {r1, r3, r5, r6, r8, fp, ip}
    a5b4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    a5b8:	00004505 	andeq	r4, r0, r5, lsl #10
    a5bc:	68910200 	ldmvs	r1, {r9}
    a5c0:	00476419 	subeq	r6, r7, r9, lsl r4
    a5c4:	05a90100 	streq	r0, [r9, #256]!	; 0x100
    a5c8:	00000045 	andeq	r0, r0, r5, asr #32
    a5cc:	19669102 	stmdbne	r6!, {r1, r8, ip, pc}^
    a5d0:	00004c9b 	muleq	r0, fp, ip
    a5d4:	4505a901 	strmi	sl, [r5, #-2305]	; 0x901
    a5d8:	02000000 	andeq	r0, r0, #0
    a5dc:	d4196491 	ldrle	r6, [r9], #-1169	; 0x491
    a5e0:	0100004c 	tsteq	r0, ip, asr #32
    a5e4:	004505a9 	subeq	r0, r5, r9, lsr #11
    a5e8:	91020000 	mrsls	r0, (UNDEF: 2)
    a5ec:	82180062 	andshi	r0, r8, #98	; 0x62
    a5f0:	01000047 	tsteq	r0, r7, asr #32
    a5f4:	968005e7 	strls	r0, [r0], r7, ror #11
    a5f8:	005c0800 	subseq	r0, ip, r0, lsl #16
    a5fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a600:	00001644 	andeq	r1, r0, r4, asr #12
    a604:	004a0a1a 	subeq	r0, sl, sl, lsl sl
    a608:	05e70100 	strbeq	r0, [r7, #256]!	; 0x100
    a60c:	0000002c 	andeq	r0, r0, ip, lsr #32
    a610:	00779102 	rsbseq	r9, r7, r2, lsl #2
    a614:	004cc618 	subeq	ip, ip, r8, lsl r6
    a618:	05ff0100 	ldrbeq	r0, [pc, #256]!	; a720 <_Min_Stack_Size+0xa320>
    a61c:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
    a620:	0000005c 	andeq	r0, r0, ip, asr r0
    a624:	166a9c01 	strbtne	r9, [sl], -r1, lsl #24
    a628:	ba1a0000 	blt	68a630 <_Min_Stack_Size+0x68a230>
    a62c:	01000056 	qaddeq	r0, r6, r0
    a630:	002c05ff 	strdeq	r0, [ip], -pc	; <UNPREDICTABLE>
    a634:	91020000 	mrsls	r0, (UNDEF: 2)
    a638:	cf1f0077 	svcgt	0x001f0077
    a63c:	0100004a 	tsteq	r0, sl, asr #32
    a640:	97380616 			; <UNDEFINED> instruction: 0x97380616
    a644:	028e0800 	addeq	r0, lr, #0, 16
    a648:	9c010000 	stcls	0, cr0, [r1], {-0}
    a64c:	004a5f1f 	subeq	r5, sl, pc, lsl pc
    a650:	06930100 	ldreq	r0, [r3], r0, lsl #2
    a654:	080099c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, pc}
    a658:	0000000c 	andeq	r0, r0, ip
    a65c:	ab1f9c01 	blge	7f1668 <_Min_Stack_Size+0x7f1268>
    a660:	0100004c 	tsteq	r0, ip, asr #32
    a664:	99d4069d 	ldmibls	r4, {r0, r2, r3, r4, r7, r9, sl}^
    a668:	000c0800 	andeq	r0, ip, r0, lsl #16
    a66c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a670:	00496e18 	subeq	r6, r9, r8, lsl lr
    a674:	06aa0100 	strteq	r0, [sl], r0, lsl #2
    a678:	080099e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, pc}
    a67c:	00000054 	andeq	r0, r0, r4, asr r0
    a680:	16c69c01 	strbne	r9, [r6], r1, lsl #24
    a684:	eb190000 	bl	64a68c <_Min_Stack_Size+0x64a28c>
    a688:	01000041 	tsteq	r0, r1, asr #32
    a68c:	06e906ac 	strbteq	r0, [r9], ip, lsr #13
    a690:	91020000 	mrsls	r0, (UNDEF: 2)
    a694:	58180070 	ldmdapl	r8, {r4, r5, r6}
    a698:	0100004c 	tsteq	r0, ip, asr #32
    a69c:	9a3406cf 	bls	d0c1e0 <_Min_Stack_Size+0xd0bde0>
    a6a0:	00240800 	eoreq	r0, r4, r0, lsl #16
    a6a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a6a8:	0000170a 	andeq	r1, r0, sl, lsl #14
    a6ac:	0017751a 	andseq	r7, r7, sl, lsl r5
    a6b0:	06cf0100 	strbeq	r0, [pc], r0, lsl #2
    a6b4:	0000170a 	andeq	r1, r0, sl, lsl #14
    a6b8:	1a749102 	bne	1d2eac8 <_Min_Stack_Size+0x1d2e6c8>
    a6bc:	000049c9 	andeq	r4, r0, r9, asr #19
    a6c0:	4506cf01 	strmi	ip, [r6, #-3841]	; 0xf01
    a6c4:	02000000 	andeq	r0, r0, #0
    a6c8:	651a7291 	ldrvs	r7, [sl, #-657]	; 0x291
    a6cc:	01000008 	tsteq	r0, r8
    a6d0:	069906cf 	ldreq	r0, [r9], pc, asr #13
    a6d4:	91020000 	mrsls	r0, (UNDEF: 2)
    a6d8:	04140071 	ldreq	r0, [r4], #-113	; 0x71
    a6dc:	000001a1 	andeq	r0, r0, r1, lsr #3
    a6e0:	004c3718 	subeq	r3, ip, r8, lsl r7
    a6e4:	06da0100 	ldrbeq	r0, [sl], r0, lsl #2
    a6e8:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}
    a6ec:	000000d4 	ldrdeq	r0, [r0], -r4
    a6f0:	17459c01 	strbne	r9, [r5, -r1, lsl #24]
    a6f4:	7b190000 	blvc	64a6fc <_Min_Stack_Size+0x64a2fc>
    a6f8:	01000046 	tsteq	r0, r6, asr #32
    a6fc:	076906dc 			; <UNDEFINED> instruction: 0x076906dc
    a700:	91020000 	mrsls	r0, (UNDEF: 2)
    a704:	41eb1964 	mvnmi	r1, r4, ror #18
    a708:	dd010000 	stcle	0, cr0, [r1, #-0]
    a70c:	0006e906 	andeq	lr, r6, r6, lsl #18
    a710:	5c910200 	lfmpl	f0, 4, [r1], {0}
    a714:	47992100 	ldrmi	r2, [r9, r0, lsl #2]
    a718:	1f010000 	svcne	0x00010000
    a71c:	009b2c07 	addseq	r2, fp, r7, lsl #24
    a720:	00017808 	andeq	r7, r1, r8, lsl #16
    a724:	6b9c0100 	blvs	fe70ab2c <_estack+0xde6dab2c>
    a728:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    a72c:	00000977 	andeq	r0, r0, r7, ror r9
    a730:	e9072101 	stmdb	r7, {r0, r8, sp}
    a734:	02000006 	andeq	r0, r0, #6
    a738:	21007091 	swpcs	r7, r1, [r0]
    a73c:	00004a56 	andeq	r4, r0, r6, asr sl
    a740:	a4078301 	strge	r8, [r7], #-769	; 0x301
    a744:	4808009c 	stmdami	r8, {r2, r3, r4, r7}
    a748:	01000000 	mrseq	r0, (UNDEF: 0)
    a74c:	00179c9c 	mulseq	r7, ip, ip
    a750:	00781e00 	rsbseq	r1, r8, r0, lsl #28
    a754:	33078301 	movwcc	r8, #29441	; 0x7301
    a758:	02000000 	andeq	r0, r0, #0
    a75c:	791e7691 	ldmdbvc	lr, {r0, r4, r7, r9, sl, ip, sp, lr}
    a760:	07830100 	streq	r0, [r3, r0, lsl #2]
    a764:	00000033 	andeq	r0, r0, r3, lsr r0
    a768:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a76c:	0043f722 	subeq	pc, r3, r2, lsr #14
    a770:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    a774:	08009cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, pc}
    a778:	00000028 	andeq	r0, r0, r8, lsr #32
    a77c:	17d19c01 	ldrbne	r9, [r1, r1, lsl #24]
    a780:	641a0000 	ldrvs	r0, [sl], #-0
    a784:	01000044 	tsteq	r0, r4, asr #32
    a788:	17d10792 	bfine	r0, r2, #15, #3
    a78c:	91020000 	mrsls	r0, (UNDEF: 2)
    a790:	43d4196c 	bicsmi	r1, r4, #108, 18	; 0x1b0000
    a794:	94010000 	strls	r0, [r1], #-0
    a798:	0017d107 	andseq	sp, r7, r7, lsl #2
    a79c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a7a0:	00690500 	rsbeq	r0, r9, r0, lsl #10
    a7a4:	e1170000 	tst	r7, r0
    a7a8:	0100004c 	tsteq	r0, ip, asr #32
    a7ac:	0009824f 	andeq	r8, r9, pc, asr #4
    a7b0:	d4030500 	strle	r0, [r3], #-1280	; 0x500
    a7b4:	17200004 	strne	r0, [r0, -r4]!
    a7b8:	00004c80 	andeq	r4, r0, r0, lsl #25
    a7bc:	00455101 	subeq	r5, r5, r1, lsl #2
    a7c0:	03050000 	movweq	r0, #20480	; 0x5000
    a7c4:	200004d8 	ldrdcs	r0, [r0], -r8
    a7c8:	0049d217 	subeq	sp, r9, r7, lsl r2
    a7cc:	45520100 	ldrbmi	r0, [r2, #-256]	; 0x100
    a7d0:	05000000 	streq	r0, [r0, #-0]
    a7d4:	00005403 	andeq	r5, r0, r3, lsl #8
    a7d8:	495b1720 	ldmdbmi	fp, {r5, r8, r9, sl, ip}^
    a7dc:	54010000 	strpl	r0, [r1], #-0
    a7e0:	00000069 	andeq	r0, r0, r9, rrx
    a7e4:	00580305 	subseq	r0, r8, r5, lsl #6
    a7e8:	03172000 	tsteq	r7, #0
    a7ec:	01000049 	tsteq	r0, r9, asr #32
    a7f0:	00006955 	andeq	r6, r0, r5, asr r9
    a7f4:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    a7f8:	23200004 	teqcs	r0, #4
    a7fc:	0000015e 	andeq	r0, r0, lr, asr r1
    a800:	ce06a70b 	cdpgt	7, 0, cr10, cr6, cr11, {0}
    a804:	24000000 	strcs	r0, [r0], #-0
    a808:	000048cd 	andeq	r4, r0, sp, asr #17
    a80c:	ab03ae0c 	blge	f6044 <_Min_Stack_Size+0xf5c44>
    a810:	05000007 	streq	r0, [r0, #-7]
    a814:	00003403 	andeq	r3, r0, r3, lsl #8
    a818:	48902420 	ldmmi	r0, {r5, sl, sp}
    a81c:	b40c0000 	strlt	r0, [ip], #-0
    a820:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a824:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    a828:	24200000 	strtcs	r0, [r0], #-0
    a82c:	00004982 	andeq	r4, r0, r2, lsl #19
    a830:	ab03ba0c 	blge	f9068 <_Min_Stack_Size+0xf8c68>
    a834:	05000007 	streq	r0, [r0, #-7]
    a838:	00004403 	andeq	r4, r0, r3, lsl #8
    a83c:	4c282420 	cfstrsmi	mvf2, [r8], #-128	; 0xffffff80
    a840:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    a844:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a848:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    a84c:	06200000 	strteq	r0, [r0], -r0
    a850:	00000045 	andeq	r0, r0, r5, asr #32
    a854:	00001890 	muleq	r0, r0, r8
    a858:	0000ad25 	andeq	sl, r0, r5, lsr #26
    a85c:	0008e700 	andeq	lr, r8, r0, lsl #14
    a860:	004b2926 	subeq	r2, fp, r6, lsr #18
    a864:	a14b0c00 	cmpge	fp, r0, lsl #24
    a868:	05000018 	streq	r0, [r0, #-24]
    a86c:	00c98c03 	sbceq	r8, r9, r3, lsl #24
    a870:	187f0808 	ldmdane	pc!, {r3, fp}^	; <UNPREDICTABLE>
    a874:	45060000 	strmi	r0, [r6, #-0]
    a878:	b7000000 	strlt	r0, [r0, -r0]
    a87c:	25000018 	strcs	r0, [r0, #-24]
    a880:	000000ad 	andeq	r0, r0, sp, lsr #1
    a884:	2400047f 	strcs	r0, [r0], #-1151	; 0x47f
    a888:	00004a12 	andeq	r4, r0, r2, lsl sl
    a88c:	c902870c 	stmdbgt	r2, {r2, r3, r8, r9, sl, pc}
    a890:	05000018 	streq	r0, [r0, #-24]
    a894:	00db5c03 	sbcseq	r5, fp, r3, lsl #24
    a898:	18a60808 	stmiane	r6!, {r3, fp}
    a89c:	10240000 	eorne	r0, r4, r0
    a8a0:	0c000049 	stceq	0, cr0, [r0], {73}	; 0x49
    a8a4:	18e002e9 	stmiane	r0!, {r0, r3, r5, r6, r7, r9}^
    a8a8:	03050000 	movweq	r0, #20480	; 0x5000
    a8ac:	0800e45c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp, lr, pc}
    a8b0:	0018a608 	andseq	sl, r8, r8, lsl #12
    a8b4:	00450600 	subeq	r0, r5, r0, lsl #12
    a8b8:	18f60000 	ldmne	r6!, {}^	; <UNPREDICTABLE>
    a8bc:	ad250000 	stcge	0, cr0, [r5, #-0]
    a8c0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    a8c4:	87240002 	strhi	r0, [r4, -r2]!
    a8c8:	0c00004b 	stceq	0, cr0, [r0], {75}	; 0x4b
    a8cc:	1908034b 	stmdbne	r8, {r0, r1, r3, r6, r8, r9}
    a8d0:	03050000 	movweq	r0, #20480	; 0x5000
    a8d4:	0800ed5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp, lr, pc}
    a8d8:	0018e508 	andseq	lr, r8, r8, lsl #10
    a8dc:	0bb40000 	bleq	fed0a8e4 <_estack+0xdecda8e4>
    a8e0:	00040000 	andeq	r0, r4, r0
    a8e4:	00001ddc 	ldrdeq	r1, [r0], -ip
    a8e8:	00210104 	eoreq	r0, r1, r4, lsl #2
    a8ec:	a0010000 	andge	r0, r1, r0
    a8f0:	1400004e 	strne	r0, [r0], #-78	; 0x4e
    a8f4:	48000001 	stmdami	r0, {r0}
    a8f8:	0000000c 	andeq	r0, r0, ip
    a8fc:	e5000000 	str	r0, [r0, #-0]
    a900:	02000047 	andeq	r0, r0, #71	; 0x47
    a904:	014d0601 	cmpeq	sp, r1, lsl #12
    a908:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    a90c:	02000002 	andeq	r0, r0, #2
    a910:	0000371d 	andeq	r3, r0, sp, lsl r7
    a914:	08010200 	stmdaeq	r1, {r9}
    a918:	0000014b 	andeq	r0, r0, fp, asr #2
    a91c:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    a920:	03000001 	movweq	r0, #1
    a924:	00000438 	andeq	r0, r0, r8, lsr r4
    a928:	00502b02 	subseq	r2, r0, r2, lsl #22
    a92c:	02020000 	andeq	r0, r2, #0
    a930:	00000e07 	andeq	r0, r0, r7, lsl #28
    a934:	01770300 	cmneq	r7, r0, lsl #6
    a938:	3f020000 	svccc	0x00020000
    a93c:	00000062 	andeq	r0, r0, r2, rrx
    a940:	05050402 	streq	r0, [r5, #-1026]	; 0x402
    a944:	03000000 	movweq	r0, #0
    a948:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    a94c:	00744102 	rsbseq	r4, r4, r2, lsl #2
    a950:	04020000 	streq	r0, [r2], #-0
    a954:	00012e07 	andeq	r2, r1, r7, lsl #28
    a958:	05080200 	streq	r0, [r8, #-512]	; 0x200
    a95c:	00000000 	andeq	r0, r0, r0
    a960:	29070802 	stmdbcs	r7, {r1, fp}
    a964:	04000001 	streq	r0, [r0], #-1
    a968:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a96c:	04020074 	streq	r0, [r2], #-116	; 0x74
    a970:	00013307 	andeq	r3, r1, r7, lsl #6
    a974:	02700300 	rsbseq	r0, r0, #0, 6
    a978:	2a030000 	bcs	ca980 <_Min_Stack_Size+0xca580>
    a97c:	0000002c 	andeq	r0, r0, ip, lsr #32
    a980:	00043a03 	andeq	r3, r4, r3, lsl #20
    a984:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    a988:	03000000 	movweq	r0, #0
    a98c:	00000179 	andeq	r0, r0, r9, ror r1
    a990:	00574103 	subseq	r4, r7, r3, lsl #2
    a994:	b6030000 	strlt	r0, [r3], -r0
    a998:	03000005 	movweq	r0, #5
    a99c:	00006942 	andeq	r6, r0, r2, asr #18
    a9a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a9a4:	00000191 	muleq	r0, r1, r1
    a9a8:	0000b805 	andeq	fp, r0, r5, lsl #16
    a9ac:	00b80600 	adcseq	r0, r8, r0, lsl #12
    a9b0:	00df0000 	sbcseq	r0, pc, r0
    a9b4:	c3070000 	movwgt	r0, #28672	; 0x7000
    a9b8:	01000000 	mrseq	r0, (UNDEF: 0)
    a9bc:	00970500 	addseq	r0, r7, r0, lsl #10
    a9c0:	a2050000 	andge	r0, r5, #0
    a9c4:	05000000 	streq	r0, [r0, #-0]
    a9c8:	000000ad 	andeq	r0, r0, sp, lsr #1
    a9cc:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    a9d0:	00010401 	andeq	r0, r1, r1, lsl #8
    a9d4:	087e0900 	ldmdaeq	lr!, {r8, fp}^
    a9d8:	0a000000 	beq	a9e0 <_Min_Stack_Size+0xa5e0>
    a9dc:	00544553 	subseq	r4, r4, r3, asr r5
    a9e0:	880b0001 	stmdahi	fp, {r0}
    a9e4:	0400001e 	streq	r0, [r0], #-30
    a9e8:	00ee01f7 	strdeq	r0, [lr], #23	; <UNPREDICTABLE>
    a9ec:	01080000 	mrseq	r0, (UNDEF: 8)
    a9f0:	2601f904 	strcs	pc, [r1], -r4, lsl #18
    a9f4:	09000001 	stmdbeq	r0, {r0}
    a9f8:	00000686 	andeq	r0, r0, r6, lsl #13
    a9fc:	07de0900 	ldrbeq	r0, [lr, r0, lsl #18]
    aa00:	00010000 	andeq	r0, r1, r0
    aa04:	0007af0b 	andeq	sl, r7, fp, lsl #30
    aa08:	01f90400 	mvnseq	r0, r0, lsl #8
    aa0c:	00000110 	andeq	r0, r0, r0, lsl r1
    aa10:	b104180c 	tstlt	r4, ip, lsl #16
    aa14:	00018902 	andeq	r8, r1, r2, lsl #18
    aa18:	52430d00 	subpl	r0, r3, #0, 26
    aa1c:	02b30400 	adcseq	r0, r3, #0, 8
    aa20:	000000ca 	andeq	r0, r0, sl, asr #1
    aa24:	1e9e0e00 	cdpne	14, 9, cr0, cr14, cr0, {0}
    aa28:	b4040000 	strlt	r0, [r4], #-0
    aa2c:	0000ca02 	andeq	ip, r0, r2, lsl #20
    aa30:	500d0400 	andpl	r0, sp, r0, lsl #8
    aa34:	04005241 	streq	r5, [r0], #-577	; 0x241
    aa38:	00ca02b5 	strheq	r0, [sl], #37	; 0x25
    aa3c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    aa40:	00001e99 	muleq	r0, r9, lr
    aa44:	ca02b604 	bgt	b825c <_Min_Stack_Size+0xb7e5c>
    aa48:	0c000000 	stceq	0, cr0, [r0], {-0}
    aa4c:	001e270e 	andseq	r2, lr, lr, lsl #14
    aa50:	02b70400 	adcseq	r0, r7, #0, 8
    aa54:	000000ca 	andeq	r0, r0, sl, asr #1
    aa58:	43460d10 	movtmi	r0, #27920	; 0x6d10
    aa5c:	b8040052 	stmdalt	r4, {r1, r4, r6}
    aa60:	0000ca02 	andeq	ip, r0, r2, lsl #20
    aa64:	0b001400 	bleq	fa6c <_Min_Stack_Size+0xf66c>
    aa68:	00001be5 	andeq	r1, r0, r5, ror #23
    aa6c:	3202b904 	andcc	fp, r2, #4, 18	; 0x10000
    aa70:	0c000001 	stceq	0, cr0, [r0], {1}
    aa74:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    aa78:	00000221 	andeq	r0, r0, r1, lsr #4
    aa7c:	0009390e 	andeq	r3, r9, lr, lsl #18
    aa80:	03d60400 	bicseq	r0, r6, #0, 8
    aa84:	000000ca 	andeq	r0, r0, sl, asr #1
    aa88:	08ff0e00 	ldmeq	pc!, {r9, sl, fp}^	; <UNPREDICTABLE>
    aa8c:	d7040000 	strle	r0, [r4, -r0]
    aa90:	0000ca03 	andeq	ip, r0, r3, lsl #20
    aa94:	150e0400 	strne	r0, [lr, #-1024]	; 0x400
    aa98:	0400000a 	streq	r0, [r0], #-10
    aa9c:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    aaa0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    aaa4:	00000914 	andeq	r0, r0, r4, lsl r9
    aaa8:	ca03d904 	bgt	100ec0 <_Min_Stack_Size+0x100ac0>
    aaac:	0c000000 	stceq	0, cr0, [r0], {-0}
    aab0:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    aab4:	03da0400 	bicseq	r0, sl, #0, 8
    aab8:	000000ca 	andeq	r0, r0, sl, asr #1
    aabc:	444f0d10 	strbmi	r0, [pc], #-3344	; aac4 <_Min_Stack_Size+0xa6c4>
    aac0:	db040052 	blle	10ac10 <_Min_Stack_Size+0x10a810>
    aac4:	0000ca03 	andeq	ip, r0, r3, lsl #20
    aac8:	070e1400 	streq	r1, [lr, -r0, lsl #8]
    aacc:	0400000b 	streq	r0, [r0], #-11
    aad0:	00e403dc 	ldrdeq	r0, [r4], #60	; 0x3c	; <UNPREDICTABLE>
    aad4:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    aad8:	00000933 	andeq	r0, r0, r3, lsr r9
    aadc:	e403dd04 	str	sp, [r3], #-3332	; 0xd04
    aae0:	1a000000 	bne	aae8 <_Min_Stack_Size+0xa6e8>
    aae4:	0008e80e 	andeq	lr, r8, lr, lsl #16
    aae8:	03de0400 	bicseq	r0, lr, #0, 8
    aaec:	000000ca 	andeq	r0, r0, sl, asr #1
    aaf0:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    aaf4:	df040052 	svcle	0x00040052
    aaf8:	00022103 	andeq	r2, r2, r3, lsl #2
    aafc:	05002000 	streq	r2, [r0, #-0]
    ab00:	000000cf 	andeq	r0, r0, pc, asr #1
    ab04:	0007fe0b 	andeq	pc, r7, fp, lsl #28
    ab08:	03e00400 	mvneq	r0, #0, 8
    ab0c:	00000195 	muleq	r0, r5, r1
    ab10:	f304280c 	vsub.i8	d2, d4, d12
    ab14:	00033f03 	andeq	r3, r3, r3, lsl #30
    ab18:	52430d00 	subpl	r0, r3, #0, 26
    ab1c:	f5040031 			; <UNDEFINED> instruction: 0xf5040031
    ab20:	0000e403 	andeq	lr, r0, r3, lsl #8
    ab24:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    ab28:	04000005 	streq	r0, [r0], #-5
    ab2c:	00a203f6 	strdeq	r0, [r2], r6	; <UNPREDICTABLE>
    ab30:	0d020000 	stceq	0, cr0, [r2, #-0]
    ab34:	00325243 	eorseq	r5, r2, r3, asr #4
    ab38:	e403f704 	str	pc, [r3], #-1796	; 0x704
    ab3c:	04000000 	streq	r0, [r0], #-0
    ab40:	0005760e 	andeq	r7, r5, lr, lsl #12
    ab44:	03f80400 	mvnseq	r0, #0, 8
    ab48:	000000a2 	andeq	r0, r0, r2, lsr #1
    ab4c:	18860e06 	stmne	r6, {r1, r2, r9, sl, fp}
    ab50:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    ab54:	0000e403 	andeq	lr, r0, r3, lsl #8
    ab58:	800e0800 	andhi	r0, lr, r0, lsl #16
    ab5c:	04000005 	streq	r0, [r0], #-5
    ab60:	00a203fa 	strdeq	r0, [r2], sl	; <UNPREDICTABLE>
    ab64:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    ab68:	00001b7f 	andeq	r1, r0, pc, ror fp
    ab6c:	e403fb04 	str	pc, [r3], #-2820	; 0xb04
    ab70:	0c000000 	stceq	0, cr0, [r0], {-0}
    ab74:	00046c0e 	andeq	r6, r4, lr, lsl #24
    ab78:	03fc0400 	mvnseq	r0, #0, 8
    ab7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    ab80:	52440d0e 	subpl	r0, r4, #896	; 0x380
    ab84:	03fd0400 	mvnseq	r0, #0, 8
    ab88:	000000e4 	andeq	r0, r0, r4, ror #1
    ab8c:	05960e10 	ldreq	r0, [r6, #3600]	; 0xe10
    ab90:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    ab94:	0000a203 	andeq	sl, r0, r3, lsl #4
    ab98:	530d1200 	movwpl	r1, #53760	; 0xd200
    ab9c:	04003152 	streq	r3, [r0], #-338	; 0x152
    aba0:	00e403ff 	strdeq	r0, [r4], #63	; 0x3f	; <UNPREDICTABLE>
    aba4:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    aba8:	000005a0 	andeq	r0, r0, r0, lsr #11
    abac:	a2040004 	andge	r0, r4, #4
    abb0:	16000000 	strne	r0, [r0], -r0
    abb4:	3252530d 	subscc	r5, r2, #872415232	; 0x34000000
    abb8:	04010400 	streq	r0, [r1], #-1024	; 0x400
    abbc:	000000e4 	andeq	r0, r0, r4, ror #1
    abc0:	05aa0e18 	streq	r0, [sl, #3608]!	; 0xe18
    abc4:	02040000 	andeq	r0, r4, #0
    abc8:	0000a204 	andeq	sl, r0, r4, lsl #4
    abcc:	430d1a00 	movwmi	r1, #55808	; 0xda00
    abd0:	04005243 	streq	r5, [r0], #-579	; 0x243
    abd4:	00e40403 	rsceq	r0, r4, r3, lsl #8
    abd8:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    abdc:	00001a31 	andeq	r1, r0, r1, lsr sl
    abe0:	a2040404 	andge	r0, r4, #4, 8	; 0x4000000
    abe4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    abe8:	0017e80e 	andseq	lr, r7, lr, lsl #16
    abec:	04050400 	streq	r0, [r5], #-1024	; 0x400
    abf0:	000000e4 	andeq	r0, r0, r4, ror #1
    abf4:	1a3b0e20 	bne	ece47c <_Min_Stack_Size+0xece07c>
    abf8:	06040000 	streq	r0, [r4], -r0
    abfc:	0000a204 	andeq	sl, r0, r4, lsl #4
    ac00:	8b0e2200 	blhi	393408 <_Min_Stack_Size+0x393008>
    ac04:	04000018 	streq	r0, [r0], #-24
    ac08:	00e40407 	rsceq	r0, r4, r7, lsl #8
    ac0c:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    ac10:	00001a45 	andeq	r1, r0, r5, asr #20
    ac14:	a2040804 	andge	r0, r4, #4, 16	; 0x40000
    ac18:	26000000 	strcs	r0, [r0], -r0
    ac1c:	18bc0b00 	ldmne	ip!, {r8, r9, fp}
    ac20:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ac24:	00023204 	andeq	r3, r2, r4, lsl #4
    ac28:	053c0f00 	ldreq	r0, [ip, #-3840]!	; 0xf00
    ac2c:	00040836 	andeq	r0, r4, r6, lsr r8
    ac30:	1ed11000 	cdpne	0, 13, cr1, cr1, cr0, {0}
    ac34:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    ac38:	000000b8 	strheq	r0, [r0], -r8
    ac3c:	1c9c1000 	ldcne	0, cr1, [ip], {0}
    ac40:	3b050000 	blcc	14ac48 <_Min_Stack_Size+0x14a848>
    ac44:	000000b8 	strheq	r0, [r0], -r8
    ac48:	1eec1004 	cdpne	0, 14, cr1, cr12, cr4, {0}
    ac4c:	3d050000 	stccc	0, cr0, [r5, #-0]
    ac50:	000000b8 	strheq	r0, [r0], -r8
    ac54:	1c941008 	ldcne	0, cr1, [r4], {8}
    ac58:	41050000 	mrsmi	r0, (UNDEF: 5)
    ac5c:	000000b8 	strheq	r0, [r0], -r8
    ac60:	1f00100c 	svcne	0x0000100c
    ac64:	45050000 	strmi	r0, [r5, #-0]
    ac68:	000000b8 	strheq	r0, [r0], -r8
    ac6c:	1cf71010 	ldclne	0, cr1, [r7], #64	; 0x40
    ac70:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    ac74:	000000b8 	strheq	r0, [r0], -r8
    ac78:	1cb31014 	ldcne	0, cr1, [r3], #80	; 0x50
    ac7c:	4c050000 	stcmi	0, cr0, [r5], {-0}
    ac80:	000000b8 	strheq	r0, [r0], -r8
    ac84:	1da41018 	stcne	0, cr1, [r4, #96]!	; 0x60
    ac88:	4f050000 	svcmi	0x00050000
    ac8c:	000000b8 	strheq	r0, [r0], -r8
    ac90:	1f43101c 	svcne	0x0043101c
    ac94:	52050000 	andpl	r0, r5, #0
    ac98:	000000b8 	strheq	r0, [r0], -r8
    ac9c:	1f0f1020 	svcne	0x000f1020
    aca0:	55050000 	strpl	r0, [r5, #-0]
    aca4:	000000b8 	strheq	r0, [r0], -r8
    aca8:	1bf81024 	blne	ffe0ed40 <_estack+0xdfdded40>
    acac:	5a050000 	bpl	14acb4 <_Min_Stack_Size+0x14a8b4>
    acb0:	000000b8 	strheq	r0, [r0], -r8
    acb4:	1eb31028 	cdpne	0, 11, cr1, cr3, cr8, {1}
    acb8:	5d050000 	stcpl	0, cr0, [r5, #-0]
    acbc:	000000b8 	strheq	r0, [r0], -r8
    acc0:	1de6102c 	stclne	0, cr1, [r6, #176]!	; 0xb0
    acc4:	62050000 	andvs	r0, r5, #0
    acc8:	000000b8 	strheq	r0, [r0], -r8
    accc:	1c051030 	stcne	0, cr1, [r5], {48}	; 0x30
    acd0:	65050000 	strvs	r0, [r5, #-0]
    acd4:	000000b8 	strheq	r0, [r0], -r8
    acd8:	1c241034 	stcne	0, cr1, [r4], #-208	; 0xffffff30
    acdc:	6a050000 	bvs	14ace4 <_Min_Stack_Size+0x14a8e4>
    ace0:	000000b8 	strheq	r0, [r0], -r8
    ace4:	bb030038 	bllt	cadcc <_Min_Stack_Size+0xca9cc>
    ace8:	0500001d 	streq	r0, [r0, #-29]
    acec:	00034b6e 	andeq	r4, r3, lr, ror #22
    acf0:	06011100 	streq	r1, [r1], -r0, lsl #2
    acf4:	00043442 	andeq	r3, r4, r2, asr #8
    acf8:	091a0900 	ldmdbeq	sl, {r8, fp}
    acfc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad00:	00000906 	andeq	r0, r0, r6, lsl #18
    ad04:	089d0901 	ldmeq	sp, {r0, r8, fp}
    ad08:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    ad0c:	000008cc 	andeq	r0, r0, ip, asr #17
    ad10:	37030003 	strcc	r0, [r3, -r3]
    ad14:	06000008 	streq	r0, [r0], -r8
    ad18:	00041347 	andeq	r1, r4, r7, asr #6
    ad1c:	06011100 	streq	r1, [r1], -r0, lsl #2
    ad20:	0004544f 	andeq	r5, r4, pc, asr #8
    ad24:	09550900 	ldmdbeq	r5, {r8, fp}^
    ad28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad2c:	0000086c 	andeq	r0, r0, ip, ror #16
    ad30:	ed030001 	stc	0, cr0, [r3, #-4]
    ad34:	06000008 	streq	r0, [r0], -r8
    ad38:	00043f52 	andeq	r3, r4, r2, asr pc
    ad3c:	06011100 	streq	r1, [r1], -r0, lsl #2
    ad40:	0004805a 	andeq	r8, r4, sl, asr r0
    ad44:	09f40900 	ldmibeq	r4!, {r8, fp}^
    ad48:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad4c:	00000a03 	andeq	r0, r0, r3, lsl #20
    ad50:	09b10901 	ldmibeq	r1!, {r0, r8, fp}
    ad54:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    ad58:	00000a77 	andeq	r0, r0, r7, ror sl
    ad5c:	1d030003 	stcne	0, cr0, [r3, #-12]
    ad60:	0600000a 	streq	r0, [r0], -sl
    ad64:	00045f5f 	andeq	r5, r4, pc, asr pc
    ad68:	06011100 	streq	r1, [r1], -r0, lsl #2
    ad6c:	0004a66e 	andeq	sl, r4, lr, ror #12
    ad70:	0a3e0900 	beq	f8d178 <_Min_Stack_Size+0xf8cd78>
    ad74:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad78:	00000a98 	muleq	r0, r8, sl
    ad7c:	0a2f0901 	beq	bcd188 <_Min_Stack_Size+0xbccd88>
    ad80:	00020000 	andeq	r0, r2, r0
    ad84:	000a8703 	andeq	r8, sl, r3, lsl #14
    ad88:	8b720600 	blhi	1c8c590 <_Min_Stack_Size+0x1c8c190>
    ad8c:	0f000004 	svceq	0x00000004
    ad90:	f6840608 			; <UNDEFINED> instruction: 0xf6840608
    ad94:	10000004 	andne	r0, r0, r4
    ad98:	00000812 	andeq	r0, r0, r2, lsl r8
    ad9c:	00b88606 	adcseq	r8, r8, r6, lsl #12
    ada0:	10000000 	andne	r0, r0, r0
    ada4:	00000b24 	andeq	r0, r0, r4, lsr #22
    ada8:	04348906 	ldrteq	r8, [r4], #-2310	; 0x906
    adac:	10040000 	andne	r0, r4, r0
    adb0:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    adb4:	04808c06 	streq	r8, [r0], #3078	; 0xc06
    adb8:	10050000 	andne	r0, r5, r0
    adbc:	00000892 	muleq	r0, r2, r8
    adc0:	04548f06 	ldrbeq	r8, [r4], #-3846	; 0xf06
    adc4:	10060000 	andne	r0, r6, r0
    adc8:	0000096d 	andeq	r0, r0, sp, ror #18
    adcc:	04a69206 	strteq	r9, [r6], #518	; 0x206
    add0:	00070000 	andeq	r0, r7, r0
    add4:	000a6603 	andeq	r6, sl, r3, lsl #12
    add8:	b1940600 	orrslt	r0, r4, r0, lsl #12
    addc:	0f000004 	svceq	0x00000004
    ade0:	52360710 	eorspl	r0, r6, #16, 14	; 0x400000
    ade4:	10000005 	andne	r0, r0, r5
    ade8:	0000185f 	andeq	r1, r0, pc, asr r8
    adec:	00b83807 	adcseq	r3, r8, r7, lsl #16
    adf0:	10000000 	andne	r0, r0, r0
    adf4:	0000186e 	andeq	r1, r0, lr, ror #16
    adf8:	00a23b07 	adceq	r3, r2, r7, lsl #22
    adfc:	10040000 	andne	r0, r4, r0
    ae00:	00001912 	andeq	r1, r0, r2, lsl r9
    ae04:	00a23e07 	adceq	r3, r2, r7, lsl #28
    ae08:	10060000 	andne	r0, r6, r0
    ae0c:	00001a4f 	andeq	r1, r0, pc, asr #20
    ae10:	00a24107 	adceq	r4, r2, r7, lsl #2
    ae14:	10080000 	andne	r0, r8, r0
    ae18:	00001a6a 	andeq	r1, r0, sl, ror #20
    ae1c:	00a24407 	adceq	r4, r2, r7, lsl #8
    ae20:	100a0000 	andne	r0, sl, r0
    ae24:	00001a9a 	muleq	r0, sl, sl
    ae28:	00a24707 	adceq	r4, r2, r7, lsl #14
    ae2c:	000c0000 	andeq	r0, ip, r0
    ae30:	001a0c03 	andseq	r0, sl, r3, lsl #24
    ae34:	01490700 	cmpeq	r9, r0, lsl #14
    ae38:	0f000005 	svceq	0x00000005
    ae3c:	90400808 	subls	r0, r0, r8, lsl #16
    ae40:	10000005 	andne	r0, r0, r5
    ae44:	00004d9d 	muleq	r0, sp, sp
    ae48:	00a24208 	adceq	r4, r2, r8, lsl #4
    ae4c:	12000000 	andne	r0, r0, #0
    ae50:	43080058 	movwmi	r0, #32856	; 0x8058
    ae54:	000000a2 	andeq	r0, r0, r2, lsr #1
    ae58:	00591202 	subseq	r1, r9, r2, lsl #4
    ae5c:	00a24408 	adceq	r4, r2, r8, lsl #8
    ae60:	12040000 	andne	r0, r4, #0
    ae64:	4508005a 	strmi	r0, [r8, #-90]	; 0x5a
    ae68:	000000a2 	andeq	r0, r0, r2, lsr #1
    ae6c:	33030006 	movwcc	r0, #12294	; 0x3006
    ae70:	0800004d 	stmdaeq	r0, {r0, r2, r3, r6}
    ae74:	00055d46 	andeq	r5, r5, r6, asr #26
    ae78:	08011100 	stmdaeq	r1, {r8, ip}
    ae7c:	0005c24c 	andeq	ip, r5, ip, asr #4
    ae80:	4e1a0900 	cdpmi	9, 1, cr0, cr10, cr0, {0}
    ae84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ae88:	00004f03 	andeq	r4, r0, r3, lsl #30
    ae8c:	4e600901 	cdpmi	9, 6, cr0, cr0, cr1, {0}
    ae90:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    ae94:	00004fae 	andeq	r4, r0, lr, lsr #31
    ae98:	4f6e0903 	svcmi	0x006e0903
    ae9c:	00040000 	andeq	r0, r4, r0
    aea0:	61080111 	tstvs	r8, r1, lsl r1
    aea4:	000005d7 	ldrdeq	r0, [r0], -r7
    aea8:	004f9d09 	subeq	r9, pc, r9, lsl #26
    aeac:	0f090000 	svceq	0x00090000
    aeb0:	0100004f 	tsteq	r0, pc, asr #32
    aeb4:	4eea0300 	cdpmi	3, 14, cr0, cr10, cr0, {0}
    aeb8:	64080000 	strvs	r0, [r8], #-0
    aebc:	000005c2 	andeq	r0, r0, r2, asr #11
    aec0:	004f5013 	subeq	r5, pc, r3, lsl r0	; <UNPREDICTABLE>
    aec4:	977f0100 	ldrbls	r0, [pc, -r0, lsl #2]!
    aec8:	14000000 	strne	r0, [r0], #-0
    aecc:	3008009d 	mulcc	r8, sp, r0
    aed0:	01000000 	mrseq	r0, (UNDEF: 0)
    aed4:	4e47139c 	mcrmi	3, 2, r1, cr7, cr12, {4}
    aed8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    aedc:	00000097 	muleq	r0, r7, r0
    aee0:	08009d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, pc}
    aee4:	0000001e 	andeq	r0, r0, lr, lsl r0
    aee8:	f2149c01 			; <UNDEFINED> instruction: 0xf2149c01
    aeec:	0100004c 	tsteq	r0, ip, asr #32
    aef0:	00067ab2 			; <UNDEFINED> instruction: 0x00067ab2
    aef4:	009d6400 	addseq	r6, sp, r0, lsl #8
    aef8:	0000c808 	andeq	ip, r0, r8, lsl #16
    aefc:	7a9c0100 	bvc	fe70b304 <_estack+0xde6db304>
    af00:	15000006 	strne	r0, [r0, #-6]
    af04:	00004f33 	andeq	r4, r0, r3, lsr pc
    af08:	00b8b401 	adcseq	fp, r8, r1, lsl #8
    af0c:	91020000 	mrsls	r0, (UNDEF: 2)
    af10:	4fa8156c 	svcmi	0x00a8156c
    af14:	b4010000 	strlt	r0, [r1], #-0
    af18:	000000b8 	strheq	r0, [r0], -r8
    af1c:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    af20:	b4010078 	strlt	r0, [r1], #-120	; 0x78
    af24:	000000b8 	strheq	r0, [r0], -r8
    af28:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    af2c:	b4010079 	strlt	r0, [r1], #-121	; 0x79
    af30:	000000b8 	strheq	r0, [r0], -r8
    af34:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
    af38:	0100785f 	tsteq	r0, pc, asr r8
    af3c:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    af40:	e8030500 	stmda	r3, {r8, sl}
    af44:	16200004 	strtne	r0, [r0], -r4
    af48:	0100795f 	tsteq	r0, pc, asr r9
    af4c:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    af50:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    af54:	00200004 	eoreq	r0, r0, r4
    af58:	05900417 	ldreq	r0, [r0, #1047]	; 0x417
    af5c:	ce140000 	cdpgt	0, 1, cr0, cr4, cr0, {0}
    af60:	0100004d 	tsteq	r0, sp, asr #32
    af64:	000104e1 	andeq	r0, r1, r1, ror #9
    af68:	009e2c00 	addseq	r2, lr, r0, lsl #24
    af6c:	00003408 	andeq	r3, r0, r8, lsl #8
    af70:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    af74:	18000006 	stmdane	r0, {r1, r2}
    af78:	00004fe0 	andeq	r4, r0, r0, ror #31
    af7c:	0097e101 	addseq	lr, r7, r1, lsl #2
    af80:	91020000 	mrsls	r0, (UNDEF: 2)
    af84:	6d74166f 	ldclvs	6, cr1, [r4, #-444]!	; 0xfffffe44
    af88:	e3010070 	movw	r0, #4208	; 0x1070
    af8c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    af90:	00779102 	rsbseq	r9, r7, r2, lsl #2
    af94:	004dab14 	subeq	sl, sp, r4, lsl fp
    af98:	97fe0100 	ldrbls	r0, [lr, r0, lsl #2]!
    af9c:	60000000 	andvs	r0, r0, r0
    afa0:	1e08009e 	mcrne	0, 0, r0, cr8, cr14, {4}
    afa4:	01000000 	mrseq	r0, (UNDEF: 0)
    afa8:	0006de9c 	muleq	r6, ip, lr
    afac:	4fe01800 	svcmi	0x00e01800
    afb0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    afb4:	00000097 	muleq	r0, r7, r0
    afb8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    afbc:	004d8b19 	subeq	r8, sp, r9, lsl fp
    afc0:	010e0100 	mrseq	r0, (UNDEF: 30)
    afc4:	00000097 	muleq	r0, r7, r0
    afc8:	08009e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, pc}
    afcc:	00000034 	andeq	r0, r0, r4, lsr r0
    afd0:	56199c01 	ldrpl	r9, [r9], -r1, lsl #24
    afd4:	0100004e 	tsteq	r0, lr, asr #32
    afd8:	00970128 	addseq	r0, r7, r8, lsr #2
    afdc:	9eb40000 	cdpls	0, 11, cr0, cr4, cr0, {0}
    afe0:	00200800 	eoreq	r0, r0, r0, lsl #16
    afe4:	9c010000 	stcls	0, cr0, [r1], {-0}
    afe8:	004ddf1a 	subeq	sp, sp, sl, lsl pc
    afec:	013c0100 	teqeq	ip, r0, lsl #2
    aff0:	000000a2 	andeq	r0, r0, r2, lsr #1
    aff4:	08009ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, pc}
    aff8:	00000034 	andeq	r0, r0, r4, lsr r0
    affc:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
    b000:	741b0000 	ldrvc	r0, [fp], #-0
    b004:	0100706d 	tsteq	r0, sp, rrx
    b008:	00a2013e 	adceq	r0, r2, lr, lsr r1
    b00c:	91020000 	mrsls	r0, (UNDEF: 2)
    b010:	721a0076 	andsvc	r0, sl, #118	; 0x76
    b014:	0100004d 	tsteq	r0, sp, asr #32
    b018:	00970153 	addseq	r0, r7, r3, asr r1
    b01c:	9f080000 	svcls	0x00080000
    b020:	004e0800 	subeq	r0, lr, r0, lsl #16
    b024:	9c010000 	stcls	0, cr0, [r1], {-0}
    b028:	0000077c 	andeq	r0, r0, ip, ror r7
    b02c:	7463461c 	strbtvc	r4, [r3], #-1564	; 0x61c
    b030:	01530100 	cmpeq	r3, r0, lsl #2
    b034:	00000097 	muleq	r0, r7, r0
    b038:	1d6f9102 	stfnep	f1, [pc, #-8]!	; b038 <_Min_Stack_Size+0xac38>
    b03c:	00000678 	andeq	r0, r0, r8, ror r6
    b040:	26015301 	strcs	r5, [r1], -r1, lsl #6
    b044:	02000001 	andeq	r0, r0, #1
    b048:	741b6e91 	ldrvc	r6, [fp], #-3729	; 0xe91
    b04c:	0100706d 	tsteq	r0, sp, rrx
    b050:	00970155 	addseq	r0, r7, r5, asr r1
    b054:	91020000 	mrsls	r0, (UNDEF: 2)
    b058:	0b1a0077 	bleq	68b23c <_Min_Stack_Size+0x68ae3c>
    b05c:	0100004d 	tsteq	r0, sp, asr #32
    b060:	00970172 	addseq	r0, r7, r2, ror r1
    b064:	9f580000 	svcls	0x00580000
    b068:	00440800 	subeq	r0, r4, r0, lsl #16
    b06c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b070:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    b074:	0006781d 	andeq	r7, r6, sp, lsl r8
    b078:	01720100 	cmneq	r2, r0, lsl #2
    b07c:	00000126 	andeq	r0, r0, r6, lsr #2
    b080:	1b6f9102 	blne	1bef490 <_Min_Stack_Size+0x1bef090>
    b084:	00706d74 	rsbseq	r6, r0, r4, ror sp
    b088:	97017401 	strls	r7, [r1, -r1, lsl #8]
    b08c:	02000000 	andeq	r0, r0, #0
    b090:	1a007791 	bne	28edc <_Min_Stack_Size+0x28adc>
    b094:	00004f1a 	andeq	r4, r0, sl, lsl pc
    b098:	97019701 	strls	r9, [r1, -r1, lsl #14]
    b09c:	9c000000 	stcls	0, cr0, [r0], {-0}
    b0a0:	4e08009f 	mcrmi	0, 0, r0, cr8, cr15, {4}
    b0a4:	01000000 	mrseq	r0, (UNDEF: 0)
    b0a8:	0007fd9c 	muleq	r7, ip, sp
    b0ac:	4fe01d00 	svcmi	0x00e01d00
    b0b0:	97010000 	strls	r0, [r1, -r0]
    b0b4:	00009701 	andeq	r9, r0, r1, lsl #14
    b0b8:	6f910200 	svcvs	0x00910200
    b0bc:	0006781d 	andeq	r7, r6, sp, lsl r8
    b0c0:	01970100 	orrseq	r0, r7, r0, lsl #2
    b0c4:	00000126 	andeq	r0, r0, r6, lsr #2
    b0c8:	1b6e9102 	blne	1baf4d8 <_Min_Stack_Size+0x1baf0d8>
    b0cc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    b0d0:	97019901 	strls	r9, [r1, -r1, lsl #18]
    b0d4:	02000000 	andeq	r0, r0, #0
    b0d8:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    b0dc:	00004f82 	andeq	r4, r0, r2, lsl #31
    b0e0:	9701b401 	strls	fp, [r1, -r1, lsl #8]
    b0e4:	ec000000 	stc	0, cr0, [r0], {-0}
    b0e8:	9408009f 	strls	r0, [r8], #-159	; 0x9f
    b0ec:	01000000 	mrseq	r0, (UNDEF: 0)
    b0f0:	4d161a9c 	vldrmi	s2, [r6, #-624]	; 0xfffffd90
    b0f4:	ec010000 	stc	0, cr0, [r1], {-0}
    b0f8:	00009701 	andeq	r9, r0, r1, lsl #14
    b0fc:	00a08000 	adceq	r8, r0, r0
    b100:	00004e08 	andeq	r4, r0, r8, lsl #28
    b104:	5b9c0100 	blpl	fe70b50c <_estack+0xde6db50c>
    b108:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    b10c:	00000814 	andeq	r0, r0, r4, lsl r8
    b110:	9701ec01 	strls	lr, [r1, -r1, lsl #24]
    b114:	02000000 	andeq	r0, r0, #0
    b118:	781d6f91 	ldmdavc	sp, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    b11c:	01000006 	tsteq	r0, r6
    b120:	012601ec 	smulwteq	r6, ip, r1
    b124:	91020000 	mrsls	r0, (UNDEF: 2)
    b128:	6d741b6e 	vldmdbvs	r4!, {d17-<overflow reg d71>}
    b12c:	ee010070 	mcr	0, 0, r0, cr1, cr0, {3}
    b130:	00009701 	andeq	r9, r0, r1, lsl #14
    b134:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    b138:	4e841a00 	vdivmi.f32	s2, s8, s0
    b13c:	0b010000 	bleq	4b144 <_Min_Stack_Size+0x4ad44>
    b140:	00009702 	andeq	r9, r0, r2, lsl #14
    b144:	00a0d000 	adceq	sp, r0, r0
    b148:	00019408 	andeq	r9, r1, r8, lsl #8
    b14c:	b29c0100 	addslt	r0, ip, #0, 2
    b150:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    b154:	00004d4a 	andeq	r4, r0, sl, asr #26
    b158:	97020b01 	strls	r0, [r2, -r1, lsl #22]
    b15c:	02000000 	andeq	r0, r0, #0
    b160:	ea1d6f91 	b	766fac <_Min_Stack_Size+0x766bac>
    b164:	0100004d 	tsteq	r0, sp, asr #32
    b168:	0097020b 	addseq	r0, r7, fp, lsl #4
    b16c:	91020000 	mrsls	r0, (UNDEF: 2)
    b170:	4f281e6e 	svcmi	0x00281e6e
    b174:	0d010000 	stceq	0, cr0, [r1, #-0]
    b178:	0000b802 	andeq	fp, r0, r2, lsl #16
    b17c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b180:	004d7e1e 	subeq	r7, sp, lr, lsl lr
    b184:	020e0100 	andeq	r0, lr, #0, 2
    b188:	00000097 	muleq	r0, r7, r0
    b18c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    b190:	004d571a 	subeq	r5, sp, sl, lsl r7
    b194:	026f0100 	rsbeq	r0, pc, #0, 2
    b198:	00000097 	muleq	r0, r7, r0
    b19c:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
    b1a0:	000001d4 	ldrdeq	r0, [r0], -r4
    b1a4:	08eb9c01 	stmiaeq	fp!, {r0, sl, fp, ip, pc}^
    b1a8:	4a1d0000 	bmi	74b1b0 <_Min_Stack_Size+0x74adb0>
    b1ac:	0100004d 	tsteq	r0, sp, asr #32
    b1b0:	0097026f 	addseq	r0, r7, pc, ror #4
    b1b4:	91020000 	mrsls	r0, (UNDEF: 2)
    b1b8:	4f901e6f 	svcmi	0x00901e6f
    b1bc:	71010000 	mrsvc	r0, (UNDEF: 1)
    b1c0:	0008eb02 	andeq	lr, r8, r2, lsl #22
    b1c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b1c8:	00970600 	addseq	r0, r7, r0, lsl #12
    b1cc:	08fb0000 	ldmeq	fp!, {}^	; <UNPREDICTABLE>
    b1d0:	c3070000 	movwgt	r0, #28672	; 0x7000
    b1d4:	01000000 	mrseq	r0, (UNDEF: 0)
    b1d8:	4f391a00 	svcmi	0x00391a00
    b1dc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    b1e0:	0000a202 	andeq	sl, r0, r2, lsl #4
    b1e4:	00a43800 	adceq	r3, r4, r0, lsl #16
    b1e8:	0001f408 	andeq	pc, r1, r8, lsl #8
    b1ec:	439c0100 	orrsmi	r0, ip, #0, 2
    b1f0:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    b1f4:	00004d4a 	andeq	r4, r0, sl, asr #26
    b1f8:	b802ce01 	stmdalt	r2, {r0, r9, sl, fp, lr, pc}
    b1fc:	02000000 	andeq	r0, r0, #0
    b200:	741b6c91 	ldrvc	r6, [fp], #-3217	; 0xc91
    b204:	0100706d 	tsteq	r0, sp, rrx
    b208:	009702d0 			; <UNDEFINED> instruction: 0x009702d0
    b20c:	91020000 	mrsls	r0, (UNDEF: 2)
    b210:	4f901e77 	svcmi	0x00901e77
    b214:	d1010000 	mrsle	r0, (UNDEF: 1)
    b218:	0008eb02 	andeq	lr, r8, r2, lsl #22
    b21c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b220:	4d251f00 	stcmi	15, cr1, [r5, #-0]
    b224:	33010000 	movwcc	r0, #4096	; 0x1000
    b228:	0000a203 	andeq	sl, r0, r3, lsl #4
    b22c:	00a62c00 	adceq	r2, r6, r0, lsl #24
    b230:	00006808 	andeq	r6, r0, r8, lsl #16
    b234:	799c0100 	ldmibvc	ip, {r8}
    b238:	1b000009 	blne	b264 <_Min_Stack_Size+0xae64>
    b23c:	35010078 	strcc	r0, [r1, #-120]	; 0x78
    b240:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b244:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b248:	0072781b 	rsbseq	r7, r2, fp, lsl r8
    b24c:	ad033501 	cfstr32ge	mvfx3, [r3, #-4]
    b250:	02000000 	andeq	r0, r0, #0
    b254:	1f007091 	svcne	0x00007091
    b258:	00004e21 	andeq	r4, r0, r1, lsr #28
    b25c:	a2035a01 	andge	r5, r3, #4096	; 0x1000
    b260:	94000000 	strls	r0, [r0], #-0
    b264:	540800a6 	strpl	r0, [r8], #-166	; 0xa6
    b268:	01000000 	mrseq	r0, (UNDEF: 0)
    b26c:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    b270:	00791b00 	rsbseq	r1, r9, r0, lsl #22
    b274:	ad035c01 	stcge	12, cr5, [r3, #-4]
    b278:	02000000 	andeq	r0, r0, #0
    b27c:	791b7091 	ldmdbvc	fp, {r0, r4, r7, ip, sp, lr}
    b280:	5c010072 	stcpl	0, cr0, [r1], {114}	; 0x72
    b284:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b28c:	4d3c1f00 	ldcmi	15, cr1, [ip, #-0]
    b290:	7b010000 	blvc	4b298 <_Min_Stack_Size+0x4ae98>
    b294:	0000a203 	andeq	sl, r0, r3, lsl #4
    b298:	00a6e800 	adceq	lr, r6, r0, lsl #16
    b29c:	00002608 	andeq	r2, r0, r8, lsl #12
    b2a0:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    b2a4:	1b000009 	blne	b2d0 <_Min_Stack_Size+0xaed0>
    b2a8:	7d01007a 	stcvc	0, cr0, [r1, #-488]	; 0xfffffe18
    b2ac:	0000b803 	andeq	fp, r0, r3, lsl #16
    b2b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b2b4:	4e0a2000 	cdpmi	0, 0, cr2, cr10, cr0, {0}
    b2b8:	8d010000 	stchi	0, cr0, [r1, #-0]
    b2bc:	00a71003 	adceq	r1, r7, r3
    b2c0:	00008c08 	andeq	r8, r0, r8, lsl #24
    b2c4:	fd9c0100 	ldc2	1, cr0, [ip]
    b2c8:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    b2cc:	000041eb 	andeq	r4, r0, fp, ror #3
    b2d0:	f6038f01 			; <UNDEFINED> instruction: 0xf6038f01
    b2d4:	02000004 	andeq	r0, r0, #4
    b2d8:	20007091 	mulcs	r0, r1, r0
    b2dc:	00004dbf 			; <UNDEFINED> instruction: 0x00004dbf
    b2e0:	9c03b301 	stcls	3, cr11, [r3], {1}
    b2e4:	540800a7 	strpl	r0, [r8], #-167	; 0xa7
    b2e8:	01000000 	mrseq	r0, (UNDEF: 0)
    b2ec:	000a239c 	muleq	sl, ip, r3
    b2f0:	4df81e00 	ldclmi	14, cr1, [r8]
    b2f4:	b5010000 	strlt	r0, [r1, #-0]
    b2f8:	00055203 	andeq	r5, r5, r3, lsl #4
    b2fc:	68910200 	ldmvs	r1, {r9}
    b300:	4fba2000 	svcmi	0x00ba2000
    b304:	cf010000 	svcgt	0x00010000
    b308:	00a7f003 	adceq	pc, r7, r3
    b30c:	0000a408 	andeq	sl, r0, r8, lsl #8
    b310:	6a9c0100 	bvs	fe70b718 <_estack+0xde6db718>
    b314:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    b318:	0000194f 	andeq	r1, r0, pc, asr #18
    b31c:	d703cf01 	strle	ip, [r3, -r1, lsl #30]
    b320:	03000005 	movweq	r0, #5
    b324:	1d7fb791 	ldclne	7, cr11, [pc, #-580]!	; b0e8 <_Min_Stack_Size+0xace8>
    b328:	0000036e 	andeq	r0, r0, lr, ror #6
    b32c:	6a03cf01 	bvs	fef38 <_Min_Stack_Size+0xfeb38>
    b330:	0300000a 	movweq	r0, #10
    b334:	1e7fb091 	mrcne	0, 3, fp, cr15, cr1, {4}
    b338:	0000432d 	andeq	r4, r0, sp, lsr #6
    b33c:	0803d101 	stmdaeq	r3, {r0, r8, ip, lr, pc}
    b340:	03000004 	movweq	r0, #4
    b344:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    b348:	00970417 	addseq	r0, r7, r7, lsl r4
    b34c:	6c1a0000 	ldcvs	0, cr0, [sl], {-0}
    b350:	0100004e 	tsteq	r0, lr, asr #32
    b354:	0097041e 	addseq	r0, r7, lr, lsl r4
    b358:	a8940000 	ldmge	r4, {}	; <UNPREDICTABLE>
    b35c:	015c0800 	cmpeq	ip, r0, lsl #16
    b360:	9c010000 	stcls	0, cr0, [r1], {-0}
    b364:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    b368:	004d4a1d 	subeq	r4, sp, sp, lsl sl
    b36c:	041e0100 	ldreq	r0, [lr], #-256	; 0x100
    b370:	00000097 	muleq	r0, r7, r0
    b374:	1d6f9102 	stfnep	f1, [pc, #-8]!	; b374 <_Min_Stack_Size+0xaf74>
    b378:	00004dea 	andeq	r4, r0, sl, ror #27
    b37c:	97041e01 	strls	r1, [r4, -r1, lsl #28]
    b380:	02000000 	andeq	r0, r0, #0
    b384:	281e6e91 	ldmdacs	lr, {r0, r4, r7, r9, sl, fp, sp, lr}
    b388:	0100004f 	tsteq	r0, pc, asr #32
    b38c:	00b80420 	adcseq	r0, r8, r0, lsr #8
    b390:	91020000 	mrsls	r0, (UNDEF: 2)
    b394:	c91a0074 	ldmdbgt	sl, {r2, r4, r5, r6}
    b398:	0100004f 	tsteq	r0, pc, asr #32
    b39c:	00970474 	addseq	r0, r7, r4, ror r4
    b3a0:	a9f00000 	ldmibge	r0!, {}^	; <UNPREDICTABLE>
    b3a4:	01dc0800 	bicseq	r0, ip, r0, lsl #16
    b3a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    b3ac:	00000af1 	strdeq	r0, [r0], -r1
    b3b0:	004d4a1d 	subeq	r4, sp, sp, lsl sl
    b3b4:	04740100 	ldrbteq	r0, [r4], #-256	; 0x100
    b3b8:	00000097 	muleq	r0, r7, r0
    b3bc:	1b6f9102 	blne	1bef7cc <_Min_Stack_Size+0x1bef3cc>
    b3c0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    b3c4:	97047601 	strls	r7, [r4, -r1, lsl #12]
    b3c8:	02000000 	andeq	r0, r0, #0
    b3cc:	1a007791 	bne	29218 <_Min_Stack_Size+0x28e18>
    b3d0:	00004f5b 	andeq	r4, r0, fp, asr pc
    b3d4:	a204d301 	andge	sp, r4, #67108864	; 0x4000000
    b3d8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    b3dc:	cc0800ab 	stcgt	0, cr0, [r8], {171}	; 0xab
    b3e0:	01000001 	tsteq	r0, r1
    b3e4:	000b2a9c 	muleq	fp, ip, sl
    b3e8:	4d4a1d00 	stclmi	13, cr1, [sl, #-0]
    b3ec:	d3010000 	movwle	r0, #4096	; 0x1000
    b3f0:	0000b804 	andeq	fp, r0, r4, lsl #16
    b3f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b3f8:	004f901e 	subeq	r9, pc, lr, lsl r0	; <UNPREDICTABLE>
    b3fc:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    b400:	000008eb 	andeq	r0, r0, fp, ror #17
    b404:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b408:	004e2f1a 	subeq	r2, lr, sl, lsl pc
    b40c:	05310100 	ldreq	r0, [r1, #-256]!	; 0x100
    b410:	00000097 	muleq	r0, r7, r0
    b414:	0800ad98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, pc}
    b418:	0000006c 	andeq	r0, r0, ip, rrx
    b41c:	0b549c01 	bleq	1532428 <_Min_Stack_Size+0x1532028>
    b420:	f81e0000 			; <UNDEFINED> instruction: 0xf81e0000
    b424:	0100004d 	tsteq	r0, sp, asr #32
    b428:	05520533 	ldrbeq	r0, [r2, #-1331]	; 0x533
    b42c:	91020000 	mrsls	r0, (UNDEF: 2)
    b430:	f7210068 			; <UNDEFINED> instruction: 0xf7210068
    b434:	01000043 	tsteq	r0, r3, asr #32
    b438:	ae040552 	cfrshl32ge	mvfx4, mvfx2, r0
    b43c:	00340800 	eorseq	r0, r4, r0, lsl #16
    b440:	9c010000 	stcls	0, cr0, [r1], {-0}
    b444:	00000b89 	andeq	r0, r0, r9, lsl #23
    b448:	0044641d 	subeq	r6, r4, sp, lsl r4
    b44c:	05520100 	ldrbeq	r0, [r2, #-256]	; 0x100
    b450:	000000ca 	andeq	r0, r0, sl, asr #1
    b454:	1e6c9102 	lgnnee	f1, f2
    b458:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    b45c:	ca055401 	bgt	160468 <_Min_Stack_Size+0x160068>
    b460:	02000000 	andeq	r0, r0, #0
    b464:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
    b468:	0000015e 	andeq	r0, r0, lr, asr r1
    b46c:	e906a709 	stmdb	r6, {r0, r3, r8, r9, sl, sp, pc}
    b470:	23000000 	movwcs	r0, #0
    b474:	00004d02 	andeq	r4, r0, r2, lsl #26
    b478:	05905901 	ldreq	r5, [r0, #2305]	; 0x901
    b47c:	03050000 	movweq	r0, #20480	; 0x5000
    b480:	200004e0 	andcs	r0, r0, r0, ror #9
    b484:	004ede23 	subeq	sp, lr, r3, lsr #28
    b488:	b85b0100 	ldmdalt	fp, {r8}^
    b48c:	05000000 	streq	r0, [r0, #-0]
    b490:	00005c03 	andeq	r5, r0, r3, lsl #24
    b494:	024c0020 	subeq	r0, ip, #32
    b498:	00040000 	andeq	r0, r4, r0
    b49c:	00002005 	andeq	r2, r0, r5
    b4a0:	501b0104 	andspl	r0, fp, r4, lsl #2
    b4a4:	e0010000 	and	r0, r1, r0
    b4a8:	16000050 			; <UNDEFINED> instruction: 0x16000050
    b4ac:	40000051 	andmi	r0, r0, r1, asr r0
    b4b0:	0000000d 	andeq	r0, r0, sp
    b4b4:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    b4b8:	0200004e 	andeq	r0, r0, #78	; 0x4e
    b4bc:	01700408 	cmneq	r0, r8, lsl #8
    b4c0:	04030000 	streq	r0, [r3], #-0
    b4c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    b4c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b4cc:	00000133 	andeq	r0, r0, r3, lsr r1
    b4d0:	4d060102 	stfmis	f0, [r6, #-8]
    b4d4:	02000001 	andeq	r0, r0, #1
    b4d8:	014b0801 	cmpeq	fp, r1, lsl #16
    b4dc:	02020000 	andeq	r0, r2, #0
    b4e0:	00018705 	andeq	r8, r1, r5, lsl #14
    b4e4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b4e8:	0000000e 	andeq	r0, r0, lr
    b4ec:	00017704 	andeq	r7, r1, r4, lsl #14
    b4f0:	613f0200 	teqvs	pc, r0, lsl #4
    b4f4:	02000000 	andeq	r0, r0, #0
    b4f8:	00050504 	andeq	r0, r5, r4, lsl #10
    b4fc:	b4040000 	strlt	r0, [r4], #-0
    b500:	02000005 	andeq	r0, r0, #5
    b504:	00007341 	andeq	r7, r0, r1, asr #6
    b508:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b50c:	0000012e 	andeq	r0, r0, lr, lsr #2
    b510:	00050802 	andeq	r0, r5, r2, lsl #16
    b514:	02000000 	andeq	r0, r0, #0
    b518:	01290708 	teqeq	r9, r8, lsl #14
    b51c:	04020000 	streq	r0, [r2], #-0
    b520:	00019107 	andeq	r9, r1, r7, lsl #2
    b524:	08010200 	stmdaeq	r1, {r9}
    b528:	00000154 	andeq	r0, r0, r4, asr r1
    b52c:	81040402 	tsthi	r4, r2, lsl #8
    b530:	02000001 	andeq	r0, r0, #1
    b534:	016b0408 	cmneq	fp, r8, lsl #8
    b538:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    b53c:	c8010f03 	stmdagt	r1, {r0, r1, r8, r9, sl, fp}
    b540:	06000000 	streq	r0, [r0], -r0
    b544:	0077736c 	rsbseq	r7, r7, ip, ror #6
    b548:	68011103 	stmdavs	r1, {r0, r1, r8, ip}
    b54c:	00000000 	andeq	r0, r0, r0
    b550:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    b554:	01120300 	tsteq	r2, r0, lsl #6
    b558:	00000068 	andeq	r0, r0, r8, rrx
    b55c:	08070004 	stmdaeq	r7, {r2}
    b560:	ea010c03 	b	4e574 <_Min_Stack_Size+0x4e174>
    b564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b568:	000056ba 			; <UNDEFINED> instruction: 0x000056ba
    b56c:	25010e03 	strcs	r0, [r1, #-3587]	; 0xe03
    b570:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b574:	00005015 	andeq	r5, r0, r5, lsl r0
    b578:	a4011303 	strge	r1, [r1], #-771	; 0x303
    b57c:	00000000 	andeq	r0, r0, r0
    b580:	004fea09 	subeq	lr, pc, r9, lsl #20
    b584:	01140300 	tsteq	r4, r0, lsl #6
    b588:	000000c8 	andeq	r0, r0, r8, asr #1
    b58c:	0050060a 	subseq	r0, r0, sl, lsl #12
    b590:	256c0400 	strbcs	r0, [ip, #-1024]!	; 0x400
    b594:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    b598:	880800ae 	stmdahi	r8, {r1, r2, r3, r5, r7}
    b59c:	01000003 	tsteq	r0, r3
    b5a0:	0001b69c 	muleq	r1, ip, r6
    b5a4:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    b5a8:	00258101 	eoreq	r8, r5, r1, lsl #2
    b5ac:	00000000 	andeq	r0, r0, r0
    b5b0:	770c0000 	strvc	r0, [ip, -r0]
    b5b4:	25870100 	strcs	r0, [r7, #256]	; 0x100
    b5b8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    b5bc:	0c000001 	stceq	0, cr0, [r0], {1}
    b5c0:	01003173 	tsteq	r0, r3, ror r1
    b5c4:	00002587 	andeq	r2, r0, r7, lsl #11
    b5c8:	00017000 	andeq	r7, r1, r0
    b5cc:	32730c00 	rsbscc	r0, r3, #0, 24
    b5d0:	25870100 	strcs	r0, [r7, #256]	; 0x100
    b5d4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    b5d8:	0c000001 	stceq	0, cr0, [r0], {1}
    b5dc:	8701007a 	smlsdxhi	r1, sl, r0, r0
    b5e0:	00000025 	andeq	r0, r0, r5, lsr #32
    b5e4:	000001c0 	andeq	r0, r0, r0, asr #3
    b5e8:	0078690c 	rsbseq	r6, r8, ip, lsl #18
    b5ec:	00568801 	subseq	r8, r6, r1, lsl #16
    b5f0:	01e80000 	mvneq	r0, r0
    b5f4:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    b5f8:	88010078 	stmdahi	r1, {r3, r4, r5, r6}
    b5fc:	00000056 	andeq	r0, r0, r6, asr r0
    b600:	690c5701 	stmdbvs	ip, {r0, r8, r9, sl, ip, lr}
    b604:	88010064 	stmdahi	r1, {r2, r5, r6}
    b608:	00000056 	andeq	r0, r0, r6, asr r0
    b60c:	00000286 	andeq	r0, r0, r6, lsl #5
    b610:	00ae500e 	adceq	r5, lr, lr
    b614:	00000208 	andeq	r0, r0, r8, lsl #4
    b618:	00019700 	andeq	r9, r1, r0, lsl #14
    b61c:	50100f00 	andspl	r0, r0, r0, lsl #30
    b620:	8a010000 	bhi	4b628 <_Min_Stack_Size+0x4b228>
    b624:	000000ea 	andeq	r0, r0, sl, ror #1
    b628:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b62c:	0d281000 	stceq	0, cr1, [r8, #-0]
    b630:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    b634:	6c110000 	ldcvs	0, cr0, [r1], {-0}
    b638:	0100776f 	tsteq	r0, pc, ror #14
    b63c:	0000688d 	andeq	r6, r0, sp, lsl #17
    b640:	46120000 	ldrmi	r0, [r2], -r0
    b644:	3e0800b0 	mcrcc	0, 0, r0, cr8, cr0, {5}
    b648:	00000002 	andeq	r0, r0, r2
    b64c:	00002513 	andeq	r2, r0, r3, lsl r5
    b650:	0001c600 	andeq	ip, r1, r0, lsl #12
    b654:	00881400 	addeq	r1, r8, r0, lsl #8
    b658:	00030000 	andeq	r0, r3, r0
    b65c:	0050d915 	subseq	sp, r0, r5, lsl r9
    b660:	d7510100 	ldrble	r0, [r1, -r0, lsl #2]
    b664:	05000001 	streq	r0, [r0, #-1]
    b668:	00f38003 	rscseq	r8, r3, r3
    b66c:	01b61608 			; <UNDEFINED> instruction: 0x01b61608
    b670:	0f150000 	svceq	0x00150000
    b674:	01000051 	qaddeq	r0, r1, r0
    b678:	0001ed5c 	andeq	lr, r1, ip, asr sp
    b67c:	60030500 	andvs	r0, r3, r0, lsl #10
    b680:	160800f3 			; <UNDEFINED> instruction: 0x160800f3
    b684:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    b688:	00002513 	andeq	r2, r0, r3, lsl r5
    b68c:	00020200 	andeq	r0, r2, r0, lsl #4
    b690:	00881400 	addeq	r1, r8, r0, lsl #8
    b694:	000a0000 	andeq	r0, sl, r0
    b698:	00546111 	subseq	r6, r4, r1, lsl r1
    b69c:	020c6701 	andeq	r6, ip, #262144	; 0x40000
    b6a0:	f2160000 	vhadd.s16	d0, d6, d0
    b6a4:	17000001 	strne	r0, [r0, -r1]
    b6a8:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    b6ac:	02257d01 	eoreq	r7, r5, #1, 26	; 0x40
    b6b0:	00080000 	andeq	r0, r8, r0
    b6b4:	00000000 	andeq	r0, r0, r0
    b6b8:	163ff000 	ldrtne	pc, [pc], -r0	; <UNPREDICTABLE>
    b6bc:	00000025 	andeq	r0, r0, r5, lsr #32
    b6c0:	00500118 	subseq	r0, r0, r8, lsl r1
    b6c4:	257e0100 	ldrbcs	r0, [lr, #-256]!	; 0x100
    b6c8:	08000002 	stmdaeq	r0, {r1}
    b6cc:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    b6d0:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    b6d4:	00500b19 	subseq	r0, r0, r9, lsl fp
    b6d8:	25740400 	ldrbcs	r0, [r4, #-1024]!	; 0x400
    b6dc:	1a000000 	bne	b6e4 <_Min_Stack_Size+0xb2e4>
    b6e0:	00000025 	andeq	r0, r0, r5, lsr #32
    b6e4:	01320000 	teqeq	r2, r0
    b6e8:	00040000 	andeq	r0, r4, r0
    b6ec:	00002163 	andeq	r2, r0, r3, ror #2
    b6f0:	501b0104 	andspl	r0, fp, r4, lsl #2
    b6f4:	84010000 	strhi	r0, [r1], #-0
    b6f8:	16000051 			; <UNDEFINED> instruction: 0x16000051
    b6fc:	50000051 	andpl	r0, r0, r1, asr r0
    b700:	0000000d 	andeq	r0, r0, sp
    b704:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    b708:	02000050 	andeq	r0, r0, #80	; 0x50
    b70c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b710:	04030074 	streq	r0, [r3], #-116	; 0x74
    b714:	00013307 	andeq	r3, r1, r7, lsl #6
    b718:	06010300 	streq	r0, [r1], -r0, lsl #6
    b71c:	0000014d 	andeq	r0, r0, sp, asr #2
    b720:	4b080103 	blmi	20bb34 <_Min_Stack_Size+0x20b734>
    b724:	03000001 	movweq	r0, #1
    b728:	01870502 	orreq	r0, r7, r2, lsl #10
    b72c:	02030000 	andeq	r0, r3, #0
    b730:	00000e07 	andeq	r0, r0, r7, lsl #28
    b734:	05040300 	streq	r0, [r4, #-768]	; 0x300
    b738:	00000005 	andeq	r0, r0, r5
    b73c:	0005b404 	andeq	fp, r5, r4, lsl #8
    b740:	61410300 	mrsvs	r0, (UNDEF: 113)
    b744:	03000000 	movweq	r0, #0
    b748:	012e0704 	teqeq	lr, r4, lsl #14
    b74c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    b750:	00000005 	andeq	r0, r0, r5
    b754:	07080300 	streq	r0, [r8, -r0, lsl #6]
    b758:	00000129 	andeq	r0, r0, r9, lsr #2
    b75c:	91070403 	tstls	r7, r3, lsl #8
    b760:	03000001 	movweq	r0, #1
    b764:	01540801 	cmpeq	r4, r1, lsl #16
    b768:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    b76c:	00017004 	andeq	r7, r1, r4
    b770:	04040300 	streq	r0, [r4], #-768	; 0x300
    b774:	00000181 	andeq	r0, r0, r1, lsl #3
    b778:	6b040803 	blvs	10d78c <_Min_Stack_Size+0x10d38c>
    b77c:	05000001 	streq	r0, [r0, #-1]
    b780:	010f0208 	tsteq	pc, r8, lsl #4
    b784:	000000bd 	strheq	r0, [r0], -sp
    b788:	77736c06 	ldrbvc	r6, [r3, -r6, lsl #24]!
    b78c:	01110200 	tsteq	r1, r0, lsl #4
    b790:	00000056 	andeq	r0, r0, r6, asr r0
    b794:	736d0600 	cmnvc	sp, #0, 12
    b798:	12020077 	andne	r0, r2, #119	; 0x77
    b79c:	00005601 	andeq	r5, r0, r1, lsl #12
    b7a0:	07000400 	streq	r0, [r0, -r0, lsl #8]
    b7a4:	010c0208 	tsteq	ip, r8, lsl #4
    b7a8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b7ac:	0056ba08 	subseq	fp, r6, r8, lsl #20
    b7b0:	010e0200 	mrseq	r0, LR_fiq
    b7b4:	00000084 	andeq	r0, r0, r4, lsl #1
    b7b8:	00501508 	subseq	r1, r0, r8, lsl #10
    b7bc:	01130200 	tsteq	r3, r0, lsl #4
    b7c0:	00000099 	muleq	r0, r9, r0
    b7c4:	4fea0900 	svcmi	0x00ea0900
    b7c8:	14020000 	strne	r0, [r2], #-0
    b7cc:	0000bd01 	andeq	fp, r0, r1, lsl #26
    b7d0:	500b0a00 	andpl	r0, fp, r0, lsl #20
    b7d4:	74040000 	strvc	r0, [r4], #-0
    b7d8:	00000084 	andeq	r0, r0, r4, lsl #1
    b7dc:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
    b7e0:	00000006 	andeq	r0, r0, r6
    b7e4:	780b9c01 	stmdavc	fp, {r0, sl, fp, ip, pc}
    b7e8:	843d0100 	ldrthi	r0, [sp], #-256	; 0x100
    b7ec:	06000000 	streq	r0, [r0], -r0
    b7f0:	51049350 	tstpl	r4, r0, asr r3
    b7f4:	7f0c0493 	svcvc	0x000c0493
    b7f8:	01000051 	qaddeq	r0, r1, r0
    b7fc:	00005643 	andeq	r5, r0, r3, asr #12
    b800:	b1c00d00 	biclt	r0, r0, r0, lsl #26
    b804:	00040800 	andeq	r0, r4, r0, lsl #16
    b808:	7a0e0000 	bvc	38b810 <_Min_Stack_Size+0x38b410>
    b80c:	01000051 	qaddeq	r0, r1, r0
    b810:	0000df45 	andeq	sp, r0, r5, asr #30
    b814:	0002f700 	andeq	pc, r2, r0, lsl #14
    b818:	00000000 	andeq	r0, r0, r0
    b81c:	0000025c 	andeq	r0, r0, ip, asr r2
    b820:	222b0004 	eorcs	r0, fp, #4
    b824:	01040000 	mrseq	r0, (UNDEF: 4)
    b828:	0000501b 	andeq	r5, r0, fp, lsl r0
    b82c:	0051e101 	subseq	lr, r1, r1, lsl #2
    b830:	00511600 	subseq	r1, r1, r0, lsl #12
    b834:	000d6000 	andeq	r6, sp, r0
    b838:	00000000 	andeq	r0, r0, r0
    b83c:	0051e200 	subseq	lr, r1, r0, lsl #4
    b840:	04080200 	streq	r0, [r8], #-512	; 0x200
    b844:	00000170 	andeq	r0, r0, r0, ror r1
    b848:	69050403 	stmdbvs	r5, {r0, r1, sl}
    b84c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    b850:	01330704 	teqeq	r3, r4, lsl #14
    b854:	01020000 	mrseq	r0, (UNDEF: 2)
    b858:	00014d06 	andeq	r4, r1, r6, lsl #26
    b85c:	08010200 	stmdaeq	r1, {r9}
    b860:	0000014b 	andeq	r0, r0, fp, asr #2
    b864:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    b868:	02000001 	andeq	r0, r0, #1
    b86c:	000e0702 	andeq	r0, lr, r2, lsl #14
    b870:	04020000 	streq	r0, [r2], #-0
    b874:	00000505 	andeq	r0, r0, r5, lsl #10
    b878:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b87c:	0000012e 	andeq	r0, r0, lr, lsr #2
    b880:	00050802 	andeq	r0, r5, r2, lsl #16
    b884:	02000000 	andeq	r0, r0, #0
    b888:	01290708 	teqeq	r9, r8, lsl #14
    b88c:	04020000 	streq	r0, [r2], #-0
    b890:	00019107 	andeq	r9, r1, r7, lsl #2
    b894:	7f040400 	svcvc	0x00040400
    b898:	02000000 	andeq	r0, r0, #0
    b89c:	01540801 	cmpeq	r4, r1, lsl #16
    b8a0:	04040000 	streq	r0, [r4], #-0
    b8a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    b8a8:	00007f05 	andeq	r7, r0, r5, lsl #30
    b8ac:	04040200 	streq	r0, [r4], #-512	; 0x200
    b8b0:	00000181 	andeq	r0, r0, r1, lsl #3
    b8b4:	6b040802 	blvs	10d8c4 <_Min_Stack_Size+0x10d4c4>
    b8b8:	06000001 	streq	r0, [r0], -r1
    b8bc:	0000524a 	andeq	r5, r0, sl, asr #4
    b8c0:	02070228 	andeq	r0, r7, #40, 4	; 0x80000002
    b8c4:	000000fb 	strdeq	r0, [r0], -fp
    b8c8:	004ffc07 	subeq	pc, pc, r7, lsl #24
    b8cc:	020a0200 	andeq	r0, sl, #0, 4
    b8d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    b8d4:	52650700 	rsbpl	r0, r5, #0, 14
    b8d8:	0b020000 	bleq	8b8e0 <_Min_Stack_Size+0x8b4e0>
    b8dc:	00007902 	andeq	r7, r0, r2, lsl #18
    b8e0:	d0070400 	andle	r0, r7, r0, lsl #8
    b8e4:	02000051 	andeq	r0, r0, #81	; 0x51
    b8e8:	0025020c 	eoreq	r0, r5, ip, lsl #4
    b8ec:	07080000 	streq	r0, [r8, -r0]
    b8f0:	000051d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    b8f4:	25020d02 	strcs	r0, [r2, #-3330]	; 0xd02
    b8f8:	10000000 	andne	r0, r0, r0
    b8fc:	0051da07 	subseq	sp, r1, r7, lsl #20
    b900:	020e0200 	andeq	r0, lr, #0, 4
    b904:	00000025 	andeq	r0, r0, r5, lsr #32
    b908:	72650818 	rsbvc	r0, r5, #24, 16	; 0x180000
    b90c:	0f020072 	svceq	0x00020072
    b910:	00002c02 	andeq	r2, r0, r2, lsl #24
    b914:	09002000 	stmdbeq	r0, {sp}
    b918:	00005254 	andeq	r5, r0, r4, asr r2
    b91c:	02470201 	subeq	r0, r7, #268435456	; 0x10000000
    b920:	00000121 	andeq	r0, r0, r1, lsr #2
    b924:	0052100a 	subseq	r1, r2, sl
    b928:	3c0a7f00 	stccc	15, cr7, [sl], {-0}
    b92c:	00000052 	andeq	r0, r0, r2, asr r0
    b930:	0051c10a 	subseq	ip, r1, sl, lsl #2
    b934:	2d0a0100 	stfcss	f0, [sl, #-0]
    b938:	02000052 	andeq	r0, r0, #82	; 0x52
    b93c:	52280b00 	eorpl	r0, r8, #0, 22
    b940:	7d020000 	stcvc	0, cr0, [r2, #-0]
    b944:	00000025 	andeq	r0, r0, r5, lsr #32
    b948:	0800b1c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp, pc}
    b94c:	000000aa 	andeq	r0, r0, sl, lsr #1
    b950:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    b954:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    b958:	25580100 	ldrbcs	r0, [r8, #-256]	; 0x100
    b95c:	0f000000 	svceq	0x00000000
    b960:	0d000003 	stceq	0, cr0, [r0, #-12]
    b964:	6101007a 	tstvs	r1, sl, ror r0
    b968:	00000025 	andeq	r0, r0, r5, lsr #32
    b96c:	04935606 	ldreq	r5, [r3], #1542	; 0x606
    b970:	0d049357 	stceq	3, cr9, [r4, #-348]	; 0xfffffea4
    b974:	00637865 	rsbeq	r7, r3, r5, ror #16
    b978:	009f6201 	addseq	r6, pc, r1, lsl #4
    b97c:	91020000 	mrsls	r0, (UNDEF: 2)
    b980:	b1de0e40 	bicslt	r0, lr, r0, asr #28
    b984:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    b988:	01810000 	orreq	r0, r1, r0
    b98c:	060f0000 	streq	r0, [pc], -r0
    b990:	51049350 	tstpl	r4, r0, asr r3
    b994:	f3050493 	vqshl.u8	d0, d3, d21
    b998:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    b99c:	b1f21000 	mvnslt	r1, r0
    b9a0:	01f20800 	mvnseq	r0, r0, lsl #16
    b9a4:	06100000 	ldreq	r0, [r0], -r0
    b9a8:	070800b2 			; <UNDEFINED> instruction: 0x070800b2
    b9ac:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b9b0:	0800b23c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp, pc}
    b9b4:	0000021c 	andeq	r0, r0, ip, lsl r2
    b9b8:	000001aa 	andeq	r0, r0, sl, lsr #3
    b9bc:	0550010f 	ldrbeq	r0, [r0, #-271]	; 0x10f
    b9c0:	00f3a403 	rscseq	sl, r3, r3, lsl #8
    b9c4:	4e0e0008 	cdpmi	0, 0, cr0, cr14, cr8, {0}
    b9c8:	320800b2 	andcc	r0, r8, #178	; 0xb2
    b9cc:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    b9d0:	0f000001 	svceq	0x00000001
    b9d4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    b9d8:	62100000 	andsvs	r0, r0, #0
    b9dc:	4e0800b2 	mcrmi	0, 0, r0, cr8, cr2, {5}
    b9e0:	10000002 	andne	r0, r0, r2
    b9e4:	0800b26c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip, sp, pc}
    b9e8:	0000024e 	andeq	r0, r0, lr, asr #4
    b9ec:	526a1100 	rsbpl	r1, sl, #0, 2
    b9f0:	52020000 	andpl	r0, r2, #0
    b9f4:	0000fb02 	andeq	pc, r0, r2, lsl #22
    b9f8:	521e1200 	andspl	r1, lr, #0, 4
    b9fc:	9b030000 	blls	cba04 <_Min_Stack_Size+0xcb604>
    ba00:	00000025 	andeq	r0, r0, r5, lsr #32
    ba04:	000001f2 	strdeq	r0, [r0], -r2
    ba08:	00002513 	andeq	r2, r0, r3, lsl r5
    ba0c:	b3120000 	tstlt	r2, #0
    ba10:	02000051 	andeq	r0, r0, #81	; 0x51
    ba14:	00002ccb 	andeq	r2, r0, fp, asr #25
    ba18:	00020700 	andeq	r0, r2, r0, lsl #14
    ba1c:	00251300 	eoreq	r1, r5, r0, lsl #6
    ba20:	12000000 	andne	r0, r0, #0
    ba24:	0000500b 	andeq	r5, r0, fp
    ba28:	00257402 	eoreq	r7, r5, r2, lsl #8
    ba2c:	021c0000 	andseq	r0, ip, #0
    ba30:	25130000 	ldrcs	r0, [r3, #-0]
    ba34:	00000000 	andeq	r0, r0, r0
    ba38:	6e616e14 	mcrvs	14, 3, r6, cr1, cr4, {0}
    ba3c:	01030200 	mrseq	r0, R11_usr
    ba40:	00000025 	andeq	r0, r0, r5, lsr #32
    ba44:	00000232 	andeq	r0, r0, r2, lsr r2
    ba48:	00008613 	andeq	r8, r0, r3, lsl r6
    ba4c:	82150000 	andshi	r0, r5, #0
    ba50:	02000052 	andeq	r0, r0, #82	; 0x52
    ba54:	002c0215 	eoreq	r0, ip, r5, lsl r2
    ba58:	02480000 	subeq	r0, r8, #0
    ba5c:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
    ba60:	00000002 	andeq	r0, r0, r2
    ba64:	009f0404 	addseq	r0, pc, r4, lsl #8
    ba68:	7a160000 	bvc	58ba70 <_Min_Stack_Size+0x58b670>
    ba6c:	04000052 	streq	r0, [r0], #-82	; 0x52
    ba70:	0002590f 	andeq	r5, r2, pc, lsl #18
    ba74:	2c040400 	cfstrscs	mvf0, [r4], {-0}
    ba78:	00000000 	andeq	r0, r0, r0
    ba7c:	000002e0 	andeq	r0, r0, r0, ror #5
    ba80:	23720004 	cmncs	r2, #4
    ba84:	01040000 	mrseq	r0, (UNDEF: 4)
    ba88:	0000501b 	andeq	r5, r0, fp, lsl r0
    ba8c:	0052a401 	subseq	sl, r2, r1, lsl #8
    ba90:	00511600 	subseq	r1, r1, r0, lsl #12
    ba94:	000d7000 	andeq	r7, sp, r0
    ba98:	00000000 	andeq	r0, r0, r0
    ba9c:	00534800 	subseq	r4, r3, r0, lsl #16
    baa0:	04080200 	streq	r0, [r8], #-512	; 0x200
    baa4:	00000170 	andeq	r0, r0, r0, ror r1
    baa8:	69050403 	stmdbvs	r5, {r0, r1, sl}
    baac:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    bab0:	01330704 	teqeq	r3, r4, lsl #14
    bab4:	01020000 	mrseq	r0, (UNDEF: 2)
    bab8:	00014d06 	andeq	r4, r1, r6, lsl #26
    babc:	08010200 	stmdaeq	r1, {r9}
    bac0:	0000014b 	andeq	r0, r0, fp, asr #2
    bac4:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    bac8:	02000001 	andeq	r0, r0, #1
    bacc:	000e0702 	andeq	r0, lr, r2, lsl #14
    bad0:	04020000 	streq	r0, [r2], #-0
    bad4:	00000505 	andeq	r0, r0, r5, lsl #10
    bad8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    badc:	0000012e 	andeq	r0, r0, lr, lsr #2
    bae0:	00050802 	andeq	r0, r5, r2, lsl #16
    bae4:	02000000 	andeq	r0, r0, #0
    bae8:	01290708 	teqeq	r9, r8, lsl #14
    baec:	04020000 	streq	r0, [r2], #-0
    baf0:	00019107 	andeq	r9, r1, r7, lsl #2
    baf4:	7f040400 	svcvc	0x00040400
    baf8:	02000000 	andeq	r0, r0, #0
    bafc:	01540801 	cmpeq	r4, r1, lsl #16
    bb00:	04020000 	streq	r0, [r2], #-0
    bb04:	00018104 	andeq	r8, r1, r4, lsl #2
    bb08:	04080200 	streq	r0, [r8], #-512	; 0x200
    bb0c:	0000016b 	andeq	r0, r0, fp, ror #2
    bb10:	00524a05 	subseq	r4, r2, r5, lsl #20
    bb14:	07022800 	streq	r2, [r2, -r0, lsl #16]
    bb18:	0000f002 	andeq	pc, r0, r2
    bb1c:	4ffc0600 	svcmi	0x00fc0600
    bb20:	0a020000 	beq	8bb28 <_Min_Stack_Size+0x8b728>
    bb24:	00002c02 	andeq	r2, r0, r2, lsl #24
    bb28:	65060000 	strvs	r0, [r6, #-0]
    bb2c:	02000052 	andeq	r0, r0, #82	; 0x52
    bb30:	0079020b 	rsbseq	r0, r9, fp, lsl #4
    bb34:	06040000 	streq	r0, [r4], -r0
    bb38:	000051d0 	ldrdeq	r5, [r0], -r0
    bb3c:	25020c02 	strcs	r0, [r2, #-3074]	; 0xc02
    bb40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bb44:	0051d506 	subseq	sp, r1, r6, lsl #10
    bb48:	020d0200 	andeq	r0, sp, #0, 4
    bb4c:	00000025 	andeq	r0, r0, r5, lsr #32
    bb50:	51da0610 	bicspl	r0, sl, r0, lsl r6
    bb54:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    bb58:	00002502 	andeq	r2, r0, r2, lsl #10
    bb5c:	65071800 	strvs	r1, [r7, #-2048]	; 0x800
    bb60:	02007272 	andeq	r7, r0, #536870919	; 0x20000007
    bb64:	002c020f 	eoreq	r0, ip, pc, lsl #4
    bb68:	00200000 	eoreq	r0, r0, r0
    bb6c:	00525408 	subseq	r5, r2, r8, lsl #8
    bb70:	47020100 	strmi	r0, [r2, -r0, lsl #2]
    bb74:	00011602 	andeq	r1, r1, r2, lsl #12
    bb78:	52100900 	andspl	r0, r0, #0, 18
    bb7c:	097f0000 	ldmdbeq	pc!, {}^	; <UNPREDICTABLE>
    bb80:	0000523c 	andeq	r5, r0, ip, lsr r2
    bb84:	51c10900 	bicpl	r0, r1, r0, lsl #18
    bb88:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    bb8c:	0000522d 	andeq	r5, r0, sp, lsr #4
    bb90:	700a0002 	andvc	r0, sl, r2
    bb94:	0200776f 	andeq	r7, r0, #29097984	; 0x1bc0000
    bb98:	00002585 	andeq	r2, r0, r5, lsl #11
    bb9c:	00b27400 	adcseq	r7, r2, r0, lsl #8
    bba0:	00033208 	andeq	r3, r3, r8, lsl #4
    bba4:	539c0100 	orrspl	r0, ip, #0, 2
    bba8:	0b000002 	bleq	bbb8 <_Min_Stack_Size+0xb7b8>
    bbac:	44010078 	strmi	r0, [r1], #-120	; 0x78
    bbb0:	00000025 	andeq	r0, r0, r5, lsr #32
    bbb4:	00000337 	andeq	r0, r0, r7, lsr r3
    bbb8:	0100790b 	tsteq	r0, fp, lsl #18
    bbbc:	00002544 	andeq	r2, r0, r4, asr #10
    bbc0:	00035f00 	andeq	r5, r3, r0, lsl #30
    bbc4:	007a0c00 	rsbseq	r0, sl, r0, lsl #24
    bbc8:	00254d01 	eoreq	r4, r5, r1, lsl #26
    bbcc:	04150000 	ldreq	r0, [r5], #-0
    bbd0:	650d0000 	strvs	r0, [sp, #-0]
    bbd4:	01006378 	tsteq	r0, r8, ror r3
    bbd8:	00009454 	andeq	r9, r0, r4, asr r4
    bbdc:	b0910300 	addslt	r0, r1, r0, lsl #6
    bbe0:	b28e0e7f 	addlt	r0, lr, #2032	; 0x7f0
    bbe4:	025f0800 	subseq	r0, pc, #0, 16
    bbe8:	018f0000 	orreq	r0, pc, r0
    bbec:	060f0000 	streq	r0, [pc], -r0
    bbf0:	53049352 	movwpl	r9, #17234	; 0x4352
    bbf4:	f3050493 	vqshl.u8	d0, d3, d21
    bbf8:	2502f503 	strcs	pc, [r2, #-1283]	; 0x503
    bbfc:	9350060f 	cmpls	r0, #15728640	; 0xf00000
    bc00:	04935104 	ldreq	r5, [r3], #260	; 0x104
    bc04:	f503f305 			; <UNDEFINED> instruction: 0xf503f305
    bc08:	10002500 	andne	r2, r0, r0, lsl #10
    bc0c:	0800b2a2 	stmdaeq	r0, {r1, r5, r7, r9, ip, sp, pc}
    bc10:	00000279 	andeq	r0, r0, r9, ror r2
    bc14:	00b2b610 	adcseq	fp, r2, r0, lsl r6
    bc18:	00027908 	andeq	r7, r2, r8, lsl #18
    bc1c:	b36a0e00 	cmnlt	sl, #0, 28
    bc20:	028e0800 	addeq	r0, lr, #0, 16
    bc24:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
    bc28:	010f0000 	mrseq	r0, CPSR
    bc2c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    bc30:	b3781000 	cmnlt	r8, #0
    bc34:	02aa0800 	adceq	r0, sl, #0, 16
    bc38:	86100000 	ldrhi	r0, [r0], -r0
    bc3c:	bb0800b3 	bllt	20bf10 <_Min_Stack_Size+0x20bb10>
    bc40:	10000002 	andne	r0, r0, r2
    bc44:	0800b3a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, sp, pc}
    bc48:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    bc4c:	00b3b210 	adcseq	fp, r3, r0, lsl r2
    bc50:	0002bb08 	andeq	fp, r2, r8, lsl #22
    bc54:	b3ee0e00 	mvnlt	r0, #0, 28
    bc58:	028e0800 	addeq	r0, lr, #0, 16
    bc5c:	01ed0000 	mvneq	r0, r0
    bc60:	010f0000 	mrseq	r0, CPSR
    bc64:	007d0250 	rsbseq	r0, sp, r0, asr r2
    bc68:	b4041000 	strlt	r1, [r4], #-0
    bc6c:	02bb0800 	adcseq	r0, fp, #0, 16
    bc70:	52100000 	andspl	r0, r0, #0
    bc74:	aa0800b4 	bge	20bf4c <_Min_Stack_Size+0x20bb4c>
    bc78:	10000002 	andne	r0, r0, r2
    bc7c:	0800b45c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp, pc}
    bc80:	000002aa 	andeq	r0, r0, sl, lsr #5
    bc84:	00b46a10 	adcseq	r6, r4, r0, lsl sl
    bc88:	0002bb08 	andeq	fp, r2, r8, lsl #22
    bc8c:	b4761000 	ldrbtlt	r1, [r6], #-0
    bc90:	02bb0800 	adcseq	r0, fp, #0, 16
    bc94:	82100000 	andshi	r0, r0, #0
    bc98:	790800b4 	stmdbvc	r8, {r2, r4, r5, r7}
    bc9c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    bca0:	0800b4b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, ip, sp, pc}
    bca4:	0000028e 	andeq	r0, r0, lr, lsl #5
    bca8:	00000237 	andeq	r0, r0, r7, lsr r2
    bcac:	0250010f 	subseq	r0, r0, #-1073741821	; 0xc0000003
    bcb0:	1000007d 	andne	r0, r0, sp, ror r0
    bcb4:	0800b506 	stmdaeq	r0, {r1, r2, r8, sl, ip, sp, pc}
    bcb8:	000002aa 	andeq	r0, r0, sl, lsr #5
    bcbc:	00b55610 	adcseq	r5, r5, r0, lsl r6
    bcc0:	0002d108 	andeq	sp, r2, r8, lsl #2
    bcc4:	b5881000 	strlt	r1, [r8]
    bcc8:	02d10800 	sbcseq	r0, r1, #0, 16
    bccc:	11000000 	mrsne	r0, (UNDEF: 0)
    bcd0:	0000526a 	andeq	r5, r0, sl, ror #4
    bcd4:	f0025202 			; <UNDEFINED> instruction: 0xf0025202
    bcd8:	12000000 	andne	r0, r0, #0
    bcdc:	0000528f 	andeq	r5, r0, pc, lsl #5
    bce0:	0025a003 	eoreq	sl, r5, r3
    bce4:	02790000 	rsbseq	r0, r9, #0
    bce8:	25130000 	ldrcs	r0, [r3, #-0]
    bcec:	13000000 	movwne	r0, #0
    bcf0:	00000025 	andeq	r0, r0, r5, lsr #32
    bcf4:	51b31200 			; <UNDEFINED> instruction: 0x51b31200
    bcf8:	cb020000 	blgt	8bd00 <_Min_Stack_Size+0x8b900>
    bcfc:	0000002c 	andeq	r0, r0, ip, lsr #32
    bd00:	0000028e 	andeq	r0, r0, lr, lsl #5
    bd04:	00002513 	andeq	r2, r0, r3, lsl r5
    bd08:	82140000 	andshi	r0, r4, #0
    bd0c:	02000052 	andeq	r0, r0, #82	; 0x52
    bd10:	002c0215 	eoreq	r0, ip, r5, lsl r2
    bd14:	02a40000 	adceq	r0, r4, #0
    bd18:	a4130000 	ldrge	r0, [r3], #-0
    bd1c:	00000002 	andeq	r0, r0, r2
    bd20:	00940404 	addseq	r0, r4, r4, lsl #8
    bd24:	7a150000 	bvc	54bd2c <_Min_Stack_Size+0x54b92c>
    bd28:	04000052 	streq	r0, [r0], #-82	; 0x52
    bd2c:	0002b50f 	andeq	fp, r2, pc, lsl #10
    bd30:	2c040400 	cfstrscs	mvf0, [r4], {-0}
    bd34:	14000000 	strne	r0, [r0], #-0
    bd38:	0000529d 	muleq	r0, sp, r2
    bd3c:	2c010402 	cfstrscs	mvf0, [r1], {2}
    bd40:	d1000000 	mrsle	r0, (UNDEF: 0)
    bd44:	13000002 	movwne	r0, #2
    bd48:	00000025 	andeq	r0, r0, r5, lsr #32
    bd4c:	528a1600 	addpl	r1, sl, #0, 12
    bd50:	0c020000 	stceq	0, cr0, [r2], {-0}
    bd54:	00002501 	andeq	r2, r0, r1, lsl #10
    bd58:	00251300 	eoreq	r1, r5, r0, lsl #6
    bd5c:	00000000 	andeq	r0, r0, r0
    bd60:	00000344 	andeq	r0, r0, r4, asr #6
    bd64:	24bf0004 	ldrtcs	r0, [pc], #4	; bd6c <_Min_Stack_Size+0xb96c>
    bd68:	01040000 	mrseq	r0, (UNDEF: 4)
    bd6c:	0000501b 	andeq	r5, r0, fp, lsl r0
    bd70:	0052f601 	subseq	pc, r2, r1, lsl #12
    bd74:	00511600 	subseq	r1, r1, r0, lsl #12
    bd78:	000db000 	andeq	fp, sp, r0
    bd7c:	00000000 	andeq	r0, r0, r0
    bd80:	00555600 	subseq	r5, r5, r0, lsl #12
    bd84:	04080200 	streq	r0, [r8], #-512	; 0x200
    bd88:	00000170 	andeq	r0, r0, r0, ror r1
    bd8c:	69050403 	stmdbvs	r5, {r0, r1, sl}
    bd90:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    bd94:	01330704 	teqeq	r3, r4, lsl #14
    bd98:	01020000 	mrseq	r0, (UNDEF: 2)
    bd9c:	00014d06 	andeq	r4, r1, r6, lsl #26
    bda0:	08010200 	stmdaeq	r1, {r9}
    bda4:	0000014b 	andeq	r0, r0, fp, asr #2
    bda8:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    bdac:	02000001 	andeq	r0, r0, #1
    bdb0:	000e0702 	andeq	r0, lr, r2, lsl #14
    bdb4:	77040000 	strvc	r0, [r4, -r0]
    bdb8:	02000001 	andeq	r0, r0, #1
    bdbc:	0000613f 	andeq	r6, r0, pc, lsr r1
    bdc0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    bdc4:	00000005 	andeq	r0, r0, r5
    bdc8:	0005b404 	andeq	fp, r5, r4, lsl #8
    bdcc:	73410200 	movtvc	r0, #4608	; 0x1200
    bdd0:	02000000 	andeq	r0, r0, #0
    bdd4:	012e0704 	teqeq	lr, r4, lsl #14
    bdd8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bddc:	00000005 	andeq	r0, r0, r5
    bde0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    bde4:	00000129 	andeq	r0, r0, r9, lsr #2
    bde8:	91070402 	tstls	r7, r2, lsl #8
    bdec:	02000001 	andeq	r0, r0, #1
    bdf0:	01540801 	cmpeq	r4, r1, lsl #16
    bdf4:	04020000 	streq	r0, [r2], #-0
    bdf8:	00018104 	andeq	r8, r1, r4, lsl #2
    bdfc:	04080200 	streq	r0, [r8], #-512	; 0x200
    be00:	0000016b 	andeq	r0, r0, fp, ror #2
    be04:	0f030805 	svceq	0x00030805
    be08:	0000c801 	andeq	ip, r0, r1, lsl #16
    be0c:	736c0600 	cmnvc	ip, #0, 12
    be10:	11030077 	tstne	r3, r7, ror r0
    be14:	00006801 	andeq	r6, r0, r1, lsl #16
    be18:	6d060000 	stcvs	0, cr0, [r6, #-0]
    be1c:	03007773 	movweq	r7, #1907	; 0x773
    be20:	00680112 	rsbeq	r0, r8, r2, lsl r1
    be24:	00040000 	andeq	r0, r4, r0
    be28:	0c030807 	stceq	8, cr0, [r3], {7}
    be2c:	0000ea01 	andeq	lr, r0, r1, lsl #20
    be30:	56ba0800 	ldrtpl	r0, [sl], r0, lsl #16
    be34:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    be38:	00002501 	andeq	r2, r0, r1, lsl #10
    be3c:	50150800 	andspl	r0, r5, r0, lsl #16
    be40:	13030000 	movwne	r0, #12288	; 0x3000
    be44:	0000a401 	andeq	sl, r0, r1, lsl #8
    be48:	ea090000 	b	24be50 <_Min_Stack_Size+0x24ba50>
    be4c:	0300004f 	movweq	r0, #79	; 0x4f
    be50:	00c80114 	sbceq	r0, r8, r4, lsl r1
    be54:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    be58:	01000052 	qaddeq	r0, r2, r0
    be5c:	00002548 	andeq	r2, r0, r8, asr #10
    be60:	00b5a800 	adcseq	sl, r5, r0, lsl #16
    be64:	00042808 	andeq	r2, r4, r8, lsl #16
    be68:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    be6c:	0b000001 	bleq	be78 <_Min_Stack_Size+0xba78>
    be70:	48010078 	stmdami	r1, {r3, r4, r5, r6}
    be74:	00000025 	andeq	r0, r0, r5, lsr #32
    be78:	0000048d 	andeq	r0, r0, sp, lsl #9
    be7c:	0100740c 	tsteq	r0, ip, lsl #8
    be80:	0000254e 	andeq	r2, r0, lr, asr #10
    be84:	00051500 	andeq	r1, r5, r0, lsl #10
    be88:	00770c00 	rsbseq	r0, r7, r0, lsl #24
    be8c:	00254e01 	eoreq	r4, r5, r1, lsl #28
    be90:	056d0000 	strbeq	r0, [sp, #-0]!
    be94:	700c0000 	andvc	r0, ip, r0
    be98:	254e0100 	strbcs	r0, [lr, #-256]	; 0x100
    be9c:	7b000000 	blvc	bea4 <_Min_Stack_Size+0xbaa4>
    bea0:	0c000006 	stceq	0, cr0, [r0], {6}
    bea4:	4e010071 	mcrmi	0, 0, r0, cr1, cr1, {3}
    bea8:	00000025 	andeq	r0, r0, r5, lsr #32
    beac:	0000075b 	andeq	r0, r0, fp, asr r7
    beb0:	0100630c 	tsteq	r0, ip, lsl #6
    beb4:	0000254e 	andeq	r2, r0, lr, asr #10
    beb8:	0007ff00 	andeq	pc, r7, r0, lsl #30
    bebc:	00720c00 	rsbseq	r0, r2, r0, lsl #24
    bec0:	00254e01 	eoreq	r4, r5, r1, lsl #28
    bec4:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    bec8:	730c0000 	movwvc	r0, #49152	; 0xc000
    becc:	254e0100 	strbcs	r0, [lr, #-256]	; 0x100
    bed0:	45000000 	strmi	r0, [r0, #-0]
    bed4:	0c000008 	stceq	0, cr0, [r0], {8}
    bed8:	01007868 	tsteq	r0, r8, ror #16
    bedc:	0000564f 	andeq	r5, r0, pc, asr #12
    bee0:	0008a100 	andeq	sl, r8, r0, lsl #2
    bee4:	78690c00 	stmdavc	r9!, {sl, fp}^
    bee8:	564f0100 	strbpl	r0, [pc], -r0, lsl #2
    beec:	b4000000 	strlt	r0, [r0], #-0
    bef0:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    bef4:	0800b5c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp, pc}
    bef8:	00000002 	andeq	r0, r0, r2
    befc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    bf00:	0050100e 	subseq	r1, r0, lr
    bf04:	ea500100 	b	140c30c <_Min_Stack_Size+0x140bf0c>
    bf08:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    bf0c:	00000009 	andeq	r0, r0, r9
    bf10:	000d800f 	andeq	r8, sp, pc
    bf14:	0001c400 	andeq	ip, r1, r0, lsl #8
    bf18:	786c1000 	stmdavc	ip!, {ip}^
    bf1c:	68530100 	ldmdavs	r3, {r8}^
    bf20:	00000000 	andeq	r0, r0, r0
    bf24:	000d980f 	andeq	r9, sp, pc, lsl #16
    bf28:	0001dd00 	andeq	sp, r1, r0, lsl #26
    bf2c:	52d20e00 	sbcspl	r0, r2, #0, 28
    bf30:	6f010000 	svcvs	0x00010000
    bf34:	000000ea 	andeq	r0, r0, sl, ror #1
    bf38:	00000976 	andeq	r0, r0, r6, ror r9
    bf3c:	b6281100 	strtlt	r1, [r8], -r0, lsl #2
    bf40:	03210800 	teqeq	r1, #0, 16
    bf44:	0c110000 	ldceq	0, cr0, [r1], {-0}
    bf48:	360800b7 			; <UNDEFINED> instruction: 0x360800b7
    bf4c:	00000003 	andeq	r0, r0, r3
    bf50:	656e6f12 	strbvs	r6, [lr, #-3858]!	; 0xf12
    bf54:	04360100 	ldrteq	r0, [r6], #-256	; 0x100
    bf58:	08000002 	stmdaeq	r0, {r1}
    bf5c:	00000000 	andeq	r0, r0, r0
    bf60:	3ff00000 	svccc	0x00f00000	; IMB
    bf64:	00002513 	andeq	r2, r0, r3, lsl r5
    bf68:	50011400 	andpl	r1, r1, r0, lsl #8
    bf6c:	37010000 	strcc	r0, [r1, -r0]
    bf70:	00000204 	andeq	r0, r0, r4, lsl #4
    bf74:	00759c08 	rsbseq	r9, r5, r8, lsl #24
    bf78:	37e43c88 	strbcc	r3, [r4, r8, lsl #25]!
    bf7c:	52d7147e 	sbcspl	r1, r7, #2113929216	; 0x7e000000
    bf80:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    bf84:	00000204 	andeq	r0, r0, r4, lsl #4
    bf88:	442d1808 	strtmi	r1, [sp], #-2056	; 0x808
    bf8c:	f921fb54 			; <UNDEFINED> instruction: 0xf921fb54
    bf90:	52ee143f 	rscpl	r1, lr, #1056964608	; 0x3f000000
    bf94:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    bf98:	00000204 	andeq	r0, r0, r4, lsl #4
    bf9c:	145c0708 	ldrbne	r0, [ip], #-1800	; 0x708
    bfa0:	91a62633 			; <UNDEFINED> instruction: 0x91a62633
    bfa4:	5325143c 	teqpl	r5, #60, 8	; 0x3c000000
    bfa8:	3a010000 	bcc	4bfb0 <_Min_Stack_Size+0x4bbb0>
    bfac:	00000204 	andeq	r0, r0, r4, lsl #4
    bfb0:	442d1808 	strtmi	r1, [sp], #-2056	; 0x808
    bfb4:	e921fb54 	stmdb	r1!, {r2, r4, r6, r8, r9, fp, ip, sp, lr, pc}
    bfb8:	5370123f 	cmnpl	r0, #-268435453	; 0xf0000003
    bfbc:	3c010030 	stccc	0, cr0, [r1], {48}	; 0x30
    bfc0:	00000204 	andeq	r0, r0, r4, lsl #4
    bfc4:	55555508 	ldrbpl	r5, [r5, #-1288]	; 0x508
    bfc8:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
    bfcc:	5370123f 	cmnpl	r0, #-268435453	; 0xf0000003
    bfd0:	3d010031 	stccc	0, cr0, [r1, #-196]	; 0xffffff3c
    bfd4:	00000204 	andeq	r0, r0, r4, lsl #4
    bfd8:	eb6f7d08 	bl	1beb400 <_Min_Stack_Size+0x1beb000>
    bfdc:	d4d61203 	ldrble	r1, [r6], #515	; 0x203
    bfe0:	537012bf 	cmnpl	r0, #-268435445	; 0xf000000b
    bfe4:	3e010032 	mcrcc	0, 0, r0, cr1, cr2, {1}
    bfe8:	00000204 	andeq	r0, r0, r4, lsl #4
    bfec:	88445508 	stmdahi	r4, {r3, r8, sl, ip, lr}^
    bff0:	c9c1550e 	stmibgt	r1, {r1, r2, r3, r8, sl, ip, lr}^
    bff4:	5370123f 	cmnpl	r0, #-268435453	; 0xf0000003
    bff8:	3f010033 	svccc	0x00010033
    bffc:	00000204 	andeq	r0, r0, r4, lsl #4
    c000:	688f3b08 	stmvs	pc, {r3, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
    c004:	a48228b5 	strge	r2, [r2], #2229	; 0x8b5
    c008:	537012bf 	cmnpl	r0, #-268435445	; 0xf000000b
    c00c:	40010034 	andmi	r0, r1, r4, lsr r0
    c010:	00000204 	andeq	r0, r0, r4, lsl #4
    c014:	01b28808 			; <UNDEFINED> instruction: 0x01b28808
    c018:	49efe075 	stmibmi	pc!, {r0, r2, r4, r5, r6, sp, lr, pc}^	; <UNPREDICTABLE>
    c01c:	5370123f 	cmnpl	r0, #-268435453	; 0xf0000003
    c020:	41010035 	tstmi	r1, r5, lsr r0
    c024:	00000204 	andeq	r0, r0, r4, lsl #4
    c028:	fdf70908 	ldc2l	9, cr0, [r7, #32]!
    c02c:	023de10d 	eorseq	lr, sp, #1073741827	; 0x40000003
    c030:	5371123f 	cmnpl	r1, #-268435453	; 0xf0000003
    c034:	42010031 	andmi	r0, r1, #49	; 0x31
    c038:	00000204 	andeq	r0, r0, r4, lsl #4
    c03c:	8a2d4b08 	bhi	b5ec64 <_Min_Stack_Size+0xb5e864>
    c040:	033a271c 	teqeq	sl, #28, 14	; 0x700000
    c044:	537112c0 	cmnpl	r1, #192, 4
    c048:	43010032 	movwmi	r0, #4146	; 0x1032
    c04c:	00000204 	andeq	r0, r0, r4, lsl #4
    c050:	598ac808 	stmibpl	sl, {r3, fp, lr, pc}
    c054:	002ae59c 	mlaeq	sl, ip, r5, lr
    c058:	53711240 	cmnpl	r1, #64, 4
    c05c:	44010033 	strmi	r0, [r1], #-51	; 0x33
    c060:	00000204 	andeq	r0, r0, r4, lsl #4
    c064:	8d015908 	stchi	9, cr5, [r1, #-32]	; 0xffffffe0
    c068:	e6066c1b 			; <UNDEFINED> instruction: 0xe6066c1b
    c06c:	537112bf 	cmnpl	r1, #-268435445	; 0xf000000b
    c070:	45010034 	strmi	r0, [r1, #-52]	; 0x34
    c074:	00000204 	andeq	r0, r0, r4, lsl #4
    c078:	2e928208 	cdpcs	2, 9, cr8, cr2, cr8, {0}
    c07c:	b3b8c5b1 			; <UNDEFINED> instruction: 0xb3b8c5b1
    c080:	500b153f 	andpl	r1, fp, pc, lsr r5
    c084:	74040000 	strvc	r0, [r4], #-0
    c088:	00000025 	andeq	r0, r0, r5, lsr #32
    c08c:	00000336 	andeq	r0, r0, r6, lsr r3
    c090:	00002516 	andeq	r2, r0, r6, lsl r5
    c094:	df170000 	svcle	0x00170000
    c098:	03000052 	movweq	r0, #82	; 0x52
    c09c:	00002596 	muleq	r0, r6, r5
    c0a0:	00251600 	eoreq	r1, r5, r0, lsl #12
    c0a4:	00000000 	andeq	r0, r0, r0
    c0a8:	00000770 	andeq	r0, r0, r0, ror r7
    c0ac:	26020004 	strcs	r0, [r2], -r4
    c0b0:	01040000 	mrseq	r0, (UNDEF: 4)
    c0b4:	0000501b 	andeq	r5, r0, fp, lsl r0
    c0b8:	00537601 	subseq	r7, r3, r1, lsl #12
    c0bc:	00511600 	subseq	r1, r1, r0, lsl #12
    c0c0:	000ea800 	andeq	sl, lr, r0, lsl #16
    c0c4:	00000000 	andeq	r0, r0, r0
    c0c8:	0056f200 	subseq	pc, r6, r0, lsl #4
    c0cc:	04080200 	streq	r0, [r8], #-512	; 0x200
    c0d0:	00000170 	andeq	r0, r0, r0, ror r1
    c0d4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    c0d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    c0dc:	01330704 	teqeq	r3, r4, lsl #14
    c0e0:	01020000 	mrseq	r0, (UNDEF: 2)
    c0e4:	00014d06 	andeq	r4, r1, r6, lsl #26
    c0e8:	08010200 	stmdaeq	r1, {r9}
    c0ec:	0000014b 	andeq	r0, r0, fp, asr #2
    c0f0:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    c0f4:	02000001 	andeq	r0, r0, #1
    c0f8:	000e0702 	andeq	r0, lr, r2, lsl #14
    c0fc:	77040000 	strvc	r0, [r4, -r0]
    c100:	02000001 	andeq	r0, r0, #1
    c104:	0000613f 	andeq	r6, r0, pc, lsr r1
    c108:	05040200 	streq	r0, [r4, #-512]	; 0x200
    c10c:	00000005 	andeq	r0, r0, r5
    c110:	0005b404 	andeq	fp, r5, r4, lsl #8
    c114:	73410200 	movtvc	r0, #4608	; 0x1200
    c118:	02000000 	andeq	r0, r0, #0
    c11c:	012e0704 	teqeq	lr, r4, lsl #14
    c120:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c124:	00000005 	andeq	r0, r0, r5
    c128:	07080200 	streq	r0, [r8, -r0, lsl #4]
    c12c:	00000129 	andeq	r0, r0, r9, lsr #2
    c130:	91070402 	tstls	r7, r2, lsl #8
    c134:	02000001 	andeq	r0, r0, #1
    c138:	01540801 	cmpeq	r4, r1, lsl #16
    c13c:	04050000 	streq	r0, [r5], #-0
    c140:	0000009c 	muleq	r0, ip, r0
    c144:	00008f06 	andeq	r8, r0, r6, lsl #30
    c148:	04040200 	streq	r0, [r4], #-512	; 0x200
    c14c:	00000181 	andeq	r0, r0, r1, lsl #3
    c150:	6b040802 	blvs	10e160 <_Min_Stack_Size+0x10dd60>
    c154:	07000001 	streq	r0, [r0, -r1]
    c158:	010f0308 	tsteq	pc, r8, lsl #6
    c15c:	000000d3 	ldrdeq	r0, [r0], -r3
    c160:	77736c08 	ldrbvc	r6, [r3, -r8, lsl #24]!
    c164:	01110300 	tsteq	r1, r0, lsl #6
    c168:	00000068 	andeq	r0, r0, r8, rrx
    c16c:	736d0800 	cmnvc	sp, #0, 16
    c170:	12030077 	andne	r0, r3, #119	; 0x77
    c174:	00006801 	andeq	r6, r0, r1, lsl #16
    c178:	09000400 	stmdbeq	r0, {sl}
    c17c:	010c0308 	tsteq	ip, r8, lsl #6
    c180:	000000f5 	strdeq	r0, [r0], -r5
    c184:	0056ba0a 	subseq	fp, r6, sl, lsl #20
    c188:	010e0300 	mrseq	r0, ELR_hyp
    c18c:	00000025 	andeq	r0, r0, r5, lsr #32
    c190:	0050150a 	subseq	r1, r0, sl, lsl #10
    c194:	01130300 	tsteq	r3, r0, lsl #6
    c198:	000000af 	andeq	r0, r0, pc, lsr #1
    c19c:	4fea0b00 	svcmi	0x00ea0b00
    c1a0:	14030000 	strne	r0, [r3], #-0
    c1a4:	0000d301 	andeq	sp, r0, r1, lsl #6
    c1a8:	528f0c00 	addpl	r0, pc, #0, 24
    c1ac:	66010000 	strvs	r0, [r1], -r0
    c1b0:	00000025 	andeq	r0, r0, r5, lsr #32
    c1b4:	0800b9d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp, pc}
    c1b8:	00000b50 	andeq	r0, r0, r0, asr fp
    c1bc:	04b69c01 	ldrteq	r9, [r6], #3073	; 0xc01
    c1c0:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    c1c4:	25660100 	strbcs	r0, [r6, #-256]!	; 0x100
    c1c8:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    c1cc:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    c1d0:	66010079 			; <UNDEFINED> instruction: 0x66010079
    c1d4:	00000025 	andeq	r0, r0, r5, lsr #32
    c1d8:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    c1dc:	01007a0e 	tsteq	r0, lr, lsl #20
    c1e0:	0000256c 	andeq	r2, r0, ip, ror #10
    c1e4:	0009fe00 	andeq	pc, r9, r0, lsl #28
    c1e8:	78610e00 	stmdavc	r1!, {r9, sl, fp}^
    c1ec:	256c0100 	strbcs	r0, [ip, #-256]!	; 0x100
    c1f0:	d6000000 	strle	r0, [r0], -r0
    c1f4:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    c1f8:	00685f7a 	rsbeq	r5, r8, sl, ror pc
    c1fc:	00256c01 	eoreq	r6, r5, r1, lsl #24
    c200:	0b7e0000 	bleq	1f8c208 <_Min_Stack_Size+0x1f8be08>
    c204:	7a0e0000 	bvc	38c20c <_Min_Stack_Size+0x38be0c>
    c208:	01006c5f 	tsteq	r0, pc, asr ip
    c20c:	0000256c 	andeq	r2, r0, ip, ror #10
    c210:	000ba300 	andeq	sl, fp, r0, lsl #6
    c214:	5f700e00 	svcpl	0x00700e00
    c218:	6c010068 	stcvs	0, cr0, [r1], {104}	; 0x68
    c21c:	00000025 	andeq	r0, r0, r5, lsr #32
    c220:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
    c224:	6c5f700e 	mrrcvs	0, 0, r7, pc, cr14	; <UNPREDICTABLE>
    c228:	256c0100 	strbcs	r0, [ip, #-256]!	; 0x100
    c22c:	25000000 	strcs	r0, [r0, #-0]
    c230:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    c234:	01003179 	tsteq	r0, r9, ror r1
    c238:	0000256d 	andeq	r2, r0, sp, ror #10
    c23c:	000c8700 	andeq	r8, ip, r0, lsl #14
    c240:	31740e00 	cmncc	r4, r0, lsl #28
    c244:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c248:	e6000000 	str	r0, [r0], -r0
    c24c:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    c250:	01003274 	tsteq	r0, r4, ror r2
    c254:	0000256d 	andeq	r2, r0, sp, ror #10
    c258:	000dbd00 	andeq	fp, sp, r0, lsl #26
    c25c:	00720e00 	rsbseq	r0, r2, r0, lsl #28
    c260:	00256d01 	eoreq	r6, r5, r1, lsl #26
    c264:	0e190000 	cdpeq	0, 1, cr0, cr9, cr0, {0}
    c268:	730e0000 	movwvc	r0, #57344	; 0xe000
    c26c:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c270:	7c000000 	stcvc	0, cr0, [r0], {-0}
    c274:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
    c278:	6d010074 	stcvs	0, cr0, [r1, #-464]	; 0xfffffe30
    c27c:	00000025 	andeq	r0, r0, r5, lsr #32
    c280:	00000f0f 	andeq	r0, r0, pc, lsl #30
    c284:	0100750e 	tsteq	r0, lr, lsl #10
    c288:	0000256d 	andeq	r2, r0, sp, ror #10
    c28c:	000f7b00 	andeq	r7, pc, r0, lsl #22
    c290:	00760e00 	rsbseq	r0, r6, r0, lsl #28
    c294:	00256d01 	eoreq	r6, r5, r1, lsl #26
    c298:	0fc30000 	svceq	0x00c30000
    c29c:	770e0000 	strvc	r0, [lr, -r0]
    c2a0:	256d0100 	strbcs	r0, [sp, #-256]!	; 0x100
    c2a4:	27000000 	strcs	r0, [r0, -r0]
    c2a8:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
    c2ac:	6e010069 	cdpvs	0, 0, cr0, cr1, cr9, {3}
    c2b0:	00000056 	andeq	r0, r0, r6, asr r0
    c2b4:	0000108d 	andeq	r1, r0, sp, lsl #1
    c2b8:	01006a0e 	tsteq	r0, lr, lsl #20
    c2bc:	0000566e 	andeq	r5, r0, lr, ror #12
    c2c0:	0010b300 	andseq	fp, r0, r0, lsl #6
    c2c4:	006b0e00 	rsbeq	r0, fp, r0, lsl #28
    c2c8:	00566e01 	subseq	r6, r6, r1, lsl #28
    c2cc:	116a0000 	cmnne	sl, r0
    c2d0:	490f0000 	stmdbmi	pc, {}	; <UNPREDICTABLE>
    c2d4:	01000053 	qaddeq	r0, r3, r0
    c2d8:	0000566e 	andeq	r5, r0, lr, ror #12
    c2dc:	00128300 	andseq	r8, r2, r0, lsl #6
    c2e0:	006e0e00 	rsbeq	r0, lr, r0, lsl #28
    c2e4:	00566e01 	subseq	r6, r6, r1, lsl #28
    c2e8:	13370000 	teqne	r7, #0
    c2ec:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    c2f0:	6f010078 	svcvs	0x00010078
    c2f4:	00000056 	andeq	r0, r0, r6, asr r0
    c2f8:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    c2fc:	0079680e 	rsbseq	r6, r9, lr, lsl #16
    c300:	00566f01 	subseq	r6, r6, r1, lsl #30
    c304:	14550000 	ldrbne	r0, [r5], #-0
    c308:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
    c30c:	6f010078 	svcvs	0x00010078
    c310:	00000056 	andeq	r0, r0, r6, asr r0
    c314:	000014c0 	andeq	r1, r0, r0, asr #9
    c318:	0079690e 	rsbseq	r6, r9, lr, lsl #18
    c31c:	00566f01 	subseq	r6, r6, r1, lsl #30
    c320:	15ea0000 	strbne	r0, [sl, #0]!
    c324:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    c328:	70010078 	andvc	r0, r1, r8, ror r0
    c32c:	00000068 	andeq	r0, r0, r8, rrx
    c330:	00001668 	andeq	r1, r0, r8, ror #12
    c334:	00796c0e 	rsbseq	r6, r9, lr, lsl #24
    c338:	00687001 	rsbeq	r7, r8, r1
    c33c:	170a0000 	strne	r0, [sl, -r0]
    c340:	c0100000 	andsgt	r0, r0, r0
    c344:	b300000d 	movwlt	r0, #13
    c348:	0f000002 	svceq	0x00000002
    c34c:	00005356 	andeq	r5, r0, r6, asr r3
    c350:	00f57201 	rscseq	r7, r5, r1, lsl #4
    c354:	17750000 	ldrbne	r0, [r5, -r0]!
    c358:	11000000 	mrsne	r0, (UNDEF: 0)
    c35c:	0800b9e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, sp, pc}
    c360:	00000004 	andeq	r0, r0, r4
    c364:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    c368:	0053560f 	subseq	r5, r3, pc, lsl #12
    c36c:	f5730100 			; <UNDEFINED> instruction: 0xf5730100
    c370:	6d000000 	stcvs	0, cr0, [r0, #-0]
    c374:	00000018 	andeq	r0, r0, r8, lsl r0
    c378:	00bc0c11 	adcseq	r0, ip, r1, lsl ip
    c37c:	00036c08 	andeq	r6, r3, r8, lsl #24
    c380:	0003da00 	andeq	sp, r3, r0, lsl #20
    c384:	32730e00 	rsbscc	r0, r3, #0, 28
    c388:	25d20100 	ldrbcs	r0, [r2, #256]	; 0x100
    c38c:	25000000 	strcs	r0, [r0, #-0]
    c390:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    c394:	00685f73 	rsbeq	r5, r8, r3, ror pc
    c398:	0025d201 	eoreq	sp, r5, r1, lsl #4
    c39c:	19590000 	ldmdbne	r9, {}^	; <UNPREDICTABLE>
    c3a0:	730e0000 	movwvc	r0, #57344	; 0xe000
    c3a4:	01006c5f 	tsteq	r0, pc, asr ip
    c3a8:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    c3ac:	00198e00 	andseq	r8, r9, r0, lsl #28
    c3b0:	5f740e00 	svcpl	0x00740e00
    c3b4:	d2010068 	andle	r0, r1, #104	; 0x68
    c3b8:	00000025 	andeq	r0, r0, r5, lsr #32
    c3bc:	000019a6 	andeq	r1, r0, r6, lsr #19
    c3c0:	6c5f740e 	cfldrdvs	mvd7, [pc], {14}
    c3c4:	25d20100 	ldrbcs	r0, [r2, #256]	; 0x100
    c3c8:	12000000 	andne	r0, r0, #0
    c3cc:	1100001a 	tstne	r0, sl, lsl r0
    c3d0:	0800bc2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp, pc}
    c3d4:	00000002 	andeq	r0, r0, r2
    c3d8:	00000340 	andeq	r0, r0, r0, asr #6
    c3dc:	00501012 	subseq	r1, r0, r2, lsl r0
    c3e0:	f5d60100 			; <UNDEFINED> instruction: 0xf5d60100
    c3e4:	00000000 	andeq	r0, r0, r0
    c3e8:	00bc9411 	adcseq	r9, ip, r1, lsl r4
    c3ec:	00000808 	andeq	r0, r0, r8, lsl #16
    c3f0:	00035d00 	andeq	r5, r3, r0, lsl #26
    c3f4:	517a0f00 	cmnpl	sl, r0, lsl #30
    c3f8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    c3fc:	000000f5 	strdeq	r0, [r0], -r5
    c400:	00001a41 	andeq	r1, r0, r1, asr #20
    c404:	0dd81000 	ldcleq	0, cr1, [r8]
    c408:	03760000 	cmneq	r6, #0
    c40c:	7a0f0000 	bvc	3cc414 <_Min_Stack_Size+0x3cc014>
    c410:	01000051 	qaddeq	r0, r1, r0
    c414:	0000f5e8 	andeq	pc, r0, r8, ror #11
    c418:	001a5900 	andseq	r5, sl, r0, lsl #18
    c41c:	00100000 	andseq	r0, r0, r0
    c420:	8e00000e 	cdphi	0, 0, cr0, cr0, cr14, {0}
    c424:	13000003 	movwne	r0, #3
    c428:	000052d2 	ldrdeq	r5, [r0], -r2
    c42c:	00f5e501 	rscseq	lr, r5, r1, lsl #10
    c430:	7d020000 	stcvc	0, cr0, [r2, #-0]
    c434:	36110008 	ldrcc	r0, [r1], -r8
    c438:	060800be 			; <UNDEFINED> instruction: 0x060800be
    c43c:	ab000000 	blge	c444 <_Min_Stack_Size+0xc044>
    c440:	0f000003 	svceq	0x00000003
    c444:	000052d2 	ldrdeq	r5, [r0], -r2
    c448:	00f5f101 	rscseq	pc, r5, r1, lsl #2
    c44c:	1a710000 	bne	1c4c454 <_Min_Stack_Size+0x1c4c054>
    c450:	10000000 	andne	r0, r0, r0
    c454:	00000e18 	andeq	r0, r0, r8, lsl lr
    c458:	000003c4 	andeq	r0, r0, r4, asr #7
    c45c:	0052d20f 	subseq	sp, r2, pc, lsl #4
    c460:	f5f80100 			; <UNDEFINED> instruction: 0xf5f80100
    c464:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    c468:	0000001a 	andeq	r0, r0, sl, lsl r0
    c46c:	000e3014 	andeq	r3, lr, r4, lsl r0
    c470:	52d20f00 	sbcspl	r0, r2, #0, 30
    c474:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    c478:	000000f5 	strdeq	r0, [r0], -r5
    c47c:	00001aa1 	andeq	r1, r0, r1, lsr #21
    c480:	8c110000 	ldchi	0, cr0, [r1], {-0}
    c484:	100800bf 	strhne	r0, [r8], -pc	; <UNPREDICTABLE>
    c488:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    c48c:	15000003 	strne	r0, [r0, #-3]
    c490:	000052d2 	ldrdeq	r5, [r0], -r2
    c494:	f5010901 			; <UNDEFINED> instruction: 0xf5010901
    c498:	02000000 	andeq	r0, r0, #0
    c49c:	1100087d 	tstne	r0, sp, ror r8
    c4a0:	0800c002 	stmdaeq	r0, {r1, lr, pc}
    c4a4:	00000002 	andeq	r0, r0, r2
    c4a8:	00000415 	andeq	r0, r0, r5, lsl r4
    c4ac:	00535616 	subseq	r5, r3, r6, lsl r6
    c4b0:	010d0100 	mrseq	r0, (UNDEF: 29)
    c4b4:	000000f5 	strdeq	r0, [r0], -r5
    c4b8:	00001ab9 			; <UNDEFINED> instruction: 0x00001ab9
    c4bc:	0e481000 	cdpeq	0, 4, cr1, cr8, cr0, {0}
    c4c0:	042f0000 	strteq	r0, [pc], #-0	; c4c8 <_Min_Stack_Size+0xc0c8>
    c4c4:	7a160000 	bvc	58c4cc <_Min_Stack_Size+0x58c0cc>
    c4c8:	01000051 	qaddeq	r0, r1, r0
    c4cc:	00f50125 	rscseq	r0, r5, r5, lsr #2
    c4d0:	1b310000 	blne	c4c4d8 <_Min_Stack_Size+0xc4c0d8>
    c4d4:	10000000 	andne	r0, r0, r0
    c4d8:	00000e78 	andeq	r0, r0, r8, ror lr
    c4dc:	00000449 	andeq	r0, r0, r9, asr #8
    c4e0:	0052d216 	subseq	sp, r2, r6, lsl r2
    c4e4:	012b0100 	teqeq	fp, r0, lsl #2
    c4e8:	000000f5 	strdeq	r0, [r0], -r5
    c4ec:	00001b49 	andeq	r1, r0, r9, asr #22
    c4f0:	c20c1100 	andgt	r1, ip, #0, 2
    c4f4:	00040800 	andeq	r0, r4, r0, lsl #16
    c4f8:	04630000 	strbteq	r0, [r3], #-0
    c4fc:	7a170000 	bvc	5cc504 <_Min_Stack_Size+0x5cc104>
    c500:	01000051 	qaddeq	r0, r1, r0
    c504:	00f50137 	rscseq	r0, r5, r7, lsr r1
    c508:	10000000 	andne	r0, r0, r0
    c50c:	00000e90 	muleq	r0, r0, lr
    c510:	0000047c 	andeq	r0, r0, ip, ror r4
    c514:	0052d20f 	subseq	sp, r2, pc, lsl #4
    c518:	f5cf0100 			; <UNDEFINED> instruction: 0xf5cf0100
    c51c:	61000000 	mrsvs	r0, (UNDEF: 0)
    c520:	0000001b 	andeq	r0, r0, fp, lsl r0
    c524:	00ba9618 	adcseq	r9, sl, r8, lsl r6
    c528:	00071c08 	andeq	r1, r7, r8, lsl #24
    c52c:	bb2a1900 	bllt	a92934 <_Min_Stack_Size+0xa92534>
    c530:	07310800 	ldreq	r0, [r1, -r0, lsl #16]!
    c534:	049c0000 	ldreq	r0, [ip], #0
    c538:	011a0000 	tsteq	sl, r0
    c53c:	a4030550 	strge	r0, [r3], #-1360	; 0x550
    c540:	000800f3 	strdeq	r0, [r8], -r3
    c544:	00c2dc1b 	sbceq	sp, r2, fp, lsl ip
    c548:	00074708 	andeq	r4, r7, r8, lsl #14
    c54c:	c4ce1c00 	strbgt	r1, [lr], #3072	; 0xc00
    c550:	075c0800 	ldrbeq	r0, [ip, -r0, lsl #16]
    c554:	011a0000 	tsteq	sl, r0
    c558:	007a0252 	rsbseq	r0, sl, r2, asr r2
    c55c:	251d0000 	ldrcs	r0, [sp, #-0]
    c560:	c6000000 	strgt	r0, [r0], -r0
    c564:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c568:	00000088 	andeq	r0, r0, r8, lsl #1
    c56c:	621f0001 	andsvs	r0, pc, #1
    c570:	45010070 	strmi	r0, [r1, #-112]	; 0x70
    c574:	000004d6 	ldrdeq	r0, [r0], -r6
    c578:	f3d00305 	vsubw.u16	q8, q0, d5
    c57c:	b6060800 	strlt	r0, [r6], -r0, lsl #16
    c580:	13000004 	movwne	r0, #4
    c584:	0000536c 	andeq	r5, r0, ip, ror #6
    c588:	04ec4601 	strbteq	r4, [ip], #1537	; 0x601
    c58c:	03050000 	movweq	r0, #20480	; 0x5000
    c590:	0800f3b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp, lr, pc}
    c594:	0004b606 	andeq	fp, r4, r6, lsl #12
    c598:	53711300 	cmnpl	r1, #0, 6
    c59c:	47010000 	strmi	r0, [r1, -r0]
    c5a0:	00000502 	andeq	r0, r0, r2, lsl #10
    c5a4:	f3c00305 	vsubw.u8	q8, q0, d5
    c5a8:	b6060800 	strlt	r0, [r6], -r0, lsl #16
    c5ac:	20000004 	andcs	r0, r0, r4
    c5b0:	00005344 	andeq	r5, r0, r4, asr #6
    c5b4:	051b4801 	ldreq	r4, [fp, #-2049]	; 0x801
    c5b8:	00080000 	andeq	r0, r8, r0
    c5bc:	00000000 	andeq	r0, r0, r0
    c5c0:	06000000 	streq	r0, [r0], -r0
    c5c4:	00000025 	andeq	r0, r0, r5, lsr #32
    c5c8:	656e6f21 	strbvs	r6, [lr, #-3873]!	; 0xf21
    c5cc:	1b490100 	blne	124c9d4 <_Min_Stack_Size+0x124c5d4>
    c5d0:	08000005 	stmdaeq	r0, {r0, r2}
    c5d4:	00000000 	andeq	r0, r0, r0
    c5d8:	3ff00000 	svccc	0x00f00000	; IMB
    c5dc:	6f777421 	svcvs	0x00777421
    c5e0:	1b4a0100 	blne	128c9e8 <_Min_Stack_Size+0x128c5e8>
    c5e4:	08000005 	stmdaeq	r0, {r0, r2}
    c5e8:	00000000 	andeq	r0, r0, r0
    c5ec:	40000000 	andmi	r0, r0, r0
    c5f0:	00535020 	subseq	r5, r3, r0, lsr #32
    c5f4:	1b4b0100 	blne	12cc9fc <_Min_Stack_Size+0x12cc5fc>
    c5f8:	08000005 	stmdaeq	r0, {r0, r2}
    c5fc:	00000000 	andeq	r0, r0, r0
    c600:	43400000 	movtmi	r0, #0
    c604:	00500120 	subseq	r0, r0, r0, lsr #2
    c608:	1b4c0100 	blne	130ca10 <_Min_Stack_Size+0x130c610>
    c60c:	08000005 	stmdaeq	r0, {r0, r2}
    c610:	8800759c 	stmdahi	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    c614:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    c618:	00536720 	subseq	r6, r3, r0, lsr #14
    c61c:	1b4d0100 	blne	134ca24 <_Min_Stack_Size+0x134c624>
    c620:	08000005 	stmdaeq	r0, {r0, r2}
    c624:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
    c628:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f
    c62c:	00314c21 	eorseq	r4, r1, r1, lsr #24
    c630:	051b4f01 	ldreq	r4, [fp, #-3841]	; 0xf01
    c634:	03080000 	movweq	r0, #32768	; 0x8000
    c638:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
    c63c:	213fe333 	teqcs	pc, r3, lsr r3	; <UNPREDICTABLE>
    c640:	0100324c 	tsteq	r0, ip, asr #4
    c644:	00051b50 	andeq	r1, r5, r0, asr fp
    c648:	abff0800 	blge	fffce650 <_estack+0xdff9e650>
    c64c:	6db6db6f 	ldcvs	11, cr13, [r6, #444]!	; 0x1bc
    c650:	4c213fdb 	stcmi	15, cr3, [r1], #-876	; 0xfffffc94
    c654:	51010033 	tstpl	r1, r3, lsr r0
    c658:	0000051b 	andeq	r0, r0, fp, lsl r5
    c65c:	8f264d08 	svchi	0x00264d08
    c660:	d5555551 	ldrble	r5, [r5, #-1361]	; 0x551
    c664:	344c213f 	strbcc	r2, [ip], #-319	; 0x13f
    c668:	1b520100 	blne	148ca70 <_Min_Stack_Size+0x148c670>
    c66c:	08000005 	stmdaeq	r0, {r0, r2}
    c670:	a91d4101 	ldmdbge	sp, {r0, r8, lr}
    c674:	3fd17460 	svccc	0x00d17460
    c678:	00354c21 	eorseq	r4, r5, r1, lsr #24
    c67c:	051b5301 	ldreq	r5, [fp, #-769]	; 0x301
    c680:	65080000 	strvs	r0, [r8, #-0]
    c684:	4a93c9db 	bmi	fe4fedf8 <_estack+0xde4cedf8>
    c688:	213fcd86 	teqcs	pc, r6, lsl #27
    c68c:	0100364c 	tsteq	r0, ip, asr #12
    c690:	00051b54 	andeq	r1, r5, r4, asr fp
    c694:	4eef0800 	cdpmi	8, 14, cr0, cr15, cr0, {0}
    c698:	7e284a45 	vnmulvc.f32	s8, s16, s10
    c69c:	50213fca 	eorpl	r3, r1, sl, asr #31
    c6a0:	55010031 	strpl	r0, [r1, #-49]	; 0x31
    c6a4:	0000051b 	andeq	r0, r0, fp, lsl r5
    c6a8:	55553e08 	ldrbpl	r3, [r5, #-3592]	; 0xe08
    c6ac:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
    c6b0:	3250213f 	subscc	r2, r0, #-1073741809	; 0xc000000f
    c6b4:	1b560100 	blne	158cabc <_Min_Stack_Size+0x158c6bc>
    c6b8:	08000005 	stmdaeq	r0, {r0, r2}
    c6bc:	16bebd93 	ssatne	fp, #31, r3, lsl #27
    c6c0:	bf66c16c 	svclt	0x0066c16c
    c6c4:	00335021 	eorseq	r5, r3, r1, lsr #32
    c6c8:	051b5701 	ldreq	r5, [fp, #-1793]	; 0x701
    c6cc:	2c080000 	stccs	0, cr0, [r8], {-0}
    c6d0:	6aaf25de 	bvs	febd5e50 <_estack+0xdeba5e50>
    c6d4:	213f1156 	teqcs	pc, r6, asr r1	; <UNPREDICTABLE>
    c6d8:	01003450 	tsteq	r0, r0, asr r4
    c6dc:	00051b58 	andeq	r1, r5, r8, asr fp
    c6e0:	6bf10800 	blvs	ffc4e6e8 <_estack+0xdfc1e6e8>
    c6e4:	bd41c5d2 	cfstr64lt	mvdx12, [r1, #-840]	; 0xfffffcb8
    c6e8:	5021bebb 	strhtpl	fp, [r1], -fp
    c6ec:	59010035 	stmdbpl	r1, {r0, r2, r4, r5}
    c6f0:	0000051b 	andeq	r0, r0, fp, lsl r5
    c6f4:	bea4d008 	cdplt	0, 10, cr13, cr4, cr8, {0}
    c6f8:	66376972 			; <UNDEFINED> instruction: 0x66376972
    c6fc:	676c213e 			; <UNDEFINED> instruction: 0x676c213e
    c700:	5a010032 	bpl	4c7d0 <_Min_Stack_Size+0x4c3d0>
    c704:	0000051b 	andeq	r0, r0, fp, lsl r5
    c708:	fa39ef08 	blx	e88330 <_Min_Stack_Size+0xe87f30>
    c70c:	e62e42fe 			; <UNDEFINED> instruction: 0xe62e42fe
    c710:	535b203f 	cmppl	fp, #63	; 0x3f
    c714:	5b010000 	blpl	4c71c <_Min_Stack_Size+0x4c31c>
    c718:	0000051b 	andeq	r0, r0, fp, lsl r5
    c71c:	00000008 	andeq	r0, r0, r8
    c720:	e62e4300 	strt	r4, [lr], -r0, lsl #6
    c724:	5361203f 	cmnpl	r1, #63	; 0x3f
    c728:	5c010000 	stcpl	0, cr0, [r1], {-0}
    c72c:	0000051b 	andeq	r0, r0, fp, lsl r5
    c730:	a86c3908 	stmdage	ip!, {r3, r8, fp, ip, sp}^
    c734:	205c610c 	subscs	r6, ip, ip, lsl #2
    c738:	766f21be 			; <UNDEFINED> instruction: 0x766f21be
    c73c:	5d010074 	stcpl	0, cr0, [r1, #-464]	; 0xfffffe30
    c740:	0000051b 	andeq	r0, r0, fp, lsl r5
    c744:	2b82fe08 	blcs	fe0cbf6c <_estack+0xde09bf6c>
    c748:	97154765 	ldrls	r4, [r5, -r5, ror #14]
    c74c:	7063213c 	rsbvc	r2, r3, ip, lsr r1
    c750:	1b5e0100 	blne	178cb58 <_Min_Stack_Size+0x178c758>
    c754:	08000005 	stmdaeq	r0, {r0, r2}
    c758:	dc3a03fd 	ldcle	3, cr0, [sl], #-1012	; 0xfffffc0c
    c75c:	3feec709 	svccc	0x00eec709
    c760:	00532d20 	subseq	r2, r3, r0, lsr #26
    c764:	1b5f0100 	blne	17ccb6c <_Min_Stack_Size+0x17cc76c>
    c768:	08000005 	stmdaeq	r0, {r0, r2}
    c76c:	e0000000 	and	r0, r0, r0
    c770:	3feec709 	svccc	0x00eec709
    c774:	00533220 	subseq	r3, r3, r0, lsr #4
    c778:	1b600100 	blne	180cb80 <_Min_Stack_Size+0x180c780>
    c77c:	08000005 	stmdaeq	r0, {r0, r2}
    c780:	145b01f5 	ldrbne	r0, [fp], #-501	; 0x1f5
    c784:	be3e2fe0 	cdplt	15, 3, cr2, cr14, cr0, {7}
    c788:	00533e20 	subseq	r3, r3, r0, lsr #28
    c78c:	1b610100 	blne	184cb94 <_Min_Stack_Size+0x184c794>
    c790:	08000005 	stmdaeq	r0, {r0, r2}
    c794:	652b82fe 	strvs	r8, [fp, #-766]!	; 0x2fe
    c798:	3ff71547 	svccc	0x00f71547
    c79c:	0053a420 	subseq	sl, r3, r0, lsr #8
    c7a0:	1b620100 	blne	188cba8 <_Min_Stack_Size+0x188c7a8>
    c7a4:	08000005 	stmdaeq	r0, {r0, r2}
    c7a8:	60000000 	andvs	r0, r0, r0
    c7ac:	3ff71547 	svccc	0x00f71547
    c7b0:	0053ac20 	subseq	sl, r3, r0, lsr #24
    c7b4:	1b630100 	blne	18ccbbc <_Min_Stack_Size+0x18cc7bc>
    c7b8:	08000005 	stmdaeq	r0, {r0, r2}
    c7bc:	f85ddf44 			; <UNDEFINED> instruction: 0xf85ddf44
    c7c0:	3e54ae0b 	cdpcc	14, 5, cr10, cr4, cr11, {0}
    c7c4:	00500b22 	subseq	r0, r0, r2, lsr #22
    c7c8:	25740400 	ldrbcs	r0, [r4, #-1024]!	; 0x400
    c7cc:	31000000 	mrscc	r0, (UNDEF: 0)
    c7d0:	23000007 	movwcs	r0, #7
    c7d4:	00000025 	andeq	r0, r0, r5, lsr #32
    c7d8:	616e2400 	cmnvs	lr, r0, lsl #8
    c7dc:	0304006e 	movweq	r0, #16494	; 0x406e
    c7e0:	00002501 	andeq	r2, r0, r1, lsl #10
    c7e4:	00074700 	andeq	r4, r7, r0, lsl #14
    c7e8:	00962300 	addseq	r2, r6, r0, lsl #6
    c7ec:	22000000 	andcs	r0, r0, #0
    c7f0:	000052df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    c7f4:	00259603 	eoreq	r9, r5, r3, lsl #12
    c7f8:	075c0000 	ldrbeq	r0, [ip, -r0]
    c7fc:	25230000 	strcs	r0, [r3, #-0]!
    c800:	00000000 	andeq	r0, r0, r0
    c804:	00533725 	subseq	r3, r3, r5, lsr #14
    c808:	010d0400 	tsteq	sp, r0, lsl #8
    c80c:	00000025 	andeq	r0, r0, r5, lsr #32
    c810:	00002523 	andeq	r2, r0, r3, lsr #10
    c814:	002c2300 	eoreq	r2, ip, r0, lsl #6
    c818:	00000000 	andeq	r0, r0, r0
    c81c:	0000022d 	andeq	r0, r0, sp, lsr #4
    c820:	27fa0004 	ldrbcs	r0, [sl, r4]!
    c824:	01040000 	mrseq	r0, (UNDEF: 4)
    c828:	0000501b 	andeq	r5, r0, fp, lsl r0
    c82c:	0053b901 	subseq	fp, r3, r1, lsl #18
    c830:	00511600 	subseq	r1, r1, r0, lsl #12
    c834:	000eb800 	andeq	fp, lr, r0, lsl #16
    c838:	00000000 	andeq	r0, r0, r0
    c83c:	0059d500 	subseq	sp, r9, r0, lsl #10
    c840:	04080200 	streq	r0, [r8], #-512	; 0x200
    c844:	00000170 	andeq	r0, r0, r0, ror r1
    c848:	69050403 	stmdbvs	r5, {r0, r1, sl}
    c84c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    c850:	01330704 	teqeq	r3, r4, lsl #14
    c854:	01020000 	mrseq	r0, (UNDEF: 2)
    c858:	00014d06 	andeq	r4, r1, r6, lsl #26
    c85c:	08010200 	stmdaeq	r1, {r9}
    c860:	0000014b 	andeq	r0, r0, fp, asr #2
    c864:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    c868:	02000001 	andeq	r0, r0, #1
    c86c:	000e0702 	andeq	r0, lr, r2, lsl #14
    c870:	77040000 	strvc	r0, [r4, -r0]
    c874:	02000001 	andeq	r0, r0, #1
    c878:	0000613f 	andeq	r6, r0, pc, lsr r1
    c87c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    c880:	00000005 	andeq	r0, r0, r5
    c884:	0005b404 	andeq	fp, r5, r4, lsl #8
    c888:	73410200 	movtvc	r0, #4608	; 0x1200
    c88c:	02000000 	andeq	r0, r0, #0
    c890:	012e0704 	teqeq	lr, r4, lsl #14
    c894:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c898:	00000005 	andeq	r0, r0, r5
    c89c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    c8a0:	00000129 	andeq	r0, r0, r9, lsr #2
    c8a4:	91070402 	tstls	r7, r2, lsl #8
    c8a8:	02000001 	andeq	r0, r0, #1
    c8ac:	01540801 	cmpeq	r4, r1, lsl #16
    c8b0:	04020000 	streq	r0, [r2], #-0
    c8b4:	00018104 	andeq	r8, r1, r4, lsl #2
    c8b8:	04080200 	streq	r0, [r8], #-512	; 0x200
    c8bc:	0000016b 	andeq	r0, r0, fp, ror #2
    c8c0:	0f030805 	svceq	0x00030805
    c8c4:	0000c801 	andeq	ip, r0, r1, lsl #16
    c8c8:	736c0600 	cmnvc	ip, #0, 12
    c8cc:	11030077 	tstne	r3, r7, ror r0
    c8d0:	00006801 	andeq	r6, r0, r1, lsl #16
    c8d4:	6d060000 	stcvs	0, cr0, [r6, #-0]
    c8d8:	03007773 	movweq	r7, #1907	; 0x773
    c8dc:	00680112 	rsbeq	r0, r8, r2, lsl r1
    c8e0:	00040000 	andeq	r0, r4, r0
    c8e4:	0c030807 	stceq	8, cr0, [r3], {7}
    c8e8:	0000ea01 	andeq	lr, r0, r1, lsl #20
    c8ec:	56ba0800 	ldrtpl	r0, [sl], r0, lsl #16
    c8f0:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    c8f4:	00002501 	andeq	r2, r0, r1, lsl #10
    c8f8:	50150800 	andspl	r0, r5, r0, lsl #16
    c8fc:	13030000 	movwne	r0, #12288	; 0x3000
    c900:	0000a401 	andeq	sl, r0, r1, lsl #8
    c904:	ea090000 	b	24c90c <_Min_Stack_Size+0x24c50c>
    c908:	0300004f 	movweq	r0, #79	; 0x4f
    c90c:	00c80114 	sbceq	r0, r8, r4, lsl r1
    c910:	df0a0000 	svcle	0x000a0000
    c914:	01000052 	qaddeq	r0, r2, r0
    c918:	0000255f 	andeq	r2, r0, pc, asr r5
    c91c:	00c52000 	sbceq	r2, r5, r0
    c920:	00017e08 	andeq	r7, r1, r8, lsl #28
    c924:	039c0100 	orrseq	r0, ip, #0, 2
    c928:	0b000002 	bleq	c938 <_Min_Stack_Size+0xc538>
    c92c:	5f010078 	svcpl	0x00010078
    c930:	00000025 	andeq	r0, r0, r5, lsr #32
    c934:	00001b79 	andeq	r1, r0, r9, ror fp
    c938:	01007a0c 	tsteq	r0, ip, lsl #20
    c93c:	00002565 	andeq	r2, r0, r5, ror #10
    c940:	001c2100 	andseq	r2, ip, r0, lsl #2
    c944:	5a4c0d00 	bpl	130fd4c <_Min_Stack_Size+0x130f94c>
    c948:	66010000 	strvs	r0, [r1], -r0
    c94c:	00000056 	andeq	r0, r0, r6, asr r0
    c950:	80808080 	addhi	r8, r0, r0, lsl #1
    c954:	00720c78 	rsbseq	r0, r2, r8, ror ip
    c958:	00686701 	rsbeq	r6, r8, r1, lsl #14
    c95c:	1c3d0000 	ldcne	0, cr0, [sp], #-0
    c960:	740c0000 	strvc	r0, [ip], #-0
    c964:	67010031 	smladxvs	r1, r1, r0, r0
    c968:	00000068 	andeq	r0, r0, r8, rrx
    c96c:	00001c74 	andeq	r1, r0, r4, ror ip
    c970:	0031730c 	eorseq	r7, r1, ip, lsl #6
    c974:	00686701 	rsbeq	r6, r8, r1, lsl #14
    c978:	1c920000 	ldcne	0, cr0, [r2], {0}
    c97c:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    c980:	01003178 	tsteq	r0, r8, ror r1
    c984:	00006867 	andeq	r6, r0, r7, ror #16
    c988:	001cb100 	andseq	fp, ip, r0, lsl #2
    c98c:	31710c00 	cmncc	r1, r0, lsl #24
    c990:	68670100 	stmdavs	r7!, {r8}^
    c994:	fb000000 	blx	c99e <_Min_Stack_Size+0xc59e>
    c998:	0c00001c 	stceq	0, cr0, [r0], {28}
    c99c:	00307869 	eorseq	r7, r0, r9, ror #16
    c9a0:	00566801 	subseq	r6, r6, r1, lsl #16
    c9a4:	1d350000 	ldcne	0, cr0, [r5, #-0]
    c9a8:	730c0000 	movwvc	r0, #49152	; 0xc000
    c9ac:	68010030 	stmdavs	r1, {r4, r5}
    c9b0:	00000056 	andeq	r0, r0, r6, asr r0
    c9b4:	00001db3 			; <UNDEFINED> instruction: 0x00001db3
    c9b8:	0100710c 	tsteq	r0, ip, lsl #2
    c9bc:	00005668 	andeq	r5, r0, r8, ror #12
    c9c0:	001de200 	andseq	lr, sp, r0, lsl #4
    c9c4:	006d0c00 	rsbeq	r0, sp, r0, lsl #24
    c9c8:	00566801 	subseq	r6, r6, r1, lsl #16
    c9cc:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    c9d0:	740c0000 	strvc	r0, [ip], #-0
    c9d4:	56680100 	strbtpl	r0, [r8], -r0, lsl #2
    c9d8:	41000000 	mrsmi	r0, (UNDEF: 0)
    c9dc:	0c00001e 	stceq	0, cr0, [r0], {30}
    c9e0:	68010069 	stmdavs	r1, {r0, r3, r5, r6}
    c9e4:	00000056 	andeq	r0, r0, r6, asr r0
    c9e8:	00001e5f 	andeq	r1, r0, pc, asr lr
    c9ec:	00c53e0e 	sbceq	r3, r5, lr, lsl #28
    c9f0:	00000408 	andeq	r0, r0, r8, lsl #8
    c9f4:	0001ed00 	andeq	lr, r1, r0, lsl #26
    c9f8:	53560f00 	cmppl	r6, #0, 30
    c9fc:	6a010000 	bvs	4ca04 <_Min_Stack_Size+0x4c604>
    ca00:	000000ea 	andeq	r0, r0, sl, ror #1
    ca04:	00001e8a 	andeq	r1, r0, sl, lsl #29
    ca08:	c6261000 	strtgt	r1, [r6], -r0
    ca0c:	00060800 	andeq	r0, r6, r0, lsl #16
    ca10:	b4110000 	ldrlt	r0, [r1], #-0
    ca14:	01000053 	qaddeq	r0, r3, r0
    ca18:	0000eabf 			; <UNDEFINED> instruction: 0x0000eabf
    ca1c:	12000000 	andne	r0, r0, #0
    ca20:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    ca24:	02175901 	andseq	r5, r7, #16384	; 0x4000
    ca28:	00080000 	andeq	r0, r8, r0
    ca2c:	00000000 	andeq	r0, r0, r0
    ca30:	133ff000 	teqne	pc, #0
    ca34:	00000025 	andeq	r0, r0, r5, lsr #32
    ca38:	00536714 	subseq	r6, r3, r4, lsl r7
    ca3c:	17590100 	ldrbne	r0, [r9, -r0, lsl #2]
    ca40:	08000002 	stmdaeq	r0, {r1}
    ca44:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
    ca48:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f
    ca4c:	0000d300 	andeq	sp, r0, r0, lsl #6
    ca50:	12000400 	andne	r0, r0, #0, 8
    ca54:	04000029 	streq	r0, [r0], #-41	; 0x29
    ca58:	00501b01 	subseq	r1, r0, r1, lsl #22
    ca5c:	544e0100 	strbpl	r0, [lr], #-256	; 0x100
    ca60:	53e80000 	mvnpl	r0, #0
    ca64:	0ec80000 	cdpeq	0, 12, cr0, cr8, cr0, {0}
    ca68:	00000000 	andeq	r0, r0, r0
    ca6c:	5b530000 	blpl	14cca74 <_Min_Stack_Size+0x14cc674>
    ca70:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ca74:	00017004 	andeq	r7, r1, r4
    ca78:	05040300 	streq	r0, [r4, #-768]	; 0x300
    ca7c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ca80:	33070402 	movwcc	r0, #29698	; 0x7402
    ca84:	02000001 	andeq	r0, r0, #1
    ca88:	014d0601 	cmpeq	sp, r1, lsl #12
    ca8c:	01020000 	mrseq	r0, (UNDEF: 2)
    ca90:	00014b08 	andeq	r4, r1, r8, lsl #22
    ca94:	05020200 	streq	r0, [r2, #-512]	; 0x200
    ca98:	00000187 	andeq	r0, r0, r7, lsl #3
    ca9c:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    caa0:	04000000 	streq	r0, [r0], #-0
    caa4:	00000177 	andeq	r0, r0, r7, ror r1
    caa8:	00613f02 	rsbeq	r3, r1, r2, lsl #30
    caac:	04020000 	streq	r0, [r2], #-0
    cab0:	00000505 	andeq	r0, r0, r5, lsl #10
    cab4:	05b40400 	ldreq	r0, [r4, #1024]!	; 0x400
    cab8:	41020000 	mrsmi	r0, (UNDEF: 2)
    cabc:	00000073 	andeq	r0, r0, r3, ror r0
    cac0:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    cac4:	02000001 	andeq	r0, r0, #1
    cac8:	00000508 	andeq	r0, r0, r8, lsl #10
    cacc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cad0:	00012907 	andeq	r2, r1, r7, lsl #18
    cad4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    cad8:	00000191 	muleq	r0, r1, r1
    cadc:	54080102 	strpl	r0, [r8], #-258	; 0x102
    cae0:	02000001 	andeq	r0, r0, #1
    cae4:	01810404 	orreq	r0, r1, r4, lsl #8
    cae8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    caec:	00016b04 	andeq	r6, r1, r4, lsl #22
    caf0:	529d0500 	addspl	r0, sp, #0, 10
    caf4:	04030000 	streq	r0, [r3], #-0
    caf8:	00002c01 	andeq	r2, r0, r1, lsl #24
    cafc:	00c6a000 	sbceq	sl, r6, r0
    cb00:	00000c08 	andeq	r0, r0, r8, lsl #24
    cb04:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    cb08:	18010078 	stmdane	r1, {r3, r4, r5, r6}
    cb0c:	00000025 	andeq	r0, r0, r5, lsr #32
    cb10:	00001ee2 	andeq	r1, r0, r2, ror #29
    cb14:	00786807 	rsbseq	r6, r8, r7, lsl #16
    cb18:	00561e01 	subseq	r1, r6, r1, lsl #28
    cb1c:	1f0a0000 	svcne	0x000a0000
    cb20:	00000000 	andeq	r0, r0, r0
    cb24:	000000d7 	ldrdeq	r0, [r0], -r7
    cb28:	29810004 	stmibcs	r1, {r2}
    cb2c:	01040000 	mrseq	r0, (UNDEF: 4)
    cb30:	0000501b 	andeq	r5, r0, fp, lsl r0
    cb34:	00548101 	subseq	r8, r4, r1, lsl #2
    cb38:	0053e800 	subseq	lr, r3, r0, lsl #16
    cb3c:	000ed800 	andeq	sp, lr, r0, lsl #16
    cb40:	00000000 	andeq	r0, r0, r0
    cb44:	005c6300 	subseq	r6, ip, r0, lsl #6
    cb48:	04080200 	streq	r0, [r8], #-512	; 0x200
    cb4c:	00000170 	andeq	r0, r0, r0, ror r1
    cb50:	69050403 	stmdbvs	r5, {r0, r1, sl}
    cb54:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    cb58:	01330704 	teqeq	r3, r4, lsl #14
    cb5c:	01020000 	mrseq	r0, (UNDEF: 2)
    cb60:	00014d06 	andeq	r4, r1, r6, lsl #26
    cb64:	08010200 	stmdaeq	r1, {r9}
    cb68:	0000014b 	andeq	r0, r0, fp, asr #2
    cb6c:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    cb70:	02000001 	andeq	r0, r0, #1
    cb74:	000e0702 	andeq	r0, lr, r2, lsl #14
    cb78:	04020000 	streq	r0, [r2], #-0
    cb7c:	00000505 	andeq	r0, r0, r5, lsl #10
    cb80:	05b40400 	ldreq	r0, [r4, #1024]!	; 0x400
    cb84:	41020000 	mrsmi	r0, (UNDEF: 2)
    cb88:	00000068 	andeq	r0, r0, r8, rrx
    cb8c:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
    cb90:	02000001 	andeq	r0, r0, #1
    cb94:	00000508 	andeq	r0, r0, r8, lsl #10
    cb98:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cb9c:	00012907 	andeq	r2, r1, r7, lsl #18
    cba0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    cba4:	00000191 	muleq	r0, r1, r1
    cba8:	54080102 	strpl	r0, [r8], #-258	; 0x102
    cbac:	02000001 	andeq	r0, r0, #1
    cbb0:	01810404 	orreq	r0, r1, r4, lsl #8
    cbb4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cbb8:	00016b04 	andeq	r6, r1, r4, lsl #22
    cbbc:	51b30500 			; <UNDEFINED> instruction: 0x51b30500
    cbc0:	cb030000 	blgt	ccbc8 <_Min_Stack_Size+0xcc7c8>
    cbc4:	0000002c 	andeq	r0, r0, ip, lsr #32
    cbc8:	0800c6ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr, pc}
    cbcc:	00000050 	andeq	r0, r0, r0, asr r0
    cbd0:	78069c01 	stmdavc	r6, {r0, sl, fp, ip, pc}
    cbd4:	250a0100 	strcs	r0, [sl, #-256]	; 0x100
    cbd8:	1d000000 	stcne	0, cr0, [r0, #-0]
    cbdc:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cbe0:	0077736d 	rsbseq	r7, r7, sp, ror #6
    cbe4:	005d0c01 	subseq	r0, sp, r1, lsl #24
    cbe8:	1f650000 	svcne	0x00650000
    cbec:	6c070000 	stcvs	0, cr0, [r7], {-0}
    cbf0:	01007773 	tsteq	r0, r3, ror r7
    cbf4:	00005d0c 	andeq	r5, r0, ip, lsl #26
    cbf8:	001f8300 	andseq	r8, pc, r0, lsl #6
    cbfc:	ba000000 	blt	cc04 <_Min_Stack_Size+0xc804>
    cc00:	04000000 	streq	r0, [r0], #-0
    cc04:	0029f000 	eoreq	pc, r9, r0
    cc08:	1b010400 	blne	4dc10 <_Min_Stack_Size+0x4d810>
    cc0c:	01000050 	qaddeq	r0, r0, r0
    cc10:	000054b8 			; <UNDEFINED> instruction: 0x000054b8
    cc14:	000053e8 	andeq	r5, r0, r8, ror #7
    cc18:	00005d85 	andeq	r5, r0, r5, lsl #27
    cc1c:	69050402 	stmdbvs	r5, {r1, sl}
    cc20:	0300746e 	movweq	r7, #1134	; 0x46e
    cc24:	01330704 	teqeq	r3, r4, lsl #14
    cc28:	01030000 	mrseq	r0, (UNDEF: 3)
    cc2c:	00014d06 	andeq	r4, r1, r6, lsl #26
    cc30:	08010300 	stmdaeq	r1, {r8, r9}
    cc34:	0000014b 	andeq	r0, r0, fp, asr #2
    cc38:	87050203 	strhi	r0, [r5, -r3, lsl #4]
    cc3c:	03000001 	movweq	r0, #1
    cc40:	000e0702 	andeq	r0, lr, r2, lsl #14
    cc44:	04030000 	streq	r0, [r3], #-0
    cc48:	00000505 	andeq	r0, r0, r5, lsl #10
    cc4c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    cc50:	0000012e 	andeq	r0, r0, lr, lsr #2
    cc54:	00050803 	andeq	r0, r5, r3, lsl #16
    cc58:	03000000 	movweq	r0, #0
    cc5c:	01290708 	teqeq	r9, r8, lsl #14
    cc60:	04030000 	streq	r0, [r3], #-0
    cc64:	00019107 	andeq	r9, r1, r7, lsl #2
    cc68:	08010300 	stmdaeq	r1, {r8, r9}
    cc6c:	00000154 	andeq	r0, r0, r4, asr r1
    cc70:	70040803 	andvc	r0, r4, r3, lsl #16
    cc74:	03000001 	movweq	r0, #1
    cc78:	01810404 	orreq	r0, r1, r4, lsl #8
    cc7c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cc80:	00016b04 	andeq	r6, r1, r4, lsl #22
    cc84:	52540400 	subspl	r0, r4, #0, 8
    cc88:	01010000 	mrseq	r0, (UNDEF: 1)
    cc8c:	00ac0247 	adceq	r0, ip, r7, asr #4
    cc90:	10050000 	andne	r0, r5, r0
    cc94:	7f000052 	svcvc	0x00000052
    cc98:	00523c05 	subseq	r3, r2, r5, lsl #24
    cc9c:	c1050000 	mrsgt	r0, (UNDEF: 5)
    cca0:	01000051 	qaddeq	r0, r1, r0
    cca4:	00522d05 	subseq	r2, r2, r5, lsl #26
    cca8:	06000200 	streq	r0, [r0], -r0, lsl #4
    ccac:	0000526a 	andeq	r5, r0, sl, ror #4
    ccb0:	00861b02 	addeq	r1, r6, r2, lsl #22
    ccb4:	03050000 	movweq	r0, #20480	; 0x5000
    ccb8:	20000060 	andcs	r0, r0, r0, rrx
    ccbc:	00012500 	andeq	r2, r1, r0, lsl #10
    ccc0:	3f000400 	svccc	0x00000400
    ccc4:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    ccc8:	00501b01 	subseq	r1, r0, r1, lsl #22
    cccc:	54ec0100 	strbtpl	r0, [ip], #256	; 0x100
    ccd0:	53e80000 	mvnpl	r0, #0
    ccd4:	0ee80000 	cdpeq	0, 14, cr0, cr8, cr0, {0}
    ccd8:	00000000 	andeq	r0, r0, r0
    ccdc:	5e260000 	cdppl	0, 2, cr0, cr6, cr0, {0}
    cce0:	04020000 	streq	r0, [r2], #-0
    cce4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    cce8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ccec:	00000133 	andeq	r0, r0, r3, lsr r1
    ccf0:	4d060103 	stfmis	f0, [r6, #-12]
    ccf4:	03000001 	movweq	r0, #1
    ccf8:	014b0801 	cmpeq	fp, r1, lsl #16
    ccfc:	02030000 	andeq	r0, r3, #0
    cd00:	00018705 	andeq	r8, r1, r5, lsl #14
    cd04:	07020300 	streq	r0, [r2, -r0, lsl #6]
    cd08:	0000000e 	andeq	r0, r0, lr
    cd0c:	05050403 	streq	r0, [r5, #-1027]	; 0x403
    cd10:	03000000 	movweq	r0, #0
    cd14:	012e0704 	teqeq	lr, r4, lsl #14
    cd18:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cd1c:	00000005 	andeq	r0, r0, r5
    cd20:	07080300 	streq	r0, [r8, -r0, lsl #6]
    cd24:	00000129 	andeq	r0, r0, r9, lsr #2
    cd28:	91070403 	tstls	r7, r3, lsl #8
    cd2c:	04000001 	streq	r0, [r0], #-1
    cd30:	00007804 	andeq	r7, r0, r4, lsl #16
    cd34:	08010300 	stmdaeq	r1, {r8, r9}
    cd38:	00000154 	andeq	r0, r0, r4, asr r1
    cd3c:	70040803 	andvc	r0, r4, r3, lsl #16
    cd40:	03000001 	movweq	r0, #1
    cd44:	01810404 	orreq	r0, r1, r4, lsl #8
    cd48:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cd4c:	00016b04 	andeq	r6, r1, r4, lsl #22
    cd50:	524a0500 	subpl	r0, sl, #0, 10
    cd54:	02280000 	eoreq	r0, r8, #0
    cd58:	00f00207 	rscseq	r0, r0, r7, lsl #4
    cd5c:	fc060000 	stc2	0, cr0, [r6], {-0}
    cd60:	0200004f 	andeq	r0, r0, #79	; 0x4f
    cd64:	0025020a 	eoreq	r0, r5, sl, lsl #4
    cd68:	06000000 	streq	r0, [r0], -r0
    cd6c:	00005265 	andeq	r5, r0, r5, ror #4
    cd70:	72020b02 	andvc	r0, r2, #2048	; 0x800
    cd74:	04000000 	streq	r0, [r0], #-0
    cd78:	0051d006 	subseq	sp, r1, r6
    cd7c:	020c0200 	andeq	r0, ip, #0, 4
    cd80:	0000007f 	andeq	r0, r0, pc, ror r0
    cd84:	51d50608 	bicspl	r0, r5, r8, lsl #12
    cd88:	0d020000 	stceq	0, cr0, [r2, #-0]
    cd8c:	00007f02 	andeq	r7, r0, r2, lsl #30
    cd90:	da061000 	ble	190d98 <_Min_Stack_Size+0x190998>
    cd94:	02000051 	andeq	r0, r0, #81	; 0x51
    cd98:	007f020e 	rsbseq	r0, pc, lr, lsl #4
    cd9c:	07180000 	ldreq	r0, [r8, -r0]
    cda0:	00727265 	rsbseq	r7, r2, r5, ror #4
    cda4:	25020f02 	strcs	r0, [r2, #-3842]	; 0xf02
    cda8:	20000000 	andcs	r0, r0, r0
    cdac:	52820800 	addpl	r0, r2, #0, 16
    cdb0:	15020000 	strne	r0, [r2, #-0]
    cdb4:	00002502 	andeq	r2, r0, r2, lsl #10
    cdb8:	00c6fc00 	sbceq	pc, r6, r0, lsl #24
    cdbc:	00000408 	andeq	r0, r0, r8, lsl #8
    cdc0:	229c0100 	addscs	r0, ip, #0, 2
    cdc4:	09000001 	stmdbeq	r0, {r0}
    cdc8:	72010078 	andvc	r0, r1, #120	; 0x78
    cdcc:	00000122 	andeq	r0, r0, r2, lsr #2
    cdd0:	00001fa1 	andeq	r1, r0, r1, lsr #31
    cdd4:	01006e0a 	tsteq	r0, sl, lsl #28
    cdd8:	00002578 	andeq	r2, r0, r8, ror r5
    cddc:	04000000 	streq	r0, [r0], #-0
    cde0:	00009404 	andeq	r9, r0, r4, lsl #8
    cde4:	00ce0000 	sbceq	r0, lr, r0
    cde8:	00040000 	andeq	r0, r4, r0
    cdec:	00002ad9 	ldrdeq	r2, [r0], -r9
    cdf0:	501b0104 	andspl	r0, fp, r4, lsl #2
    cdf4:	20010000 	andcs	r0, r1, r0
    cdf8:	e8000055 	stmda	r0, {r0, r2, r4, r6}
    cdfc:	f8000053 			; <UNDEFINED> instruction: 0xf8000053
    ce00:	0000000e 	andeq	r0, r0, lr
    ce04:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    ce08:	0200005e 	andeq	r0, r0, #94	; 0x5e
    ce0c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ce10:	04030074 	streq	r0, [r3], #-116	; 0x74
    ce14:	00013307 	andeq	r3, r1, r7, lsl #6
    ce18:	06010300 	streq	r0, [r1], -r0, lsl #6
    ce1c:	0000014d 	andeq	r0, r0, sp, asr #2
    ce20:	4b080103 	blmi	20d234 <_Min_Stack_Size+0x20ce34>
    ce24:	03000001 	movweq	r0, #1
    ce28:	01870502 	orreq	r0, r7, r2, lsl #10
    ce2c:	02030000 	andeq	r0, r3, #0
    ce30:	00000e07 	andeq	r0, r0, r7, lsl #28
    ce34:	05040300 	streq	r0, [r4, #-768]	; 0x300
    ce38:	00000005 	andeq	r0, r0, r5
    ce3c:	2e070403 	cdpcs	4, 0, cr0, cr7, cr3, {0}
    ce40:	03000001 	movweq	r0, #1
    ce44:	00000508 	andeq	r0, r0, r8, lsl #10
    ce48:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ce4c:	00012907 	andeq	r2, r1, r7, lsl #18
    ce50:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ce54:	00000191 	muleq	r0, r1, r1
    ce58:	54080103 	strpl	r0, [r8], #-259	; 0x103
    ce5c:	04000001 	streq	r0, [r0], #-1
    ce60:	00007f04 	andeq	r7, r0, r4, lsl #30
    ce64:	00720500 	rsbseq	r0, r2, r0, lsl #10
    ce68:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ce6c:	00017004 	andeq	r7, r1, r4
    ce70:	04040300 	streq	r0, [r4], #-768	; 0x300
    ce74:	00000181 	andeq	r0, r0, r1, lsl #3
    ce78:	6b040803 	blvs	10ee8c <_Min_Stack_Size+0x10ea8c>
    ce7c:	06000001 	streq	r0, [r0], -r1
    ce80:	006e616e 	rsbeq	r6, lr, lr, ror #2
    ce84:	84010302 	strhi	r0, [r1], #-770	; 0x302
    ce88:	00000000 	andeq	r0, r0, r0
    ce8c:	0a0800c7 	beq	20d1b0 <_Min_Stack_Size+0x20cdb0>
    ce90:	01000000 	mrseq	r0, (UNDEF: 0)
    ce94:	596b079c 	stmdbpl	fp!, {r2, r3, r4, r7, r8, r9, sl}^
    ce98:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    ce9c:	00000079 	andeq	r0, r0, r9, ror r0
    cea0:	00001fc2 	andeq	r1, r0, r2, asr #31
    cea4:	01007808 	tsteq	r0, r8, lsl #16
    cea8:	0000842a 	andeq	r8, r0, sl, lsr #8
    ceac:	00000800 	andeq	r0, r0, r0, lsl #16
    ceb0:	00000000 	andeq	r0, r0, r0
    ceb4:	00007ff8 	strdeq	r7, [r0], -r8
    ceb8:	0000020a 	andeq	r0, r0, sl, lsl #4
    cebc:	2b4b0004 	blcs	12cced4 <_Min_Stack_Size+0x12ccad4>
    cec0:	01040000 	mrseq	r0, (UNDEF: 4)
    cec4:	0000501b 	andeq	r5, r0, fp, lsl r0
    cec8:	0055c101 	subseq	ip, r5, r1, lsl #2
    cecc:	00555000 	subseq	r5, r5, r0
    ced0:	000f2000 	andeq	r2, pc, r0
    ced4:	00000000 	andeq	r0, r0, r0
    ced8:	005f8700 	subseq	r8, pc, r0, lsl #14
    cedc:	04080200 	streq	r0, [r8], #-512	; 0x200
    cee0:	00000170 	andeq	r0, r0, r0, ror r1
    cee4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    cee8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    ceec:	01330704 	teqeq	r3, r4, lsl #14
    cef0:	01020000 	mrseq	r0, (UNDEF: 2)
    cef4:	00014d06 	andeq	r4, r1, r6, lsl #26
    cef8:	08010200 	stmdaeq	r1, {r9}
    cefc:	0000014b 	andeq	r0, r0, fp, asr #2
    cf00:	87050202 	strhi	r0, [r5, -r2, lsl #4]
    cf04:	02000001 	andeq	r0, r0, #1
    cf08:	000e0702 	andeq	r0, lr, r2, lsl #14
    cf0c:	77040000 	strvc	r0, [r4, -r0]
    cf10:	02000001 	andeq	r0, r0, #1
    cf14:	0000613f 	andeq	r6, r0, pc, lsr r1
    cf18:	05040200 	streq	r0, [r4, #-512]	; 0x200
    cf1c:	00000005 	andeq	r0, r0, r5
    cf20:	0005b404 	andeq	fp, r5, r4, lsl #8
    cf24:	73410200 	movtvc	r0, #4608	; 0x1200
    cf28:	02000000 	andeq	r0, r0, #0
    cf2c:	012e0704 	teqeq	lr, r4, lsl #14
    cf30:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cf34:	00000005 	andeq	r0, r0, r5
    cf38:	07080200 	streq	r0, [r8, -r0, lsl #4]
    cf3c:	00000129 	andeq	r0, r0, r9, lsr #2
    cf40:	91070402 	tstls	r7, r2, lsl #8
    cf44:	02000001 	andeq	r0, r0, #1
    cf48:	01540801 	cmpeq	r4, r1, lsl #16
    cf4c:	04020000 	streq	r0, [r2], #-0
    cf50:	00018104 	andeq	r8, r1, r4, lsl #2
    cf54:	04080200 	streq	r0, [r8], #-512	; 0x200
    cf58:	0000016b 	andeq	r0, r0, fp, ror #2
    cf5c:	0f030805 	svceq	0x00030805
    cf60:	0000c801 	andeq	ip, r0, r1, lsl #16
    cf64:	736c0600 	cmnvc	ip, #0, 12
    cf68:	11030077 	tstne	r3, r7, ror r0
    cf6c:	00006801 	andeq	r6, r0, r1, lsl #16
    cf70:	6d060000 	stcvs	0, cr0, [r6, #-0]
    cf74:	03007773 	movweq	r7, #1907	; 0x773
    cf78:	00680112 	rsbeq	r0, r8, r2, lsl r1
    cf7c:	00040000 	andeq	r0, r4, r0
    cf80:	0c030807 	stceq	8, cr0, [r3], {7}
    cf84:	0000ea01 	andeq	lr, r0, r1, lsl #20
    cf88:	56ba0800 	ldrtpl	r0, [sl], r0, lsl #16
    cf8c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    cf90:	00002501 	andeq	r2, r0, r1, lsl #10
    cf94:	50150800 	andspl	r0, r5, r0, lsl #16
    cf98:	13030000 	movwne	r0, #12288	; 0x3000
    cf9c:	0000a401 	andeq	sl, r0, r1, lsl #8
    cfa0:	ea090000 	b	24cfa8 <_Min_Stack_Size+0x24cba8>
    cfa4:	0300004f 	movweq	r0, #79	; 0x4f
    cfa8:	00c80114 	sbceq	r0, r8, r4, lsl r1
    cfac:	8a0a0000 	bhi	28cfb4 <_Min_Stack_Size+0x28cbb4>
    cfb0:	04000052 	streq	r0, [r0], #-82	; 0x52
    cfb4:	0025010c 	eoreq	r0, r5, ip, lsl #2
    cfb8:	c70c0000 	strgt	r0, [ip, -r0]
    cfbc:	01200800 	teqeq	r0, r0, lsl #16
    cfc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    cfc4:	000001e2 	andeq	r0, r0, r2, ror #3
    cfc8:	0100780b 	tsteq	r0, fp, lsl #16
    cfcc:	00002553 	andeq	r2, r0, r3, asr r5
    cfd0:	001fe300 	andseq	lr, pc, r0, lsl #6
    cfd4:	30690c00 	rsbcc	r0, r9, r0, lsl #24
    cfd8:	56590100 	ldrbpl	r0, [r9], -r0, lsl #2
    cfdc:	7b000000 	blvc	cfe4 <_Min_Stack_Size+0xcbe4>
    cfe0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    cfe4:	0100306a 	tsteq	r0, sl, rrx
    cfe8:	00005659 	andeq	r5, r0, r9, asr r6
    cfec:	0c560100 	ldfeqe	f0, [r6], {-0}
    cff0:	01007873 	tsteq	r0, r3, ror r8
    cff4:	00005659 	andeq	r5, r0, r9, asr r6
    cff8:	0020ba00 	eoreq	fp, r0, r0, lsl #20
    cffc:	00690c00 	rsbeq	r0, r9, r0, lsl #24
    d000:	00685a01 	rsbeq	r5, r8, r1, lsl #20
    d004:	20e70000 	rsccs	r0, r7, r0
    d008:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    d00c:	5a010031 	bpl	4d0d8 <_Min_Stack_Size+0x4ccd8>
    d010:	00000068 	andeq	r0, r0, r8, rrx
    d014:	00002129 	andeq	r2, r0, r9, lsr #2
    d018:	0100740c 	tsteq	r0, ip, lsl #8
    d01c:	0000255b 	andeq	r2, r0, fp, asr r5
    d020:	00217e00 	eoreq	r7, r1, r0, lsl #28
    d024:	00770d00 	rsbseq	r0, r7, r0, lsl #26
    d028:	01e25c01 	mvneq	r5, r1, lsl #24
    d02c:	91020000 	mrsls	r0, (UNDEF: 2)
    d030:	c7200e58 			; <UNDEFINED> instruction: 0xc7200e58
    d034:	00060800 	andeq	r0, r6, r0, lsl #16
    d038:	01960000 	orrseq	r0, r6, r0
    d03c:	560f0000 	strpl	r0, [pc], -r0
    d040:	01000053 	qaddeq	r0, r3, r0
    d044:	0000ea5d 	andeq	lr, r0, sp, asr sl
    d048:	00219600 	eoreq	r9, r1, r0, lsl #12
    d04c:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    d050:	af00000f 	svcge	0x0000000f
    d054:	0f000001 	svceq	0x00000001
    d058:	000053b4 			; <UNDEFINED> instruction: 0x000053b4
    d05c:	00ea7f01 	rsceq	r7, sl, r1, lsl #30
    d060:	225e0000 	subscs	r0, lr, #0
    d064:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    d068:	0800c7fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr, pc}
    d06c:	00000004 	andeq	r0, r0, r4
    d070:	000001cc 	andeq	r0, r0, ip, asr #3
    d074:	00517a0f 	subseq	r7, r1, pc, lsl #20
    d078:	ea660100 	b	198d480 <_Min_Stack_Size+0x198d080>
    d07c:	76000000 	strvc	r0, [r0], -r0
    d080:	00000022 	andeq	r0, r0, r2, lsr #32
    d084:	00c81c11 	sbceq	r1, r8, r1, lsl ip
    d088:	00000808 	andeq	r0, r0, r8, lsl #16
    d08c:	517a1200 	cmnpl	sl, r0, lsl #4
    d090:	6a010000 	bvs	4d098 <_Min_Stack_Size+0x4cc98>
    d094:	000000ea 	andeq	r0, r0, sl, ror #1
    d098:	25130000 	ldrcs	r0, [r3, #-0]
    d09c:	14000000 	strne	r0, [r0], #-0
    d0a0:	00000025 	andeq	r0, r0, r5, lsr #32
    d0a4:	000001f7 	strdeq	r0, [r0], -r7
    d0a8:	00008815 	andeq	r8, r0, r5, lsl r8
    d0ac:	16000100 	strne	r0, [r0], -r0, lsl #2
    d0b0:	000055bb 			; <UNDEFINED> instruction: 0x000055bb
    d0b4:	02084d01 	andeq	r4, r8, #1, 26	; 0x40
    d0b8:	03050000 	movweq	r0, #20480	; 0x5000
    d0bc:	0800f3e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr, pc}
    d0c0:	0001e717 	andeq	lr, r1, r7, lsl r7
    d0c4:	028b0000 	addeq	r0, fp, #0
    d0c8:	00040000 	andeq	r0, r4, r0
    d0cc:	00002c76 	andeq	r2, r0, r6, ror ip
    d0d0:	501b0104 	andspl	r0, fp, r4, lsl #2
    d0d4:	00010000 	andeq	r0, r1, r0
    d0d8:	e8000056 	stmda	r0, {r1, r2, r4, r6}
    d0dc:	50000053 	andpl	r0, r0, r3, asr r0
    d0e0:	0000000f 	andeq	r0, r0, pc
    d0e4:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    d0e8:	02000060 	andeq	r0, r0, #96	; 0x60
    d0ec:	01700408 	cmneq	r0, r8, lsl #8
    d0f0:	04030000 	streq	r0, [r3], #-0
    d0f4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    d0f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d0fc:	00000133 	andeq	r0, r0, r3, lsr r1
    d100:	4d060102 	stfmis	f0, [r6, #-8]
    d104:	02000001 	andeq	r0, r0, #1
    d108:	014b0801 	cmpeq	fp, r1, lsl #16
    d10c:	02020000 	andeq	r0, r2, #0
    d110:	00018705 	andeq	r8, r1, r5, lsl #14
    d114:	07020200 	streq	r0, [r2, -r0, lsl #4]
    d118:	0000000e 	andeq	r0, r0, lr
    d11c:	00017704 	andeq	r7, r1, r4, lsl #14
    d120:	613f0200 	teqvs	pc, r0, lsl #4
    d124:	02000000 	andeq	r0, r0, #0
    d128:	00050504 	andeq	r0, r5, r4, lsl #10
    d12c:	b4040000 	strlt	r0, [r4], #-0
    d130:	02000005 	andeq	r0, r0, #5
    d134:	00007341 	andeq	r7, r0, r1, asr #6
    d138:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d13c:	0000012e 	andeq	r0, r0, lr, lsr #2
    d140:	00050802 	andeq	r0, r5, r2, lsl #16
    d144:	02000000 	andeq	r0, r0, #0
    d148:	01290708 	teqeq	r9, r8, lsl #14
    d14c:	04020000 	streq	r0, [r2], #-0
    d150:	00019107 	andeq	r9, r1, r7, lsl #2
    d154:	08010200 	stmdaeq	r1, {r9}
    d158:	00000154 	andeq	r0, r0, r4, asr r1
    d15c:	81040402 	tsthi	r4, r2, lsl #8
    d160:	02000001 	andeq	r0, r0, #1
    d164:	016b0408 	cmneq	fp, r8, lsl #8
    d168:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    d16c:	c8010f03 	stmdagt	r1, {r0, r1, r8, r9, sl, fp}
    d170:	06000000 	streq	r0, [r0], -r0
    d174:	0077736c 	rsbseq	r7, r7, ip, ror #6
    d178:	68011103 	stmdavs	r1, {r0, r1, r8, ip}
    d17c:	00000000 	andeq	r0, r0, r0
    d180:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    d184:	01120300 	tsteq	r2, r0, lsl #6
    d188:	00000068 	andeq	r0, r0, r8, rrx
    d18c:	08070004 	stmdaeq	r7, {r2}
    d190:	ea010c03 	b	501a4 <_Min_Stack_Size+0x4fda4>
    d194:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d198:	000056ba 			; <UNDEFINED> instruction: 0x000056ba
    d19c:	25010e03 	strcs	r0, [r1, #-3587]	; 0xe03
    d1a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d1a4:	00005015 	andeq	r5, r0, r5, lsl r0
    d1a8:	a4011303 	strge	r1, [r1], #-771	; 0x303
    d1ac:	00000000 	andeq	r0, r0, r0
    d1b0:	004fea09 	subeq	lr, pc, r9, lsl #20
    d1b4:	01140300 	tsteq	r4, r0, lsl #6
    d1b8:	000000c8 	andeq	r0, r0, r8, asr #1
    d1bc:	0053370a 	subseq	r3, r3, sl, lsl #14
    d1c0:	010d0400 	tsteq	sp, r0, lsl #8
    d1c4:	00000025 	andeq	r0, r0, r5, lsr #32
    d1c8:	0800c830 	stmdaeq	r0, {r4, r5, fp, lr, pc}
    d1cc:	00000118 	andeq	r0, r0, r8, lsl r1
    d1d0:	02229c01 	eoreq	r9, r2, #256	; 0x100
    d1d4:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    d1d8:	254f0100 	strbcs	r0, [pc, #-256]	; d0e0 <_Min_Stack_Size+0xcce0>
    d1dc:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    d1e0:	0b000022 	bleq	d270 <_Min_Stack_Size+0xce70>
    d1e4:	4f01006e 	svcmi	0x0001006e
    d1e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    d1ec:	000022e6 	andeq	r2, r0, r6, ror #5
    d1f0:	01006b0c 	tsteq	r0, ip, lsl #22
    d1f4:	00005655 	andeq	r5, r0, r5, asr r6
    d1f8:	00231200 	eoreq	r1, r3, r0, lsl #4
    d1fc:	78680c00 	stmdavc	r8!, {sl, fp}^
    d200:	56550100 	ldrbpl	r0, [r5], -r0, lsl #2
    d204:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    d208:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    d20c:	0100786c 	tsteq	r0, ip, ror #16
    d210:	00005655 	andeq	r5, r0, r5, asr r6
    d214:	00248b00 	eoreq	r8, r4, r0, lsl #22
    d218:	c83e0d00 	ldmdagt	lr!, {r8, sl, fp}
    d21c:	00020800 	andeq	r0, r2, r0, lsl #16
    d220:	01700000 	cmneq	r0, r0
    d224:	560e0000 	strpl	r0, [lr], -r0
    d228:	01000053 	qaddeq	r0, r3, r0
    d22c:	0000ea56 	andeq	lr, r0, r6, asr sl
    d230:	0024bf00 	eoreq	fp, r4, r0, lsl #30
    d234:	6c0d0000 	stcvs	0, cr0, [sp], {-0}
    d238:	020800c8 	andeq	r0, r8, #200	; 0xc8
    d23c:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    d240:	0f000001 	svceq	0x00000001
    d244:	00005010 	andeq	r5, r0, r0, lsl r0
    d248:	00ea5b01 	rsceq	r5, sl, r1, lsl #22
    d24c:	0d000000 	stceq	0, cr0, [r0, #-0]
    d250:	0800c8aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, lr, pc}
    d254:	00000010 	andeq	r0, r0, r0, lsl r0
    d258:	000001a6 	andeq	r0, r0, r6, lsr #3
    d25c:	00517a0e 	subseq	r7, r1, lr, lsl #20
    d260:	ea630100 	b	18cd668 <_Min_Stack_Size+0x18cd268>
    d264:	e7000000 	str	r0, [r0, -r0]
    d268:	00000024 	andeq	r0, r0, r4, lsr #32
    d26c:	000f3010 	andeq	r3, pc, r0, lsl r0	; <UNPREDICTABLE>
    d270:	0001bf00 	andeq	fp, r1, r0, lsl #30
    d274:	517a0e00 	cmnpl	sl, r0, lsl #28
    d278:	6a010000 	bvs	4d280 <_Min_Stack_Size+0x4ce80>
    d27c:	000000ea 	andeq	r0, r0, sl, ror #1
    d280:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    d284:	c8861100 	stmgt	r6, {r8, ip}
    d288:	02770800 	rsbseq	r0, r7, #0, 16
    d28c:	01e10000 	mvneq	r0, r0
    d290:	06120000 	ldreq	r0, [r2], -r0
    d294:	51049350 	tstpl	r4, r0, asr r3
    d298:	f40b0493 	vst3.32	{d0-d2}, [fp :64], r3
    d29c:	759c0825 	ldrvc	r0, [ip, #2085]	; 0x825
    d2a0:	e43c8800 	ldrt	r8, [ip], #-2048	; 0x800
    d2a4:	11007e37 	tstne	r0, r7, lsr lr
    d2a8:	0800c8de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, lr, pc}
    d2ac:	00000277 	andeq	r0, r0, r7, ror r2
    d2b0:	00000203 	andeq	r0, r0, r3, lsl #4
    d2b4:	93500612 	cmpls	r0, #18874368	; 0x1200000
    d2b8:	04935104 	ldreq	r5, [r3], #260	; 0x104
    d2bc:	0825f40b 	stmdaeq	r5!, {r0, r1, r3, sl, ip, sp, lr, pc}
    d2c0:	c2f8f359 	rscsgt	pc, r8, #1677721601	; 0x64000001
    d2c4:	01a56e1f 			; <UNDEFINED> instruction: 0x01a56e1f
    d2c8:	c9241300 	stmdbgt	r4!, {r8, r9, ip}
    d2cc:	02770800 	rsbseq	r0, r7, #0, 16
    d2d0:	06120000 	ldreq	r0, [r2], -r0
    d2d4:	51049350 	tstpl	r4, r0, asr r3
    d2d8:	f40b0493 	vst3.32	{d0-d2}, [fp :64], r3
    d2dc:	759c0825 	ldrvc	r0, [ip, #2085]	; 0x825
    d2e0:	e43c8800 	ldrt	r8, [ip], #-2048	; 0x800
    d2e4:	00007e37 	andeq	r7, r0, r7, lsr lr
    d2e8:	0055fa14 	subseq	pc, r5, r4, lsl sl	; <UNPREDICTABLE>
    d2ec:	36490100 	strbcc	r0, [r9], -r0, lsl #2
    d2f0:	08000002 	stmdaeq	r0, {r1}
    d2f4:	00000000 	andeq	r0, r0, r0
    d2f8:	43500000 	cmpmi	r0, #0
    d2fc:	00002515 	andeq	r2, r0, r5, lsl r5
    d300:	563c1400 	ldrtpl	r1, [ip], -r0, lsl #8
    d304:	4a010000 	bmi	4d30c <_Min_Stack_Size+0x4cf0c>
    d308:	00000236 	andeq	r0, r0, r6, lsr r2
    d30c:	00000008 	andeq	r0, r0, r8
    d310:	90000000 	andls	r0, r0, r0
    d314:	5001143c 	andpl	r1, r1, ip, lsr r4
    d318:	4b010000 	blmi	4d320 <_Min_Stack_Size+0x4cf20>
    d31c:	00000236 	andeq	r0, r0, r6, lsr r2
    d320:	00759c08 	rsbseq	r9, r5, r8, lsl #24
    d324:	37e43c88 	strbcc	r3, [r4, r8, lsl #25]!
    d328:	5367147e 	cmnpl	r7, #2113929216	; 0x7e000000
    d32c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    d330:	00000236 	andeq	r0, r0, r6, lsr r2
    d334:	f8f35908 			; <UNDEFINED> instruction: 0xf8f35908
    d338:	a56e1fc2 	strbge	r1, [lr, #-4034]!	; 0xfc2
    d33c:	56331601 	ldrtpl	r1, [r3], -r1, lsl #12
    d340:	05040000 	streq	r0, [r4, #-0]
    d344:	00002501 	andeq	r2, r0, r1, lsl #10
    d348:	00251700 	eoreq	r1, r5, r0, lsl #14
    d34c:	25170000 	ldrcs	r0, [r7, #-0]
    d350:	00000000 	andeq	r0, r0, r0
    d354:	00014d00 	andeq	r4, r1, r0, lsl #26
    d358:	ae000400 	cfcpysge	mvf0, mvf0
    d35c:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    d360:	00501b01 	subseq	r1, r0, r1, lsl #22
    d364:	56430100 	strbpl	r0, [r3], -r0, lsl #2
    d368:	53e80000 	mvnpl	r0, #0
    d36c:	0f600000 	svceq	0x00600000
    d370:	00000000 	andeq	r0, r0, r0
    d374:	62460000 	subvs	r0, r6, #0
    d378:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d37c:	00017004 	andeq	r7, r1, r4
    d380:	05040300 	streq	r0, [r4, #-768]	; 0x300
    d384:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d388:	33070402 	movwcc	r0, #29698	; 0x7402
    d38c:	02000001 	andeq	r0, r0, #1
    d390:	014d0601 	cmpeq	sp, r1, lsl #12
    d394:	01020000 	mrseq	r0, (UNDEF: 2)
    d398:	00014b08 	andeq	r4, r1, r8, lsl #22
    d39c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    d3a0:	00000187 	andeq	r0, r0, r7, lsl #3
    d3a4:	0e070202 	cdpeq	2, 0, cr0, cr7, cr2, {0}
    d3a8:	02000000 	andeq	r0, r0, #0
    d3ac:	00050504 	andeq	r0, r5, r4, lsl #10
    d3b0:	b4040000 	strlt	r0, [r4], #-0
    d3b4:	03000005 	movweq	r0, #5
    d3b8:	00006841 	andeq	r6, r0, r1, asr #16
    d3bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d3c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    d3c4:	00050802 	andeq	r0, r5, r2, lsl #16
    d3c8:	02000000 	andeq	r0, r0, #0
    d3cc:	01290708 	teqeq	r9, r8, lsl #14
    d3d0:	04020000 	streq	r0, [r2], #-0
    d3d4:	00019107 	andeq	r9, r1, r7, lsl #2
    d3d8:	08010200 	stmdaeq	r1, {r9}
    d3dc:	00000154 	andeq	r0, r0, r4, asr r1
    d3e0:	81040402 	tsthi	r4, r2, lsl #8
    d3e4:	02000001 	andeq	r0, r0, #1
    d3e8:	016b0408 	cmneq	fp, r8, lsl #8
    d3ec:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    d3f0:	bd010f02 	stclt	15, cr0, [r1, #-8]
    d3f4:	06000000 	streq	r0, [r0], -r0
    d3f8:	0077736c 	rsbseq	r7, r7, ip, ror #6
    d3fc:	5d011102 	stfpls	f1, [r1, #-8]
    d400:	00000000 	andeq	r0, r0, r0
    d404:	77736d06 	ldrbvc	r6, [r3, -r6, lsl #26]!
    d408:	01120200 	tsteq	r2, r0, lsl #4
    d40c:	0000005d 	andeq	r0, r0, sp, asr r0
    d410:	08070004 	stmdaeq	r7, {r2}
    d414:	df010c02 	svcle	0x00010c02
    d418:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d41c:	000056ba 			; <UNDEFINED> instruction: 0x000056ba
    d420:	25010e02 	strcs	r0, [r1, #-3586]	; 0xe02
    d424:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d428:	00005015 	andeq	r5, r0, r5, lsl r0
    d42c:	99011302 	stmdbls	r1, {r1, r8, r9, ip}
    d430:	00000000 	andeq	r0, r0, r0
    d434:	004fea09 	subeq	lr, pc, r9, lsl #20
    d438:	01140200 	tsteq	r4, r0, lsl #4
    d43c:	000000bd 	strheq	r0, [r0], -sp
    d440:	0056330a 	subseq	r3, r6, sl, lsl #6
    d444:	01050400 	tsteq	r5, r0, lsl #8
    d448:	00000025 	andeq	r0, r0, r5, lsr #32
    d44c:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
    d450:	00000012 	andeq	r0, r0, r2, lsl r0
    d454:	780b9c01 	stmdavc	fp, {r0, sl, fp, ip, pc}
    d458:	25450100 	strbcs	r0, [r5, #-256]	; 0x100
    d45c:	06000000 	streq	r0, [r0], -r0
    d460:	51049350 	tstpl	r4, r0, asr r3
    d464:	790c0493 	stmdbvc	ip, {r0, r1, r4, r7, sl}
    d468:	25450100 	strbcs	r0, [r5, #-256]	; 0x100
    d46c:	17000000 	strne	r0, [r0, -r0]
    d470:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    d474:	01007868 	tsteq	r0, r8, ror #16
    d478:	00005d4b 	andeq	r5, r0, fp, asr #26
    d47c:	79680e00 	stmdbvc	r8!, {r9, sl, fp}^
    d480:	5d4b0100 	stfple	f0, [fp, #-0]
    d484:	3f000000 	svccc	0x00000000
    d488:	0f000025 	svceq	0x00000025
    d48c:	0800c94a 	stmdaeq	r0, {r1, r3, r6, r8, fp, lr, pc}
    d490:	0000000c 	andeq	r0, r0, ip
    d494:	00517a10 	subseq	r7, r1, r0, lsl sl
    d498:	df4e0100 	svcle	0x004e0100
    d49c:	52000000 	andpl	r0, r0, #0
    d4a0:	00000025 	andeq	r0, r0, r5, lsr #32
    d4a4:	08850000 	stmeq	r5, {}	; <UNPREDICTABLE>
    d4a8:	00040000 	andeq	r0, r4, r0
    d4ac:	00002e94 	muleq	r0, r4, lr
    d4b0:	501b0104 	andspl	r0, fp, r4, lsl #2
    d4b4:	cb010000 	blgt	4d4bc <_Min_Stack_Size+0x4d0bc>
    d4b8:	c7000058 	smlsdgt	r0, r8, r0, r0
    d4bc:	70000056 	andvc	r0, r0, r6, asr r0
    d4c0:	0000000f 	andeq	r0, r0, pc
    d4c4:	65000000 	strvs	r0, [r0, #-0]
    d4c8:	02000063 	andeq	r0, r0, #99	; 0x63
    d4cc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d4d0:	04030074 	streq	r0, [r3], #-116	; 0x74
    d4d4:	00013307 	andeq	r3, r1, r7, lsl #6
    d4d8:	06010300 	streq	r0, [r1], -r0, lsl #6
    d4dc:	0000014d 	andeq	r0, r0, sp, asr #2
    d4e0:	4b080103 	blmi	20d8f4 <_Min_Stack_Size+0x20d4f4>
    d4e4:	03000001 	movweq	r0, #1
    d4e8:	01870502 	orreq	r0, r7, r2, lsl #10
    d4ec:	02030000 	andeq	r0, r3, #0
    d4f0:	00000e07 	andeq	r0, r0, r7, lsl #28
    d4f4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    d4f8:	00000005 	andeq	r0, r0, r5
    d4fc:	2e070403 	cdpcs	4, 0, cr0, cr7, cr3, {0}
    d500:	03000001 	movweq	r0, #1
    d504:	00000508 	andeq	r0, r0, r8, lsl #10
    d508:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    d50c:	00012907 	andeq	r2, r1, r7, lsl #18
    d510:	57d40400 	ldrbpl	r0, [r4, r0, lsl #8]
    d514:	07020000 	streq	r0, [r2, -r0]
    d518:	00000025 	andeq	r0, r0, r5, lsr #32
    d51c:	0056a204 	subseq	sl, r6, r4, lsl #4
    d520:	4f100300 	svcmi	0x00100300
    d524:	04000000 	streq	r0, [r0], #-0
    d528:	0000587f 	andeq	r5, r0, pc, ror r8
    d52c:	004f2703 	subeq	r2, pc, r3, lsl #14
    d530:	80050000 	andhi	r0, r5, r0
    d534:	04000059 	streq	r0, [r0], #-89	; 0x59
    d538:	002c0161 	eoreq	r0, ip, r1, ror #2
    d53c:	04060000 	streq	r0, [r6], #-0
    d540:	00b74a03 	adcseq	r4, r7, r3, lsl #20
    d544:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    d548:	03000056 	movweq	r0, #86	; 0x56
    d54c:	00008c4c 	andeq	r8, r0, ip, asr #24
    d550:	58c40700 	stmiapl	r4, {r8, r9, sl}^
    d554:	4d030000 	stcmi	0, cr0, [r3, #-0]
    d558:	000000b7 	strheq	r0, [r0], -r7
    d55c:	003a0800 	eorseq	r0, sl, r0, lsl #16
    d560:	00c70000 	sbceq	r0, r7, r0
    d564:	c7090000 	strgt	r0, [r9, -r0]
    d568:	03000000 	movweq	r0, #0
    d56c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    d570:	00000191 	muleq	r0, r1, r1
    d574:	4703080a 	strmi	r0, [r3, -sl, lsl #16]
    d578:	000000ef 	andeq	r0, r0, pc, ror #1
    d57c:	00577d0b 	subseq	r7, r7, fp, lsl #26
    d580:	25490300 	strbcs	r0, [r9, #-768]	; 0x300
    d584:	00000000 	andeq	r0, r0, r0
    d588:	0056b80b 	subseq	fp, r6, fp, lsl #16
    d58c:	984e0300 	stmdals	lr, {r8, r9}^
    d590:	04000000 	streq	r0, [r0], #-0
    d594:	59b90400 	ldmibpl	r9!, {sl}
    d598:	4f030000 	svcmi	0x00030000
    d59c:	000000ce 	andeq	r0, r0, lr, asr #1
    d5a0:	00588e04 	subseq	r8, r8, r4, lsl #28
    d5a4:	6b530300 	blvs	14ce1ac <_Min_Stack_Size+0x14cddac>
    d5a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    d5ac:	5a030404 	bpl	ce5c4 <_Min_Stack_Size+0xce1c4>
    d5b0:	16050000 	strne	r0, [r5], -r0
    d5b4:	00000056 	andeq	r0, r0, r6, asr r0
    d5b8:	0059c40d 	subseq	ip, r9, sp, lsl #8
    d5bc:	2d051800 	stccs	8, cr1, [r5, #-0]
    d5c0:	00000165 	andeq	r0, r0, r5, ror #2
    d5c4:	005a560b 	subseq	r5, sl, fp, lsl #12
    d5c8:	652f0500 	strvs	r0, [pc, #-1280]!	; d0d0 <_Min_Stack_Size+0xccd0>
    d5cc:	00000001 	andeq	r0, r0, r1
    d5d0:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    d5d4:	00253005 	eoreq	r3, r5, r5
    d5d8:	0b040000 	bleq	10d5e0 <_Min_Stack_Size+0x10d1e0>
    d5dc:	000059cc 	andeq	r5, r0, ip, asr #19
    d5e0:	00253005 	eoreq	r3, r5, r5
    d5e4:	0b080000 	bleq	20d5ec <_Min_Stack_Size+0x20d1ec>
    d5e8:	00005a4b 	andeq	r5, r0, fp, asr #20
    d5ec:	00253005 	eoreq	r3, r5, r5
    d5f0:	0b0c0000 	bleq	30d5f8 <_Min_Stack_Size+0x30d1f8>
    d5f4:	00005960 	andeq	r5, r0, r0, ror #18
    d5f8:	00253005 	eoreq	r3, r5, r5
    d5fc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    d600:	0500785f 	streq	r7, [r0, #-2143]	; 0x85f
    d604:	00016b31 	andeq	r6, r1, r1, lsr fp
    d608:	0f001400 	svceq	0x00001400
    d60c:	00011204 	andeq	r1, r1, r4, lsl #4
    d610:	01070800 	tsteq	r7, r0, lsl #16
    d614:	017b0000 	cmneq	fp, r0
    d618:	c7090000 	strgt	r0, [r9, -r0]
    d61c:	00000000 	andeq	r0, r0, r0
    d620:	59650d00 	stmdbpl	r5!, {r8, sl, fp}^
    d624:	05240000 	streq	r0, [r4, #-0]!
    d628:	0001f435 	andeq	pc, r1, r5, lsr r4	; <UNPREDICTABLE>
    d62c:	58970b00 	ldmpl	r7, {r8, r9, fp}
    d630:	37050000 	strcc	r0, [r5, -r0]
    d634:	00000025 	andeq	r0, r0, r5, lsr #32
    d638:	58010b00 	stmdapl	r1, {r8, r9, fp}
    d63c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    d640:	00000025 	andeq	r0, r0, r5, lsr #32
    d644:	58a00b04 	stmiapl	r0!, {r2, r8, r9, fp}
    d648:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    d64c:	00000025 	andeq	r0, r0, r5, lsr #32
    d650:	57850b08 	strpl	r0, [r5, r8, lsl #22]
    d654:	3a050000 	bcc	14d65c <_Min_Stack_Size+0x14d25c>
    d658:	00000025 	andeq	r0, r0, r5, lsr #32
    d65c:	5a190b0c 	bpl	650294 <_Min_Stack_Size+0x64fe94>
    d660:	3b050000 	blcc	14d668 <_Min_Stack_Size+0x14d268>
    d664:	00000025 	andeq	r0, r0, r5, lsr #32
    d668:	59d40b10 	ldmibpl	r4, {r4, r8, r9, fp}^
    d66c:	3c050000 	stccc	0, cr0, [r5], {-0}
    d670:	00000025 	andeq	r0, r0, r5, lsr #32
    d674:	58350b14 	ldmdapl	r5!, {r2, r4, r8, r9, fp}
    d678:	3d050000 	stccc	0, cr0, [r5, #-0]
    d67c:	00000025 	andeq	r0, r0, r5, lsr #32
    d680:	59f90b18 	ldmibpl	r9!, {r3, r4, r8, r9, fp}^
    d684:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    d688:	00000025 	andeq	r0, r0, r5, lsr #32
    d68c:	58590b1c 	ldmdapl	r9, {r2, r3, r4, r8, r9, fp}^
    d690:	3f050000 	svccc	0x00050000
    d694:	00000025 	andeq	r0, r0, r5, lsr #32
    d698:	0b100020 	bleq	40d720 <_Min_Stack_Size+0x40d320>
    d69c:	08000059 	stmdaeq	r0, {r0, r3, r4, r6}
    d6a0:	34480501 	strbcc	r0, [r8], #-1281	; 0x501
    d6a4:	0b000002 	bleq	d6b4 <_Min_Stack_Size+0xd2b4>
    d6a8:	0000583f 	andeq	r5, r0, pc, lsr r8
    d6ac:	02344905 	eorseq	r4, r4, #81920	; 0x14000
    d6b0:	0b000000 	bleq	d6b8 <_Min_Stack_Size+0xd2b8>
    d6b4:	00005a3f 	andeq	r5, r0, pc, lsr sl
    d6b8:	02344a05 	eorseq	r4, r4, #20480	; 0x5000
    d6bc:	11800000 	orrne	r0, r0, r0
    d6c0:	00005876 	andeq	r5, r0, r6, ror r8
    d6c4:	01074c05 	tsteq	r7, r5, lsl #24
    d6c8:	01000000 	mrseq	r0, (UNDEF: 0)
    d6cc:	0059a711 	subseq	sl, r9, r1, lsl r7
    d6d0:	074f0500 	strbeq	r0, [pc, -r0, lsl #10]
    d6d4:	04000001 	streq	r0, [r0], #-1
    d6d8:	05080001 	streq	r0, [r8, #-1]
    d6dc:	44000001 	strmi	r0, [r0], #-1
    d6e0:	09000002 	stmdbeq	r0, {r1}
    d6e4:	000000c7 	andeq	r0, r0, r7, asr #1
    d6e8:	b310001f 	tstlt	r0, #31
    d6ec:	90000057 	andls	r0, r0, r7, asr r0
    d6f0:	825b0501 	subshi	r0, fp, #4194304	; 0x400000
    d6f4:	0b000002 	bleq	d704 <_Min_Stack_Size+0xd304>
    d6f8:	00005a56 	andeq	r5, r0, r6, asr sl
    d6fc:	02825c05 	addeq	r5, r2, #1280	; 0x500
    d700:	0b000000 	bleq	d708 <_Min_Stack_Size+0xd308>
    d704:	00005a2c 	andeq	r5, r0, ip, lsr #20
    d708:	00255d05 	eoreq	r5, r5, r5, lsl #26
    d70c:	0b040000 	bleq	10d714 <_Min_Stack_Size+0x10d314>
    d710:	00005827 	andeq	r5, r0, r7, lsr #16
    d714:	02885f05 	addeq	r5, r8, #5, 30
    d718:	0b080000 	bleq	20d720 <_Min_Stack_Size+0x20d320>
    d71c:	0000590b 	andeq	r5, r0, fp, lsl #18
    d720:	01f46005 	mvnseq	r6, r5
    d724:	00880000 	addeq	r0, r8, r0
    d728:	0244040f 	subeq	r0, r4, #251658240	; 0xf000000
    d72c:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    d730:	98000002 	stmdals	r0, {r1}
    d734:	09000002 	stmdbeq	r0, {r1}
    d738:	000000c7 	andeq	r0, r0, r7, asr #1
    d73c:	040f001f 	streq	r0, [pc], #-31	; d744 <_Min_Stack_Size+0xd344>
    d740:	0000029e 	muleq	r0, lr, r2
    d744:	56c00d12 			; <UNDEFINED> instruction: 0x56c00d12
    d748:	05080000 	streq	r0, [r8, #-0]
    d74c:	0002c473 	andeq	ip, r2, r3, ror r4
    d750:	59380b00 	ldmdbpl	r8!, {r8, r9, fp}
    d754:	74050000 	strvc	r0, [r5], #-0
    d758:	000002c4 	andeq	r0, r0, r4, asr #5
    d75c:	5a8f0b00 	bpl	fe3d0364 <_estack+0xde3a0364>
    d760:	75050000 	strvc	r0, [r5, #-0]
    d764:	00000025 	andeq	r0, r0, r5, lsr #32
    d768:	040f0004 	streq	r0, [pc], #-4	; d770 <_Min_Stack_Size+0xd370>
    d76c:	0000003a 	andeq	r0, r0, sl, lsr r0
    d770:	005aa20d 	subseq	sl, sl, sp, lsl #4
    d774:	b3056800 	movwlt	r6, #22528	; 0x5800
    d778:	000003f4 	strdeq	r0, [r0], -r4
    d77c:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    d780:	02c4b405 	sbceq	fp, r4, #83886080	; 0x5000000
    d784:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    d788:	0500725f 	streq	r7, [r0, #-607]	; 0x25f
    d78c:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
    d790:	5f0e0400 	svcpl	0x000e0400
    d794:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    d798:	00000025 	andeq	r0, r0, r5, lsr #32
    d79c:	57600b08 	strbpl	r0, [r0, -r8, lsl #22]!
    d7a0:	b7050000 	strlt	r0, [r5, -r0]
    d7a4:	00000041 	andeq	r0, r0, r1, asr #32
    d7a8:	593e0b0c 	ldmdbpl	lr!, {r2, r3, r8, r9, fp}
    d7ac:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    d7b0:	00000041 	andeq	r0, r0, r1, asr #32
    d7b4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    d7b8:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    d7bc:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    d7c0:	56af0b10 	ssatpl	r0, #16, r0, lsl #22
    d7c4:	ba050000 	blt	14d7cc <_Min_Stack_Size+0x14d3cc>
    d7c8:	00000025 	andeq	r0, r0, r5, lsr #32
    d7cc:	59300b18 	ldmdbpl	r0!, {r3, r4, r8, r9, fp}
    d7d0:	c1050000 	mrsgt	r0, (UNDEF: 5)
    d7d4:	00000105 	andeq	r0, r0, r5, lsl #2
    d7d8:	58aa0b1c 	stmiapl	sl!, {r2, r3, r4, r8, r9, fp}
    d7dc:	c3050000 	movwgt	r0, #20480	; 0x5000
    d7e0:	00000557 	andeq	r0, r0, r7, asr r5
    d7e4:	57670b20 	strbpl	r0, [r7, -r0, lsr #22]!
    d7e8:	c5050000 	strgt	r0, [r5, #-0]
    d7ec:	00000586 	andeq	r0, r0, r6, lsl #11
    d7f0:	5a0b0b24 	bpl	2d0488 <_Min_Stack_Size+0x2d0088>
    d7f4:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    d7f8:	000005aa 	andeq	r0, r0, sl, lsr #11
    d7fc:	58870b28 	stmpl	r7, {r3, r5, r8, r9, fp}
    d800:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    d804:	000005c4 	andeq	r0, r0, r4, asr #11
    d808:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; c9e4 <_Min_Stack_Size+0xc5e4>
    d80c:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    d810:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    d814:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; c9ec <_Min_Stack_Size+0xc5ec>
    d818:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    d81c:	000002c4 	andeq	r0, r0, r4, asr #5
    d820:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; c9f0 <_Min_Stack_Size+0xc5f0>
    d824:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    d828:	00000025 	andeq	r0, r0, r5, lsr #32
    d82c:	5a890b3c 	bpl	fe250524 <_estack+0xde220524>
    d830:	d1050000 	mrsle	r0, (UNDEF: 5)
    d834:	000005ca 	andeq	r0, r0, sl, asr #11
    d838:	57ce0b40 	strbpl	r0, [lr, r0, asr #22]
    d83c:	d2050000 	andle	r0, r5, #0
    d840:	000005da 	ldrdeq	r0, [r0], -sl
    d844:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
    d848:	d5050062 	strle	r0, [r5, #-98]	; 0x62
    d84c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    d850:	586d0b44 	stmdapl	sp!, {r2, r6, r8, r9, fp}^
    d854:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    d858:	00000025 	andeq	r0, r0, r5, lsr #32
    d85c:	57360b4c 	ldrpl	r0, [r6, -ip, asr #22]!
    d860:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    d864:	00000076 	andeq	r0, r0, r6, ror r0
    d868:	5ab50b50 	bpl	fed505b0 <_estack+0xded205b0>
    d86c:	dc050000 	stcle	0, cr0, [r5], {-0}
    d870:	00000412 	andeq	r0, r0, r2, lsl r4
    d874:	584d0b54 	stmdapl	sp, {r2, r4, r6, r8, r9, fp}^
    d878:	e0050000 	and	r0, r5, r0
    d87c:	000000fa 	strdeq	r0, [r0], -sl
    d880:	582c0b58 	stmdapl	ip!, {r3, r4, r6, r8, r9, fp}
    d884:	e2050000 	and	r0, r5, #0
    d888:	000000ef 	andeq	r0, r0, pc, ror #1
    d88c:	56830b5c 	pkhtbpl	r0, r3, ip, asr #22
    d890:	e3050000 	movw	r0, #20480	; 0x5000
    d894:	00000025 	andeq	r0, r0, r5, lsr #32
    d898:	25130064 	ldrcs	r0, [r3, #-100]	; 0x64
    d89c:	12000000 	andne	r0, r0, #0
    d8a0:	14000004 	strne	r0, [r0], #-4
    d8a4:	00000412 	andeq	r0, r0, r2, lsl r4
    d8a8:	00010514 	andeq	r0, r1, r4, lsl r5
    d8ac:	054a1400 	strbeq	r1, [sl, #-1024]	; 0x400
    d8b0:	25140000 	ldrcs	r0, [r4, #-0]
    d8b4:	00000000 	andeq	r0, r0, r0
    d8b8:	0418040f 	ldreq	r0, [r8], #-1039	; 0x40f
    d8bc:	73150000 	tstvc	r5, #0
    d8c0:	2800005a 	stmdacs	r0, {r1, r3, r4, r6}
    d8c4:	02390504 	eorseq	r0, r9, #4, 10	; 0x1000000
    d8c8:	0000054a 	andeq	r0, r0, sl, asr #10
    d8cc:	00527b16 	subseq	r7, r2, r6, lsl fp
    d8d0:	023b0500 	eorseq	r0, fp, #0, 10
    d8d4:	00000025 	andeq	r0, r0, r5, lsr #32
    d8d8:	5a5c1600 	bpl	17130e0 <_Min_Stack_Size+0x1712ce0>
    d8dc:	40050000 	andmi	r0, r5, r0
    d8e0:	00063102 	andeq	r3, r6, r2, lsl #2
    d8e4:	ab160400 	blge	58e8ec <_Min_Stack_Size+0x58e4ec>
    d8e8:	05000057 	streq	r0, [r0, #-87]	; 0x57
    d8ec:	06310240 	ldrteq	r0, [r1], -r0, asr #4
    d8f0:	16080000 	strne	r0, [r8], -r0
    d8f4:	000058bc 			; <UNDEFINED> instruction: 0x000058bc
    d8f8:	31024005 	tstcc	r2, r5
    d8fc:	0c000006 	stceq	0, cr0, [r0], {6}
    d900:	005a2716 	subseq	r2, sl, r6, lsl r7
    d904:	02420500 	subeq	r0, r2, #0, 10
    d908:	00000025 	andeq	r0, r0, r5, lsr #32
    d90c:	57bb1610 			; <UNDEFINED> instruction: 0x57bb1610
    d910:	43050000 	movwmi	r0, #20480	; 0x5000
    d914:	00081302 	andeq	r1, r8, r2, lsl #6
    d918:	95161400 	ldrls	r1, [r6, #-1024]	; 0x400
    d91c:	05000059 	streq	r0, [r0, #-89]	; 0x59
    d920:	00250245 	eoreq	r0, r5, r5, asr #4
    d924:	16300000 	ldrtne	r0, [r0], -r0
    d928:	00005a63 	andeq	r5, r0, r3, ror #20
    d92c:	7b024605 	blvc	9f148 <_Min_Stack_Size+0x9ed48>
    d930:	34000005 	strcc	r0, [r0], #-5
    d934:	00567816 	subseq	r7, r6, r6, lsl r8
    d938:	02480500 	subeq	r0, r8, #0, 10
    d93c:	00000025 	andeq	r0, r0, r5, lsr #32
    d940:	59af1638 	stmibpl	pc!, {r3, r4, r5, r9, sl, ip}	; <UNPREDICTABLE>
    d944:	4a050000 	bmi	14d94c <_Min_Stack_Size+0x14d54c>
    d948:	00082e02 	andeq	r2, r8, r2, lsl #28
    d94c:	11163c00 	tstne	r6, r0, lsl #24
    d950:	0500005a 	streq	r0, [r0, #-90]	; 0x5a
    d954:	0165024d 	cmneq	r5, sp, asr #4
    d958:	16400000 	strbne	r0, [r0], -r0
    d95c:	0000572c 	andeq	r5, r0, ip, lsr #14
    d960:	25024e05 	strcs	r4, [r2, #-3589]	; 0xe05
    d964:	44000000 	strmi	r0, [r0], #-0
    d968:	0058b716 	subseq	fp, r8, r6, lsl r7
    d96c:	024f0500 	subeq	r0, pc, #0, 10
    d970:	00000165 	andeq	r0, r0, r5, ror #2
    d974:	581d1648 	ldmdapl	sp, {r3, r6, r9, sl, ip}
    d978:	50050000 	andpl	r0, r5, r0
    d97c:	00083402 	andeq	r3, r8, r2, lsl #8
    d980:	c6164c00 	ldrgt	r4, [r6], -r0, lsl #24
    d984:	05000057 	streq	r0, [r0, #-87]	; 0x57
    d988:	00250253 	eoreq	r0, r5, r3, asr r2
    d98c:	16500000 	ldrbne	r0, [r0], -r0
    d990:	00005928 	andeq	r5, r0, r8, lsr #18
    d994:	4a025405 	bmi	a29b0 <_Min_Stack_Size+0xa25b0>
    d998:	54000005 	strpl	r0, [r0], #-5
    d99c:	005aaa16 	subseq	sl, sl, r6, lsl sl
    d9a0:	02770500 	rsbseq	r0, r7, #0, 10
    d9a4:	000007f1 	strdeq	r0, [r0], -r1
    d9a8:	57b31758 	sbfxpl	r1, r8, #14, #20
    d9ac:	7b050000 	blvc	14d9b4 <_Min_Stack_Size+0x14d5b4>
    d9b0:	00028202 	andeq	r8, r2, r2, lsl #4
    d9b4:	17014800 	strne	r4, [r1, -r0, lsl #16]
    d9b8:	00005864 	andeq	r5, r0, r4, ror #16
    d9bc:	44027c05 	strmi	r7, [r2], #-3077	; 0xc05
    d9c0:	4c000002 	stcmi	0, cr0, [r0], {2}
    d9c4:	580a1701 	stmdapl	sl, {r0, r8, r9, sl, ip}
    d9c8:	80050000 	andhi	r0, r5, r0
    d9cc:	00084502 	andeq	r4, r8, r2, lsl #10
    d9d0:	1702dc00 	strne	sp, [r2, -r0, lsl #24]
    d9d4:	00005903 	andeq	r5, r0, r3, lsl #18
    d9d8:	f6028505 			; <UNDEFINED> instruction: 0xf6028505
    d9dc:	e0000005 	and	r0, r0, r5
    d9e0:	573e1702 	ldrpl	r1, [lr, -r2, lsl #14]!
    d9e4:	86050000 	strhi	r0, [r5], -r0
    d9e8:	00085102 	andeq	r5, r8, r2, lsl #2
    d9ec:	0002ec00 	andeq	lr, r2, r0, lsl #24
    d9f0:	0550040f 	ldrbeq	r0, [r0, #-1039]	; 0x40f
    d9f4:	01030000 	mrseq	r0, (UNDEF: 3)
    d9f8:	00015408 	andeq	r5, r1, r8, lsl #8
    d9fc:	f4040f00 			; <UNDEFINED> instruction: 0xf4040f00
    da00:	13000003 	movwne	r0, #3
    da04:	00000025 	andeq	r0, r0, r5, lsr #32
    da08:	0000057b 	andeq	r0, r0, fp, ror r5
    da0c:	00041214 	andeq	r1, r4, r4, lsl r2
    da10:	01051400 	tsteq	r5, r0, lsl #8
    da14:	7b140000 	blvc	50da1c <_Min_Stack_Size+0x50d61c>
    da18:	14000005 	strne	r0, [r0], #-5
    da1c:	00000025 	andeq	r0, r0, r5, lsr #32
    da20:	81040f00 	tsthi	r4, r0, lsl #30
    da24:	18000005 	stmdane	r0, {r0, r2}
    da28:	00000550 	andeq	r0, r0, r0, asr r5
    da2c:	055d040f 	ldrbeq	r0, [sp, #-1039]	; 0x40f
    da30:	81130000 	tsthi	r3, r0
    da34:	aa000000 	bge	da3c <_Min_Stack_Size+0xd63c>
    da38:	14000005 	strne	r0, [r0], #-5
    da3c:	00000412 	andeq	r0, r0, r2, lsl r4
    da40:	00010514 	andeq	r0, r1, r4, lsl r5
    da44:	00811400 	addeq	r1, r1, r0, lsl #8
    da48:	25140000 	ldrcs	r0, [r4, #-0]
    da4c:	00000000 	andeq	r0, r0, r0
    da50:	058c040f 	streq	r0, [ip, #1039]	; 0x40f
    da54:	25130000 	ldrcs	r0, [r3, #-0]
    da58:	c4000000 	strgt	r0, [r0], #-0
    da5c:	14000005 	strne	r0, [r0], #-5
    da60:	00000412 	andeq	r0, r0, r2, lsl r4
    da64:	00010514 	andeq	r0, r1, r4, lsl r5
    da68:	040f0000 	streq	r0, [pc], #-0	; da70 <_Min_Stack_Size+0xd670>
    da6c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    da70:	00003a08 	andeq	r3, r0, r8, lsl #20
    da74:	0005da00 	andeq	sp, r5, r0, lsl #20
    da78:	00c70900 	sbceq	r0, r7, r0, lsl #18
    da7c:	00020000 	andeq	r0, r2, r0
    da80:	00003a08 	andeq	r3, r0, r8, lsl #20
    da84:	0005ea00 	andeq	lr, r5, r0, lsl #20
    da88:	00c70900 	sbceq	r0, r7, r0, lsl #18
    da8c:	00000000 	andeq	r0, r0, r0
    da90:	0057ed05 	subseq	lr, r7, r5, lsl #26
    da94:	011d0500 	tsteq	sp, r0, lsl #10
    da98:	000002ca 	andeq	r0, r0, sl, asr #5
    da9c:	00578f19 	subseq	r8, r7, r9, lsl pc
    daa0:	21050c00 	tstcs	r5, r0, lsl #24
    daa4:	00062b01 	andeq	r2, r6, r1, lsl #22
    daa8:	5a561600 	bpl	15932b0 <_Min_Stack_Size+0x1592eb0>
    daac:	23050000 	movwcs	r0, #20480	; 0x5000
    dab0:	00062b01 	andeq	r2, r6, r1, lsl #22
    dab4:	e6160000 	ldr	r0, [r6], -r0
    dab8:	05000057 	streq	r0, [r0, #-87]	; 0x57
    dabc:	00250124 	eoreq	r0, r5, r4, lsr #2
    dac0:	16040000 	strne	r0, [r4], -r0
    dac4:	00005847 	andeq	r5, r0, r7, asr #16
    dac8:	31012505 	tstcc	r1, r5, lsl #10
    dacc:	08000006 	stmdaeq	r0, {r1, r2}
    dad0:	f6040f00 			; <UNDEFINED> instruction: 0xf6040f00
    dad4:	0f000005 	svceq	0x00000005
    dad8:	0005ea04 	andeq	lr, r5, r4, lsl #20
    dadc:	59f11900 	ldmibpl	r1!, {r8, fp, ip}^
    dae0:	050e0000 	streq	r0, [lr, #-0]
    dae4:	066c013d 			; <UNDEFINED> instruction: 0x066c013d
    dae8:	eb160000 	bl	58daf0 <_Min_Stack_Size+0x58d6f0>
    daec:	05000059 	streq	r0, [r0, #-89]	; 0x59
    daf0:	066c013e 			; <UNDEFINED> instruction: 0x066c013e
    daf4:	16000000 	strne	r0, [r0], -r0
    daf8:	00005853 	andeq	r5, r0, r3, asr r8
    dafc:	6c013f05 	stcvs	15, cr3, [r1], {5}
    db00:	06000006 	streq	r0, [r0], -r6
    db04:	005a2216 	subseq	r2, sl, r6, lsl r2
    db08:	01400500 	cmpeq	r0, r0, lsl #10
    db0c:	00000048 	andeq	r0, r0, r8, asr #32
    db10:	4808000c 	stmdami	r8, {r2, r3}
    db14:	7c000000 	stcvc	0, cr0, [r0], {-0}
    db18:	09000006 	stmdbeq	r0, {r1, r2}
    db1c:	000000c7 	andeq	r0, r0, r7, asr #1
    db20:	d01a0002 	andsle	r0, sl, r2
    db24:	7d025805 	stcvc	8, cr5, [r2, #-20]	; 0xffffffec
    db28:	16000007 	strne	r0, [r0], -r7
    db2c:	00005953 	andeq	r5, r0, r3, asr r9
    db30:	2c025a05 	stccs	10, cr5, [r2], {5}
    db34:	00000000 	andeq	r0, r0, r0
    db38:	0059de16 	subseq	sp, r9, r6, lsl lr
    db3c:	025b0500 	subseq	r0, fp, #0, 10
    db40:	0000054a 	andeq	r0, r0, sl, asr #10
    db44:	5a951604 	bpl	fe55335c <_estack+0xde52335c>
    db48:	5c050000 	stcpl	0, cr0, [r5], {-0}
    db4c:	00077d02 	andeq	r7, r7, r2, lsl #26
    db50:	6e160800 	cdpvs	8, 1, cr0, cr6, cr0, {0}
    db54:	05000057 	streq	r0, [r0, #-87]	; 0x57
    db58:	017b025d 	cmneq	fp, sp, asr r2
    db5c:	16240000 	strtne	r0, [r4], -r0
    db60:	00005944 	andeq	r5, r0, r4, asr #18
    db64:	25025e05 	strcs	r5, [r2, #-3589]	; 0xe05
    db68:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    db6c:	005a5116 	subseq	r5, sl, r6, lsl r1
    db70:	025f0500 	subseq	r0, pc, #0, 10
    db74:	00000064 	andeq	r0, r0, r4, rrx
    db78:	57a61650 	sbfxpl	r1, r0, #12, #7
    db7c:	60050000 	andvs	r0, r5, r0
    db80:	00063702 	andeq	r3, r6, r2, lsl #14
    db84:	8b165800 	blhi	5a3b8c <_Min_Stack_Size+0x5a378c>
    db88:	05000056 	streq	r0, [r0, #-86]	; 0x56
    db8c:	00ef0261 	rsceq	r0, pc, r1, ror #4
    db90:	16680000 	strbtne	r0, [r8], -r0
    db94:	00005972 	andeq	r5, r0, r2, ror r9
    db98:	ef026205 	svc	0x00026205
    db9c:	70000000 	andvc	r0, r0, r0
    dba0:	005a3116 	subseq	r3, sl, r6, lsl r1
    dba4:	02630500 	rsbeq	r0, r3, #0, 10
    dba8:	000000ef 	andeq	r0, r0, pc, ror #1
    dbac:	56981678 			; <UNDEFINED> instruction: 0x56981678
    dbb0:	64050000 	strvs	r0, [r5], #-0
    dbb4:	00078d02 	andeq	r8, r7, r2, lsl #26
    dbb8:	43168000 	tstmi	r6, #0
    dbbc:	05000057 	streq	r0, [r0, #-87]	; 0x57
    dbc0:	079d0265 	ldreq	r0, [sp, r5, ror #4]
    dbc4:	16880000 	strne	r0, [r8], r0
    dbc8:	000057f4 	strdeq	r5, [r0], -r4
    dbcc:	25026605 	strcs	r6, [r2, #-1541]	; 0x605
    dbd0:	a0000000 	andge	r0, r0, r0
    dbd4:	00598716 	subseq	r8, r9, r6, lsl r7
    dbd8:	02670500 	rsbeq	r0, r7, #0, 10
    dbdc:	000000ef 	andeq	r0, r0, pc, ror #1
    dbe0:	591916a4 	ldmdbpl	r9, {r2, r5, r7, r9, sl, ip}
    dbe4:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    dbe8:	0000ef02 	andeq	lr, r0, r2, lsl #30
    dbec:	9516ac00 	ldrls	sl, [r6, #-3072]	; 0xc00
    dbf0:	05000057 	streq	r0, [r0, #-87]	; 0x57
    dbf4:	00ef0269 	rsceq	r0, pc, r9, ror #4
    dbf8:	16b40000 	ldrtne	r0, [r4], r0
    dbfc:	00005a7a 	andeq	r5, r0, sl, ror sl
    dc00:	ef026a05 	svc	0x00026a05
    dc04:	bc000000 	stclt	0, cr0, [r0], {-0}
    dc08:	00574f16 	subseq	r4, r7, r6, lsl pc
    dc0c:	026b0500 	rsbeq	r0, fp, #0, 10
    dc10:	000000ef 	andeq	r0, r0, pc, ror #1
    dc14:	58fa16c4 	ldmpl	sl!, {r2, r6, r7, r9, sl, ip}^
    dc18:	6c050000 	stcvs	0, cr0, [r5], {-0}
    dc1c:	00002502 	andeq	r2, r0, r2, lsl #10
    dc20:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
    dc24:	00000550 	andeq	r0, r0, r0, asr r5
    dc28:	0000078d 	andeq	r0, r0, sp, lsl #15
    dc2c:	0000c709 	andeq	ip, r0, r9, lsl #14
    dc30:	08001900 	stmdaeq	r0, {r8, fp, ip}
    dc34:	00000550 	andeq	r0, r0, r0, asr r5
    dc38:	0000079d 	muleq	r0, sp, r7
    dc3c:	0000c709 	andeq	ip, r0, r9, lsl #14
    dc40:	08000700 	stmdaeq	r0, {r8, r9, sl}
    dc44:	00000550 	andeq	r0, r0, r0, asr r5
    dc48:	000007ad 	andeq	r0, r0, sp, lsr #15
    dc4c:	0000c709 	andeq	ip, r0, r9, lsl #14
    dc50:	1a001700 	bne	13858 <_Min_Stack_Size+0x13458>
    dc54:	027105f0 	rsbseq	r0, r1, #240, 10	; 0x3c000000
    dc58:	000007d1 	ldrdeq	r0, [r0], -r1
    dc5c:	0058b016 	subseq	fp, r8, r6, lsl r0
    dc60:	02740500 	rsbseq	r0, r4, #0, 10
    dc64:	000007d1 	ldrdeq	r0, [r0], -r1
    dc68:	58141600 	ldmdapl	r4, {r9, sl, ip}
    dc6c:	75050000 	strvc	r0, [r5, #-0]
    dc70:	0007e102 	andeq	lr, r7, r2, lsl #2
    dc74:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
    dc78:	000002c4 	andeq	r0, r0, r4, asr #5
    dc7c:	000007e1 	andeq	r0, r0, r1, ror #15
    dc80:	0000c709 	andeq	ip, r0, r9, lsl #14
    dc84:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
    dc88:	0000002c 	andeq	r0, r0, ip, lsr #32
    dc8c:	000007f1 	strdeq	r0, [r0], -r1
    dc90:	0000c709 	andeq	ip, r0, r9, lsl #14
    dc94:	1b001d00 	blne	1509c <_Min_Stack_Size+0x14c9c>
    dc98:	025605f0 	subseq	r0, r6, #240, 10	; 0x3c000000
    dc9c:	00000813 	andeq	r0, r0, r3, lsl r8
    dca0:	005a731c 	subseq	r7, sl, ip, lsl r3
    dca4:	026d0500 	rsbeq	r0, sp, #0, 10
    dca8:	0000067c 	andeq	r0, r0, ip, ror r6
    dcac:	00596a1c 	subseq	r6, r9, ip, lsl sl
    dcb0:	02760500 	rsbseq	r0, r6, #0, 10
    dcb4:	000007ad 	andeq	r0, r0, sp, lsr #15
    dcb8:	05500800 	ldrbeq	r0, [r0, #-2048]	; 0x800
    dcbc:	08230000 	stmdaeq	r3!, {}	; <UNPREDICTABLE>
    dcc0:	c7090000 	strgt	r0, [r9, -r0]
    dcc4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    dcc8:	082e1d00 	stmdaeq	lr!, {r8, sl, fp, ip}
    dccc:	12140000 	andsne	r0, r4, #0
    dcd0:	00000004 	andeq	r0, r0, r4
    dcd4:	0823040f 	stmdaeq	r3!, {r0, r1, r2, r3, sl}
    dcd8:	040f0000 	streq	r0, [pc], #-0	; dce0 <_Min_Stack_Size+0xd8e0>
    dcdc:	00000165 	andeq	r0, r0, r5, ror #2
    dce0:	0008451d 	andeq	r4, r8, sp, lsl r5
    dce4:	00251400 	eoreq	r1, r5, r0, lsl #8
    dce8:	0f000000 	svceq	0x00000000
    dcec:	00084b04 	andeq	r4, r8, r4, lsl #22
    dcf0:	3a040f00 	bcc	1118f8 <_Min_Stack_Size+0x1114f8>
    dcf4:	08000008 	stmdaeq	r0, {r3}
    dcf8:	000005ea 	andeq	r0, r0, sl, ror #11
    dcfc:	00000861 	andeq	r0, r0, r1, ror #16
    dd00:	0000c709 	andeq	ip, r0, r9, lsl #14
    dd04:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    dd08:	0000527a 	andeq	r5, r0, sl, ror r2
    dd0c:	08760f06 	ldmdaeq	r6!, {r1, r2, r8, r9, sl, fp}^
    dd10:	c95c0000 	ldmdbgt	ip, {}^	; <UNPREDICTABLE>
    dd14:	000c0800 	andeq	r0, ip, r0, lsl #16
    dd18:	9c010000 	stcls	0, cr0, [r1], {-0}
    dd1c:	0025040f 	eoreq	r0, r5, pc, lsl #8
    dd20:	571f0000 	ldrpl	r0, [pc, -r0]
    dd24:	0500005b 	streq	r0, [r0, #-91]	; 0x5b
    dd28:	041202fa 	ldreq	r0, [r2], #-762	; 0x2fa
    dd2c:	90000000 	andls	r0, r0, r0
    dd30:	04000008 	streq	r0, [r0], #-8
    dd34:	00302300 	eorseq	r2, r0, r0, lsl #6
    dd38:	1b010400 	blne	4ed40 <_Min_Stack_Size+0x4e940>
    dd3c:	01000050 	qaddeq	r0, r0, r0
    dd40:	00005b20 	andeq	r5, r0, r0, lsr #22
    dd44:	00005abb 			; <UNDEFINED> instruction: 0x00005abb
    dd48:	0000646b 	andeq	r6, r0, fp, ror #8
    dd4c:	69050402 	stmdbvs	r5, {r1, sl}
    dd50:	0300746e 	movweq	r7, #1134	; 0x46e
    dd54:	01330704 	teqeq	r3, r4, lsl #14
    dd58:	01030000 	mrseq	r0, (UNDEF: 3)
    dd5c:	00014d06 	andeq	r4, r1, r6, lsl #26
    dd60:	08010300 	stmdaeq	r1, {r8, r9}
    dd64:	0000014b 	andeq	r0, r0, fp, asr #2
    dd68:	87050203 	strhi	r0, [r5, -r3, lsl #4]
    dd6c:	03000001 	movweq	r0, #1
    dd70:	000e0702 	andeq	r0, lr, r2, lsl #14
    dd74:	04030000 	streq	r0, [r3], #-0
    dd78:	00000505 	andeq	r0, r0, r5, lsl #10
    dd7c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    dd80:	0000012e 	andeq	r0, r0, lr, lsr #2
    dd84:	00050803 	andeq	r0, r5, r3, lsl #16
    dd88:	03000000 	movweq	r0, #0
    dd8c:	01290708 	teqeq	r9, r8, lsl #14
    dd90:	d4040000 	strle	r0, [r4], #-0
    dd94:	01000057 	qaddeq	r0, r7, r0
    dd98:	00001d07 	andeq	r1, r0, r7, lsl #26
    dd9c:	56a20400 	strtpl	r0, [r2], r0, lsl #8
    dda0:	10020000 	andne	r0, r2, r0
    dda4:	00000047 	andeq	r0, r0, r7, asr #32
    dda8:	00587f04 	subseq	r7, r8, r4, lsl #30
    ddac:	47270200 	strmi	r0, [r7, -r0, lsl #4]!
    ddb0:	05000000 	streq	r0, [r0, #-0]
    ddb4:	00005980 	andeq	r5, r0, r0, lsl #19
    ddb8:	24016103 	strcs	r6, [r1], #-259	; 0x103
    ddbc:	06000000 	streq	r0, [r0], -r0
    ddc0:	af4a0204 	svcge	0x004a0204
    ddc4:	07000000 	streq	r0, [r0, -r0]
    ddc8:	000056a9 	andeq	r5, r0, r9, lsr #13
    ddcc:	00844c02 	addeq	r4, r4, r2, lsl #24
    ddd0:	c4070000 	strgt	r0, [r7], #-0
    ddd4:	02000058 	andeq	r0, r0, #88	; 0x58
    ddd8:	0000af4d 	andeq	sl, r0, sp, asr #30
    dddc:	32080000 	andcc	r0, r8, #0
    dde0:	bf000000 	svclt	0x00000000
    dde4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    dde8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    ddec:	04030003 	streq	r0, [r3], #-3
    ddf0:	00019107 	andeq	r9, r1, r7, lsl #2
    ddf4:	02080a00 	andeq	r0, r8, #0, 20
    ddf8:	0000e747 	andeq	lr, r0, r7, asr #14
    ddfc:	577d0b00 	ldrbpl	r0, [sp, -r0, lsl #22]!
    de00:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    de04:	0000001d 	andeq	r0, r0, sp, lsl r0
    de08:	56b80b00 	ldrtpl	r0, [r8], r0, lsl #22
    de0c:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    de10:	00000090 	muleq	r0, r0, r0
    de14:	b9040004 	stmdblt	r4, {r2}
    de18:	02000059 	andeq	r0, r0, #89	; 0x59
    de1c:	0000c64f 	andeq	ip, r0, pc, asr #12
    de20:	588e0400 	stmpl	lr, {sl}
    de24:	53020000 	movwpl	r0, #8192	; 0x2000
    de28:	00000063 	andeq	r0, r0, r3, rrx
    de2c:	0304040c 	movweq	r0, #17420	; 0x440c
    de30:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    de34:	00004e16 	andeq	r4, r0, r6, lsl lr
    de38:	59c40d00 	stmibpl	r4, {r8, sl, fp}^
    de3c:	04180000 	ldreq	r0, [r8], #-0
    de40:	00015d2d 	andeq	r5, r1, sp, lsr #26
    de44:	5a560b00 	bpl	1590a4c <_Min_Stack_Size+0x159064c>
    de48:	2f040000 	svccs	0x00040000
    de4c:	0000015d 	andeq	r0, r0, sp, asr r1
    de50:	6b5f0e00 	blvs	17d1658 <_Min_Stack_Size+0x17d1258>
    de54:	1d300400 	cfldrsne	mvf0, [r0, #-0]
    de58:	04000000 	streq	r0, [r0], #-0
    de5c:	0059cc0b 	subseq	ip, r9, fp, lsl #24
    de60:	1d300400 	cfldrsne	mvf0, [r0, #-0]
    de64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    de68:	005a4b0b 	subseq	r4, sl, fp, lsl #22
    de6c:	1d300400 	cfldrsne	mvf0, [r0, #-0]
    de70:	0c000000 	stceq	0, cr0, [r0], {-0}
    de74:	0059600b 	subseq	r6, r9, fp
    de78:	1d300400 	cfldrsne	mvf0, [r0, #-0]
    de7c:	10000000 	andne	r0, r0, r0
    de80:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    de84:	01633104 	cmneq	r3, r4, lsl #2
    de88:	00140000 	andseq	r0, r4, r0
    de8c:	010a040f 	tsteq	sl, pc, lsl #8
    de90:	ff080000 			; <UNDEFINED> instruction: 0xff080000
    de94:	73000000 	movwvc	r0, #0
    de98:	09000001 	stmdbeq	r0, {r0}
    de9c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    dea0:	650d0000 	strvs	r0, [sp, #-0]
    dea4:	24000059 	strcs	r0, [r0], #-89	; 0x59
    dea8:	01ec3504 	mvneq	r3, r4, lsl #10
    deac:	970b0000 	strls	r0, [fp, -r0]
    deb0:	04000058 	streq	r0, [r0], #-88	; 0x58
    deb4:	00001d37 	andeq	r1, r0, r7, lsr sp
    deb8:	010b0000 	mrseq	r0, (UNDEF: 11)
    debc:	04000058 	streq	r0, [r0], #-88	; 0x58
    dec0:	00001d38 	andeq	r1, r0, r8, lsr sp
    dec4:	a00b0400 	andge	r0, fp, r0, lsl #8
    dec8:	04000058 	streq	r0, [r0], #-88	; 0x58
    decc:	00001d39 	andeq	r1, r0, r9, lsr sp
    ded0:	850b0800 	strhi	r0, [fp, #-2048]	; 0x800
    ded4:	04000057 	streq	r0, [r0], #-87	; 0x57
    ded8:	00001d3a 	andeq	r1, r0, sl, lsr sp
    dedc:	190b0c00 	stmdbne	fp, {sl, fp}
    dee0:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    dee4:	00001d3b 	andeq	r1, r0, fp, lsr sp
    dee8:	d40b1000 	strle	r1, [fp], #-0
    deec:	04000059 	streq	r0, [r0], #-89	; 0x59
    def0:	00001d3c 	andeq	r1, r0, ip, lsr sp
    def4:	350b1400 	strcc	r1, [fp, #-1024]	; 0x400
    def8:	04000058 	streq	r0, [r0], #-88	; 0x58
    defc:	00001d3d 	andeq	r1, r0, sp, lsr sp
    df00:	f90b1800 			; <UNDEFINED> instruction: 0xf90b1800
    df04:	04000059 	streq	r0, [r0], #-89	; 0x59
    df08:	00001d3e 	andeq	r1, r0, lr, lsr sp
    df0c:	590b1c00 	stmdbpl	fp, {sl, fp, ip}
    df10:	04000058 	streq	r0, [r0], #-88	; 0x58
    df14:	00001d3f 	andeq	r1, r0, pc, lsr sp
    df18:	10002000 	andne	r2, r0, r0
    df1c:	0000590b 	andeq	r5, r0, fp, lsl #18
    df20:	48040108 	stmdami	r4, {r3, r8}
    df24:	0000022c 	andeq	r0, r0, ip, lsr #4
    df28:	00583f0b 	subseq	r3, r8, fp, lsl #30
    df2c:	2c490400 	cfstrdcs	mvd0, [r9], {-0}
    df30:	00000002 	andeq	r0, r0, r2
    df34:	005a3f0b 	subseq	r3, sl, fp, lsl #30
    df38:	2c4a0400 	cfstrdcs	mvd0, [sl], {-0}
    df3c:	80000002 	andhi	r0, r0, r2
    df40:	00587611 	subseq	r7, r8, r1, lsl r6
    df44:	ff4c0400 			; <UNDEFINED> instruction: 0xff4c0400
    df48:	00000000 	andeq	r0, r0, r0
    df4c:	59a71101 	stmibpl	r7!, {r0, r8, ip}
    df50:	4f040000 	svcmi	0x00040000
    df54:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    df58:	08000104 	stmdaeq	r0, {r2, r8}
    df5c:	000000fd 	strdeq	r0, [r0], -sp
    df60:	0000023c 	andeq	r0, r0, ip, lsr r2
    df64:	0000bf09 	andeq	fp, r0, r9, lsl #30
    df68:	10001f00 	andne	r1, r0, r0, lsl #30
    df6c:	000057b3 			; <UNDEFINED> instruction: 0x000057b3
    df70:	5b040190 	blpl	10e5b8 <_Min_Stack_Size+0x10e1b8>
    df74:	0000027a 	andeq	r0, r0, sl, ror r2
    df78:	005a560b 	subseq	r5, sl, fp, lsl #12
    df7c:	7a5c0400 	bvc	170ef84 <_Min_Stack_Size+0x170eb84>
    df80:	00000002 	andeq	r0, r0, r2
    df84:	005a2c0b 	subseq	r2, sl, fp, lsl #24
    df88:	1d5d0400 	cfldrdne	mvd0, [sp, #-0]
    df8c:	04000000 	streq	r0, [r0], #-0
    df90:	0058270b 	subseq	r2, r8, fp, lsl #14
    df94:	805f0400 	subshi	r0, pc, r0, lsl #8
    df98:	08000002 	stmdaeq	r0, {r1}
    df9c:	00590b0b 	subseq	r0, r9, fp, lsl #22
    dfa0:	ec600400 	cfstrd	mvd0, [r0], #-0
    dfa4:	88000001 	stmdahi	r0, {r0}
    dfa8:	3c040f00 	stccc	15, cr0, [r4], {-0}
    dfac:	08000002 	stmdaeq	r0, {r1}
    dfb0:	00000290 	muleq	r0, r0, r2
    dfb4:	00000290 	muleq	r0, r0, r2
    dfb8:	0000bf09 	andeq	fp, r0, r9, lsl #30
    dfbc:	0f001f00 	svceq	0x00001f00
    dfc0:	00029604 	andeq	r9, r2, r4, lsl #12
    dfc4:	c00d1200 	andgt	r1, sp, r0, lsl #4
    dfc8:	08000056 	stmdaeq	r0, {r1, r2, r4, r6}
    dfcc:	02bc7304 	adcseq	r7, ip, #4, 6	; 0x10000000
    dfd0:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
    dfd4:	04000059 	streq	r0, [r0], #-89	; 0x59
    dfd8:	0002bc74 	andeq	fp, r2, r4, ror ip
    dfdc:	8f0b0000 	svchi	0x000b0000
    dfe0:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    dfe4:	00001d75 	andeq	r1, r0, r5, ror sp
    dfe8:	0f000400 	svceq	0x00000400
    dfec:	00003204 	andeq	r3, r0, r4, lsl #4
    dff0:	5aa20d00 	bpl	fe8913f8 <_estack+0xde8613f8>
    dff4:	04680000 	strbteq	r0, [r8], #-0
    dff8:	0003ecb3 			; <UNDEFINED> instruction: 0x0003ecb3
    dffc:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    e000:	bcb40400 	cfldrslt	mvf0, [r4]
    e004:	00000002 	andeq	r0, r0, r2
    e008:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
    e00c:	001db504 	andseq	fp, sp, r4, lsl #10
    e010:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    e014:	0400775f 	streq	r7, [r0], #-1887	; 0x75f
    e018:	00001db6 			; <UNDEFINED> instruction: 0x00001db6
    e01c:	600b0800 	andvs	r0, fp, r0, lsl #16
    e020:	04000057 	streq	r0, [r0], #-87	; 0x57
    e024:	000039b7 			; <UNDEFINED> instruction: 0x000039b7
    e028:	3e0b0c00 	cdpcc	12, 0, cr0, cr11, cr0, {0}
    e02c:	04000059 	streq	r0, [r0], #-89	; 0x59
    e030:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
    e034:	5f0e0e00 	svcpl	0x000e0e00
    e038:	04006662 	streq	r6, [r0], #-1634	; 0x662
    e03c:	000297b9 			; <UNDEFINED> instruction: 0x000297b9
    e040:	af0b1000 	svcge	0x000b1000
    e044:	04000056 	streq	r0, [r0], #-86	; 0x56
    e048:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
    e04c:	300b1800 	andcc	r1, fp, r0, lsl #16
    e050:	04000059 	streq	r0, [r0], #-89	; 0x59
    e054:	0000fdc1 	andeq	pc, r0, r1, asr #27
    e058:	aa0b1c00 	bge	2d5060 <_Min_Stack_Size+0x2d4c60>
    e05c:	04000058 	streq	r0, [r0], #-88	; 0x58
    e060:	00054fc3 	andeq	r4, r5, r3, asr #31
    e064:	670b2000 	strvs	r2, [fp, -r0]
    e068:	04000057 	streq	r0, [r0], #-87	; 0x57
    e06c:	00057ec5 	andeq	r7, r5, r5, asr #29
    e070:	0b0b2400 	bleq	2d7078 <_Min_Stack_Size+0x2d6c78>
    e074:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e078:	0005a2c8 	andeq	sl, r5, r8, asr #5
    e07c:	870b2800 	strhi	r2, [fp, -r0, lsl #16]
    e080:	04000058 	streq	r0, [r0], #-88	; 0x58
    e084:	0005bcc9 	andeq	fp, r5, r9, asr #25
    e088:	5f0e2c00 	svcpl	0x000e2c00
    e08c:	04006275 	streq	r6, [r0], #-629	; 0x275
    e090:	000297cc 	andeq	r9, r2, ip, asr #15
    e094:	5f0e3000 	svcpl	0x000e3000
    e098:	04007075 	streq	r7, [r0], #-117	; 0x75
    e09c:	0002bccd 	andeq	fp, r2, sp, asr #25
    e0a0:	5f0e3800 	svcpl	0x000e3800
    e0a4:	04007275 	streq	r7, [r0], #-629	; 0x275
    e0a8:	00001dce 	andeq	r1, r0, lr, asr #27
    e0ac:	890b3c00 	stmdbhi	fp, {sl, fp, ip, sp}
    e0b0:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e0b4:	0005c2d1 	ldrdeq	ip, [r5], -r1
    e0b8:	ce0b4000 	cdpgt	0, 0, cr4, cr11, cr0, {0}
    e0bc:	04000057 	streq	r0, [r0], #-87	; 0x57
    e0c0:	0005d2d2 	ldrdeq	sp, [r5], -r2
    e0c4:	5f0e4300 	svcpl	0x000e4300
    e0c8:	0400626c 	streq	r6, [r0], #-620	; 0x26c
    e0cc:	000297d5 	ldrdeq	r9, [r2], -r5
    e0d0:	6d0b4400 	cfstrsvs	mvf4, [fp, #-0]
    e0d4:	04000058 	streq	r0, [r0], #-88	; 0x58
    e0d8:	00001dd8 	ldrdeq	r1, [r0], -r8
    e0dc:	360b4c00 	strcc	r4, [fp], -r0, lsl #24
    e0e0:	04000057 	streq	r0, [r0], #-87	; 0x57
    e0e4:	00006ed9 	ldrdeq	r6, [r0], -r9
    e0e8:	b50b5000 	strlt	r5, [fp, #-0]
    e0ec:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e0f0:	00040adc 	ldrdeq	r0, [r4], -ip
    e0f4:	4d0b5400 	cfstrsmi	mvf5, [fp, #-0]
    e0f8:	04000058 	streq	r0, [r0], #-88	; 0x58
    e0fc:	0000f2e0 	andeq	pc, r0, r0, ror #5
    e100:	2c0b5800 	stccs	8, cr5, [fp], {-0}
    e104:	04000058 	streq	r0, [r0], #-88	; 0x58
    e108:	0000e7e2 	andeq	lr, r0, r2, ror #15
    e10c:	830b5c00 	movwhi	r5, #48128	; 0xbc00
    e110:	04000056 	streq	r0, [r0], #-86	; 0x56
    e114:	00001de3 	andeq	r1, r0, r3, ror #27
    e118:	13006400 	movwne	r6, #1024	; 0x400
    e11c:	0000001d 	andeq	r0, r0, sp, lsl r0
    e120:	0000040a 	andeq	r0, r0, sl, lsl #8
    e124:	00040a14 	andeq	r0, r4, r4, lsl sl
    e128:	00fd1400 	rscseq	r1, sp, r0, lsl #8
    e12c:	42140000 	andsmi	r0, r4, #0
    e130:	14000005 	strne	r0, [r0], #-5
    e134:	0000001d 	andeq	r0, r0, sp, lsl r0
    e138:	10040f00 	andne	r0, r4, r0, lsl #30
    e13c:	15000004 	strne	r0, [r0, #-4]
    e140:	00005a73 	andeq	r5, r0, r3, ror sl
    e144:	39040428 	stmdbcc	r4, {r3, r5, sl}
    e148:	00054202 	andeq	r4, r5, r2, lsl #4
    e14c:	527b1600 	rsbspl	r1, fp, #0, 12
    e150:	3b040000 	blcc	10e158 <_Min_Stack_Size+0x10dd58>
    e154:	00001d02 	andeq	r1, r0, r2, lsl #26
    e158:	5c160000 	ldcpl	0, cr0, [r6], {-0}
    e15c:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e160:	06290240 	strteq	r0, [r9], -r0, asr #4
    e164:	16040000 	strne	r0, [r4], -r0
    e168:	000057ab 	andeq	r5, r0, fp, lsr #15
    e16c:	29024004 	stmdbcs	r2, {r2, lr}
    e170:	08000006 	stmdaeq	r0, {r1, r2}
    e174:	0058bc16 	subseq	fp, r8, r6, lsl ip
    e178:	02400400 	subeq	r0, r0, #0, 8
    e17c:	00000629 	andeq	r0, r0, r9, lsr #12
    e180:	5a27160c 	bpl	9d39b8 <_Min_Stack_Size+0x9d35b8>
    e184:	42040000 	andmi	r0, r4, #0
    e188:	00001d02 	andeq	r1, r0, r2, lsl #26
    e18c:	bb161000 	bllt	592194 <_Min_Stack_Size+0x591d94>
    e190:	04000057 	streq	r0, [r0], #-87	; 0x57
    e194:	080b0243 	stmdaeq	fp, {r0, r1, r6, r9}
    e198:	16140000 	ldrne	r0, [r4], -r0
    e19c:	00005995 	muleq	r0, r5, r9
    e1a0:	1d024504 	cfstr32ne	mvfx4, [r2, #-16]
    e1a4:	30000000 	andcc	r0, r0, r0
    e1a8:	005a6316 	subseq	r6, sl, r6, lsl r3
    e1ac:	02460400 	subeq	r0, r6, #0, 8
    e1b0:	00000573 	andeq	r0, r0, r3, ror r5
    e1b4:	56781634 			; <UNDEFINED> instruction: 0x56781634
    e1b8:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    e1bc:	00001d02 	andeq	r1, r0, r2, lsl #26
    e1c0:	af163800 	svcge	0x00163800
    e1c4:	04000059 	streq	r0, [r0], #-89	; 0x59
    e1c8:	0826024a 	stmdaeq	r6!, {r1, r3, r6, r9}
    e1cc:	163c0000 	ldrtne	r0, [ip], -r0
    e1d0:	00005a11 	andeq	r5, r0, r1, lsl sl
    e1d4:	5d024d04 	stcpl	13, cr4, [r2, #-16]
    e1d8:	40000001 	andmi	r0, r0, r1
    e1dc:	00572c16 	subseq	r2, r7, r6, lsl ip
    e1e0:	024e0400 	subeq	r0, lr, #0, 8
    e1e4:	0000001d 	andeq	r0, r0, sp, lsl r0
    e1e8:	58b71644 	ldmpl	r7!, {r2, r6, r9, sl, ip}
    e1ec:	4f040000 	svcmi	0x00040000
    e1f0:	00015d02 	andeq	r5, r1, r2, lsl #26
    e1f4:	1d164800 	ldcne	8, cr4, [r6, #-0]
    e1f8:	04000058 	streq	r0, [r0], #-88	; 0x58
    e1fc:	082c0250 	stmdaeq	ip!, {r4, r6, r9}
    e200:	164c0000 	strbne	r0, [ip], -r0
    e204:	000057c6 	andeq	r5, r0, r6, asr #15
    e208:	1d025304 	stcne	3, cr5, [r2, #-16]
    e20c:	50000000 	andpl	r0, r0, r0
    e210:	00592816 	subseq	r2, r9, r6, lsl r8
    e214:	02540400 	subseq	r0, r4, #0, 8
    e218:	00000542 	andeq	r0, r0, r2, asr #10
    e21c:	5aaa1654 	bpl	fea93b74 <_estack+0xdea63b74>
    e220:	77040000 	strvc	r0, [r4, -r0]
    e224:	0007e902 	andeq	lr, r7, r2, lsl #18
    e228:	b3175800 	tstlt	r7, #0, 16
    e22c:	04000057 	streq	r0, [r0], #-87	; 0x57
    e230:	027a027b 	rsbseq	r0, sl, #-1342177273	; 0xb0000007
    e234:	01480000 	mrseq	r0, (UNDEF: 72)
    e238:	00586417 	subseq	r6, r8, r7, lsl r4
    e23c:	027c0400 	rsbseq	r0, ip, #0, 8
    e240:	0000023c 	andeq	r0, r0, ip, lsr r2
    e244:	0a17014c 	beq	5ce77c <_Min_Stack_Size+0x5ce37c>
    e248:	04000058 	streq	r0, [r0], #-88	; 0x58
    e24c:	083d0280 	ldmdaeq	sp!, {r7, r9}
    e250:	02dc0000 	sbcseq	r0, ip, #0
    e254:	00590317 	subseq	r0, r9, r7, lsl r3
    e258:	02850400 	addeq	r0, r5, #0, 8
    e25c:	000005ee 	andeq	r0, r0, lr, ror #11
    e260:	3e1702e0 	cdpcc	2, 1, cr0, cr7, cr0, {7}
    e264:	04000057 	streq	r0, [r0], #-87	; 0x57
    e268:	08490286 	stmdaeq	r9, {r1, r2, r7, r9}^
    e26c:	02ec0000 	rsceq	r0, ip, #0
    e270:	48040f00 	stmdami	r4, {r8, r9, sl, fp}
    e274:	03000005 	movweq	r0, #5
    e278:	01540801 	cmpeq	r4, r1, lsl #16
    e27c:	040f0000 	streq	r0, [pc], #-0	; e284 <_Min_Stack_Size+0xde84>
    e280:	000003ec 	andeq	r0, r0, ip, ror #7
    e284:	00001d13 	andeq	r1, r0, r3, lsl sp
    e288:	00057300 	andeq	r7, r5, r0, lsl #6
    e28c:	040a1400 	streq	r1, [sl], #-1024	; 0x400
    e290:	fd140000 	ldc2	0, cr0, [r4, #-0]
    e294:	14000000 	strne	r0, [r0], #-0
    e298:	00000573 	andeq	r0, r0, r3, ror r5
    e29c:	00001d14 	andeq	r1, r0, r4, lsl sp
    e2a0:	040f0000 	streq	r0, [pc], #-0	; e2a8 <_Min_Stack_Size+0xdea8>
    e2a4:	00000579 	andeq	r0, r0, r9, ror r5
    e2a8:	00054818 	andeq	r4, r5, r8, lsl r8
    e2ac:	55040f00 	strpl	r0, [r4, #-3840]	; 0xf00
    e2b0:	13000005 	movwne	r0, #5
    e2b4:	00000079 	andeq	r0, r0, r9, ror r0
    e2b8:	000005a2 	andeq	r0, r0, r2, lsr #11
    e2bc:	00040a14 	andeq	r0, r4, r4, lsl sl
    e2c0:	00fd1400 	rscseq	r1, sp, r0, lsl #8
    e2c4:	79140000 	ldmdbvc	r4, {}	; <UNPREDICTABLE>
    e2c8:	14000000 	strne	r0, [r0], #-0
    e2cc:	0000001d 	andeq	r0, r0, sp, lsl r0
    e2d0:	84040f00 	strhi	r0, [r4], #-3840	; 0xf00
    e2d4:	13000005 	movwne	r0, #5
    e2d8:	0000001d 	andeq	r0, r0, sp, lsl r0
    e2dc:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    e2e0:	00040a14 	andeq	r0, r4, r4, lsl sl
    e2e4:	00fd1400 	rscseq	r1, sp, r0, lsl #8
    e2e8:	0f000000 	svceq	0x00000000
    e2ec:	0005a804 	andeq	sl, r5, r4, lsl #16
    e2f0:	00320800 	eorseq	r0, r2, r0, lsl #16
    e2f4:	05d20000 	ldrbeq	r0, [r2]
    e2f8:	bf090000 	svclt	0x00090000
    e2fc:	02000000 	andeq	r0, r0, #0
    e300:	00320800 	eorseq	r0, r2, r0, lsl #16
    e304:	05e20000 	strbeq	r0, [r2, #0]!
    e308:	bf090000 	svclt	0x00090000
    e30c:	00000000 	andeq	r0, r0, r0
    e310:	57ed0500 	strbpl	r0, [sp, r0, lsl #10]!
    e314:	1d040000 	stcne	0, cr0, [r4, #-0]
    e318:	0002c201 	andeq	ip, r2, r1, lsl #4
    e31c:	578f1900 	strpl	r1, [pc, r0, lsl #18]
    e320:	040c0000 	streq	r0, [ip], #-0
    e324:	06230121 	strteq	r0, [r3], -r1, lsr #2
    e328:	56160000 	ldrpl	r0, [r6], -r0
    e32c:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e330:	06230123 	strteq	r0, [r3], -r3, lsr #2
    e334:	16000000 	strne	r0, [r0], -r0
    e338:	000057e6 	andeq	r5, r0, r6, ror #15
    e33c:	1d012404 	cfstrsne	mvf2, [r1, #-16]
    e340:	04000000 	streq	r0, [r0], #-0
    e344:	00584716 	subseq	r4, r8, r6, lsl r7
    e348:	01250400 	teqeq	r5, r0, lsl #8
    e34c:	00000629 	andeq	r0, r0, r9, lsr #12
    e350:	040f0008 	streq	r0, [pc], #-8	; e358 <_Min_Stack_Size+0xdf58>
    e354:	000005ee 	andeq	r0, r0, lr, ror #11
    e358:	05e2040f 	strbeq	r0, [r2, #1039]!	; 0x40f
    e35c:	f1190000 			; <UNDEFINED> instruction: 0xf1190000
    e360:	0e000059 	mcreq	0, 0, r0, cr0, cr9, {2}
    e364:	64013d04 	strvs	r3, [r1], #-3332	; 0xd04
    e368:	16000006 	strne	r0, [r0], -r6
    e36c:	000059eb 	andeq	r5, r0, fp, ror #19
    e370:	64013e04 	strvs	r3, [r1], #-3588	; 0xe04
    e374:	00000006 	andeq	r0, r0, r6
    e378:	00585316 	subseq	r5, r8, r6, lsl r3
    e37c:	013f0400 	teqeq	pc, r0, lsl #8
    e380:	00000664 	andeq	r0, r0, r4, ror #12
    e384:	5a221606 	bpl	893ba4 <_Min_Stack_Size+0x8937a4>
    e388:	40040000 	andmi	r0, r4, r0
    e38c:	00004001 	andeq	r4, r0, r1
    e390:	08000c00 	stmdaeq	r0, {sl, fp}
    e394:	00000040 	andeq	r0, r0, r0, asr #32
    e398:	00000674 	andeq	r0, r0, r4, ror r6
    e39c:	0000bf09 	andeq	fp, r0, r9, lsl #30
    e3a0:	1a000200 	bne	eba8 <_Min_Stack_Size+0xe7a8>
    e3a4:	025804d0 	subseq	r0, r8, #208, 8	; 0xd0000000
    e3a8:	00000775 	andeq	r0, r0, r5, ror r7
    e3ac:	00595316 	subseq	r5, r9, r6, lsl r3
    e3b0:	025a0400 	subseq	r0, sl, #0, 8
    e3b4:	00000024 	andeq	r0, r0, r4, lsr #32
    e3b8:	59de1600 	ldmibpl	lr, {r9, sl, ip}^
    e3bc:	5b040000 	blpl	10e3c4 <_Min_Stack_Size+0x10dfc4>
    e3c0:	00054202 	andeq	r4, r5, r2, lsl #4
    e3c4:	95160400 	ldrls	r0, [r6, #-1024]	; 0x400
    e3c8:	0400005a 	streq	r0, [r0], #-90	; 0x5a
    e3cc:	0775025c 			; <UNDEFINED> instruction: 0x0775025c
    e3d0:	16080000 	strne	r0, [r8], -r0
    e3d4:	0000576e 	andeq	r5, r0, lr, ror #14
    e3d8:	73025d04 	movwvc	r5, #11524	; 0x2d04
    e3dc:	24000001 	strcs	r0, [r0], #-1
    e3e0:	00594416 	subseq	r4, r9, r6, lsl r4
    e3e4:	025e0400 	subseq	r0, lr, #0, 8
    e3e8:	0000001d 	andeq	r0, r0, sp, lsl r0
    e3ec:	5a511648 	bpl	1453d14 <_Min_Stack_Size+0x1453914>
    e3f0:	5f040000 	svcpl	0x00040000
    e3f4:	00005c02 	andeq	r5, r0, r2, lsl #24
    e3f8:	a6165000 	ldrge	r5, [r6], -r0
    e3fc:	04000057 	streq	r0, [r0], #-87	; 0x57
    e400:	062f0260 	strteq	r0, [pc], -r0, ror #4
    e404:	16580000 	ldrbne	r0, [r8], -r0
    e408:	0000568b 	andeq	r5, r0, fp, lsl #13
    e40c:	e7026104 	str	r6, [r2, -r4, lsl #2]
    e410:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    e414:	00597216 	subseq	r7, r9, r6, lsl r2
    e418:	02620400 	rsbeq	r0, r2, #0, 8
    e41c:	000000e7 	andeq	r0, r0, r7, ror #1
    e420:	5a311670 	bpl	c53de8 <_Min_Stack_Size+0xc539e8>
    e424:	63040000 	movwvs	r0, #16384	; 0x4000
    e428:	0000e702 	andeq	lr, r0, r2, lsl #14
    e42c:	98167800 	ldmdals	r6, {fp, ip, sp, lr}
    e430:	04000056 	streq	r0, [r0], #-86	; 0x56
    e434:	07850264 	streq	r0, [r5, r4, ror #4]
    e438:	16800000 	strne	r0, [r0], r0
    e43c:	00005743 	andeq	r5, r0, r3, asr #14
    e440:	95026504 	strls	r6, [r2, #-1284]	; 0x504
    e444:	88000007 	stmdahi	r0, {r0, r1, r2}
    e448:	0057f416 	subseq	pc, r7, r6, lsl r4	; <UNPREDICTABLE>
    e44c:	02660400 	rsbeq	r0, r6, #0, 8
    e450:	0000001d 	andeq	r0, r0, sp, lsl r0
    e454:	598716a0 	stmibpl	r7, {r5, r7, r9, sl, ip}
    e458:	67040000 	strvs	r0, [r4, -r0]
    e45c:	0000e702 	andeq	lr, r0, r2, lsl #14
    e460:	1916a400 	ldmdbne	r6, {sl, sp, pc}
    e464:	04000059 	streq	r0, [r0], #-89	; 0x59
    e468:	00e70268 	rsceq	r0, r7, r8, ror #4
    e46c:	16ac0000 	strtne	r0, [ip], r0
    e470:	00005795 	muleq	r0, r5, r7
    e474:	e7026904 	str	r6, [r2, -r4, lsl #18]
    e478:	b4000000 	strlt	r0, [r0], #-0
    e47c:	005a7a16 	subseq	r7, sl, r6, lsl sl
    e480:	026a0400 	rsbeq	r0, sl, #0, 8
    e484:	000000e7 	andeq	r0, r0, r7, ror #1
    e488:	574f16bc 			; <UNDEFINED> instruction: 0x574f16bc
    e48c:	6b040000 	blvs	10e494 <_Min_Stack_Size+0x10e094>
    e490:	0000e702 	andeq	lr, r0, r2, lsl #14
    e494:	fa16c400 	blx	5bf49c <_Min_Stack_Size+0x5bf09c>
    e498:	04000058 	streq	r0, [r0], #-88	; 0x58
    e49c:	001d026c 	andseq	r0, sp, ip, ror #4
    e4a0:	00cc0000 	sbceq	r0, ip, r0
    e4a4:	00054808 	andeq	r4, r5, r8, lsl #16
    e4a8:	00078500 	andeq	r8, r7, r0, lsl #10
    e4ac:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e4b0:	00190000 	andseq	r0, r9, r0
    e4b4:	00054808 	andeq	r4, r5, r8, lsl #16
    e4b8:	00079500 	andeq	r9, r7, r0, lsl #10
    e4bc:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e4c0:	00070000 	andeq	r0, r7, r0
    e4c4:	00054808 	andeq	r4, r5, r8, lsl #16
    e4c8:	0007a500 	andeq	sl, r7, r0, lsl #10
    e4cc:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e4d0:	00170000 	andseq	r0, r7, r0
    e4d4:	7104f01a 	tstvc	r4, sl, lsl r0
    e4d8:	0007c902 	andeq	ip, r7, r2, lsl #18
    e4dc:	58b01600 	ldmpl	r0!, {r9, sl, ip}
    e4e0:	74040000 	strvc	r0, [r4], #-0
    e4e4:	0007c902 	andeq	ip, r7, r2, lsl #18
    e4e8:	14160000 	ldrne	r0, [r6], #-0
    e4ec:	04000058 	streq	r0, [r0], #-88	; 0x58
    e4f0:	07d90275 			; <UNDEFINED> instruction: 0x07d90275
    e4f4:	00780000 	rsbseq	r0, r8, r0
    e4f8:	0002bc08 	andeq	fp, r2, r8, lsl #24
    e4fc:	0007d900 	andeq	sp, r7, r0, lsl #18
    e500:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e504:	001d0000 	andseq	r0, sp, r0
    e508:	00002408 	andeq	r2, r0, r8, lsl #8
    e50c:	0007e900 	andeq	lr, r7, r0, lsl #18
    e510:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e514:	001d0000 	andseq	r0, sp, r0
    e518:	5604f01b 			; <UNDEFINED> instruction: 0x5604f01b
    e51c:	00080b02 	andeq	r0, r8, r2, lsl #22
    e520:	5a731c00 	bpl	1cd5528 <_Min_Stack_Size+0x1cd5128>
    e524:	6d040000 	stcvs	0, cr0, [r4, #-0]
    e528:	00067402 	andeq	r7, r6, r2, lsl #8
    e52c:	596a1c00 	stmdbpl	sl!, {sl, fp, ip}^
    e530:	76040000 	strvc	r0, [r4], -r0
    e534:	0007a502 	andeq	sl, r7, r2, lsl #10
    e538:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    e53c:	1b000005 	blne	e558 <_Min_Stack_Size+0xe158>
    e540:	09000008 	stmdbeq	r0, {r3}
    e544:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    e548:	261d0018 			; <UNDEFINED> instruction: 0x261d0018
    e54c:	14000008 	strne	r0, [r0], #-8
    e550:	0000040a 	andeq	r0, r0, sl, lsl #8
    e554:	1b040f00 	blne	11215c <_Min_Stack_Size+0x111d5c>
    e558:	0f000008 	svceq	0x00000008
    e55c:	00015d04 	andeq	r5, r1, r4, lsl #26
    e560:	083d1d00 	ldmdaeq	sp!, {r8, sl, fp, ip}
    e564:	1d140000 	ldcne	0, cr0, [r4, #-0]
    e568:	00000000 	andeq	r0, r0, r0
    e56c:	0843040f 	stmdaeq	r3, {r0, r1, r2, r3, sl}^
    e570:	040f0000 	streq	r0, [pc], #-0	; e578 <_Min_Stack_Size+0xe178>
    e574:	00000832 	andeq	r0, r0, r2, lsr r8
    e578:	0005e208 	andeq	lr, r5, r8, lsl #4
    e57c:	00085900 	andeq	r5, r8, r0, lsl #18
    e580:	00bf0900 	adcseq	r0, pc, r0, lsl #18
    e584:	00020000 	andeq	r0, r2, r0
    e588:	005aaf1e 	subseq	sl, sl, lr, lsl pc
    e58c:	10170500 	andsne	r0, r7, r0, lsl #10
    e590:	05000004 	streq	r0, [r0, #-4]
    e594:	00006803 	andeq	r6, r0, r3, lsl #16
    e598:	5b571f20 	blpl	15d6220 <_Min_Stack_Size+0x15d5e20>
    e59c:	fa040000 	blx	10e5a4 <_Min_Stack_Size+0x10e1a4>
    e5a0:	00040a02 	andeq	r0, r4, r2, lsl #20
    e5a4:	90030500 	andls	r0, r3, r0, lsl #10
    e5a8:	1f200004 	svcne	0x00200004
    e5ac:	00005b50 	andeq	r5, r0, r0, asr fp
    e5b0:	8e02fb04 	vmlahi.f64	d15, d2, d4
    e5b4:	05000008 	streq	r0, [r0, #-8]
    e5b8:	00f3f403 	rscseq	pc, r3, r3, lsl #8
    e5bc:	040a1808 	streq	r1, [sl], #-2056	; 0x808
    e5c0:	Address 0x000000000000e5c0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <_Min_Stack_Size+0x2bfcac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <_Min_Stack_Size+0x380828>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19
      2c:	0b0b0024 	bleq	2c00c4 <_Min_Stack_Size+0x2bfcc4>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	012e0600 	teqeq	lr, r0, lsl #12
      40:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      44:	0b3b0b3a 	bleq	ec2d34 <_Min_Stack_Size+0xec2934>
      48:	01111349 	tsteq	r1, r9, asr #6
      4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      50:	01194296 			; <UNDEFINED> instruction: 0x01194296
      54:	07000013 	smladeq	r0, r3, r0, r0
      58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      5c:	0b3b0b3a 	bleq	ec2d4c <_Min_Stack_Size+0xec294c>
      60:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      64:	0b080000 	bleq	20006c <_Min_Stack_Size+0x1ffc6c>
      68:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
      6c:	09000006 	stmdbeq	r0, {r1, r2}
      70:	08030034 	stmdaeq	r3, {r2, r4, r5}
      74:	0b3b0b3a 	bleq	ec2d64 <_Min_Stack_Size+0xec2964>
      78:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      7c:	010a0000 	mrseq	r0, (UNDEF: 10)
      80:	01134901 	tsteq	r3, r1, lsl #18
      84:	0b000013 	bleq	d8 <_Min_Heap_Size+0xd8>
      88:	13490021 	movtne	r0, #36897	; 0x9021
      8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
      90:	0300340c 	movweq	r3, #1036	; 0x40c
      94:	3b0b3a0e 	blcc	2ce8d4 <_Min_Stack_Size+0x2ce4d4>
      98:	3f134905 	svccc	0x00134905
      9c:	00193c19 	andseq	r3, r9, r9, lsl ip
      a0:	11010000 	mrsne	r0, (UNDEF: 1)
      a4:	130e2501 	movwne	r2, #58625	; 0xe501
      a8:	1b0e030b 	blne	380cdc <_Min_Stack_Size+0x3808dc>
      ac:	1117550e 	tstne	r7, lr, lsl #10
      b0:	00171001 	andseq	r1, r7, r1
      b4:	00240200 	eoreq	r0, r4, r0, lsl #4
      b8:	0b3e0b0b 	bleq	f82cec <_Min_Stack_Size+0xf828ec>
      bc:	00000e03 	andeq	r0, r0, r3, lsl #28
      c0:	03001603 	movweq	r1, #1539	; 0x603
      c4:	3b0b3a0e 	blcc	2ce904 <_Min_Stack_Size+0x2ce504>
      c8:	0013490b 	andseq	r4, r3, fp, lsl #18
      cc:	00240400 	eoreq	r0, r4, r0, lsl #8
      d0:	0b3e0b0b 	bleq	f82d04 <_Min_Stack_Size+0xf82904>
      d4:	00000803 	andeq	r0, r0, r3, lsl #16
      d8:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
      e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      e4:	0b3a0e03 	bleq	e838f8 <_Min_Stack_Size+0xe834f8>
      e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      ec:	01111349 	tsteq	r1, r9, asr #6
      f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
      f8:	07000013 	smladeq	r0, r3, r0, r0
      fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     100:	0b3b0b3a 	bleq	ec2df0 <_Min_Stack_Size+0xec29f0>
     104:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     108:	05080000 	streq	r0, [r8, #-0]
     10c:	3a080300 	bcc	200d14 <_Min_Stack_Size+0x200914>
     110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     114:	00180213 	andseq	r0, r8, r3, lsl r2
     118:	012e0900 	teqeq	lr, r0, lsl #18
     11c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     120:	0b3b0b3a 	bleq	ec2e10 <_Min_Stack_Size+0xec2a10>
     124:	01111927 	tsteq	r1, r7, lsr #18
     128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     12c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     130:	0a000013 	beq	184 <_Min_Heap_Size+0x184>
     134:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <_Min_Stack_Size+0xec2a28>
     13c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     140:	0f0b0000 	svceq	0x000b0000
     144:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     148:	0c000013 	stceq	0, cr0, [r0], {19}
     14c:	13490101 	movtne	r0, #37121	; 0x9101
     150:	00001301 	andeq	r1, r0, r1, lsl #6
     154:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     158:	000b2f13 	andeq	r2, fp, r3, lsl pc
     15c:	00340e00 	eorseq	r0, r4, r0, lsl #28
     160:	0b3a0e03 	bleq	e83974 <_Min_Stack_Size+0xe83574>
     164:	1349053b 	movtne	r0, #38203	; 0x953b
     168:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     16c:	01000000 	mrseq	r0, (UNDEF: 0)
     170:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     174:	0e030b13 	vmoveq.32	d3[0], r0
     178:	17550e1b 	smmlane	r5, fp, lr, r0
     17c:	17100111 			; <UNDEFINED> instruction: 0x17100111
     180:	24020000 	strcs	r0, [r2], #-0
     184:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     188:	000e030b 	andeq	r0, lr, fp, lsl #6
     18c:	00160300 	andseq	r0, r6, r0, lsl #6
     190:	0b3a0e03 	bleq	e839a4 <_Min_Stack_Size+0xe835a4>
     194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     198:	24040000 	strcs	r0, [r4], #-0
     19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
     1a4:	00350500 	eorseq	r0, r5, r0, lsl #10
     1a8:	00001349 	andeq	r1, r0, r9, asr #6
     1ac:	0b011306 	bleq	44dcc <_Min_Stack_Size+0x449cc>
     1b0:	3b0b3a0b 	blcc	2ce9e4 <_Min_Stack_Size+0x2ce5e4>
     1b4:	0013010b 	andseq	r0, r3, fp, lsl #2
     1b8:	000d0700 	andeq	r0, sp, r0, lsl #14
     1bc:	0b3a0e03 	bleq	e839d0 <_Min_Stack_Size+0xe835d0>
     1c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1c4:	00000b38 	andeq	r0, r0, r8, lsr fp
     1c8:	3f012e08 	svccc	0x00012e08
     1cc:	3a0e0319 	bcc	380e38 <_Min_Stack_Size+0x380a38>
     1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1d8:	96184006 	ldrls	r4, [r8], -r6
     1dc:	13011942 	movwne	r1, #6466	; 0x1942
     1e0:	34090000 	strcc	r0, [r9], #-0
     1e4:	3a0e0300 	bcc	380dec <_Min_Stack_Size+0x3809ec>
     1e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1ec:	00180213 	andseq	r0, r8, r3, lsl r2
     1f0:	00050a00 	andeq	r0, r5, r0, lsl #20
     1f4:	0b3a0e03 	bleq	e83a08 <_Min_Stack_Size+0xe83608>
     1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1fc:	00001802 	andeq	r1, r0, r2, lsl #16
     200:	11010b0b 	tstne	r1, fp, lsl #22
     204:	01061201 	tsteq	r6, r1, lsl #4
     208:	0c000013 	stceq	0, cr0, [r0], {19}
     20c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     210:	0b3b0b3a 	bleq	ec2f00 <_Min_Stack_Size+0xec2b00>
     214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     218:	0b0d0000 	bleq	340220 <_Min_Stack_Size+0x33fe20>
     21c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     220:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     224:	0b0b000f 	bleq	2c0268 <_Min_Stack_Size+0x2bfe68>
     228:	00001349 	andeq	r1, r0, r9, asr #6
     22c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     230:	00130113 	andseq	r0, r3, r3, lsl r1
     234:	00211000 	eoreq	r1, r1, r0
     238:	0b2f1349 	bleq	bc4f64 <_Min_Stack_Size+0xbc4b64>
     23c:	34110000 	ldrcc	r0, [r1], #-0
     240:	3a0e0300 	bcc	380e48 <_Min_Stack_Size+0x380a48>
     244:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     248:	3c193f13 	ldccc	15, cr3, [r9], {19}
     24c:	00000019 	andeq	r0, r0, r9, lsl r0
     250:	10001101 	andne	r1, r0, r1, lsl #2
     254:	03065506 	movweq	r5, #25862	; 0x6506
     258:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
     25c:	00051308 	andeq	r1, r5, r8, lsl #6
     260:	11010000 	mrsne	r0, (UNDEF: 1)
     264:	130e2501 	movwne	r2, #58625	; 0xe501
     268:	1b0e030b 	blne	380e9c <_Min_Stack_Size+0x380a9c>
     26c:	1117550e 	tstne	r7, lr, lsl #10
     270:	00171001 	andseq	r1, r7, r1
     274:	00240200 	eoreq	r0, r4, r0, lsl #4
     278:	0b3e0b0b 	bleq	f82eac <_Min_Stack_Size+0xf82aac>
     27c:	00000e03 	andeq	r0, r0, r3, lsl #28
     280:	03001603 	movweq	r1, #1539	; 0x603
     284:	3b0b3a0e 	blcc	2ceac4 <_Min_Stack_Size+0x2ce6c4>
     288:	0013490b 	andseq	r4, r3, fp, lsl #18
     28c:	00240400 	eoreq	r0, r4, r0, lsl #8
     290:	0b3e0b0b 	bleq	f82ec4 <_Min_Stack_Size+0xf82ac4>
     294:	00000803 	andeq	r0, r0, r3, lsl #16
     298:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     29c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     2a0:	0b0b0113 	bleq	2c06f4 <_Min_Stack_Size+0x2c02f4>
     2a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2a8:	00001301 	andeq	r1, r0, r1, lsl #6
     2ac:	03000d07 	movweq	r0, #3335	; 0xd07
     2b0:	3b0b3a0e 	blcc	2ceaf0 <_Min_Stack_Size+0x2ce6f0>
     2b4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     2b8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     2bc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     2c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2c4:	0b381349 	bleq	e04ff0 <_Min_Stack_Size+0xe04bf0>
     2c8:	26090000 	strcs	r0, [r9], -r0
     2cc:	00134900 	andseq	r4, r3, r0, lsl #18
     2d0:	01010a00 	tsteq	r1, r0, lsl #20
     2d4:	13011349 	movwne	r1, #4937	; 0x1349
     2d8:	210b0000 	mrscs	r0, (UNDEF: 11)
     2dc:	2f134900 	svccs	0x00134900
     2e0:	0c00000b 	stceq	0, cr0, [r0], {11}
     2e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     2e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2ec:	00001349 	andeq	r1, r0, r9, asr #6
     2f0:	0b01040d 	bleq	4132c <_Min_Stack_Size+0x40f2c>
     2f4:	3b0b3a0b 	blcc	2ceb28 <_Min_Stack_Size+0x2ce728>
     2f8:	00130105 	andseq	r0, r3, r5, lsl #2
     2fc:	00280e00 	eoreq	r0, r8, r0, lsl #28
     300:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     304:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
     308:	1c080300 	stcne	3, cr0, [r8], {-0}
     30c:	1000000d 	andne	r0, r0, sp
     310:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     314:	0b3a0e03 	bleq	e83b28 <_Min_Stack_Size+0xe83728>
     318:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     320:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     324:	11000019 	tstne	r0, r9, lsl r0
     328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <_Min_Stack_Size+0xe83740>
     330:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     334:	06120111 			; <UNDEFINED> instruction: 0x06120111
     338:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     33c:	00130119 	andseq	r0, r3, r9, lsl r1
     340:	00341200 	eorseq	r1, r4, r0, lsl #4
     344:	0b3a0803 	bleq	e82358 <_Min_Stack_Size+0xe81f58>
     348:	1349053b 	movtne	r0, #38203	; 0x953b
     34c:	00001802 	andeq	r1, r0, r2, lsl #16
     350:	03003413 	movweq	r3, #1043	; 0x413
     354:	3b0b3a0e 	blcc	2ceb94 <_Min_Stack_Size+0x2ce794>
     358:	02134905 	andseq	r4, r3, #81920	; 0x14000
     35c:	14000018 	strne	r0, [r0], #-24
     360:	0e03012e 	adfeqsp	f0, f3, #0.5
     364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     368:	01111927 	tsteq	r1, r7, lsr #18
     36c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     370:	01194297 			; <UNDEFINED> instruction: 0x01194297
     374:	15000013 	strne	r0, [r0, #-19]
     378:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     37c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     380:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     384:	0000193c 	andeq	r1, r0, ip, lsr r9
     388:	03003416 	movweq	r3, #1046	; 0x416
     38c:	3b0b3a0e 	blcc	2cebcc <_Min_Stack_Size+0x2ce7cc>
     390:	3f13490b 	svccc	0x0013490b
     394:	00180219 	andseq	r0, r8, r9, lsl r2
     398:	11010000 	mrsne	r0, (UNDEF: 1)
     39c:	130e2501 	movwne	r2, #58625	; 0xe501
     3a0:	1b0e030b 	blne	380fd4 <_Min_Stack_Size+0x380bd4>
     3a4:	1117550e 	tstne	r7, lr, lsl #10
     3a8:	00171001 	andseq	r1, r7, r1
     3ac:	00240200 	eoreq	r0, r4, r0, lsl #4
     3b0:	0b3e0b0b 	bleq	f82fe4 <_Min_Stack_Size+0xf82be4>
     3b4:	00000e03 	andeq	r0, r0, r3, lsl #28
     3b8:	03001603 	movweq	r1, #1539	; 0x603
     3bc:	3b0b3a0e 	blcc	2cebfc <_Min_Stack_Size+0x2ce7fc>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00240400 	eoreq	r0, r4, r0, lsl #8
     3c8:	0b3e0b0b 	bleq	f82ffc <_Min_Stack_Size+0xf82bfc>
     3cc:	00000803 	andeq	r0, r0, r3, lsl #16
     3d0:	0b011305 	bleq	44fec <_Min_Stack_Size+0x44bec>
     3d4:	3b0b3a05 	blcc	2cebf0 <_Min_Stack_Size+0x2ce7f0>
     3d8:	00130105 	andseq	r0, r3, r5, lsl #2
     3dc:	000d0600 	andeq	r0, sp, r0, lsl #12
     3e0:	0b3a0e03 	bleq	e83bf4 <_Min_Stack_Size+0xe837f4>
     3e4:	1349053b 	movtne	r0, #38203	; 0x953b
     3e8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3ec:	03000d07 	movweq	r0, #3335	; 0xd07
     3f0:	3b0b3a0e 	blcc	2cec30 <_Min_Stack_Size+0x2ce830>
     3f4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     3f8:	08000005 	stmdaeq	r0, {r0, r2}
     3fc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     400:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     404:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     408:	01090000 	mrseq	r0, (UNDEF: 9)
     40c:	01134901 	tsteq	r3, r1, lsl #18
     410:	0a000013 	beq	464 <_Min_Stack_Size+0x64>
     414:	13490021 	movtne	r0, #36897	; 0x9021
     418:	00000b2f 	andeq	r0, r0, pc, lsr #22
     41c:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     420:	0c000013 	stceq	0, cr0, [r0], {19}
     424:	13490021 	movtne	r0, #36897	; 0x9021
     428:	0000052f 	andeq	r0, r0, pc, lsr #10
     42c:	0300160d 	movweq	r1, #1549	; 0x60d
     430:	3b0b3a0e 	blcc	2cec70 <_Min_Stack_Size+0x2ce870>
     434:	00134905 	andseq	r4, r3, r5, lsl #18
     438:	01130e00 	tsteq	r3, r0, lsl #28
     43c:	0b3a0b0b 	bleq	e83070 <_Min_Stack_Size+0xe82c70>
     440:	1301053b 	movwne	r0, #5435	; 0x153b
     444:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 44c <_Min_Stack_Size+0x4c>
     448:	3a080300 	bcc	201050 <_Min_Stack_Size+0x200c50>
     44c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	000b3813 	andeq	r3, fp, r3, lsl r8
     454:	00261000 	eoreq	r1, r6, r0
     458:	00001349 	andeq	r1, r0, r9, asr #6
     45c:	0b010411 	bleq	414a8 <_Min_Stack_Size+0x410a8>
     460:	3b0b3a0b 	blcc	2cec94 <_Min_Stack_Size+0x2ce894>
     464:	00130105 	andseq	r0, r3, r5, lsl #2
     468:	00281200 	eoreq	r1, r8, r0, lsl #4
     46c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     470:	13130000 	tstne	r3, #0
     474:	3a0b0b01 	bcc	2c3080 <_Min_Stack_Size+0x2c2c80>
     478:	010b3b0b 	tsteq	fp, fp, lsl #22
     47c:	14000013 	strne	r0, [r0], #-19
     480:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     484:	0b3b0b3a 	bleq	ec3174 <_Min_Stack_Size+0xec2d74>
     488:	0b381349 	bleq	e051b4 <_Min_Stack_Size+0xe04db4>
     48c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     490:	03193f01 	tsteq	r9, #1, 30
     494:	3b0b3a0e 	blcc	2cecd4 <_Min_Stack_Size+0x2ce8d4>
     498:	1119270b 	tstne	r9, fp, lsl #14
     49c:	40061201 	andmi	r1, r6, r1, lsl #4
     4a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4a4:	00001301 	andeq	r1, r0, r1, lsl #6
     4a8:	03000516 	movweq	r0, #1302	; 0x516
     4ac:	3b0b3a0e 	blcc	2cecec <_Min_Stack_Size+0x2ce8ec>
     4b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4b4:	17000018 	smladne	r0, r8, r0, r0
     4b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4bc:	0b3b0b3a 	bleq	ec31ac <_Min_Stack_Size+0xec2dac>
     4c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     4c4:	0f180000 	svceq	0x00180000
     4c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     4cc:	19000013 	stmdbne	r0, {r0, r1, r4}
     4d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     4d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     4dc:	0000193c 	andeq	r1, r0, ip, lsr r9
     4e0:	01110100 	tsteq	r1, r0, lsl #2
     4e4:	0b130e25 	bleq	4c3d80 <_Min_Stack_Size+0x4c3980>
     4e8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     4ec:	01111755 	tsteq	r1, r5, asr r7
     4f0:	00001710 	andeq	r1, r0, r0, lsl r7
     4f4:	0b002402 	bleq	9504 <_Min_Stack_Size+0x9104>
     4f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4fc:	0300000e 	movweq	r0, #14
     500:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     504:	0b3b0b3a 	bleq	ec31f4 <_Min_Stack_Size+0xec2df4>
     508:	00001349 	andeq	r1, r0, r9, asr #6
     50c:	0b002404 	bleq	9524 <_Min_Stack_Size+0x9124>
     510:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     514:	05000008 	streq	r0, [r0, #-8]
     518:	13490035 	movtne	r0, #36917	; 0x9035
     51c:	01060000 	mrseq	r0, (UNDEF: 6)
     520:	01134901 	tsteq	r3, r1, lsl #18
     524:	07000013 	smladeq	r0, r3, r0, r0
     528:	13490021 	movtne	r0, #36897	; 0x9021
     52c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     530:	0b010408 	bleq	41558 <_Min_Stack_Size+0x41158>
     534:	3b0b3a0b 	blcc	2ced68 <_Min_Stack_Size+0x2ce968>
     538:	00130105 	andseq	r0, r3, r5, lsl #2
     53c:	00280900 	eoreq	r0, r8, r0, lsl #18
     540:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     544:	130a0000 	movwne	r0, #40960	; 0xa000
     548:	3a0b0b01 	bcc	2c3154 <_Min_Stack_Size+0x2c2d54>
     54c:	01053b0b 	tsteq	r5, fp, lsl #22
     550:	0b000013 	bleq	5a4 <_Min_Stack_Size+0x1a4>
     554:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     558:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     55c:	0b381349 	bleq	e05288 <_Min_Stack_Size+0xe04e88>
     560:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     564:	3a080300 	bcc	20116c <_Min_Stack_Size+0x200d6c>
     568:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     56c:	000b3813 	andeq	r3, fp, r3, lsl r8
     570:	00160d00 	andseq	r0, r6, r0, lsl #26
     574:	0b3a0e03 	bleq	e83d88 <_Min_Stack_Size+0xe83988>
     578:	1349053b 	movtne	r0, #38203	; 0x953b
     57c:	040e0000 	streq	r0, [lr], #-0
     580:	3a0b0b01 	bcc	2c318c <_Min_Stack_Size+0x2c2d8c>
     584:	010b3b0b 	tsteq	fp, fp, lsl #22
     588:	0f000013 	svceq	0x00000013
     58c:	0b0b0113 	bleq	2c09e0 <_Min_Stack_Size+0x2c05e0>
     590:	0b3b0b3a 	bleq	ec3280 <_Min_Stack_Size+0xec2e80>
     594:	00001301 	andeq	r1, r0, r1, lsl #6
     598:	03000d10 	movweq	r0, #3344	; 0xd10
     59c:	3b0b3a0e 	blcc	2ceddc <_Min_Stack_Size+0x2ce9dc>
     5a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     5a4:	1100000b 	tstne	r0, fp
     5a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5ac:	0b3a0e03 	bleq	e83dc0 <_Min_Stack_Size+0xe839c0>
     5b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     5bc:	00130119 	andseq	r0, r3, r9, lsl r1
     5c0:	00051200 	andeq	r1, r5, r0, lsl #4
     5c4:	0b3a0e03 	bleq	e83dd8 <_Min_Stack_Size+0xe839d8>
     5c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5cc:	00001802 	andeq	r1, r0, r2, lsl #16
     5d0:	0b000f13 	bleq	4224 <_Min_Stack_Size+0x3e24>
     5d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5d8:	012e1400 	teqeq	lr, r0, lsl #8
     5dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5e0:	0b3b0b3a 	bleq	ec32d0 <_Min_Stack_Size+0xec2ed0>
     5e4:	01111927 	tsteq	r1, r7, lsr #18
     5e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5f0:	15000013 	strne	r0, [r0, #-19]
     5f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5f8:	0b3b0b3a 	bleq	ec32e8 <_Min_Stack_Size+0xec2ee8>
     5fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     600:	34160000 	ldrcc	r0, [r6], #-0
     604:	3a080300 	bcc	20120c <_Min_Stack_Size+0x200e0c>
     608:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     60c:	00180213 	andseq	r0, r8, r3, lsl r2
     610:	012e1700 	teqeq	lr, r0, lsl #14
     614:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     618:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     61c:	01111927 	tsteq	r1, r7, lsr #18
     620:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     624:	01194297 			; <UNDEFINED> instruction: 0x01194297
     628:	18000013 	stmdane	r0, {r0, r1, r4}
     62c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     630:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     634:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     638:	34190000 	ldrcc	r0, [r9], #-0
     63c:	3a080300 	bcc	201244 <_Min_Stack_Size+0x200e44>
     640:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     644:	00180213 	andseq	r0, r8, r3, lsl r2
     648:	012e1a00 	teqeq	lr, r0, lsl #20
     64c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     650:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     654:	13491927 	movtne	r1, #39207	; 0x9927
     658:	06120111 			; <UNDEFINED> instruction: 0x06120111
     65c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     660:	00130119 	andseq	r0, r3, r9, lsl r1
     664:	00341b00 	eorseq	r1, r4, r0, lsl #22
     668:	0b3a0e03 	bleq	e83e7c <_Min_Stack_Size+0xe83a7c>
     66c:	1349053b 	movtne	r0, #38203	; 0x953b
     670:	00001802 	andeq	r1, r0, r2, lsl #16
     674:	0300341c 	movweq	r3, #1052	; 0x41c
     678:	3b0b3a0e 	blcc	2ceeb8 <_Min_Stack_Size+0x2ceab8>
     67c:	3f134905 	svccc	0x00134905
     680:	00193c19 	andseq	r3, r9, r9, lsl ip
     684:	11010000 	mrsne	r0, (UNDEF: 1)
     688:	130e2501 	movwne	r2, #58625	; 0xe501
     68c:	1b0e030b 	blne	3812c0 <_Min_Stack_Size+0x380ec0>
     690:	1117550e 	tstne	r7, lr, lsl #10
     694:	00171001 	andseq	r1, r7, r1
     698:	00240200 	eoreq	r0, r4, r0, lsl #4
     69c:	0b3e0b0b 	bleq	f832d0 <_Min_Stack_Size+0xf82ed0>
     6a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     6a4:	03001603 	movweq	r1, #1539	; 0x603
     6a8:	3b0b3a0e 	blcc	2ceee8 <_Min_Stack_Size+0x2ceae8>
     6ac:	0013490b 	andseq	r4, r3, fp, lsl #18
     6b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     6b4:	0b3e0b0b 	bleq	f832e8 <_Min_Stack_Size+0xf82ee8>
     6b8:	00000803 	andeq	r0, r0, r3, lsl #16
     6bc:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     6c0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     6c4:	13490101 	movtne	r0, #37121	; 0x9101
     6c8:	00001301 	andeq	r1, r0, r1, lsl #6
     6cc:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
     6d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
     6d4:	01040800 	tsteq	r4, r0, lsl #16
     6d8:	0b3a0b0b 	bleq	e8330c <_Min_Stack_Size+0xe82f0c>
     6dc:	1301053b 	movwne	r0, #5435	; 0x153b
     6e0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
     6e4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     6e8:	0a00000d 	beq	724 <_Min_Stack_Size+0x324>
     6ec:	08030028 	stmdaeq	r3, {r3, r5}
     6f0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     6f4:	0300160b 	movweq	r1, #1547	; 0x60b
     6f8:	3b0b3a0e 	blcc	2cef38 <_Min_Stack_Size+0x2ceb38>
     6fc:	00134905 	andseq	r4, r3, r5, lsl #18
     700:	01130c00 	tsteq	r3, r0, lsl #24
     704:	0b3a0b0b 	bleq	e83338 <_Min_Stack_Size+0xe82f38>
     708:	1301053b 	movwne	r0, #5435	; 0x153b
     70c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     710:	3a080300 	bcc	201318 <_Min_Stack_Size+0x200f18>
     714:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     718:	000b3813 	andeq	r3, fp, r3, lsl r8
     71c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     720:	0b3a0e03 	bleq	e83f34 <_Min_Stack_Size+0xe83b34>
     724:	1349053b 	movtne	r0, #38203	; 0x953b
     728:	00000b38 	andeq	r0, r0, r8, lsr fp
     72c:	0b01130f 	bleq	45370 <_Min_Stack_Size+0x44f70>
     730:	3b0b3a0b 	blcc	2cef64 <_Min_Stack_Size+0x2ceb64>
     734:	0013010b 	andseq	r0, r3, fp, lsl #2
     738:	000d1000 	andeq	r1, sp, r0
     73c:	0b3a0e03 	bleq	e83f50 <_Min_Stack_Size+0xe83b50>
     740:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     744:	00000b38 	andeq	r0, r0, r8, lsr fp
     748:	3f002e11 	svccc	0x00002e11
     74c:	3a0e0319 	bcc	3813b8 <_Min_Stack_Size+0x380fb8>
     750:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     754:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     758:	97184006 	ldrls	r4, [r8, -r6]
     75c:	00001942 	andeq	r1, r0, r2, asr #18
     760:	3f012e12 	svccc	0x00012e12
     764:	3a0e0319 	bcc	3813d0 <_Min_Stack_Size+0x380fd0>
     768:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     76c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     770:	97184006 	ldrls	r4, [r8, -r6]
     774:	13011942 	movwne	r1, #6466	; 0x1942
     778:	05130000 	ldreq	r0, [r3, #-0]
     77c:	3a0e0300 	bcc	381384 <_Min_Stack_Size+0x380f84>
     780:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     784:	00180213 	andseq	r0, r8, r3, lsl r2
     788:	012e1400 	teqeq	lr, r0, lsl #8
     78c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     790:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     794:	13491927 	movtne	r1, #39207	; 0x9927
     798:	06120111 			; <UNDEFINED> instruction: 0x06120111
     79c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7a0:	00130119 	andseq	r0, r3, r9, lsl r1
     7a4:	00341500 	eorseq	r1, r4, r0, lsl #10
     7a8:	0b3a0e03 	bleq	e83fbc <_Min_Stack_Size+0xe83bbc>
     7ac:	1349053b 	movtne	r0, #38203	; 0x953b
     7b0:	00001802 	andeq	r1, r0, r2, lsl #16
     7b4:	3f002e16 	svccc	0x00002e16
     7b8:	3a0e0319 	bcc	381424 <_Min_Stack_Size+0x381024>
     7bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7c0:	11134919 	tstne	r3, r9, lsl r9
     7c4:	40061201 	andmi	r1, r6, r1, lsl #4
     7c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7cc:	34170000 	ldrcc	r0, [r7], #-0
     7d0:	3a080300 	bcc	2013d8 <_Min_Stack_Size+0x200fd8>
     7d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d8:	00180213 	andseq	r0, r8, r3, lsl r2
     7dc:	000f1800 	andeq	r1, pc, r0, lsl #16
     7e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     7e4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     7e8:	03193f01 	tsteq	r9, #1, 30
     7ec:	3b0b3a0e 	blcc	2cf02c <_Min_Stack_Size+0x2cec2c>
     7f0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     7f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     7f8:	97184006 	ldrls	r4, [r8, -r6]
     7fc:	13011942 	movwne	r1, #6466	; 0x1942
     800:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     804:	03193f00 	tsteq	r9, #0, 30
     808:	3b0b3a0e 	blcc	2cf048 <_Min_Stack_Size+0x2cec48>
     80c:	11192705 	tstne	r9, r5, lsl #14
     810:	40061201 	andmi	r1, r6, r1, lsl #4
     814:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     818:	341b0000 	ldrcc	r0, [fp], #-0
     81c:	3a0e0300 	bcc	381424 <_Min_Stack_Size+0x381024>
     820:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     824:	00180213 	andseq	r0, r8, r3, lsl r2
     828:	00261c00 	eoreq	r1, r6, r0, lsl #24
     82c:	00001349 	andeq	r1, r0, r9, asr #6
     830:	0300341d 	movweq	r3, #1053	; 0x41d
     834:	3b0b3a0e 	blcc	2cf074 <_Min_Stack_Size+0x2cec74>
     838:	3f134905 	svccc	0x00134905
     83c:	00193c19 	andseq	r3, r9, r9, lsl ip
     840:	11010000 	mrsne	r0, (UNDEF: 1)
     844:	130e2501 	movwne	r2, #58625	; 0xe501
     848:	1b0e030b 	blne	38147c <_Min_Stack_Size+0x38107c>
     84c:	1117550e 	tstne	r7, lr, lsl #10
     850:	00171001 	andseq	r1, r7, r1
     854:	00240200 	eoreq	r0, r4, r0, lsl #4
     858:	0b3e0b0b 	bleq	f8348c <_Min_Stack_Size+0xf8308c>
     85c:	00000e03 	andeq	r0, r0, r3, lsl #28
     860:	03001603 	movweq	r1, #1539	; 0x603
     864:	3b0b3a0e 	blcc	2cf0a4 <_Min_Stack_Size+0x2ceca4>
     868:	0013490b 	andseq	r4, r3, fp, lsl #18
     86c:	00240400 	eoreq	r0, r4, r0, lsl #8
     870:	0b3e0b0b 	bleq	f834a4 <_Min_Stack_Size+0xf830a4>
     874:	00000803 	andeq	r0, r0, r3, lsl #16
     878:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     87c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     880:	0b0b0104 	bleq	2c0c98 <_Min_Stack_Size+0x2c0898>
     884:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     888:	00001301 	andeq	r1, r0, r1, lsl #6
     88c:	03002807 	movweq	r2, #2055	; 0x807
     890:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     894:	00280800 	eoreq	r0, r8, r0, lsl #16
     898:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     89c:	16090000 	strne	r0, [r9], -r0
     8a0:	3a0e0300 	bcc	3814a8 <_Min_Stack_Size+0x3810a8>
     8a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8a8:	0a000013 	beq	8fc <_Min_Stack_Size+0x4fc>
     8ac:	0b0b0113 	bleq	2c0d00 <_Min_Stack_Size+0x2c0900>
     8b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b4:	00001301 	andeq	r1, r0, r1, lsl #6
     8b8:	03000d0b 	movweq	r0, #3339	; 0xd0b
     8bc:	3b0b3a08 	blcc	2cf0e4 <_Min_Stack_Size+0x2cece4>
     8c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     8c4:	0c00000b 	stceq	0, cr0, [r0], {11}
     8c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8d0:	0b381349 	bleq	e055fc <_Min_Stack_Size+0xe051fc>
     8d4:	130d0000 	movwne	r0, #53248	; 0xd000
     8d8:	3a0b0b01 	bcc	2c34e4 <_Min_Stack_Size+0x2c30e4>
     8dc:	010b3b0b 	tsteq	fp, fp, lsl #22
     8e0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     8e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8e8:	0b3b0b3a 	bleq	ec35d8 <_Min_Stack_Size+0xec31d8>
     8ec:	0b381349 	bleq	e05618 <_Min_Stack_Size+0xe05218>
     8f0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     8f4:	03193f01 	tsteq	r9, #1, 30
     8f8:	3b0b3a0e 	blcc	2cf138 <_Min_Stack_Size+0x2ced38>
     8fc:	1119270b 	tstne	r9, fp, lsl #14
     900:	40061201 	andmi	r1, r6, r1, lsl #4
     904:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     908:	00001301 	andeq	r1, r0, r1, lsl #6
     90c:	03000510 	movweq	r0, #1296	; 0x510
     910:	3b0b3a0e 	blcc	2cf150 <_Min_Stack_Size+0x2ced50>
     914:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     918:	11000018 	tstne	r0, r8, lsl r0
     91c:	0b0b000f 	bleq	2c0960 <_Min_Stack_Size+0x2c0560>
     920:	00001349 	andeq	r1, r0, r9, asr #6
     924:	03003412 	movweq	r3, #1042	; 0x412
     928:	3b0b3a0e 	blcc	2cf168 <_Min_Stack_Size+0x2ced68>
     92c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     930:	13000018 	movwne	r0, #24
     934:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     938:	0b3a0e03 	bleq	e8414c <_Min_Stack_Size+0xe83d4c>
     93c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     940:	06120111 			; <UNDEFINED> instruction: 0x06120111
     944:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     948:	00130119 	andseq	r0, r3, r9, lsl r1
     94c:	00051400 	andeq	r1, r5, r0, lsl #8
     950:	0b3a0e03 	bleq	e84164 <_Min_Stack_Size+0xe83d64>
     954:	1349053b 	movtne	r0, #38203	; 0x953b
     958:	00001802 	andeq	r1, r0, r2, lsl #16
     95c:	03003415 	movweq	r3, #1045	; 0x415
     960:	3b0b3a0e 	blcc	2cf1a0 <_Min_Stack_Size+0x2ceda0>
     964:	02134905 	andseq	r4, r3, #81920	; 0x14000
     968:	16000018 			; <UNDEFINED> instruction: 0x16000018
     96c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     970:	0b3a0e03 	bleq	e84184 <_Min_Stack_Size+0xe83d84>
     974:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     978:	01111349 	tsteq	r1, r9, asr #6
     97c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     980:	01194297 			; <UNDEFINED> instruction: 0x01194297
     984:	17000013 	smladne	r0, r3, r0, r0
     988:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     98c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     990:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     994:	0000193c 	andeq	r1, r0, ip, lsr r9
     998:	01110100 	tsteq	r1, r0, lsl #2
     99c:	0b130e25 	bleq	4c4238 <_Min_Stack_Size+0x4c3e38>
     9a0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     9a4:	01111755 	tsteq	r1, r5, asr r7
     9a8:	00001710 	andeq	r1, r0, r0, lsl r7
     9ac:	0b002402 	bleq	99bc <_Min_Stack_Size+0x95bc>
     9b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     9b4:	0300000e 	movweq	r0, #14
     9b8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9bc:	0b3b0b3a 	bleq	ec36ac <_Min_Stack_Size+0xec32ac>
     9c0:	00001349 	andeq	r1, r0, r9, asr #6
     9c4:	0b002404 	bleq	99dc <_Min_Stack_Size+0x95dc>
     9c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     9cc:	05000008 	streq	r0, [r0, #-8]
     9d0:	13490035 	movtne	r0, #36917	; 0x9035
     9d4:	01060000 	mrseq	r0, (UNDEF: 6)
     9d8:	01134901 	tsteq	r3, r1, lsl #18
     9dc:	07000013 	smladeq	r0, r3, r0, r0
     9e0:	13490021 	movtne	r0, #36897	; 0x9021
     9e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     9e8:	0b010408 	bleq	41a10 <_Min_Stack_Size+0x41610>
     9ec:	3b0b3a0b 	blcc	2cf220 <_Min_Stack_Size+0x2cee20>
     9f0:	00130105 	andseq	r0, r3, r5, lsl #2
     9f4:	00280900 	eoreq	r0, r8, r0, lsl #18
     9f8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     9fc:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     a00:	1c080300 	stcne	3, cr0, [r8], {-0}
     a04:	0b00000d 	bleq	a40 <_Min_Stack_Size+0x640>
     a08:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     a0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a10:	00001349 	andeq	r1, r0, r9, asr #6
     a14:	0b01130c 	bleq	4564c <_Min_Stack_Size+0x4524c>
     a18:	3b0b3a0b 	blcc	2cf24c <_Min_Stack_Size+0x2cee4c>
     a1c:	00130105 	andseq	r0, r3, r5, lsl #2
     a20:	000d0d00 	andeq	r0, sp, r0, lsl #26
     a24:	0b3a0e03 	bleq	e84238 <_Min_Stack_Size+0xe83e38>
     a28:	1349053b 	movtne	r0, #38203	; 0x953b
     a2c:	00000b38 	andeq	r0, r0, r8, lsr fp
     a30:	03000d0e 	movweq	r0, #3342	; 0xd0e
     a34:	3b0b3a08 	blcc	2cf25c <_Min_Stack_Size+0x2cee5c>
     a38:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a3c:	0f00000b 	svceq	0x0000000b
     a40:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a44:	0b3a0e03 	bleq	e84258 <_Min_Stack_Size+0xe83e58>
     a48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a50:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     a54:	10000019 	andne	r0, r0, r9, lsl r0
     a58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a5c:	0b3a0e03 	bleq	e84270 <_Min_Stack_Size+0xe83e70>
     a60:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a6c:	00130119 	andseq	r0, r3, r9, lsl r1
     a70:	00051100 	andeq	r1, r5, r0, lsl #2
     a74:	0b3a0e03 	bleq	e84288 <_Min_Stack_Size+0xe83e88>
     a78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a7c:	00001802 	andeq	r1, r0, r2, lsl #16
     a80:	03003412 	movweq	r3, #1042	; 0x412
     a84:	3b0b3a08 	blcc	2cf2ac <_Min_Stack_Size+0x2ceeac>
     a88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a8c:	13000018 	movwne	r0, #24
     a90:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a94:	0b3a0e03 	bleq	e842a8 <_Min_Stack_Size+0xe83ea8>
     a98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a9c:	01111349 	tsteq	r1, r9, asr #6
     aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     aa8:	14000013 	strne	r0, [r0], #-19
     aac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ab0:	0b3b0b3a 	bleq	ec37a0 <_Min_Stack_Size+0xec33a0>
     ab4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ab8:	34150000 	ldrcc	r0, [r5], #-0
     abc:	3a0e0300 	bcc	3816c4 <_Min_Stack_Size+0x3812c4>
     ac0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ac8:	00000019 	andeq	r0, r0, r9, lsl r0
     acc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     ad0:	030b130e 	movweq	r1, #45838	; 0xb30e
     ad4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     ad8:	10011117 	andne	r1, r1, r7, lsl r1
     adc:	02000017 	andeq	r0, r0, #23
     ae0:	0b0b0024 	bleq	2c0b78 <_Min_Stack_Size+0x2c0778>
     ae4:	0e030b3e 	vmoveq.16	d3[0], r0
     ae8:	16030000 	strne	r0, [r3], -r0
     aec:	3a0e0300 	bcc	3816f4 <_Min_Stack_Size+0x3812f4>
     af0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     af4:	04000013 	streq	r0, [r0], #-19
     af8:	0b0b0024 	bleq	2c0b90 <_Min_Stack_Size+0x2c0790>
     afc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     b00:	35050000 	strcc	r0, [r5, #-0]
     b04:	00134900 	andseq	r4, r3, r0, lsl #18
     b08:	01040600 	tsteq	r4, r0, lsl #12
     b0c:	0b3a0b0b 	bleq	e83740 <_Min_Stack_Size+0xe83340>
     b10:	1301053b 	movwne	r0, #5435	; 0x153b
     b14:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     b18:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     b1c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     b20:	08030028 	stmdaeq	r3, {r3, r5}
     b24:	00000d1c 	andeq	r0, r0, ip, lsl sp
     b28:	03001609 	movweq	r1, #1545	; 0x609
     b2c:	3b0b3a0e 	blcc	2cf36c <_Min_Stack_Size+0x2cef6c>
     b30:	00134905 	andseq	r4, r3, r5, lsl #18
     b34:	01130a00 	tsteq	r3, r0, lsl #20
     b38:	0b3a0b0b 	bleq	e8376c <_Min_Stack_Size+0xe8336c>
     b3c:	1301053b 	movwne	r0, #5435	; 0x153b
     b40:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     b44:	3a080300 	bcc	20174c <_Min_Stack_Size+0x20134c>
     b48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	000b3813 	andeq	r3, fp, r3, lsl r8
     b50:	000d0c00 	andeq	r0, sp, r0, lsl #24
     b54:	0b3a0e03 	bleq	e84368 <_Min_Stack_Size+0xe83f68>
     b58:	1349053b 	movtne	r0, #38203	; 0x953b
     b5c:	00000b38 	andeq	r0, r0, r8, lsr fp
     b60:	0b01130d 	bleq	4579c <_Min_Stack_Size+0x4539c>
     b64:	3b0b3a0b 	blcc	2cf398 <_Min_Stack_Size+0x2cef98>
     b68:	0013010b 	andseq	r0, r3, fp, lsl #2
     b6c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     b70:	0b3a0e03 	bleq	e84384 <_Min_Stack_Size+0xe83f84>
     b74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b78:	00000b38 	andeq	r0, r0, r8, lsr fp
     b7c:	3f012e0f 	svccc	0x00012e0f
     b80:	3a0e0319 	bcc	3817ec <_Min_Stack_Size+0x3813ec>
     b84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b88:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b8c:	96184006 	ldrls	r4, [r8], -r6
     b90:	13011942 	movwne	r1, #6466	; 0x1942
     b94:	05100000 	ldreq	r0, [r0, #-0]
     b98:	3a0e0300 	bcc	3817a0 <_Min_Stack_Size+0x3813a0>
     b9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba0:	00180213 	andseq	r0, r8, r3, lsl r2
     ba4:	000f1100 	andeq	r1, pc, r0, lsl #2
     ba8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bac:	34120000 	ldrcc	r0, [r2], #-0
     bb0:	3a0e0300 	bcc	3817b8 <_Min_Stack_Size+0x3813b8>
     bb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb8:	00180213 	andseq	r0, r8, r3, lsl r2
     bbc:	012e1300 	teqeq	lr, r0, lsl #6
     bc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bc8:	01111927 	tsteq	r1, r7, lsr #18
     bcc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bd0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     bd4:	14000013 	strne	r0, [r0], #-19
     bd8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     be0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     be4:	34150000 	ldrcc	r0, [r5], #-0
     be8:	3a0e0300 	bcc	3817f0 <_Min_Stack_Size+0x3813f0>
     bec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bf0:	00180213 	andseq	r0, r8, r3, lsl r2
     bf4:	012e1600 	teqeq	lr, r0, lsl #12
     bf8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c00:	13491927 	movtne	r1, #39207	; 0x9927
     c04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c0c:	00130119 	andseq	r0, r3, r9, lsl r1
     c10:	00341700 	eorseq	r1, r4, r0, lsl #14
     c14:	0b3a0803 	bleq	e82c28 <_Min_Stack_Size+0xe82828>
     c18:	1349053b 	movtne	r0, #38203	; 0x953b
     c1c:	00001802 	andeq	r1, r0, r2, lsl #16
     c20:	03003418 	movweq	r3, #1048	; 0x418
     c24:	3b0b3a0e 	blcc	2cf464 <_Min_Stack_Size+0x2cf064>
     c28:	3f134905 	svccc	0x00134905
     c2c:	00193c19 	andseq	r3, r9, r9, lsl ip
     c30:	11010000 	mrsne	r0, (UNDEF: 1)
     c34:	130e2501 	movwne	r2, #58625	; 0xe501
     c38:	1b0e030b 	blne	38186c <_Min_Stack_Size+0x38146c>
     c3c:	1117550e 	tstne	r7, lr, lsl #10
     c40:	00171001 	andseq	r1, r7, r1
     c44:	00240200 	eoreq	r0, r4, r0, lsl #4
     c48:	0b3e0b0b 	bleq	f8387c <_Min_Stack_Size+0xf8347c>
     c4c:	00000e03 	andeq	r0, r0, r3, lsl #28
     c50:	03001603 	movweq	r1, #1539	; 0x603
     c54:	3b0b3a0e 	blcc	2cf494 <_Min_Stack_Size+0x2cf094>
     c58:	0013490b 	andseq	r4, r3, fp, lsl #18
     c5c:	00240400 	eoreq	r0, r4, r0, lsl #8
     c60:	0b3e0b0b 	bleq	f83894 <_Min_Stack_Size+0xf83494>
     c64:	00000803 	andeq	r0, r0, r3, lsl #16
     c68:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     c6c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     c70:	0b0b0104 	bleq	2c1088 <_Min_Stack_Size+0x2c0c88>
     c74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c78:	00001301 	andeq	r1, r0, r1, lsl #6
     c7c:	03002807 	movweq	r2, #2055	; 0x807
     c80:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c84:	00280800 	eoreq	r0, r8, r0, lsl #16
     c88:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     c8c:	16090000 	strne	r0, [r9], -r0
     c90:	3a0e0300 	bcc	381898 <_Min_Stack_Size+0x381498>
     c94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c98:	0a000013 	beq	cec <_Min_Stack_Size+0x8ec>
     c9c:	0b0b0113 	bleq	2c10f0 <_Min_Stack_Size+0x2c0cf0>
     ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ca4:	00001301 	andeq	r1, r0, r1, lsl #6
     ca8:	03000d0b 	movweq	r0, #3339	; 0xd0b
     cac:	3b0b3a08 	blcc	2cf4d4 <_Min_Stack_Size+0x2cf0d4>
     cb0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     cb4:	0c00000b 	stceq	0, cr0, [r0], {11}
     cb8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cc0:	0b381349 	bleq	e059ec <_Min_Stack_Size+0xe055ec>
     cc4:	130d0000 	movwne	r0, #53248	; 0xd000
     cc8:	3a0b0b01 	bcc	2c38d4 <_Min_Stack_Size+0x2c34d4>
     ccc:	010b3b0b 	tsteq	fp, fp, lsl #22
     cd0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     cd4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cd8:	0b3b0b3a 	bleq	ec39c8 <_Min_Stack_Size+0xec35c8>
     cdc:	0b381349 	bleq	e05a08 <_Min_Stack_Size+0xe05608>
     ce0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     ce4:	03193f01 	tsteq	r9, #1, 30
     ce8:	3b0b3a0e 	blcc	2cf528 <_Min_Stack_Size+0x2cf128>
     cec:	1119270b 	tstne	r9, fp, lsl #14
     cf0:	40061201 	andmi	r1, r6, r1, lsl #4
     cf4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     cf8:	00001301 	andeq	r1, r0, r1, lsl #6
     cfc:	03000510 	movweq	r0, #1296	; 0x510
     d00:	3b0b3a0e 	blcc	2cf540 <_Min_Stack_Size+0x2cf140>
     d04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d08:	11000018 	tstne	r0, r8, lsl r0
     d0c:	0b0b000f 	bleq	2c0d50 <_Min_Stack_Size+0x2c0950>
     d10:	00001349 	andeq	r1, r0, r9, asr #6
     d14:	3f012e12 	svccc	0x00012e12
     d18:	3a0e0319 	bcc	381984 <_Min_Stack_Size+0x381584>
     d1c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d20:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d24:	97184006 	ldrls	r4, [r8, -r6]
     d28:	13011942 	movwne	r1, #6466	; 0x1942
     d2c:	05130000 	ldreq	r0, [r3, #-0]
     d30:	3a0e0300 	bcc	381938 <_Min_Stack_Size+0x381538>
     d34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d38:	00180213 	andseq	r0, r8, r3, lsl r2
     d3c:	00341400 	eorseq	r1, r4, r0, lsl #8
     d40:	0b3a0e03 	bleq	e84554 <_Min_Stack_Size+0xe84154>
     d44:	1349053b 	movtne	r0, #38203	; 0x953b
     d48:	00001802 	andeq	r1, r0, r2, lsl #16
     d4c:	3f012e15 	svccc	0x00012e15
     d50:	3a0e0319 	bcc	3819bc <_Min_Stack_Size+0x3815bc>
     d54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d58:	11134919 	tstne	r3, r9, lsl r9
     d5c:	40061201 	andmi	r1, r6, r1, lsl #4
     d60:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d64:	00001301 	andeq	r1, r0, r1, lsl #6
     d68:	03003416 	movweq	r3, #1046	; 0x416
     d6c:	3b0b3a08 	blcc	2cf594 <_Min_Stack_Size+0x2cf194>
     d70:	02134905 	andseq	r4, r3, #81920	; 0x14000
     d74:	17000018 	smladne	r0, r8, r0, r0
     d78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d80:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     d84:	0000193c 	andeq	r1, r0, ip, lsr r9
     d88:	01110100 	tsteq	r1, r0, lsl #2
     d8c:	0b130e25 	bleq	4c4628 <_Min_Stack_Size+0x4c4228>
     d90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     d94:	01111755 	tsteq	r1, r5, asr r7
     d98:	00001710 	andeq	r1, r0, r0, lsl r7
     d9c:	0b002402 	bleq	9dac <_Min_Stack_Size+0x99ac>
     da0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     da4:	0300000e 	movweq	r0, #14
     da8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     dac:	0b3b0b3a 	bleq	ec3a9c <_Min_Stack_Size+0xec369c>
     db0:	00001349 	andeq	r1, r0, r9, asr #6
     db4:	0b002404 	bleq	9dcc <_Min_Stack_Size+0x99cc>
     db8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dbc:	05000008 	streq	r0, [r0, #-8]
     dc0:	13490035 	movtne	r0, #36917	; 0x9035
     dc4:	01060000 	mrseq	r0, (UNDEF: 6)
     dc8:	01134901 	tsteq	r3, r1, lsl #18
     dcc:	07000013 	smladeq	r0, r3, r0, r0
     dd0:	13490021 	movtne	r0, #36897	; 0x9021
     dd4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     dd8:	0b010408 	bleq	41e00 <_Min_Stack_Size+0x41a00>
     ddc:	3b0b3a0b 	blcc	2cf610 <_Min_Stack_Size+0x2cf210>
     de0:	00130105 	andseq	r0, r3, r5, lsl #2
     de4:	00280900 	eoreq	r0, r8, r0, lsl #18
     de8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     dec:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     df0:	1c080300 	stcne	3, cr0, [r8], {-0}
     df4:	0b00000d 	bleq	e30 <_Min_Stack_Size+0xa30>
     df8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     dfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e00:	00001349 	andeq	r1, r0, r9, asr #6
     e04:	0b01130c 	bleq	45a3c <_Min_Stack_Size+0x4563c>
     e08:	3b0b3a0b 	blcc	2cf63c <_Min_Stack_Size+0x2cf23c>
     e0c:	00130105 	andseq	r0, r3, r5, lsl #2
     e10:	000d0d00 	andeq	r0, sp, r0, lsl #26
     e14:	0b3a0803 	bleq	e82e28 <_Min_Stack_Size+0xe82a28>
     e18:	1349053b 	movtne	r0, #38203	; 0x953b
     e1c:	00000b38 	andeq	r0, r0, r8, lsr fp
     e20:	03000d0e 	movweq	r0, #3342	; 0xd0e
     e24:	3b0b3a0e 	blcc	2cf664 <_Min_Stack_Size+0x2cf264>
     e28:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     e2c:	0f00000b 	svceq	0x0000000b
     e30:	0b0b0113 	bleq	2c1284 <_Min_Stack_Size+0x2c0e84>
     e34:	0b3b0b3a 	bleq	ec3b24 <_Min_Stack_Size+0xec3724>
     e38:	00001301 	andeq	r1, r0, r1, lsl #6
     e3c:	03000d10 	movweq	r0, #3344	; 0xd10
     e40:	3b0b3a0e 	blcc	2cf680 <_Min_Stack_Size+0x2cf280>
     e44:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     e48:	1100000b 	tstne	r0, fp
     e4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e50:	0b3a0e03 	bleq	e84664 <_Min_Stack_Size+0xe84264>
     e54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e58:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e5c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     e60:	00130119 	andseq	r0, r3, r9, lsl r1
     e64:	00051200 	andeq	r1, r5, r0, lsl #4
     e68:	0b3a0e03 	bleq	e8467c <_Min_Stack_Size+0xe8427c>
     e6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e70:	00001802 	andeq	r1, r0, r2, lsl #16
     e74:	0b000f13 	bleq	4ac8 <_Min_Stack_Size+0x46c8>
     e78:	0013490b 	andseq	r4, r3, fp, lsl #18
     e7c:	012e1400 	teqeq	lr, r0, lsl #8
     e80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e88:	01111927 	tsteq	r1, r7, lsr #18
     e8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e90:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e94:	15000013 	strne	r0, [r0, #-19]
     e98:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ea0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ea4:	34160000 	ldrcc	r0, [r6], #-0
     ea8:	3a0e0300 	bcc	381ab0 <_Min_Stack_Size+0x3816b0>
     eac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     eb0:	00180213 	andseq	r0, r8, r3, lsl r2
     eb4:	00341700 	eorseq	r1, r4, r0, lsl #14
     eb8:	0b3a0803 	bleq	e82ecc <_Min_Stack_Size+0xe82acc>
     ebc:	1349053b 	movtne	r0, #38203	; 0x953b
     ec0:	00001802 	andeq	r1, r0, r2, lsl #16
     ec4:	3f012e18 	svccc	0x00012e18
     ec8:	3a0e0319 	bcc	381b34 <_Min_Stack_Size+0x381734>
     ecc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ed0:	11134919 	tstne	r3, r9, lsl r9
     ed4:	40061201 	andmi	r1, r6, r1, lsl #4
     ed8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     edc:	00001301 	andeq	r1, r0, r1, lsl #6
     ee0:	03003419 	movweq	r3, #1049	; 0x419
     ee4:	3b0b3a0e 	blcc	2cf724 <_Min_Stack_Size+0x2cf324>
     ee8:	3f134905 	svccc	0x00134905
     eec:	00193c19 	andseq	r3, r9, r9, lsl ip
     ef0:	11010000 	mrsne	r0, (UNDEF: 1)
     ef4:	130e2501 	movwne	r2, #58625	; 0xe501
     ef8:	1b0e030b 	blne	381b2c <_Min_Stack_Size+0x38172c>
     efc:	1117550e 	tstne	r7, lr, lsl #10
     f00:	00171001 	andseq	r1, r7, r1
     f04:	00240200 	eoreq	r0, r4, r0, lsl #4
     f08:	0b3e0b0b 	bleq	f83b3c <_Min_Stack_Size+0xf8373c>
     f0c:	00000e03 	andeq	r0, r0, r3, lsl #28
     f10:	03001603 	movweq	r1, #1539	; 0x603
     f14:	3b0b3a0e 	blcc	2cf754 <_Min_Stack_Size+0x2cf354>
     f18:	0013490b 	andseq	r4, r3, fp, lsl #18
     f1c:	00240400 	eoreq	r0, r4, r0, lsl #8
     f20:	0b3e0b0b 	bleq	f83b54 <_Min_Stack_Size+0xf83754>
     f24:	00000803 	andeq	r0, r0, r3, lsl #16
     f28:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     f2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     f30:	0b0b0104 	bleq	2c1348 <_Min_Stack_Size+0x2c0f48>
     f34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f38:	00001301 	andeq	r1, r0, r1, lsl #6
     f3c:	03002807 	movweq	r2, #2055	; 0x807
     f40:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     f44:	00280800 	eoreq	r0, r8, r0, lsl #16
     f48:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     f4c:	16090000 	strne	r0, [r9], -r0
     f50:	3a0e0300 	bcc	381b58 <_Min_Stack_Size+0x381758>
     f54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f58:	0a000013 	beq	fac <_Min_Stack_Size+0xbac>
     f5c:	0b0b0113 	bleq	2c13b0 <_Min_Stack_Size+0x2c0fb0>
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f64:	00001301 	andeq	r1, r0, r1, lsl #6
     f68:	03000d0b 	movweq	r0, #3339	; 0xd0b
     f6c:	3b0b3a08 	blcc	2cf794 <_Min_Stack_Size+0x2cf394>
     f70:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     f74:	0c00000b 	stceq	0, cr0, [r0], {11}
     f78:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f80:	0b381349 	bleq	e05cac <_Min_Stack_Size+0xe058ac>
     f84:	040d0000 	streq	r0, [sp], #-0
     f88:	3a0b0b01 	bcc	2c3b94 <_Min_Stack_Size+0x2c3794>
     f8c:	010b3b0b 	tsteq	fp, fp, lsl #22
     f90:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     f94:	0b0b0113 	bleq	2c13e8 <_Min_Stack_Size+0x2c0fe8>
     f98:	0b3b0b3a 	bleq	ec3c88 <_Min_Stack_Size+0xec3888>
     f9c:	00001301 	andeq	r1, r0, r1, lsl #6
     fa0:	03000d0f 	movweq	r0, #3343	; 0xd0f
     fa4:	3b0b3a0e 	blcc	2cf7e4 <_Min_Stack_Size+0x2cf3e4>
     fa8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fac:	1000000b 	andne	r0, r0, fp
     fb0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     fb4:	0b3a0e03 	bleq	e847c8 <_Min_Stack_Size+0xe843c8>
     fb8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     fbc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fc0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     fc4:	11000019 	tstne	r0, r9, lsl r0
     fc8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     fcc:	0b3a0e03 	bleq	e847e0 <_Min_Stack_Size+0xe843e0>
     fd0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     fd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fd8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     fdc:	00130119 	andseq	r0, r3, r9, lsl r1
     fe0:	00051200 	andeq	r1, r5, r0, lsl #4
     fe4:	0b3a0e03 	bleq	e847f8 <_Min_Stack_Size+0xe843f8>
     fe8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fec:	00001802 	andeq	r1, r0, r2, lsl #16
     ff0:	03003413 	movweq	r3, #1043	; 0x413
     ff4:	3b0b3a08 	blcc	2cf81c <_Min_Stack_Size+0x2cf41c>
     ff8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ffc:	14000018 	strne	r0, [r0], #-24
    1000:	0b0b000f 	bleq	2c1044 <_Min_Stack_Size+0x2c0c44>
    1004:	00001349 	andeq	r1, r0, r9, asr #6
    1008:	3f012e15 	svccc	0x00012e15
    100c:	3a0e0319 	bcc	381c78 <_Min_Stack_Size+0x381878>
    1010:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1014:	11134919 	tstne	r3, r9, lsl r9
    1018:	40061201 	andmi	r1, r6, r1, lsl #4
    101c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1020:	00001301 	andeq	r1, r0, r1, lsl #6
    1024:	03003416 	movweq	r3, #1046	; 0x416
    1028:	3b0b3a0e 	blcc	2cf868 <_Min_Stack_Size+0x2cf468>
    102c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1030:	17000018 	smladne	r0, r8, r0, r0
    1034:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1038:	0b3a0e03 	bleq	e8484c <_Min_Stack_Size+0xe8444c>
    103c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1040:	01111349 	tsteq	r1, r9, asr #6
    1044:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1048:	01194297 			; <UNDEFINED> instruction: 0x01194297
    104c:	18000013 	stmdane	r0, {r0, r1, r4}
    1050:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1054:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1058:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    105c:	34190000 	ldrcc	r0, [r9], #-0
    1060:	3a0e0300 	bcc	381c68 <_Min_Stack_Size+0x381868>
    1064:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1068:	00180213 	andseq	r0, r8, r3, lsl r2
    106c:	012e1a00 	teqeq	lr, r0, lsl #20
    1070:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1074:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1078:	01111927 	tsteq	r1, r7, lsr #18
    107c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1080:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1084:	1b000013 	blne	10d8 <_Min_Stack_Size+0xcd8>
    1088:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    108c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1090:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1094:	0000193c 	andeq	r1, r0, ip, lsr r9
    1098:	01110100 	tsteq	r1, r0, lsl #2
    109c:	0b130e25 	bleq	4c4938 <_Min_Stack_Size+0x4c4538>
    10a0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    10a4:	01111755 	tsteq	r1, r5, asr r7
    10a8:	00001710 	andeq	r1, r0, r0, lsl r7
    10ac:	0b002402 	bleq	a0bc <_Min_Stack_Size+0x9cbc>
    10b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10b4:	0300000e 	movweq	r0, #14
    10b8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    10bc:	0b3b0b3a 	bleq	ec3dac <_Min_Stack_Size+0xec39ac>
    10c0:	00001349 	andeq	r1, r0, r9, asr #6
    10c4:	0b002404 	bleq	a0dc <_Min_Stack_Size+0x9cdc>
    10c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10cc:	05000008 	streq	r0, [r0, #-8]
    10d0:	13490035 	movtne	r0, #36917	; 0x9035
    10d4:	04060000 	streq	r0, [r6], #-0
    10d8:	3a0b0b01 	bcc	2c3ce4 <_Min_Stack_Size+0x2c38e4>
    10dc:	01053b0b 	tsteq	r5, fp, lsl #22
    10e0:	07000013 	smladeq	r0, r3, r0, r0
    10e4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    10e8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    10ec:	03002808 	movweq	r2, #2056	; 0x808
    10f0:	000d1c08 	andeq	r1, sp, r8, lsl #24
    10f4:	00160900 	andseq	r0, r6, r0, lsl #18
    10f8:	0b3a0e03 	bleq	e8490c <_Min_Stack_Size+0xe8450c>
    10fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1100:	130a0000 	movwne	r0, #40960	; 0xa000
    1104:	3a050b01 	bcc	143d10 <_Min_Stack_Size+0x143910>
    1108:	01053b0b 	tsteq	r5, fp, lsl #22
    110c:	0b000013 	bleq	1160 <_Min_Stack_Size+0xd60>
    1110:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1118:	0b381349 	bleq	e05e44 <_Min_Stack_Size+0xe05a44>
    111c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1120:	3a0e0300 	bcc	381d28 <_Min_Stack_Size+0x381928>
    1124:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1128:	000b3813 	andeq	r3, fp, r3, lsl r8
    112c:	000d0d00 	andeq	r0, sp, r0, lsl #26
    1130:	0b3a0e03 	bleq	e84944 <_Min_Stack_Size+0xe84544>
    1134:	1349053b 	movtne	r0, #38203	; 0x953b
    1138:	00000538 	andeq	r0, r0, r8, lsr r5
    113c:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
    1140:	00130113 	andseq	r0, r3, r3, lsl r1
    1144:	00210f00 	eoreq	r0, r1, r0, lsl #30
    1148:	0b2f1349 	bleq	bc5e74 <_Min_Stack_Size+0xbc5a74>
    114c:	13100000 	tstne	r0, #0
    1150:	3a0b0b01 	bcc	2c3d5c <_Min_Stack_Size+0x2c395c>
    1154:	010b3b0b 	tsteq	fp, fp, lsl #22
    1158:	11000013 	tstne	r0, r3, lsl r0
    115c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1160:	0b3b0b3a 	bleq	ec3e50 <_Min_Stack_Size+0xec3a50>
    1164:	0b381349 	bleq	e05e90 <_Min_Stack_Size+0xe05a90>
    1168:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    116c:	03193f00 	tsteq	r9, #0, 30
    1170:	3b0b3a0e 	blcc	2cf9b0 <_Min_Stack_Size+0x2cf5b0>
    1174:	1119270b 	tstne	r9, fp, lsl #14
    1178:	40061201 	andmi	r1, r6, r1, lsl #4
    117c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1180:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1184:	03193f01 	tsteq	r9, #1, 30
    1188:	3b0b3a0e 	blcc	2cf9c8 <_Min_Stack_Size+0x2cf5c8>
    118c:	1119270b 	tstne	r9, fp, lsl #14
    1190:	40061201 	andmi	r1, r6, r1, lsl #4
    1194:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1198:	00001301 	andeq	r1, r0, r1, lsl #6
    119c:	03000514 	movweq	r0, #1300	; 0x514
    11a0:	3b0b3a0e 	blcc	2cf9e0 <_Min_Stack_Size+0x2cf5e0>
    11a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11a8:	15000018 	strne	r0, [r0, #-24]
    11ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11b0:	0b3b0b3a 	bleq	ec3ea0 <_Min_Stack_Size+0xec3aa0>
    11b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11b8:	0f160000 	svceq	0x00160000
    11bc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    11c0:	17000013 	smladne	r0, r3, r0, r0
    11c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    11c8:	0b3a0e03 	bleq	e849dc <_Min_Stack_Size+0xe845dc>
    11cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    11d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11d8:	18000019 	stmdane	r0, {r0, r3, r4}
    11dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    11e0:	0b3a0e03 	bleq	e849f4 <_Min_Stack_Size+0xe845f4>
    11e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    11e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11f0:	00130119 	andseq	r0, r3, r9, lsl r1
    11f4:	00051900 	andeq	r1, r5, r0, lsl #18
    11f8:	0b3a0e03 	bleq	e84a0c <_Min_Stack_Size+0xe8460c>
    11fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1200:	00001802 	andeq	r1, r0, r2, lsl #16
    1204:	0300341a 	movweq	r3, #1050	; 0x41a
    1208:	3b0b3a0e 	blcc	2cfa48 <_Min_Stack_Size+0x2cf648>
    120c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1210:	1b000018 	blne	1278 <_Min_Stack_Size+0xe78>
    1214:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1218:	0b3a0e03 	bleq	e84a2c <_Min_Stack_Size+0xe8462c>
    121c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1220:	01111349 	tsteq	r1, r9, asr #6
    1224:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1228:	01194297 			; <UNDEFINED> instruction: 0x01194297
    122c:	1c000013 	stcne	0, cr0, [r0], {19}
    1230:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1238:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    123c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1240:	01110100 	tsteq	r1, r0, lsl #2
    1244:	0b130e25 	bleq	4c4ae0 <_Min_Stack_Size+0x4c46e0>
    1248:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    124c:	01111755 	tsteq	r1, r5, asr r7
    1250:	00001710 	andeq	r1, r0, r0, lsl r7
    1254:	0b002402 	bleq	a264 <_Min_Stack_Size+0x9e64>
    1258:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    125c:	0300000e 	movweq	r0, #14
    1260:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1264:	0b3b0b3a 	bleq	ec3f54 <_Min_Stack_Size+0xec3b54>
    1268:	00001349 	andeq	r1, r0, r9, asr #6
    126c:	0b002404 	bleq	a284 <_Min_Stack_Size+0x9e84>
    1270:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1274:	05000008 	streq	r0, [r0, #-8]
    1278:	13490035 	movtne	r0, #36917	; 0x9035
    127c:	01060000 	mrseq	r0, (UNDEF: 6)
    1280:	01134901 	tsteq	r3, r1, lsl #18
    1284:	07000013 	smladeq	r0, r3, r0, r0
    1288:	13490021 	movtne	r0, #36897	; 0x9021
    128c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1290:	0b010408 	bleq	422b8 <_Min_Stack_Size+0x41eb8>
    1294:	3b0b3a0b 	blcc	2cfac8 <_Min_Stack_Size+0x2cf6c8>
    1298:	00130105 	andseq	r0, r3, r5, lsl #2
    129c:	00280900 	eoreq	r0, r8, r0, lsl #18
    12a0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    12a4:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    12a8:	1c080300 	stcne	3, cr0, [r8], {-0}
    12ac:	0b00000d 	bleq	12e8 <_Min_Stack_Size+0xee8>
    12b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    12b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12b8:	00001349 	andeq	r1, r0, r9, asr #6
    12bc:	0b01130c 	bleq	45ef4 <_Min_Stack_Size+0x45af4>
    12c0:	3b0b3a0b 	blcc	2cfaf4 <_Min_Stack_Size+0x2cf6f4>
    12c4:	00130105 	andseq	r0, r3, r5, lsl #2
    12c8:	000d0d00 	andeq	r0, sp, r0, lsl #26
    12cc:	0b3a0e03 	bleq	e84ae0 <_Min_Stack_Size+0xe846e0>
    12d0:	1349053b 	movtne	r0, #38203	; 0x953b
    12d4:	00000b38 	andeq	r0, r0, r8, lsr fp
    12d8:	03000d0e 	movweq	r0, #3342	; 0xd0e
    12dc:	3b0b3a08 	blcc	2cfb04 <_Min_Stack_Size+0x2cf704>
    12e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    12e4:	0f00000b 	svceq	0x0000000b
    12e8:	0b0b0113 	bleq	2c173c <_Min_Stack_Size+0x2c133c>
    12ec:	0b3b0b3a 	bleq	ec3fdc <_Min_Stack_Size+0xec3bdc>
    12f0:	00001301 	andeq	r1, r0, r1, lsl #6
    12f4:	03000d10 	movweq	r0, #3344	; 0xd10
    12f8:	3b0b3a0e 	blcc	2cfb38 <_Min_Stack_Size+0x2cf738>
    12fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1300:	1100000b 	tstne	r0, fp
    1304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1308:	0b3a0e03 	bleq	e84b1c <_Min_Stack_Size+0xe8471c>
    130c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1310:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1314:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1318:	12000019 	andne	r0, r0, #25
    131c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1320:	0b3a0e03 	bleq	e84b34 <_Min_Stack_Size+0xe84734>
    1324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1328:	06120111 			; <UNDEFINED> instruction: 0x06120111
    132c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1330:	00130119 	andseq	r0, r3, r9, lsl r1
    1334:	00051300 	andeq	r1, r5, r0, lsl #6
    1338:	0b3a0e03 	bleq	e84b4c <_Min_Stack_Size+0xe8474c>
    133c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1340:	00001802 	andeq	r1, r0, r2, lsl #16
    1344:	03003414 	movweq	r3, #1044	; 0x414
    1348:	3b0b3a0e 	blcc	2cfb88 <_Min_Stack_Size+0x2cf788>
    134c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1350:	15000018 	strne	r0, [r0, #-24]
    1354:	0b0b000f 	bleq	2c1398 <_Min_Stack_Size+0x2c0f98>
    1358:	00001349 	andeq	r1, r0, r9, asr #6
    135c:	3f012e16 	svccc	0x00012e16
    1360:	3a0e0319 	bcc	381fcc <_Min_Stack_Size+0x381bcc>
    1364:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1368:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    136c:	97184006 	ldrls	r4, [r8, -r6]
    1370:	13011942 	movwne	r1, #6466	; 0x1942
    1374:	05170000 	ldreq	r0, [r7, #-0]
    1378:	3a0e0300 	bcc	381f80 <_Min_Stack_Size+0x381b80>
    137c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1380:	00180213 	andseq	r0, r8, r3, lsl r2
    1384:	012e1800 	teqeq	lr, r0, lsl #16
    1388:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    138c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1390:	13491927 	movtne	r1, #39207	; 0x9927
    1394:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1398:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    139c:	00130119 	andseq	r0, r3, r9, lsl r1
    13a0:	00341900 	eorseq	r1, r4, r0, lsl #18
    13a4:	0b3a0e03 	bleq	e84bb8 <_Min_Stack_Size+0xe847b8>
    13a8:	1349053b 	movtne	r0, #38203	; 0x953b
    13ac:	00001802 	andeq	r1, r0, r2, lsl #16
    13b0:	0300341a 	movweq	r3, #1050	; 0x41a
    13b4:	3b0b3a08 	blcc	2cfbdc <_Min_Stack_Size+0x2cf7dc>
    13b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    13bc:	1b000018 	blne	1424 <_Min_Stack_Size+0x1024>
    13c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    13c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13c8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    13cc:	0000193c 	andeq	r1, r0, ip, lsr r9
    13d0:	01110100 	tsteq	r1, r0, lsl #2
    13d4:	0b130e25 	bleq	4c4c70 <_Min_Stack_Size+0x4c4870>
    13d8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    13dc:	01111755 	tsteq	r1, r5, asr r7
    13e0:	00001710 	andeq	r1, r0, r0, lsl r7
    13e4:	0b002402 	bleq	a3f4 <_Min_Stack_Size+0x9ff4>
    13e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13ec:	0300000e 	movweq	r0, #14
    13f0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    13f4:	0b3b0b3a 	bleq	ec40e4 <_Min_Stack_Size+0xec3ce4>
    13f8:	00001349 	andeq	r1, r0, r9, asr #6
    13fc:	0b002404 	bleq	a414 <_Min_Stack_Size+0xa014>
    1400:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1404:	05000008 	streq	r0, [r0, #-8]
    1408:	13490101 	movtne	r0, #37121	; 0x9101
    140c:	00001301 	andeq	r1, r0, r1, lsl #6
    1410:	49002106 	stmdbmi	r0, {r1, r2, r8, sp}
    1414:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1418:	00350700 	eorseq	r0, r5, r0, lsl #14
    141c:	00001349 	andeq	r1, r0, r9, asr #6
    1420:	0b010408 	bleq	42448 <_Min_Stack_Size+0x42048>
    1424:	3b0b3a0b 	blcc	2cfc58 <_Min_Stack_Size+0x2cf858>
    1428:	00130105 	andseq	r0, r3, r5, lsl #2
    142c:	00280900 	eoreq	r0, r8, r0, lsl #18
    1430:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1434:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1438:	1c080300 	stcne	3, cr0, [r8], {-0}
    143c:	0b00000d 	bleq	1478 <_Min_Stack_Size+0x1078>
    1440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1444:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1448:	00001349 	andeq	r1, r0, r9, asr #6
    144c:	0b01130c 	bleq	46084 <_Min_Stack_Size+0x45c84>
    1450:	3b0b3a0b 	blcc	2cfc84 <_Min_Stack_Size+0x2cf884>
    1454:	00130105 	andseq	r0, r3, r5, lsl #2
    1458:	000d0d00 	andeq	r0, sp, r0, lsl #26
    145c:	0b3a0e03 	bleq	e84c70 <_Min_Stack_Size+0xe84870>
    1460:	1349053b 	movtne	r0, #38203	; 0x953b
    1464:	00000b38 	andeq	r0, r0, r8, lsr fp
    1468:	03000d0e 	movweq	r0, #3342	; 0xd0e
    146c:	3b0b3a08 	blcc	2cfc94 <_Min_Stack_Size+0x2cf894>
    1470:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1474:	0f00000b 	svceq	0x0000000b
    1478:	0b0b0113 	bleq	2c18cc <_Min_Stack_Size+0x2c14cc>
    147c:	0b3b0b3a 	bleq	ec416c <_Min_Stack_Size+0xec3d6c>
    1480:	00001301 	andeq	r1, r0, r1, lsl #6
    1484:	03000d10 	movweq	r0, #3344	; 0xd10
    1488:	3b0b3a0e 	blcc	2cfcc8 <_Min_Stack_Size+0x2cf8c8>
    148c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1490:	1100000b 	tstne	r0, fp
    1494:	0b0b000f 	bleq	2c14d8 <_Min_Stack_Size+0x2c10d8>
    1498:	00001349 	andeq	r1, r0, r9, asr #6
    149c:	3f012e12 	svccc	0x00012e12
    14a0:	3a0e0319 	bcc	38210c <_Min_Stack_Size+0x381d0c>
    14a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    14ac:	97184006 	ldrls	r4, [r8, -r6]
    14b0:	13011942 	movwne	r1, #6466	; 0x1942
    14b4:	05130000 	ldreq	r0, [r3, #-0]
    14b8:	3a0e0300 	bcc	3820c0 <_Min_Stack_Size+0x381cc0>
    14bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14c0:	00180213 	andseq	r0, r8, r3, lsl r2
    14c4:	00341400 	eorseq	r1, r4, r0, lsl #8
    14c8:	0b3a0e03 	bleq	e84cdc <_Min_Stack_Size+0xe848dc>
    14cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14d0:	00001802 	andeq	r1, r0, r2, lsl #16
    14d4:	3f012e15 	svccc	0x00012e15
    14d8:	3a0e0319 	bcc	382144 <_Min_Stack_Size+0x381d44>
    14dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    14e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    14e4:	97184006 	ldrls	r4, [r8, -r6]
    14e8:	13011942 	movwne	r1, #6466	; 0x1942
    14ec:	05160000 	ldreq	r0, [r6, #-0]
    14f0:	3a0e0300 	bcc	3820f8 <_Min_Stack_Size+0x381cf8>
    14f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f8:	00180213 	andseq	r0, r8, r3, lsl r2
    14fc:	00341700 	eorseq	r1, r4, r0, lsl #14
    1500:	0b3a0e03 	bleq	e84d14 <_Min_Stack_Size+0xe84914>
    1504:	1349053b 	movtne	r0, #38203	; 0x953b
    1508:	00001802 	andeq	r1, r0, r2, lsl #16
    150c:	3f012e18 	svccc	0x00012e18
    1510:	3a0e0319 	bcc	38217c <_Min_Stack_Size+0x381d7c>
    1514:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1518:	11134919 	tstne	r3, r9, lsl r9
    151c:	40061201 	andmi	r1, r6, r1, lsl #4
    1520:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1524:	00001301 	andeq	r1, r0, r1, lsl #6
    1528:	3f002e19 	svccc	0x00002e19
    152c:	3a0e0319 	bcc	382198 <_Min_Stack_Size+0x381d98>
    1530:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1534:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1538:	97184006 	ldrls	r4, [r8, -r6]
    153c:	00001942 	andeq	r1, r0, r2, asr #18
    1540:	0300341a 	movweq	r3, #1050	; 0x41a
    1544:	3b0b3a0e 	blcc	2cfd84 <_Min_Stack_Size+0x2cf984>
    1548:	3f134905 	svccc	0x00134905
    154c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1550:	11010000 	mrsne	r0, (UNDEF: 1)
    1554:	130e2501 	movwne	r2, #58625	; 0xe501
    1558:	1b0e030b 	blne	38218c <_Min_Stack_Size+0x381d8c>
    155c:	1117550e 	tstne	r7, lr, lsl #10
    1560:	00171001 	andseq	r1, r7, r1
    1564:	00240200 	eoreq	r0, r4, r0, lsl #4
    1568:	0b3e0b0b 	bleq	f8419c <_Min_Stack_Size+0xf83d9c>
    156c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1570:	03001603 	movweq	r1, #1539	; 0x603
    1574:	3b0b3a0e 	blcc	2cfdb4 <_Min_Stack_Size+0x2cf9b4>
    1578:	0013490b 	andseq	r4, r3, fp, lsl #18
    157c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1580:	0b3e0b0b 	bleq	f841b4 <_Min_Stack_Size+0xf83db4>
    1584:	00000803 	andeq	r0, r0, r3, lsl #16
    1588:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    158c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1590:	0b0b0104 	bleq	2c19a8 <_Min_Stack_Size+0x2c15a8>
    1594:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1598:	00001301 	andeq	r1, r0, r1, lsl #6
    159c:	03002807 	movweq	r2, #2055	; 0x807
    15a0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    15a4:	00280800 	eoreq	r0, r8, r0, lsl #16
    15a8:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    15ac:	16090000 	strne	r0, [r9], -r0
    15b0:	3a0e0300 	bcc	3821b8 <_Min_Stack_Size+0x381db8>
    15b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b8:	0a000013 	beq	160c <_Min_Stack_Size+0x120c>
    15bc:	0b0b0113 	bleq	2c1a10 <_Min_Stack_Size+0x2c1610>
    15c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15c4:	00001301 	andeq	r1, r0, r1, lsl #6
    15c8:	03000d0b 	movweq	r0, #3339	; 0xd0b
    15cc:	3b0b3a08 	blcc	2cfdf4 <_Min_Stack_Size+0x2cf9f4>
    15d0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    15d4:	0c00000b 	stceq	0, cr0, [r0], {11}
    15d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    15dc:	0b3a0e03 	bleq	e84df0 <_Min_Stack_Size+0xe849f0>
    15e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    15e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    15ec:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    15f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15f4:	0b3a0e03 	bleq	e84e08 <_Min_Stack_Size+0xe84a08>
    15f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    15fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1600:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1604:	00130119 	andseq	r0, r3, r9, lsl r1
    1608:	00050e00 	andeq	r0, r5, r0, lsl #28
    160c:	0b3a0e03 	bleq	e84e20 <_Min_Stack_Size+0xe84a20>
    1610:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1614:	00001802 	andeq	r1, r0, r2, lsl #16
    1618:	3f002e0f 	svccc	0x00002e0f
    161c:	3a0e0319 	bcc	382288 <_Min_Stack_Size+0x381e88>
    1620:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1624:	11134919 	tstne	r3, r9, lsl r9
    1628:	40061201 	andmi	r1, r6, r1, lsl #4
    162c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1630:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1634:	03193f01 	tsteq	r9, #1, 30
    1638:	3b0b3a0e 	blcc	2cfe78 <_Min_Stack_Size+0x2cfa78>
    163c:	11192705 	tstne	r9, r5, lsl #14
    1640:	40061201 	andmi	r1, r6, r1, lsl #4
    1644:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1648:	00001301 	andeq	r1, r0, r1, lsl #6
    164c:	03000511 	movweq	r0, #1297	; 0x511
    1650:	3b0b3a0e 	blcc	2cfe90 <_Min_Stack_Size+0x2cfa90>
    1654:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1658:	12000018 	andne	r0, r0, #24
    165c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1660:	0b3a0e03 	bleq	e84e74 <_Min_Stack_Size+0xe84a74>
    1664:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1668:	01111349 	tsteq	r1, r9, asr #6
    166c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1670:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1674:	13000013 	movwne	r0, #19
    1678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    167c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1680:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1684:	34140000 	ldrcc	r0, [r4], #-0
    1688:	3a0e0300 	bcc	382290 <_Min_Stack_Size+0x381e90>
    168c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1690:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1694:	00000019 	andeq	r0, r0, r9, lsl r0
    1698:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    169c:	030b130e 	movweq	r1, #45838	; 0xb30e
    16a0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    16a4:	10011117 	andne	r1, r1, r7, lsl r1
    16a8:	02000017 	andeq	r0, r0, #23
    16ac:	0e030104 	adfeqs	f0, f3, f4
    16b0:	0b3a0b0b 	bleq	e842e4 <_Min_Stack_Size+0xe83ee4>
    16b4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    16b8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    16bc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    16c0:	0400000d 	streq	r0, [r0], #-13
    16c4:	0b0b0024 	bleq	2c175c <_Min_Stack_Size+0x2c135c>
    16c8:	0e030b3e 	vmoveq.16	d3[0], r0
    16cc:	16050000 	strne	r0, [r5], -r0
    16d0:	3a0e0300 	bcc	3822d8 <_Min_Stack_Size+0x381ed8>
    16d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16d8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    16dc:	0b0b0024 	bleq	2c1774 <_Min_Stack_Size+0x2c1374>
    16e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    16e4:	35070000 	strcc	r0, [r7, #-0]
    16e8:	00134900 	andseq	r4, r3, r0, lsl #18
    16ec:	01010800 	tsteq	r1, r0, lsl #16
    16f0:	13011349 	movwne	r1, #4937	; 0x1349
    16f4:	21090000 	mrscs	r0, (UNDEF: 9)
    16f8:	2f134900 	svccs	0x00134900
    16fc:	0a00000b 	beq	1730 <_Min_Stack_Size+0x1330>
    1700:	0b0b0104 	bleq	2c1b18 <_Min_Stack_Size+0x2c1718>
    1704:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1708:	00001301 	andeq	r1, r0, r1, lsl #6
    170c:	0300160b 	movweq	r1, #1547	; 0x60b
    1710:	3b0b3a0e 	blcc	2cff50 <_Min_Stack_Size+0x2cfb50>
    1714:	00134905 	andseq	r4, r3, r5, lsl #18
    1718:	01130c00 	tsteq	r3, r0, lsl #24
    171c:	0b3a0b0b 	bleq	e84350 <_Min_Stack_Size+0xe83f50>
    1720:	1301053b 	movwne	r0, #5435	; 0x153b
    1724:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1728:	3a080300 	bcc	202330 <_Min_Stack_Size+0x201f30>
    172c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1730:	000b3813 	andeq	r3, fp, r3, lsl r8
    1734:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1738:	0b3a0e03 	bleq	e84f4c <_Min_Stack_Size+0xe84b4c>
    173c:	1349053b 	movtne	r0, #38203	; 0x953b
    1740:	00000b38 	andeq	r0, r0, r8, lsr fp
    1744:	0b01130f 	bleq	46388 <_Min_Stack_Size+0x45f88>
    1748:	3b0b3a0b 	blcc	2cff7c <_Min_Stack_Size+0x2cfb7c>
    174c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1750:	000d1000 	andeq	r1, sp, r0
    1754:	0b3a0e03 	bleq	e84f68 <_Min_Stack_Size+0xe84b68>
    1758:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    175c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1760:	0b010411 	bleq	427ac <_Min_Stack_Size+0x423ac>
    1764:	3b0b3a0b 	blcc	2cff98 <_Min_Stack_Size+0x2cfb98>
    1768:	0013010b 	andseq	r0, r3, fp, lsl #2
    176c:	012e1200 	teqeq	lr, r0, lsl #4
    1770:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1774:	0b3b0b3a 	bleq	ec4464 <_Min_Stack_Size+0xec4064>
    1778:	01111927 	tsteq	r1, r7, lsr #18
    177c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1780:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1784:	13000013 	movwne	r0, #19
    1788:	08030005 	stmdaeq	r3, {r0, r2}
    178c:	0b3b0b3a 	bleq	ec447c <_Min_Stack_Size+0xec407c>
    1790:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1794:	34140000 	ldrcc	r0, [r4], #-0
    1798:	3a0e0300 	bcc	3823a0 <_Min_Stack_Size+0x381fa0>
    179c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	00180213 	andseq	r0, r8, r3, lsl r2
    17a4:	012e1500 	teqeq	lr, r0, lsl #10
    17a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    17ac:	0b3b0b3a 	bleq	ec449c <_Min_Stack_Size+0xec409c>
    17b0:	01111927 	tsteq	r1, r7, lsr #18
    17b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    17b8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    17bc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    17c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    17c4:	0b3b0b3a 	bleq	ec44b4 <_Min_Stack_Size+0xec40b4>
    17c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    17cc:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    17d0:	03193f01 	tsteq	r9, #1, 30
    17d4:	3b0b3a0e 	blcc	2d0014 <_Min_Stack_Size+0x2cfc14>
    17d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    17dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    17e0:	96184006 	ldrls	r4, [r8], -r6
    17e4:	13011942 	movwne	r1, #6466	; 0x1942
    17e8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    17ec:	03193f01 	tsteq	r9, #1, 30
    17f0:	3b0b3a0e 	blcc	2d0030 <_Min_Stack_Size+0x2cfc30>
    17f4:	11192705 	tstne	r9, r5, lsl #14
    17f8:	40061201 	andmi	r1, r6, r1, lsl #4
    17fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1800:	00001301 	andeq	r1, r0, r1, lsl #6
    1804:	03003419 	movweq	r3, #1049	; 0x419
    1808:	3b0b3a0e 	blcc	2d0048 <_Min_Stack_Size+0x2cfc48>
    180c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1810:	1a000018 	bne	1878 <_Min_Stack_Size+0x1478>
    1814:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1818:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    181c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1820:	341b0000 	ldrcc	r0, [fp], #-0
    1824:	3a0e0300 	bcc	38242c <_Min_Stack_Size+0x38202c>
    1828:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    182c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1830:	1c000019 	stcne	0, cr0, [r0], {25}
    1834:	0b0b000f 	bleq	2c1878 <_Min_Stack_Size+0x2c1478>
    1838:	00001349 	andeq	r1, r0, r9, asr #6
    183c:	0300341d 	movweq	r3, #1053	; 0x41d
    1840:	3b0b3a0e 	blcc	2d0080 <_Min_Stack_Size+0x2cfc80>
    1844:	3f13490b 	svccc	0x0013490b
    1848:	00180219 	andseq	r0, r8, r9, lsl r2
    184c:	00261e00 	eoreq	r1, r6, r0, lsl #28
    1850:	00001349 	andeq	r1, r0, r9, asr #6
    1854:	01110100 	tsteq	r1, r0, lsl #2
    1858:	0b130e25 	bleq	4c50f4 <_Min_Stack_Size+0x4c4cf4>
    185c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1860:	01111755 	tsteq	r1, r5, asr r7
    1864:	00001710 	andeq	r1, r0, r0, lsl r7
    1868:	0b002402 	bleq	a878 <_Min_Stack_Size+0xa478>
    186c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1870:	0300000e 	movweq	r0, #14
    1874:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1878:	0b3b0b3a 	bleq	ec4568 <_Min_Stack_Size+0xec4168>
    187c:	00001349 	andeq	r1, r0, r9, asr #6
    1880:	0b002404 	bleq	a898 <_Min_Stack_Size+0xa498>
    1884:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1888:	05000008 	streq	r0, [r0, #-8]
    188c:	13490035 	movtne	r0, #36917	; 0x9035
    1890:	01060000 	mrseq	r0, (UNDEF: 6)
    1894:	01134901 	tsteq	r3, r1, lsl #18
    1898:	07000013 	smladeq	r0, r3, r0, r0
    189c:	13490021 	movtne	r0, #36897	; 0x9021
    18a0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18a4:	0b010408 	bleq	428cc <_Min_Stack_Size+0x424cc>
    18a8:	3b0b3a0b 	blcc	2d00dc <_Min_Stack_Size+0x2cfcdc>
    18ac:	00130105 	andseq	r0, r3, r5, lsl #2
    18b0:	00280900 	eoreq	r0, r8, r0, lsl #18
    18b4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    18b8:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    18bc:	1c080300 	stcne	3, cr0, [r8], {-0}
    18c0:	0b00000d 	bleq	18fc <_Min_Stack_Size+0x14fc>
    18c4:	0b0b0113 	bleq	2c1d18 <_Min_Stack_Size+0x2c1918>
    18c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18cc:	00001301 	andeq	r1, r0, r1, lsl #6
    18d0:	03000d0c 	movweq	r0, #3340	; 0xd0c
    18d4:	3b0b3a0e 	blcc	2d0114 <_Min_Stack_Size+0x2cfd14>
    18d8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    18dc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    18e0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    18e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18e8:	0b381349 	bleq	e06614 <_Min_Stack_Size+0xe06214>
    18ec:	160e0000 	strne	r0, [lr], -r0
    18f0:	3a0e0300 	bcc	3824f8 <_Min_Stack_Size+0x3820f8>
    18f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f8:	0f000013 	svceq	0x00000013
    18fc:	0b0b0113 	bleq	2c1d50 <_Min_Stack_Size+0x2c1950>
    1900:	0b3b0b3a 	bleq	ec45f0 <_Min_Stack_Size+0xec41f0>
    1904:	00001301 	andeq	r1, r0, r1, lsl #6
    1908:	03000d10 	movweq	r0, #3344	; 0xd10
    190c:	3b0b3a0e 	blcc	2d014c <_Min_Stack_Size+0x2cfd4c>
    1910:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1914:	1100000b 	tstne	r0, fp
    1918:	0b0b000f 	bleq	2c195c <_Min_Stack_Size+0x2c155c>
    191c:	00001349 	andeq	r1, r0, r9, asr #6
    1920:	0b010412 	bleq	42970 <_Min_Stack_Size+0x42570>
    1924:	3b0b3a0b 	blcc	2d0158 <_Min_Stack_Size+0x2cfd58>
    1928:	0013010b 	andseq	r0, r3, fp, lsl #2
    192c:	012e1300 	teqeq	lr, r0, lsl #6
    1930:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1934:	0b3b0b3a 	bleq	ec4624 <_Min_Stack_Size+0xec4224>
    1938:	01111927 	tsteq	r1, r7, lsr #18
    193c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1940:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1944:	14000013 	strne	r0, [r0], #-19
    1948:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    194c:	0b3b0b3a 	bleq	ec463c <_Min_Stack_Size+0xec423c>
    1950:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1954:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    1958:	03193f01 	tsteq	r9, #1, 30
    195c:	3b0b3a0e 	blcc	2d019c <_Min_Stack_Size+0x2cfd9c>
    1960:	11192705 	tstne	r9, r5, lsl #14
    1964:	40061201 	andmi	r1, r6, r1, lsl #4
    1968:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    196c:	00001301 	andeq	r1, r0, r1, lsl #6
    1970:	03000516 	movweq	r0, #1302	; 0x516
    1974:	3b0b3a0e 	blcc	2d01b4 <_Min_Stack_Size+0x2cfdb4>
    1978:	02134905 	andseq	r4, r3, #81920	; 0x14000
    197c:	17000018 	smladne	r0, r8, r0, r0
    1980:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1988:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    198c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1990:	3a0e0301 	bcc	38259c <_Min_Stack_Size+0x38219c>
    1994:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1998:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    199c:	97184006 	ldrls	r4, [r8, -r6]
    19a0:	13011942 	movwne	r1, #6466	; 0x1942
    19a4:	34190000 	ldrcc	r0, [r9], #-0
    19a8:	3a0e0300 	bcc	3825b0 <_Min_Stack_Size+0x3821b0>
    19ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    19b4:	00000019 	andeq	r0, r0, r9, lsl r0
    19b8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    19bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    19c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    19c4:	10011117 	andne	r1, r1, r7, lsl r1
    19c8:	02000017 	andeq	r0, r0, #23
    19cc:	0b0b0024 	bleq	2c1a64 <_Min_Stack_Size+0x2c1664>
    19d0:	0e030b3e 	vmoveq.16	d3[0], r0
    19d4:	16030000 	strne	r0, [r3], -r0
    19d8:	3a0e0300 	bcc	3825e0 <_Min_Stack_Size+0x3821e0>
    19dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19e0:	04000013 	streq	r0, [r0], #-19
    19e4:	0b0b0024 	bleq	2c1a7c <_Min_Stack_Size+0x2c167c>
    19e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    19ec:	35050000 	strcc	r0, [r5, #-0]
    19f0:	00134900 	andseq	r4, r3, r0, lsl #18
    19f4:	01010600 	tsteq	r1, r0, lsl #12
    19f8:	13011349 	movwne	r1, #4937	; 0x1349
    19fc:	21070000 	mrscs	r0, (UNDEF: 7)
    1a00:	2f134900 	svccs	0x00134900
    1a04:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1a08:	0b0b0104 	bleq	2c1e20 <_Min_Stack_Size+0x2c1a20>
    1a0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a10:	00001301 	andeq	r1, r0, r1, lsl #6
    1a14:	03002809 	movweq	r2, #2057	; 0x809
    1a18:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1a1c:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1a20:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1a24:	130b0000 	movwne	r0, #45056	; 0xb000
    1a28:	3a0b0b01 	bcc	2c4634 <_Min_Stack_Size+0x2c4234>
    1a2c:	01053b0b 	tsteq	r5, fp, lsl #22
    1a30:	0c000013 	stceq	0, cr0, [r0], {19}
    1a34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1a38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a3c:	0b381349 	bleq	e06768 <_Min_Stack_Size+0xe06368>
    1a40:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1a44:	3a080300 	bcc	20264c <_Min_Stack_Size+0x20224c>
    1a48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a4c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1a50:	00160e00 	andseq	r0, r6, r0, lsl #28
    1a54:	0b3a0e03 	bleq	e85268 <_Min_Stack_Size+0xe84e68>
    1a58:	1349053b 	movtne	r0, #38203	; 0x953b
    1a5c:	040f0000 	streq	r0, [pc], #-0	; 1a64 <_Min_Stack_Size+0x1664>
    1a60:	3a0b0b01 	bcc	2c466c <_Min_Stack_Size+0x2c426c>
    1a64:	010b3b0b 	tsteq	fp, fp, lsl #22
    1a68:	10000013 	andne	r0, r0, r3, lsl r0
    1a6c:	0b0b0113 	bleq	2c1ec0 <_Min_Stack_Size+0x2c1ac0>
    1a70:	0b3b0b3a 	bleq	ec4760 <_Min_Stack_Size+0xec4360>
    1a74:	00001301 	andeq	r1, r0, r1, lsl #6
    1a78:	03000d11 	movweq	r0, #3345	; 0xd11
    1a7c:	3b0b3a0e 	blcc	2d02bc <_Min_Stack_Size+0x2cfebc>
    1a80:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1a84:	1200000b 	andne	r0, r0, #11
    1a88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a8c:	0b3a0e03 	bleq	e852a0 <_Min_Stack_Size+0xe84ea0>
    1a90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1a94:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a98:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1a9c:	00130119 	andseq	r0, r3, r9, lsl r1
    1aa0:	00051300 	andeq	r1, r5, r0, lsl #6
    1aa4:	0b3a0e03 	bleq	e852b8 <_Min_Stack_Size+0xe84eb8>
    1aa8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1aac:	00001802 	andeq	r1, r0, r2, lsl #16
    1ab0:	03003414 	movweq	r3, #1044	; 0x414
    1ab4:	3b0b3a0e 	blcc	2d02f4 <_Min_Stack_Size+0x2cfef4>
    1ab8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1abc:	15000018 	strne	r0, [r0, #-24]
    1ac0:	0b0b000f 	bleq	2c1b04 <_Min_Stack_Size+0x2c1704>
    1ac4:	00001349 	andeq	r1, r0, r9, asr #6
    1ac8:	3f012e16 	svccc	0x00012e16
    1acc:	3a0e0319 	bcc	382738 <_Min_Stack_Size+0x382338>
    1ad0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1ad4:	11134919 	tstne	r3, r9, lsl r9
    1ad8:	40061201 	andmi	r1, r6, r1, lsl #4
    1adc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1ae0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ae4:	03003417 	movweq	r3, #1047	; 0x417
    1ae8:	3b0b3a0e 	blcc	2d0328 <_Min_Stack_Size+0x2cff28>
    1aec:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1af0:	18000018 	stmdane	r0, {r3, r4}
    1af4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1af8:	0b3a0e03 	bleq	e8530c <_Min_Stack_Size+0xe84f0c>
    1afc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1b00:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1b04:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1b08:	00130119 	andseq	r0, r3, r9, lsl r1
    1b0c:	00051900 	andeq	r1, r5, r0, lsl #18
    1b10:	0b3a0e03 	bleq	e85324 <_Min_Stack_Size+0xe84f24>
    1b14:	1349053b 	movtne	r0, #38203	; 0x953b
    1b18:	00001802 	andeq	r1, r0, r2, lsl #16
    1b1c:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    1b20:	3b0b3a0e 	blcc	2d0360 <_Min_Stack_Size+0x2cff60>
    1b24:	11192705 	tstne	r9, r5, lsl #14
    1b28:	40061201 	andmi	r1, r6, r1, lsl #4
    1b2c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1b30:	00001301 	andeq	r1, r0, r1, lsl #6
    1b34:	03012e1b 	movweq	r2, #7707	; 0x1e1b
    1b38:	3b0b3a0e 	blcc	2d0378 <_Min_Stack_Size+0x2cff78>
    1b3c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1b40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b44:	96184006 	ldrls	r4, [r8], -r6
    1b48:	13011942 	movwne	r1, #6466	; 0x1942
    1b4c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    1b50:	03193f00 	tsteq	r9, #0, 30
    1b54:	3b0b3a0e 	blcc	2d0394 <_Min_Stack_Size+0x2cff94>
    1b58:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1b5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b60:	97184006 	ldrls	r4, [r8, -r6]
    1b64:	00001942 	andeq	r1, r0, r2, asr #18
    1b68:	0300341d 	movweq	r3, #1053	; 0x41d
    1b6c:	3b0b3a0e 	blcc	2d03ac <_Min_Stack_Size+0x2cffac>
    1b70:	3f134905 	svccc	0x00134905
    1b74:	00193c19 	andseq	r3, r9, r9, lsl ip
    1b78:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1b7c:	0b3a0e03 	bleq	e85390 <_Min_Stack_Size+0xe84f90>
    1b80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b84:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1b88:	01000000 	mrseq	r0, (UNDEF: 0)
    1b8c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1b90:	0e030b13 	vmoveq.32	d3[0], r0
    1b94:	17550e1b 	smmlane	r5, fp, lr, r0
    1b98:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1b9c:	24020000 	strcs	r0, [r2], #-0
    1ba0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1ba4:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ba8:	00160300 	andseq	r0, r6, r0, lsl #6
    1bac:	0b3a0e03 	bleq	e853c0 <_Min_Stack_Size+0xe84fc0>
    1bb0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1bb4:	24040000 	strcs	r0, [r4], #-0
    1bb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1bbc:	0008030b 	andeq	r0, r8, fp, lsl #6
    1bc0:	00350500 	eorseq	r0, r5, r0, lsl #10
    1bc4:	00001349 	andeq	r1, r0, r9, asr #6
    1bc8:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1bcc:	00130113 	andseq	r0, r3, r3, lsl r1
    1bd0:	00210700 	eoreq	r0, r1, r0, lsl #14
    1bd4:	0b2f1349 	bleq	bc6900 <_Min_Stack_Size+0xbc6500>
    1bd8:	26080000 	strcs	r0, [r8], -r0
    1bdc:	00134900 	andseq	r4, r3, r0, lsl #18
    1be0:	01040900 	tsteq	r4, r0, lsl #18
    1be4:	0b3a0b0b 	bleq	e84818 <_Min_Stack_Size+0xe84418>
    1be8:	1301053b 	movwne	r0, #5435	; 0x153b
    1bec:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1bf0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1bf4:	0b00000d 	bleq	1c30 <_Min_Stack_Size+0x1830>
    1bf8:	08030028 	stmdaeq	r3, {r3, r5}
    1bfc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1c00:	0300160c 	movweq	r1, #1548	; 0x60c
    1c04:	3b0b3a0e 	blcc	2d0444 <_Min_Stack_Size+0x2d0044>
    1c08:	00134905 	andseq	r4, r3, r5, lsl #18
    1c0c:	01130d00 	tsteq	r3, r0, lsl #26
    1c10:	0b3a0b0b 	bleq	e84844 <_Min_Stack_Size+0xe84444>
    1c14:	1301053b 	movwne	r0, #5435	; 0x153b
    1c18:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1c1c:	3a0e0300 	bcc	382824 <_Min_Stack_Size+0x382424>
    1c20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c24:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c28:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1c2c:	0b3a0803 	bleq	e83c40 <_Min_Stack_Size+0xe83840>
    1c30:	1349053b 	movtne	r0, #38203	; 0x953b
    1c34:	00000b38 	andeq	r0, r0, r8, lsr fp
    1c38:	0b011310 	bleq	46880 <_Min_Stack_Size+0x46480>
    1c3c:	3b0b3a0b 	blcc	2d0470 <_Min_Stack_Size+0x2d0070>
    1c40:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c44:	000d1100 	andeq	r1, sp, r0, lsl #2
    1c48:	0b3a0e03 	bleq	e8545c <_Min_Stack_Size+0xe8505c>
    1c4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c50:	00000b38 	andeq	r0, r0, r8, lsr fp
    1c54:	0b010412 	bleq	42ca4 <_Min_Stack_Size+0x428a4>
    1c58:	3b0b3a0b 	blcc	2d048c <_Min_Stack_Size+0x2d008c>
    1c5c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c60:	01131300 	tsteq	r3, r0, lsl #6
    1c64:	0b0b0e03 	bleq	2c5478 <_Min_Stack_Size+0x2c5078>
    1c68:	0b3b0b3a 	bleq	ec4958 <_Min_Stack_Size+0xec4558>
    1c6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c70:	0b000f14 	bleq	58c8 <_Min_Stack_Size+0x54c8>
    1c74:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c78:	000d1500 	andeq	r1, sp, r0, lsl #10
    1c7c:	0b3a0803 	bleq	e83c90 <_Min_Stack_Size+0xe83890>
    1c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c84:	00000b38 	andeq	r0, r0, r8, lsr fp
    1c88:	3f012e16 	svccc	0x00012e16
    1c8c:	3a0e0319 	bcc	3828f8 <_Min_Stack_Size+0x3824f8>
    1c90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c94:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1c98:	96184006 	ldrls	r4, [r8], -r6
    1c9c:	13011942 	movwne	r1, #6466	; 0x1942
    1ca0:	34170000 	ldrcc	r0, [r7], #-0
    1ca4:	3a0e0300 	bcc	3828ac <_Min_Stack_Size+0x3824ac>
    1ca8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cac:	00180213 	andseq	r0, r8, r3, lsl r2
    1cb0:	012e1800 	teqeq	lr, r0, lsl #16
    1cb4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cbc:	01111927 	tsteq	r1, r7, lsr #18
    1cc0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1cc4:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1cc8:	19000013 	stmdbne	r0, {r0, r1, r4}
    1ccc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1cd8:	051a0000 	ldreq	r0, [sl, #-0]
    1cdc:	3a0e0300 	bcc	3828e4 <_Min_Stack_Size+0x3824e4>
    1ce0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ce4:	00180213 	andseq	r0, r8, r3, lsl r2
    1ce8:	012e1b00 	teqeq	lr, r0, lsl #22
    1cec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cf4:	01111927 	tsteq	r1, r7, lsr #18
    1cf8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1cfc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d00:	1c000013 	stcne	0, cr0, [r0], {19}
    1d04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1d08:	0b3a0e03 	bleq	e8551c <_Min_Stack_Size+0xe8511c>
    1d0c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1d10:	01111349 	tsteq	r1, r9, asr #6
    1d14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d18:	00194297 	mulseq	r9, r7, r2
    1d1c:	012e1d00 	teqeq	lr, r0, lsl #26
    1d20:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d28:	13491927 	movtne	r1, #39207	; 0x9927
    1d2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1d30:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1d34:	00130119 	andseq	r0, r3, r9, lsl r1
    1d38:	00051e00 	andeq	r1, r5, r0, lsl #28
    1d3c:	0b3a0803 	bleq	e83d50 <_Min_Stack_Size+0xe83950>
    1d40:	1349053b 	movtne	r0, #38203	; 0x953b
    1d44:	00001802 	andeq	r1, r0, r2, lsl #16
    1d48:	3f002e1f 	svccc	0x00002e1f
    1d4c:	3a0e0319 	bcc	3829b8 <_Min_Stack_Size+0x3825b8>
    1d50:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1d54:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1d58:	96184006 	ldrls	r4, [r8], -r6
    1d5c:	00001942 	andeq	r1, r0, r2, asr #18
    1d60:	03003420 	movweq	r3, #1056	; 0x420
    1d64:	3b0b3a08 	blcc	2d058c <_Min_Stack_Size+0x2d018c>
    1d68:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1d6c:	21000018 	tstcs	r0, r8, lsl r0
    1d70:	0e03012e 	adfeqsp	f0, f3, #0.5
    1d74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d78:	01111927 	tsteq	r1, r7, lsr #18
    1d7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d80:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1d84:	22000013 	andcs	r0, r0, #19
    1d88:	0e03012e 	adfeqsp	f0, f3, #0.5
    1d8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d90:	01111927 	tsteq	r1, r7, lsr #18
    1d94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d98:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d9c:	23000013 	movwcs	r0, #19
    1da0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1da8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1dac:	0000193c 	andeq	r1, r0, ip, lsr r9
    1db0:	03003424 	movweq	r3, #1060	; 0x424
    1db4:	3b0b3a0e 	blcc	2d05f4 <_Min_Stack_Size+0x2d01f4>
    1db8:	3f134905 	svccc	0x00134905
    1dbc:	00180219 	andseq	r0, r8, r9, lsl r2
    1dc0:	00212500 	eoreq	r2, r1, r0, lsl #10
    1dc4:	052f1349 	streq	r1, [pc, #-841]!	; 1a83 <_Min_Stack_Size+0x1683>
    1dc8:	34260000 	strtcc	r0, [r6], #-0
    1dcc:	3a0e0300 	bcc	3829d4 <_Min_Stack_Size+0x3825d4>
    1dd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1dd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1ddc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1de0:	030b130e 	movweq	r1, #45838	; 0xb30e
    1de4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1de8:	10011117 	andne	r1, r1, r7, lsl r1
    1dec:	02000017 	andeq	r0, r0, #23
    1df0:	0b0b0024 	bleq	2c1e88 <_Min_Stack_Size+0x2c1a88>
    1df4:	0e030b3e 	vmoveq.16	d3[0], r0
    1df8:	16030000 	strne	r0, [r3], -r0
    1dfc:	3a0e0300 	bcc	382a04 <_Min_Stack_Size+0x382604>
    1e00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e04:	04000013 	streq	r0, [r0], #-19
    1e08:	0b0b0024 	bleq	2c1ea0 <_Min_Stack_Size+0x2c1aa0>
    1e0c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1e10:	35050000 	strcc	r0, [r5, #-0]
    1e14:	00134900 	andseq	r4, r3, r0, lsl #18
    1e18:	01010600 	tsteq	r1, r0, lsl #12
    1e1c:	13011349 	movwne	r1, #4937	; 0x1349
    1e20:	21070000 	mrscs	r0, (UNDEF: 7)
    1e24:	2f134900 	svccs	0x00134900
    1e28:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1e2c:	0b0b0104 	bleq	2c2244 <_Min_Stack_Size+0x2c1e44>
    1e30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e34:	00001301 	andeq	r1, r0, r1, lsl #6
    1e38:	03002809 	movweq	r2, #2057	; 0x809
    1e3c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1e40:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1e44:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1e48:	160b0000 	strne	r0, [fp], -r0
    1e4c:	3a0e0300 	bcc	382a54 <_Min_Stack_Size+0x382654>
    1e50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e54:	0c000013 	stceq	0, cr0, [r0], {19}
    1e58:	0b0b0113 	bleq	2c22ac <_Min_Stack_Size+0x2c1eac>
    1e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e60:	00001301 	andeq	r1, r0, r1, lsl #6
    1e64:	03000d0d 	movweq	r0, #3341	; 0xd0d
    1e68:	3b0b3a08 	blcc	2d0690 <_Min_Stack_Size+0x2d0290>
    1e6c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1e70:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1e74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e7c:	0b381349 	bleq	e06ba8 <_Min_Stack_Size+0xe067a8>
    1e80:	130f0000 	movwne	r0, #61440	; 0xf000
    1e84:	3a0b0b01 	bcc	2c4a90 <_Min_Stack_Size+0x2c4690>
    1e88:	010b3b0b 	tsteq	fp, fp, lsl #22
    1e8c:	10000013 	andne	r0, r0, r3, lsl r0
    1e90:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e94:	0b3b0b3a 	bleq	ec4b84 <_Min_Stack_Size+0xec4784>
    1e98:	0b381349 	bleq	e06bc4 <_Min_Stack_Size+0xe067c4>
    1e9c:	04110000 	ldreq	r0, [r1], #-0
    1ea0:	3a0b0b01 	bcc	2c4aac <_Min_Stack_Size+0x2c46ac>
    1ea4:	010b3b0b 	tsteq	fp, fp, lsl #22
    1ea8:	12000013 	andne	r0, r0, #19
    1eac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1eb0:	0b3b0b3a 	bleq	ec4ba0 <_Min_Stack_Size+0xec47a0>
    1eb4:	0b381349 	bleq	e06be0 <_Min_Stack_Size+0xe067e0>
    1eb8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1ebc:	03193f00 	tsteq	r9, #0, 30
    1ec0:	3b0b3a0e 	blcc	2d0700 <_Min_Stack_Size+0x2d0300>
    1ec4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1ec8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1ecc:	96184006 	ldrls	r4, [r8], -r6
    1ed0:	00001942 	andeq	r1, r0, r2, asr #18
    1ed4:	3f012e14 	svccc	0x00012e14
    1ed8:	3a0e0319 	bcc	382b44 <_Min_Stack_Size+0x382744>
    1edc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1ee0:	11134919 	tstne	r3, r9, lsl r9
    1ee4:	40061201 	andmi	r1, r6, r1, lsl #4
    1ee8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1eec:	00001301 	andeq	r1, r0, r1, lsl #6
    1ef0:	03003415 	movweq	r3, #1045	; 0x415
    1ef4:	3b0b3a0e 	blcc	2d0734 <_Min_Stack_Size+0x2d0334>
    1ef8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1efc:	16000018 			; <UNDEFINED> instruction: 0x16000018
    1f00:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1f04:	0b3b0b3a 	bleq	ec4bf4 <_Min_Stack_Size+0xec47f4>
    1f08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1f0c:	0f170000 	svceq	0x00170000
    1f10:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1f14:	18000013 	stmdane	r0, {r0, r1, r4}
    1f18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1f1c:	0b3b0b3a 	bleq	ec4c0c <_Min_Stack_Size+0xec480c>
    1f20:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1f24:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1f28:	03193f00 	tsteq	r9, #0, 30
    1f2c:	3b0b3a0e 	blcc	2d076c <_Min_Stack_Size+0x2d036c>
    1f30:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1f34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1f38:	96184006 	ldrls	r4, [r8], -r6
    1f3c:	00001942 	andeq	r1, r0, r2, asr #18
    1f40:	3f012e1a 	svccc	0x00012e1a
    1f44:	3a0e0319 	bcc	382bb0 <_Min_Stack_Size+0x3827b0>
    1f48:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1f4c:	11134919 	tstne	r3, r9, lsl r9
    1f50:	40061201 	andmi	r1, r6, r1, lsl #4
    1f54:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1f58:	00001301 	andeq	r1, r0, r1, lsl #6
    1f5c:	0300341b 	movweq	r3, #1051	; 0x41b
    1f60:	3b0b3a08 	blcc	2d0788 <_Min_Stack_Size+0x2d0388>
    1f64:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1f68:	1c000018 	stcne	0, cr0, [r0], {24}
    1f6c:	08030005 	stmdaeq	r3, {r0, r2}
    1f70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1f74:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1f78:	051d0000 	ldreq	r0, [sp, #-0]
    1f7c:	3a0e0300 	bcc	382b84 <_Min_Stack_Size+0x382784>
    1f80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f84:	00180213 	andseq	r0, r8, r3, lsl r2
    1f88:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1f8c:	0b3a0e03 	bleq	e857a0 <_Min_Stack_Size+0xe853a0>
    1f90:	1349053b 	movtne	r0, #38203	; 0x953b
    1f94:	00001802 	andeq	r1, r0, r2, lsl #16
    1f98:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    1f9c:	3b0b3a0e 	blcc	2d07dc <_Min_Stack_Size+0x2d03dc>
    1fa0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1fa4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1fa8:	96184006 	ldrls	r4, [r8], -r6
    1fac:	13011942 	movwne	r1, #6466	; 0x1942
    1fb0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1fb4:	3a0e0301 	bcc	382bc0 <_Min_Stack_Size+0x3827c0>
    1fb8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1fbc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1fc0:	96184006 	ldrls	r4, [r8], -r6
    1fc4:	13011942 	movwne	r1, #6466	; 0x1942
    1fc8:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1fcc:	3a0e0301 	bcc	382bd8 <_Min_Stack_Size+0x3827d8>
    1fd0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1fd4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1fd8:	97184006 	ldrls	r4, [r8, -r6]
    1fdc:	13011942 	movwne	r1, #6466	; 0x1942
    1fe0:	34220000 	strtcc	r0, [r2], #-0
    1fe4:	3a0e0300 	bcc	382bec <_Min_Stack_Size+0x3827ec>
    1fe8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fec:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1ff0:	23000019 	movwcs	r0, #25
    1ff4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ff8:	0b3b0b3a 	bleq	ec4ce8 <_Min_Stack_Size+0xec48e8>
    1ffc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2000:	00001802 	andeq	r1, r0, r2, lsl #16
    2004:	01110100 	tsteq	r1, r0, lsl #2
    2008:	0b130e25 	bleq	4c58a4 <_Min_Stack_Size+0x4c54a4>
    200c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2010:	01111755 	tsteq	r1, r5, asr r7
    2014:	00001710 	andeq	r1, r0, r0, lsl r7
    2018:	0b002402 	bleq	b028 <_Min_Stack_Size+0xac28>
    201c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2020:	0300000e 	movweq	r0, #14
    2024:	0b0b0024 	bleq	2c20bc <_Min_Stack_Size+0x2c1cbc>
    2028:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    202c:	16040000 	strne	r0, [r4], -r0
    2030:	3a0e0300 	bcc	382c38 <_Min_Stack_Size+0x382838>
    2034:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2038:	05000013 	streq	r0, [r0, #-19]
    203c:	0b0b0113 	bleq	2c2490 <_Min_Stack_Size+0x2c2090>
    2040:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2044:	00001301 	andeq	r1, r0, r1, lsl #6
    2048:	03000d06 	movweq	r0, #3334	; 0xd06
    204c:	3b0b3a08 	blcc	2d0874 <_Min_Stack_Size+0x2d0474>
    2050:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2054:	0700000b 	streq	r0, [r0, -fp]
    2058:	0b0b0117 	bleq	2c24bc <_Min_Stack_Size+0x2c20bc>
    205c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2060:	00001301 	andeq	r1, r0, r1, lsl #6
    2064:	03000d08 	movweq	r0, #3336	; 0xd08
    2068:	3b0b3a0e 	blcc	2d08a8 <_Min_Stack_Size+0x2d04a8>
    206c:	00134905 	andseq	r4, r3, r5, lsl #18
    2070:	00160900 	andseq	r0, r6, r0, lsl #18
    2074:	0b3a0e03 	bleq	e85888 <_Min_Stack_Size+0xe85488>
    2078:	1349053b 	movtne	r0, #38203	; 0x953b
    207c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    2080:	03193f01 	tsteq	r9, #1, 30
    2084:	3b0b3a0e 	blcc	2d08c4 <_Min_Stack_Size+0x2d04c4>
    2088:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    208c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2090:	96184006 	ldrls	r4, [r8], -r6
    2094:	13011942 	movwne	r1, #6466	; 0x1942
    2098:	050b0000 	streq	r0, [fp, #-0]
    209c:	3a080300 	bcc	202ca4 <_Min_Stack_Size+0x2028a4>
    20a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20a4:	00170213 	andseq	r0, r7, r3, lsl r2
    20a8:	00340c00 	eorseq	r0, r4, r0, lsl #24
    20ac:	0b3a0803 	bleq	e840c0 <_Min_Stack_Size+0xe83cc0>
    20b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    20b4:	00001702 	andeq	r1, r0, r2, lsl #14
    20b8:	0300340d 	movweq	r3, #1037	; 0x40d
    20bc:	3b0b3a08 	blcc	2d08e4 <_Min_Stack_Size+0x2d04e4>
    20c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    20c4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    20c8:	0111010b 	tsteq	r1, fp, lsl #2
    20cc:	13010612 	movwne	r0, #5650	; 0x1612
    20d0:	340f0000 	strcc	r0, [pc], #-0	; 20d8 <_Min_Stack_Size+0x1cd8>
    20d4:	3a0e0300 	bcc	382cdc <_Min_Stack_Size+0x3828dc>
    20d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20dc:	00170213 	andseq	r0, r7, r3, lsl r2
    20e0:	010b1000 	mrseq	r1, (UNDEF: 11)
    20e4:	13011755 	movwne	r1, #5973	; 0x1755
    20e8:	34110000 	ldrcc	r0, [r1], #-0
    20ec:	3a080300 	bcc	202cf4 <_Min_Stack_Size+0x2028f4>
    20f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20f4:	12000013 	andne	r0, r0, #19
    20f8:	00018289 	andeq	r8, r1, r9, lsl #5
    20fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2100:	01130000 	tsteq	r3, r0
    2104:	01134901 	tsteq	r3, r1, lsl #18
    2108:	14000013 	strne	r0, [r0], #-19
    210c:	13490021 	movtne	r0, #36897	; 0x9021
    2110:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2114:	03003415 	movweq	r3, #1045	; 0x415
    2118:	3b0b3a0e 	blcc	2d0958 <_Min_Stack_Size+0x2d0558>
    211c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2120:	16000018 			; <UNDEFINED> instruction: 0x16000018
    2124:	13490026 	movtne	r0, #36902	; 0x9026
    2128:	34170000 	ldrcc	r0, [r7], #-0
    212c:	3a080300 	bcc	202d34 <_Min_Stack_Size+0x202934>
    2130:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2134:	000a1c13 	andeq	r1, sl, r3, lsl ip
    2138:	00341800 	eorseq	r1, r4, r0, lsl #16
    213c:	0b3a0e03 	bleq	e85950 <_Min_Stack_Size+0xe85550>
    2140:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2144:	00000a1c 	andeq	r0, r0, ip, lsl sl
    2148:	3f012e19 	svccc	0x00012e19
    214c:	3a0e0319 	bcc	382db8 <_Min_Stack_Size+0x3829b8>
    2150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2154:	3c134919 	ldccc	9, cr4, [r3], {25}
    2158:	1a000019 	bne	21c4 <_Min_Stack_Size+0x1dc4>
    215c:	13490005 	movtne	r0, #36869	; 0x9005
    2160:	01000000 	mrseq	r0, (UNDEF: 0)
    2164:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2168:	0e030b13 	vmoveq.32	d3[0], r0
    216c:	17550e1b 	smmlane	r5, fp, lr, r0
    2170:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2174:	24020000 	strcs	r0, [r2], #-0
    2178:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    217c:	0008030b 	andeq	r0, r8, fp, lsl #6
    2180:	00240300 	eoreq	r0, r4, r0, lsl #6
    2184:	0b3e0b0b 	bleq	f84db8 <_Min_Stack_Size+0xf849b8>
    2188:	00000e03 	andeq	r0, r0, r3, lsl #28
    218c:	03001604 	movweq	r1, #1540	; 0x604
    2190:	3b0b3a0e 	blcc	2d09d0 <_Min_Stack_Size+0x2d05d0>
    2194:	0013490b 	andseq	r4, r3, fp, lsl #18
    2198:	01130500 	tsteq	r3, r0, lsl #10
    219c:	0b3a0b0b 	bleq	e84dd0 <_Min_Stack_Size+0xe849d0>
    21a0:	1301053b 	movwne	r0, #5435	; 0x153b
    21a4:	0d060000 	stceq	0, cr0, [r6, #-0]
    21a8:	3a080300 	bcc	202db0 <_Min_Stack_Size+0x2029b0>
    21ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21b0:	000b3813 	andeq	r3, fp, r3, lsl r8
    21b4:	01170700 	tsteq	r7, r0, lsl #14
    21b8:	0b3a0b0b 	bleq	e84dec <_Min_Stack_Size+0xe849ec>
    21bc:	1301053b 	movwne	r0, #5435	; 0x153b
    21c0:	0d080000 	stceq	0, cr0, [r8, #-0]
    21c4:	3a0e0300 	bcc	382dcc <_Min_Stack_Size+0x3829cc>
    21c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    21d0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    21d8:	00001349 	andeq	r1, r0, r9, asr #6
    21dc:	3f012e0a 	svccc	0x00012e0a
    21e0:	3a0e0319 	bcc	382e4c <_Min_Stack_Size+0x382a4c>
    21e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    21e8:	11134919 	tstne	r3, r9, lsl r9
    21ec:	40061201 	andmi	r1, r6, r1, lsl #4
    21f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    21f4:	050b0000 	streq	r0, [fp, #-0]
    21f8:	3a080300 	bcc	202e00 <_Min_Stack_Size+0x202a00>
    21fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2200:	00180213 	andseq	r0, r8, r3, lsl r2
    2204:	00340c00 	eorseq	r0, r4, r0, lsl #24
    2208:	0b3a0e03 	bleq	e85a1c <_Min_Stack_Size+0xe8561c>
    220c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2210:	0b0d0000 	bleq	342218 <_Min_Stack_Size+0x341e18>
    2214:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2218:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    221c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2220:	0b3b0b3a 	bleq	ec4f10 <_Min_Stack_Size+0xec4b10>
    2224:	17021349 	strne	r1, [r2, -r9, asr #6]
    2228:	01000000 	mrseq	r0, (UNDEF: 0)
    222c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2230:	0e030b13 	vmoveq.32	d3[0], r0
    2234:	17550e1b 	smmlane	r5, fp, lr, r0
    2238:	17100111 			; <UNDEFINED> instruction: 0x17100111
    223c:	24020000 	strcs	r0, [r2], #-0
    2240:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2244:	000e030b 	andeq	r0, lr, fp, lsl #6
    2248:	00240300 	eoreq	r0, r4, r0, lsl #6
    224c:	0b3e0b0b 	bleq	f84e80 <_Min_Stack_Size+0xf84a80>
    2250:	00000803 	andeq	r0, r0, r3, lsl #16
    2254:	0b000f04 	bleq	5e6c <_Min_Stack_Size+0x5a6c>
    2258:	0013490b 	andseq	r4, r3, fp, lsl #18
    225c:	00260500 	eoreq	r0, r6, r0, lsl #10
    2260:	00001349 	andeq	r1, r0, r9, asr #6
    2264:	03011306 	movweq	r1, #4870	; 0x1306
    2268:	3a0b0b0e 	bcc	2c4ea8 <_Min_Stack_Size+0x2c4aa8>
    226c:	01053b0b 	tsteq	r5, fp, lsl #22
    2270:	07000013 	smladeq	r0, r3, r0, r0
    2274:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2278:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    227c:	0b381349 	bleq	e06fa8 <_Min_Stack_Size+0xe06ba8>
    2280:	0d080000 	stceq	0, cr0, [r8, #-0]
    2284:	3a080300 	bcc	202e8c <_Min_Stack_Size+0x202a8c>
    2288:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    228c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2290:	01040900 	tsteq	r4, r0, lsl #18
    2294:	0b0b0e03 	bleq	2c5aa8 <_Min_Stack_Size+0x2c56a8>
    2298:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    229c:	00001301 	andeq	r1, r0, r1, lsl #6
    22a0:	0300280a 	movweq	r2, #2058	; 0x80a
    22a4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    22a8:	012e0b00 	teqeq	lr, r0, lsl #22
    22ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    22b0:	0b3b0b3a 	bleq	ec4fa0 <_Min_Stack_Size+0xec4ba0>
    22b4:	13491927 	movtne	r1, #39207	; 0x9927
    22b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    22bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    22c0:	00130119 	andseq	r0, r3, r9, lsl r1
    22c4:	00050c00 	andeq	r0, r5, r0, lsl #24
    22c8:	0b3a0803 	bleq	e842dc <_Min_Stack_Size+0xe83edc>
    22cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22d0:	00001702 	andeq	r1, r0, r2, lsl #14
    22d4:	0300340d 	movweq	r3, #1037	; 0x40d
    22d8:	3b0b3a08 	blcc	2d0b00 <_Min_Stack_Size+0x2d0700>
    22dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    22e0:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    22e4:	01018289 	smlabbeq	r1, r9, r2, r8
    22e8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    22ec:	00001301 	andeq	r1, r0, r1, lsl #6
    22f0:	01828a0f 	orreq	r8, r2, pc, lsl #20
    22f4:	91180200 	tstls	r8, r0, lsl #4
    22f8:	00001842 	andeq	r1, r0, r2, asr #16
    22fc:	01828910 	orreq	r8, r2, r0, lsl r9
    2300:	31011100 	mrscc	r1, (UNDEF: 17)
    2304:	11000013 	tstne	r0, r3, lsl r0
    2308:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    230c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2310:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2314:	0000193c 	andeq	r1, r0, ip, lsr r9
    2318:	3f012e12 	svccc	0x00012e12
    231c:	3a0e0319 	bcc	382f88 <_Min_Stack_Size+0x382b88>
    2320:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2324:	3c134919 	ldccc	9, cr4, [r3], {25}
    2328:	00130119 	andseq	r0, r3, r9, lsl r1
    232c:	00051300 	andeq	r1, r5, r0, lsl #6
    2330:	00001349 	andeq	r1, r0, r9, asr #6
    2334:	3f012e14 	svccc	0x00012e14
    2338:	3a080319 	bcc	202fa4 <_Min_Stack_Size+0x202ba4>
    233c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2340:	3c134919 	ldccc	9, cr4, [r3], {25}
    2344:	00130119 	andseq	r0, r3, r9, lsl r1
    2348:	012e1500 	teqeq	lr, r0, lsl #10
    234c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2354:	13491927 	movtne	r1, #39207	; 0x9927
    2358:	1301193c 	movwne	r1, #6460	; 0x193c
    235c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    2360:	03193f00 	tsteq	r9, #0, 30
    2364:	3b0b3a0e 	blcc	2d0ba4 <_Min_Stack_Size+0x2d07a4>
    2368:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    236c:	00193c13 	andseq	r3, r9, r3, lsl ip
    2370:	11010000 	mrsne	r0, (UNDEF: 1)
    2374:	130e2501 	movwne	r2, #58625	; 0xe501
    2378:	1b0e030b 	blne	382fac <_Min_Stack_Size+0x382bac>
    237c:	1117550e 	tstne	r7, lr, lsl #10
    2380:	00171001 	andseq	r1, r7, r1
    2384:	00240200 	eoreq	r0, r4, r0, lsl #4
    2388:	0b3e0b0b 	bleq	f84fbc <_Min_Stack_Size+0xf84bbc>
    238c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2390:	0b002403 	bleq	b3a4 <_Min_Stack_Size+0xafa4>
    2394:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2398:	04000008 	streq	r0, [r0], #-8
    239c:	0b0b000f 	bleq	2c23e0 <_Min_Stack_Size+0x2c1fe0>
    23a0:	00001349 	andeq	r1, r0, r9, asr #6
    23a4:	03011305 	movweq	r1, #4869	; 0x1305
    23a8:	3a0b0b0e 	bcc	2c4fe8 <_Min_Stack_Size+0x2c4be8>
    23ac:	01053b0b 	tsteq	r5, fp, lsl #22
    23b0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    23b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    23b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    23bc:	0b381349 	bleq	e070e8 <_Min_Stack_Size+0xe06ce8>
    23c0:	0d070000 	stceq	0, cr0, [r7, #-0]
    23c4:	3a080300 	bcc	202fcc <_Min_Stack_Size+0x202bcc>
    23c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    23d0:	01040800 	tsteq	r4, r0, lsl #16
    23d4:	0b0b0e03 	bleq	2c5be8 <_Min_Stack_Size+0x2c57e8>
    23d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    23dc:	00001301 	andeq	r1, r0, r1, lsl #6
    23e0:	03002809 	movweq	r2, #2057	; 0x809
    23e4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    23e8:	012e0a00 	teqeq	lr, r0, lsl #20
    23ec:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    23f0:	0b3b0b3a 	bleq	ec50e0 <_Min_Stack_Size+0xec4ce0>
    23f4:	13491927 	movtne	r1, #39207	; 0x9927
    23f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2400:	00130119 	andseq	r0, r3, r9, lsl r1
    2404:	00050b00 	andeq	r0, r5, r0, lsl #22
    2408:	0b3a0803 	bleq	e8441c <_Min_Stack_Size+0xe8401c>
    240c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2410:	00001702 	andeq	r1, r0, r2, lsl #14
    2414:	0300340c 	movweq	r3, #1036	; 0x40c
    2418:	3b0b3a08 	blcc	2d0c40 <_Min_Stack_Size+0x2d0840>
    241c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2420:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    2424:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2428:	0b3b0b3a 	bleq	ec5118 <_Min_Stack_Size+0xec4d18>
    242c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2430:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    2434:	11010182 	smlabbne	r1, r2, r1, r0
    2438:	01133101 	tsteq	r3, r1, lsl #2
    243c:	0f000013 	svceq	0x00000013
    2440:	0001828a 	andeq	r8, r1, sl, lsl #5
    2444:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2448:	10000018 	andne	r0, r0, r8, lsl r0
    244c:	00018289 	andeq	r8, r1, r9, lsl #5
    2450:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2454:	34110000 	ldrcc	r0, [r1], #-0
    2458:	3a0e0300 	bcc	383060 <_Min_Stack_Size+0x382c60>
    245c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2460:	3c193f13 	ldccc	15, cr3, [r9], {19}
    2464:	12000019 	andne	r0, r0, #25
    2468:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    246c:	0b3a0e03 	bleq	e85c80 <_Min_Stack_Size+0xe85880>
    2470:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2474:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2478:	00001301 	andeq	r1, r0, r1, lsl #6
    247c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2480:	14000013 	strne	r0, [r0], #-19
    2484:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2488:	0b3a0e03 	bleq	e85c9c <_Min_Stack_Size+0xe8589c>
    248c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2490:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2494:	00001301 	andeq	r1, r0, r1, lsl #6
    2498:	3f002e15 	svccc	0x00002e15
    249c:	3a0e0319 	bcc	383108 <_Min_Stack_Size+0x382d08>
    24a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    24a4:	3c134919 	ldccc	9, cr4, [r3], {25}
    24a8:	16000019 			; <UNDEFINED> instruction: 0x16000019
    24ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24b0:	0b3a0e03 	bleq	e85cc4 <_Min_Stack_Size+0xe858c4>
    24b4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    24b8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    24bc:	01000000 	mrseq	r0, (UNDEF: 0)
    24c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    24c4:	0e030b13 	vmoveq.32	d3[0], r0
    24c8:	17550e1b 	smmlane	r5, fp, lr, r0
    24cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
    24d0:	24020000 	strcs	r0, [r2], #-0
    24d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    24d8:	000e030b 	andeq	r0, lr, fp, lsl #6
    24dc:	00240300 	eoreq	r0, r4, r0, lsl #6
    24e0:	0b3e0b0b 	bleq	f85114 <_Min_Stack_Size+0xf84d14>
    24e4:	00000803 	andeq	r0, r0, r3, lsl #16
    24e8:	03001604 	movweq	r1, #1540	; 0x604
    24ec:	3b0b3a0e 	blcc	2d0d2c <_Min_Stack_Size+0x2d092c>
    24f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    24f4:	01130500 	tsteq	r3, r0, lsl #10
    24f8:	0b3a0b0b 	bleq	e8512c <_Min_Stack_Size+0xe84d2c>
    24fc:	1301053b 	movwne	r0, #5435	; 0x153b
    2500:	0d060000 	stceq	0, cr0, [r6, #-0]
    2504:	3a080300 	bcc	20310c <_Min_Stack_Size+0x202d0c>
    2508:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    250c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2510:	01170700 	tsteq	r7, r0, lsl #14
    2514:	0b3a0b0b 	bleq	e85148 <_Min_Stack_Size+0xe84d48>
    2518:	1301053b 	movwne	r0, #5435	; 0x153b
    251c:	0d080000 	stceq	0, cr0, [r8, #-0]
    2520:	3a0e0300 	bcc	383128 <_Min_Stack_Size+0x382d28>
    2524:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2528:	09000013 	stmdbeq	r0, {r0, r1, r4}
    252c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2530:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2534:	00001349 	andeq	r1, r0, r9, asr #6
    2538:	3f012e0a 	svccc	0x00012e0a
    253c:	3a0e0319 	bcc	3831a8 <_Min_Stack_Size+0x382da8>
    2540:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2544:	11134919 	tstne	r3, r9, lsl r9
    2548:	40061201 	andmi	r1, r6, r1, lsl #4
    254c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2550:	00001301 	andeq	r1, r0, r1, lsl #6
    2554:	0300050b 	movweq	r0, #1291	; 0x50b
    2558:	3b0b3a08 	blcc	2d0d80 <_Min_Stack_Size+0x2d0980>
    255c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2560:	0c000017 	stceq	0, cr0, [r0], {23}
    2564:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2568:	0b3b0b3a 	bleq	ec5258 <_Min_Stack_Size+0xec4e58>
    256c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2570:	0b0d0000 	bleq	342578 <_Min_Stack_Size+0x342178>
    2574:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2578:	00130106 	andseq	r0, r3, r6, lsl #2
    257c:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2580:	0b3a0e03 	bleq	e85d94 <_Min_Stack_Size+0xe85994>
    2584:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2588:	00001702 	andeq	r1, r0, r2, lsl #14
    258c:	55010b0f 	strpl	r0, [r1, #-2831]	; 0xb0f
    2590:	00130117 	andseq	r0, r3, r7, lsl r1
    2594:	00341000 	eorseq	r1, r4, r0
    2598:	0b3a0803 	bleq	e845ac <_Min_Stack_Size+0xe841ac>
    259c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25a0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    25a4:	11000182 	smlabbne	r0, r2, r1, r0
    25a8:	00133101 	andseq	r3, r3, r1, lsl #2
    25ac:	00341200 	eorseq	r1, r4, r0, lsl #4
    25b0:	0b3a0803 	bleq	e845c4 <_Min_Stack_Size+0xe841c4>
    25b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25b8:	00000a1c 	andeq	r0, r0, ip, lsl sl
    25bc:	49002613 	stmdbmi	r0, {r0, r1, r4, r9, sl, sp}
    25c0:	14000013 	strne	r0, [r0], #-19
    25c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    25c8:	0b3b0b3a 	bleq	ec52b8 <_Min_Stack_Size+0xec4eb8>
    25cc:	0a1c1349 	beq	7072f8 <_Min_Stack_Size+0x706ef8>
    25d0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    25d4:	03193f01 	tsteq	r9, #1, 30
    25d8:	3b0b3a0e 	blcc	2d0e18 <_Min_Stack_Size+0x2d0a18>
    25dc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    25e0:	01193c13 	tsteq	r9, r3, lsl ip
    25e4:	16000013 			; <UNDEFINED> instruction: 0x16000013
    25e8:	13490005 	movtne	r0, #36869	; 0x9005
    25ec:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    25f0:	03193f01 	tsteq	r9, #1, 30
    25f4:	3b0b3a0e 	blcc	2d0e34 <_Min_Stack_Size+0x2d0a34>
    25f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    25fc:	00193c13 	andseq	r3, r9, r3, lsl ip
    2600:	11010000 	mrsne	r0, (UNDEF: 1)
    2604:	130e2501 	movwne	r2, #58625	; 0xe501
    2608:	1b0e030b 	blne	38323c <_Min_Stack_Size+0x382e3c>
    260c:	1117550e 	tstne	r7, lr, lsl #10
    2610:	00171001 	andseq	r1, r7, r1
    2614:	00240200 	eoreq	r0, r4, r0, lsl #4
    2618:	0b3e0b0b 	bleq	f8524c <_Min_Stack_Size+0xf84e4c>
    261c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2620:	0b002403 	bleq	b634 <_Min_Stack_Size+0xb234>
    2624:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2628:	04000008 	streq	r0, [r0], #-8
    262c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2630:	0b3b0b3a 	bleq	ec5320 <_Min_Stack_Size+0xec4f20>
    2634:	00001349 	andeq	r1, r0, r9, asr #6
    2638:	0b000f05 	bleq	6254 <_Min_Stack_Size+0x5e54>
    263c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2640:	00260600 	eoreq	r0, r6, r0, lsl #12
    2644:	00001349 	andeq	r1, r0, r9, asr #6
    2648:	0b011307 	bleq	4726c <_Min_Stack_Size+0x46e6c>
    264c:	3b0b3a0b 	blcc	2d0e80 <_Min_Stack_Size+0x2d0a80>
    2650:	00130105 	andseq	r0, r3, r5, lsl #2
    2654:	000d0800 	andeq	r0, sp, r0, lsl #16
    2658:	0b3a0803 	bleq	e8466c <_Min_Stack_Size+0xe8426c>
    265c:	1349053b 	movtne	r0, #38203	; 0x953b
    2660:	00000b38 	andeq	r0, r0, r8, lsr fp
    2664:	0b011709 	bleq	48290 <_Min_Stack_Size+0x47e90>
    2668:	3b0b3a0b 	blcc	2d0e9c <_Min_Stack_Size+0x2d0a9c>
    266c:	00130105 	andseq	r0, r3, r5, lsl #2
    2670:	000d0a00 	andeq	r0, sp, r0, lsl #20
    2674:	0b3a0e03 	bleq	e85e88 <_Min_Stack_Size+0xe85a88>
    2678:	1349053b 	movtne	r0, #38203	; 0x953b
    267c:	160b0000 	strne	r0, [fp], -r0
    2680:	3a0e0300 	bcc	383288 <_Min_Stack_Size+0x382e88>
    2684:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2688:	0c000013 	stceq	0, cr0, [r0], {19}
    268c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2690:	0b3a0e03 	bleq	e85ea4 <_Min_Stack_Size+0xe85aa4>
    2694:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2698:	01111349 	tsteq	r1, r9, asr #6
    269c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    26a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    26a4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    26a8:	08030005 	stmdaeq	r3, {r0, r2}
    26ac:	0b3b0b3a 	bleq	ec539c <_Min_Stack_Size+0xec4f9c>
    26b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    26b4:	340e0000 	strcc	r0, [lr], #-0
    26b8:	3a080300 	bcc	2032c0 <_Min_Stack_Size+0x202ec0>
    26bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26c0:	00170213 	andseq	r0, r7, r3, lsl r2
    26c4:	00340f00 	eorseq	r0, r4, r0, lsl #30
    26c8:	0b3a0e03 	bleq	e85edc <_Min_Stack_Size+0xe85adc>
    26cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    26d0:	00001702 	andeq	r1, r0, r2, lsl #14
    26d4:	55010b10 	strpl	r0, [r1, #-2832]	; 0xb10
    26d8:	00130117 	andseq	r0, r3, r7, lsl r1
    26dc:	010b1100 	mrseq	r1, (UNDEF: 27)
    26e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e4:	00001301 	andeq	r1, r0, r1, lsl #6
    26e8:	03003412 	movweq	r3, #1042	; 0x412
    26ec:	3b0b3a0e 	blcc	2d0f2c <_Min_Stack_Size+0x2d0b2c>
    26f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    26f4:	00341300 	eorseq	r1, r4, r0, lsl #6
    26f8:	0b3a0e03 	bleq	e85f0c <_Min_Stack_Size+0xe85b0c>
    26fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2700:	00001802 	andeq	r1, r0, r2, lsl #16
    2704:	55010b14 	strpl	r0, [r1, #-2836]	; 0xb14
    2708:	15000017 	strne	r0, [r0, #-23]
    270c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2710:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2714:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2718:	34160000 	ldrcc	r0, [r6], #-0
    271c:	3a0e0300 	bcc	383324 <_Min_Stack_Size+0x382f24>
    2720:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2724:	00170213 	andseq	r0, r7, r3, lsl r2
    2728:	00341700 	eorseq	r1, r4, r0, lsl #14
    272c:	0b3a0e03 	bleq	e85f40 <_Min_Stack_Size+0xe85b40>
    2730:	1349053b 	movtne	r0, #38203	; 0x953b
    2734:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    2738:	11000182 	smlabbne	r0, r2, r1, r0
    273c:	00133101 	andseq	r3, r3, r1, lsl #2
    2740:	82891900 	addhi	r1, r9, #0, 18
    2744:	01110101 	tsteq	r1, r1, lsl #2
    2748:	31194295 			; <UNDEFINED> instruction: 0x31194295
    274c:	00130113 	andseq	r0, r3, r3, lsl r1
    2750:	828a1a00 	addhi	r1, sl, #0, 20
    2754:	18020001 	stmdane	r2, {r0}
    2758:	00184291 	mulseq	r8, r1, r2
    275c:	82891b00 	addhi	r1, r9, #0, 22
    2760:	01110001 	tsteq	r1, r1
    2764:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2768:	1c000013 	stcne	0, cr0, [r0], {19}
    276c:	01018289 	smlabbeq	r1, r9, r2, r8
    2770:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2774:	011d0000 	tsteq	sp, r0
    2778:	01134901 	tsteq	r3, r1, lsl #18
    277c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2780:	13490021 	movtne	r0, #36897	; 0x9021
    2784:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2788:	0300341f 	movweq	r3, #1055	; 0x41f
    278c:	3b0b3a08 	blcc	2d0fb4 <_Min_Stack_Size+0x2d0bb4>
    2790:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2794:	20000018 	andcs	r0, r0, r8, lsl r0
    2798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    279c:	0b3b0b3a 	bleq	ec548c <_Min_Stack_Size+0xec508c>
    27a0:	0a1c1349 	beq	7074cc <_Min_Stack_Size+0x7070cc>
    27a4:	34210000 	strtcc	r0, [r1], #-0
    27a8:	3a080300 	bcc	2033b0 <_Min_Stack_Size+0x202fb0>
    27ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27b0:	000a1c13 	andeq	r1, sl, r3, lsl ip
    27b4:	012e2200 	teqeq	lr, r0, lsl #4
    27b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27bc:	0b3b0b3a 	bleq	ec54ac <_Min_Stack_Size+0xec50ac>
    27c0:	13491927 	movtne	r1, #39207	; 0x9927
    27c4:	1301193c 	movwne	r1, #6460	; 0x193c
    27c8:	05230000 	streq	r0, [r3, #-0]!
    27cc:	00134900 	andseq	r4, r3, r0, lsl #18
    27d0:	012e2400 	teqeq	lr, r0, lsl #8
    27d4:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    27d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    27dc:	13491927 	movtne	r1, #39207	; 0x9927
    27e0:	1301193c 	movwne	r1, #6460	; 0x193c
    27e4:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    27e8:	03193f01 	tsteq	r9, #1, 30
    27ec:	3b0b3a0e 	blcc	2d102c <_Min_Stack_Size+0x2d0c2c>
    27f0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    27f4:	00193c13 	andseq	r3, r9, r3, lsl ip
    27f8:	11010000 	mrsne	r0, (UNDEF: 1)
    27fc:	130e2501 	movwne	r2, #58625	; 0xe501
    2800:	1b0e030b 	blne	383434 <_Min_Stack_Size+0x383034>
    2804:	1117550e 	tstne	r7, lr, lsl #10
    2808:	00171001 	andseq	r1, r7, r1
    280c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2810:	0b3e0b0b 	bleq	f85444 <_Min_Stack_Size+0xf85044>
    2814:	00000e03 	andeq	r0, r0, r3, lsl #28
    2818:	0b002403 	bleq	b82c <_Min_Stack_Size+0xb42c>
    281c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2820:	04000008 	streq	r0, [r0], #-8
    2824:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2828:	0b3b0b3a 	bleq	ec5518 <_Min_Stack_Size+0xec5118>
    282c:	00001349 	andeq	r1, r0, r9, asr #6
    2830:	0b011305 	bleq	4744c <_Min_Stack_Size+0x4704c>
    2834:	3b0b3a0b 	blcc	2d1068 <_Min_Stack_Size+0x2d0c68>
    2838:	00130105 	andseq	r0, r3, r5, lsl #2
    283c:	000d0600 	andeq	r0, sp, r0, lsl #12
    2840:	0b3a0803 	bleq	e84854 <_Min_Stack_Size+0xe84454>
    2844:	1349053b 	movtne	r0, #38203	; 0x953b
    2848:	00000b38 	andeq	r0, r0, r8, lsr fp
    284c:	0b011707 	bleq	48470 <_Min_Stack_Size+0x48070>
    2850:	3b0b3a0b 	blcc	2d1084 <_Min_Stack_Size+0x2d0c84>
    2854:	00130105 	andseq	r0, r3, r5, lsl #2
    2858:	000d0800 	andeq	r0, sp, r0, lsl #16
    285c:	0b3a0e03 	bleq	e86070 <_Min_Stack_Size+0xe85c70>
    2860:	1349053b 	movtne	r0, #38203	; 0x953b
    2864:	16090000 	strne	r0, [r9], -r0
    2868:	3a0e0300 	bcc	383470 <_Min_Stack_Size+0x383070>
    286c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2870:	0a000013 	beq	28c4 <_Min_Stack_Size+0x24c4>
    2874:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2878:	0b3a0e03 	bleq	e8608c <_Min_Stack_Size+0xe85c8c>
    287c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2880:	01111349 	tsteq	r1, r9, asr #6
    2884:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2888:	01194296 			; <UNDEFINED> instruction: 0x01194296
    288c:	0b000013 	bleq	28e0 <_Min_Stack_Size+0x24e0>
    2890:	08030005 	stmdaeq	r3, {r0, r2}
    2894:	0b3b0b3a 	bleq	ec5584 <_Min_Stack_Size+0xec5184>
    2898:	17021349 	strne	r1, [r2, -r9, asr #6]
    289c:	340c0000 	strcc	r0, [ip], #-0
    28a0:	3a080300 	bcc	2034a8 <_Min_Stack_Size+0x2030a8>
    28a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28a8:	00170213 	andseq	r0, r7, r3, lsl r2
    28ac:	00340d00 	eorseq	r0, r4, r0, lsl #26
    28b0:	0b3a0e03 	bleq	e860c4 <_Min_Stack_Size+0xe85cc4>
    28b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    28bc:	11010b0e 	tstne	r1, lr, lsl #22
    28c0:	01061201 	tsteq	r6, r1, lsl #4
    28c4:	0f000013 	svceq	0x00000013
    28c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28cc:	0b3b0b3a 	bleq	ec55bc <_Min_Stack_Size+0xec51bc>
    28d0:	17021349 	strne	r1, [r2, -r9, asr #6]
    28d4:	0b100000 	bleq	4028dc <_Min_Stack_Size+0x4024dc>
    28d8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    28dc:	11000006 	tstne	r0, r6
    28e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28e4:	0b3b0b3a 	bleq	ec55d4 <_Min_Stack_Size+0xec51d4>
    28e8:	00001349 	andeq	r1, r0, r9, asr #6
    28ec:	03003412 	movweq	r3, #1042	; 0x412
    28f0:	3b0b3a08 	blcc	2d1118 <_Min_Stack_Size+0x2d0d18>
    28f4:	1c13490b 	ldcne	9, cr4, [r3], {11}
    28f8:	1300000a 	movwne	r0, #10
    28fc:	13490026 	movtne	r0, #36902	; 0x9026
    2900:	34140000 	ldrcc	r0, [r4], #-0
    2904:	3a0e0300 	bcc	38350c <_Min_Stack_Size+0x38310c>
    2908:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    290c:	000a1c13 	andeq	r1, sl, r3, lsl ip
    2910:	11010000 	mrsne	r0, (UNDEF: 1)
    2914:	130e2501 	movwne	r2, #58625	; 0xe501
    2918:	1b0e030b 	blne	38354c <_Min_Stack_Size+0x38314c>
    291c:	1117550e 	tstne	r7, lr, lsl #10
    2920:	00171001 	andseq	r1, r7, r1
    2924:	00240200 	eoreq	r0, r4, r0, lsl #4
    2928:	0b3e0b0b 	bleq	f8555c <_Min_Stack_Size+0xf8515c>
    292c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2930:	0b002403 	bleq	b944 <_Min_Stack_Size+0xb544>
    2934:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2938:	04000008 	streq	r0, [r0], #-8
    293c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2940:	0b3b0b3a 	bleq	ec5630 <_Min_Stack_Size+0xec5230>
    2944:	00001349 	andeq	r1, r0, r9, asr #6
    2948:	3f012e05 	svccc	0x00012e05
    294c:	3a0e0319 	bcc	3835b8 <_Min_Stack_Size+0x3831b8>
    2950:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2954:	11134919 	tstne	r3, r9, lsl r9
    2958:	40061201 	andmi	r1, r6, r1, lsl #4
    295c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2960:	05060000 	streq	r0, [r6, #-0]
    2964:	3a080300 	bcc	20356c <_Min_Stack_Size+0x20316c>
    2968:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    296c:	00170213 	andseq	r0, r7, r3, lsl r2
    2970:	00340700 	eorseq	r0, r4, r0, lsl #14
    2974:	0b3a0803 	bleq	e84988 <_Min_Stack_Size+0xe84588>
    2978:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    297c:	00001702 	andeq	r1, r0, r2, lsl #14
    2980:	01110100 	tsteq	r1, r0, lsl #2
    2984:	0b130e25 	bleq	4c6220 <_Min_Stack_Size+0x4c5e20>
    2988:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    298c:	01111755 	tsteq	r1, r5, asr r7
    2990:	00001710 	andeq	r1, r0, r0, lsl r7
    2994:	0b002402 	bleq	b9a4 <_Min_Stack_Size+0xb5a4>
    2998:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    299c:	0300000e 	movweq	r0, #14
    29a0:	0b0b0024 	bleq	2c2a38 <_Min_Stack_Size+0x2c2638>
    29a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    29a8:	16040000 	strne	r0, [r4], -r0
    29ac:	3a0e0300 	bcc	3835b4 <_Min_Stack_Size+0x3831b4>
    29b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29b4:	05000013 	streq	r0, [r0, #-19]
    29b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29bc:	0b3a0e03 	bleq	e861d0 <_Min_Stack_Size+0xe85dd0>
    29c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    29c4:	01111349 	tsteq	r1, r9, asr #6
    29c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    29cc:	00194297 	mulseq	r9, r7, r2
    29d0:	00050600 	andeq	r0, r5, r0, lsl #12
    29d4:	0b3a0803 	bleq	e849e8 <_Min_Stack_Size+0xe845e8>
    29d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29dc:	00001702 	andeq	r1, r0, r2, lsl #14
    29e0:	03003407 	movweq	r3, #1031	; 0x407
    29e4:	3b0b3a08 	blcc	2d120c <_Min_Stack_Size+0x2d0e0c>
    29e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    29ec:	00000017 	andeq	r0, r0, r7, lsl r0
    29f0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    29f4:	030b130e 	movweq	r1, #45838	; 0xb30e
    29f8:	100e1b0e 	andne	r1, lr, lr, lsl #22
    29fc:	02000017 	andeq	r0, r0, #23
    2a00:	0b0b0024 	bleq	2c2a98 <_Min_Stack_Size+0x2c2698>
    2a04:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2a08:	24030000 	strcs	r0, [r3], #-0
    2a0c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a10:	000e030b 	andeq	r0, lr, fp, lsl #6
    2a14:	01040400 	tsteq	r4, r0, lsl #8
    2a18:	0b0b0e03 	bleq	2c622c <_Min_Stack_Size+0x2c5e2c>
    2a1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2a20:	00001301 	andeq	r1, r0, r1, lsl #6
    2a24:	03002805 	movweq	r2, #2053	; 0x805
    2a28:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2a2c:	00340600 	eorseq	r0, r4, r0, lsl #12
    2a30:	0b3a0e03 	bleq	e86244 <_Min_Stack_Size+0xe85e44>
    2a34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2a38:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a40:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2a44:	0e030b13 	vmoveq.32	d3[0], r0
    2a48:	17550e1b 	smmlane	r5, fp, lr, r0
    2a4c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2a50:	24020000 	strcs	r0, [r2], #-0
    2a54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a58:	0008030b 	andeq	r0, r8, fp, lsl #6
    2a5c:	00240300 	eoreq	r0, r4, r0, lsl #6
    2a60:	0b3e0b0b 	bleq	f85694 <_Min_Stack_Size+0xf85294>
    2a64:	00000e03 	andeq	r0, r0, r3, lsl #28
    2a68:	0b000f04 	bleq	6680 <_Min_Stack_Size+0x6280>
    2a6c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a70:	01130500 	tsteq	r3, r0, lsl #10
    2a74:	0b0b0e03 	bleq	2c6288 <_Min_Stack_Size+0x2c5e88>
    2a78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2a7c:	00001301 	andeq	r1, r0, r1, lsl #6
    2a80:	03000d06 	movweq	r0, #3334	; 0xd06
    2a84:	3b0b3a0e 	blcc	2d12c4 <_Min_Stack_Size+0x2d0ec4>
    2a88:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2a8c:	0700000b 	streq	r0, [r0, -fp]
    2a90:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2a94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2a98:	0b381349 	bleq	e077c4 <_Min_Stack_Size+0xe073c4>
    2a9c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2aa0:	03193f01 	tsteq	r9, #1, 30
    2aa4:	3b0b3a0e 	blcc	2d12e4 <_Min_Stack_Size+0x2d0ee4>
    2aa8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2aac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2ab0:	97184006 	ldrls	r4, [r8, -r6]
    2ab4:	13011942 	movwne	r1, #6466	; 0x1942
    2ab8:	05090000 	streq	r0, [r9, #-0]
    2abc:	3a080300 	bcc	2036c4 <_Min_Stack_Size+0x2032c4>
    2ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ac4:	00170213 	andseq	r0, r7, r3, lsl r2
    2ac8:	00340a00 	eorseq	r0, r4, r0, lsl #20
    2acc:	0b3a0803 	bleq	e84ae0 <_Min_Stack_Size+0xe846e0>
    2ad0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ad4:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2ad8:	01110100 	tsteq	r1, r0, lsl #2
    2adc:	0b130e25 	bleq	4c6378 <_Min_Stack_Size+0x4c5f78>
    2ae0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2ae4:	01111755 	tsteq	r1, r5, asr r7
    2ae8:	00001710 	andeq	r1, r0, r0, lsl r7
    2aec:	0b002402 	bleq	bafc <_Min_Stack_Size+0xb6fc>
    2af0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2af4:	03000008 	movweq	r0, #8
    2af8:	0b0b0024 	bleq	2c2b90 <_Min_Stack_Size+0x2c2790>
    2afc:	0e030b3e 	vmoveq.16	d3[0], r0
    2b00:	0f040000 	svceq	0x00040000
    2b04:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2b08:	05000013 	streq	r0, [r0, #-19]
    2b0c:	13490026 	movtne	r0, #36902	; 0x9026
    2b10:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2b14:	03193f01 	tsteq	r9, #1, 30
    2b18:	3b0b3a08 	blcc	2d1340 <_Min_Stack_Size+0x2d0f40>
    2b1c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2b20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2b24:	97184006 	ldrls	r4, [r8, -r6]
    2b28:	00001942 	andeq	r1, r0, r2, asr #18
    2b2c:	03000507 	movweq	r0, #1287	; 0x507
    2b30:	3b0b3a0e 	blcc	2d1370 <_Min_Stack_Size+0x2d0f70>
    2b34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b38:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    2b3c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2b40:	0b3b0b3a 	bleq	ec5830 <_Min_Stack_Size+0xec5430>
    2b44:	0a1c1349 	beq	707870 <_Min_Stack_Size+0x707470>
    2b48:	01000000 	mrseq	r0, (UNDEF: 0)
    2b4c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2b50:	0e030b13 	vmoveq.32	d3[0], r0
    2b54:	17550e1b 	smmlane	r5, fp, lr, r0
    2b58:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2b5c:	24020000 	strcs	r0, [r2], #-0
    2b60:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2b64:	000e030b 	andeq	r0, lr, fp, lsl #6
    2b68:	00240300 	eoreq	r0, r4, r0, lsl #6
    2b6c:	0b3e0b0b 	bleq	f857a0 <_Min_Stack_Size+0xf853a0>
    2b70:	00000803 	andeq	r0, r0, r3, lsl #16
    2b74:	03001604 	movweq	r1, #1540	; 0x604
    2b78:	3b0b3a0e 	blcc	2d13b8 <_Min_Stack_Size+0x2d0fb8>
    2b7c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b80:	01130500 	tsteq	r3, r0, lsl #10
    2b84:	0b3a0b0b 	bleq	e857b8 <_Min_Stack_Size+0xe853b8>
    2b88:	1301053b 	movwne	r0, #5435	; 0x153b
    2b8c:	0d060000 	stceq	0, cr0, [r6, #-0]
    2b90:	3a080300 	bcc	203798 <_Min_Stack_Size+0x203398>
    2b94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b98:	000b3813 	andeq	r3, fp, r3, lsl r8
    2b9c:	01170700 	tsteq	r7, r0, lsl #14
    2ba0:	0b3a0b0b 	bleq	e857d4 <_Min_Stack_Size+0xe853d4>
    2ba4:	1301053b 	movwne	r0, #5435	; 0x153b
    2ba8:	0d080000 	stceq	0, cr0, [r8, #-0]
    2bac:	3a0e0300 	bcc	3837b4 <_Min_Stack_Size+0x3833b4>
    2bb0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bb4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2bb8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2bbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2bc0:	00001349 	andeq	r1, r0, r9, asr #6
    2bc4:	3f012e0a 	svccc	0x00012e0a
    2bc8:	3a0e0319 	bcc	383834 <_Min_Stack_Size+0x383434>
    2bcc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2bd0:	11134919 	tstne	r3, r9, lsl r9
    2bd4:	40061201 	andmi	r1, r6, r1, lsl #4
    2bd8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2bdc:	00001301 	andeq	r1, r0, r1, lsl #6
    2be0:	0300050b 	movweq	r0, #1291	; 0x50b
    2be4:	3b0b3a08 	blcc	2d140c <_Min_Stack_Size+0x2d100c>
    2be8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2bec:	0c000017 	stceq	0, cr0, [r0], {23}
    2bf0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2bf4:	0b3b0b3a 	bleq	ec58e4 <_Min_Stack_Size+0xec54e4>
    2bf8:	17021349 	strne	r1, [r2, -r9, asr #6]
    2bfc:	340d0000 	strcc	r0, [sp], #-0
    2c00:	3a080300 	bcc	203808 <_Min_Stack_Size+0x203408>
    2c04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c08:	00180213 	andseq	r0, r8, r3, lsl r2
    2c0c:	010b0e00 	tsteq	fp, r0, lsl #28
    2c10:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c14:	00001301 	andeq	r1, r0, r1, lsl #6
    2c18:	0300340f 	movweq	r3, #1039	; 0x40f
    2c1c:	3b0b3a0e 	blcc	2d145c <_Min_Stack_Size+0x2d105c>
    2c20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c24:	10000017 	andne	r0, r0, r7, lsl r0
    2c28:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2c2c:	00001301 	andeq	r1, r0, r1, lsl #6
    2c30:	11010b11 	tstne	r1, r1, lsl fp
    2c34:	00061201 	andeq	r1, r6, r1, lsl #4
    2c38:	00341200 	eorseq	r1, r4, r0, lsl #4
    2c3c:	0b3a0e03 	bleq	e86450 <_Min_Stack_Size+0xe86050>
    2c40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c44:	35130000 	ldrcc	r0, [r3, #-0]
    2c48:	00134900 	andseq	r4, r3, r0, lsl #18
    2c4c:	01011400 	tsteq	r1, r0, lsl #8
    2c50:	13011349 	movwne	r1, #4937	; 0x1349
    2c54:	21150000 	tstcs	r5, r0
    2c58:	2f134900 	svccs	0x00134900
    2c5c:	1600000b 	strne	r0, [r0], -fp
    2c60:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2c64:	0b3b0b3a 	bleq	ec5954 <_Min_Stack_Size+0xec5554>
    2c68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2c6c:	26170000 	ldrcs	r0, [r7], -r0
    2c70:	00134900 	andseq	r4, r3, r0, lsl #18
    2c74:	11010000 	mrsne	r0, (UNDEF: 1)
    2c78:	130e2501 	movwne	r2, #58625	; 0xe501
    2c7c:	1b0e030b 	blne	3838b0 <_Min_Stack_Size+0x3834b0>
    2c80:	1117550e 	tstne	r7, lr, lsl #10
    2c84:	00171001 	andseq	r1, r7, r1
    2c88:	00240200 	eoreq	r0, r4, r0, lsl #4
    2c8c:	0b3e0b0b 	bleq	f858c0 <_Min_Stack_Size+0xf854c0>
    2c90:	00000e03 	andeq	r0, r0, r3, lsl #28
    2c94:	0b002403 	bleq	bca8 <_Min_Stack_Size+0xb8a8>
    2c98:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2c9c:	04000008 	streq	r0, [r0], #-8
    2ca0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ca4:	0b3b0b3a 	bleq	ec5994 <_Min_Stack_Size+0xec5594>
    2ca8:	00001349 	andeq	r1, r0, r9, asr #6
    2cac:	0b011305 	bleq	478c8 <_Min_Stack_Size+0x474c8>
    2cb0:	3b0b3a0b 	blcc	2d14e4 <_Min_Stack_Size+0x2d10e4>
    2cb4:	00130105 	andseq	r0, r3, r5, lsl #2
    2cb8:	000d0600 	andeq	r0, sp, r0, lsl #12
    2cbc:	0b3a0803 	bleq	e84cd0 <_Min_Stack_Size+0xe848d0>
    2cc0:	1349053b 	movtne	r0, #38203	; 0x953b
    2cc4:	00000b38 	andeq	r0, r0, r8, lsr fp
    2cc8:	0b011707 	bleq	488ec <_Min_Stack_Size+0x484ec>
    2ccc:	3b0b3a0b 	blcc	2d1500 <_Min_Stack_Size+0x2d1100>
    2cd0:	00130105 	andseq	r0, r3, r5, lsl #2
    2cd4:	000d0800 	andeq	r0, sp, r0, lsl #16
    2cd8:	0b3a0e03 	bleq	e864ec <_Min_Stack_Size+0xe860ec>
    2cdc:	1349053b 	movtne	r0, #38203	; 0x953b
    2ce0:	16090000 	strne	r0, [r9], -r0
    2ce4:	3a0e0300 	bcc	3838ec <_Min_Stack_Size+0x3834ec>
    2ce8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cec:	0a000013 	beq	2d40 <_Min_Stack_Size+0x2940>
    2cf0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2cf4:	0b3a0e03 	bleq	e86508 <_Min_Stack_Size+0xe86108>
    2cf8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2cfc:	01111349 	tsteq	r1, r9, asr #6
    2d00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d04:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2d08:	0b000013 	bleq	2d5c <_Min_Stack_Size+0x295c>
    2d0c:	08030005 	stmdaeq	r3, {r0, r2}
    2d10:	0b3b0b3a 	bleq	ec5a00 <_Min_Stack_Size+0xec5600>
    2d14:	17021349 	strne	r1, [r2, -r9, asr #6]
    2d18:	340c0000 	strcc	r0, [ip], #-0
    2d1c:	3a080300 	bcc	203924 <_Min_Stack_Size+0x203524>
    2d20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d24:	00170213 	andseq	r0, r7, r3, lsl r2
    2d28:	010b0d00 	tsteq	fp, r0, lsl #26
    2d2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2d30:	00001301 	andeq	r1, r0, r1, lsl #6
    2d34:	0300340e 	movweq	r3, #1038	; 0x40e
    2d38:	3b0b3a0e 	blcc	2d1578 <_Min_Stack_Size+0x2d1178>
    2d3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d40:	0f000017 	svceq	0x00000017
    2d44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d48:	0b3b0b3a 	bleq	ec5a38 <_Min_Stack_Size+0xec5638>
    2d4c:	00001349 	andeq	r1, r0, r9, asr #6
    2d50:	55010b10 	strpl	r0, [r1, #-2832]	; 0xb10
    2d54:	00130117 	andseq	r0, r3, r7, lsl r1
    2d58:	82891100 	addhi	r1, r9, #0, 2
    2d5c:	01110101 	tsteq	r1, r1, lsl #2
    2d60:	13011331 	movwne	r1, #4913	; 0x1331
    2d64:	8a120000 	bhi	482d6c <_Min_Stack_Size+0x48296c>
    2d68:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2d6c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2d70:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    2d74:	11010182 	smlabbne	r1, r2, r1, r0
    2d78:	00133101 	andseq	r3, r3, r1, lsl #2
    2d7c:	00341400 	eorseq	r1, r4, r0, lsl #8
    2d80:	0b3a0e03 	bleq	e86594 <_Min_Stack_Size+0xe86194>
    2d84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d88:	00000a1c 	andeq	r0, r0, ip, lsl sl
    2d8c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    2d90:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2d94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2d98:	0b3a0e03 	bleq	e865ac <_Min_Stack_Size+0xe861ac>
    2d9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2da0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2da4:	05170000 	ldreq	r0, [r7, #-0]
    2da8:	00134900 	andseq	r4, r3, r0, lsl #18
    2dac:	11010000 	mrsne	r0, (UNDEF: 1)
    2db0:	130e2501 	movwne	r2, #58625	; 0xe501
    2db4:	1b0e030b 	blne	3839e8 <_Min_Stack_Size+0x3835e8>
    2db8:	1117550e 	tstne	r7, lr, lsl #10
    2dbc:	00171001 	andseq	r1, r7, r1
    2dc0:	00240200 	eoreq	r0, r4, r0, lsl #4
    2dc4:	0b3e0b0b 	bleq	f859f8 <_Min_Stack_Size+0xf855f8>
    2dc8:	00000e03 	andeq	r0, r0, r3, lsl #28
    2dcc:	0b002403 	bleq	bde0 <_Min_Stack_Size+0xb9e0>
    2dd0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2dd4:	04000008 	streq	r0, [r0], #-8
    2dd8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ddc:	0b3b0b3a 	bleq	ec5acc <_Min_Stack_Size+0xec56cc>
    2de0:	00001349 	andeq	r1, r0, r9, asr #6
    2de4:	0b011305 	bleq	47a00 <_Min_Stack_Size+0x47600>
    2de8:	3b0b3a0b 	blcc	2d161c <_Min_Stack_Size+0x2d121c>
    2dec:	00130105 	andseq	r0, r3, r5, lsl #2
    2df0:	000d0600 	andeq	r0, sp, r0, lsl #12
    2df4:	0b3a0803 	bleq	e84e08 <_Min_Stack_Size+0xe84a08>
    2df8:	1349053b 	movtne	r0, #38203	; 0x953b
    2dfc:	00000b38 	andeq	r0, r0, r8, lsr fp
    2e00:	0b011707 	bleq	48a24 <_Min_Stack_Size+0x48624>
    2e04:	3b0b3a0b 	blcc	2d1638 <_Min_Stack_Size+0x2d1238>
    2e08:	00130105 	andseq	r0, r3, r5, lsl #2
    2e0c:	000d0800 	andeq	r0, sp, r0, lsl #16
    2e10:	0b3a0e03 	bleq	e86624 <_Min_Stack_Size+0xe86224>
    2e14:	1349053b 	movtne	r0, #38203	; 0x953b
    2e18:	16090000 	strne	r0, [r9], -r0
    2e1c:	3a0e0300 	bcc	383a24 <_Min_Stack_Size+0x383624>
    2e20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e24:	0a000013 	beq	2e78 <_Min_Stack_Size+0x2a78>
    2e28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2e2c:	0b3a0e03 	bleq	e86640 <_Min_Stack_Size+0xe86240>
    2e30:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e34:	01111349 	tsteq	r1, r9, asr #6
    2e38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2e3c:	00194297 	mulseq	r9, r7, r2
    2e40:	00050b00 	andeq	r0, r5, r0, lsl #22
    2e44:	0b3a0803 	bleq	e84e58 <_Min_Stack_Size+0xe84a58>
    2e48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e4c:	00001802 	andeq	r1, r0, r2, lsl #16
    2e50:	0300050c 	movweq	r0, #1292	; 0x50c
    2e54:	3b0b3a08 	blcc	2d167c <_Min_Stack_Size+0x2d127c>
    2e58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e5c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    2e60:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2e64:	0b3b0b3a 	bleq	ec5b54 <_Min_Stack_Size+0xec5754>
    2e68:	00001349 	andeq	r1, r0, r9, asr #6
    2e6c:	0300340e 	movweq	r3, #1038	; 0x40e
    2e70:	3b0b3a08 	blcc	2d1698 <_Min_Stack_Size+0x2d1298>
    2e74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e78:	0f000017 	svceq	0x00000017
    2e7c:	0111010b 	tsteq	r1, fp, lsl #2
    2e80:	00000612 	andeq	r0, r0, r2, lsl r6
    2e84:	03003410 	movweq	r3, #1040	; 0x410
    2e88:	3b0b3a0e 	blcc	2d16c8 <_Min_Stack_Size+0x2d12c8>
    2e8c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e90:	00000017 	andeq	r0, r0, r7, lsl r0
    2e94:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2e98:	030b130e 	movweq	r1, #45838	; 0xb30e
    2e9c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2ea0:	10011117 	andne	r1, r1, r7, lsl r1
    2ea4:	02000017 	andeq	r0, r0, #23
    2ea8:	0b0b0024 	bleq	2c2f40 <_Min_Stack_Size+0x2c2b40>
    2eac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2eb0:	24030000 	strcs	r0, [r3], #-0
    2eb4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2eb8:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ebc:	00160400 	andseq	r0, r6, r0, lsl #8
    2ec0:	0b3a0e03 	bleq	e866d4 <_Min_Stack_Size+0xe862d4>
    2ec4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ec8:	16050000 	strne	r0, [r5], -r0
    2ecc:	3a0e0300 	bcc	383ad4 <_Min_Stack_Size+0x3836d4>
    2ed0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ed4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2ed8:	0b0b0117 	bleq	2c333c <_Min_Stack_Size+0x2c2f3c>
    2edc:	0b3b0b3a 	bleq	ec5bcc <_Min_Stack_Size+0xec57cc>
    2ee0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ee4:	03000d07 	movweq	r0, #3335	; 0xd07
    2ee8:	3b0b3a0e 	blcc	2d1728 <_Min_Stack_Size+0x2d1328>
    2eec:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ef0:	01010800 	tsteq	r1, r0, lsl #16
    2ef4:	13011349 	movwne	r1, #4937	; 0x1349
    2ef8:	21090000 	mrscs	r0, (UNDEF: 9)
    2efc:	2f134900 	svccs	0x00134900
    2f00:	0a00000b 	beq	2f34 <_Min_Stack_Size+0x2b34>
    2f04:	0b0b0113 	bleq	2c3358 <_Min_Stack_Size+0x2c2f58>
    2f08:	0b3b0b3a 	bleq	ec5bf8 <_Min_Stack_Size+0xec57f8>
    2f0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f10:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2f14:	3b0b3a0e 	blcc	2d1754 <_Min_Stack_Size+0x2d1354>
    2f18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2f1c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2f20:	0b0b000f 	bleq	2c2f64 <_Min_Stack_Size+0x2c2b64>
    2f24:	130d0000 	movwne	r0, #53248	; 0xd000
    2f28:	0b0e0301 	bleq	383b34 <_Min_Stack_Size+0x383734>
    2f2c:	3b0b3a0b 	blcc	2d1760 <_Min_Stack_Size+0x2d1360>
    2f30:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f34:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2f38:	0b3a0803 	bleq	e84f4c <_Min_Stack_Size+0xe84b4c>
    2f3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f40:	00000b38 	andeq	r0, r0, r8, lsr fp
    2f44:	0b000f0f 	bleq	6b88 <_Min_Stack_Size+0x6788>
    2f48:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f4c:	01131000 	tsteq	r3, r0
    2f50:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
    2f54:	0b3b0b3a 	bleq	ec5c44 <_Min_Stack_Size+0xec5844>
    2f58:	00001301 	andeq	r1, r0, r1, lsl #6
    2f5c:	03000d11 	movweq	r0, #3345	; 0xd11
    2f60:	3b0b3a0e 	blcc	2d17a0 <_Min_Stack_Size+0x2d13a0>
    2f64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2f68:	12000005 	andne	r0, r0, #5
    2f6c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2f70:	15130000 	ldrne	r0, [r3, #-0]
    2f74:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2f78:	00130113 	andseq	r0, r3, r3, lsl r1
    2f7c:	00051400 	andeq	r1, r5, r0, lsl #8
    2f80:	00001349 	andeq	r1, r0, r9, asr #6
    2f84:	03011315 	movweq	r1, #4885	; 0x1315
    2f88:	3a050b0e 	bcc	145bc8 <_Min_Stack_Size+0x1457c8>
    2f8c:	01053b0b 	tsteq	r5, fp, lsl #22
    2f90:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2f94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2f9c:	0b381349 	bleq	e07cc8 <_Min_Stack_Size+0xe078c8>
    2fa0:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2fa4:	3a0e0300 	bcc	383bac <_Min_Stack_Size+0x3837ac>
    2fa8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fac:	00053813 	andeq	r3, r5, r3, lsl r8
    2fb0:	00261800 	eoreq	r1, r6, r0, lsl #16
    2fb4:	00001349 	andeq	r1, r0, r9, asr #6
    2fb8:	03011319 	movweq	r1, #4889	; 0x1319
    2fbc:	3a0b0b0e 	bcc	2c5bfc <_Min_Stack_Size+0x2c57fc>
    2fc0:	01053b0b 	tsteq	r5, fp, lsl #22
    2fc4:	1a000013 	bne	3018 <_Min_Stack_Size+0x2c18>
    2fc8:	0b0b0113 	bleq	2c341c <_Min_Stack_Size+0x2c301c>
    2fcc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2fd0:	00001301 	andeq	r1, r0, r1, lsl #6
    2fd4:	0b01171b 	bleq	48c48 <_Min_Stack_Size+0x48848>
    2fd8:	3b0b3a0b 	blcc	2d180c <_Min_Stack_Size+0x2d140c>
    2fdc:	00130105 	andseq	r0, r3, r5, lsl #2
    2fe0:	000d1c00 	andeq	r1, sp, r0, lsl #24
    2fe4:	0b3a0e03 	bleq	e867f8 <_Min_Stack_Size+0xe863f8>
    2fe8:	1349053b 	movtne	r0, #38203	; 0x953b
    2fec:	151d0000 	ldrne	r0, [sp, #-0]
    2ff0:	01192701 	tsteq	r9, r1, lsl #14
    2ff4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2ff8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2ffc:	0b3a0e03 	bleq	e86810 <_Min_Stack_Size+0xe86410>
    3000:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3004:	01111349 	tsteq	r1, r9, asr #6
    3008:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    300c:	00194297 	mulseq	r9, r7, r2
    3010:	00341f00 	eorseq	r1, r4, r0, lsl #30
    3014:	0b3a0e03 	bleq	e86828 <_Min_Stack_Size+0xe86428>
    3018:	1349053b 	movtne	r0, #38203	; 0x953b
    301c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3020:	01000000 	mrseq	r0, (UNDEF: 0)
    3024:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3028:	0e030b13 	vmoveq.32	d3[0], r0
    302c:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
    3030:	24020000 	strcs	r0, [r2], #-0
    3034:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3038:	0008030b 	andeq	r0, r8, fp, lsl #6
    303c:	00240300 	eoreq	r0, r4, r0, lsl #6
    3040:	0b3e0b0b 	bleq	f85c74 <_Min_Stack_Size+0xf85874>
    3044:	00000e03 	andeq	r0, r0, r3, lsl #28
    3048:	03001604 	movweq	r1, #1540	; 0x604
    304c:	3b0b3a0e 	blcc	2d188c <_Min_Stack_Size+0x2d148c>
    3050:	0013490b 	andseq	r4, r3, fp, lsl #18
    3054:	00160500 	andseq	r0, r6, r0, lsl #10
    3058:	0b3a0e03 	bleq	e8686c <_Min_Stack_Size+0xe8646c>
    305c:	1349053b 	movtne	r0, #38203	; 0x953b
    3060:	17060000 	strne	r0, [r6, -r0]
    3064:	3a0b0b01 	bcc	2c5c70 <_Min_Stack_Size+0x2c5870>
    3068:	010b3b0b 	tsteq	fp, fp, lsl #22
    306c:	07000013 	smladeq	r0, r3, r0, r0
    3070:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3074:	0b3b0b3a 	bleq	ec5d64 <_Min_Stack_Size+0xec5964>
    3078:	00001349 	andeq	r1, r0, r9, asr #6
    307c:	49010108 	stmdbmi	r1, {r3, r8}
    3080:	00130113 	andseq	r0, r3, r3, lsl r1
    3084:	00210900 	eoreq	r0, r1, r0, lsl #18
    3088:	0b2f1349 	bleq	bc7db4 <_Min_Stack_Size+0xbc79b4>
    308c:	130a0000 	movwne	r0, #40960	; 0xa000
    3090:	3a0b0b01 	bcc	2c5c9c <_Min_Stack_Size+0x2c589c>
    3094:	010b3b0b 	tsteq	fp, fp, lsl #22
    3098:	0b000013 	bleq	30ec <_Min_Stack_Size+0x2cec>
    309c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30a0:	0b3b0b3a 	bleq	ec5d90 <_Min_Stack_Size+0xec5990>
    30a4:	0b381349 	bleq	e07dd0 <_Min_Stack_Size+0xe079d0>
    30a8:	0f0c0000 	svceq	0x000c0000
    30ac:	000b0b00 	andeq	r0, fp, r0, lsl #22
    30b0:	01130d00 	tsteq	r3, r0, lsl #26
    30b4:	0b0b0e03 	bleq	2c68c8 <_Min_Stack_Size+0x2c64c8>
    30b8:	0b3b0b3a 	bleq	ec5da8 <_Min_Stack_Size+0xec59a8>
    30bc:	00001301 	andeq	r1, r0, r1, lsl #6
    30c0:	03000d0e 	movweq	r0, #3342	; 0xd0e
    30c4:	3b0b3a08 	blcc	2d18ec <_Min_Stack_Size+0x2d14ec>
    30c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    30cc:	0f00000b 	svceq	0x0000000b
    30d0:	0b0b000f 	bleq	2c3114 <_Min_Stack_Size+0x2c2d14>
    30d4:	00001349 	andeq	r1, r0, r9, asr #6
    30d8:	03011310 	movweq	r1, #4880	; 0x1310
    30dc:	3a050b0e 	bcc	145d1c <_Min_Stack_Size+0x14591c>
    30e0:	010b3b0b 	tsteq	fp, fp, lsl #22
    30e4:	11000013 	tstne	r0, r3, lsl r0
    30e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30ec:	0b3b0b3a 	bleq	ec5ddc <_Min_Stack_Size+0xec59dc>
    30f0:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
    30f4:	15120000 	ldrne	r0, [r2, #-0]
    30f8:	00192700 	andseq	r2, r9, r0, lsl #14
    30fc:	01151300 	tsteq	r5, r0, lsl #6
    3100:	13491927 	movtne	r1, #39207	; 0x9927
    3104:	00001301 	andeq	r1, r0, r1, lsl #6
    3108:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    310c:	15000013 	strne	r0, [r0, #-19]
    3110:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3114:	0b3a050b 	bleq	e84548 <_Min_Stack_Size+0xe84148>
    3118:	1301053b 	movwne	r0, #5435	; 0x153b
    311c:	0d160000 	ldceq	0, cr0, [r6, #-0]
    3120:	3a0e0300 	bcc	383d28 <_Min_Stack_Size+0x383928>
    3124:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3128:	000b3813 	andeq	r3, fp, r3, lsl r8
    312c:	000d1700 	andeq	r1, sp, r0, lsl #14
    3130:	0b3a0e03 	bleq	e86944 <_Min_Stack_Size+0xe86544>
    3134:	1349053b 	movtne	r0, #38203	; 0x953b
    3138:	00000538 	andeq	r0, r0, r8, lsr r5
    313c:	49002618 	stmdbmi	r0, {r3, r4, r9, sl, sp}
    3140:	19000013 	stmdbne	r0, {r0, r1, r4}
    3144:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3148:	0b3a0b0b 	bleq	e85d7c <_Min_Stack_Size+0xe8597c>
    314c:	1301053b 	movwne	r0, #5435	; 0x153b
    3150:	131a0000 	tstne	sl, #0
    3154:	3a0b0b01 	bcc	2c5d60 <_Min_Stack_Size+0x2c5960>
    3158:	01053b0b 	tsteq	r5, fp, lsl #22
    315c:	1b000013 	blne	31b0 <_Min_Stack_Size+0x2db0>
    3160:	0b0b0117 	bleq	2c35c4 <_Min_Stack_Size+0x2c31c4>
    3164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    3168:	00001301 	andeq	r1, r0, r1, lsl #6
    316c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    3170:	3b0b3a0e 	blcc	2d19b0 <_Min_Stack_Size+0x2d15b0>
    3174:	00134905 	andseq	r4, r3, r5, lsl #18
    3178:	01151d00 	tsteq	r5, r0, lsl #26
    317c:	13011927 	movwne	r1, #6439	; 0x1927
    3180:	341e0000 	ldrcc	r0, [lr], #-0
    3184:	3a0e0300 	bcc	383d8c <_Min_Stack_Size+0x38398c>
    3188:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    318c:	00180213 	andseq	r0, r8, r3, lsl r2
    3190:	00341f00 	eorseq	r1, r4, r0, lsl #30
    3194:	0b3a0e03 	bleq	e869a8 <_Min_Stack_Size+0xe865a8>
    3198:	1349053b 	movtne	r0, #38203	; 0x953b
    319c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    31a0:	Address 0x00000000000031a0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
       0:	0000001c 	andeq	r0, r0, ip, lsl r0
       4:	00000002 	andeq	r0, r0, r2
       8:	00040000 	andeq	r0, r4, r0
       c:	00000000 	andeq	r0, r0, r0
      10:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      14:	00000040 	andeq	r0, r0, r0, asr #32
	...
      20:	00000034 	andeq	r0, r0, r4, lsr r0
      24:	01040002 	tsteq	r4, r2
      28:	00040000 	andeq	r0, r4, r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
      34:	0000003a 	andeq	r0, r0, sl, lsr r0
      38:	08000b84 	stmdaeq	r0, {r2, r7, r8, r9, fp}
      3c:	0000003a 	andeq	r0, r0, sl, lsr r0
      40:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
      44:	0000003a 	andeq	r0, r0, sl, lsr r0
      48:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
      4c:	00000096 	muleq	r0, r6, r0
	...
      58:	0000002c 	andeq	r0, r0, ip, lsr #32
      5c:	03000002 	movweq	r0, #2
      60:	00040000 	andeq	r0, r4, r0
      64:	00000000 	andeq	r0, r0, r0
      68:	08000c94 	stmdaeq	r0, {r2, r4, r7, sl, fp}
      6c:	00000048 	andeq	r0, r0, r8, asr #32
      70:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
      74:	00000120 	andeq	r0, r0, r0, lsr #2
      78:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
      7c:	000003ec 	andeq	r0, r0, ip, ror #7
	...
      88:	00000024 	andeq	r0, r0, r4, lsr #32
      8c:	05e10002 	strbeq	r0, [r1, #2]!
      90:	00040000 	andeq	r0, r4, r0
      94:	00000000 	andeq	r0, r0, r0
      98:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
      9c:	00000044 	andeq	r0, r0, r4, asr #32
      a0:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
      a4:	00000002 	andeq	r0, r0, r2
	...
      b0:	0000002c 	andeq	r0, r0, ip, lsr #32
      b4:	064c0002 	strbeq	r0, [ip], -r2
      b8:	00040000 	andeq	r0, r4, r0
      bc:	00000000 	andeq	r0, r0, r0
      c0:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
      c4:	00000068 	andeq	r0, r0, r8, rrx
      c8:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
      cc:	000000f8 	strdeq	r0, [r0], -r8
      d0:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
      d4:	000000f4 	strdeq	r0, [r0], -r4
	...
      e0:	0000003c 	andeq	r0, r0, ip, lsr r0
      e4:	0c090002 	stceq	0, cr0, [r9], {2}
      e8:	00040000 	andeq	r0, r4, r0
      ec:	00000000 	andeq	r0, r0, r0
      f0:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
      f4:	00000024 	andeq	r0, r0, r4, lsr #32
      f8:	080014a8 	stmdaeq	r0, {r3, r5, r7, sl, ip}
      fc:	000000bc 	strheq	r0, [r0], -ip
     100:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
     104:	0000002c 	andeq	r0, r0, ip, lsr #32
     108:	08001590 	stmdaeq	r0, {r4, r7, r8, sl, ip}
     10c:	00000040 	andeq	r0, r0, r0, asr #32
     110:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
     114:	00000038 	andeq	r0, r0, r8, lsr r0
	...
     120:	00000084 	andeq	r0, r0, r4, lsl #1
     124:	114a0002 	cmpne	sl, r2
     128:	00040000 	andeq	r0, r4, r0
     12c:	00000000 	andeq	r0, r0, r0
     130:	08001608 	stmdaeq	r0, {r3, r9, sl, ip}
     134:	00000164 	andeq	r0, r0, r4, ror #2
     138:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
     13c:	0000011a 	andeq	r0, r0, sl, lsl r1
     140:	08001888 	stmdaeq	r0, {r3, r7, fp, ip}
     144:	00000032 	andeq	r0, r0, r2, lsr r0
     148:	080018bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip}
     14c:	00000042 	andeq	r0, r0, r2, asr #32
     150:	08001900 	stmdaeq	r0, {r8, fp, ip}
     154:	00000034 	andeq	r0, r0, r4, lsr r0
     158:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
     15c:	0000001a 	andeq	r0, r0, sl, lsl r0
     160:	08001950 	stmdaeq	r0, {r4, r6, r8, fp, ip}
     164:	00000034 	andeq	r0, r0, r4, lsr r0
     168:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
     16c:	0000001a 	andeq	r0, r0, sl, lsl r0
     170:	080019a0 	stmdaeq	r0, {r5, r7, r8, fp, ip}
     174:	0000001c 	andeq	r0, r0, ip, lsl r0
     178:	080019bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip}
     17c:	0000001c 	andeq	r0, r0, ip, lsl r0
     180:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
     184:	0000002e 	andeq	r0, r0, lr, lsr #32
     188:	08001a08 	stmdaeq	r0, {r3, r9, fp, ip}
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	08001a24 	stmdaeq	r0, {r2, r5, r9, fp, ip}
     194:	00000022 	andeq	r0, r0, r2, lsr #32
     198:	08001a48 	stmdaeq	r0, {r3, r6, r9, fp, ip}
     19c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
     1a8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1ac:	17530002 	ldrbne	r0, [r3, -r2]
     1b0:	00040000 	andeq	r0, r4, r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
     1bc:	00000070 	andeq	r0, r0, r0, ror r0
     1c0:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
     1c4:	00000024 	andeq	r0, r0, r4, lsr #32
     1c8:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
     1cc:	00000050 	andeq	r0, r0, r0, asr r0
     1d0:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
     1d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     1d8:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
     1e4:	00000040 	andeq	r0, r0, r0, asr #32
     1e8:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
     1ec:	00000020 	andeq	r0, r0, r0, lsr #32
     1f0:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
     1f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     1f8:	08001cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip}
     1fc:	00000020 	andeq	r0, r0, r0, lsr #32
     200:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
     204:	00000030 	andeq	r0, r0, r0, lsr r0
     208:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     20c:	00000020 	andeq	r0, r0, r0, lsr #32
     210:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     214:	00000030 	andeq	r0, r0, r0, lsr r0
     218:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
     21c:	00000020 	andeq	r0, r0, r0, lsr #32
     220:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
     224:	00000020 	andeq	r0, r0, r0, lsr #32
     228:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
     22c:	0000003c 	andeq	r0, r0, ip, lsr r0
     230:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
     234:	0000003c 	andeq	r0, r0, ip, lsr r0
     238:	08001e08 	stmdaeq	r0, {r3, r9, sl, fp, ip}
     23c:	00000038 	andeq	r0, r0, r8, lsr r0
     240:	08001e40 	stmdaeq	r0, {r6, r9, sl, fp, ip}
     244:	00000020 	andeq	r0, r0, r0, lsr #32
     248:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     24c:	00000038 	andeq	r0, r0, r8, lsr r0
     250:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
     254:	00000038 	andeq	r0, r0, r8, lsr r0
     258:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
     25c:	00000038 	andeq	r0, r0, r8, lsr r0
     260:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
     264:	00000154 	andeq	r0, r0, r4, asr r1
     268:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
     26c:	0000005c 	andeq	r0, r0, ip, asr r0
     270:	080020b8 	stmdaeq	r0, {r3, r4, r5, r7, sp}
     274:	00000020 	andeq	r0, r0, r0, lsr #32
     278:	080020d8 	stmdaeq	r0, {r3, r4, r6, r7, sp}
     27c:	00000020 	andeq	r0, r0, r0, lsr #32
     280:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
     284:	0000001c 	andeq	r0, r0, ip, lsl r0
     288:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
     28c:	0000003c 	andeq	r0, r0, ip, lsr r0
     290:	08002150 	stmdaeq	r0, {r4, r6, r8, sp}
     294:	00000040 	andeq	r0, r0, r0, asr #32
     298:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     29c:	0000003c 	andeq	r0, r0, ip, lsr r0
     2a0:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
     2a4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2a8:	08002208 	stmdaeq	r0, {r3, r9, sp}
     2ac:	0000003c 	andeq	r0, r0, ip, lsr r0
     2b0:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
     2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b8:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
     2bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2c0:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
     2c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2c8:	080022d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp}
     2cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2d0:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
     2d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2d8:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
     2dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     2e0:	0800238c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp}
     2e4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2e8:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     2ec:	0000003c 	andeq	r0, r0, ip, lsr r0
     2f0:	08002404 	stmdaeq	r0, {r2, sl, sp}
     2f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     2f8:	08002440 	stmdaeq	r0, {r6, sl, sp}
     2fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     300:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     304:	0000003c 	andeq	r0, r0, ip, lsr r0
     308:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
     30c:	0000003c 	andeq	r0, r0, ip, lsr r0
     310:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
     314:	0000003c 	andeq	r0, r0, ip, lsr r0
     318:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
     31c:	0000003c 	andeq	r0, r0, ip, lsr r0
     320:	0800256c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp}
     324:	0000003c 	andeq	r0, r0, ip, lsr r0
     328:	080025a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, sp}
     32c:	0000003c 	andeq	r0, r0, ip, lsr r0
     330:	080025e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp}
     334:	00000048 	andeq	r0, r0, r8, asr #32
     338:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
     33c:	00000074 	andeq	r0, r0, r4, ror r0
     340:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
     344:	0000001c 	andeq	r0, r0, ip, lsl r0
     348:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
     34c:	00000038 	andeq	r0, r0, r8, lsr r0
     350:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
     354:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     360:	000000fc 	strdeq	r0, [r0], -ip
     364:	25680002 	strbcs	r0, [r8, #-2]!
     368:	00040000 	andeq	r0, r4, r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
     374:	00000114 	andeq	r0, r0, r4, lsl r1
     378:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
     37c:	00000174 	andeq	r0, r0, r4, ror r1
     380:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
     384:	00000038 	andeq	r0, r0, r8, lsr r0
     388:	080029d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp}
     38c:	00000052 	andeq	r0, r0, r2, asr r0
     390:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
     394:	0000002a 	andeq	r0, r0, sl, lsr #32
     398:	08002a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp}
     39c:	0000003e 	andeq	r0, r0, lr, lsr r0
     3a0:	08002a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp}
     3a4:	00000038 	andeq	r0, r0, r8, lsr r0
     3a8:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
     3ac:	00000042 	andeq	r0, r0, r2, asr #32
     3b0:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
     3b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     3b8:	08002b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp}
     3bc:	00000022 	andeq	r0, r0, r2, lsr #32
     3c0:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
     3c4:	00000020 	andeq	r0, r0, r0, lsr #32
     3c8:	08002b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp}
     3cc:	00000038 	andeq	r0, r0, r8, lsr r0
     3d0:	08002bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp}
     3d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     3d8:	08002c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp}
     3dc:	00000036 	andeq	r0, r0, r6, lsr r0
     3e0:	08002c44 	stmdaeq	r0, {r2, r6, sl, fp, sp}
     3e4:	00000036 	andeq	r0, r0, r6, lsr r0
     3e8:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
     3ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     3f0:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
     3f4:	00000022 	andeq	r0, r0, r2, lsr #32
     3f8:	08002ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, sp}
     3fc:	0000003e 	andeq	r0, r0, lr, lsr r0
     400:	08002d20 	stmdaeq	r0, {r5, r8, sl, fp, sp}
     404:	0000003a 	andeq	r0, r0, sl, lsr r0
     408:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
     40c:	0000003e 	andeq	r0, r0, lr, lsr r0
     410:	08002d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp}
     414:	0000003e 	andeq	r0, r0, lr, lsr r0
     418:	08002ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, sp}
     41c:	00000036 	andeq	r0, r0, r6, lsr r0
     420:	08002e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, sp}
     424:	0000003e 	andeq	r0, r0, lr, lsr r0
     428:	08002e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp}
     42c:	00000046 	andeq	r0, r0, r6, asr #32
     430:	08002e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp}
     434:	0000008e 	andeq	r0, r0, lr, lsl #1
     438:	08002f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, sp}
     43c:	00000038 	andeq	r0, r0, r8, lsr r0
     440:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
     444:	00000020 	andeq	r0, r0, r0, lsr #32
     448:	08002f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, sp}
     44c:	000000ae 	andeq	r0, r0, lr, lsr #1
     450:	08003034 	stmdaeq	r0, {r2, r4, r5, ip, sp}
     454:	00000038 	andeq	r0, r0, r8, lsr r0
	...
     460:	0000004c 	andeq	r0, r0, ip, asr #32
     464:	2f2e0002 	svccs	0x002e0002
     468:	00040000 	andeq	r0, r4, r0
     46c:	00000000 	andeq	r0, r0, r0
     470:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
     474:	0000001a 	andeq	r0, r0, sl, lsl r0
     478:	08003088 	stmdaeq	r0, {r3, r7, ip, sp}
     47c:	00000020 	andeq	r0, r0, r0, lsr #32
     480:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
     484:	00000020 	andeq	r0, r0, r0, lsr #32
     488:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
     48c:	0000007c 	andeq	r0, r0, ip, ror r0
     490:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
     494:	0000001c 	andeq	r0, r0, ip, lsl r0
     498:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
     4a0:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     4a4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     4b0:	0000012c 	andeq	r0, r0, ip, lsr #2
     4b4:	31c20002 	biccc	r0, r2, r2
     4b8:	00040000 	andeq	r0, r4, r0
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
     4c4:	00000074 	andeq	r0, r0, r4, ror r0
     4c8:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
     4cc:	00000184 	andeq	r0, r0, r4, lsl #3
     4d0:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4d8:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
     4dc:	0000003e 	andeq	r0, r0, lr, lsr r0
     4e0:	08003428 	stmdaeq	r0, {r3, r5, sl, ip, sp}
     4e4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4e8:	08003468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp}
     4ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     4f0:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     4f4:	0000003e 	andeq	r0, r0, lr, lsr r0
     4f8:	080034e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp}
     4fc:	0000003e 	andeq	r0, r0, lr, lsr r0
     500:	08003528 	stmdaeq	r0, {r3, r5, r8, sl, ip, sp}
     504:	0000003a 	andeq	r0, r0, sl, lsr r0
     508:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
     50c:	0000003e 	andeq	r0, r0, lr, lsr r0
     510:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
     514:	00000040 	andeq	r0, r0, r0, asr #32
     518:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     51c:	0000003e 	andeq	r0, r0, lr, lsr r0
     520:	08003624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp}
     524:	0000003e 	andeq	r0, r0, lr, lsr r0
     528:	08003664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip, sp}
     52c:	00000042 	andeq	r0, r0, r2, asr #32
     530:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
     534:	0000003e 	andeq	r0, r0, lr, lsr r0
     538:	080036e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp}
     53c:	00000040 	andeq	r0, r0, r0, asr #32
     540:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     544:	00000040 	andeq	r0, r0, r0, asr #32
     548:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
     54c:	00000040 	andeq	r0, r0, r0, asr #32
     550:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     554:	0000003e 	andeq	r0, r0, lr, lsr r0
     558:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
     55c:	0000001e 	andeq	r0, r0, lr, lsl r0
     560:	08003808 	stmdaeq	r0, {r3, fp, ip, sp}
     564:	0000001c 	andeq	r0, r0, ip, lsl r0
     568:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
     56c:	0000003e 	andeq	r0, r0, lr, lsr r0
     570:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     574:	00000040 	andeq	r0, r0, r0, asr #32
     578:	080038a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, sp}
     57c:	0000003e 	andeq	r0, r0, lr, lsr r0
     580:	080038e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp}
     584:	00000020 	andeq	r0, r0, r0, lsr #32
     588:	08003904 	stmdaeq	r0, {r2, r8, fp, ip, sp}
     58c:	0000003e 	andeq	r0, r0, lr, lsr r0
     590:	08003944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp}
     594:	0000003e 	andeq	r0, r0, lr, lsr r0
     598:	08003984 	stmdaeq	r0, {r2, r7, r8, fp, ip, sp}
     59c:	0000002e 	andeq	r0, r0, lr, lsr #32
     5a0:	080039b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, sp}
     5a4:	00000046 	andeq	r0, r0, r6, asr #32
     5a8:	080039fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
     5ac:	00000060 	andeq	r0, r0, r0, rrx
     5b0:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
     5b4:	00000044 	andeq	r0, r0, r4, asr #32
     5b8:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     5bc:	00000066 	andeq	r0, r0, r6, rrx
     5c0:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
     5c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5c8:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
     5cc:	0000005a 	andeq	r0, r0, sl, asr r0
     5d0:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
     5d4:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
     5e0:	000000ac 	andeq	r0, r0, ip, lsr #1
     5e4:	3d4d0002 	stclcc	0, cr0, [sp, #-8]
     5e8:	00040000 	andeq	r0, r4, r0
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
     5f4:	000001a4 	andeq	r0, r0, r4, lsr #3
     5f8:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
     5fc:	000000ac 	andeq	r0, r0, ip, lsr #1
     600:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
     604:	0000006c 	andeq	r0, r0, ip, rrx
     608:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
     60c:	00000036 	andeq	r0, r0, r6, lsr r0
     610:	08003eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp}
     614:	00000034 	andeq	r0, r0, r4, lsr r0
     618:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
     61c:	00000034 	andeq	r0, r0, r4, lsr r0
     620:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
     624:	0000001c 	andeq	r0, r0, ip, lsl r0
     628:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
     62c:	0000001a 	andeq	r0, r0, sl, lsl r0
     630:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
     634:	0000003c 	andeq	r0, r0, ip, lsr r0
     638:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
     63c:	00000036 	andeq	r0, r0, r6, lsr r0
     640:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
     644:	0000002a 	andeq	r0, r0, sl, lsr #32
     648:	08003ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     64c:	00000030 	andeq	r0, r0, r0, lsr r0
     650:	08004020 	stmdaeq	r0, {r5, lr}
     654:	00000030 	andeq	r0, r0, r0, lsr r0
     658:	08004050 	stmdaeq	r0, {r4, r6, lr}
     65c:	00000024 	andeq	r0, r0, r4, lsr #32
     660:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
     664:	00000078 	andeq	r0, r0, r8, ror r0
     668:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
     66c:	0000005c 	andeq	r0, r0, ip, asr r0
     670:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
     674:	00000072 	andeq	r0, r0, r2, ror r0
     678:	080041bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, lr}
     67c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     680:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
     684:	0000005c 	andeq	r0, r0, ip, asr r0
	...
     690:	000000dc 	ldrdeq	r0, [r0], -ip
     694:	448a0002 	strmi	r0, [sl], #2
     698:	00040000 	andeq	r0, r4, r0
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	080042c8 	stmdaeq	r0, {r3, r6, r7, r9, lr}
     6a4:	000000d8 	ldrdeq	r0, [r0], -r8
     6a8:	080043a0 	stmdaeq	r0, {r5, r7, r8, r9, lr}
     6ac:	00000086 	andeq	r0, r0, r6, lsl #1
     6b0:	08004428 	stmdaeq	r0, {r3, r5, sl, lr}
     6b4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     6b8:	080045d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr}
     6bc:	00000048 	andeq	r0, r0, r8, asr #32
     6c0:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
     6c4:	00000036 	andeq	r0, r0, r6, lsr r0
     6c8:	08004658 	stmdaeq	r0, {r3, r4, r6, r9, sl, lr}
     6cc:	0000003e 	andeq	r0, r0, lr, lsr r0
     6d0:	08004698 	stmdaeq	r0, {r3, r4, r7, r9, sl, lr}
     6d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     6d8:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
     6dc:	00000036 	andeq	r0, r0, r6, lsr r0
     6e0:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
     6e4:	00000040 	andeq	r0, r0, r0, asr #32
     6e8:	08004750 	stmdaeq	r0, {r4, r6, r8, r9, sl, lr}
     6ec:	00000042 	andeq	r0, r0, r2, asr #32
     6f0:	08004794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, lr}
     6f4:	0000003e 	andeq	r0, r0, lr, lsr r0
     6f8:	080047d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, lr}
     6fc:	0000003e 	andeq	r0, r0, lr, lsr r0
     700:	08004814 	stmdaeq	r0, {r2, r4, fp, lr}
     704:	0000009a 	muleq	r0, sl, r0
     708:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
     70c:	0000001a 	andeq	r0, r0, sl, lsl r0
     710:	080048cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr}
     714:	0000001c 	andeq	r0, r0, ip, lsl r0
     718:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
     71c:	0000003e 	andeq	r0, r0, lr, lsr r0
     720:	08004928 	stmdaeq	r0, {r3, r5, r8, fp, lr}
     724:	00000022 	andeq	r0, r0, r2, lsr #32
     728:	0800494c 	stmdaeq	r0, {r2, r3, r6, r8, fp, lr}
     72c:	00000032 	andeq	r0, r0, r2, lsr r0
     730:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     734:	0000001a 	andeq	r0, r0, sl, lsl r0
     738:	0800499c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, lr}
     73c:	00000046 	andeq	r0, r0, r6, asr #32
     740:	080049e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, lr}
     744:	00000060 	andeq	r0, r0, r0, rrx
     748:	08004a44 	stmdaeq	r0, {r2, r6, r9, fp, lr}
     74c:	00000038 	andeq	r0, r0, r8, lsr r0
     750:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
     754:	00000020 	andeq	r0, r0, r0, lsr #32
     758:	08004a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, lr}
     75c:	00000076 	andeq	r0, r0, r6, ror r0
     760:	08004b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, lr}
     764:	00000032 	andeq	r0, r0, r2, lsr r0
	...
     770:	00000054 	andeq	r0, r0, r4, asr r0
     774:	4faf0002 	svcmi	0x00af0002
     778:	00040000 	andeq	r0, r4, r0
     77c:	00000000 	andeq	r0, r0, r0
     780:	08004b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, lr}
     784:	00000034 	andeq	r0, r0, r4, lsr r0
     788:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
     78c:	000000dc 	ldrdeq	r0, [r0], -ip
     790:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
     794:	0000002a 	andeq	r0, r0, sl, lsr #32
     798:	08004c84 	stmdaeq	r0, {r2, r7, sl, fp, lr}
     79c:	00000024 	andeq	r0, r0, r4, lsr #32
     7a0:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
     7a4:	00000034 	andeq	r0, r0, r4, lsr r0
     7a8:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
     7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b0:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
     7b4:	00000034 	andeq	r0, r0, r4, lsr r0
     7b8:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
     7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     7c8:	000000ac 	andeq	r0, r0, ip, lsr #1
     7cc:	52eb0002 	rscpl	r0, fp, #2
     7d0:	00040000 	andeq	r0, r4, r0
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
     7dc:	0000001a 	andeq	r0, r0, sl, lsl r0
     7e0:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
     7e4:	0000015c 	andeq	r0, r0, ip, asr r1
     7e8:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
     7ec:	0000004e 	andeq	r0, r0, lr, asr #32
     7f0:	08004f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, lr}
     7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f8:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
     7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     800:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
     804:	00000038 	andeq	r0, r0, r8, lsr r0
     808:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
     80c:	000000dc 	ldrdeq	r0, [r0], -ip
     810:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
     814:	00000054 	andeq	r0, r0, r4, asr r0
     818:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
     81c:	000000dc 	ldrdeq	r0, [r0], -ip
     820:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
     824:	00000054 	andeq	r0, r0, r4, asr r0
     828:	080051e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, lr}
     82c:	00000038 	andeq	r0, r0, r8, lsr r0
     830:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
     834:	00000038 	andeq	r0, r0, r8, lsr r0
     838:	08005250 	stmdaeq	r0, {r4, r6, r9, ip, lr}
     83c:	00000054 	andeq	r0, r0, r4, asr r0
     840:	080052a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, lr}
     844:	0000001c 	andeq	r0, r0, ip, lsl r0
     848:	080052c0 	stmdaeq	r0, {r6, r7, r9, ip, lr}
     84c:	0000003c 	andeq	r0, r0, ip, lsr r0
     850:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
     854:	00000034 	andeq	r0, r0, r4, lsr r0
     858:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
     85c:	0000001c 	andeq	r0, r0, ip, lsl r0
     860:	0800534c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, lr}
     864:	00000058 	andeq	r0, r0, r8, asr r0
     868:	080053a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, lr}
     86c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     878:	00000104 	andeq	r0, r0, r4, lsl #2
     87c:	5b080002 	blpl	20088c <_Min_Stack_Size+0x20048c>
     880:	00040000 	andeq	r0, r4, r0
     884:	00000000 	andeq	r0, r0, r0
     888:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
     88c:	0000001a 	andeq	r0, r0, sl, lsl r0
     890:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
     894:	0000012c 	andeq	r0, r0, ip, lsr #2
     898:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
     89c:	0000006c 	andeq	r0, r0, ip, rrx
     8a0:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
     8a4:	00000038 	andeq	r0, r0, r8, lsr r0
     8a8:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
     8ac:	00000038 	andeq	r0, r0, r8, lsr r0
     8b0:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
     8b4:	00000058 	andeq	r0, r0, r8, asr r0
     8b8:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
     8bc:	00000024 	andeq	r0, r0, r4, lsr #32
     8c0:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
     8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c8:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
     8d4:	00000132 	andeq	r0, r0, r2, lsr r1
     8d8:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
     8dc:	00000074 	andeq	r0, r0, r4, ror r0
     8e0:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
     8e4:	00000036 	andeq	r0, r0, r6, lsr r0
     8e8:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
     8ec:	00000040 	andeq	r0, r0, r0, asr #32
     8f0:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
     8f4:	0000001e 	andeq	r0, r0, lr, lsl r0
     8f8:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
     8fc:	00000030 	andeq	r0, r0, r0, lsr r0
     900:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
     904:	0000007c 	andeq	r0, r0, ip, ror r0
     908:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
     90c:	00000024 	andeq	r0, r0, r4, lsr #32
     910:	080059b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, lr}
     914:	00000040 	andeq	r0, r0, r0, asr #32
     918:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
     91c:	0000004c 	andeq	r0, r0, ip, asr #32
     920:	08005a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, lr}
     924:	0000002a 	andeq	r0, r0, sl, lsr #32
     928:	08005a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, lr}
     92c:	000000dc 	ldrdeq	r0, [r0], -ip
     930:	08005b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, lr}
     934:	0000001c 	andeq	r0, r0, ip, lsl r0
     938:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
     93c:	0000001a 	andeq	r0, r0, sl, lsl r0
     940:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
     944:	000000ca 	andeq	r0, r0, sl, asr #1
     948:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
     94c:	000000c0 	andeq	r0, r0, r0, asr #1
     950:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
     954:	0000003c 	andeq	r0, r0, ip, lsr r0
     958:	08005d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, lr}
     95c:	00000034 	andeq	r0, r0, r4, lsr r0
     960:	08005d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, lr}
     964:	0000001c 	andeq	r0, r0, ip, lsl r0
     968:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
     96c:	00000050 	andeq	r0, r0, r0, asr r0
     970:	08005de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
     974:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     980:	000000ec 	andeq	r0, r0, ip, ror #1
     984:	68040002 	stmdavs	r4, {r1}
     988:	00040000 	andeq	r0, r4, r0
     98c:	00000000 	andeq	r0, r0, r0
     990:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
     994:	00000058 	andeq	r0, r0, r8, asr r0
     998:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
     99c:	00000194 	muleq	r0, r4, r1
     9a0:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     9a4:	000000da 	ldrdeq	r0, [r0], -sl
     9a8:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
     9ac:	00000054 	andeq	r0, r0, r4, asr r0
     9b0:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
     9b4:	0000005c 	andeq	r0, r0, ip, asr r0
     9b8:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
     9bc:	000000cc 	andeq	r0, r0, ip, asr #1
     9c0:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
     9c4:	0000007c 	andeq	r0, r0, ip, ror r0
     9c8:	080062c0 	stmdaeq	r0, {r6, r7, r9, sp, lr}
     9cc:	0000006c 	andeq	r0, r0, ip, rrx
     9d0:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
     9d4:	0000006c 	andeq	r0, r0, ip, rrx
     9d8:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
     9dc:	00000038 	andeq	r0, r0, r8, lsr r0
     9e0:	080063d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp, lr}
     9e4:	00000034 	andeq	r0, r0, r4, lsr r0
     9e8:	08006404 	stmdaeq	r0, {r2, sl, sp, lr}
     9ec:	000000ac 	andeq	r0, r0, ip, lsr #1
     9f0:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
     9f4:	00000084 	andeq	r0, r0, r4, lsl #1
     9f8:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
     9fc:	0000003c 	andeq	r0, r0, ip, lsr r0
     a00:	08006570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp, lr}
     a04:	00000044 	andeq	r0, r0, r4, asr #32
     a08:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
     a0c:	0000015c 	andeq	r0, r0, ip, asr r1
     a10:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
     a14:	00000088 	andeq	r0, r0, r8, lsl #1
     a18:	08006798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, sp, lr}
     a1c:	00000040 	andeq	r0, r0, r0, asr #32
     a20:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
     a24:	0000003c 	andeq	r0, r0, ip, lsr r0
     a28:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
     a2c:	00000024 	andeq	r0, r0, r4, lsr #32
     a30:	08006838 	stmdaeq	r0, {r3, r4, r5, fp, sp, lr}
     a34:	00000024 	andeq	r0, r0, r4, lsr #32
     a38:	0800685c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp, lr}
     a3c:	0000004c 	andeq	r0, r0, ip, asr #32
     a40:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
     a44:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a48:	08006978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp, lr}
     a4c:	0000007c 	andeq	r0, r0, ip, ror r0
     a50:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
     a54:	00000078 	andeq	r0, r0, r8, ror r0
     a58:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
     a5c:	000000b4 	strheq	r0, [r0], -r4
     a60:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
     a64:	0000007c 	andeq	r0, r0, ip, ror r0
	...
     a70:	00000054 	andeq	r0, r0, r4, asr r0
     a74:	748e0002 	strvc	r0, [lr], #2
     a78:	00040000 	andeq	r0, r4, r0
     a7c:	00000000 	andeq	r0, r0, r0
     a80:	08006b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
     a84:	00000016 	andeq	r0, r0, r6, lsl r0
     a88:	08006bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp, lr}
     a8c:	00000038 	andeq	r0, r0, r8, lsr r0
     a90:	08006bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
     a94:	00000018 	andeq	r0, r0, r8, lsl r0
     a98:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
     a9c:	00000038 	andeq	r0, r0, r8, lsr r0
     aa0:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
     aa4:	00000038 	andeq	r0, r0, r8, lsr r0
     aa8:	08006c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp, lr}
     aac:	00000024 	andeq	r0, r0, r4, lsr #32
     ab0:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
     ab4:	00000038 	andeq	r0, r0, r8, lsr r0
     ab8:	08006cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp, lr}
     abc:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     ac8:	0000005c 	andeq	r0, r0, ip, asr r0
     acc:	77110002 	ldrvc	r0, [r1, -r2]
     ad0:	00040000 	andeq	r0, r4, r0
     ad4:	00000000 	andeq	r0, r0, r0
     ad8:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
     adc:	0000005c 	andeq	r0, r0, ip, asr r0
     ae0:	08006d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, lr}
     ae4:	00000030 	andeq	r0, r0, r0, lsr r0
     ae8:	08006d80 	stmdaeq	r0, {r7, r8, sl, fp, sp, lr}
     aec:	00000030 	andeq	r0, r0, r0, lsr r0
     af0:	08006db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp, lr}
     af4:	0000003c 	andeq	r0, r0, ip, lsr r0
     af8:	08006dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
     afc:	00000094 	muleq	r0, r4, r0
     b00:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
     b04:	0000002c 	andeq	r0, r0, ip, lsr #32
     b08:	08006eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, lr}
     b0c:	000000b8 	strheq	r0, [r0], -r8
     b10:	08006f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
     b14:	00000198 	muleq	r0, r8, r1
     b18:	080070fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp, lr}
     b1c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
     b28:	00000044 	andeq	r0, r0, r4, asr #32
     b2c:	82a40002 	adchi	r0, r4, #2
     b30:	00040000 	andeq	r0, r4, r0
     b34:	00000000 	andeq	r0, r0, r0
     b38:	08007158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, lr}
     b3c:	00000074 	andeq	r0, r0, r4, ror r0
     b40:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
     b44:	00000214 	andeq	r0, r0, r4, lsl r2
     b48:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
     b4c:	000000ec 	andeq	r0, r0, ip, ror #1
     b50:	080074cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp, lr}
     b54:	00000054 	andeq	r0, r0, r4, asr r0
     b58:	08007520 	stmdaeq	r0, {r5, r8, sl, ip, sp, lr}
     b5c:	0000004a 	andeq	r0, r0, sl, asr #32
     b60:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
     b64:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     b70:	0000007c 	andeq	r0, r0, ip, ror r0
     b74:	881d0002 	ldmdahi	sp, {r1}
     b78:	00040000 	andeq	r0, r4, r0
     b7c:	00000000 	andeq	r0, r0, r0
     b80:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
     b84:	00000076 	andeq	r0, r0, r6, ror r0
     b88:	08007618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp, lr}
     b8c:	0000002e 	andeq	r0, r0, lr, lsr #32
     b90:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
     b94:	00000082 	andeq	r0, r0, r2, lsl #1
     b98:	080076cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, sp, lr}
     b9c:	00000040 	andeq	r0, r0, r0, asr #32
     ba0:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
     ba4:	00000040 	andeq	r0, r0, r0, asr #32
     ba8:	0800774c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp, lr}
     bac:	00000048 	andeq	r0, r0, r8, asr #32
     bb0:	08007794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, lr}
     bb4:	00000040 	andeq	r0, r0, r0, asr #32
     bb8:	080077d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
     bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc0:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
     bc4:	00000060 	andeq	r0, r0, r0, rrx
     bc8:	08007850 	stmdaeq	r0, {r4, r6, fp, ip, sp, lr}
     bcc:	0000006c 	andeq	r0, r0, ip, rrx
     bd0:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
     bd4:	00000138 	andeq	r0, r0, r8, lsr r1
     bd8:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
     bdc:	00000090 	muleq	r0, r0, r0
     be0:	08007a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp, lr}
     be4:	00000006 	andeq	r0, r0, r6
	...
     bf0:	000001ac 	andeq	r0, r0, ip, lsr #3
     bf4:	8fd00002 	svchi	0x00d00002
     bf8:	00040000 	andeq	r0, r4, r0
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	08007a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp, lr}
     c04:	00000224 	andeq	r0, r0, r4, lsr #4
     c08:	08007cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp, lr}
     c0c:	000000b2 	strheq	r0, [r0], -r2
     c10:	08007d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, sp, lr}
     c14:	000000b4 	strheq	r0, [r0], -r4
     c18:	08007e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp, lr}
     c1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     c20:	08007e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp, lr}
     c24:	00000040 	andeq	r0, r0, r0, asr #32
     c28:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
     c2c:	0000002c 	andeq	r0, r0, ip, lsr #32
     c30:	08007eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp, lr}
     c34:	0000002c 	andeq	r0, r0, ip, lsr #32
     c38:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     c3c:	00000020 	andeq	r0, r0, r0, lsr #32
     c40:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     c44:	00000020 	andeq	r0, r0, r0, lsr #32
     c48:	08007f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
     c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c50:	08007f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
     c54:	00000040 	andeq	r0, r0, r0, asr #32
     c58:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
     c5c:	00000018 	andeq	r0, r0, r8, lsl r0
     c60:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
     c64:	00000050 	andeq	r0, r0, r0, asr r0
     c68:	08007fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
     c6c:	00000040 	andeq	r0, r0, r0, asr #32
     c70:	08008020 	stmdaeq	r0, {r5, pc}
     c74:	00000038 	andeq	r0, r0, r8, lsr r0
     c78:	08008058 	stmdaeq	r0, {r3, r4, r6, pc}
     c7c:	00000068 	andeq	r0, r0, r8, rrx
     c80:	080080c0 	stmdaeq	r0, {r6, r7, pc}
     c84:	00000048 	andeq	r0, r0, r8, asr #32
     c88:	08008108 	stmdaeq	r0, {r3, r8, pc}
     c8c:	00000120 	andeq	r0, r0, r0, lsr #2
     c90:	08008228 	stmdaeq	r0, {r3, r5, r9, pc}
     c94:	00000048 	andeq	r0, r0, r8, asr #32
     c98:	08008270 	stmdaeq	r0, {r4, r5, r6, r9, pc}
     c9c:	00000078 	andeq	r0, r0, r8, ror r0
     ca0:	080082e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, pc}
     ca4:	0000007c 	andeq	r0, r0, ip, ror r0
     ca8:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
     cac:	00000014 	andeq	r0, r0, r4, lsl r0
     cb0:	08008378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, pc}
     cb4:	000000c8 	andeq	r0, r0, r8, asr #1
     cb8:	08008440 	stmdaeq	r0, {r6, sl, pc}
     cbc:	00000068 	andeq	r0, r0, r8, rrx
     cc0:	080084a8 	stmdaeq	r0, {r3, r5, r7, sl, pc}
     cc4:	00000128 	andeq	r0, r0, r8, lsr #2
     cc8:	080085d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, pc}
     ccc:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
     cd0:	0800888c 	stmdaeq	r0, {r2, r3, r7, fp, pc}
     cd4:	00000350 	andeq	r0, r0, r0, asr r3
     cd8:	08008bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, pc}
     cdc:	0000007c 	andeq	r0, r0, ip, ror r0
     ce0:	08008c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, pc}
     ce4:	000001dc 	ldrdeq	r0, [r0], -ip
     ce8:	08008e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, pc}
     cec:	000000c0 	andeq	r0, r0, r0, asr #1
     cf0:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
     cf4:	00000120 	andeq	r0, r0, r0, lsr #2
     cf8:	08009014 	stmdaeq	r0, {r2, r4, ip, pc}
     cfc:	00000166 	andeq	r0, r0, r6, ror #2
     d00:	0800917c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, pc}
     d04:	00000076 	andeq	r0, r0, r6, ror r0
     d08:	080091f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, pc}
     d0c:	00000162 	andeq	r0, r0, r2, ror #2
     d10:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
     d14:	00000056 	andeq	r0, r0, r6, asr r0
     d18:	080093b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, pc}
     d1c:	000000a0 	andeq	r0, r0, r0, lsr #1
     d20:	08009450 	stmdaeq	r0, {r4, r6, sl, ip, pc}
     d24:	00000050 	andeq	r0, r0, r0, asr r0
     d28:	080094a0 	stmdaeq	r0, {r5, r7, sl, ip, pc}
     d2c:	0000001e 	andeq	r0, r0, lr, lsl r0
     d30:	080094c0 	stmdaeq	r0, {r6, r7, sl, ip, pc}
     d34:	0000001e 	andeq	r0, r0, lr, lsl r0
     d38:	080094e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, pc}
     d3c:	000001a0 	andeq	r0, r0, r0, lsr #3
     d40:	08009680 	stmdaeq	r0, {r7, r9, sl, ip, pc}
     d44:	0000005c 	andeq	r0, r0, ip, asr r0
     d48:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
     d4c:	0000005c 	andeq	r0, r0, ip, asr r0
     d50:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
     d54:	0000028e 	andeq	r0, r0, lr, lsl #5
     d58:	080099c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, pc}
     d5c:	0000000c 	andeq	r0, r0, ip
     d60:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}
     d64:	0000000c 	andeq	r0, r0, ip
     d68:	080099e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, pc}
     d6c:	00000054 	andeq	r0, r0, r4, asr r0
     d70:	08009a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, pc}
     d74:	00000024 	andeq	r0, r0, r4, lsr #32
     d78:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}
     d7c:	000000d4 	ldrdeq	r0, [r0], -r4
     d80:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
     d84:	00000178 	andeq	r0, r0, r8, ror r1
     d88:	08009ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, pc}
     d8c:	00000048 	andeq	r0, r0, r8, asr #32
     d90:	08009cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, pc}
     d94:	00000028 	andeq	r0, r0, r8, lsr #32
	...
     da0:	000000ec 	andeq	r0, r0, ip, ror #1
     da4:	a8de0002 	ldmge	lr, {r1}^
     da8:	00040000 	andeq	r0, r4, r0
     dac:	00000000 	andeq	r0, r0, r0
     db0:	08009d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, ip, pc}
     db4:	00000030 	andeq	r0, r0, r0, lsr r0
     db8:	08009d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, pc}
     dbc:	0000001e 	andeq	r0, r0, lr, lsl r0
     dc0:	08009d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, pc}
     dc4:	000000c8 	andeq	r0, r0, r8, asr #1
     dc8:	08009e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, pc}
     dcc:	00000034 	andeq	r0, r0, r4, lsr r0
     dd0:	08009e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, pc}
     dd4:	0000001e 	andeq	r0, r0, lr, lsl r0
     dd8:	08009e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, pc}
     ddc:	00000034 	andeq	r0, r0, r4, lsr r0
     de0:	08009eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, pc}
     de4:	00000020 	andeq	r0, r0, r0, lsr #32
     de8:	08009ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, pc}
     dec:	00000034 	andeq	r0, r0, r4, lsr r0
     df0:	08009f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, pc}
     df4:	0000004e 	andeq	r0, r0, lr, asr #32
     df8:	08009f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip, pc}
     dfc:	00000044 	andeq	r0, r0, r4, asr #32
     e00:	08009f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
     e04:	0000004e 	andeq	r0, r0, lr, asr #32
     e08:	08009fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     e0c:	00000094 	muleq	r0, r4, r0
     e10:	0800a080 	stmdaeq	r0, {r7, sp, pc}
     e14:	0000004e 	andeq	r0, r0, lr, asr #32
     e18:	0800a0d0 	stmdaeq	r0, {r4, r6, r7, sp, pc}
     e1c:	00000194 	muleq	r0, r4, r1
     e20:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
     e24:	000001d4 	ldrdeq	r0, [r0], -r4
     e28:	0800a438 	stmdaeq	r0, {r3, r4, r5, sl, sp, pc}
     e2c:	000001f4 	strdeq	r0, [r0], -r4
     e30:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
     e34:	00000068 	andeq	r0, r0, r8, rrx
     e38:	0800a694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, pc}
     e3c:	00000054 	andeq	r0, r0, r4, asr r0
     e40:	0800a6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, pc}
     e44:	00000026 	andeq	r0, r0, r6, lsr #32
     e48:	0800a710 	stmdaeq	r0, {r4, r8, r9, sl, sp, pc}
     e4c:	0000008c 	andeq	r0, r0, ip, lsl #1
     e50:	0800a79c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp, pc}
     e54:	00000054 	andeq	r0, r0, r4, asr r0
     e58:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
     e5c:	000000a4 	andeq	r0, r0, r4, lsr #1
     e60:	0800a894 	stmdaeq	r0, {r2, r4, r7, fp, sp, pc}
     e64:	0000015c 	andeq	r0, r0, ip, asr r1
     e68:	0800a9f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, sp, pc}
     e6c:	000001dc 	ldrdeq	r0, [r0], -ip
     e70:	0800abcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp, pc}
     e74:	000001cc 	andeq	r0, r0, ip, asr #3
     e78:	0800ad98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, pc}
     e7c:	0000006c 	andeq	r0, r0, ip, rrx
     e80:	0800ae04 	stmdaeq	r0, {r2, r9, sl, fp, sp, pc}
     e84:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     e90:	0000001c 	andeq	r0, r0, ip, lsl r0
     e94:	b4960002 	ldrlt	r0, [r6], #2
     e98:	00040000 	andeq	r0, r4, r0
     e9c:	00000000 	andeq	r0, r0, r0
     ea0:	0800ae38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, pc}
     ea4:	00000388 	andeq	r0, r0, r8, lsl #7
	...
     eb0:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb4:	b6e60002 	strbtlt	r0, [r6], r2
     eb8:	00040000 	andeq	r0, r4, r0
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
     ec4:	00000006 	andeq	r0, r0, r6
	...
     ed0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ed4:	b81c0002 	ldmdalt	ip, {r1}
     ed8:	00040000 	andeq	r0, r4, r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	0800b1c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp, pc}
     ee4:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
     ef0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef4:	ba7c0002 	blt	1f00f04 <_Min_Stack_Size+0x1f00b04>
     ef8:	00040000 	andeq	r0, r4, r0
     efc:	00000000 	andeq	r0, r0, r0
     f00:	0800b274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, pc}
     f04:	00000332 	andeq	r0, r0, r2, lsr r3
	...
     f10:	0000001c 	andeq	r0, r0, ip, lsl r0
     f14:	bd600002 	stcllt	0, cr0, [r0, #-8]!
     f18:	00040000 	andeq	r0, r4, r0
     f1c:	00000000 	andeq	r0, r0, r0
     f20:	0800b5a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, sp, pc}
     f24:	00000428 	andeq	r0, r0, r8, lsr #8
	...
     f30:	0000001c 	andeq	r0, r0, ip, lsl r0
     f34:	c0a80002 	adcgt	r0, r8, r2
     f38:	00040000 	andeq	r0, r4, r0
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	0800b9d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp, pc}
     f44:	00000b50 	andeq	r0, r0, r0, asr fp
	...
     f50:	0000001c 	andeq	r0, r0, ip, lsl r0
     f54:	c81c0002 	ldmdagt	ip, {r1}
     f58:	00040000 	andeq	r0, r4, r0
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
     f64:	0000017e 	andeq	r0, r0, lr, ror r1
	...
     f70:	0000001c 	andeq	r0, r0, ip, lsl r0
     f74:	ca4d0002 	bgt	1340f84 <_Min_Stack_Size+0x1340b84>
     f78:	00040000 	andeq	r0, r4, r0
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	0800c6a0 	stmdaeq	r0, {r5, r7, r9, sl, lr, pc}
     f84:	0000000c 	andeq	r0, r0, ip
	...
     f90:	0000001c 	andeq	r0, r0, ip, lsl r0
     f94:	cb240002 	blgt	900fa4 <_Min_Stack_Size+0x900ba4>
     f98:	00040000 	andeq	r0, r4, r0
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	0800c6ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr, pc}
     fa4:	00000050 	andeq	r0, r0, r0, asr r0
	...
     fb0:	00000014 	andeq	r0, r0, r4, lsl r0
     fb4:	cbff0002 	blgt	fffc0fc4 <_estack+0xdff90fc4>
     fb8:	00040000 	andeq	r0, r4, r0
	...
     fc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fcc:	ccbd0002 	ldcgt	0, cr0, [sp], #8
     fd0:	00040000 	andeq	r0, r4, r0
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	0800c6fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, lr, pc}
     fdc:	00000004 	andeq	r0, r0, r4
	...
     fe8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fec:	cde60002 	stclgt	0, cr0, [r6, #8]!
     ff0:	00040000 	andeq	r0, r4, r0
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
     ffc:	0000000a 	andeq	r0, r0, sl
	...
    1008:	0000001c 	andeq	r0, r0, ip, lsl r0
    100c:	ceb80002 	cdpgt	0, 11, cr0, cr8, cr2, {0}
    1010:	00040000 	andeq	r0, r4, r0
    1014:	00000000 	andeq	r0, r0, r0
    1018:	0800c70c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr, pc}
    101c:	00000120 	andeq	r0, r0, r0, lsr #2
	...
    1028:	0000001c 	andeq	r0, r0, ip, lsl r0
    102c:	d0c60002 	sbcle	r0, r6, r2
    1030:	00040000 	andeq	r0, r4, r0
    1034:	00000000 	andeq	r0, r0, r0
    1038:	0800c830 	stmdaeq	r0, {r4, r5, fp, lr, pc}
    103c:	00000118 	andeq	r0, r0, r8, lsl r1
	...
    1048:	0000001c 	andeq	r0, r0, ip, lsl r0
    104c:	d3550002 	cmple	r5, #2
    1050:	00040000 	andeq	r0, r4, r0
    1054:	00000000 	andeq	r0, r0, r0
    1058:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
    105c:	00000012 	andeq	r0, r0, r2, lsl r0
	...
    1068:	0000001c 	andeq	r0, r0, ip, lsl r0
    106c:	d4a60002 	strtle	r0, [r6], #2
    1070:	00040000 	andeq	r0, r4, r0
    1074:	00000000 	andeq	r0, r0, r0
    1078:	0800c95c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, lr, pc}
    107c:	0000000c 	andeq	r0, r0, ip
	...
    1088:	00000014 	andeq	r0, r0, r4, lsl r0
    108c:	dd2f0002 	stcle	0, cr0, [pc, #-8]!	; 108c <_Min_Stack_Size+0xc8c>
    1090:	00040000 	andeq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
   4:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
	...
  10:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
  14:	08000b82 	stmdaeq	r0, {r1, r7, r8, r9, fp}
  18:	08000b84 	stmdaeq	r0, {r2, r7, r8, r9, fp}
  1c:	08000bbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp}
  20:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
  24:	08000bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp}
  28:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
  2c:	08000c92 	stmdaeq	r0, {r1, r4, r7, sl, fp}
	...
  38:	08000c94 	stmdaeq	r0, {r2, r4, r7, sl, fp}
  3c:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
  40:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
  44:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
  48:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
  4c:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
	...
  58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  5c:	00000000 	andeq	r0, r0, r0
  60:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
  64:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
  68:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
  6c:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
	...
  78:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
  7c:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
  80:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
  84:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
  88:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
  8c:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
	...
  98:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
  9c:	080014a8 	stmdaeq	r0, {r3, r5, r7, sl, ip}
  a0:	080014a8 	stmdaeq	r0, {r3, r5, r7, sl, ip}
  a4:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
  a8:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
  ac:	08001590 	stmdaeq	r0, {r4, r7, r8, sl, ip}
  b0:	08001590 	stmdaeq	r0, {r4, r7, r8, sl, ip}
  b4:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
  b8:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
  bc:	08001608 	stmdaeq	r0, {r3, r9, sl, ip}
	...
  c8:	08001608 	stmdaeq	r0, {r3, r9, sl, ip}
  cc:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
  d0:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
  d4:	08001886 	stmdaeq	r0, {r1, r2, r7, fp, ip}
  d8:	08001888 	stmdaeq	r0, {r3, r7, fp, ip}
  dc:	080018ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip}
  e0:	080018bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip}
  e4:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
  e8:	08001900 	stmdaeq	r0, {r8, fp, ip}
  ec:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
  f0:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
  f4:	0800194e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip}
  f8:	08001950 	stmdaeq	r0, {r4, r6, r8, fp, ip}
  fc:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
 100:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
 104:	0800199e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip}
 108:	080019a0 	stmdaeq	r0, {r5, r7, r8, fp, ip}
 10c:	080019bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip}
 110:	080019bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip}
 114:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
 118:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
 11c:	08001a06 	stmdaeq	r0, {r1, r2, r9, fp, ip}
 120:	08001a08 	stmdaeq	r0, {r3, r9, fp, ip}
 124:	08001a24 	stmdaeq	r0, {r2, r5, r9, fp, ip}
 128:	08001a24 	stmdaeq	r0, {r2, r5, r9, fp, ip}
 12c:	08001a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip}
 130:	08001a48 	stmdaeq	r0, {r3, r6, r9, fp, ip}
 134:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
	...
 140:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
 144:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
 148:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
 14c:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
 150:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
 154:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
 158:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
 15c:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
 160:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
 164:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
 168:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
 16c:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
 170:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
 174:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
 178:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
 17c:	08001cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip}
 180:	08001cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip}
 184:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
 188:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
 18c:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
 190:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
 194:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
 198:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
 19c:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 1a0:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 1a4:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
 1a8:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
 1ac:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
 1b0:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
 1b4:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
 1b8:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
 1bc:	08001e08 	stmdaeq	r0, {r3, r9, sl, fp, ip}
 1c0:	08001e08 	stmdaeq	r0, {r3, r9, sl, fp, ip}
 1c4:	08001e40 	stmdaeq	r0, {r6, r9, sl, fp, ip}
 1c8:	08001e40 	stmdaeq	r0, {r6, r9, sl, fp, ip}
 1cc:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
 1d0:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
 1d4:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
 1d8:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
 1dc:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
 1e0:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
 1e4:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
 1e8:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
 1ec:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
 1f0:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
 1f4:	080020b8 	stmdaeq	r0, {r3, r4, r5, r7, sp}
 1f8:	080020b8 	stmdaeq	r0, {r3, r4, r5, r7, sp}
 1fc:	080020d8 	stmdaeq	r0, {r3, r4, r6, r7, sp}
 200:	080020d8 	stmdaeq	r0, {r3, r4, r6, r7, sp}
 204:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
 208:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
 20c:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
 210:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
 214:	08002150 	stmdaeq	r0, {r4, r6, r8, sp}
 218:	08002150 	stmdaeq	r0, {r4, r6, r8, sp}
 21c:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 220:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 224:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
 228:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
 22c:	08002208 	stmdaeq	r0, {r3, r9, sp}
 230:	08002208 	stmdaeq	r0, {r3, r9, sp}
 234:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
 238:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
 23c:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
 240:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
 244:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
 248:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
 24c:	080022d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp}
 250:	080022d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp}
 254:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
 258:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
 25c:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
 260:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
 264:	0800238c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp}
 268:	0800238c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp}
 26c:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
 270:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
 274:	08002404 	stmdaeq	r0, {r2, sl, sp}
 278:	08002404 	stmdaeq	r0, {r2, sl, sp}
 27c:	08002440 	stmdaeq	r0, {r6, sl, sp}
 280:	08002440 	stmdaeq	r0, {r6, sl, sp}
 284:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
 288:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
 28c:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
 290:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
 294:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
 298:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
 29c:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
 2a0:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
 2a4:	0800256c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp}
 2a8:	0800256c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp}
 2ac:	080025a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, sp}
 2b0:	080025a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, sp}
 2b4:	080025e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp}
 2b8:	080025e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp}
 2bc:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
 2c0:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
 2c4:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
 2c8:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
 2cc:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
 2d0:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
 2d4:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
 2d8:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
 2dc:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
	...
 2e8:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
 2ec:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
 2f0:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
 2f4:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
 2f8:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
 2fc:	080029d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp}
 300:	080029d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp}
 304:	08002a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, sp}
 308:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
 30c:	08002a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, sp}
 310:	08002a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp}
 314:	08002a92 	stmdaeq	r0, {r1, r4, r7, r9, fp, sp}
 318:	08002a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp}
 31c:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
 320:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
 324:	08002b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp}
 328:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
 32c:	08002b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, sp}
 330:	08002b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp}
 334:	08002b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp}
 338:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
 33c:	08002b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp}
 340:	08002b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp}
 344:	08002bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp}
 348:	08002bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp}
 34c:	08002c0a 	stmdaeq	r0, {r1, r3, sl, fp, sp}
 350:	08002c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp}
 354:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
 358:	08002c44 	stmdaeq	r0, {r2, r6, sl, fp, sp}
 35c:	08002c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, sp}
 360:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
 364:	08002cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp, sp}
 368:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
 36c:	08002cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, sp}
 370:	08002ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, sp}
 374:	08002d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, sp}
 378:	08002d20 	stmdaeq	r0, {r5, r8, sl, fp, sp}
 37c:	08002d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, sp}
 380:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
 384:	08002d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, sp}
 388:	08002d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp}
 38c:	08002dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, sp}
 390:	08002ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, sp}
 394:	08002e12 	stmdaeq	r0, {r1, r4, r9, sl, fp, sp}
 398:	08002e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, sp}
 39c:	08002e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, sp}
 3a0:	08002e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp}
 3a4:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
 3a8:	08002e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp}
 3ac:	08002f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, sp}
 3b0:	08002f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, sp}
 3b4:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
 3b8:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
 3bc:	08002f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, sp}
 3c0:	08002f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, sp}
 3c4:	08003032 	stmdaeq	r0, {r1, r4, r5, ip, sp}
 3c8:	08003034 	stmdaeq	r0, {r2, r4, r5, ip, sp}
 3cc:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
	...
 3d8:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
 3dc:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
 3e0:	08003088 	stmdaeq	r0, {r3, r7, ip, sp}
 3e4:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
 3e8:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
 3ec:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 3f0:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 3f4:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
 3f8:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
 3fc:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
 400:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
 404:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
 408:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
 40c:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
	...
 418:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
 41c:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
 420:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
 424:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
 428:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
 42c:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
 430:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
 434:	08003426 	stmdaeq	r0, {r1, r2, r5, sl, ip, sp}
 438:	08003428 	stmdaeq	r0, {r3, r5, sl, ip, sp}
 43c:	08003466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, sp}
 440:	08003468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp}
 444:	080034a6 	stmdaeq	r0, {r1, r2, r5, r7, sl, ip, sp}
 448:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
 44c:	080034e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, sp}
 450:	080034e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp}
 454:	08003526 	stmdaeq	r0, {r1, r2, r5, r8, sl, ip, sp}
 458:	08003528 	stmdaeq	r0, {r3, r5, r8, sl, ip, sp}
 45c:	08003562 	stmdaeq	r0, {r1, r5, r6, r8, sl, ip, sp}
 460:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
 464:	080035a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip, sp}
 468:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
 46c:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
 470:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
 474:	08003622 	stmdaeq	r0, {r1, r5, r9, sl, ip, sp}
 478:	08003624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp}
 47c:	08003662 	stmdaeq	r0, {r1, r5, r6, r9, sl, ip, sp}
 480:	08003664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip, sp}
 484:	080036a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, sp}
 488:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
 48c:	080036e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, ip, sp}
 490:	080036e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp}
 494:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
 498:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
 49c:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
 4a0:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
 4a4:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
 4a8:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
 4ac:	080037e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, ip, sp}
 4b0:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
 4b4:	08003806 	stmdaeq	r0, {r1, r2, fp, ip, sp}
 4b8:	08003808 	stmdaeq	r0, {r3, fp, ip, sp}
 4bc:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
 4c0:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
 4c4:	08003862 	stmdaeq	r0, {r1, r5, r6, fp, ip, sp}
 4c8:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
 4cc:	080038a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, sp}
 4d0:	080038a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, sp}
 4d4:	080038e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, sp}
 4d8:	080038e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp}
 4dc:	08003904 	stmdaeq	r0, {r2, r8, fp, ip, sp}
 4e0:	08003904 	stmdaeq	r0, {r2, r8, fp, ip, sp}
 4e4:	08003942 	stmdaeq	r0, {r1, r6, r8, fp, ip, sp}
 4e8:	08003944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp}
 4ec:	08003982 	stmdaeq	r0, {r1, r7, r8, fp, ip, sp}
 4f0:	08003984 	stmdaeq	r0, {r2, r7, r8, fp, ip, sp}
 4f4:	080039b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip, sp}
 4f8:	080039b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, sp}
 4fc:	080039fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, ip, sp}
 500:	080039fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
 504:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
 508:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
 50c:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
 510:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
 514:	08003b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, ip, sp}
 518:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
 51c:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
 520:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
 524:	08003b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, ip, sp}
 528:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
 52c:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
	...
 538:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
 53c:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
 540:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
 544:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
 548:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
 54c:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
 550:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
 554:	08003eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp, ip, sp}
 558:	08003eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp}
 55c:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
 560:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
 564:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
 568:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
 56c:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
 570:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
 574:	08003f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, sp}
 578:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
 57c:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
 580:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
 584:	08003fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip, sp}
 588:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
 58c:	08003fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 590:	08003ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 594:	08004020 	stmdaeq	r0, {r5, lr}
 598:	08004020 	stmdaeq	r0, {r5, lr}
 59c:	08004050 	stmdaeq	r0, {r4, r6, lr}
 5a0:	08004050 	stmdaeq	r0, {r4, r6, lr}
 5a4:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
 5a8:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
 5ac:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
 5b0:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
 5b4:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
 5b8:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
 5bc:	080041ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, lr}
 5c0:	080041bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, lr}
 5c4:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
 5c8:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
 5cc:	080042c8 	stmdaeq	r0, {r3, r6, r7, r9, lr}
	...
 5d8:	080042c8 	stmdaeq	r0, {r3, r6, r7, r9, lr}
 5dc:	080043a0 	stmdaeq	r0, {r5, r7, r8, r9, lr}
 5e0:	080043a0 	stmdaeq	r0, {r5, r7, r8, r9, lr}
 5e4:	08004426 	stmdaeq	r0, {r1, r2, r5, sl, lr}
 5e8:	08004428 	stmdaeq	r0, {r3, r5, sl, lr}
 5ec:	080045d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr}
 5f0:	080045d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr}
 5f4:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
 5f8:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
 5fc:	08004656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, lr}
 600:	08004658 	stmdaeq	r0, {r3, r4, r6, r9, sl, lr}
 604:	08004696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, lr}
 608:	08004698 	stmdaeq	r0, {r3, r4, r7, r9, sl, lr}
 60c:	080046d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, lr}
 610:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
 614:	0800470e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, lr}
 618:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
 61c:	08004750 	stmdaeq	r0, {r4, r6, r8, r9, sl, lr}
 620:	08004750 	stmdaeq	r0, {r4, r6, r8, r9, sl, lr}
 624:	08004792 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, lr}
 628:	08004794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, lr}
 62c:	080047d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, lr}
 630:	080047d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, lr}
 634:	08004812 	stmdaeq	r0, {r1, r4, fp, lr}
 638:	08004814 	stmdaeq	r0, {r2, r4, fp, lr}
 63c:	080048ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, lr}
 640:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
 644:	080048ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, lr}
 648:	080048cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr}
 64c:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
 650:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
 654:	08004926 	stmdaeq	r0, {r1, r2, r5, r8, fp, lr}
 658:	08004928 	stmdaeq	r0, {r3, r5, r8, fp, lr}
 65c:	0800494a 	stmdaeq	r0, {r1, r3, r6, r8, fp, lr}
 660:	0800494c 	stmdaeq	r0, {r2, r3, r6, r8, fp, lr}
 664:	0800497e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, lr}
 668:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
 66c:	0800499a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, lr}
 670:	0800499c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, lr}
 674:	080049e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, lr}
 678:	080049e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, lr}
 67c:	08004a44 	stmdaeq	r0, {r2, r6, r9, fp, lr}
 680:	08004a44 	stmdaeq	r0, {r2, r6, r9, fp, lr}
 684:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
 688:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
 68c:	08004a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, lr}
 690:	08004a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, lr}
 694:	08004b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, lr}
 698:	08004b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, lr}
 69c:	08004b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, lr}
	...
 6a8:	08004b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, lr}
 6ac:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
 6b0:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
 6b4:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
 6b8:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
 6bc:	08004c82 	stmdaeq	r0, {r1, r7, sl, fp, lr}
 6c0:	08004c84 	stmdaeq	r0, {r2, r7, sl, fp, lr}
 6c4:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
 6c8:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
 6cc:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
 6d0:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
 6d4:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
 6d8:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
 6dc:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
 6e0:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
 6e4:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
	...
 6f0:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
 6f4:	08004d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, lr}
 6f8:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
 6fc:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
 700:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
 704:	08004f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, lr}
 708:	08004f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, lr}
 70c:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
 710:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
 714:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
 718:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
 71c:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
 720:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
 724:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
 728:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
 72c:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
 730:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
 734:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
 738:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
 73c:	080051e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, lr}
 740:	080051e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, lr}
 744:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
 748:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
 74c:	08005250 	stmdaeq	r0, {r4, r6, r9, ip, lr}
 750:	08005250 	stmdaeq	r0, {r4, r6, r9, ip, lr}
 754:	080052a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, lr}
 758:	080052a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, lr}
 75c:	080052c0 	stmdaeq	r0, {r6, r7, r9, ip, lr}
 760:	080052c0 	stmdaeq	r0, {r6, r7, r9, ip, lr}
 764:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
 768:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
 76c:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
 770:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
 774:	0800534c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, lr}
 778:	0800534c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, lr}
 77c:	080053a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, lr}
 780:	080053a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, lr}
 784:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
	...
 790:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
 794:	080053e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, ip, lr}
 798:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
 79c:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
 7a0:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
 7a4:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
 7a8:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
 7ac:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
 7b0:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
 7b4:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
 7b8:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
 7bc:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
 7c0:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
 7c4:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
 7c8:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
 7cc:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
 7d0:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
 7d4:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
 7d8:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
 7dc:	080057d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip, lr}
 7e0:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 7e4:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
 7e8:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
 7ec:	0800587e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip, lr}
 7f0:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
 7f4:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
 7f8:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
 7fc:	080058de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, ip, lr}
 800:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
 804:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
 808:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
 80c:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 810:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 814:	080059b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, lr}
 818:	080059b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, lr}
 81c:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
 820:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
 824:	08005a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, lr}
 828:	08005a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, lr}
 82c:	08005a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip, lr}
 830:	08005a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, lr}
 834:	08005b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, lr}
 838:	08005b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, lr}
 83c:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
 840:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
 844:	08005b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 848:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 84c:	08005c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip, lr}
 850:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
 854:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
 858:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
 85c:	08005d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, lr}
 860:	08005d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, lr}
 864:	08005d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, lr}
 868:	08005d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, lr}
 86c:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
 870:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
 874:	08005de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
 878:	08005de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
 87c:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
	...
 888:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
 88c:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
 890:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
 894:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 898:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 89c:	080060c6 	stmdaeq	r0, {r1, r2, r6, r7, sp, lr}
 8a0:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
 8a4:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
 8a8:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
 8ac:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
 8b0:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
 8b4:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
 8b8:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
 8bc:	080062c0 	stmdaeq	r0, {r6, r7, r9, sp, lr}
 8c0:	080062c0 	stmdaeq	r0, {r6, r7, r9, sp, lr}
 8c4:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
 8c8:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
 8cc:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
 8d0:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
 8d4:	080063d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp, lr}
 8d8:	080063d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp, lr}
 8dc:	08006404 	stmdaeq	r0, {r2, sl, sp, lr}
 8e0:	08006404 	stmdaeq	r0, {r2, sl, sp, lr}
 8e4:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
 8e8:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
 8ec:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
 8f0:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
 8f4:	08006570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp, lr}
 8f8:	08006570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp, lr}
 8fc:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
 900:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
 904:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
 908:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
 90c:	08006798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, sp, lr}
 910:	08006798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, sp, lr}
 914:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
 918:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
 91c:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
 920:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
 924:	08006838 	stmdaeq	r0, {r3, r4, r5, fp, sp, lr}
 928:	08006838 	stmdaeq	r0, {r3, r4, r5, fp, sp, lr}
 92c:	0800685c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp, lr}
 930:	0800685c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp, lr}
 934:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
 938:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
 93c:	08006978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp, lr}
 940:	08006978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp, lr}
 944:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
 948:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
 94c:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
 950:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
 954:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
 958:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
 95c:	08006b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
	...
 968:	08006b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
 96c:	08006bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, sp, lr}
 970:	08006bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp, lr}
 974:	08006bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 978:	08006bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 97c:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
 980:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
 984:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
 988:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
 98c:	08006c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp, lr}
 990:	08006c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp, lr}
 994:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
 998:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
 99c:	08006cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp, lr}
 9a0:	08006cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp, lr}
 9a4:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
	...
 9b0:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
 9b4:	08006d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, lr}
 9b8:	08006d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, lr}
 9bc:	08006d80 	stmdaeq	r0, {r7, r8, sl, fp, sp, lr}
 9c0:	08006d80 	stmdaeq	r0, {r7, r8, sl, fp, sp, lr}
 9c4:	08006db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp, lr}
 9c8:	08006db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp, lr}
 9cc:	08006dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 9d0:	08006dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 9d4:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
 9d8:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
 9dc:	08006eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, lr}
 9e0:	08006eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, lr}
 9e4:	08006f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
 9e8:	08006f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
 9ec:	080070fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp, lr}
 9f0:	080070fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp, lr}
 9f4:	08007158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, lr}
	...
 a00:	08007158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, lr}
 a04:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
 a08:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
 a0c:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
 a10:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
 a14:	080074cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp, lr}
 a18:	080074cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp, lr}
 a1c:	08007520 	stmdaeq	r0, {r5, r8, sl, ip, sp, lr}
 a20:	08007520 	stmdaeq	r0, {r5, r8, sl, ip, sp, lr}
 a24:	0800756a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip, sp, lr}
 a28:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
 a2c:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
	...
 a38:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
 a3c:	08007616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip, sp, lr}
 a40:	08007618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp, lr}
 a44:	08007646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, sp, lr}
 a48:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
 a4c:	080076ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, sp, lr}
 a50:	080076cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, sp, lr}
 a54:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
 a58:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
 a5c:	0800774c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp, lr}
 a60:	0800774c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp, lr}
 a64:	08007794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, lr}
 a68:	08007794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, lr}
 a6c:	080077d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 a70:	080077d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 a74:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 a78:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 a7c:	08007850 	stmdaeq	r0, {r4, r6, fp, ip, sp, lr}
 a80:	08007850 	stmdaeq	r0, {r4, r6, fp, ip, sp, lr}
 a84:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
 a88:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
 a8c:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
 a90:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
 a94:	08007a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp, lr}
 a98:	08007a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp, lr}
 a9c:	08007a8a 	stmdaeq	r0, {r1, r3, r7, r9, fp, ip, sp, lr}
	...
 aa8:	08007a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp, lr}
 aac:	08007cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp, lr}
 ab0:	08007cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp, lr}
 ab4:	08007d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, ip, sp, lr}
 ab8:	08007d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, sp, lr}
 abc:	08007e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp, lr}
 ac0:	08007e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp, lr}
 ac4:	08007e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp, lr}
 ac8:	08007e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp, lr}
 acc:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
 ad0:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
 ad4:	08007eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp, lr}
 ad8:	08007eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp, lr}
 adc:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 ae0:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 ae4:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 ae8:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 aec:	08007f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 af0:	08007f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 af4:	08007f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 af8:	08007f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 afc:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 b00:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 b04:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
 b08:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
 b0c:	08007fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 b10:	08007fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 b14:	08008020 	stmdaeq	r0, {r5, pc}
 b18:	08008020 	stmdaeq	r0, {r5, pc}
 b1c:	08008058 	stmdaeq	r0, {r3, r4, r6, pc}
 b20:	08008058 	stmdaeq	r0, {r3, r4, r6, pc}
 b24:	080080c0 	stmdaeq	r0, {r6, r7, pc}
 b28:	080080c0 	stmdaeq	r0, {r6, r7, pc}
 b2c:	08008108 	stmdaeq	r0, {r3, r8, pc}
 b30:	08008108 	stmdaeq	r0, {r3, r8, pc}
 b34:	08008228 	stmdaeq	r0, {r3, r5, r9, pc}
 b38:	08008228 	stmdaeq	r0, {r3, r5, r9, pc}
 b3c:	08008270 	stmdaeq	r0, {r4, r5, r6, r9, pc}
 b40:	08008270 	stmdaeq	r0, {r4, r5, r6, r9, pc}
 b44:	080082e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, pc}
 b48:	080082e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, pc}
 b4c:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
 b50:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
 b54:	08008378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, pc}
 b58:	08008378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, pc}
 b5c:	08008440 	stmdaeq	r0, {r6, sl, pc}
 b60:	08008440 	stmdaeq	r0, {r6, sl, pc}
 b64:	080084a8 	stmdaeq	r0, {r3, r5, r7, sl, pc}
 b68:	080084a8 	stmdaeq	r0, {r3, r5, r7, sl, pc}
 b6c:	080085d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, pc}
 b70:	080085d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, pc}
 b74:	0800888c 	stmdaeq	r0, {r2, r3, r7, fp, pc}
 b78:	0800888c 	stmdaeq	r0, {r2, r3, r7, fp, pc}
 b7c:	08008bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, pc}
 b80:	08008bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, pc}
 b84:	08008c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, pc}
 b88:	08008c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, pc}
 b8c:	08008e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, pc}
 b90:	08008e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, pc}
 b94:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
 b98:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
 b9c:	08009014 	stmdaeq	r0, {r2, r4, ip, pc}
 ba0:	08009014 	stmdaeq	r0, {r2, r4, ip, pc}
 ba4:	0800917a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, pc}
 ba8:	0800917c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, pc}
 bac:	080091f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip, pc}
 bb0:	080091f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, pc}
 bb4:	08009356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, ip, pc}
 bb8:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
 bbc:	080093ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, pc}
 bc0:	080093b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, pc}
 bc4:	08009450 	stmdaeq	r0, {r4, r6, sl, ip, pc}
 bc8:	08009450 	stmdaeq	r0, {r4, r6, sl, ip, pc}
 bcc:	080094a0 	stmdaeq	r0, {r5, r7, sl, ip, pc}
 bd0:	080094a0 	stmdaeq	r0, {r5, r7, sl, ip, pc}
 bd4:	080094be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip, pc}
 bd8:	080094c0 	stmdaeq	r0, {r6, r7, sl, ip, pc}
 bdc:	080094de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip, pc}
 be0:	080094e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, pc}
 be4:	08009680 	stmdaeq	r0, {r7, r9, sl, ip, pc}
 be8:	08009680 	stmdaeq	r0, {r7, r9, sl, ip, pc}
 bec:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
 bf0:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
 bf4:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
 bf8:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
 bfc:	080099c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, pc}
 c00:	080099c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, pc}
 c04:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}
 c08:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}
 c0c:	080099e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, pc}
 c10:	080099e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, pc}
 c14:	08009a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, pc}
 c18:	08009a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, pc}
 c1c:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}
 c20:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}
 c24:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
 c28:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
 c2c:	08009ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, pc}
 c30:	08009ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, pc}
 c34:	08009cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, pc}
 c38:	08009cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, pc}
 c3c:	08009d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, ip, pc}
	...
 c48:	08009d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, ip, pc}
 c4c:	08009d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, pc}
 c50:	08009d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, pc}
 c54:	08009d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, ip, pc}
 c58:	08009d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, pc}
 c5c:	08009e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, pc}
 c60:	08009e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, pc}
 c64:	08009e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, pc}
 c68:	08009e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, pc}
 c6c:	08009e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, pc}
 c70:	08009e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, pc}
 c74:	08009eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, pc}
 c78:	08009eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, pc}
 c7c:	08009ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, pc}
 c80:	08009ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, pc}
 c84:	08009f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, pc}
 c88:	08009f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, pc}
 c8c:	08009f56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, ip, pc}
 c90:	08009f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip, pc}
 c94:	08009f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
 c98:	08009f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
 c9c:	08009fea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 ca0:	08009fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 ca4:	0800a080 	stmdaeq	r0, {r7, sp, pc}
 ca8:	0800a080 	stmdaeq	r0, {r7, sp, pc}
 cac:	0800a0ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sp, pc}
 cb0:	0800a0d0 	stmdaeq	r0, {r4, r6, r7, sp, pc}
 cb4:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
 cb8:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
 cbc:	0800a438 	stmdaeq	r0, {r3, r4, r5, sl, sp, pc}
 cc0:	0800a438 	stmdaeq	r0, {r3, r4, r5, sl, sp, pc}
 cc4:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
 cc8:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
 ccc:	0800a694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, pc}
 cd0:	0800a694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, pc}
 cd4:	0800a6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, pc}
 cd8:	0800a6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, pc}
 cdc:	0800a70e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, sp, pc}
 ce0:	0800a710 	stmdaeq	r0, {r4, r8, r9, sl, sp, pc}
 ce4:	0800a79c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp, pc}
 ce8:	0800a79c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp, pc}
 cec:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
 cf0:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
 cf4:	0800a894 	stmdaeq	r0, {r2, r4, r7, fp, sp, pc}
 cf8:	0800a894 	stmdaeq	r0, {r2, r4, r7, fp, sp, pc}
 cfc:	0800a9f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, sp, pc}
 d00:	0800a9f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, sp, pc}
 d04:	0800abcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp, pc}
 d08:	0800abcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp, pc}
 d0c:	0800ad98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, pc}
 d10:	0800ad98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, pc}
 d14:	0800ae04 	stmdaeq	r0, {r2, r9, sl, fp, sp, pc}
 d18:	0800ae04 	stmdaeq	r0, {r2, r9, sl, fp, sp, pc}
 d1c:	0800ae38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, pc}
	...
 d28:	0800ae54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp, pc}
 d2c:	0800ae92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp, sp, pc}
 d30:	0800b002 	stmdaeq	r0, {r1, ip, sp, pc}
 d34:	0800b012 	stmdaeq	r0, {r1, r4, ip, sp, pc}
	...
 d40:	0800ae38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, pc}
 d44:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
	...
 d50:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
 d54:	0800b1c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp, pc}
	...
 d60:	0800b1c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp, pc}
 d64:	0800b272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip, sp, pc}
	...
 d70:	0800b274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, pc}
 d74:	0800b5a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, sp, pc}
	...
 d80:	0800b5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, pc}
 d84:	0800b5e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp, pc}
 d88:	0800b7f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 d8c:	0800b81e 	stmdaeq	r0, {r1, r2, r3, r4, fp, ip, sp, pc}
	...
 d98:	0800b71e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip, sp, pc}
 d9c:	0800b722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip, sp, pc}
 da0:	0800b746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, ip, sp, pc}
 da4:	0800b74a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip, sp, pc}
	...
 db0:	0800b5a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, sp, pc}
 db4:	0800b9d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp, pc}
	...
 dc0:	0800b9da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 dc4:	0800b9dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 dc8:	0800b9ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 dcc:	0800b9ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, pc}
	...
 dd8:	0800bce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp, pc}
 ddc:	0800bce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, sp, pc}
 de0:	0800bcea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp, pc}
 de4:	0800bcf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 de8:	0800bd00 	stmdaeq	r0, {r8, sl, fp, ip, sp, pc}
 dec:	0800bd02 	stmdaeq	r0, {r1, r8, sl, fp, ip, sp, pc}
 df0:	0800bd06 	stmdaeq	r0, {r1, r2, r8, sl, fp, ip, sp, pc}
 df4:	0800bd0a 	stmdaeq	r0, {r1, r3, r8, sl, fp, ip, sp, pc}
	...
 e00:	0800bce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, sp, pc}
 e04:	0800bcea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp, pc}
 e08:	0800bcf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 e0c:	0800bd00 	stmdaeq	r0, {r8, sl, fp, ip, sp, pc}
	...
 e18:	0800bea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp, pc}
 e1c:	0800bea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, sp, pc}
 e20:	0800beac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, sp, pc}
 e24:	0800beb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp, pc}
	...
 e30:	0800bf46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, ip, sp, pc}
 e34:	0800bf48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp, pc}
 e38:	0800bf4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, ip, sp, pc}
 e3c:	0800bf50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp, pc}
	...
 e48:	0800c05c 	stmdaeq	r0, {r2, r3, r4, r6, lr, pc}
 e4c:	0800c060 	stmdaeq	r0, {r5, r6, lr, pc}
 e50:	0800c068 	stmdaeq	r0, {r3, r5, r6, lr, pc}
 e54:	0800c06c 	stmdaeq	r0, {r2, r3, r5, r6, lr, pc}
 e58:	0800c070 	stmdaeq	r0, {r4, r5, r6, lr, pc}
 e5c:	0800c074 	stmdaeq	r0, {r2, r4, r5, r6, lr, pc}
 e60:	0800c07a 	stmdaeq	r0, {r1, r3, r4, r5, r6, lr, pc}
 e64:	0800c07e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, lr, pc}
 e68:	0800c080 	stmdaeq	r0, {r7, lr, pc}
 e6c:	0800c084 	stmdaeq	r0, {r2, r7, lr, pc}
	...
 e78:	0800c0aa 	stmdaeq	r0, {r1, r3, r5, r7, lr, pc}
 e7c:	0800c0ac 	stmdaeq	r0, {r2, r3, r5, r7, lr, pc}
 e80:	0800c0b4 	stmdaeq	r0, {r2, r4, r5, r7, lr, pc}
 e84:	0800c0b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, lr, pc}
	...
 e90:	0800c424 	stmdaeq	r0, {r2, r5, sl, lr, pc}
 e94:	0800c426 	stmdaeq	r0, {r1, r2, r5, sl, lr, pc}
 e98:	0800c42a 	stmdaeq	r0, {r1, r3, r5, sl, lr, pc}
 e9c:	0800c42e 	stmdaeq	r0, {r1, r2, r3, r5, sl, lr, pc}
	...
 ea8:	0800b9d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp, pc}
 eac:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
	...
 eb8:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
 ebc:	0800c69e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, lr, pc}
	...
 ec8:	0800c6a0 	stmdaeq	r0, {r5, r7, r9, sl, lr, pc}
 ecc:	0800c6ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr, pc}
	...
 ed8:	0800c6ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr, pc}
 edc:	0800c6fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, lr, pc}
	...
 ee8:	0800c6fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, lr, pc}
 eec:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
	...
 ef8:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
 efc:	0800c70a 	stmdaeq	r0, {r1, r3, r8, r9, sl, lr, pc}
	...
 f08:	0800c774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr, pc}
 f0c:	0800c776 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, lr, pc}
 f10:	0800c77a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, lr, pc}
 f14:	0800c77e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, lr, pc}
	...
 f20:	0800c70c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr, pc}
 f24:	0800c82c 	stmdaeq	r0, {r2, r3, r5, fp, lr, pc}
	...
 f30:	0800c8f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, lr, pc}
 f34:	0800c900 	stmdaeq	r0, {r8, fp, lr, pc}
 f38:	0800c902 	stmdaeq	r0, {r1, r8, fp, lr, pc}
 f3c:	0800c906 	stmdaeq	r0, {r1, r2, r8, fp, lr, pc}
 f40:	0800c908 	stmdaeq	r0, {r3, r8, fp, lr, pc}
 f44:	0800c90c 	stmdaeq	r0, {r2, r3, r8, fp, lr, pc}
	...
 f50:	0800c830 	stmdaeq	r0, {r4, r5, fp, lr, pc}
 f54:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
	...
 f60:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
 f64:	0800c95a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, lr, pc}
	...
 f70:	0800c95c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, lr, pc}
 f74:	0800c968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr, pc}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000d4 	ldrdeq	r0, [r0], -r4
       4:	00ae0002 	adceq	r0, lr, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	2f006372 	svccs	0x00006372
      20:	2f727375 	svccs	0x00727375
      24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      28:	2f656475 	svccs	0x00656475
      2c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      30:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe94 <_estack+0xdffcfe94>
      34:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      38:	2f00656e 	svccs	0x0000656e
      3c:	2f727375 	svccs	0x00727375
      40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      44:	2f656475 	svccs	0x00656475
      48:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      4c:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
      50:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
      54:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      58:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      5c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      60:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      64:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
      68:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
      6c:	2f736569 	svccs	0x00736569
      70:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      74:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
      78:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
      7c:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
      80:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
      84:	00010063 	andeq	r0, r1, r3, rrx
      88:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
      8c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      90:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      94:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      98:	00020068 	andeq	r0, r2, r8, rrx
      9c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
      a0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
      a4:	00030068 	andeq	r0, r3, r8, rrx
      a8:	726f6300 	rsbvc	r6, pc, #0, 6
      ac:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
      b0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
      b4:	00000004 	andeq	r0, r0, r4
      b8:	08020500 	stmdaeq	r2, {r8, sl}
      bc:	0308000b 	movweq	r0, #32779	; 0x800b
      c0:	a03e011a 	eorsge	r0, lr, sl, lsl r1
      c4:	02004c34 	andeq	r4, r0, #52, 24	; 0x3400
      c8:	3c060204 	sfmcc	f0, 4, [r6], {4}
      cc:	01040200 	mrseq	r0, R12_usr
      d0:	024b063c 	subeq	r0, fp, #60, 12	; 0x3c00000
      d4:	01010003 	tsteq	r1, r3
      d8:	00000104 	andeq	r0, r0, r4, lsl #2
      dc:	00b40002 	adcseq	r0, r4, r2
      e0:	01020000 	mrseq	r0, (UNDEF: 2)
      e4:	000d0efb 	strdeq	r0, [sp], -fp
      e8:	01010101 	tsteq	r1, r1, lsl #2
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	73010000 	movwvc	r0, #4096	; 0x1000
      f4:	2f006372 	svccs	0x00006372
      f8:	2f727375 	svccs	0x00727375
      fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     100:	2f656475 	svccs	0x00656475
     104:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     108:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; ffffff6c <_estack+0xdffcff6c>
     10c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     110:	2f00656e 	svccs	0x0000656e
     114:	2f727375 	svccs	0x00727375
     118:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     11c:	2f656475 	svccs	0x00656475
     120:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     124:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
     128:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
     12c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     130:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     134:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     138:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     13c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     140:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     144:	2f736569 	svccs	0x00736569
     148:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     14c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     150:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     154:	63000065 	movwvs	r0, #101	; 0x65
     158:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     15c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xc6f
     160:	00632e72 	rsbeq	r2, r3, r2, ror lr
     164:	5f000001 	svcpl	0x00000001
     168:	61666564 	cmnvs	r6, r4, ror #10
     16c:	5f746c75 	svcpl	0x00746c75
     170:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     174:	00682e73 	rsbeq	r2, r8, r3, ror lr
     178:	73000002 	movwvc	r0, #2
     17c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     180:	00682e74 	rsbeq	r2, r8, r4, ror lr
     184:	63000003 	movwvs	r0, #3
     188:	5f65726f 	svcpl	0x0065726f
     18c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     190:	00040068 	andeq	r0, r4, r8, rrx
     194:	05000000 	streq	r0, [r0, #-0]
     198:	000b4802 	andeq	r4, fp, r2, lsl #16
     19c:	01170308 	tsteq	r7, r8, lsl #6
     1a0:	0602f375 			; <UNDEFINED> instruction: 0x0602f375
     1a4:	00010100 	andeq	r0, r1, r0, lsl #2
     1a8:	0b840205 	bleq	fe1009c4 <_estack+0xde0d09c4>
     1ac:	1d030800 	stcne	8, cr0, [r3, #-0]
     1b0:	02f47501 	rscseq	r7, r4, #4194304	; 0x400000
     1b4:	01010006 	tsteq	r1, r6
     1b8:	c0020500 	andgt	r0, r2, r0, lsl #10
     1bc:	0308000b 	movweq	r0, #32779	; 0x800b
     1c0:	f4750124 			; <UNDEFINED> instruction: 0xf4750124
     1c4:	01000602 	tsteq	r0, r2, lsl #12
     1c8:	02050001 	andeq	r0, r5, #1
     1cc:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
     1d0:	4b012b03 	blmi	4ade4 <_Min_Stack_Size+0x4a9e4>
     1d4:	5b59afad 	blpl	166c090 <_Min_Stack_Size+0x166bc90>
     1d8:	02cabbad 	sbceq	fp, sl, #177152	; 0x2b400
     1dc:	01010003 	tsteq	r1, r3
     1e0:	000001a9 	andeq	r0, r0, r9, lsr #3
     1e4:	00f60002 	rscseq	r0, r6, r2
     1e8:	01020000 	mrseq	r0, (UNDEF: 2)
     1ec:	000d0efb 	strdeq	r0, [sp], -fp
     1f0:	01010101 	tsteq	r1, r1, lsl #2
     1f4:	01000000 	mrseq	r0, (UNDEF: 0)
     1f8:	73010000 	movwvc	r0, #4096	; 0x1000
     1fc:	2f006372 	svccs	0x00006372
     200:	2f727375 	svccs	0x00727375
     204:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     208:	2f656475 	svccs	0x00656475
     20c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     210:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 74 <_Min_Heap_Size+0x74>
     214:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     218:	2f00656e 	svccs	0x0000656e
     21c:	2f727375 	svccs	0x00727375
     220:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     224:	2f656475 	svccs	0x00656475
     228:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     22c:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
     230:	552f636e 	strpl	r6, [pc, #-878]!	; fffffeca <_estack+0xdffcfeca>
     234:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     238:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
     23c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     240:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     244:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
     248:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     24c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     250:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
     254:	4f432f63 	svcmi	0x00432f63
     258:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     25c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     260:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     264:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     268:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     26c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     270:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     274:	5349534d 	movtpl	r5, #37709	; 0x934d
     278:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     27c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     280:	74610000 	strbtvc	r0, [r1], #-0
     284:	75746974 	ldrbvc	r6, [r4, #-2420]!	; 0x974
     288:	632e6564 	teqvs	lr, #100, 10	; 0x19000000
     28c:	00000100 	andeq	r0, r0, r0, lsl #2
     290:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     294:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     298:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     29c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     2a0:	00000200 	andeq	r0, r0, r0, lsl #4
     2a4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     2a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     2ac:	00000300 	andeq	r0, r0, r0, lsl #6
     2b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     2b4:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     2b8:	645f6939 	ldrbvs	r6, [pc], #-2361	; 2c0 <_Min_Heap_Size+0x2c0>
     2bc:	6f637369 	svcvs	0x00637369
     2c0:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     2c4:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
     2c8:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
     2cc:	00040068 	andeq	r0, r4, r8, rrx
     2d0:	726f6300 	rsbvc	r6, pc, #0, 6
     2d4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     2d8:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     2dc:	00000005 	andeq	r0, r0, r5
     2e0:	94020500 	strls	r0, [r2], #-1280	; 0x500
     2e4:	0308000c 	movweq	r0, #32780	; 0x800c
     2e8:	2f420116 	svccs	0x00420116
     2ec:	2f2f2f2f 	svccs	0x002f2f2f
     2f0:	2f5b2f2f 	svccs	0x005b2f2f
     2f4:	023d4d2f 	eorseq	r4, sp, #3008	; 0xbc0
     2f8:	01010003 	tsteq	r1, r3
     2fc:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     300:	0308000c 	movweq	r0, #32780	; 0x800c
     304:	674b0130 	smlaldxvs	r0, fp, r0, r1
     308:	7875314b 	ldmdavc	r5!, {r0, r1, r3, r6, r8, ip, sp}^
     30c:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     310:	02003e02 	andeq	r3, r0, #2, 28
     314:	9c080204 	sfmls	f0, 4, [r8], {4}
     318:	01040200 	mrseq	r0, R12_usr
     31c:	51063c06 	tstpl	r6, r6, lsl #24
     320:	02040200 	andeq	r0, r4, #0, 4
     324:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     328:	009c0802 	addseq	r0, ip, r2, lsl #16
     32c:	06010402 	streq	r0, [r1], -r2, lsl #8
     330:	0043063c 	subeq	r0, r3, ip, lsr r6
     334:	3e020402 	cdpcc	4, 0, cr0, cr2, cr2, {0}
     338:	02040200 	andeq	r0, r4, #0, 4
     33c:	02005608 	andeq	r5, r0, #8, 12	; 0x800000
     340:	3c060104 	stfccs	f0, [r6], {4}
     344:	05024006 	streq	r4, [r2, #-6]
     348:	00010100 	andeq	r0, r1, r0, lsl #2
     34c:	0dfc0205 	lfmeq	f0, 2, [ip, #20]!
     350:	d2030800 	andle	r0, r3, #0, 16
     354:	ad590100 	ldfgee	f0, [r9, #-0]
     358:	5bd9d72f 	blpl	ff67601c <_estack+0xdf64601c>
     35c:	ad08c908 	stcge	9, cr12, [r8, #-32]	; 0xffffffe0
     360:	af08ad08 	svcge	0x0008ad08
     364:	02040200 	andeq	r0, r4, #0, 4
     368:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     36c:	00c60802 	sbceq	r0, r6, r2, lsl #16
     370:	06010402 	streq	r0, [r1], -r2, lsl #8
     374:	0842063c 	stmdaeq	r2, {r2, r3, r4, r5, r9, sl}^
     378:	11560259 	cmpne	r6, r9, asr r2
     37c:	75083008 	strvc	r3, [r8, #-8]
     380:	08115602 	ldmdaeq	r1, {r1, r9, sl, ip, lr}
     384:	14250222 	strtne	r0, [r5], #-546	; 0x222
     388:	01000402 	tsteq	r0, r2, lsl #8
     38c:	00008801 	andeq	r8, r0, r1, lsl #16
     390:	47000200 	strmi	r0, [r0, -r0, lsl #4]
     394:	02000000 	andeq	r0, r0, #0
     398:	0d0efb01 	vstreq	d15, [lr, #-4]
     39c:	01010100 	mrseq	r0, (UNDEF: 17)
     3a0:	00000001 	andeq	r0, r0, r1
     3a4:	01000001 	tsteq	r0, r1
     3a8:	2f636e69 	svccs	0x00636e69
     3ac:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     3b0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2a4 <_Min_Heap_Size+0x2a4>
     3b4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     3b8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     3bc:	00003446 	andeq	r3, r0, r6, asr #8
     3c0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     3c4:	5f707574 	svcpl	0x00707574
     3c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     3cc:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     3d0:	33345f39 	teqcc	r4, #57, 30	; 0xe4
     3d4:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
     3d8:	00010073 	andeq	r0, r1, r3, ror r0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	0011e802 	andseq	lr, r1, r2, lsl #16
     3e4:	00ca0308 	sbceq	r0, sl, r8, lsl #6
     3e8:	21232101 	teqcs	r3, r1, lsl #2
     3ec:	21232121 	teqcs	r3, r1, lsr #2
     3f0:	21212121 	teqcs	r1, r1, lsr #2
     3f4:	31212321 	teqcc	r1, r1, lsr #6
     3f8:	30232121 	eorcc	r2, r3, r1, lsr #2
     3fc:	2065032f 	rsbcs	r0, r5, pc, lsr #6
     400:	36322f34 	shasxcc	r2, r2, r4
     404:	01000202 	tsteq	r0, r2, lsl #4
     408:	02050001 	andeq	r0, r5, #1
     40c:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
     410:	0100f603 	tsteq	r0, r3, lsl #12
     414:	01000102 	tsteq	r0, r2, lsl #2
     418:	0001ad01 	andeq	sl, r1, r1, lsl #26
     41c:	27000200 	strcs	r0, [r0, -r0, lsl #4]
     420:	02000001 	andeq	r0, r0, #1
     424:	0d0efb01 	vstreq	d15, [lr, #-4]
     428:	01010100 	mrseq	r0, (UNDEF: 17)
     42c:	00000001 	andeq	r0, r0, r1
     430:	01000001 	tsteq	r0, r1
     434:	2f636e69 	svccs	0x00636e69
     438:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     43c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 330 <_Min_Heap_Size+0x330>
     440:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     444:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     448:	732f3446 	teqvc	pc, #1174405120	; 0x46000000
     44c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     450:	2f007075 	svccs	0x00007075
     454:	2f727375 	svccs	0x00727375
     458:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     45c:	2f656475 	svccs	0x00656475
     460:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     464:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2c8 <_Min_Heap_Size+0x2c8>
     468:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     46c:	2f00656e 	svccs	0x0000656e
     470:	2f727375 	svccs	0x00727375
     474:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     478:	2f656475 	svccs	0x00656475
     47c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     480:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
     484:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
     488:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     48c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     490:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     494:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     498:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     49c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     4a0:	2f736569 	svccs	0x00736569
     4a4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     4a8:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     4ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     4b0:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     4b4:	4f432f63 	svcmi	0x00432f63
     4b8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     4bc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     4c0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     4c4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     4c8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     4cc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     4d0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     4d4:	5349534d 	movtpl	r5, #37709	; 0x934d
     4d8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     4dc:	2f656369 	svccs	0x00656369
     4e0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     4e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     4e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     4ec:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     4f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     4f4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     4f8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     4fc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     500:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     504:	632e7878 	teqvs	lr, #120, 16	; 0x780000
     508:	00000100 	andeq	r0, r0, r0, lsl #2
     50c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     510:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     514:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     518:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     51c:	00000200 	andeq	r0, r0, r0, lsl #4
     520:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     524:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     528:	00000300 	andeq	r0, r0, r0, lsl #6
     52c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     530:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     534:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     538:	74730000 	ldrbtvc	r0, [r3], #-0
     53c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     540:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     544:	00050068 	andeq	r0, r5, r8, rrx
     548:	05000000 	streq	r0, [r0, #-0]
     54c:	00123002 	andseq	r3, r2, r2
     550:	01d00308 	bicseq	r0, r0, r8, lsl #6
     554:	69863101 	stmibvs	r6, {r0, r8, ip, sp}
     558:	693f853f 	ldmdbvs	pc!, {r0, r1, r2, r3, r4, r5, r8, sl, pc}	; <UNPREDICTABLE>
     55c:	024c3444 	subeq	r3, ip, #68, 8	; 0x44000000
     560:	01010007 	tsteq	r1, r7
     564:	98020500 	stmdals	r2, {r8, sl}
     568:	03080012 	movweq	r0, #32786	; 0x8012
     56c:	3d01029d 	sfmcc	f0, 4, [r1, #-628]	; 0xfffffd8c
     570:	3d775aa1 	vldmdbcc	r7!, {s11-s171}
     574:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
     578:	cbdb3f5a 	blgt	ff6d02e8 <_estack+0xdf6a02e8>
     57c:	3d226783 	stccc	7, cr6, [r2, #-524]!	; 0xfffffdf4
     580:	02679224 	rsbeq	r9, r7, #36, 4	; 0x40000002
     584:	01010010 	tsteq	r1, r0, lsl r0
     588:	90020500 	andls	r0, r2, r0, lsl #10
     58c:	03080013 	movweq	r0, #32787	; 0x8013
     590:	400102d5 	ldrdmi	r0, [r1], -r5
     594:	0402004d 	streq	r0, [r2], #-77	; 0x4d
     598:	02006b01 	andeq	r6, r0, #1024	; 0x400
     59c:	00590104 	subseq	r0, r9, r4, lsl #2
     5a0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     5a4:	31406876 	hvccc	1670	; 0x686
     5a8:	4d69673f 	stclmi	7, cr6, [r9, #-252]!	; 0xffffff04
     5ac:	69406969 	stmdbvs	r0, {r0, r3, r5, r6, r8, fp, sp, lr}^
     5b0:	01040200 	mrseq	r0, R12_usr
     5b4:	6b062006 	blvs	1885d4 <_Min_Stack_Size+0x1881d4>
     5b8:	0069674d 	rsbeq	r6, r9, sp, asr #14
     5bc:	06010402 	streq	r0, [r1], -r2, lsl #8
     5c0:	09030620 	stmdbeq	r3, {r5, r9, sl}
     5c4:	000d0266 	andeq	r0, sp, r6, ror #4
     5c8:	01f80101 	mvnseq	r0, r1, lsl #2
     5cc:	00020000 	andeq	r0, r2, r0
     5d0:	00000186 	andeq	r0, r0, r6, lsl #3
     5d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5d8:	0101000d 	tsteq	r1, sp
     5dc:	00000101 	andeq	r0, r0, r1, lsl #2
     5e0:	00000100 	andeq	r0, r0, r0, lsl #2
     5e4:	636e6901 	cmnvs	lr, #16384	; 0x4000
     5e8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     5ec:	5f584554 	svcpl	0x00584554
     5f0:	5f46344d 	svcpl	0x0046344d
     5f4:	334d5453 	movtcc	r5, #54355	; 0xd453
     5f8:	2f344632 	svccs	0x00344632
     5fc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     600:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     604:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     608:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     60c:	5f787834 	svcpl	0x00787834
     610:	50647453 	rsbpl	r7, r4, r3, asr r4
     614:	70697265 	rsbvc	r7, r9, r5, ror #4
     618:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     61c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     620:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     624:	73752f00 	cmnvc	r5, #0, 30
     628:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     62c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     630:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     634:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     638:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     63c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     640:	73752f00 	cmnvc	r5, #0, 30
     644:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     648:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     64c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     650:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     654:	636e6900 	cmnvs	lr, #0, 18
     658:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     65c:	5f584554 	svcpl	0x00584554
     660:	5f46344d 	svcpl	0x0046344d
     664:	334d5453 	movtcc	r5, #54355	; 0xd453
     668:	2f344632 	svccs	0x00344632
     66c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     670:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     674:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     678:	2f534953 	svccs	0x00534953
     67c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     680:	00656475 	rsbeq	r6, r5, r5, ror r4
     684:	2f636e69 	svccs	0x00636e69
     688:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     68c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 580 <_Min_Stack_Size+0x180>
     690:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     694:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     698:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 588 <_Min_Stack_Size+0x188>
     69c:	61726269 	cmnvs	r2, r9, ror #4
     6a0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     6a4:	534d432f 	movtpl	r4, #54063	; 0xd32f
     6a8:	442f5349 	strtmi	r5, [pc], #-841	; 6b0 <_Min_Stack_Size+0x2b0>
     6ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     6b0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
     6b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     6b8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     6bc:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     6c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     6c4:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
     6c8:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
     6cc:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     6d0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     6d4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     6d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     6dc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     6e0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     6e4:	2f736569 	svccs	0x00736569
     6e8:	334d5453 	movtcc	r5, #54355	; 0xd453
     6ec:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     6f0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     6f4:	72655064 	rsbvc	r5, r5, #100	; 0x64
     6f8:	5f687069 	svcpl	0x00687069
     6fc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     700:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     704:	0000636e 	andeq	r6, r0, lr, ror #6
     708:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     70c:	0100632e 	tsteq	r0, lr, lsr #6
     710:	645f0000 	ldrbvs	r0, [pc], #-0	; 718 <_Min_Stack_Size+0x318>
     714:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     718:	745f746c 	ldrbvc	r7, [pc], #-1132	; 720 <_Min_Stack_Size+0x320>
     71c:	73657079 	cmnvc	r5, #121	; 0x79
     720:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     724:	74730000 	ldrbtvc	r0, [r3], #-0
     728:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     72c:	0300682e 	movweq	r6, #2094	; 0x82e
     730:	6f630000 	svcvs	0x00630000
     734:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     738:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     73c:	00000400 	andeq	r0, r0, r0, lsl #8
     740:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     744:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     748:	00682e78 	rsbeq	r2, r8, r8, ror lr
     74c:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     750:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     754:	00060068 	andeq	r0, r6, r8, rrx
     758:	05000000 	streq	r0, [r0, #-0]
     75c:	00148402 	andseq	r8, r4, r2, lsl #8
     760:	00f60308 	rscseq	r0, r6, r8, lsl #6
     764:	02754f01 	rsbseq	r4, r5, #1, 30
     768:	01010007 	tsteq	r1, r7
     76c:	a8020500 	stmdage	r2, {r8, sl}
     770:	03080014 	movweq	r0, #32788	; 0x8014
     774:	4b010188 	blmi	40d9c <_Min_Stack_Size+0x4099c>
     778:	4b754d6d 	blmi	1d53d34 <_Min_Stack_Size+0x1d53934>
     77c:	3e84755a 	mcrcc	5, 4, r7, cr4, cr10, {2}
     780:	42735977 	rsbsmi	r5, r3, #1949696	; 0x1dc000
     784:	023f7359 	eorseq	r7, pc, #1677721601	; 0x64000001
     788:	01010009 	tsteq	r1, r9
     78c:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     790:	03080015 	movweq	r0, #32789	; 0x8015
     794:	5d0101b4 	stfpls	f0, [r1, #-720]	; 0xfffffd30
     798:	00080291 	muleq	r8, r1, r2
     79c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7a0:	00159002 	andseq	r9, r5, r2
     7a4:	01c70308 	biceq	r0, r7, r8, lsl #6
     7a8:	783e7901 	ldmdavc	lr!, {r0, r8, fp, ip, sp, lr}
     7ac:	00080276 	andeq	r0, r8, r6, ror r2
     7b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7b4:	0015d002 	andseq	sp, r5, r2
     7b8:	01df0308 	bicseq	r0, pc, r8, lsl #6
     7bc:	783e4d01 	ldmdavc	lr!, {r0, r8, sl, fp, lr}
     7c0:	00080268 	andeq	r0, r8, r8, ror #4
     7c4:	02f80101 	rscseq	r0, r8, #1073741824	; 0x40000000
     7c8:	00020000 	andeq	r0, r2, r0
     7cc:	0000019a 	muleq	r0, sl, r1
     7d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7d4:	0101000d 	tsteq	r1, sp
     7d8:	00000101 	andeq	r0, r0, r1, lsl #2
     7dc:	00000100 	andeq	r0, r0, r0, lsl #2
     7e0:	636e6901 	cmnvs	lr, #16384	; 0x4000
     7e4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     7e8:	5f584554 	svcpl	0x00584554
     7ec:	5f46344d 	svcpl	0x0046344d
     7f0:	334d5453 	movtcc	r5, #54355	; 0xd453
     7f4:	2f344632 	svccs	0x00344632
     7f8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     7fc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     800:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     804:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     808:	5f787834 	svcpl	0x00787834
     80c:	50647453 	rsbpl	r7, r4, r3, asr r4
     810:	70697265 	rsbvc	r7, r9, r5, ror #4
     814:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     818:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     81c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     820:	73752f00 	cmnvc	r5, #0, 30
     824:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     828:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     82c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     830:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     834:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     838:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     83c:	73752f00 	cmnvc	r5, #0, 30
     840:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     844:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     848:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     84c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     850:	636e6900 	cmnvs	lr, #0, 18
     854:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     858:	5f584554 	svcpl	0x00584554
     85c:	5f46344d 	svcpl	0x0046344d
     860:	334d5453 	movtcc	r5, #54355	; 0xd453
     864:	2f344632 	svccs	0x00344632
     868:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     86c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     870:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     874:	2f534953 	svccs	0x00534953
     878:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     87c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     880:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     884:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     888:	2f787834 	svccs	0x00787834
     88c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     890:	00656475 	rsbeq	r6, r5, r5, ror r4
     894:	2f636e69 	svccs	0x00636e69
     898:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     89c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 790 <_Min_Stack_Size+0x390>
     8a0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     8a4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     8a8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 798 <_Min_Stack_Size+0x398>
     8ac:	61726269 	cmnvs	r2, r9, ror #4
     8b0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     8b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     8b8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     8bc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     8c0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     8c4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     8c8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     8cc:	2f726576 	svccs	0x00726576
     8d0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     8d4:	2f636e69 	svccs	0x00636e69
     8d8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     8dc:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 7d0 <_Min_Stack_Size+0x3d0>
     8e0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     8e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     8e8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 7d8 <_Min_Stack_Size+0x3d8>
     8ec:	61726269 	cmnvs	r2, r9, ror #4
     8f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     8f4:	534d432f 	movtpl	r4, #54063	; 0xd32f
     8f8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     8fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     900:	00006564 	andeq	r6, r0, r4, ror #10
     904:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     908:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     90c:	70675f78 	rsbvc	r5, r7, r8, ror pc
     910:	632e6f69 	teqvs	lr, #420	; 0x1a4
     914:	00000100 	andeq	r0, r0, r0, lsl #2
     918:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     91c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     920:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     924:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     928:	00000200 	andeq	r0, r0, r0, lsl #4
     92c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     930:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     934:	00000300 	andeq	r0, r0, r0, lsl #6
     938:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     93c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     940:	00682e78 	rsbeq	r2, r8, r8, ror lr
     944:	73000004 	movwvc	r0, #4
     948:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     94c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     950:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     954:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     958:	63000005 	movwvs	r0, #5
     95c:	5f65726f 	svcpl	0x0065726f
     960:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     964:	00060068 	andeq	r0, r6, r8, rrx
     968:	05000000 	streq	r0, [r0, #-0]
     96c:	00160802 	andseq	r0, r6, r2, lsl #16
     970:	00ff0308 	rscseq	r0, pc, r8, lsl #6
     974:	4b4c4e01 	blmi	1314180 <_Min_Stack_Size+0x1313d80>
     978:	5a4b4c5a 	bpl	12d3ae8 <_Min_Stack_Size+0x12d36e8>
     97c:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
     980:	4b4c5a4b 	blmi	13172b4 <_Min_Stack_Size+0x1316eb4>
     984:	5a4b4c5a 	bpl	12d3af4 <_Min_Stack_Size+0x12d36f4>
     988:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
     98c:	594c5b4b 	stmdbpl	ip, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
     990:	6a594c68 	bvs	1653b38 <_Min_Stack_Size+0x1653738>
     994:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
     998:	0101001a 	tsteq	r1, sl, lsl r0
     99c:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
     9a0:	03080017 	movweq	r0, #32791	; 0x8017
     9a4:	590101ca 	stmdbpl	r1, {r1, r3, r6, r7, r8}
     9a8:	3e660a03 	vmulcc.f32	s1, s12, s6
     9ac:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
     9b0:	040200bc 	streq	r0, [r2], #-188	; 0xbc
     9b4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     9b8:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
     9bc:	6203bbcc 	andvs	fp, r3, #204, 22	; 0x33000
     9c0:	040200ba 	streq	r0, [r2], #-186	; 0xba
     9c4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     9c8:	023c2103 	eorseq	r2, ip, #-1073741824	; 0xc0000000
     9cc:	01010005 	tsteq	r1, r5
     9d0:	88020500 	stmdahi	r2, {r8, sl}
     9d4:	03080018 	movweq	r0, #32792	; 0x8018
     9d8:	4c0101fe 	stfmis	f0, [r1], {254}	; 0xfe
     9dc:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     9e0:	0005023d 	andeq	r0, r5, sp, lsr r2
     9e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9e8:	0018bc02 	andseq	fp, r8, r2, lsl #24
     9ec:	02950308 	addseq	r0, r5, #8, 6	; 0x20000000
     9f0:	4c426701 	mcrrmi	7, 0, r6, r2, cr1
     9f4:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
     9f8:	0005023d 	andeq	r0, r5, sp, lsr r2
     9fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a00:	00190002 	andseq	r0, r9, r2
     a04:	02c30308 	sbceq	r0, r3, #8, 6	; 0x20000000
     a08:	68346701 	ldmdavs	r4!, {r0, r8, r9, sl, sp, lr}
     a0c:	02213040 	eoreq	r3, r1, #64	; 0x40
     a10:	01010006 	tsteq	r1, r6
     a14:	34020500 	strcc	r0, [r2], #-1280	; 0x500
     a18:	03080019 	movweq	r0, #32793	; 0x8019
     a1c:	4e0102dd 	mcrmi	2, 0, r0, cr1, cr13, {6}
     a20:	0006023d 	andeq	r0, r6, sp, lsr r2
     a24:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a28:	00195002 	andseq	r5, r9, r2
     a2c:	02ee0308 	rsceq	r0, lr, #8, 6	; 0x20000000
     a30:	68346701 	ldmdavs	r4!, {r0, r8, r9, sl, sp, lr}
     a34:	02213040 	eoreq	r3, r1, #64	; 0x40
     a38:	01010006 	tsteq	r1, r6
     a3c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
     a40:	03080019 	movweq	r0, #32793	; 0x8019
     a44:	4e010388 	cdpmi	3, 0, cr0, cr1, cr8, {4}
     a48:	0006023d 	andeq	r0, r6, sp, lsr r2
     a4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a50:	0019a002 	andseq	sl, r9, r2
     a54:	039c0308 	orrseq	r0, ip, #8, 6	; 0x20000000
     a58:	023d6b01 	eorseq	r6, sp, #1024	; 0x400
     a5c:	01010005 	tsteq	r1, r5
     a60:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     a64:	03080019 	movweq	r0, #32793	; 0x8019
     a68:	6b0103b1 	blvs	41934 <_Min_Stack_Size+0x41534>
     a6c:	0005023d 	andeq	r0, r5, sp, lsr r2
     a70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a74:	0019d802 	andseq	sp, r9, r2, lsl #16
     a78:	03c70308 	biceq	r0, r7, #8, 6	; 0x20000000
     a7c:	4e3e8801 	cdpmi	8, 3, cr8, cr14, cr1, {0}
     a80:	0005023e 	andeq	r0, r5, lr, lsr r2
     a84:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a88:	001a0802 	andseq	r0, sl, r2, lsl #16
     a8c:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
     a90:	023d6a01 	eorseq	r6, sp, #4096	; 0x1000
     a94:	01010005 	tsteq	r1, r5
     a98:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     a9c:	0308001a 	movweq	r0, #32794	; 0x801a
     aa0:	6a0103f0 	bvs	41a68 <_Min_Stack_Size+0x41668>
     aa4:	00050267 	andeq	r0, r5, r7, ror #4
     aa8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     aac:	001a4802 	andseq	r4, sl, r2, lsl #16
     ab0:	04c30308 	strbeq	r0, [r3], #776	; 0x308
     ab4:	352f8301 	strcc	r8, [pc, #-769]!	; 7bb <_Min_Stack_Size+0x3bb>
     ab8:	ad830883 	stcge	8, cr0, [r3, #524]	; 0x20c
     abc:	00050291 	muleq	r5, r1, r2
     ac0:	05f40101 	ldrbeq	r0, [r4, #257]!	; 0x101
     ac4:	00020000 	andeq	r0, r2, r0
     ac8:	00000198 	muleq	r0, r8, r1
     acc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ad0:	0101000d 	tsteq	r1, sp
     ad4:	00000101 	andeq	r0, r0, r1, lsl #2
     ad8:	00000100 	andeq	r0, r0, r0, lsl #2
     adc:	636e6901 	cmnvs	lr, #16384	; 0x4000
     ae0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     ae4:	5f584554 	svcpl	0x00584554
     ae8:	5f46344d 	svcpl	0x0046344d
     aec:	334d5453 	movtcc	r5, #54355	; 0xd453
     af0:	2f344632 	svccs	0x00344632
     af4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     af8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     afc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     b00:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b04:	5f787834 	svcpl	0x00787834
     b08:	50647453 	rsbpl	r7, r4, r3, asr r4
     b0c:	70697265 	rsbvc	r7, r9, r5, ror #4
     b10:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     b14:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     b18:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     b1c:	73752f00 	cmnvc	r5, #0, 30
     b20:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     b24:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     b28:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     b2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     b30:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     b34:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     b38:	73752f00 	cmnvc	r5, #0, 30
     b3c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     b40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     b44:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     b48:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     b4c:	636e6900 	cmnvs	lr, #0, 18
     b50:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     b54:	5f584554 	svcpl	0x00584554
     b58:	5f46344d 	svcpl	0x0046344d
     b5c:	334d5453 	movtcc	r5, #54355	; 0xd453
     b60:	2f344632 	svccs	0x00344632
     b64:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     b68:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     b6c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     b70:	2f534953 	svccs	0x00534953
     b74:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     b78:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     b7c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     b80:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b84:	2f787834 	svccs	0x00787834
     b88:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     b8c:	00656475 	rsbeq	r6, r5, r5, ror r4
     b90:	2f636e69 	svccs	0x00636e69
     b94:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     b98:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; a8c <_Min_Stack_Size+0x68c>
     b9c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     ba0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ba4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; a94 <_Min_Stack_Size+0x694>
     ba8:	61726269 	cmnvs	r2, r9, ror #4
     bac:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     bb0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     bb4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     bb8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     bbc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     bc0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bc4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     bc8:	2f726576 	svccs	0x00726576
     bcc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     bd0:	2f636e69 	svccs	0x00636e69
     bd4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     bd8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; acc <_Min_Stack_Size+0x6cc>
     bdc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     be0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     be4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; ad4 <_Min_Stack_Size+0x6d4>
     be8:	61726269 	cmnvs	r2, r9, ror #4
     bec:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     bf0:	534d432f 	movtpl	r4, #54063	; 0xd32f
     bf4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     bf8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     bfc:	00006564 	andeq	r6, r0, r4, ror #10
     c00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c04:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c08:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     c0c:	00632e63 	rsbeq	r2, r3, r3, ror #28
     c10:	5f000001 	svcpl	0x00000001
     c14:	61666564 	cmnvs	r6, r4, ror #10
     c18:	5f746c75 	svcpl	0x00746c75
     c1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     c20:	00682e73 	rsbeq	r2, r8, r3, ror lr
     c24:	73000002 	movwvc	r0, #2
     c28:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     c2c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     c30:	73000003 	movwvc	r0, #3
     c34:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c38:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c3c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     c40:	74730000 	ldrbtvc	r0, [r3], #-0
     c44:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c48:	5f787834 	svcpl	0x00787834
     c4c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     c50:	00050068 	andeq	r0, r5, r8, rrx
     c54:	726f6300 	rsbvc	r6, pc, #0, 6
     c58:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     c5c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     c60:	00000006 	andeq	r0, r0, r6
     c64:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     c68:	0308001a 	movweq	r0, #32794	; 0x801a
     c6c:	300101d5 	ldrdcc	r0, [r1], -r5
     c70:	3f853f69 	svccc	0x00853f69
     c74:	3f694d4d 	svccc	0x00694d4d
     c78:	000d024c 	andeq	r0, sp, ip, asr #4
     c7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c80:	001b4402 	andseq	r4, fp, r2, lsl #8
     c84:	02880308 	addeq	r0, r8, #8, 6	; 0x20000000
     c88:	3d3f5d01 	ldccc	13, cr5, [pc, #-4]!	; c8c <_Min_Stack_Size+0x88c>
     c8c:	01000702 	tsteq	r0, r2, lsl #14
     c90:	02050001 	andeq	r0, r5, #1
     c94:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
     c98:	0102a003 	tsteq	r2, r3
     c9c:	002f2f3d 	eoreq	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
     ca0:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
     ca4:	01040200 	mrseq	r0, R12_usr
     ca8:	04020059 	streq	r0, [r2], #-89	; 0x59
     cac:	68763d01 	ldmdavs	r6!, {r0, r8, sl, fp, ip, sp}^
     cb0:	02213040 	eoreq	r3, r1, #64	; 0x40
     cb4:	01010004 	tsteq	r1, r4
     cb8:	b8020500 	stmdalt	r2, {r8, sl}
     cbc:	0308001b 	movweq	r0, #32795	; 0x801b
     cc0:	590102bf 	stmdbpl	r1, {r0, r1, r2, r3, r4, r5, r7, r9}
     cc4:	5b4d3f32 	blpl	1350994 <_Min_Stack_Size+0x1350594>
     cc8:	0008023d 	andeq	r0, r8, sp, lsr r2
     ccc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cd0:	001bf402 	andseq	pc, fp, r2, lsl #8
     cd4:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     cd8:	023d5c01 	eorseq	r5, sp, #256	; 0x100
     cdc:	01010008 	tsteq	r1, r8
     ce0:	14020500 	strne	r0, [r2], #-1280	; 0x500
     ce4:	0308001c 	movweq	r0, #32796	; 0x801c
     ce8:	5e0102fc 	mcrpl	2, 0, r0, cr1, cr12, {7}
     cec:	0b033f3f 	bleq	d09f0 <_Min_Stack_Size+0xd05f0>
     cf0:	20790358 	rsbscs	r0, r9, r8, asr r3
     cf4:	243d233d 	ldrtcs	r2, [sp], #-829	; 0x33d
     cf8:	01000702 	tsteq	r0, r2, lsl #14
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
     d04:	0103a403 	tsteq	r3, r3, lsl #8
     d08:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
     d0c:	00010100 	andeq	r0, r1, r0, lsl #2
     d10:	1c740205 	lfmne	f0, 2, [r4], #-20	; 0xffffffec
     d14:	cf030800 	svcgt	0x00030800
     d18:	bb7c0103 	bllt	1f0112c <_Min_Stack_Size+0x1f00d2c>
     d1c:	0702302d 	streq	r3, [r2, -sp, lsr #32]
     d20:	00010100 	andeq	r0, r1, r0, lsl #2
     d24:	1cb00205 	lfmne	f0, 4, [r0], #20
     d28:	e6030800 	str	r0, [r3], -r0, lsl #16
     d2c:	3d5b0103 	ldfcce	f0, [fp, #-12]
     d30:	01000802 	tsteq	r0, r2, lsl #16
     d34:	02050001 	andeq	r0, r5, #1
     d38:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
     d3c:	0104a803 	tsteq	r4, r3, lsl #16
     d40:	0702ad6c 	streq	sl, [r2, -ip, ror #26]
     d44:	00010100 	andeq	r0, r1, r0, lsl #2
     d48:	1d000205 	sfmne	f0, 4, [r0, #-20]	; 0xffffffec
     d4c:	b9030800 	stmdblt	r3, {fp}
     d50:	3d5b0104 	ldfcce	f0, [fp, #-16]
     d54:	01000802 	tsteq	r0, r2, lsl #16
     d58:	02050001 	andeq	r0, r5, #1
     d5c:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     d60:	0104d603 	tsteq	r4, r3, lsl #12
     d64:	0702ad6b 	streq	sl, [r2, -fp, ror #26]
     d68:	00010100 	andeq	r0, r1, r0, lsl #2
     d6c:	1d500205 	lfmne	f0, 2, [r0, #-20]	; 0xffffffec
     d70:	e8030800 	stmda	r3, {fp}
     d74:	3d5b0104 	ldfcce	f0, [fp, #-16]
     d78:	01000802 	tsteq	r0, r2, lsl #16
     d7c:	02050001 	andeq	r0, r5, #1
     d80:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
     d84:	0104fa03 	tsteq	r4, r3, lsl #20
     d88:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
     d8c:	00010100 	andeq	r0, r1, r0, lsl #2
     d90:	1d900205 	lfmne	f0, 4, [r0, #20]
     d94:	93030800 	movwls	r0, #14336	; 0x3800
     d98:	34590105 	ldrbcc	r0, [r9], #-261	; 0x105
     d9c:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
     da0:	01000702 	tsteq	r0, r2, lsl #14
     da4:	02050001 	andeq	r0, r5, #1
     da8:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
     dac:	0105b903 	tsteq	r5, r3, lsl #18
     db0:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; c54 <_Min_Stack_Size+0x854>
     db4:	07023d69 	streq	r3, [r2, -r9, ror #26]
     db8:	00010100 	andeq	r0, r1, r0, lsl #2
     dbc:	1e080205 	cdpne	2, 0, cr0, cr8, cr5, {0}
     dc0:	df030800 	svcle	0x00030800
     dc4:	334b0106 	movtcc	r0, #45318	; 0xb106
     dc8:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     dcc:	01000802 	tsteq	r0, r2, lsl #16
     dd0:	02050001 	andeq	r0, r5, #1
     dd4:	08001e40 	stmdaeq	r0, {r6, r9, sl, fp, ip}
     dd8:	0106fb03 	tsteq	r6, r3, lsl #22
     ddc:	0802672f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
     de0:	00010100 	andeq	r0, r1, r0, lsl #2
     de4:	1e600205 	cdpne	2, 6, cr0, cr0, cr5, {0}
     de8:	94030800 	strls	r0, [r3], #-2048	; 0x800
     dec:	334b0107 	movtcc	r0, #45319	; 0xb107
     df0:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     df4:	01000802 	tsteq	r0, r2, lsl #16
     df8:	02050001 	andeq	r0, r5, #1
     dfc:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
     e00:	0107b403 	tsteq	r7, r3, lsl #8
     e04:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; ce0 <_Min_Stack_Size+0x8e0>
     e08:	08023d4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     e0c:	00010100 	andeq	r0, r1, r0, lsl #2
     e10:	1ed00205 	cdpne	2, 13, cr0, cr0, cr5, {0}
     e14:	d3030800 	movwle	r0, #14336	; 0x3800
     e18:	334b0107 	movtcc	r0, #45319	; 0xb107
     e1c:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
     e20:	01000702 	tsteq	r0, r2, lsl #14
     e24:	02050001 	andeq	r0, r5, #1
     e28:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
     e2c:	01088703 	tsteq	r8, r3, lsl #14
     e30:	775abd4b 	ldrbvc	fp, [sl, -fp, asr #26]
     e34:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
     e38:	db3f5a67 	blle	fd77dc <_Min_Stack_Size+0xfd73dc>
     e3c:	226783cb 	rsbcs	r8, r7, #738197507	; 0x2c000003
     e40:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
     e44:	3d596968 	ldclcc	9, cr6, [r9, #-416]	; 0xfffffe60
     e48:	3d596968 	ldclcc	9, cr6, [r9, #-416]	; 0xfffffe60
     e4c:	0e026768 	cdpeq	7, 0, cr6, cr2, cr8, {3}
     e50:	00010100 	andeq	r0, r1, r0, lsl #2
     e54:	205c0205 	subscs	r0, ip, r5, lsl #4
     e58:	84030800 	strhi	r0, [r3], #-2048	; 0x800
     e5c:	334b0109 	movtcc	r0, #45321	; 0xb109
     e60:	854d3f68 	strbhi	r3, [sp, #-3944]	; 0xf68
     e64:	08028340 	stmdaeq	r2, {r6, r8, r9, pc}
     e68:	00010100 	andeq	r0, r1, r0, lsl #2
     e6c:	20b80205 	adcscs	r0, r8, r5, lsl #4
     e70:	a4030800 	strge	r0, [r3], #-2048	; 0x800
     e74:	3d5c0109 	ldfcce	f0, [ip, #-36]	; 0xffffffdc
     e78:	01000802 	tsteq	r0, r2, lsl #16
     e7c:	02050001 	andeq	r0, r5, #1
     e80:	080020d8 	stmdaeq	r0, {r3, r4, r6, r7, sp}
     e84:	0109b503 	tsteq	r9, r3, lsl #10
     e88:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
     e8c:	00010100 	andeq	r0, r1, r0, lsl #2
     e90:	20f80205 	rscscs	r0, r8, r5, lsl #4
     e94:	c6030800 	strgt	r0, [r3], -r0, lsl #16
     e98:	3d4e0109 	stfcce	f0, [lr, #-36]	; 0xffffffdc
     e9c:	01000702 	tsteq	r0, r2, lsl #14
     ea0:	02050001 	andeq	r0, r5, #1
     ea4:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
     ea8:	0109db03 	tsteq	r9, r3, lsl #22
     eac:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     eb0:	07024b5b 	smlsdeq	r2, fp, fp, r4
     eb4:	00010100 	andeq	r0, r1, r0, lsl #2
     eb8:	21500205 	cmpcs	r0, r5, lsl #4
     ebc:	fb030800 	blx	c2ec6 <_Min_Stack_Size+0xc2ac6>
     ec0:	334b0109 	movtcc	r0, #45321	; 0xb109
     ec4:	4b694d4d 	blmi	1a54400 <_Min_Stack_Size+0x1a54000>
     ec8:	01000802 	tsteq	r0, r2, lsl #16
     ecc:	02050001 	andeq	r0, r5, #1
     ed0:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     ed4:	010a9f03 	tsteq	sl, r3, lsl #30
     ed8:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     edc:	08024b4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, r9, fp, lr}
     ee0:	00010100 	andeq	r0, r1, r0, lsl #2
     ee4:	21cc0205 	biccs	r0, ip, r5, lsl #4
     ee8:	c3030800 	movwgt	r0, #14336	; 0x3800
     eec:	334b010a 	movtcc	r0, #45322	; 0xb10a
     ef0:	4b4d4d4d 	blmi	135442c <_Min_Stack_Size+0x135402c>
     ef4:	01000802 	tsteq	r0, r2, lsl #16
     ef8:	02050001 	andeq	r0, r5, #1
     efc:	08002208 	stmdaeq	r0, {r3, r9, sp}
     f00:	010ae403 	tsteq	sl, r3, lsl #8
     f04:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     f08:	08024b4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, r9, fp, lr}
     f0c:	00010100 	andeq	r0, r1, r0, lsl #2
     f10:	22440205 	subcs	r0, r4, #1342177280	; 0x50000000
     f14:	89030800 	stmdbhi	r3, {fp}
     f18:	3e4e010b 	dvfcce	f0, f6, #3.0
     f1c:	01000702 	tsteq	r0, r2, lsl #14
     f20:	02050001 	andeq	r0, r5, #1
     f24:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
     f28:	010bb403 	tsteq	fp, r3, lsl #8
     f2c:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f30:	01000702 	tsteq	r0, r2, lsl #14
     f34:	02050001 	andeq	r0, r5, #1
     f38:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
     f3c:	010bd403 	tsteq	fp, r3, lsl #8
     f40:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f44:	01000702 	tsteq	r0, r2, lsl #14
     f48:	02050001 	andeq	r0, r5, #1
     f4c:	080022d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp}
     f50:	010bf003 	tsteq	fp, r3
     f54:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f58:	01000702 	tsteq	r0, r2, lsl #14
     f5c:	02050001 	andeq	r0, r5, #1
     f60:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
     f64:	010ca403 	tsteq	ip, r3, lsl #8
     f68:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f6c:	01000702 	tsteq	r0, r2, lsl #14
     f70:	02050001 	andeq	r0, r5, #1
     f74:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
     f78:	010cd103 	tsteq	ip, r3, lsl #2
     f7c:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f80:	01000702 	tsteq	r0, r2, lsl #14
     f84:	02050001 	andeq	r0, r5, #1
     f88:	0800238c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp}
     f8c:	010cfb03 	tsteq	ip, r3, lsl #22
     f90:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     f94:	01000702 	tsteq	r0, r2, lsl #14
     f98:	02050001 	andeq	r0, r5, #1
     f9c:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     fa0:	010d9803 	tsteq	sp, r3, lsl #16
     fa4:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     fa8:	01000702 	tsteq	r0, r2, lsl #14
     fac:	02050001 	andeq	r0, r5, #1
     fb0:	08002404 	stmdaeq	r0, {r2, sl, sp}
     fb4:	010db103 	tsteq	sp, r3, lsl #2
     fb8:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     fbc:	01000702 	tsteq	r0, r2, lsl #14
     fc0:	02050001 	andeq	r0, r5, #1
     fc4:	08002440 	stmdaeq	r0, {r6, sl, sp}
     fc8:	010de203 	tsteq	sp, r3, lsl #4
     fcc:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     fd0:	01000702 	tsteq	r0, r2, lsl #14
     fd4:	02050001 	andeq	r0, r5, #1
     fd8:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     fdc:	010e8b03 	tsteq	lr, r3, lsl #22
     fe0:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     fe4:	01000702 	tsteq	r0, r2, lsl #14
     fe8:	02050001 	andeq	r0, r5, #1
     fec:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
     ff0:	010ebc03 	tsteq	lr, r3, lsl #24
     ff4:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     ff8:	01000702 	tsteq	r0, r2, lsl #14
     ffc:	02050001 	andeq	r0, r5, #1
    1000:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
    1004:	010edc03 	tsteq	lr, r3, lsl #24
    1008:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
    100c:	01000702 	tsteq	r0, r2, lsl #14
    1010:	02050001 	andeq	r0, r5, #1
    1014:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    1018:	010ef803 	tsteq	lr, r3, lsl #16
    101c:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
    1020:	01000702 	tsteq	r0, r2, lsl #14
    1024:	02050001 	andeq	r0, r5, #1
    1028:	0800256c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp}
    102c:	010fac03 	tsteq	pc, r3, lsl #24
    1030:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
    1034:	01000702 	tsteq	r0, r2, lsl #14
    1038:	02050001 	andeq	r0, r5, #1
    103c:	080025a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, sp}
    1040:	010fd903 	tsteq	pc, r3, lsl #18
    1044:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
    1048:	01000702 	tsteq	r0, r2, lsl #14
    104c:	02050001 	andeq	r0, r5, #1
    1050:	080025e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp}
    1054:	01108703 	tsteq	r0, r3, lsl #14
    1058:	a0953f78 	addsge	r3, r5, r8, ror pc
    105c:	01000702 	tsteq	r0, r2, lsl #14
    1060:	02050001 	andeq	r0, r5, #1
    1064:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
    1068:	0110ac03 	tsteq	r0, r3, lsl #24
    106c:	342f2f59 	strtcc	r2, [pc], #-3929	; 1074 <_Min_Stack_Size+0xc74>
    1070:	3e4c3e4b 	cdpcc	14, 4, cr3, cr12, cr11, {2}
    1074:	844b404e 	strbhi	r4, [fp], #-78	; 0x4e
    1078:	02213140 	eoreq	r3, r1, #64, 2
    107c:	01010008 	tsteq	r1, r8
    1080:	a0020500 	andge	r0, r2, r0, lsl #10
    1084:	03080026 	movweq	r0, #32806	; 0x8026
    1088:	300110d9 	ldrdcc	r1, [r1], -r9
    108c:	00060267 	andeq	r0, r6, r7, ror #4
    1090:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1094:	0026bc02 	eoreq	fp, r6, r2, lsl #24
    1098:	10ed0308 	rscne	r0, sp, r8, lsl #6
    109c:	68345901 	ldmdavs	r4!, {r0, r8, fp, ip, lr}
    10a0:	02213140 	eoreq	r3, r1, #64, 2
    10a4:	01010009 	tsteq	r1, r9
    10a8:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    10ac:	03080026 	movweq	r0, #32806	; 0x8026
    10b0:	5e01118f 	adfpld	f1, f1, #10.0
    10b4:	0008023d 	andeq	r0, r8, sp, lsr r2
    10b8:	045b0101 	ldrbeq	r0, [fp], #-257	; 0x101
    10bc:	00020000 	andeq	r0, r2, r0
    10c0:	000001af 	andeq	r0, r0, pc, lsr #3
    10c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    10c8:	0101000d 	tsteq	r1, sp
    10cc:	00000101 	andeq	r0, r0, r1, lsl #2
    10d0:	00000100 	andeq	r0, r0, r0, lsl #2
    10d4:	636e6901 	cmnvs	lr, #16384	; 0x4000
    10d8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    10dc:	5f584554 	svcpl	0x00584554
    10e0:	5f46344d 	svcpl	0x0046344d
    10e4:	334d5453 	movtcc	r5, #54355	; 0xd453
    10e8:	2f344632 	svccs	0x00344632
    10ec:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    10f0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    10f4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    10f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10fc:	5f787834 	svcpl	0x00787834
    1100:	50647453 	rsbpl	r7, r4, r3, asr r4
    1104:	70697265 	rsbvc	r7, r9, r5, ror #4
    1108:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    110c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1110:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1114:	73752f00 	cmnvc	r5, #0, 30
    1118:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    111c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1120:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1124:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1128:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    112c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1130:	73752f00 	cmnvc	r5, #0, 30
    1134:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1138:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    113c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1140:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1144:	636e6900 	cmnvs	lr, #0, 18
    1148:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    114c:	5f584554 	svcpl	0x00584554
    1150:	5f46344d 	svcpl	0x0046344d
    1154:	334d5453 	movtcc	r5, #54355	; 0xd453
    1158:	2f344632 	svccs	0x00344632
    115c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1160:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1164:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1168:	2f534953 	svccs	0x00534953
    116c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1170:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1174:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1178:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    117c:	2f787834 	svccs	0x00787834
    1180:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1184:	00656475 	rsbeq	r6, r5, r5, ror r4
    1188:	2f636e69 	svccs	0x00636e69
    118c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1190:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1084 <_Min_Stack_Size+0xc84>
    1194:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1198:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    119c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 108c <_Min_Stack_Size+0xc8c>
    11a0:	61726269 	cmnvs	r2, r9, ror #4
    11a4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    11a8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    11ac:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    11b0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    11b4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    11b8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    11bc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    11c0:	2f726576 	svccs	0x00726576
    11c4:	00636e69 	rsbeq	r6, r3, r9, ror #28
    11c8:	2f636e69 	svccs	0x00636e69
    11cc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    11d0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 10c4 <_Min_Stack_Size+0xcc4>
    11d4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    11d8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    11dc:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 10cc <_Min_Stack_Size+0xccc>
    11e0:	61726269 	cmnvs	r2, r9, ror #4
    11e4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    11e8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    11ec:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    11f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    11f4:	00006564 	andeq	r6, r0, r4, ror #10
    11f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    11fc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1200:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1204:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1208:	00010063 	andeq	r0, r1, r3, rrx
    120c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1210:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1214:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1218:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    121c:	00020068 	andeq	r0, r2, r8, rrx
    1220:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1224:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1228:	00030068 	andeq	r0, r3, r8, rrx
    122c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1230:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1234:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1238:	00000400 	andeq	r0, r0, r0, lsl #8
    123c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1240:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1244:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1248:	00682e63 	rsbeq	r2, r8, r3, ror #28
    124c:	73000005 	movwvc	r0, #5
    1250:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1254:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1258:	6173755f 	cmnvs	r3, pc, asr r5
    125c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1260:	00000500 	andeq	r0, r0, r0, lsl #10
    1264:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1268:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    126c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1270:	00000000 	andeq	r0, r0, r0
    1274:	27140205 	ldrcs	r0, [r4, -r5, lsl #4]
    1278:	bb030800 	bllt	c3280 <_Min_Stack_Size+0xc2e80>
    127c:	4c4e0101 	stfmie	f0, [lr], {1}
    1280:	594c5a4b 	stmdbpl	ip, {r0, r1, r3, r6, r9, fp, ip, lr}^
    1284:	68594c68 	ldmdavs	r9, {r3, r5, r6, sl, fp, lr}^
    1288:	4c68594c 	stclmi	9, cr5, [r8], #-304	; 0xfffffed0
    128c:	4b4c6859 	blmi	131b3f8 <_Min_Stack_Size+0x131aff8>
    1290:	6a594c5a 	bvs	1654400 <_Min_Stack_Size+0x1654000>
    1294:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    1298:	01010013 	tsteq	r1, r3, lsl r0
    129c:	28020500 	stmdacs	r2, {r8, sl}
    12a0:	03080028 	movweq	r0, #32808	; 0x8028
    12a4:	590101f6 	stmdbpl	r1, {r1, r2, r4, r5, r6, r7, r8}
    12a8:	13032f4b 	movwne	r2, #16203	; 0x3f4b
    12ac:	5b4e4d2e 	blpl	139476c <_Min_Stack_Size+0x139436c>
    12b0:	676c4d4d 	strbvs	r4, [ip, -sp, asr #26]!
    12b4:	4d4d5c2d 	stclmi	12, cr5, [sp, #-180]	; 0xffffff4c
    12b8:	5a4e5b4e 	bpl	1397ff8 <_Min_Stack_Size+0x1397bf8>
    12bc:	01040200 	mrseq	r0, R12_usr
    12c0:	4c064a06 	stcmi	10, cr4, [r6], {6}
    12c4:	cd773240 	lfmgt	f3, 2, [r7, #-256]!	; 0xffffff00
    12c8:	768577bc 			; <UNDEFINED> instruction: 0x768577bc
    12cc:	024bccda 	subeq	ip, fp, #55808	; 0xda00
    12d0:	01010009 	tsteq	r1, r9
    12d4:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    12d8:	03080029 	movweq	r0, #32809	; 0x8029
    12dc:	4c0102e7 	sfmmi	f0, 4, [r1], {231}	; 0xe7
    12e0:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    12e4:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    12e8:	00010100 	andeq	r0, r1, r0, lsl #2
    12ec:	29d40205 	ldmibcs	r4, {r0, r2, r9}^
    12f0:	fb030800 	blx	c32fa <_Min_Stack_Size+0xc2efa>
    12f4:	03590102 	cmpeq	r9, #-2147483648	; 0x80000000
    12f8:	504c2e09 	subpl	r2, ip, r9, lsl #28
    12fc:	4b3f9d4b 	blmi	fe8830 <_Min_Stack_Size+0xfe8430>
    1300:	01000502 	tsteq	r0, r2, lsl #10
    1304:	02050001 	andeq	r0, r5, #1
    1308:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
    130c:	01039a03 	tsteq	r3, r3, lsl #20
    1310:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    1314:	0005023d 	andeq	r0, r5, sp, lsr r2
    1318:	05000101 	streq	r0, [r0, #-257]	; 0x101
    131c:	002a5402 	eoreq	r5, sl, r2, lsl #8
    1320:	03ab0308 			; <UNDEFINED> instruction: 0x03ab0308
    1324:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 82b <_Min_Stack_Size+0x42b>
    1328:	00050284 	andeq	r0, r5, r4, lsl #5
    132c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1330:	002a9402 	eoreq	r9, sl, r2, lsl #8
    1334:	03c50308 	biceq	r0, r5, #8, 6	; 0x20000000
    1338:	91846b01 	orrls	r6, r4, r1, lsl #22
    133c:	01000502 	tsteq	r0, r2, lsl #10
    1340:	02050001 	andeq	r0, r5, #1
    1344:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
    1348:	0103da03 	tsteq	r3, r3, lsl #20
    134c:	84b13f6b 	ldrthi	r3, [r1], #3947	; 0xf6b
    1350:	01000502 	tsteq	r0, r2, lsl #10
    1354:	02050001 	andeq	r0, r5, #1
    1358:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
    135c:	0103f403 	tsteq	r3, r3, lsl #8
    1360:	84953f6b 	ldrhi	r3, [r5], #3947	; 0xf6b
    1364:	01000502 	tsteq	r0, r2, lsl #10
    1368:	02050001 	andeq	r0, r5, #1
    136c:	08002b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp}
    1370:	0104ad03 	tsteq	r4, r3, lsl #26
    1374:	0502676c 	streq	r6, [r2, #-1900]	; 0x76c
    1378:	00010100 	andeq	r0, r1, r0, lsl #2
    137c:	2b740205 	blcs	1d01b98 <_Min_Stack_Size+0x1d01798>
    1380:	bd030800 	stclt	8, cr0, [r3, #-0]
    1384:	674f0104 	strbvs	r0, [pc, -r4, lsl #2]
    1388:	01000602 	tsteq	r0, r2, lsl #12
    138c:	02050001 	andeq	r0, r5, #1
    1390:	08002b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp}
    1394:	0104f103 	tsteq	r4, r3, lsl #2
    1398:	0291846c 	addseq	r8, r1, #108, 8	; 0x6c000000
    139c:	01010005 	tsteq	r1, r5
    13a0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    13a4:	0308002b 	movweq	r0, #32811	; 0x802b
    13a8:	6b010585 	blvs	429c4 <_Min_Stack_Size+0x425c4>
    13ac:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    13b0:	01010005 	tsteq	r1, r5
    13b4:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    13b8:	0308002c 	movweq	r0, #32812	; 0x802c
    13bc:	6b0105a0 	blvs	42a44 <_Min_Stack_Size+0x42644>
    13c0:	05028383 	streq	r8, [r2, #-899]	; 0x383
    13c4:	00010100 	andeq	r0, r1, r0, lsl #2
    13c8:	2c440205 	sfmcs	f0, 2, [r4], {5}
    13cc:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    13d0:	836b0105 	cmnhi	fp, #1073741825	; 0x40000001
    13d4:	00050283 	andeq	r0, r5, r3, lsl #5
    13d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13dc:	002c7c02 	eoreq	r7, ip, r2, lsl #24
    13e0:	05f70308 	ldrbeq	r0, [r7, #776]!	; 0x308
    13e4:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 8eb <_Min_Stack_Size+0x4eb>
    13e8:	00050284 	andeq	r0, r5, r4, lsl #5
    13ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13f0:	002cbc02 	eoreq	fp, ip, r2, lsl #24
    13f4:	068f0308 	streq	r0, [pc], r8, lsl #6
    13f8:	02834f01 	addeq	r4, r3, #1, 30
    13fc:	01010005 	tsteq	r1, r5
    1400:	e0020500 	and	r0, r2, r0, lsl #10
    1404:	0308002c 	movweq	r0, #32812	; 0x802c
    1408:	6b0106c4 	blvs	42f20 <_Min_Stack_Size+0x42b20>
    140c:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1410:	01010005 	tsteq	r1, r5
    1414:	20020500 	andcs	r0, r2, r0, lsl #10
    1418:	0308002d 	movweq	r0, #32813	; 0x802d
    141c:	6b010798 	blvs	43284 <_Min_Stack_Size+0x42e84>
    1420:	0502ad76 	streq	sl, [r2, #-3446]	; 0xd76
    1424:	00010100 	andeq	r0, r1, r0, lsl #2
    1428:	2d5c0205 	lfmcs	f0, 2, [ip, #-20]	; 0xffffffec
    142c:	ab030800 	blge	c3434 <_Min_Stack_Size+0xc3034>
    1430:	3f6a0107 	svccc	0x006a0107
    1434:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1438:	00010100 	andeq	r0, r1, r0, lsl #2
    143c:	2d9c0205 	lfmcs	f0, 4, [ip, #20]
    1440:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
    1444:	3f6a0107 	svccc	0x006a0107
    1448:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    144c:	00010100 	andeq	r0, r1, r0, lsl #2
    1450:	2ddc0205 	lfmcs	f0, 2, [ip, #20]
    1454:	8b030800 	blhi	c345c <_Min_Stack_Size+0xc305c>
    1458:	836b0108 	cmnhi	fp, #8, 2
    145c:	00050283 	andeq	r0, r5, r3, lsl #5
    1460:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1464:	002e1402 	eoreq	r1, lr, r2, lsl #8
    1468:	089d0308 	ldmeq	sp, {r3, r8, r9}
    146c:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 973 <_Min_Stack_Size+0x573>
    1470:	00050284 	andeq	r0, r5, r4, lsl #5
    1474:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1478:	002e5402 	eoreq	r5, lr, r2, lsl #8
    147c:	08cb0308 	stmiaeq	fp, {r3, r8, r9}^
    1480:	96408801 	strbls	r8, [r0], -r1, lsl #16
    1484:	000502a0 	andeq	r0, r5, r0, lsr #5
    1488:	05000101 	streq	r0, [r0, #-257]	; 0x101
    148c:	002e9c02 	eoreq	r9, lr, r2, lsl #24
    1490:	09cf0308 	stmibeq	pc, {r3, r8, r9}^	; <UNPREDICTABLE>
    1494:	03678301 	cmneq	r7, #67108864	; 0x4000000
    1498:	5b312e0c 	blpl	c4ccd0 <_Min_Stack_Size+0xc4c8d0>
    149c:	4c3e5a4b 	ldcmi	10, cr5, [lr], #-300	; 0xfffffed4
    14a0:	3e3e4e3e 	mrccc	14, 1, r4, cr14, cr14, {1}
    14a4:	05027678 	streq	r7, [r2, #-1656]	; 0x678
    14a8:	00010100 	andeq	r0, r1, r0, lsl #2
    14ac:	2f2c0205 	svccs	0x002c0205
    14b0:	8f030800 	svchi	0x00030800
    14b4:	0367010a 	cmneq	r7, #-2147483646	; 0x80000002
    14b8:	40842e0b 	addmi	r2, r4, fp, lsl #28
    14bc:	06022130 			; <UNDEFINED> instruction: 0x06022130
    14c0:	00010100 	andeq	r0, r1, r0, lsl #2
    14c4:	2f640205 	svccs	0x00640205
    14c8:	c0030800 	andgt	r0, r3, r0, lsl #16
    14cc:	0b03010a 	bleq	c18fc <_Min_Stack_Size+0xc14fc>
    14d0:	05025966 	streq	r5, [r2, #-2406]	; 0x966
    14d4:	00010100 	andeq	r0, r1, r0, lsl #2
    14d8:	2f840205 	svccs	0x00840205
    14dc:	e2030800 	and	r0, r3, #0, 16
    14e0:	6767010a 	strbvs	r0, [r7, -sl, lsl #2]!
    14e4:	5a2e0c03 	bpl	b844f8 <_Min_Stack_Size+0xb840f8>
    14e8:	763e5a4b 	ldrtvc	r5, [lr], -fp, asr #20
    14ec:	4b69783e 	blmi	1a5f5ec <_Min_Stack_Size+0x1a5f1ec>
    14f0:	02006759 	andeq	r6, r0, #23330816	; 0x1640000
    14f4:	3c060104 	stfccs	f0, [r6], {4}
    14f8:	31403e06 	cmpcc	r0, r6, lsl #28
    14fc:	00060221 	andeq	r0, r6, r1, lsr #4
    1500:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1504:	00303402 	eorseq	r3, r0, r2, lsl #8
    1508:	0bac0308 	bleq	feb02130 <_estack+0xdead2130>
    150c:	0b036701 	bleq	db118 <_Min_Stack_Size+0xdad18>
    1510:	59593d4a 	ldmdbpl	r9, {r1, r3, r6, r8, sl, fp, ip, sp}^
    1514:	01000502 	tsteq	r0, r2, lsl #10
    1518:	0001d601 	andeq	sp, r1, r1, lsl #12
    151c:	48000200 	stmdami	r0, {r9}
    1520:	02000001 	andeq	r0, r0, #1
    1524:	0d0efb01 	vstreq	d15, [lr, #-4]
    1528:	01010100 	mrseq	r0, (UNDEF: 17)
    152c:	00000001 	andeq	r0, r0, r1
    1530:	01000001 	tsteq	r0, r1
    1534:	2f636e69 	svccs	0x00636e69
    1538:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    153c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1430 <_Min_Stack_Size+0x1030>
    1540:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1544:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1548:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1438 <_Min_Stack_Size+0x1038>
    154c:	61726269 	cmnvs	r2, r9, ror #4
    1550:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1554:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1558:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    155c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1560:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1564:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1568:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    156c:	2f726576 	svccs	0x00726576
    1570:	00637273 	rsbeq	r7, r3, r3, ror r2
    1574:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1578:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    157c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1580:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1584:	2f62696c 	svccs	0x0062696c
    1588:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    158c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1590:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1594:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    159c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    15a0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    15a4:	2f636e69 	svccs	0x00636e69
    15a8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    15ac:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 14a0 <_Min_Stack_Size+0x10a0>
    15b0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    15b4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    15b8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 14a8 <_Min_Stack_Size+0x10a8>
    15bc:	61726269 	cmnvs	r2, r9, ror #4
    15c0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    15c4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    15c8:	442f5349 	strtmi	r5, [pc], #-841	; 15d0 <_Min_Stack_Size+0x11d0>
    15cc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    15d0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    15d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    15d8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    15dc:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    15e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    15e4:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    15e8:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    15ec:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    15f0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    15f4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    15f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    15fc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1600:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1604:	2f736569 	svccs	0x00736569
    1608:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    160c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    1610:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1614:	73000065 	movwvc	r0, #101	; 0x65
    1618:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    161c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1620:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1624:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    1628:	00010063 	andeq	r0, r1, r3, rrx
    162c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1630:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1634:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1638:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    163c:	00020068 	andeq	r0, r2, r8, rrx
    1640:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1644:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1648:	00030068 	andeq	r0, r3, r8, rrx
    164c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1650:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1654:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1658:	00000400 	andeq	r0, r0, r0, lsl #8
    165c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1660:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    1664:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1668:	00000000 	andeq	r0, r0, r0
    166c:	306c0205 	rsbcc	r0, ip, r5, lsl #4
    1670:	e4030800 	str	r0, [r3], #-2048	; 0x800
    1674:	592f0100 	stmdbpl	pc!, {r8}	; <UNPREDICTABLE>
    1678:	00010259 	andeq	r0, r1, r9, asr r2
    167c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1680:	00308802 	eorseq	r8, r0, r2, lsl #16
    1684:	00f60308 	rscseq	r0, r6, r8, lsl #6
    1688:	023d5c01 	eorseq	r5, sp, #256	; 0x100
    168c:	01010008 	tsteq	r1, r8
    1690:	a8020500 	stmdage	r2, {r8, sl}
    1694:	03080030 	movweq	r0, #32816	; 0x8030
    1698:	5c01018b 	stfpls	f0, [r1], {139}	; 0x8b
    169c:	0008023d 	andeq	r0, r8, sp, lsr r2
    16a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    16a4:	0030c802 	eorseq	ip, r0, r2, lsl #16
    16a8:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    16ac:	83347501 	teqhi	r4, #4194304	; 0x400000
    16b0:	59081308 	stmdbpl	r8, {r3, r8, r9, ip}
    16b4:	01000602 	tsteq	r0, r2, lsl #12
    16b8:	02050001 	andeq	r0, r5, #1
    16bc:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
    16c0:	0101b703 	tsteq	r1, r3, lsl #14
    16c4:	07023d4d 	streq	r3, [r2, -sp, asr #26]
    16c8:	00010100 	andeq	r0, r1, r0, lsl #2
    16cc:	31600205 	cmncc	r0, r5, lsl #4
    16d0:	c8030800 	stmdagt	r3, {fp}
    16d4:	3d5c0101 	ldfcce	f0, [ip, #-4]
    16d8:	01000802 	tsteq	r0, r2, lsl #16
    16dc:	02050001 	andeq	r0, r5, #1
    16e0:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
    16e4:	0101d503 	tsteq	r1, r3, lsl #10
    16e8:	4068303d 	rsbmi	r3, r8, sp, lsr r0
    16ec:	09022130 	stmdbeq	r2, {r4, r5, r8, sp}
    16f0:	b8010100 	stmdalt	r1, {r8}
    16f4:	02000004 	andeq	r0, r0, #4
    16f8:	0001ab00 	andeq	sl, r1, r0, lsl #22
    16fc:	fb010200 	blx	41f06 <_Min_Stack_Size+0x41b06>
    1700:	01000d0e 	tsteq	r0, lr, lsl #26
    1704:	00010101 	andeq	r0, r1, r1, lsl #2
    1708:	00010000 	andeq	r0, r1, r0
    170c:	6e690100 	powvse	f0, f1, f0
    1710:	4f432f63 	svcmi	0x00432f63
    1714:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1718:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    171c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1720:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1724:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1728:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    172c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1730:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1734:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1738:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    173c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1740:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1748 <_Min_Stack_Size+0x1348>
    1744:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1748:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    174c:	752f0063 	strvc	r0, [pc, #-99]!	; 16f1 <_Min_Stack_Size+0x12f1>
    1750:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1754:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1758:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    175c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1760:	616d2f62 	cmnvs	sp, r2, ror #30
    1764:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1768:	752f0065 	strvc	r0, [pc, #-101]!	; 170b <_Min_Stack_Size+0x130b>
    176c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1770:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1774:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1778:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    177c:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    1780:	4f432f63 	svcmi	0x00432f63
    1784:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1788:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    178c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1790:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1794:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1798:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    179c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    17a0:	5349534d 	movtpl	r5, #37709	; 0x934d
    17a4:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    17a8:	2f656369 	svccs	0x00656369
    17ac:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    17b0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    17b4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    17b8:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    17bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    17c0:	636e6900 	cmnvs	lr, #0, 18
    17c4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    17c8:	5f584554 	svcpl	0x00584554
    17cc:	5f46344d 	svcpl	0x0046344d
    17d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    17d4:	2f344632 	svccs	0x00344632
    17d8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    17dc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    17e0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    17e4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    17e8:	5f787834 	svcpl	0x00787834
    17ec:	50647453 	rsbpl	r7, r4, r3, asr r4
    17f0:	70697265 	rsbvc	r7, r9, r5, ror #4
    17f4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    17f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    17fc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1800:	636e6900 	cmnvs	lr, #0, 18
    1804:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1808:	5f584554 	svcpl	0x00584554
    180c:	5f46344d 	svcpl	0x0046344d
    1810:	334d5453 	movtcc	r5, #54355	; 0xd453
    1814:	2f344632 	svccs	0x00344632
    1818:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    181c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1820:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1824:	2f534953 	svccs	0x00534953
    1828:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    182c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1830:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1834:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1838:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    183c:	632e6332 	teqvs	lr, #-939524096	; 0xc8000000
    1840:	00000100 	andeq	r0, r0, r0, lsl #2
    1844:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1848:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    184c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1850:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1854:	00000200 	andeq	r0, r0, r0, lsl #4
    1858:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    185c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1860:	00000300 	andeq	r0, r0, r0, lsl #6
    1864:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1868:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    186c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1870:	73000004 	movwvc	r0, #4
    1874:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1878:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    187c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1880:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1884:	74730000 	ldrbtvc	r0, [r3], #-0
    1888:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    188c:	5f787834 	svcpl	0x00787834
    1890:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    1894:	00050068 	andeq	r0, r5, r8, rrx
    1898:	726f6300 	rsbvc	r6, pc, #0, 6
    189c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    18a0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    18a4:	00000006 	andeq	r0, r0, r6
    18a8:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    18ac:	03080031 	movweq	r0, #32817	; 0x8031
    18b0:	4e010189 	adfmid	f0, f1, #1.0
    18b4:	4d685a4d 	vstmdbmi	r8!, {s11-s87}
    18b8:	5a4d6a5a 	bpl	135c228 <_Min_Stack_Size+0x135be28>
    18bc:	000a025b 	andeq	r0, sl, fp, asr r2
    18c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18c4:	00322802 	eorseq	r2, r2, r2, lsl #16
    18c8:	01b40308 			; <UNDEFINED> instruction: 0x01b40308
    18cc:	2f4b5901 	svccs	0x004b5901
    18d0:	3e2e0d03 	cdpcc	13, 2, cr0, cr14, cr3, {0}
    18d4:	6730594c 	ldrvs	r5, [r0, -ip, asr #18]!
    18d8:	3185404c 	orrcc	r4, r5, ip, asr #32
    18dc:	313f765b 	teqcc	pc, fp, asr r6	; <UNPREDICTABLE>
    18e0:	a3696d4c 	cmnge	r9, #76, 26	; 0x1300
    18e4:	4d5b4eae 	ldclmi	14, cr4, [fp, #-696]	; 0xfffffd48
    18e8:	863ef692 			; <UNDEFINED> instruction: 0x863ef692
    18ec:	40926a3e 	addsmi	r6, r2, lr, lsr sl
    18f0:	000c0283 	andeq	r0, ip, r3, lsl #5
    18f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18f8:	0033ac02 	eorseq	sl, r3, r2, lsl #24
    18fc:	02a10308 	adceq	r0, r1, #8, 6	; 0x20000000
    1900:	3e4c4d01 	cdpcc	13, 4, cr4, cr12, cr1, {0}
    1904:	4b3e3e4c 	blmi	f9123c <_Min_Stack_Size+0xf90e3c>
    1908:	01000502 	tsteq	r0, r2, lsl #10
    190c:	02050001 	andeq	r0, r5, #1
    1910:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
    1914:	0102b903 	tsteq	r2, r3, lsl #18
    1918:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    191c:	01000502 	tsteq	r0, r2, lsl #10
    1920:	02050001 	andeq	r0, r5, #1
    1924:	08003428 	stmdaeq	r0, {r3, r5, sl, ip, sp}
    1928:	0102d603 	tsteq	r2, r3, lsl #12
    192c:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    1930:	01000502 	tsteq	r0, r2, lsl #10
    1934:	02050001 	andeq	r0, r5, #1
    1938:	08003468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp}
    193c:	0102f303 	tsteq	r2, r3, lsl #6
    1940:	4d3f3567 	cfldr32mi	mvfx3, [pc, #-412]!	; 17ac <_Min_Stack_Size+0x13ac>
    1944:	05023d85 	streq	r3, [r2, #-3461]	; 0xd85
    1948:	00010100 	andeq	r0, r1, r0, lsl #2
    194c:	34a80205 	strtcc	r0, [r8], #517	; 0x205
    1950:	8f030800 	svchi	0x00030800
    1954:	3f6a0103 	svccc	0x006a0103
    1958:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    195c:	00010100 	andeq	r0, r1, r0, lsl #2
    1960:	34e80205 	strbtcc	r0, [r8], #517	; 0x205
    1964:	a7030800 	strge	r0, [r3, -r0, lsl #16]
    1968:	3f6a0103 	svccc	0x006a0103
    196c:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1970:	00010100 	andeq	r0, r1, r0, lsl #2
    1974:	35280205 	strcc	r0, [r8, #-517]!	; 0x205
    1978:	c3030800 	movwgt	r0, #14336	; 0x3800
    197c:	3f870103 	svccc	0x00870103
    1980:	024b4d5d 	subeq	r4, fp, #5952	; 0x1740
    1984:	01010005 	tsteq	r1, r5
    1988:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    198c:	03080035 	movweq	r0, #32821	; 0x8035
    1990:	6a0103de 	bvs	42910 <_Min_Stack_Size+0x42510>
    1994:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1998:	01010005 	tsteq	r1, r5
    199c:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    19a0:	03080035 	movweq	r0, #32821	; 0x8035
    19a4:	670103f5 			; <UNDEFINED> instruction: 0x670103f5
    19a8:	934d3f34 	movtls	r3, #57140	; 0xdf34
    19ac:	0005023d 	andeq	r0, r5, sp, lsr r2
    19b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19b4:	0035e402 	eorseq	lr, r5, r2, lsl #8
    19b8:	04900308 	ldreq	r0, [r0], #776	; 0x308
    19bc:	953f6a01 	ldrls	r6, [pc, #-2561]!	; fc3 <_Min_Stack_Size+0xbc3>
    19c0:	00050284 	andeq	r0, r5, r4, lsl #5
    19c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19c8:	00362402 	eorseq	r2, r6, r2, lsl #8
    19cc:	04a80308 	strteq	r0, [r8], #776	; 0x308
    19d0:	953f6a01 	ldrls	r6, [pc, #-2561]!	; fd7 <_Min_Stack_Size+0xbd7>
    19d4:	00050284 	andeq	r0, r5, r4, lsl #5
    19d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19dc:	00366402 	eorseq	r6, r6, r2, lsl #8
    19e0:	04c20308 	strbeq	r0, [r2], #776	; 0x308
    19e4:	b13f6a01 	teqlt	pc, r1, lsl #20
    19e8:	00050284 	andeq	r0, r5, r4, lsl #5
    19ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19f0:	0036a802 	eorseq	sl, r6, r2, lsl #16
    19f4:	04da0308 	ldrbeq	r0, [sl], #776	; 0x308
    19f8:	953f6a01 	ldrls	r6, [pc, #-2561]!	; fff <_Min_Stack_Size+0xbff>
    19fc:	00050284 	andeq	r0, r5, r4, lsl #5
    1a00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a04:	0036e802 	eorseq	lr, r6, r2, lsl #16
    1a08:	04f40308 	ldrbteq	r0, [r4], #776	; 0x308
    1a0c:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    1a10:	00050284 	andeq	r0, r5, r4, lsl #5
    1a14:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a18:	00372802 	eorseq	r2, r7, r2, lsl #16
    1a1c:	059a0308 	ldreq	r0, [sl, #776]	; 0x308
    1a20:	954d6c01 	strbls	r6, [sp, #-3073]	; 0xc01
    1a24:	00050284 	andeq	r0, r5, r4, lsl #5
    1a28:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a2c:	00376802 	eorseq	r6, r7, r2, lsl #16
    1a30:	05b60308 	ldreq	r0, [r6, #776]!	; 0x308
    1a34:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    1a38:	00050284 	andeq	r0, r5, r4, lsl #5
    1a3c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a40:	0037a802 	eorseq	sl, r7, r2, lsl #16
    1a44:	05ce0308 	strbeq	r0, [lr, #776]	; 0x308
    1a48:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 104f <_Min_Stack_Size+0xc4f>
    1a4c:	00050284 	andeq	r0, r5, r4, lsl #5
    1a50:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a54:	0037e802 	eorseq	lr, r7, r2, lsl #16
    1a58:	05f40308 	ldrbeq	r0, [r4, #776]!	; 0x308
    1a5c:	024b6a01 	subeq	r6, fp, #4096	; 0x1000
    1a60:	01010005 	tsteq	r1, r5
    1a64:	08020500 	stmdaeq	r2, {r8, sl}
    1a68:	03080038 	movweq	r0, #32824	; 0x8038
    1a6c:	4e010681 	cfmadd32mi	mvax4, mvfx0, mvfx1, mvfx1
    1a70:	0006024b 	andeq	r0, r6, fp, asr #4
    1a74:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a78:	00382402 	eorseq	r2, r8, r2, lsl #8
    1a7c:	06a00308 	strteq	r0, [r0], r8, lsl #6
    1a80:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 1087 <_Min_Stack_Size+0xc87>
    1a84:	00050284 	andeq	r0, r5, r4, lsl #5
    1a88:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a8c:	00386402 	eorseq	r6, r8, r2, lsl #8
    1a90:	06bf0308 	ldrteq	r0, [pc], r8, lsl #6
    1a94:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    1a98:	00050284 	andeq	r0, r5, r4, lsl #5
    1a9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1aa0:	0038a402 	eorseq	sl, r8, r2, lsl #8
    1aa4:	06d70308 	ldrbeq	r0, [r7], r8, lsl #6
    1aa8:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 10af <_Min_Stack_Size+0xcaf>
    1aac:	00050284 	andeq	r0, r5, r4, lsl #5
    1ab0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1ab4:	0038e402 	eorseq	lr, r8, r2, lsl #8
    1ab8:	06ed0308 	strbteq	r0, [sp], r8, lsl #6
    1abc:	02674e01 	rsbeq	r4, r7, #1, 28
    1ac0:	01010006 	tsteq	r1, r6
    1ac4:	04020500 	streq	r0, [r2], #-1280	; 0x500
    1ac8:	03080039 	movweq	r0, #32825	; 0x8039
    1acc:	6a01078e 	bvs	4390c <_Min_Stack_Size+0x4350c>
    1ad0:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1ad4:	01010005 	tsteq	r1, r5
    1ad8:	44020500 	strmi	r0, [r2], #-1280	; 0x500
    1adc:	03080039 	movweq	r0, #32825	; 0x8039
    1ae0:	6a0107a6 	bvs	43980 <_Min_Stack_Size+0x43580>
    1ae4:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1ae8:	01010005 	tsteq	r1, r5
    1aec:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    1af0:	03080039 	movweq	r0, #32825	; 0x8039
    1af4:	670108b0 			; <UNDEFINED> instruction: 0x670108b0
    1af8:	3d4d2f34 	stclcc	15, cr2, [sp, #-208]	; 0xffffff30
    1afc:	01000602 	tsteq	r0, r2, lsl #12
    1b00:	02050001 	andeq	r0, r5, #1
    1b04:	080039b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, sp}
    1b08:	0108cb03 	tsteq	r8, r3, lsl #22
    1b0c:	a0953f88 	addsge	r3, r5, r8, lsl #31
    1b10:	01000502 	tsteq	r0, r2, lsl #10
    1b14:	02050001 	andeq	r0, r5, #1
    1b18:	080039fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
    1b1c:	01098603 	tsteq	r9, r3, lsl #12
    1b20:	354b2f59 	strbcc	r2, [fp, #-3929]	; 0xf59
    1b24:	693f4b4b 	ldmdbvs	pc!, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
    1b28:	21314169 	teqcs	r1, r9, ror #2
    1b2c:	01000602 	tsteq	r0, r2, lsl #12
    1b30:	02050001 	andeq	r0, r5, #1
    1b34:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
    1b38:	0109b603 	tsteq	r9, r3, lsl #12
    1b3c:	4b502f4b 	blmi	140d870 <_Min_Stack_Size+0x140d470>
    1b40:	21693f4b 	cmncs	r9, fp, asr #30
    1b44:	01000602 	tsteq	r0, r2, lsl #12
    1b48:	02050001 	andeq	r0, r5, #1
    1b4c:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
    1b50:	0109ed03 	tsteq	r9, r3, lsl #26
    1b54:	31512f59 	cmpcc	r1, r9, asr pc
    1b58:	4f3f4c3f 	svcmi	0x003f4c3f
    1b5c:	41693f3e 	cmnmi	r9, lr, lsr pc
    1b60:	06022132 			; <UNDEFINED> instruction: 0x06022132
    1b64:	00010100 	andeq	r0, r1, r0, lsl #2
    1b68:	3b080205 	blcc	202384 <_Min_Stack_Size+0x201f84>
    1b6c:	ba030800 	blt	c3b74 <_Min_Stack_Size+0xc3774>
    1b70:	3359010a 	cmpcc	r9, #-2147483646	; 0x80000002
    1b74:	0502674c 	streq	r6, [r2, #-1868]	; 0x74c
    1b78:	00010100 	andeq	r0, r1, r0, lsl #2
    1b7c:	3b340205 	blcc	d02398 <_Min_Stack_Size+0xd01f98>
    1b80:	dc030800 	stcle	8, cr0, [r3], {-0}
    1b84:	2f59010a 	svccs	0x0059010a
    1b88:	004d9335 	subeq	r9, sp, r5, lsr r3
    1b8c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b90:	413f0682 	teqmi	pc, r2, lsl #13
    1b94:	06022131 			; <UNDEFINED> instruction: 0x06022131
    1b98:	00010100 	andeq	r0, r1, r0, lsl #2
    1b9c:	3b900205 	blcc	fe4023b8 <_estack+0xde3d23b8>
    1ba0:	98030800 	stmdals	r3, {fp}
    1ba4:	3459010b 	ldrbcc	r0, [r9], #-267	; 0x10b
    1ba8:	0502674d 	streq	r6, [r2, #-1869]	; 0x74d
    1bac:	8f010100 	svchi	0x00010100
    1bb0:	02000003 	andeq	r0, r0, #3
    1bb4:	00019800 	andeq	r9, r1, r0, lsl #16
    1bb8:	fb010200 	blx	423c2 <_Min_Stack_Size+0x41fc2>
    1bbc:	01000d0e 	tsteq	r0, lr, lsl #26
    1bc0:	00010101 	andeq	r0, r1, r1, lsl #2
    1bc4:	00010000 	andeq	r0, r1, r0
    1bc8:	6e690100 	powvse	f0, f1, f0
    1bcc:	4f432f63 	svcmi	0x00432f63
    1bd0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1bd4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1bd8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1bdc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1be0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1be4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1be8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1bec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1bf0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1bf4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1bf8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1bfc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1c04 <_Min_Stack_Size+0x1804>
    1c00:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1c04:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1c08:	752f0063 	strvc	r0, [pc, #-99]!	; 1bad <_Min_Stack_Size+0x17ad>
    1c0c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1c10:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1c14:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1c18:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c1c:	616d2f62 	cmnvs	sp, r2, ror #30
    1c20:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1c24:	752f0065 	strvc	r0, [pc, #-101]!	; 1bc7 <_Min_Stack_Size+0x17c7>
    1c28:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1c2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1c30:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1c34:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c38:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    1c3c:	4f432f63 	svcmi	0x00432f63
    1c40:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1c44:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1c48:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1c4c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1c50:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1c54:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1c58:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1c5c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1c60:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1c64:	2f656369 	svccs	0x00656369
    1c68:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1c6c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c70:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1c74:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1c78:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1c7c:	636e6900 	cmnvs	lr, #0, 18
    1c80:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1c84:	5f584554 	svcpl	0x00584554
    1c88:	5f46344d 	svcpl	0x0046344d
    1c8c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1c90:	2f344632 	svccs	0x00344632
    1c94:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1c98:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1c9c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1ca0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ca4:	5f787834 	svcpl	0x00787834
    1ca8:	50647453 	rsbpl	r7, r4, r3, asr r4
    1cac:	70697265 	rsbvc	r7, r9, r5, ror #4
    1cb0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1cb4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1cb8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1cbc:	636e6900 	cmnvs	lr, #0, 18
    1cc0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1cc4:	5f584554 	svcpl	0x00584554
    1cc8:	5f46344d 	svcpl	0x0046344d
    1ccc:	334d5453 	movtcc	r5, #54355	; 0xd453
    1cd0:	2f344632 	svccs	0x00344632
    1cd4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1cd8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1cdc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1ce0:	2f534953 	svccs	0x00534953
    1ce4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1ce8:	00656475 	rsbeq	r6, r5, r5, ror r4
    1cec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1cf0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1cf4:	645f7878 	ldrbvs	r7, [pc], #-2168	; 1cfc <_Min_Stack_Size+0x18fc>
    1cf8:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    1cfc:	00000100 	andeq	r0, r0, r0, lsl #2
    1d00:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1d04:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    1d08:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1d0c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1d10:	00000200 	andeq	r0, r0, r0, lsl #4
    1d14:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1d18:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1d1c:	00000300 	andeq	r0, r0, r0, lsl #6
    1d20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1d24:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1d28:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1d2c:	73000004 	movwvc	r0, #4
    1d30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1d34:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1d38:	616d645f 	cmnvs	sp, pc, asr r4
    1d3c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1d40:	6f630000 	svcvs	0x00630000
    1d44:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1d48:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1d4c:	00000600 	andeq	r0, r0, r0, lsl #12
    1d50:	02050000 	andeq	r0, r5, #0
    1d54:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
    1d58:	0101c403 	tsteq	r1, r3, lsl #8
    1d5c:	3f3f694f 	svccc	0x003f694f
    1d60:	3f3f3f3f 	svccc	0x003f3f3f
    1d64:	5a4d4c4d 	bpl	1354ea0 <_Min_Stack_Size+0x1354aa0>
    1d68:	5a4d5a4d 	bpl	13586a4 <_Min_Stack_Size+0x13582a4>
    1d6c:	4c4d4c4d 	mcrrmi	12, 4, r4, sp, cr13
    1d70:	5a4d4c4d 	bpl	1354eac <_Min_Stack_Size+0x1354aac>
    1d74:	5a4d4c4d 	bpl	1354eb0 <_Min_Stack_Size+0x1354ab0>
    1d78:	5a4d5a4d 	bpl	13586b4 <_Min_Stack_Size+0x13582b4>
    1d7c:	4c4d4c4d 	mcrrmi	12, 4, r4, sp, cr13
    1d80:	4d4d4e4d 	stclmi	14, cr4, [sp, #-308]	; 0xfffffecc
    1d84:	01002f02 	tsteq	r0, r2, lsl #30
    1d88:	02050001 	andeq	r0, r5, #1
    1d8c:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
    1d90:	0102bf03 	tsteq	r2, r3, lsl #30
    1d94:	2e140359 	mrccs	3, 0, r0, cr4, cr9, {2}
    1d98:	4a10033f 	bmi	402a9c <_Min_Stack_Size+0x40269c>
    1d9c:	3d212d59 	stccc	13, cr2, [r1, #-356]!	; 0xfffffe9c
    1da0:	2d3d212d 	ldfcss	f2, [sp, #-180]!	; 0xffffff4c
    1da4:	212d3d21 	teqcs	sp, r1, lsr #26
    1da8:	3f404338 	svccc	0x00404338
    1dac:	4e40854f 	cdpmi	5, 4, cr8, cr0, cr15, {2}
    1db0:	07024b4e 	streq	r4, [r2, -lr, asr #22]
    1db4:	00010100 	andeq	r0, r1, r0, lsl #2
    1db8:	3e0c0205 	cdpcc	2, 0, cr0, cr12, cr5, {0}
    1dbc:	93030800 	movwls	r0, #14336	; 0x3800
    1dc0:	3f4d0103 	svccc	0x004d0103
    1dc4:	3f3f3f3f 	svccc	0x003f3f3f
    1dc8:	3f3f3f3f 	svccc	0x003f3f3f
    1dcc:	3f3f3f3f 	svccc	0x003f3f3f
    1dd0:	05023d3f 	streq	r3, [r2, #-3391]	; 0xd3f
    1dd4:	00010100 	andeq	r0, r1, r0, lsl #2
    1dd8:	3e780205 	cdpcc	2, 7, cr0, cr8, cr5, {0}
    1ddc:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1de0:	3f6b0103 	svccc	0x006b0103
    1de4:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1de8:	00010100 	andeq	r0, r1, r0, lsl #2
    1dec:	3eb00205 	cdpcc	2, 11, cr0, cr0, cr5, {0}
    1df0:	82030800 	andhi	r0, r3, #0, 16
    1df4:	3f5e0104 	svccc	0x005e0104
    1df8:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    1e00:	3ee40205 	cdpcc	2, 14, cr0, cr4, cr5, {0}
    1e04:	a6030800 	strge	r0, [r3], -r0, lsl #16
    1e08:	3f5e0104 	svccc	0x005e0104
    1e0c:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1e10:	00010100 	andeq	r0, r1, r0, lsl #2
    1e14:	3f180205 	svccc	0x00180205
    1e18:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    1e1c:	3d6b0104 	stfcce	f0, [fp, #-16]!
    1e20:	01000502 	tsteq	r0, r2, lsl #10
    1e24:	02050001 	andeq	r0, r5, #1
    1e28:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
    1e2c:	01058703 	tsteq	r5, r3, lsl #14
    1e30:	06023d4f 	streq	r3, [r2], -pc, asr #26
    1e34:	00010100 	andeq	r0, r1, r0, lsl #2
    1e38:	3f500205 	svccc	0x00500205
    1e3c:	db030800 	blle	c3e44 <_Min_Stack_Size+0xc3a44>
    1e40:	3f6b0105 	svccc	0x006b0105
    1e44:	023d6a79 	eorseq	r6, sp, #495616	; 0x79000
    1e48:	01010005 	tsteq	r1, r5
    1e4c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    1e50:	0308003f 	movweq	r0, #32831	; 0x803f
    1e54:	6c0105f9 	cfstr32vs	mvfx0, [r1], {249}	; 0xf9
    1e58:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    1e5c:	01010005 	tsteq	r1, r5
    1e60:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    1e64:	0308003f 	movweq	r0, #32831	; 0x803f
    1e68:	6c0106a3 	stcvs	6, cr0, [r1], {163}	; 0xa3
    1e6c:	023e4f3f 	eorseq	r4, lr, #63, 30	; 0xfc
    1e70:	01010005 	tsteq	r1, r5
    1e74:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    1e78:	0308003f 	movweq	r0, #32831	; 0x803f
    1e7c:	4b0106bc 	blmi	43974 <_Min_Stack_Size+0x43574>
    1e80:	30416934 	subcc	r6, r1, r4, lsr r9
    1e84:	00060221 	andeq	r0, r6, r1, lsr #4
    1e88:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1e8c:	00402002 	subeq	r2, r0, r2
    1e90:	07af0308 	streq	r0, [pc, r8, lsl #6]!
    1e94:	69334b01 	ldmdbvs	r3!, {r0, r8, r9, fp, lr}
    1e98:	02213042 	eoreq	r3, r1, #66	; 0x42
    1e9c:	01010006 	tsteq	r1, r6
    1ea0:	50020500 	andpl	r0, r2, r0, lsl #10
    1ea4:	03080040 	movweq	r0, #32832	; 0x8040
    1ea8:	4b0107d1 	blmi	43df4 <_Min_Stack_Size+0x439f4>
    1eac:	02215a34 	eoreq	r5, r1, #52, 20	; 0x34000
    1eb0:	01010006 	tsteq	r1, r6
    1eb4:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    1eb8:	03080040 	movweq	r0, #32832	; 0x8040
    1ebc:	590107ec 	stmdbpl	r1, {r2, r3, r5, r6, r7, r8, r9, sl}
    1ec0:	414d3530 	cmpmi	sp, r0, lsr r5
    1ec4:	404f5b32 	submi	r5, pc, r2, lsr fp	; <UNPREDICTABLE>
    1ec8:	32415b69 	subcc	r5, r1, #107520	; 0x1a400
    1ecc:	000d0221 	andeq	r0, sp, r1, lsr #4
    1ed0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1ed4:	0040ec02 	subeq	lr, r0, r2, lsl #24
    1ed8:	08af0308 	stmiaeq	pc!, {r3, r8, r9}	; <UNPREDICTABLE>
    1edc:	414d6001 	cmpmi	sp, r1
    1ee0:	76875b32 			; <UNDEFINED> instruction: 0x76875b32
    1ee4:	01000c02 	tsteq	r0, r2, lsl #24
    1ee8:	02050001 	andeq	r0, r5, #1
    1eec:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
    1ef0:	0108de03 	tsteq	r8, r3, lsl #28
    1ef4:	793f5a7b 	ldmdbvc	pc!, {r0, r1, r3, r4, r5, r6, r9, fp, ip, lr}	; <UNPREDICTABLE>
    1ef8:	953f3e6b 	ldrls	r3, [pc, #-3691]!	; 1095 <_Min_Stack_Size+0xc95>
    1efc:	00050293 	muleq	r5, r3, r2
    1f00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1f04:	0041bc02 	subeq	fp, r1, r2, lsl #24
    1f08:	09920308 	ldmibeq	r2, {r3, r8, r9}
    1f0c:	51305901 	teqpl	r0, r1, lsl #18
    1f10:	7732414d 	ldrvc	r4, [r2, -sp, asr #2]!
    1f14:	5b5c6b5b 	blpl	171cc88 <_Min_Stack_Size+0x171c888>
    1f18:	0069404f 	rsbeq	r4, r9, pc, asr #32
    1f1c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f20:	413f0658 	teqmi	pc, r8, asr r6	; <UNPREDICTABLE>
    1f24:	0d022132 	stfeqs	f2, [r2, #-200]	; 0xffffff38
    1f28:	00010100 	andeq	r0, r1, r0, lsl #2
    1f2c:	426c0205 	rsbmi	r0, ip, #1342177280	; 0x50000000
    1f30:	e4030800 	str	r0, [r3], #-2048	; 0x800
    1f34:	4d600109 	stfmie	f0, [r0, #-36]!	; 0xffffffdc
    1f38:	875b3241 	ldrbhi	r3, [fp, -r1, asr #4]
    1f3c:	000c0276 	andeq	r0, ip, r6, ror r2
    1f40:	040e0101 	streq	r0, [lr], #-257	; 0x101
    1f44:	00020000 	andeq	r0, r2, r0
    1f48:	00000198 	muleq	r0, r8, r1
    1f4c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f50:	0101000d 	tsteq	r1, sp
    1f54:	00000101 	andeq	r0, r0, r1, lsl #2
    1f58:	00000100 	andeq	r0, r0, r0, lsl #2
    1f5c:	636e6901 	cmnvs	lr, #16384	; 0x4000
    1f60:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1f64:	5f584554 	svcpl	0x00584554
    1f68:	5f46344d 	svcpl	0x0046344d
    1f6c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1f70:	2f344632 	svccs	0x00344632
    1f74:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1f78:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1f7c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1f80:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f84:	5f787834 	svcpl	0x00787834
    1f88:	50647453 	rsbpl	r7, r4, r3, asr r4
    1f8c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f90:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1f94:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1f98:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f9c:	73752f00 	cmnvc	r5, #0, 30
    1fa0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1fa4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1fa8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1fac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1fb0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1fb4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1fb8:	73752f00 	cmnvc	r5, #0, 30
    1fbc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1fc0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1fc4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1fc8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1fcc:	636e6900 	cmnvs	lr, #0, 18
    1fd0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1fd4:	5f584554 	svcpl	0x00584554
    1fd8:	5f46344d 	svcpl	0x0046344d
    1fdc:	334d5453 	movtcc	r5, #54355	; 0xd453
    1fe0:	2f344632 	svccs	0x00344632
    1fe4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1fe8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1fec:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1ff0:	2f534953 	svccs	0x00534953
    1ff4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1ff8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1ffc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    2000:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2004:	2f787834 	svccs	0x00787834
    2008:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    200c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2010:	2f636e69 	svccs	0x00636e69
    2014:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2018:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1f0c <_Min_Stack_Size+0x1b0c>
    201c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2020:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2024:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1f14 <_Min_Stack_Size+0x1b14>
    2028:	61726269 	cmnvs	r2, r9, ror #4
    202c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2030:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2034:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2038:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    203c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2040:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2044:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2048:	2f726576 	svccs	0x00726576
    204c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2050:	2f636e69 	svccs	0x00636e69
    2054:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2058:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1f4c <_Min_Stack_Size+0x1b4c>
    205c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2060:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2064:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1f54 <_Min_Stack_Size+0x1b54>
    2068:	61726269 	cmnvs	r2, r9, ror #4
    206c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2070:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2074:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    2078:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    207c:	00006564 	andeq	r6, r0, r4, ror #10
    2080:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2084:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2088:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    208c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    2090:	5f000001 	svcpl	0x00000001
    2094:	61666564 	cmnvs	r6, r4, ror #10
    2098:	5f746c75 	svcpl	0x00746c75
    209c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    20a0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    20a4:	73000002 	movwvc	r0, #2
    20a8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    20ac:	00682e74 	rsbeq	r2, r8, r4, ror lr
    20b0:	73000003 	movwvc	r0, #3
    20b4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    20b8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    20bc:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    20c0:	74730000 	ldrbtvc	r0, [r3], #-0
    20c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    20c8:	5f787834 	svcpl	0x00787834
    20cc:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    20d0:	00050068 	andeq	r0, r5, r8, rrx
    20d4:	726f6300 	rsbvc	r6, pc, #0, 6
    20d8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    20dc:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    20e0:	00000006 	andeq	r0, r0, r6
    20e4:	c8020500 	stmdagt	r2, {r8, sl}
    20e8:	03080042 	movweq	r0, #32834	; 0x8042
    20ec:	4e0101e0 	adfmidz	f0, f1, f0
    20f0:	4d685a4d 	vstmdbmi	r8!, {s11-s87}
    20f4:	5a4d685a 	bpl	135c264 <_Min_Stack_Size+0x135be64>
    20f8:	685a4d68 	ldmdavs	sl, {r3, r5, r6, r8, sl, fp, lr}^
    20fc:	4d6a5a4d 	vstmdbmi	sl!, {s11-s87}
    2100:	0f025b5a 	svceq	0x00025b5a
    2104:	00010100 	andeq	r0, r1, r0, lsl #2
    2108:	43a00205 	movmi	r0, #1342177280	; 0x50000000
    210c:	9c030800 	stcls	8, cr0, [r3], {-0}
    2110:	03590102 	cmpeq	r9, #-2147483648	; 0x80000000
    2114:	033e2e12 	teqeq	lr, #288	; 0x120
    2118:	2d674a09 	vstmdbcs	r7!, {s9-s17}
    211c:	2c302d2f 	ldccs	13, cr2, [r0], #-188	; 0xffffff44
    2120:	2b312c30 	blcs	c4d1e8 <_Min_Stack_Size+0xc4cde8>
    2124:	3f5d2b31 	svccc	0x005d2b31
    2128:	05024b85 	streq	r4, [r2, #-2949]	; 0xb85
    212c:	00010100 	andeq	r0, r1, r0, lsl #2
    2130:	44280205 	strtmi	r0, [r8], #-517	; 0x205
    2134:	dc030800 	stcle	8, cr0, [r3], {-0}
    2138:	83590102 	cmphi	r9, #-2147483648	; 0x80000000
    213c:	660e034c 	strvs	r0, [lr], -ip, asr #6
    2140:	4c3f3f9f 	ldcmi	15, cr3, [pc], #-636	; 1ecc <_Min_Stack_Size+0x1acc>
    2144:	414d422f 	cmpmi	sp, pc, lsr #4
    2148:	682e1303 	stmdavs	lr!, {r0, r1, r8, r9, ip}
    214c:	5b94a26a 	blpl	fe52aafc <_estack+0xde4faafc>
    2150:	08f75bb0 	ldmeq	r7!, {r4, r5, r7, r8, r9, fp, ip, lr}^
    2154:	5b5b6924 	blpl	16dc5ec <_Min_Stack_Size+0x16dc1ec>
    2158:	04020040 	streq	r0, [r2], #-64	; 0x40
    215c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    2160:	a1322f3f 	teqge	r2, pc, lsr pc
    2164:	492d4b2f 	pushmi	{r0, r1, r2, r3, r5, r8, r9, fp, lr}
    2168:	0b023d87 	bleq	9178c <_Min_Stack_Size+0x9138c>
    216c:	00010100 	andeq	r0, r1, r0, lsl #2
    2170:	45d80205 	ldrbmi	r0, [r8, #517]	; 0x205
    2174:	e0030800 	and	r0, r3, r0, lsl #16
    2178:	3e4d0103 	dvfcce	f0, f5, f3
    217c:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2180:	3d3e3e3e 	ldccc	14, cr3, [lr, #-248]!	; 0xffffff08
    2184:	01000502 	tsteq	r0, r2, lsl #10
    2188:	02050001 	andeq	r0, r5, #1
    218c:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    2190:	0103fc03 	tsteq	r3, r3, lsl #24
    2194:	3f3f3f4d 	svccc	0x003f3f4d
    2198:	023d3f3f 	eorseq	r3, sp, #63, 30	; 0xfc
    219c:	01010005 	tsteq	r1, r5
    21a0:	58020500 	stmdapl	r2, {r8, sl}
    21a4:	03080046 	movweq	r0, #32838	; 0x8046
    21a8:	6a010499 	bvs	43414 <_Min_Stack_Size+0x43014>
    21ac:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    21b0:	01010005 	tsteq	r1, r5
    21b4:	98020500 	stmdals	r2, {r8, sl}
    21b8:	03080046 	movweq	r0, #32838	; 0x8046
    21bc:	6b0104b2 	blvs	4348c <_Min_Stack_Size+0x4308c>
    21c0:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    21c4:	01010005 	tsteq	r1, r5
    21c8:	d8020500 	stmdale	r2, {r8, sl}
    21cc:	03080046 	movweq	r0, #32838	; 0x8046
    21d0:	6b0104cd 	blvs	4350c <_Min_Stack_Size+0x4310c>
    21d4:	05028384 	streq	r8, [r2, #-900]	; 0x384
    21d8:	00010100 	andeq	r0, r1, r0, lsl #2
    21dc:	47100205 	ldrmi	r0, [r0, -r5, lsl #4]
    21e0:	e1030800 	tst	r3, r0, lsl #16
    21e4:	4d6a0104 	stfmie	f0, [sl, #-16]!
    21e8:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    21ec:	00010100 	andeq	r0, r1, r0, lsl #2
    21f0:	47500205 	ldrbmi	r0, [r0, -r5, lsl #4]
    21f4:	fb030800 	blx	c41fe <_Min_Stack_Size+0xc3dfe>
    21f8:	5b6a0104 	blpl	1a82610 <_Min_Stack_Size+0x1a82210>
    21fc:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    2200:	00010100 	andeq	r0, r1, r0, lsl #2
    2204:	47940205 	ldrmi	r0, [r4, r5, lsl #4]
    2208:	93030800 	movwls	r0, #14336	; 0x3800
    220c:	3f6a0105 	svccc	0x006a0105
    2210:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    2214:	00010100 	andeq	r0, r1, r0, lsl #2
    2218:	47d40205 	ldrbmi	r0, [r4, r5, lsl #4]
    221c:	b2030800 	andlt	r0, r3, #0, 16
    2220:	3f6b0105 	svccc	0x006b0105
    2224:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    2228:	00010100 	andeq	r0, r1, r0, lsl #2
    222c:	48140205 	ldmdami	r4, {r0, r2, r9}
    2230:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    2234:	03590105 	cmpeq	r9, #1073741825	; 0x40000001
    2238:	3f9f4a0b 	svccc	0x009f4a0b
    223c:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    2240:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2244:	02004e4c 	andeq	r4, r0, #76, 28	; 0x4c0
    2248:	58060104 	stmdapl	r6, {r2, r8}
    224c:	4b355a06 	blmi	d58a6c <_Min_Stack_Size+0xd5866c>
    2250:	3d95492d 	ldccc	9, cr4, [r5, #180]	; 0xb4
    2254:	01000502 	tsteq	r0, r2, lsl #10
    2258:	02050001 	andeq	r0, r5, #1
    225c:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    2260:	0106a103 	tsteq	r6, r3, lsl #2
    2264:	06023d4f 	streq	r3, [r2], -pc, asr #26
    2268:	00010100 	andeq	r0, r1, r0, lsl #2
    226c:	48cc0205 	stmiami	ip, {r0, r2, r9}^
    2270:	b1030800 	tstlt	r3, r0, lsl #16
    2274:	3d6b0106 	stfcce	f0, [fp, #-24]!	; 0xffffffe8
    2278:	01000502 	tsteq	r0, r2, lsl #10
    227c:	02050001 	andeq	r0, r5, #1
    2280:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
    2284:	01078b03 	tsteq	r7, r3, lsl #22
    2288:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    228c:	01000502 	tsteq	r0, r2, lsl #10
    2290:	02050001 	andeq	r0, r5, #1
    2294:	08004928 	stmdaeq	r0, {r3, r5, r8, fp, lr}
    2298:	0107a103 	tsteq	r7, r3, lsl #2
    229c:	0502834f 	streq	r8, [r2, #-847]	; 0x34f
    22a0:	00010100 	andeq	r0, r1, r0, lsl #2
    22a4:	494c0205 	stmdbmi	ip, {r0, r2, r9}^
    22a8:	b3030800 	movwlt	r0, #14336	; 0x3800
    22ac:	32670107 	rsbcc	r0, r7, #-1073741823	; 0xc0000001
    22b0:	213f4f3f 	teqcs	pc, pc, lsr pc	; <UNPREDICTABLE>
    22b4:	01000602 	tsteq	r0, r2, lsl #12
    22b8:	02050001 	andeq	r0, r5, #1
    22bc:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    22c0:	0107cc03 	tsteq	r7, r3, lsl #24
    22c4:	06023d4f 	streq	r3, [r2], -pc, asr #26
    22c8:	00010100 	andeq	r0, r1, r0, lsl #2
    22cc:	499c0205 	ldmibmi	ip, {r0, r2, r9}
    22d0:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    22d4:	3f880107 	svccc	0x00880107
    22d8:	0502a095 	streq	sl, [r2, #-149]	; 0x95
    22dc:	00010100 	andeq	r0, r1, r0, lsl #2
    22e0:	49e40205 	stmibmi	r4!, {r0, r2, r9}^
    22e4:	dd030800 	stcle	8, cr0, [r3, #-0]
    22e8:	52830108 	addpl	r0, r3, #8, 2
    22ec:	953f5a4d 	ldrls	r5, [pc, #-2637]!	; 18a7 <_Min_Stack_Size+0x14a7>
    22f0:	000502a0 	andeq	r0, r5, r0, lsr #5
    22f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    22f8:	004a4402 	subeq	r4, sl, r2, lsl #8
    22fc:	09890308 	stmibeq	r9, {r3, r8, r9}
    2300:	85346701 	ldrhi	r6, [r4, #-1793]!	; 0x701
    2304:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    2308:	01010006 	tsteq	r1, r6
    230c:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    2310:	0308004a 	movweq	r0, #32842	; 0x804a
    2314:	6c0109b2 	stcvs	9, cr0, [r1], {178}	; 0xb2
    2318:	00050259 	andeq	r0, r5, r9, asr r2
    231c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2320:	004a9c02 	subeq	r9, sl, r2, lsl #24
    2324:	09cb0308 	stmibeq	fp, {r3, r8, r9}^
    2328:	6d2f6701 	stcvs	7, cr6, [pc, #-4]!	; 232c <_Min_Stack_Size+0x1f2c>
    232c:	695b4d77 	ldmdbvs	fp, {r0, r1, r2, r4, r5, r6, r8, sl, fp, lr}^
    2330:	01040200 	mrseq	r0, R12_usr
    2334:	3f068206 	svccc	0x00068206
    2338:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    233c:	01010006 	tsteq	r1, r6
    2340:	14020500 	strne	r0, [r2], #-1280	; 0x500
    2344:	0308004b 	movweq	r0, #32843	; 0x804b
    2348:	67010a82 	strvs	r0, [r1, -r2, lsl #21]
    234c:	02597734 	subseq	r7, r9, #52, 14	; 0xd00000
    2350:	01010005 	tsteq	r1, r5
    2354:	0000024f 	andeq	r0, r0, pc, asr #4
    2358:	019a0002 	orrseq	r0, sl, r2
    235c:	01020000 	mrseq	r0, (UNDEF: 2)
    2360:	000d0efb 	strdeq	r0, [sp], -fp
    2364:	01010101 	tsteq	r1, r1, lsl #2
    2368:	01000000 	mrseq	r0, (UNDEF: 0)
    236c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    2370:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2374:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2378:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    237c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2380:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2384:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2388:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    238c:	2f736569 	svccs	0x00736569
    2390:	334d5453 	movtcc	r5, #54355	; 0xd453
    2394:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2398:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    239c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    23a0:	5f687069 	svcpl	0x00687069
    23a4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    23a8:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    23ac:	2f006372 	svccs	0x00006372
    23b0:	2f727375 	svccs	0x00727375
    23b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    23b8:	2f656475 	svccs	0x00656475
    23bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    23c0:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2224 <_Min_Stack_Size+0x1e24>
    23c4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    23c8:	2f00656e 	svccs	0x0000656e
    23cc:	2f727375 	svccs	0x00727375
    23d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    23d4:	2f656475 	svccs	0x00656475
    23d8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    23dc:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    23e0:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    23e4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    23e8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    23ec:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    23f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    23f4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    23f8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    23fc:	2f736569 	svccs	0x00736569
    2400:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2404:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    2408:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    240c:	2f54532f 	svccs	0x0054532f
    2410:	334d5453 	movtcc	r5, #54355	; 0xd453
    2414:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2418:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    241c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2420:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    2424:	4f432f63 	svcmi	0x00432f63
    2428:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    242c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2430:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2434:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2438:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    243c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2440:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2444:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2448:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    244c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2450:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2454:	445f6870 	ldrbmi	r6, [pc], #-2160	; 245c <_Min_Stack_Size+0x205c>
    2458:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    245c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2460:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    2464:	4f432f63 	svcmi	0x00432f63
    2468:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    246c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2470:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2474:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2478:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    247c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2480:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2484:	5349534d 	movtpl	r5, #37709	; 0x934d
    2488:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    248c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2490:	74730000 	ldrbtvc	r0, [r3], #-0
    2494:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2498:	5f787834 	svcpl	0x00787834
    249c:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    24a0:	0100632e 	tsteq	r0, lr, lsr #6
    24a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 24ac <_Min_Stack_Size+0x20ac>
    24a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    24ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 24b4 <_Min_Stack_Size+0x20b4>
    24b0:	73657079 	cmnvc	r5, #121	; 0x79
    24b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    24b8:	74730000 	ldrbtvc	r0, [r3], #-0
    24bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    24c0:	0300682e 	movweq	r6, #2094	; 0x82e
    24c4:	74730000 	ldrbtvc	r0, [r3], #-0
    24c8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    24cc:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    24d0:	00040068 	andeq	r0, r4, r8, rrx
    24d4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    24d8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    24dc:	655f7878 	ldrbvs	r7, [pc, #-2168]	; 1c6c <_Min_Stack_Size+0x186c>
    24e0:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
    24e4:	00050068 	andeq	r0, r5, r8, rrx
    24e8:	726f6300 	rsbvc	r6, pc, #0, 6
    24ec:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    24f0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    24f4:	00000006 	andeq	r0, r0, r6
    24f8:	48020500 	stmdami	r2, {r8, sl}
    24fc:	0308004b 	movweq	r0, #32843	; 0x804b
    2500:	2f0100ee 	svccs	0x000100ee
    2504:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2508:	0009023d 	andeq	r0, r9, sp, lsr r2
    250c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2510:	004b7c02 	subeq	r7, fp, r2, lsl #24
    2514:	00fe0308 	rscseq	r0, lr, r8, lsl #6
    2518:	30364b01 	eorscc	r4, r6, r1, lsl #22
    251c:	5a84834d 	bpl	fe123258 <_estack+0xde0f3258>
    2520:	4d858377 	stcmi	3, cr8, [r5, #476]	; 0x1dc
    2524:	5a2f8675 	bpl	be3f00 <_Min_Stack_Size+0xbe3b00>
    2528:	02845b87 	addeq	r5, r4, #138240	; 0x21c00
    252c:	01010007 	tsteq	r1, r7
    2530:	58020500 	stmdapl	r2, {r8, sl}
    2534:	0308004c 	movweq	r0, #32844	; 0x804c
    2538:	4b0101b6 	blmi	42c18 <_Min_Stack_Size+0x42818>
    253c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2540:	01000502 	tsteq	r0, r2, lsl #10
    2544:	02050001 	andeq	r0, r5, #1
    2548:	08004c84 	stmdaeq	r0, {r2, r7, sl, fp, lr}
    254c:	0101c503 	tsteq	r1, r3, lsl #10
    2550:	0802674e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, sl, sp, lr}
    2554:	00010100 	andeq	r0, r1, r0, lsl #2
    2558:	4ca80205 	sfmmi	f0, 4, [r8], #20
    255c:	e3030800 	movw	r0, #14336	; 0x3800
    2560:	324b0101 	subcc	r0, fp, #1073741824	; 0x40000000
    2564:	21304068 	teqcs	r0, r8, rrx
    2568:	01000802 	tsteq	r0, r2, lsl #16
    256c:	02050001 	andeq	r0, r5, #1
    2570:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    2574:	0101fa03 	tsteq	r1, r3, lsl #20
    2578:	07023d4e 	streq	r3, [r2, -lr, asr #26]
    257c:	00010100 	andeq	r0, r1, r0, lsl #2
    2580:	4cf80205 	lfmmi	f0, 2, [r8], #20
    2584:	88030800 	stmdahi	r3, {fp}
    2588:	324b0102 	subcc	r0, fp, #-2147483648	; 0x80000000
    258c:	22304068 	eorscs	r4, r0, #104	; 0x68
    2590:	01000802 	tsteq	r0, r2, lsl #16
    2594:	02050001 	andeq	r0, r5, #1
    2598:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    259c:	0102a003 	tsteq	r2, r3
    25a0:	07023d4e 	streq	r3, [r2, -lr, asr #26]
    25a4:	87010100 	strhi	r0, [r1, -r0, lsl #2]
    25a8:	02000003 	andeq	r0, r0, #3
    25ac:	00019c00 	andeq	r9, r1, r0, lsl #24
    25b0:	fb010200 	blx	42dba <_Min_Stack_Size+0x429ba>
    25b4:	01000d0e 	tsteq	r0, lr, lsl #26
    25b8:	00010101 	andeq	r0, r1, r1, lsl #2
    25bc:	00010000 	andeq	r0, r1, r0
    25c0:	6e690100 	powvse	f0, f1, f0
    25c4:	4f432f63 	svcmi	0x00432f63
    25c8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    25cc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    25d0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    25d4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    25d8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    25dc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    25e0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    25e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    25e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    25ec:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    25f0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    25f4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 25fc <_Min_Stack_Size+0x21fc>
    25f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    25fc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2600:	752f0063 	strvc	r0, [pc, #-99]!	; 25a5 <_Min_Stack_Size+0x21a5>
    2604:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2608:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    260c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2610:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2614:	616d2f62 	cmnvs	sp, r2, ror #30
    2618:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    261c:	752f0065 	strvc	r0, [pc, #-101]!	; 25bf <_Min_Stack_Size+0x21bf>
    2620:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2624:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2628:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    262c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2630:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    2634:	4f432f63 	svcmi	0x00432f63
    2638:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    263c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2640:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2644:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2648:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    264c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2650:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2654:	5349534d 	movtpl	r5, #37709	; 0x934d
    2658:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    265c:	2f656369 	svccs	0x00656369
    2660:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    2664:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2668:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    266c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2670:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2674:	636e6900 	cmnvs	lr, #0, 18
    2678:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    267c:	5f584554 	svcpl	0x00584554
    2680:	5f46344d 	svcpl	0x0046344d
    2684:	334d5453 	movtcc	r5, #54355	; 0xd453
    2688:	2f344632 	svccs	0x00344632
    268c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2690:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2694:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2698:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    269c:	5f787834 	svcpl	0x00787834
    26a0:	50647453 	rsbpl	r7, r4, r3, asr r4
    26a4:	70697265 	rsbvc	r7, r9, r5, ror #4
    26a8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    26ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    26b0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26b4:	636e6900 	cmnvs	lr, #0, 18
    26b8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    26bc:	5f584554 	svcpl	0x00584554
    26c0:	5f46344d 	svcpl	0x0046344d
    26c4:	334d5453 	movtcc	r5, #54355	; 0xd453
    26c8:	2f344632 	svccs	0x00344632
    26cc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    26d0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    26d4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    26d8:	2f534953 	svccs	0x00534953
    26dc:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    26e0:	00656475 	rsbeq	r6, r5, r5, ror r4
    26e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    26e8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    26ec:	645f7878 	ldrbvs	r7, [pc], #-2168	; 26f4 <_Min_Stack_Size+0x22f4>
    26f0:	6432616d 	ldrtvs	r6, [r2], #-365	; 0x16d
    26f4:	0100632e 	tsteq	r0, lr, lsr #6
    26f8:	645f0000 	ldrbvs	r0, [pc], #-0	; 2700 <_Min_Stack_Size+0x2300>
    26fc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2700:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2708 <_Min_Stack_Size+0x2308>
    2704:	73657079 	cmnvc	r5, #121	; 0x79
    2708:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    270c:	74730000 	ldrbtvc	r0, [r3], #-0
    2710:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    2714:	0300682e 	movweq	r6, #2094	; 0x82e
    2718:	74730000 	ldrbtvc	r0, [r3], #-0
    271c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2720:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    2724:	00040068 	andeq	r0, r4, r8, rrx
    2728:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    272c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2730:	645f7878 	ldrbvs	r7, [pc], #-2168	; 2738 <_Min_Stack_Size+0x2338>
    2734:	6432616d 	ldrtvs	r6, [r2], #-365	; 0x16d
    2738:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    273c:	6f630000 	svcvs	0x00630000
    2740:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2744:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2748:	00000600 	andeq	r0, r0, r0, lsl #12
    274c:	02050000 	andeq	r0, r5, #0
    2750:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
    2754:	0100e903 	tsteq	r0, r3, lsl #18
    2758:	02595a30 	subseq	r5, r9, #48, 20	; 0x30000
    275c:	01010001 	tsteq	r1, r1
    2760:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    2764:	0308004d 	movweq	r0, #32845	; 0x804d
    2768:	4c0100fa 	stcmi	0, cr0, [r1], {250}	; 0xfa
    276c:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    2770:	77832e0e 	strvc	r2, [r3, lr, lsl #28]
    2774:	4b4c7867 	blmi	1320918 <_Min_Stack_Size+0x1320518>
    2778:	4b4c5c4b 	blmi	13198ac <_Min_Stack_Size+0x13194ac>
    277c:	4b4c414b 	blmi	1312cb0 <_Min_Stack_Size+0x13128b0>
    2780:	4b4c414b 	blmi	1312cb4 <_Min_Stack_Size+0x13128b4>
    2784:	4b4b5d4b 	blmi	12d9cb8 <_Min_Stack_Size+0x12d98b8>
    2788:	834dcb4c 	movthi	ip, #56140	; 0xdb4c
    278c:	98674b77 	stmdals	r7!, {r0, r1, r2, r4, r5, r6, r8, r9, fp, lr}^
    2790:	01000702 	tsteq	r0, r2, lsl #14
    2794:	02050001 	andeq	r0, r5, #1
    2798:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    279c:	0101d303 	tsteq	r1, r3, lsl #6
    27a0:	3d3f3f4c 	ldccc	15, cr3, [pc, #-304]!	; 2678 <_Min_Stack_Size+0x2278>
    27a4:	3f3f3d3d 	svccc	0x003f3d3d
    27a8:	023d3d3f 	eorseq	r3, sp, #4032	; 0xfc0
    27ac:	01010005 	tsteq	r1, r5
    27b0:	10020500 	andne	r0, r2, r0, lsl #10
    27b4:	0308004f 	movweq	r0, #32847	; 0x804f
    27b8:	300101f2 	strdcc	r0, [r1], -r2
    27bc:	00060267 	andeq	r0, r6, r7, ror #4
    27c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    27c4:	004f2c02 	subeq	r2, pc, r2, lsl #24
    27c8:	01fe0308 	mvnseq	r0, r8, lsl #6
    27cc:	02683001 	rsbeq	r3, r8, #1
    27d0:	01010006 	tsteq	r1, r6
    27d4:	48020500 	stmdami	r2, {r8, sl}
    27d8:	0308004f 	movweq	r0, #32847	; 0x804f
    27dc:	5c01028b 	sfmpl	f0, 4, [r1], {139}	; 0x8b
    27e0:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    27e4:	01010007 	tsteq	r1, r7
    27e8:	80020500 	andhi	r0, r2, r0, lsl #10
    27ec:	0308004f 	movweq	r0, #32847	; 0x804f
    27f0:	4c0102a4 	sfmmi	f0, 4, [r1], {164}	; 0xa4
    27f4:	2f2f2f2f 	svccs	0x002f2f2f
    27f8:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    27fc:	6777834d 	ldrbvs	r8, [r7, -sp, asr #6]!
    2800:	4b4b4b4b 	blmi	12d5534 <_Min_Stack_Size+0x12d5134>
    2804:	67322dad 	ldrvs	r2, [r2, -sp, lsr #27]!
    2808:	4baf4b4b 	blmi	febd553c <_estack+0xdeba553c>
    280c:	01000902 	tsteq	r0, r2, lsl #18
    2810:	02050001 	andeq	r0, r5, #1
    2814:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
    2818:	0102d803 	tsteq	r2, r3, lsl #16
    281c:	3f3f3f4c 	svccc	0x003f3f4c
    2820:	3f3f3f3f 	svccc	0x003f3f3f
    2824:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 2730 <_Min_Stack_Size+0x2330>
    2828:	01000502 	tsteq	r0, r2, lsl #10
    282c:	02050001 	andeq	r0, r5, #1
    2830:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    2834:	01038503 	tsteq	r3, r3, lsl #10
    2838:	2f2f2f4c 	svccs	0x002f2f4c
    283c:	0d032f2f 	stceq	15, cr2, [r3, #-188]	; 0xffffff44
    2840:	77834d2e 	strvc	r4, [r3, lr, lsr #26]
    2844:	4b4b4b67 	blmi	12d55e8 <_Min_Stack_Size+0x12d51e8>
    2848:	322dad4b 	eorcc	sl, sp, #4800	; 0x12c0
    284c:	af4b4b67 	svcge	0x004b4b67
    2850:	0009024c 	andeq	r0, r9, ip, asr #4
    2854:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2858:	00518c02 	subseq	r8, r1, r2, lsl #24
    285c:	03ba0308 			; <UNDEFINED> instruction: 0x03ba0308
    2860:	3f3f4c01 	svccc	0x003f4c01
    2864:	3f3f3f3f 	svccc	0x003f3f3f
    2868:	3f3f3f3f 	svccc	0x003f3f3f
    286c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2870:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2874:	0051e002 	subseq	lr, r1, r2
    2878:	03e50308 	mvneq	r0, #8, 6	; 0x20000000
    287c:	793f5c01 	ldmdbvc	pc!, {r0, sl, fp, ip, lr}	; <UNPREDICTABLE>
    2880:	00070268 	andeq	r0, r7, r8, ror #4
    2884:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2888:	00521802 	subseq	r1, r2, r2, lsl #16
    288c:	03fd0308 	mvnseq	r0, #8, 6	; 0x20000000
    2890:	793f5c01 	ldmdbvc	pc!, {r0, sl, fp, ip, lr}	; <UNPREDICTABLE>
    2894:	00070268 	andeq	r0, r7, r8, ror #4
    2898:	05000101 	streq	r0, [r0, #-257]	; 0x101
    289c:	00525002 	subseq	r5, r2, r2
    28a0:	04940308 	ldreq	r0, [r4], #776	; 0x308
    28a4:	833f6d01 	teqhi	pc, #1, 26	; 0x40
    28a8:	0268943d 	rsbeq	r9, r8, #1023410176	; 0x3d000000
    28ac:	01010007 	tsteq	r1, r7
    28b0:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    28b4:	03080052 	movweq	r0, #32850	; 0x8052
    28b8:	4f0104af 	svcmi	0x000104af
    28bc:	0007023d 	andeq	r0, r7, sp, lsr r2
    28c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    28c4:	0052c002 	subseq	ip, r2, r2
    28c8:	04f20308 	ldrbteq	r0, [r2], #776	; 0x308
    28cc:	793f6b01 	ldmdbvc	pc!, {r0, r8, r9, fp, sp, lr}	; <UNPREDICTABLE>
    28d0:	00070276 	andeq	r0, r7, r6, ror r2
    28d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    28d8:	0052fc02 	subseq	pc, r2, r2, lsl #24
    28dc:	05910308 	ldreq	r0, [r1, #776]	; 0x308
    28e0:	69344b01 	ldmdbvs	r4!, {r0, r8, r9, fp, lr}
    28e4:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    28e8:	01010008 	tsteq	r1, r8
    28ec:	30020500 	andcc	r0, r2, r0, lsl #10
    28f0:	03080053 	movweq	r0, #32851	; 0x8053
    28f4:	4f0105b3 	svcmi	0x000105b3
    28f8:	0007023d 	andeq	r0, r7, sp, lsr r2
    28fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2900:	00534c02 	subseq	r4, r3, r2, lsl #24
    2904:	05c80308 	strbeq	r0, [r8, #776]	; 0x308
    2908:	412f4b01 	teqmi	pc, r1, lsl #22
    290c:	00314068 	eorseq	r4, r1, r8, rrx
    2910:	06010402 	streq	r0, [r1], -r2, lsl #8
    2914:	403e0666 	eorsmi	r0, lr, r6, ror #12
    2918:	09022130 	stmdbeq	r2, {r4, r5, r8, sp}
    291c:	00010100 	andeq	r0, r1, r0, lsl #2
    2920:	53a40205 			; <UNDEFINED> instruction: 0x53a40205
    2924:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    2928:	3f4d0105 	svccc	0x004d0105
    292c:	0008023d 	andeq	r0, r8, sp, lsr r2
    2930:	04b50101 	ldrteq	r0, [r5], #257	; 0x101
    2934:	00020000 	andeq	r0, r2, r0
    2938:	0000019a 	muleq	r0, sl, r1
    293c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2940:	0101000d 	tsteq	r1, sp
    2944:	00000101 	andeq	r0, r0, r1, lsl #2
    2948:	00000100 	andeq	r0, r0, r0, lsl #2
    294c:	636e6901 	cmnvs	lr, #16384	; 0x4000
    2950:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2954:	5f584554 	svcpl	0x00584554
    2958:	5f46344d 	svcpl	0x0046344d
    295c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2960:	2f344632 	svccs	0x00344632
    2964:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2968:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    296c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2970:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2974:	5f787834 	svcpl	0x00787834
    2978:	50647453 	rsbpl	r7, r4, r3, asr r4
    297c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2980:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2984:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2988:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    298c:	73752f00 	cmnvc	r5, #0, 30
    2990:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2994:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2998:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    299c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    29a0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    29a4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    29a8:	73752f00 	cmnvc	r5, #0, 30
    29ac:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    29b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    29b4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    29b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    29bc:	636e6900 	cmnvs	lr, #0, 18
    29c0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    29c4:	5f584554 	svcpl	0x00584554
    29c8:	5f46344d 	svcpl	0x0046344d
    29cc:	334d5453 	movtcc	r5, #54355	; 0xd453
    29d0:	2f344632 	svccs	0x00344632
    29d4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    29d8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    29dc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    29e0:	2f534953 	svccs	0x00534953
    29e4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    29e8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    29ec:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    29f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    29f4:	2f787834 	svccs	0x00787834
    29f8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    29fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a00:	2f636e69 	svccs	0x00636e69
    2a04:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2a08:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 28fc <_Min_Stack_Size+0x24fc>
    2a0c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2a10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2a14:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2904 <_Min_Stack_Size+0x2504>
    2a18:	61726269 	cmnvs	r2, r9, ror #4
    2a1c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2a20:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2a24:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2a28:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2a2c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2a30:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2a34:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2a38:	2f726576 	svccs	0x00726576
    2a3c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2a40:	2f636e69 	svccs	0x00636e69
    2a44:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2a48:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 293c <_Min_Stack_Size+0x253c>
    2a4c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2a50:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2a54:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2944 <_Min_Stack_Size+0x2544>
    2a58:	61726269 	cmnvs	r2, r9, ror #4
    2a5c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2a60:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2a64:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    2a68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2a6c:	00006564 	andeq	r6, r0, r4, ror #10
    2a70:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2a74:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2a78:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    2a7c:	632e6364 	teqvs	lr, #100, 6	; 0x90000001
    2a80:	00000100 	andeq	r0, r0, r0, lsl #2
    2a84:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2a88:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2a8c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2a90:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2a94:	00000200 	andeq	r0, r0, r0, lsl #4
    2a98:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2a9c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2aa0:	00000300 	andeq	r0, r0, r0, lsl #6
    2aa4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2aa8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2aac:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2ab0:	73000004 	movwvc	r0, #4
    2ab4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2ab8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2abc:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    2ac0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2ac4:	63000005 	movwvs	r0, #5
    2ac8:	5f65726f 	svcpl	0x0065726f
    2acc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    2ad0:	00060068 	andeq	r0, r6, r8, rrx
    2ad4:	05000000 	streq	r0, [r0, #-0]
    2ad8:	0053c802 	subseq	ip, r3, r2, lsl #16
    2adc:	00fb0308 	rscseq	r0, fp, r8, lsl #6
    2ae0:	595a3001 	ldmdbpl	sl, {r0, ip, sp}^
    2ae4:	01000102 	tsteq	r0, r2, lsl #2
    2ae8:	02050001 	andeq	r0, r5, #1
    2aec:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
    2af0:	01018c03 	tsteq	r1, r3, lsl #24
    2af4:	2f2f2f4b 	svccs	0x002f2f4b
    2af8:	14032f2f 	strne	r2, [r3], #-3887	; 0xf2f
    2afc:	934b672e 	movtls	r6, #46894	; 0xb72e
    2b00:	67934b67 	ldrvs	r4, [r3, r7, ror #22]
    2b04:	4b67934b 	blmi	19e7838 <_Min_Stack_Size+0x19e7438>
    2b08:	2d836792 	stccs	7, cr6, [r3, #584]	; 0x248
    2b0c:	4b402d21 	blmi	100df98 <_Min_Stack_Size+0x100db98>
    2b10:	02ad674c 	adceq	r6, sp, #76, 14	; 0x1300000
    2b14:	0101000b 	tsteq	r1, fp
    2b18:	10020500 	andne	r0, r2, r0, lsl #10
    2b1c:	03080055 	movweq	r0, #32853	; 0x8055
    2b20:	4c0101cd 	stfmis	f0, [r1], {205}	; 0xcd
    2b24:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2b28:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2b2c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2b30:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2b34:	01010005 	tsteq	r1, r5
    2b38:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    2b3c:	03080055 	movweq	r0, #32853	; 0x8055
    2b40:	5c0101e8 	stfpls	f0, [r1], {232}	; 0xe8
    2b44:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    2b48:	01010007 	tsteq	r1, r7
    2b4c:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    2b50:	03080055 	movweq	r0, #32853	; 0x8055
    2b54:	5c010280 	sfmpl	f0, 4, [r1], {128}	; 0x80
    2b58:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    2b5c:	01010007 	tsteq	r1, r7
    2b60:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    2b64:	03080055 	movweq	r0, #32853	; 0x8055
    2b68:	4d010298 	sfmmi	f0, 4, [r1, #-608]	; 0xfffffda0
    2b6c:	68676768 	stmdavs	r7!, {r3, r5, r6, r8, r9, sl, sp, lr}^
    2b70:	000a0267 	andeq	r0, sl, r7, ror #4
    2b74:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b78:	00564402 	subseq	r4, r6, r2, lsl #8
    2b7c:	02ac0308 	adceq	r0, ip, #8, 6	; 0x20000000
    2b80:	3d3d4b01 	fldmdbxcc	sp!, {d4-d3}	;@ Deprecated
    2b84:	0005023d 	andeq	r0, r5, sp, lsr r2
    2b88:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b8c:	00566802 	subseq	r6, r6, r2, lsl #16
    2b90:	02ba0308 	adcseq	r0, sl, #8, 6	; 0x20000000
    2b94:	023d4f01 	eorseq	r4, sp, #1, 30
    2b98:	01010007 	tsteq	r1, r7
    2b9c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    2ba0:	03080056 	movweq	r0, #32854	; 0x8056
    2ba4:	4f0102cc 	svcmi	0x000102cc
    2ba8:	0007023d 	andeq	r0, r7, sp, lsr r2
    2bac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2bb0:	0056a002 	subseq	sl, r6, r2
    2bb4:	02e10308 	rsceq	r0, r1, #8, 6	; 0x20000000
    2bb8:	2f2f5a01 	svccs	0x002f5a01
    2bbc:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    2bc0:	674b2e13 	smlaldvs	r2, fp, r3, lr
    2bc4:	69674b69 	stmdbvs	r7!, {r0, r3, r5, r6, r8, r9, fp, lr}^
    2bc8:	4b4b4d67 	blmi	12d616c <_Min_Stack_Size+0x12d5d6c>
    2bcc:	2d67594b 	stclcs	9, cr5, [r7, #-300]!	; 0xfffffed4
    2bd0:	834d6732 	movthi	r6, #55090	; 0xd732
    2bd4:	4b4d5977 	blmi	13591b8 <_Min_Stack_Size+0x1358db8>
    2bd8:	4c836967 	stcmi	9, cr6, [r3], {103}	; 0x67
    2bdc:	01000502 	tsteq	r0, r2, lsl #10
    2be0:	02050001 	andeq	r0, r5, #1
    2be4:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    2be8:	0103af03 	tsteq	r3, r3, lsl #30
    2bec:	3d3f3d4e 	ldccc	13, cr3, [pc, #-312]!	; 2abc <_Min_Stack_Size+0x26bc>
    2bf0:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 2afc <_Min_Stack_Size+0x26fc>
    2bf4:	4b3f3d3d 	blmi	fd20f0 <_Min_Stack_Size+0xfd1cf0>
    2bf8:	3f3d3f3f 	svccc	0x003d3f3f
    2bfc:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c04:	00584802 	subseq	r4, r8, r2, lsl #16
    2c08:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    2c0c:	793f6a01 	ldmdbvc	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2c10:	00050268 	andeq	r0, r5, r8, ror #4
    2c14:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c18:	00588002 	subseq	r8, r8, r2
    2c1c:	03f90308 	mvnseq	r0, #8, 6	; 0x20000000
    2c20:	4b5a4d01 	blmi	169602c <_Min_Stack_Size+0x1695c2c>
    2c24:	0802754c 	stmdaeq	r2, {r2, r3, r6, r8, sl, ip, sp, lr}
    2c28:	00010100 	andeq	r0, r1, r0, lsl #2
    2c2c:	58c00205 	stmiapl	r0, {r0, r2, r9}^
    2c30:	8c030800 	stchi	8, cr0, [r3], {-0}
    2c34:	3d4b0104 	stfcce	f0, [fp, #-16]
    2c38:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c3c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c40:	0058e002 	subseq	lr, r8, r2
    2c44:	049d0308 	ldreq	r0, [sp], #776	; 0x308
    2c48:	40685001 	rsbmi	r5, r8, r1
    2c4c:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    2c50:	00010100 	andeq	r0, r1, r0, lsl #2
    2c54:	59100205 	ldmdbpl	r0, {r0, r2, r9}
    2c58:	b8030800 	stmdalt	r3, {fp}
    2c5c:	2f750104 	svccs	0x00750104
    2c60:	4b693f36 	blmi	1a52940 <_Min_Stack_Size+0x1a52540>
    2c64:	6abf674b 	bvs	fefdc998 <_estack+0xdefac998>
    2c68:	0007023d 	andeq	r0, r7, sp, lsr r2
    2c6c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c70:	00598c02 	subseq	r8, r9, r2, lsl #24
    2c74:	04df0308 	ldrbeq	r0, [pc], #776	; 2c7c <_Min_Stack_Size+0x287c>
    2c78:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    2c7c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c84:	0059b002 	subseq	fp, r9, r2
    2c88:	04f10308 	ldrbteq	r0, [r1], #776	; 0x308
    2c8c:	793f6a01 	ldmdbvc	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2c90:	07023d6a 	streq	r3, [r2, -sl, ror #26]
    2c94:	00010100 	andeq	r0, r1, r0, lsl #2
    2c98:	59f00205 	ldmibpl	r0!, {r0, r2, r9}^
    2c9c:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    2ca0:	2f590105 	svccs	0x00590105
    2ca4:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    2ca8:	674b4b4b 	strbvs	r4, [fp, -fp, asr #22]
    2cac:	0502302d 	streq	r3, [r2, #-45]	; 0x2d
    2cb0:	00010100 	andeq	r0, r1, r0, lsl #2
    2cb4:	5a3c0205 	bpl	f034d0 <_Min_Stack_Size+0xf030d0>
    2cb8:	a9030800 	stmdbge	r3, {fp}
    2cbc:	3d4c0105 	stfcce	f0, [ip, #-20]	; 0xffffffec
    2cc0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2cc4:	01010005 	tsteq	r1, r5
    2cc8:	68020500 	stmdavs	r2, {r8, sl}
    2ccc:	0308005a 	movweq	r0, #32858	; 0x805a
    2cd0:	8a0105bd 	bhi	443cc <_Min_Stack_Size+0x43fcc>
    2cd4:	673d6967 	ldrvs	r6, [sp, -r7, ror #18]!
    2cd8:	3e3e3e6b 	cdpcc	14, 3, cr3, cr14, cr11, {3}
    2cdc:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
    2ce0:	3c060104 	stfccs	f0, [r6], {4}
    2ce4:	3f3d3d06 	svccc	0x003d3d06
    2ce8:	ae3d3140 	rsfgeem	f3, f5, f0
    2cec:	6767763d 			; <UNDEFINED> instruction: 0x6767763d
    2cf0:	01000702 	tsteq	r0, r2, lsl #14
    2cf4:	02050001 	andeq	r0, r5, #1
    2cf8:	08005b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, lr}
    2cfc:	0105fa03 	tsteq	r5, r3, lsl #20
    2d00:	05023d68 	streq	r3, [r2, #-3432]	; 0xd68
    2d04:	00010100 	andeq	r0, r1, r0, lsl #2
    2d08:	5b600205 	blpl	1803524 <_Min_Stack_Size+0x1803124>
    2d0c:	89030800 	stmdbhi	r3, {fp}
    2d10:	3d5a0106 	ldfcce	f0, [sl, #-24]	; 0xffffffe8
    2d14:	01000502 	tsteq	r0, r2, lsl #10
    2d18:	02050001 	andeq	r0, r5, #1
    2d1c:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    2d20:	01069903 	tsteq	r6, r3, lsl #18
    2d24:	3e660903 	cdpcc	9, 6, cr0, cr6, cr3, {0}
    2d28:	4c3e4c3e 	ldcmi	12, cr4, [lr], #-248	; 0xffffff08
    2d2c:	01040200 	mrseq	r0, R12_usr
    2d30:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    2d34:	404e3f3d 	submi	r3, lr, sp, lsr pc
    2d38:	3d5a4b3d 	vldrcc	d20, [sl, #-244]	; 0xffffff0c
    2d3c:	69675a4b 	stmdbvs	r7!, {r0, r1, r3, r6, r9, fp, ip, lr}^
    2d40:	05023ee7 	streq	r3, [r2, #-3815]	; 0xee7
    2d44:	00010100 	andeq	r0, r1, r0, lsl #2
    2d48:	5c480205 	sfmpl	f0, 2, [r8], {5}
    2d4c:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    2d50:	3e5d0106 	rdfcce	f0, f5, f6
    2d54:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2d58:	01040200 	mrseq	r0, R12_usr
    2d5c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    2d60:	31403f3d 	cmpcc	r0, sp, lsr pc
    2d64:	3e3e5a4b 	vsubcc.f32	s10, s28, s22
    2d68:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
    2d6c:	3c060104 	stfccs	f0, [r6], {4}
    2d70:	3f3d3d06 	svccc	0x003d3d06
    2d74:	3ecb3240 	cdpcc	2, 12, cr3, cr11, cr0, {2}
    2d78:	01000502 	tsteq	r0, r2, lsl #10
    2d7c:	02050001 	andeq	r0, r5, #1
    2d80:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
    2d84:	0107c903 	tsteq	r7, r3, lsl #18
    2d88:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
    2d8c:	01000702 	tsteq	r0, r2, lsl #14
    2d90:	02050001 	andeq	r0, r5, #1
    2d94:	08005d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, lr}
    2d98:	0107e303 	tsteq	r7, r3, lsl #6
    2d9c:	4068334b 	rsbmi	r3, r8, fp, asr #6
    2da0:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    2da4:	00010100 	andeq	r0, r1, r0, lsl #2
    2da8:	5d780205 	lfmpl	f0, 2, [r8, #-20]!	; 0xffffffec
    2dac:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    2db0:	3d4f0107 	stfcce	f0, [pc, #-28]	; 2d9c <_Min_Stack_Size+0x299c>
    2db4:	01000702 	tsteq	r0, r2, lsl #14
    2db8:	02050001 	andeq	r0, r5, #1
    2dbc:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
    2dc0:	01089203 	tsteq	r8, r3, lsl #4
    2dc4:	4068334b 	rsbmi	r3, r8, fp, asr #6
    2dc8:	04020031 	streq	r0, [r2], #-49	; 0x31
    2dcc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2dd0:	2130403e 	teqcs	r0, lr, lsr r0
    2dd4:	01000802 	tsteq	r0, r2, lsl #16
    2dd8:	02050001 	andeq	r0, r5, #1
    2ddc:	08005de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
    2de0:	0108b803 	tsteq	r8, r3, lsl #16
    2de4:	07023d4f 	streq	r3, [r2, -pc, asr #26]
    2de8:	22010100 	andcs	r0, r1, #0, 2
    2dec:	02000005 	andeq	r0, r0, #5
    2df0:	00019800 	andeq	r9, r1, r0, lsl #16
    2df4:	fb010200 	blx	435fe <_Min_Stack_Size+0x431fe>
    2df8:	01000d0e 	tsteq	r0, lr, lsl #26
    2dfc:	00010101 	andeq	r0, r1, r1, lsl #2
    2e00:	00010000 	andeq	r0, r1, r0
    2e04:	6e690100 	powvse	f0, f1, f0
    2e08:	4f432f63 	svcmi	0x00432f63
    2e0c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2e10:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2e14:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2e18:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2e1c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2e20:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2e24:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2e28:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2e2c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2e30:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2e34:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2e38:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2e40 <_Min_Stack_Size+0x2a40>
    2e3c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2e40:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2e44:	752f0063 	strvc	r0, [pc, #-99]!	; 2de9 <_Min_Stack_Size+0x29e9>
    2e48:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2e4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2e50:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2e54:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2e58:	616d2f62 	cmnvs	sp, r2, ror #30
    2e5c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2e60:	752f0065 	strvc	r0, [pc, #-101]!	; 2e03 <_Min_Stack_Size+0x2a03>
    2e64:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2e68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2e6c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2e70:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2e74:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    2e78:	4f432f63 	svcmi	0x00432f63
    2e7c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2e80:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2e84:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2e88:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2e8c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2e90:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2e94:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2e98:	5349534d 	movtpl	r5, #37709	; 0x934d
    2e9c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    2ea0:	2f656369 	svccs	0x00656369
    2ea4:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    2ea8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2eac:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2eb0:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2eb4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2eb8:	636e6900 	cmnvs	lr, #0, 18
    2ebc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2ec0:	5f584554 	svcpl	0x00584554
    2ec4:	5f46344d 	svcpl	0x0046344d
    2ec8:	334d5453 	movtcc	r5, #54355	; 0xd453
    2ecc:	2f344632 	svccs	0x00344632
    2ed0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2ed4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2ed8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2edc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2ee0:	5f787834 	svcpl	0x00787834
    2ee4:	50647453 	rsbpl	r7, r4, r3, asr r4
    2ee8:	70697265 	rsbvc	r7, r9, r5, ror #4
    2eec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2ef0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2ef4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2ef8:	636e6900 	cmnvs	lr, #0, 18
    2efc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2f00:	5f584554 	svcpl	0x00584554
    2f04:	5f46344d 	svcpl	0x0046344d
    2f08:	334d5453 	movtcc	r5, #54355	; 0xd453
    2f0c:	2f344632 	svccs	0x00344632
    2f10:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2f14:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2f18:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    2f1c:	2f534953 	svccs	0x00534953
    2f20:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2f24:	00656475 	rsbeq	r6, r5, r5, ror r4
    2f28:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2f2c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2f30:	665f7878 			; <UNDEFINED> instruction: 0x665f7878
    2f34:	632e636d 	teqvs	lr, #-1275068415	; 0xb4000001
    2f38:	00000100 	andeq	r0, r0, r0, lsl #2
    2f3c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2f40:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2f44:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2f48:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2f4c:	00000200 	andeq	r0, r0, r0, lsl #4
    2f50:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2f54:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2f58:	00000300 	andeq	r0, r0, r0, lsl #6
    2f5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f60:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2f64:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2f68:	73000004 	movwvc	r0, #4
    2f6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2f70:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2f74:	636d665f 	cmnvs	sp, #99614720	; 0x5f00000
    2f78:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2f7c:	6f630000 	svcvs	0x00630000
    2f80:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2f84:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2f88:	00000600 	andeq	r0, r0, r0, lsl #12
    2f8c:	02050000 	andeq	r0, r5, #0
    2f90:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
    2f94:	01018203 	tsteq	r1, r3, lsl #4
    2f98:	76873e4f 	strvc	r3, [r7], pc, asr #28
    2f9c:	08026783 	stmdaeq	r2, {r0, r1, r7, r8, r9, sl, sp, lr}
    2fa0:	00010100 	andeq	r0, r1, r0, lsl #2
    2fa4:	5e580205 	cdppl	2, 5, cr0, cr8, cr5, {0}
    2fa8:	9d030800 	stcls	8, cr0, [r3, #-0]
    2fac:	034b0101 	movteq	r0, #45313	; 0xb101
    2fb0:	2f4b2e1a 	svccs	0x004b2e1a
    2fb4:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2fb8:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2fbc:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2fc0:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2fc4:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2fc8:	032d222d 	teqeq	sp, #-805306366	; 0xd0000002
    2fcc:	10032074 	andne	r2, r3, r4, ror r0
    2fd0:	00da4c2e 	sbcseq	r4, sl, lr, lsr #24
    2fd4:	06010402 	streq	r0, [r1], -r2, lsl #8
    2fd8:	684c0658 	stmdavs	ip, {r3, r4, r6, r9, sl}^
    2fdc:	59a28391 	stmibpl	r2!, {r0, r4, r7, r8, r9, pc}
    2fe0:	4922493d 	stmdbmi	r2!, {r0, r2, r3, r4, r5, r8, fp, lr}
    2fe4:	49224922 	stmdbmi	r2!, {r1, r5, r8, fp, lr}
    2fe8:	3b224922 	blcc	895478 <_Min_Stack_Size+0x895078>
    2fec:	03207a03 	teqeq	r0, #12288	; 0x3000
    2ff0:	09032e0a 	stmdbeq	r3, {r1, r3, r9, sl, fp, sp}
    2ff4:	493d3d58 	ldmdbmi	sp!, {r3, r4, r6, r8, sl, fp, ip, sp}
    2ff8:	49224922 	stmdbmi	r2!, {r1, r5, r8, fp, lr}
    2ffc:	3b224922 	blcc	89548c <_Min_Stack_Size+0x89508c>
    3000:	3c0a031b 	stccc	3, cr0, [sl], {27}
    3004:	00080277 	andeq	r0, r8, r7, ror r2
    3008:	05000101 	streq	r0, [r0, #-257]	; 0x101
    300c:	005fec02 	subseq	lr, pc, r2, lsl #24
    3010:	02810308 	addeq	r0, r1, #8, 6	; 0x20000000
    3014:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    3018:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    301c:	4b3d3d3d 	blmi	f52518 <_Min_Stack_Size+0xf52118>
    3020:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
    3024:	4b4b4b4b 	blmi	12d5d58 <_Min_Stack_Size+0x12d5958>
    3028:	4b4b4b4b 	blmi	12d5d5c <_Min_Stack_Size+0x12d595c>
    302c:	4b4b4b4b 	blmi	12d5d60 <_Min_Stack_Size+0x12d5960>
    3030:	05024b4b 	streq	r4, [r2, #-2891]	; 0xb4b
    3034:	00010100 	andeq	r0, r1, r0, lsl #2
    3038:	60c80205 	sbcvs	r0, r8, r5, lsl #4
    303c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
    3040:	3f6a0102 	svccc	0x006a0102
    3044:	0802bccd 	stmdaeq	r2, {r0, r2, r3, r6, r7, sl, fp, ip, sp, pc}
    3048:	00010100 	andeq	r0, r1, r0, lsl #2
    304c:	611c0205 	tstvs	ip, r5, lsl #4
    3050:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    3054:	3f4e0102 	svccc	0x004e0102
    3058:	5e4b3d3d 	mcrpl	13, 2, r3, cr11, cr13, {1}
    305c:	4c4b3d3d 	mcrrmi	13, 3, r3, fp, cr13
    3060:	01000a02 	tsteq	r0, r2, lsl #20
    3064:	02050001 	andeq	r0, r5, #1
    3068:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    306c:	01039603 	tsteq	r3, r3, lsl #12
    3070:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
    3074:	2d222d30 	stccs	13, cr2, [r2, #-192]!	; 0xffffff40
    3078:	3b222d22 	blcc	88e508 <_Min_Stack_Size+0x88e108>
    307c:	031b3b22 	tsteq	fp, #34816	; 0x8800
    3080:	493d3c09 	ldmdbmi	sp!, {r0, r3, sl, fp, ip, sp}
    3084:	47224922 	strmi	r4, [r2, -r2, lsr #18]!
    3088:	22493d34 	subcs	r3, r9, #52, 26	; 0xd00
    308c:	33472249 	movtcc	r2, #29257	; 0x7249
    3090:	4f3d3d4d 	svcmi	0x003d3d4d
    3094:	023e3d3d 	eorseq	r3, lr, #3904	; 0xf40
    3098:	01010009 	tsteq	r1, r9
    309c:	44020500 	strmi	r0, [r2], #-1280	; 0x500
    30a0:	03080062 	movweq	r0, #32866	; 0x8062
    30a4:	4c0103d7 	stcmi	3, cr0, [r1], {215}	; 0xd7
    30a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    30ac:	4b3d3d3d 	blmi	f525a8 <_Min_Stack_Size+0xf521a8>
    30b0:	4b4b4b4b 	blmi	12d5de4 <_Min_Stack_Size+0x12d59e4>
    30b4:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
    30b8:	01010005 	tsteq	r1, r5
    30bc:	c0020500 	andgt	r0, r2, r0, lsl #10
    30c0:	03080062 	movweq	r0, #32866	; 0x8062
    30c4:	6a0103f4 	bvs	4409c <_Min_Stack_Size+0x43c9c>
    30c8:	7a783e3f 	bvc	1e129cc <_Min_Stack_Size+0x1e125cc>
    30cc:	0269783e 	rsbeq	r7, r9, #4063232	; 0x3e0000
    30d0:	0101000c 	tsteq	r1, ip
    30d4:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    30d8:	03080063 	movweq	r0, #32867	; 0x8063
    30dc:	6a01049c 	bvs	44354 <_Min_Stack_Size+0x43f54>
    30e0:	7a783e3f 	bvc	1e129e4 <_Min_Stack_Size+0x1e125e4>
    30e4:	0269783e 	rsbeq	r7, r9, #4063232	; 0x3e0000
    30e8:	0101000c 	tsteq	r1, ip
    30ec:	98020500 	stmdals	r2, {r8, sl}
    30f0:	03080063 	movweq	r0, #32867	; 0x8063
    30f4:	4b0104c3 	blmi	44408 <_Min_Stack_Size+0x44008>
    30f8:	3f4f3f30 	svccc	0x004f3f30
    30fc:	000b0221 	andeq	r0, fp, r1, lsr #4
    3100:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3104:	0063d002 	rsbeq	sp, r3, r2
    3108:	05830308 	streq	r0, [r3, #776]	; 0x308
    310c:	3d3d3001 	ldccc	0, cr3, [sp, #-4]!
    3110:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
    3114:	01010006 	tsteq	r1, r6
    3118:	04020500 	streq	r0, [r2], #-1280	; 0x500
    311c:	03080064 	movweq	r0, #32868	; 0x8064
    3120:	03010594 	movweq	r0, #5524	; 0x1594
    3124:	3b3e4a15 	blcc	f95980 <_Min_Stack_Size+0xf95580>
    3128:	263a3b22 	ldrtcs	r3, [sl], -r2, lsr #22
    312c:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3130:	261e4922 	ldrcs	r4, [lr], -r2, lsr #18
    3134:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3138:	261e4922 	ldrcs	r4, [lr], -r2, lsr #18
    313c:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3140:	241e4922 	ldrcs	r4, [lr], #-2338	; 0x922
    3144:	01000802 	tsteq	r0, r2, lsl #16
    3148:	02050001 	andeq	r0, r5, #1
    314c:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
    3150:	0105c803 	tsteq	r5, r3, lsl #16
    3154:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    3158:	4b4b4b4b 	blmi	12d5e8c <_Min_Stack_Size+0x12d5a8c>
    315c:	4b4b4b4b 	blmi	12d5e90 <_Min_Stack_Size+0x12d5a90>
    3160:	4b4b4b4b 	blmi	12d5e94 <_Min_Stack_Size+0x12d5a94>
    3164:	01000502 	tsteq	r0, r2, lsl #10
    3168:	02050001 	andeq	r0, r5, #1
    316c:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
    3170:	0105e203 	tsteq	r5, r3, lsl #4
    3174:	68793f5b 	ldmdavs	r9!, {r0, r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    3178:	01000902 	tsteq	r0, r2, lsl #18
    317c:	02050001 	andeq	r0, r5, #1
    3180:	08006570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp, lr}
    3184:	0106aa03 	tsteq	r6, r3, lsl #20
    3188:	3d75674e 	ldclcc	7, cr6, [r5, #-312]!	; 0xfffffec8
    318c:	08023d3d 	stmdaeq	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    3190:	00010100 	andeq	r0, r1, r0, lsl #2
    3194:	65b40205 	ldrvs	r0, [r4, #517]!	; 0x205
    3198:	be030800 	cdplt	8, 0, cr0, cr3, cr0, {0}
    319c:	2f4c0106 	svccs	0x004c0106
    31a0:	1a032f2f 	bne	cee64 <_Min_Stack_Size+0xcea64>
    31a4:	222d2f2e 	eorcs	r2, sp, #46, 30	; 0xb8
    31a8:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    31ac:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    31b0:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    31b4:	032e7803 	teqeq	lr, #196608	; 0x30000
    31b8:	784c2e0a 	stmdavc	ip, {r1, r3, r9, sl, fp, sp}^
    31bc:	2c222d2f 	stccs	13, cr2, [r2], #-188	; 0xffffff44
    31c0:	4c693d32 	stclmi	13, cr3, [r9], #-200	; 0xffffff38
    31c4:	5722574b 	strpl	r5, [r2, -fp, asr #14]!
    31c8:	57225722 	strpl	r5, [r2, -r2, lsr #14]!
    31cc:	03225722 	teqeq	r2, #8912896	; 0x880000
    31d0:	8636587a 			; <UNDEFINED> instruction: 0x8636587a
    31d4:	5722574b 	strpl	r5, [r2, -fp, asr #14]!
    31d8:	59335522 	ldmdbpl	r3!, {r1, r5, r8, sl, ip, lr}
    31dc:	773d3157 			; <UNDEFINED> instruction: 0x773d3157
    31e0:	01000802 	tsteq	r0, r2, lsl #16
    31e4:	02050001 	andeq	r0, r5, #1
    31e8:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
    31ec:	01079803 	tsteq	r7, r3, lsl #16
    31f0:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    31f4:	4b3d3d3d 	blmi	f526f0 <_Min_Stack_Size+0xf522f0>
    31f8:	4b3e3d3d 	blmi	f926f4 <_Min_Stack_Size+0xf922f4>
    31fc:	4b4b4b4b 	blmi	12d5f30 <_Min_Stack_Size+0x12d5b30>
    3200:	05024c4b 	streq	r4, [r2, #-3147]	; 0xc4b
    3204:	00010100 	andeq	r0, r1, r0, lsl #2
    3208:	67980205 	ldrvs	r0, [r8, r5, lsl #4]
    320c:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    3210:	364b0107 	strbcc	r0, [fp], -r7, lsl #2
    3214:	49222d2f 	stmdbmi	r2!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}
    3218:	3e333922 	cdpcc	9, 3, cr3, cr3, cr2, {1}
    321c:	01000802 	tsteq	r0, r2, lsl #16
    3220:	02050001 	andeq	r0, r5, #1
    3224:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
    3228:	0107d003 	tsteq	r7, r3
    322c:	6a3e344b 	bvs	f90360 <_Min_Stack_Size+0xf8ff60>
    3230:	0802216a 	stmdaeq	r2, {r1, r3, r5, r6, r8, sp}
    3234:	00010100 	andeq	r0, r1, r0, lsl #2
    3238:	68140205 	ldmdavs	r4, {r0, r2, r9}
    323c:	ea030800 	b	c5244 <_Min_Stack_Size+0xc4e44>
    3240:	764e0107 	strbvc	r0, [lr], -r7, lsl #2
    3244:	01000702 	tsteq	r0, r2, lsl #14
    3248:	02050001 	andeq	r0, r5, #1
    324c:	08006838 	stmdaeq	r0, {r3, r4, r5, fp, sp, lr}
    3250:	0107f803 	tsteq	r7, r3, lsl #16
    3254:	0702754e 	streq	r7, [r2, -lr, asr #10]
    3258:	00010100 	andeq	r0, r1, r0, lsl #2
    325c:	685c0205 	ldmdavs	ip, {r0, r2, r9}^
    3260:	88030800 	stmdahi	r3, {fp}
    3264:	3e6b0108 	powcce	f0, f3, #0.0
    3268:	0702afb0 			; <UNDEFINED> instruction: 0x0702afb0
    326c:	00010100 	andeq	r0, r1, r0, lsl #2
    3270:	68a80205 	stmiavs	r8!, {r0, r2, r9}
    3274:	bc030800 	stclt	8, cr0, [r3], {-0}
    3278:	3f790108 	svccc	0x00790108
    327c:	774c773e 	smlaldxvc	r7, ip, lr, r7
    3280:	3f7a7a4c 	svccc	0x007a7a4c
    3284:	4c854c85 	stcmi	12, cr4, [r5], {133}	; 0x85
    3288:	0d027788 	stceq	7, cr7, [r2, #-544]	; 0xfffffde0
    328c:	00010100 	andeq	r0, r1, r0, lsl #2
    3290:	69780205 	ldmdbvs	r8!, {r0, r2, r9}^
    3294:	89030800 	stmdbhi	r3, {fp}
    3298:	2f590109 	svccs	0x00590109
    329c:	4c4c3e34 	mcrrmi	14, 3, r3, ip, cr4
    32a0:	404e4c4c 	submi	r4, lr, ip, asr #24
    32a4:	21314068 	teqcs	r1, r8, rrx
    32a8:	01000f02 	tsteq	r0, r2, lsl #30
    32ac:	02050001 	andeq	r0, r5, #1
    32b0:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
    32b4:	0109c103 	tsteq	r9, r3, lsl #2
    32b8:	4c843e5d 	stcmi	14, cr3, [r4], {93}	; 0x5d
    32bc:	77874c84 	strvc	r4, [r7, r4, lsl #25]
    32c0:	01000d02 	tsteq	r0, r2, lsl #26
    32c4:	02050001 	andeq	r0, r5, #1
    32c8:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
    32cc:	0109ec03 	tsteq	r9, r3, lsl #24
    32d0:	2f2f2f59 	svccs	0x002f2f59
    32d4:	4c3e342f 	cfldrsmi	mvf3, [lr], #-188	; 0xffffff44
    32d8:	4f4c4c4c 	svcmi	0x004c4c4c
    32dc:	004d403d 	subeq	r4, sp, sp, lsr r0
    32e0:	06010402 	streq	r0, [r1], -r2, lsl #8
    32e4:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
    32e8:	0402005b 	streq	r0, [r2], #-91	; 0x5b
    32ec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    32f0:	2130403e 	teqcs	r0, lr, lsr r0
    32f4:	01000e02 	tsteq	r0, r2, lsl #28
    32f8:	02050001 	andeq	r0, r5, #1
    32fc:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
    3300:	010ab403 	tsteq	sl, r3, lsl #8
    3304:	4c923e5d 	ldcmi	14, cr3, [r2], {93}	; 0x5d
    3308:	68954c92 	ldmvs	r5, {r1, r4, r7, sl, fp, lr}
    330c:	01000d02 	tsteq	r0, r2, lsl #26
    3310:	0001e801 	andeq	lr, r1, r1, lsl #16
    3314:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    3318:	02000001 	andeq	r0, r0, #1
    331c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3320:	01010100 	mrseq	r0, (UNDEF: 17)
    3324:	00000001 	andeq	r0, r0, r1
    3328:	01000001 	tsteq	r0, r1
    332c:	2f636e69 	svccs	0x00636e69
    3330:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3334:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3228 <_Min_Stack_Size+0x2e28>
    3338:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    333c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3340:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3230 <_Min_Stack_Size+0x2e30>
    3344:	61726269 	cmnvs	r2, r9, ror #4
    3348:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    334c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3350:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3354:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3358:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    335c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3360:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3364:	2f726576 	svccs	0x00726576
    3368:	00637273 	rsbeq	r7, r3, r3, ror r2
    336c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3370:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3374:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3378:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    337c:	2f62696c 	svccs	0x0062696c
    3380:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3384:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3388:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    338c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3390:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3394:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3398:	0062696c 	rsbeq	r6, r2, ip, ror #18
    339c:	2f636e69 	svccs	0x00636e69
    33a0:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    33a4:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3298 <_Min_Stack_Size+0x2e98>
    33a8:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    33ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    33b0:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 32a0 <_Min_Stack_Size+0x2ea0>
    33b4:	61726269 	cmnvs	r2, r9, ror #4
    33b8:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    33bc:	534d432f 	movtpl	r4, #54063	; 0xd32f
    33c0:	442f5349 	strtmi	r5, [pc], #-841	; 33c8 <_Min_Stack_Size+0x2fc8>
    33c4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    33c8:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    33cc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    33d0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    33d4:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    33d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    33dc:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    33e0:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    33e4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    33e8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    33ec:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    33f0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    33f4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    33f8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    33fc:	2f736569 	svccs	0x00736569
    3400:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3404:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3408:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    340c:	73000065 	movwvc	r0, #101	; 0x65
    3410:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3414:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3418:	676e725f 			; <UNDEFINED> instruction: 0x676e725f
    341c:	0100632e 	tsteq	r0, lr, lsr #6
    3420:	645f0000 	ldrbvs	r0, [pc], #-0	; 3428 <_Min_Stack_Size+0x3028>
    3424:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    3428:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3430 <_Min_Stack_Size+0x3030>
    342c:	73657079 	cmnvc	r5, #121	; 0x79
    3430:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3434:	74730000 	ldrbtvc	r0, [r3], #-0
    3438:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    343c:	0300682e 	movweq	r6, #2094	; 0x82e
    3440:	74730000 	ldrbtvc	r0, [r3], #-0
    3444:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3448:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    344c:	00040068 	andeq	r0, r4, r8, rrx
    3450:	726f6300 	rsbvc	r6, pc, #0, 6
    3454:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3458:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    345c:	00000005 	andeq	r0, r0, r5
    3460:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    3464:	0308006b 	movweq	r0, #32875	; 0x806b
    3468:	300100e3 	andcc	r0, r1, r3, ror #1
    346c:	01024b4d 	tsteq	r2, sp, asr #22
    3470:	00010100 	andeq	r0, r1, r0, lsl #2
    3474:	6bb40205 	blvs	fed03c90 <_estack+0xdecd3c90>
    3478:	f2030800 	vadd.i8	d0, d3, d0
    347c:	3f5c0100 	svccc	0x005c0100
    3480:	07026879 	smlsdxeq	r2, r9, r8, r6
    3484:	00010100 	andeq	r0, r1, r0, lsl #2
    3488:	6bec0205 	blvs	ffb03ca4 <_estack+0xdfad3ca4>
    348c:	b0030800 	andlt	r0, r3, r0, lsl #16
    3490:	2f300101 	svccs	0x00300101
    3494:	01000802 	tsteq	r0, r2, lsl #16
    3498:	02050001 	andeq	r0, r5, #1
    349c:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
    34a0:	01028b03 	tsteq	r2, r3, lsl #22
    34a4:	68793f5c 	ldmdavs	r9!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    34a8:	01000702 	tsteq	r0, r2, lsl #14
    34ac:	02050001 	andeq	r0, r5, #1
    34b0:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
    34b4:	0102a503 	tsteq	r2, r3, lsl #10
    34b8:	41693359 	cmnmi	r9, r9, asr r3
    34bc:	09022131 	stmdbeq	r2, {r0, r4, r5, r8, sp}
    34c0:	00010100 	andeq	r0, r1, r0, lsl #2
    34c4:	6c740205 	lfmvs	f0, 2, [r4], #-20	; 0xffffffec
    34c8:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    34cc:	595c0102 	ldmdbpl	ip, {r1, r8}^
    34d0:	01000802 	tsteq	r0, r2, lsl #16
    34d4:	02050001 	andeq	r0, r5, #1
    34d8:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
    34dc:	0102d603 	tsteq	r2, r3, lsl #12
    34e0:	41693359 	cmnmi	r9, r9, asr r3
    34e4:	09022131 	stmdbeq	r2, {r0, r4, r5, r8, sp}
    34e8:	00010100 	andeq	r0, r1, r0, lsl #2
    34ec:	6cd00205 	lfmvs	f0, 2, [r0], {5}
    34f0:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    34f4:	595d0102 	ldmdbpl	sp, {r1, r8}^
    34f8:	01000802 	tsteq	r0, r2, lsl #16
    34fc:	0002db01 	andeq	sp, r2, r1, lsl #22
    3500:	ce000200 	cdpgt	2, 0, cr0, cr0, cr0, {0}
    3504:	02000001 	andeq	r0, r0, #1
    3508:	0d0efb01 	vstreq	d15, [lr, #-4]
    350c:	01010100 	mrseq	r0, (UNDEF: 17)
    3510:	00000001 	andeq	r0, r0, r1
    3514:	01000001 	tsteq	r0, r1
    3518:	2f636e69 	svccs	0x00636e69
    351c:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    3520:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    3524:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3528:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    352c:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    3530:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    3534:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3538:	2f007972 	svccs	0x00007972
    353c:	2f727375 	svccs	0x00727375
    3540:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3544:	2f656475 	svccs	0x00656475
    3548:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    354c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 33b0 <_Min_Stack_Size+0x2fb0>
    3550:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3554:	2f00656e 	svccs	0x0000656e
    3558:	2f727375 	svccs	0x00727375
    355c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3560:	2f656475 	svccs	0x00656475
    3564:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3568:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    356c:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    3570:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3574:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3578:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    357c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3580:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3584:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3588:	2f736569 	svccs	0x00736569
    358c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3590:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    3594:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    3598:	2f54532f 	svccs	0x0054532f
    359c:	334d5453 	movtcc	r5, #54355	; 0xd453
    35a0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    35a4:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    35a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    35ac:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    35b0:	4f432f63 	svcmi	0x00432f63
    35b4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    35b8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    35bc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    35c0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    35c4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    35c8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    35cc:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    35d0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    35d4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    35d8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    35dc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    35e0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 35e8 <_Min_Stack_Size+0x31e8>
    35e4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    35e8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    35ec:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    35f0:	4f432f63 	svcmi	0x00432f63
    35f4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    35f8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    35fc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3600:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3604:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3608:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    360c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3610:	5349534d 	movtpl	r5, #37709	; 0x934d
    3614:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3618:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    361c:	74730000 	ldrbtvc	r0, [r3], #-0
    3620:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3624:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    3628:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    362c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3630:	632e7972 	teqvs	lr, #1867776	; 0x1c8000
    3634:	00000100 	andeq	r0, r0, r0, lsl #2
    3638:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    363c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3640:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3644:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3648:	00000200 	andeq	r0, r0, r0, lsl #4
    364c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3650:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3654:	00000300 	andeq	r0, r0, r0, lsl #6
    3658:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    365c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3660:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3664:	73000004 	movwvc	r0, #4
    3668:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    366c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3670:	616d645f 	cmnvs	sp, pc, asr r4
    3674:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3678:	74730000 	ldrbtvc	r0, [r3], #-0
    367c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3680:	5f787834 	svcpl	0x00787834
    3684:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    3688:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    368c:	74730000 	ldrbtvc	r0, [r3], #-0
    3690:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3694:	5f787834 	svcpl	0x00787834
    3698:	6f697067 	svcvs	0x00697067
    369c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    36a0:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    36a4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    36a8:	00000500 	andeq	r0, r0, r0, lsl #10
    36ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    36b0:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    36b4:	645f6939 	ldrbvs	r6, [pc], #-2361	; 36bc <_Min_Stack_Size+0x32bc>
    36b8:	6f637369 	svcvs	0x00637369
    36bc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    36c0:	0100682e 	tsteq	r0, lr, lsr #16
    36c4:	6f630000 	svcvs	0x00630000
    36c8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    36cc:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    36d0:	00000600 	andeq	r0, r0, r0, lsl #12
    36d4:	02050000 	andeq	r0, r5, #0
    36d8:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    36dc:	0100fa03 	tsteq	r0, r3, lsl #20
    36e0:	2f59855c 	svccs	0x0059855c
    36e4:	9f2f2f2f 	svcls	0x002f2f2f
    36e8:	01000a02 	tsteq	r0, r2, lsl #20
    36ec:	02050001 	andeq	r0, r5, #1
    36f0:	08006d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, lr}
    36f4:	01019203 	tsteq	r1, r3, lsl #4
    36f8:	0a029159 	beq	a7c64 <_Min_Stack_Size+0xa7864>
    36fc:	00010100 	andeq	r0, r1, r0, lsl #2
    3700:	6d800205 	sfmvs	f0, 4, [r0, #20]
    3704:	9f030800 	svcls	0x00030800
    3708:	91590101 	cmpls	r9, r1, lsl #2
    370c:	01000a02 	tsteq	r0, r2, lsl #20
    3710:	02050001 	andeq	r0, r5, #1
    3714:	08006db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp, lr}
    3718:	0101ac03 	tsteq	r1, r3, lsl #24
    371c:	0a02e559 	beq	bcc88 <_Min_Stack_Size+0xbc888>
    3720:	00010100 	andeq	r0, r1, r0, lsl #2
    3724:	6dec0205 	sfmvs	f0, 2, [ip, #20]!
    3728:	bc030800 	stclt	8, cr0, [r3], {-0}
    372c:	597a0101 	ldmdbpl	sl!, {r0, r8}^
    3730:	2f2f2f5b 	svccs	0x002f2f5b
    3734:	2f693fa0 	svccs	0x00693fa0
    3738:	5b2f2f2f 	blpl	bcf3fc <_Min_Stack_Size+0xbceffc>
    373c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3740:	0006025a 	andeq	r0, r6, sl, asr r2
    3744:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3748:	006e8002 	rsbeq	r8, lr, r2
    374c:	01e80308 	mvneq	r0, r8, lsl #6
    3750:	029f5901 	addseq	r5, pc, #16384	; 0x4000
    3754:	01010007 	tsteq	r1, r7
    3758:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    375c:	0308006e 	movweq	r0, #32878	; 0x806e
    3760:	400101f2 	strdmi	r0, [r1], -r2
    3764:	3d5c3f4d 	ldclcc	15, cr3, [ip, #-308]	; 0xfffffecc
    3768:	3d5b2f2f 	ldclcc	15, cr2, [fp, #-188]	; 0xffffff44
    376c:	3d3d3d5b 	ldccc	13, cr3, [sp, #-364]!	; 0xfffffe94
    3770:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
    3774:	4b4b3f3d 	blmi	12d3470 <_Min_Stack_Size+0x12d3070>
    3778:	10023d3d 	andne	r3, r2, sp, lsr sp
    377c:	00010100 	andeq	r0, r1, r0, lsl #2
    3780:	6f640205 	svcvs	0x00640205
    3784:	a3030800 	movwge	r0, #14336	; 0x3800
    3788:	5b400102 	blpl	1003b98 <_Min_Stack_Size+0x1003798>
    378c:	5c5a5b4c 	mrrcpl	11, 4, r5, sl, cr12
    3790:	2f2f2f3d 	svccs	0x002f2f3d
    3794:	5b3d5b2f 	blpl	f5a458 <_Min_Stack_Size+0xf5a058>
    3798:	3d3d5b5b 	fldmdbxcc	sp!, {d5-d49}	;@ Deprecated
    379c:	3d3f3d3d 	ldccc	13, cr3, [pc, #-244]!	; 36b0 <_Min_Stack_Size+0x32b0>
    37a0:	5b403d3d 	blpl	1012c9c <_Min_Stack_Size+0x101289c>
    37a4:	4b3d4c4d 	blmi	f568e0 <_Min_Stack_Size+0xf564e0>
    37a8:	4b3d3d3d 	blmi	f52ca4 <_Min_Stack_Size+0xf528a4>
    37ac:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
    37b0:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
    37b4:	4d4d3d3d 	stclmi	13, cr3, [sp, #-244]	; 0xffffff0c
    37b8:	594d3d4c 	stmdbpl	sp, {r2, r3, r6, r8, sl, fp, ip, sp}^
    37bc:	00160259 	andseq	r0, r6, r9, asr r2
    37c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37c4:	0070fc02 	rsbseq	pc, r0, r2, lsl #24
    37c8:	03830308 	orreq	r0, r3, #8, 6	; 0x20000000
    37cc:	3d3f6801 	ldccc	8, cr6, [pc, #-4]!	; 37d0 <_Min_Stack_Size+0x33d0>
    37d0:	3d5d3d3d 	ldclcc	13, cr3, [sp, #-244]	; 0xffffff0c
    37d4:	024c3d3d 	subeq	r3, ip, #3904	; 0xf40
    37d8:	0101000a 	tsteq	r1, sl
    37dc:	000002f3 	strdeq	r0, [r0], -r3
    37e0:	019c0002 	orrseq	r0, ip, r2
    37e4:	01020000 	mrseq	r0, (UNDEF: 2)
    37e8:	000d0efb 	strdeq	r0, [sp], -fp
    37ec:	01010101 	tsteq	r1, r1, lsl #2
    37f0:	01000000 	mrseq	r0, (UNDEF: 0)
    37f4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    37f8:	552f636e 	strpl	r6, [pc, #-878]!	; 3492 <_Min_Stack_Size+0x3092>
    37fc:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    3800:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    3804:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3808:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    380c:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    3810:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    3814:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3818:	752f0079 	strvc	r0, [pc, #-121]!	; 37a7 <_Min_Stack_Size+0x33a7>
    381c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3820:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3824:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3828:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    382c:	616d2f62 	cmnvs	sp, r2, ror #30
    3830:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3834:	752f0065 	strvc	r0, [pc, #-101]!	; 37d7 <_Min_Stack_Size+0x33d7>
    3838:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    383c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3840:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3844:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3848:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    384c:	4f432f63 	svcmi	0x00432f63
    3850:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3854:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3858:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    385c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3860:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3864:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3868:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    386c:	5349534d 	movtpl	r5, #37709	; 0x934d
    3870:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3874:	2f656369 	svccs	0x00656369
    3878:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    387c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3880:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3884:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3888:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    388c:	636e6900 	cmnvs	lr, #0, 18
    3890:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3894:	5f584554 	svcpl	0x00584554
    3898:	5f46344d 	svcpl	0x0046344d
    389c:	334d5453 	movtcc	r5, #54355	; 0xd453
    38a0:	2f344632 	svccs	0x00344632
    38a4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    38a8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    38ac:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    38b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    38b4:	5f787834 	svcpl	0x00787834
    38b8:	50647453 	rsbpl	r7, r4, r3, asr r4
    38bc:	70697265 	rsbvc	r7, r9, r5, ror #4
    38c0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    38c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    38c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    38cc:	636e6900 	cmnvs	lr, #0, 18
    38d0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    38d4:	5f584554 	svcpl	0x00584554
    38d8:	5f46344d 	svcpl	0x0046344d
    38dc:	334d5453 	movtcc	r5, #54355	; 0xd453
    38e0:	2f344632 	svccs	0x00344632
    38e4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    38e8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    38ec:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    38f0:	2f534953 	svccs	0x00534953
    38f4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    38f8:	00656475 	rsbeq	r6, r5, r5, ror r4
    38fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3900:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3904:	5f693932 	svcpl	0x00693932
    3908:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    390c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3910:	64735f79 	ldrbtvs	r5, [r3], #-3961	; 0xf79
    3914:	2e6d6172 	mcrcs	1, 3, r6, cr13, cr2, {3}
    3918:	00010063 	andeq	r0, r1, r3, rrx
    391c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3920:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3924:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3928:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    392c:	00020068 	andeq	r0, r2, r8, rrx
    3930:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3934:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3938:	00030068 	andeq	r0, r3, r8, rrx
    393c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3940:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3944:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3948:	00000400 	andeq	r0, r0, r0, lsl #8
    394c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3950:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3954:	6d665f78 	stclvs	15, cr5, [r6, #-480]!	; 0xfffffe20
    3958:	00682e63 	rsbeq	r2, r8, r3, ror #28
    395c:	73000005 	movwvc	r0, #5
    3960:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3964:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3968:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    396c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3970:	63000005 	movwvs	r0, #5
    3974:	5f65726f 	svcpl	0x0065726f
    3978:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    397c:	00060068 	andeq	r0, r6, r8, rrx
    3980:	05000000 	streq	r0, [r0, #-0]
    3984:	00715802 	rsbseq	r5, r1, r2, lsl #16
    3988:	00c10308 	sbceq	r0, r1, r8, lsl #6
    398c:	50314101 	eorspl	r4, r1, r1, lsl #2
    3990:	30303030 	eorscc	r3, r0, r0, lsr r0
    3994:	30313030 	eorscc	r3, r1, r0, lsr r0
    3998:	2f2f2f30 	svccs	0x002f2f30
    399c:	2f3d2f3d 	svccs	0x003d2f3d
    39a0:	305b313d 	subscc	r3, fp, sp, lsr r1
    39a4:	01000302 	tsteq	r0, r2, lsl #6
    39a8:	02050001 	andeq	r0, r5, #1
    39ac:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
    39b0:	0100fa03 	tsteq	r0, r3, lsl #20
    39b4:	4a1c0340 	bmi	7046bc <_Min_Stack_Size+0x7042bc>
    39b8:	312f2f2f 	teqcc	pc, pc, lsr #30
    39bc:	5b305a59 	blpl	c1a328 <_Min_Stack_Size+0xc19f28>
    39c0:	595b305a 	ldmdbpl	fp, {r1, r3, r4, r6, ip, sp}^
    39c4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    39c8:	5b405a59 	blpl	101a334 <_Min_Stack_Size+0x1019f34>
    39cc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    39d0:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    39d4:	415a5959 	cmpmi	sl, r9, asr r9
    39d8:	5959595b 	ldmdbpl	r9, {r0, r1, r3, r4, r6, r8, fp, ip, lr}^
    39dc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    39e0:	5a595959 	bpl	1659f4c <_Min_Stack_Size+0x1659b4c>
    39e4:	59595b41 	ldmdbpl	r9, {r0, r6, r8, r9, fp, ip, lr}^
    39e8:	5b595959 	blpl	1659f54 <_Min_Stack_Size+0x1659b54>
    39ec:	0f02593f 	svceq	0x0002593f
    39f0:	00010100 	andeq	r0, r1, r0, lsl #2
    39f4:	73e00205 	mvnvc	r0, #1342177280	; 0x50000000
    39f8:	fa030800 	blx	c5a00 <_Min_Stack_Size+0xc5600>
    39fc:	323e0101 	eorscc	r0, lr, #1073741824	; 0x40000000
    3a00:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3a04:	01040200 	mrseq	r0, R12_usr
    3a08:	78062006 	stmdavc	r6, {r1, r2, sp}
    3a0c:	2f2f404e 	svccs	0x002f404e
    3a10:	0200302f 	andeq	r3, r0, #47	; 0x2f
    3a14:	20060104 	andcs	r0, r6, r4, lsl #2
    3a18:	2f4e7806 	svccs	0x004e7806
    3a1c:	00302f2f 	eorseq	r2, r0, pc, lsr #30
    3a20:	06010402 	streq	r0, [r1], -r2, lsl #8
    3a24:	4d780620 	ldclmi	6, cr0, [r8, #-128]!	; 0xffffff80
    3a28:	01040200 	mrseq	r0, R12_usr
    3a2c:	78062006 	stmdavc	r6, {r1, r2, sp}
    3a30:	2f2f434e 	svccs	0x002f434e
    3a34:	0200302f 	andeq	r3, r0, #47	; 0x2f
    3a38:	20060104 	andcs	r0, r6, r4, lsl #2
    3a3c:	4c517806 	mrrcmi	8, 0, r7, r1, cr6
    3a40:	01040200 	mrseq	r0, R12_usr
    3a44:	77062006 	strvc	r2, [r6, -r6]
    3a48:	01000302 	tsteq	r0, r2, lsl #6
    3a4c:	02050001 	andeq	r0, r5, #1
    3a50:	080074cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp, lr}
    3a54:	0102da03 	tsteq	r2, r3, lsl #20
    3a58:	004d3167 	subeq	r3, sp, r7, ror #2
    3a5c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3a60:	00790620 	rsbseq	r0, r9, r0, lsr #12
    3a64:	23020402 	movwcs	r0, #9218	; 0x2402
    3a68:	02040200 	andeq	r0, r4, #0, 4
    3a6c:	04020093 	streq	r0, [r2], #-147	; 0x93
    3a70:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
    3a74:	01040200 	mrseq	r0, R12_usr
    3a78:	03063c06 	movweq	r3, #27654	; 0x6c06
    3a7c:	03023c09 	movweq	r3, #11273	; 0x2c09
    3a80:	00010100 	andeq	r0, r1, r0, lsl #2
    3a84:	75200205 	strvc	r0, [r0, #-517]!	; 0x205
    3a88:	fa030800 	blx	c5a90 <_Min_Stack_Size+0xc5690>
    3a8c:	32670102 	rsbcc	r0, r7, #-2147483648	; 0x80000000
    3a90:	01040200 	mrseq	r0, R12_usr
    3a94:	79062006 	stmdbvc	r6, {r1, r2, sp}
    3a98:	02040200 	andeq	r0, r4, #0, 4
    3a9c:	04020022 	streq	r0, [r2], #-34	; 0x22
    3aa0:	02008502 	andeq	r8, r0, #8388608	; 0x800000
    3aa4:	00370204 	eorseq	r0, r7, r4, lsl #4
    3aa8:	06010402 	streq	r0, [r1], -r2, lsl #8
    3aac:	0243063c 	subeq	r0, r3, #60, 12	; 0x3c00000
    3ab0:	01010003 	tsteq	r1, r3
    3ab4:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    3ab8:	03080075 	movweq	r0, #32885	; 0x8075
    3abc:	4b010394 	blmi	44914 <_Min_Stack_Size+0x44514>
    3ac0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    3ac4:	00660602 	rsbeq	r0, r6, r2, lsl #12
    3ac8:	3c010402 	cfstrscc	mvf0, [r1], {2}
    3acc:	08023f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, ip, sp}
    3ad0:	3d010100 	stfccs	f0, [r1, #-0]
    3ad4:	02000003 	andeq	r0, r0, #3
    3ad8:	0001be00 	andeq	fp, r1, r0, lsl #28
    3adc:	fb010200 	blx	442e6 <_Min_Stack_Size+0x43ee6>
    3ae0:	01000d0e 	tsteq	r0, lr, lsl #26
    3ae4:	00010101 	andeq	r0, r1, r1, lsl #2
    3ae8:	00010000 	andeq	r0, r1, r0
    3aec:	6e690100 	powvse	f0, f1, f0
    3af0:	74552f63 	ldrbvc	r2, [r5], #-3939	; 0xf63
    3af4:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xc69
    3af8:	2f736569 	svccs	0x00736569
    3afc:	334d5453 	movtcc	r5, #54355	; 0xd453
    3b00:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    3b04:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    3b08:	6f637369 	svcvs	0x00637369
    3b0c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3b10:	73752f00 	cmnvc	r5, #0, 30
    3b14:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3b18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3b1c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3b20:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3b24:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3b28:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    3b2c:	73752f00 	cmnvc	r5, #0, 30
    3b30:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3b34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3b38:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3b3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3b40:	636e6900 	cmnvs	lr, #0, 18
    3b44:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3b48:	5f584554 	svcpl	0x00584554
    3b4c:	5f46344d 	svcpl	0x0046344d
    3b50:	334d5453 	movtcc	r5, #54355	; 0xd453
    3b54:	2f344632 	svccs	0x00344632
    3b58:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3b5c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3b60:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3b64:	2f534953 	svccs	0x00534953
    3b68:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3b6c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    3b70:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    3b74:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3b78:	2f787834 	svccs	0x00787834
    3b7c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3b80:	00656475 	rsbeq	r6, r5, r5, ror r4
    3b84:	2f636e69 	svccs	0x00636e69
    3b88:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3b8c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3a80 <_Min_Stack_Size+0x3680>
    3b90:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3b94:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3b98:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3a88 <_Min_Stack_Size+0x3688>
    3b9c:	61726269 	cmnvs	r2, r9, ror #4
    3ba0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3ba4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3ba8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3bac:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3bb0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3bb4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3bb8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3bbc:	2f726576 	svccs	0x00726576
    3bc0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    3bc4:	2f636e69 	svccs	0x00636e69
    3bc8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3bcc:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3ac0 <_Min_Stack_Size+0x36c0>
    3bd0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3bd4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3bd8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3ac8 <_Min_Stack_Size+0x36c8>
    3bdc:	61726269 	cmnvs	r2, r9, ror #4
    3be0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3be4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3be8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    3bec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3bf0:	00006564 	andeq	r6, r0, r4, ror #10
    3bf4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3bf8:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3bfc:	645f6939 	ldrbvs	r6, [pc], #-2361	; 3c04 <_Min_Stack_Size+0x3804>
    3c00:	6f637369 	svcvs	0x00637369
    3c04:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3c08:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    3c0c:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    3c10:	00010063 	andeq	r0, r1, r3, rrx
    3c14:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3c18:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3c1c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c20:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3c24:	00020068 	andeq	r0, r2, r8, rrx
    3c28:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3c2c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3c30:	00030068 	andeq	r0, r3, r8, rrx
    3c34:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3c38:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3c3c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3c40:	00000400 	andeq	r0, r0, r0, lsl #8
    3c44:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3c48:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3c4c:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3c50:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3c54:	00000500 	andeq	r0, r0, r0, lsl #10
    3c58:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3c5c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3c60:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    3c64:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3c68:	73000005 	movwvc	r0, #5
    3c6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3c70:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    3c74:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c78:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3c7c:	5f797265 	svcpl	0x00797265
    3c80:	6467336c 	strbtvs	r3, [r7], #-876	; 0x36c
    3c84:	682e3032 	stmdavs	lr!, {r1, r4, r5, ip, sp}
    3c88:	00000100 	andeq	r0, r0, r0, lsl #2
    3c8c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3c90:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3c94:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	75a00205 	strvc	r0, [r0, #517]!	; 0x205
    3ca0:	e2030800 	and	r0, r3, #0, 16
    3ca4:	4d4b0100 	stfmie	f0, [fp, #-0]
    3ca8:	2f2d6731 	svccs	0x002d6731
    3cac:	2d67692d 	stclcs	9, cr6, [r7, #-180]!	; 0xffffff4c
    3cb0:	0275776a 	rsbseq	r7, r5, #27787264	; 0x1a80000
    3cb4:	01010003 	tsteq	r1, r3
    3cb8:	18020500 	stmdane	r2, {r8, sl}
    3cbc:	03080076 	movweq	r0, #32886	; 0x8076
    3cc0:	400100fc 	strdmi	r0, [r1], -ip
    3cc4:	02675b69 	rsbeq	r5, r7, #107520	; 0x1a400
    3cc8:	01010003 	tsteq	r1, r3
    3ccc:	48020500 	stmdami	r2, {r8, sl}
    3cd0:	03080076 	movweq	r0, #32886	; 0x8076
    3cd4:	4b010190 	blmi	4431c <_Min_Stack_Size+0x43f1c>
    3cd8:	5a76774d 	bpl	1da1a14 <_Min_Stack_Size+0x1da1614>
    3cdc:	692d2f5b 	pushvs	{r0, r1, r3, r4, r6, r8, r9, sl, fp, sp}
    3ce0:	02757769 	rsbseq	r7, r5, #27525120	; 0x1a40000
    3ce4:	01010003 	tsteq	r1, r3
    3ce8:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    3cec:	03080076 	movweq	r0, #32886	; 0x8076
    3cf0:	5c0101b3 	stfpls	f0, [r1], {179}	; 0xb3
    3cf4:	755b5976 	ldrbvc	r5, [fp, #-2422]	; 0x976
    3cf8:	01000302 	tsteq	r0, r2, lsl #6
    3cfc:	02050001 	andeq	r0, r5, #1
    3d00:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
    3d04:	0101c903 	tsteq	r1, r3, lsl #18
    3d08:	5b59765c 	blpl	1661680 <_Min_Stack_Size+0x1661280>
    3d0c:	00030275 	andeq	r0, r3, r5, ror r2
    3d10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d14:	00774c02 	rsbseq	r4, r7, r2, lsl #24
    3d18:	01dd0308 	bicseq	r0, sp, r8, lsl #6
    3d1c:	5b764e01 	blpl	1d97528 <_Min_Stack_Size+0x1d97128>
    3d20:	756a2d2f 	strbvc	r2, [sl, #-3375]!	; 0xd2f
    3d24:	01000302 	tsteq	r0, r2, lsl #6
    3d28:	02050001 	andeq	r0, r5, #1
    3d2c:	08007794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, lr}
    3d30:	0101f603 	tsteq	r1, r3, lsl #12
    3d34:	5b5a765c 	blpl	16a16ac <_Min_Stack_Size+0x16a12ac>
    3d38:	00030275 	andeq	r0, r3, r5, ror r2
    3d3c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d40:	0077d402 	rsbseq	sp, r7, r2, lsl #8
    3d44:	028a0308 	addeq	r0, sl, #8, 6	; 0x20000000
    3d48:	21684001 	cmncs	r8, r1
    3d4c:	01000402 	tsteq	r0, r2, lsl #8
    3d50:	02050001 	andeq	r0, r5, #1
    3d54:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    3d58:	01029b03 	tsteq	r2, r3, lsl #22
    3d5c:	4d4d3e87 	stclmi	14, cr3, [sp, #-540]	; 0xfffffde4
    3d60:	3d59224d 	lfmcc	f2, 2, [r9, #-308]	; 0xfffffecc
    3d64:	01040200 	mrseq	r0, R12_usr
    3d68:	024b4438 	subeq	r4, fp, #56, 8	; 0x38000000
    3d6c:	01010006 	tsteq	r1, r6
    3d70:	50020500 	andpl	r0, r2, r0, lsl #10
    3d74:	03080078 	movweq	r0, #32888	; 0x8078
    3d78:	830102be 	movwhi	r0, #4798	; 0x12be
    3d7c:	4d4d5c3e 	stclmi	12, cr5, [sp, #-248]	; 0xffffff08
    3d80:	3d75234d 	ldclcc	3, cr2, [r5, #-308]!	; 0xfffffecc
    3d84:	01040200 	mrseq	r0, R12_usr
    3d88:	3c090337 	stccc	3, cr0, [r9], {55}	; 0x37
    3d8c:	0005024b 	andeq	r0, r5, fp, asr #4
    3d90:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d94:	0078bc02 	rsbseq	fp, r8, r2, lsl #24
    3d98:	02e00308 	rsceq	r0, r0, #8, 6	; 0x20000000
    3d9c:	4d5b4101 	ldfmie	f4, [fp, #-4]
    3da0:	594c4d4d 	stmdbpl	ip, {r0, r2, r3, r6, r8, sl, fp, lr}^
    3da4:	2f2f5a59 	svccs	0x002f5a59
    3da8:	692f312f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3dac:	693d693d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, fp, sp, lr}
    3db0:	2f3d2f3d 	svccs	0x003d2f3d
    3db4:	2f432f2f 	svccs	0x00432f2f
    3db8:	4d5b2f2f 	ldclmi	15, cr2, [fp, #-188]	; 0xffffff44
    3dbc:	2f2f2f2f 	svccs	0x002f2f2f
    3dc0:	2f4d692f 	svccs	0x004d692f
    3dc4:	2f682f2f 	svccs	0x00682f2f
    3dc8:	000b0267 	andeq	r0, fp, r7, ror #4
    3dcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3dd0:	0079f402 	rsbseq	pc, r9, r2, lsl #8
    3dd4:	03ba0308 			; <UNDEFINED> instruction: 0x03ba0308
    3dd8:	224b5a01 	subcs	r5, fp, #4096	; 0x1000
    3ddc:	01040200 	mrseq	r0, R12_usr
    3de0:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    3de4:	56060104 	strpl	r0, [r6], -r4, lsl #2
    3de8:	224b687a 	subcs	r6, fp, #7995392	; 0x7a0000
    3dec:	01040200 	mrseq	r0, R12_usr
    3df0:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    3df4:	56060104 	strpl	r0, [r6], -r4, lsl #2
    3df8:	0802597a 	stmdaeq	r2, {r1, r3, r4, r5, r6, r8, fp, ip, lr}
    3dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    3e00:	7a840205 	bvc	fe10461c <_estack+0xde0d461c>
    3e04:	d6030800 	strle	r0, [r3], -r0, lsl #16
    3e08:	02000103 	andeq	r0, r0, #-1073741824	; 0xc0000000
    3e0c:	02320104 	eorseq	r0, r2, #4, 2
    3e10:	01010001 	tsteq	r1, r1
    3e14:	000009cd 	andeq	r0, r0, sp, asr #19
    3e18:	02240002 	eoreq	r0, r4, #2
    3e1c:	01020000 	mrseq	r0, (UNDEF: 2)
    3e20:	000d0efb 	strdeq	r0, [sp], -fp
    3e24:	01010101 	tsteq	r1, r1, lsl #2
    3e28:	01000000 	mrseq	r0, (UNDEF: 0)
    3e2c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3e30:	552f636e 	strpl	r6, [pc, #-878]!	; 3aca <_Min_Stack_Size+0x36ca>
    3e34:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    3e38:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    3e3c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3e40:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3e44:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    3e48:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    3e4c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3e50:	752f0079 	strvc	r0, [pc, #-121]!	; 3ddf <_Min_Stack_Size+0x39df>
    3e54:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3e58:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3e5c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3e60:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3e64:	616d2f62 	cmnvs	sp, r2, ror #30
    3e68:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3e6c:	752f0065 	strvc	r0, [pc, #-101]!	; 3e0f <_Min_Stack_Size+0x3a0f>
    3e70:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3e74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3e78:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3e7c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3e80:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
    3e84:	4f432f63 	svcmi	0x00432f63
    3e88:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3e8c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3e90:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3e94:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3e98:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3e9c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3ea0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3ea4:	5349534d 	movtpl	r5, #37709	; 0x934d
    3ea8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3eac:	2f656369 	svccs	0x00656369
    3eb0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    3eb4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3eb8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3ebc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3ec0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3ec4:	636e6900 	cmnvs	lr, #0, 18
    3ec8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3ecc:	5f584554 	svcpl	0x00584554
    3ed0:	5f46344d 	svcpl	0x0046344d
    3ed4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3ed8:	2f344632 	svccs	0x00344632
    3edc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3ee0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3ee4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3ee8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3eec:	5f787834 	svcpl	0x00787834
    3ef0:	50647453 	rsbpl	r7, r4, r3, asr r4
    3ef4:	70697265 	rsbvc	r7, r9, r5, ror #4
    3ef8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3efc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3f00:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3f04:	636e6900 	cmnvs	lr, #0, 18
    3f08:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    3f0c:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    3f10:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3f14:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3f18:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    3f1c:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    3f20:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3f24:	2f797265 	svccs	0x00797265
    3f28:	432f2e2e 	teqmi	pc, #736	; 0x2e0
    3f2c:	6f6d6d6f 	svcvs	0x006d6d6f
    3f30:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
    3f34:	4f432f63 	svcmi	0x00432f63
    3f38:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3f3c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3f40:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3f44:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3f48:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3f4c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3f50:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3f54:	5349534d 	movtpl	r5, #37709	; 0x934d
    3f58:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3f5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3f60:	74730000 	ldrbtvc	r0, [r3], #-0
    3f64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3f68:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    3f6c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    3f70:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3f74:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    3f78:	632e6463 	teqvs	lr, #1660944384	; 0x63000000
    3f7c:	00000100 	andeq	r0, r0, r0, lsl #2
    3f80:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3f84:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3f88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3f8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3f90:	00000200 	andeq	r0, r0, r0, lsl #4
    3f94:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3f98:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3f9c:	00000300 	andeq	r0, r0, r0, lsl #6
    3fa0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3fa4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3fa8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3fac:	73000004 	movwvc	r0, #4
    3fb0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3fb4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3fb8:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    3fbc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3fc0:	73000005 	movwvc	r0, #5
    3fc4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3fc8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3fcc:	616d645f 	cmnvs	sp, pc, asr r4
    3fd0:	682e6432 	stmdavs	lr!, {r1, r4, r5, sl, sp, lr}
    3fd4:	00000500 	andeq	r0, r0, r0, lsl #10
    3fd8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3fdc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3fe0:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3fe4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3fe8:	00000500 	andeq	r0, r0, r0, lsl #10
    3fec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ff0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3ff4:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    3ff8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3ffc:	66000005 	strvs	r0, [r0], -r5
    4000:	73746e6f 	cmnvc	r4, #1776	; 0x6f0
    4004:	0600682e 	streq	r6, [r0], -lr, lsr #16
    4008:	74730000 	ldrbtvc	r0, [r3], #-0
    400c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4010:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    4014:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    4018:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    401c:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    4020:	682e6463 	stmdavs	lr!, {r0, r1, r5, r6, sl, sp, lr}
    4024:	00000100 	andeq	r0, r0, r0, lsl #2
    4028:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    402c:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    4030:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    4034:	6f660000 	svcvs	0x00660000
    4038:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    403c:	00060063 	andeq	r0, r6, r3, rrx
    4040:	05000000 	streq	r0, [r0, #-0]
    4044:	007a8c02 	rsbseq	r8, sl, r2, lsl #24
    4048:	00f20308 	rscseq	r0, r2, r8, lsl #6
    404c:	4d314001 	ldcmi	0, cr4, [r1, #-4]!
    4050:	2f2f5b3f 	svccs	0x002f5b3f
    4054:	5a2f5b2f 	bpl	bdad18 <_Min_Stack_Size+0xbda918>
    4058:	5b3d5a3d 	blpl	f5a954 <_Min_Stack_Size+0xf5a554>
    405c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4060:	2f2f3e5a 	svccs	0x002f3e5a
    4064:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    4068:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    406c:	2f2f3e5a 	svccs	0x002f3e5a
    4070:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    4074:	2f3d5a59 	svccs	0x003d5a59
    4078:	5b2f2f2f 	blpl	bcfd3c <_Min_Stack_Size+0xbcf93c>
    407c:	2f2f5a59 	svccs	0x002f5a59
    4080:	5b2f2f2f 	blpl	bcfd44 <_Min_Stack_Size+0xbcf944>
    4084:	2f2f3d5a 	svccs	0x002f3d5a
    4088:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    408c:	5a595959 	bpl	165a5f8 <_Min_Stack_Size+0x165a1f8>
    4090:	2f2f2f3e 	svccs	0x002f2f3e
    4094:	1202592f 	andne	r5, r2, #770048	; 0xbc000
    4098:	00010100 	andeq	r0, r1, r0, lsl #2
    409c:	7cb00205 	lfmvc	f0, 4, [r0], #20
    40a0:	e7030800 	str	r0, [r3, -r0, lsl #16]
    40a4:	2f400101 	svccs	0x00400101
    40a8:	31313f3d 	teqcc	r1, sp, lsr pc
    40ac:	33315b5b 	teqcc	r1, #93184	; 0x16c00
    40b0:	31303030 	teqcc	r0, r0, lsr r0
    40b4:	59362f2f 	ldmdbpl	r6!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    40b8:	02003e4d 	andeq	r3, r0, #1232	; 0x4d0
    40bc:	20060104 	andcs	r0, r6, r4, lsl #2
    40c0:	30306c06 	eorscc	r6, r0, r6, lsl #24
    40c4:	3e3e3030 	mrccc	0, 1, r3, cr14, cr0, {1}
    40c8:	024b3e3e 	subeq	r3, fp, #992	; 0x3e0
    40cc:	01010003 	tsteq	r1, r3
    40d0:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    40d4:	0308007d 	movweq	r0, #32893	; 0x807d
    40d8:	030102bc 	movweq	r0, #4796	; 0x12bc
    40dc:	3d2f3c09 	stccc	12, cr3, [pc, #-36]!	; 40c0 <_Min_Stack_Size+0x3cc0>
    40e0:	30303f2f 	eorscc	r3, r0, pc, lsr #30
    40e4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    40e8:	3f40353d 	svccc	0x0040353d
    40ec:	315c3f3f 	cmpcc	ip, pc, lsr pc
    40f0:	3f5b313d 	svccc	0x005b313d
    40f4:	3f3f4d4b 	svccc	0x003f4d4b
    40f8:	000b023d 	andeq	r0, fp, sp, lsr r2
    40fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4100:	007e1802 	rsbseq	r1, lr, r2, lsl #16
    4104:	038d0308 	orreq	r0, sp, #8, 6	; 0x20000000
    4108:	5c3e5901 	ldcpl	9, cr5, [lr], #-4
    410c:	0005024c 	andeq	r0, r5, ip, asr #4
    4110:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4114:	007e4402 	rsbseq	r4, lr, r2, lsl #8
    4118:	039e0308 	orrseq	r0, lr, #8, 6	; 0x20000000
    411c:	4b3e4b01 	blmi	f96d28 <_Min_Stack_Size+0xf96928>
    4120:	023e3d4e 	eorseq	r3, lr, #4992	; 0x1380
    4124:	0101000b 	tsteq	r1, fp
    4128:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    412c:	0308007e 	movweq	r0, #32894	; 0x807e
    4130:	750103b2 	strvc	r0, [r1, #-946]	; 0x3b2
    4134:	09023d3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    4138:	00010100 	andeq	r0, r1, r0, lsl #2
    413c:	7eb00205 	cdpvc	2, 11, cr0, cr0, cr5, {0}
    4140:	c0030800 	andgt	r0, r3, r0, lsl #16
    4144:	4b590103 	blmi	1644558 <_Min_Stack_Size+0x1644158>
    4148:	0009024b 	andeq	r0, r9, fp, asr #4
    414c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4150:	007edc02 	rsbseq	sp, lr, r2, lsl #24
    4154:	03cb0308 	biceq	r0, fp, #8, 6	; 0x20000000
    4158:	023d5901 	eorseq	r5, sp, #16384	; 0x4000
    415c:	01010008 	tsteq	r1, r8
    4160:	fc020500 	stc2	5, cr0, [r2], {-0}
    4164:	0308007e 	movweq	r0, #32894	; 0x807e
    4168:	590103d5 	stmdbpl	r1, {r0, r2, r4, r6, r7, r8, r9}
    416c:	0008023d 	andeq	r0, r8, sp, lsr r2
    4170:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4174:	007f1c02 	rsbseq	r1, pc, r2, lsl #24
    4178:	03df0308 	bicseq	r0, pc, #8, 6	; 0x20000000
    417c:	023d4b01 	eorseq	r4, sp, #1024	; 0x400
    4180:	01010007 	tsteq	r1, r7
    4184:	38020500 	stmdacc	r2, {r8, sl}
    4188:	0308007f 	movweq	r0, #32895	; 0x807f
    418c:	590103ea 	stmdbpl	r1, {r1, r3, r5, r6, r7, r8, r9}
    4190:	3d5a6a4c 	vldrcc	s13, [sl, #-304]	; 0xfffffed0
    4194:	01000902 	tsteq	r0, r2, lsl #18
    4198:	02050001 	andeq	r0, r5, #1
    419c:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
    41a0:	0103fc03 	tsteq	r3, r3, lsl #24
    41a4:	08022f2f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    41a8:	00010100 	andeq	r0, r1, r0, lsl #2
    41ac:	7f900205 	svcvc	0x00900205
    41b0:	8a030800 	bhi	c61b8 <_Min_Stack_Size+0xc5db8>
    41b4:	30590104 	subscc	r0, r9, r4, lsl #2
    41b8:	02007623 	andeq	r7, r0, #36700160	; 0x2300000
    41bc:	00610104 	rsbeq	r0, r1, r4, lsl #2
    41c0:	06020402 	streq	r0, [r2], -r2, lsl #8
    41c4:	02b3063c 	adcseq	r0, r3, #60, 12	; 0x3c00000
    41c8:	01010005 	tsteq	r1, r5
    41cc:	e0020500 	and	r0, r2, r0, lsl #10
    41d0:	0308007f 	movweq	r0, #32895	; 0x807f
    41d4:	5901049c 	stmdbpl	r1, {r2, r3, r4, r7, sl}
    41d8:	04020031 	streq	r0, [r2], #-49	; 0x31
    41dc:	02003e02 	andeq	r3, r0, #2, 28
    41e0:	00720204 	rsbseq	r0, r2, r4, lsl #4
    41e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    41e8:	024e063c 	subeq	r0, lr, #60, 12	; 0x3c00000
    41ec:	01010008 	tsteq	r1, r8
    41f0:	20020500 	andcs	r0, r2, r0, lsl #10
    41f4:	03080080 	movweq	r0, #32896	; 0x8080
    41f8:	750104ad 	strvc	r0, [r1, #-1197]	; 0x4ad
    41fc:	000902bb 			; <UNDEFINED> instruction: 0x000902bb
    4200:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4204:	00805802 	addeq	r5, r0, r2, lsl #16
    4208:	04b70308 	ldrteq	r0, [r7], #776	; 0x308
    420c:	593d4e01 	ldmdbpl	sp!, {r0, r9, sl, fp, lr}
    4210:	4f754d5a 	svcmi	0x00754d5a
    4214:	0a023e75 	beq	93bf0 <_Min_Stack_Size+0x937f0>
    4218:	00010100 	andeq	r0, r1, r0, lsl #2
    421c:	80c00205 	sbchi	r0, r0, r5, lsl #4
    4220:	d3030800 	movwle	r0, #14336	; 0x3800
    4224:	4d3f0104 	ldfmis	f0, [pc, #-16]!	; 421c <_Min_Stack_Size+0x3e1c>
    4228:	3e674f67 	cdpcc	15, 6, cr4, cr7, cr7, {3}
    422c:	01000a02 	tsteq	r0, r2, lsl #20
    4230:	02050001 	andeq	r0, r5, #1
    4234:	08008108 	stmdaeq	r0, {r3, r8, pc}
    4238:	0104ec03 	tsteq	r4, r3, lsl #24
    423c:	67306783 	ldrvs	r6, [r0, -r3, lsl #15]!
    4240:	003f3f4c 	eorseq	r3, pc, ip, asr #30
    4244:	06010402 	streq	r0, [r1], -r2, lsl #8
    4248:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
    424c:	59060204 	stmdbpl	r6, {r2, r9}
    4250:	02040200 	andeq	r0, r4, #0, 4
    4254:	b15b2fab 	cmplt	fp, fp, lsr #31
    4258:	3c7203a0 	ldclcc	3, cr0, [r2], #-640	; 0xfffffd80
    425c:	01040200 	mrseq	r0, R12_usr
    4260:	03063c06 	movweq	r3, #27654	; 0x6c06
    4264:	6d037410 	cfstrsvs	mvf7, [r3, #-64]	; 0xffffffc0
    4268:	04020074 	streq	r0, [r2], #-116	; 0x74
    426c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4270:	02741503 	rsbseq	r1, r4, #12582912	; 0xc00000
    4274:	0101000f 	tsteq	r1, pc
    4278:	28020500 	stmdacs	r2, {r8, sl}
    427c:	03080082 	movweq	r0, #32898	; 0x8082
    4280:	91010594 			; <UNDEFINED> instruction: 0x91010594
    4284:	0221083e 	eoreq	r0, r1, #4063232	; 0x3e0000
    4288:	01010006 	tsteq	r1, r6
    428c:	70020500 	andvc	r0, r2, r0, lsl #10
    4290:	03080082 	movweq	r0, #32898	; 0x8082
    4294:	670105a3 	strvs	r0, [r1, -r3, lsr #11]
    4298:	68922330 	ldmvs	r2, {r4, r5, r8, r9, sp}
    429c:	01040200 	mrseq	r0, R12_usr
    42a0:	003c7903 	eorseq	r7, ip, r3, lsl #18
    42a4:	06020402 	streq	r0, [r2], -r2, lsl #8
    42a8:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
    42ac:	05028208 	streq	r8, [r2, #-520]	; 0x208
    42b0:	00010100 	andeq	r0, r1, r0, lsl #2
    42b4:	82e80205 	rschi	r0, r8, #1342177280	; 0x50000000
    42b8:	ba030800 	blt	c62c0 <_Min_Stack_Size+0xc5ec0>
    42bc:	4d760105 	ldfmie	f0, [r6, #-20]!	; 0xffffffec
    42c0:	4f753f75 	svcmi	0x00753f75
    42c4:	3e753f75 	mrccc	15, 3, r3, cr5, cr5, {3}
    42c8:	01000a02 	tsteq	r0, r2, lsl #20
    42cc:	02050001 	andeq	r0, r5, #1
    42d0:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
    42d4:	0105d803 	tsteq	r5, r3, lsl #16
    42d8:	0102752f 	tsteq	r2, pc, lsr #10
    42dc:	00010100 	andeq	r0, r1, r0, lsl #2
    42e0:	83780205 	cmnhi	r8, #1342177280	; 0x50000000
    42e4:	e6030800 	str	r0, [r3], -r0, lsl #16
    42e8:	2f770105 	svccs	0x00770105
    42ec:	594bd868 	stmdbpl	fp, {r3, r5, r6, fp, ip, lr, pc}^
    42f0:	2f3d2f77 	svccs	0x003d2f77
    42f4:	2f2f2f2f 	svccs	0x002f2f2f
    42f8:	2f2f3e30 	svccs	0x002f3e30
    42fc:	312f2f40 	teqcc	pc, r0, asr #30
    4300:	0200305a 	andeq	r3, r0, #90	; 0x5a
    4304:	20060104 	andcs	r0, r6, r4, lsl #2
    4308:	08026a06 	stmdaeq	r2, {r1, r2, r9, fp, sp, lr}
    430c:	00010100 	andeq	r0, r1, r0, lsl #2
    4310:	84400205 	strbhi	r0, [r0], #-517	; 0x205
    4314:	9c030800 	stcls	8, cr0, [r3], {-0}
    4318:	91760106 	cmnls	r6, r6, lsl #2
    431c:	02bb91bd 	adcseq	r9, fp, #1073741871	; 0x4000002f
    4320:	01010003 	tsteq	r1, r3
    4324:	a8020500 	stmdage	r2, {r8, sl}
    4328:	03080084 	movweq	r0, #32900	; 0x8084
    432c:	910106ae 	smlatbls	r1, lr, r6, r0
    4330:	082f08bc 	stmdaeq	pc!, {r2, r3, r4, r5, r7, fp}	; <UNPREDICTABLE>
    4334:	082f082f 	stmdaeq	pc!, {r0, r1, r2, r3, r5, fp}	; <UNPREDICTABLE>
    4338:	914b2f30 	cmpls	fp, r0, lsr pc
    433c:	01040200 	mrseq	r0, R12_usr
    4340:	68065806 	stmdavs	r6, {r1, r2, fp, ip, lr}
    4344:	01040200 	mrseq	r0, R12_usr
    4348:	92064a06 	andls	r4, r6, #24576	; 0x6000
    434c:	0009023d 	andeq	r0, r9, sp, lsr r2
    4350:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4354:	0085d002 	addeq	sp, r5, r2
    4358:	06c90308 	strbeq	r0, [r9], r8, lsl #6
    435c:	92bb7501 	adcsls	r7, fp, #4194304	; 0x400000
    4360:	835c7675 	cmphi	ip, #122683392	; 0x7500000
    4364:	02133002 	andseq	r3, r3, #2
    4368:	4c2f1430 	cfstrsmi	mvf1, [pc], #-192	; 42b0 <_Min_Stack_Size+0x3eb0>
    436c:	04020091 	streq	r0, [r2], #-145	; 0x91
    4370:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    4374:	04020068 	streq	r0, [r2], #-104	; 0x68
    4378:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    437c:	313d5c93 			; <UNDEFINED> instruction: 0x313d5c93
    4380:	13300283 	teqne	r0, #805306376	; 0x30000008
    4384:	2f143002 	svccs	0x00143002
    4388:	0200914c 	andeq	r9, r0, #76, 2
    438c:	58060104 	stmdapl	r6, {r2, r8}
    4390:	02006806 	andeq	r6, r0, #393216	; 0x60000
    4394:	4a060104 	bmi	1847ac <_Min_Stack_Size+0x1843ac>
    4398:	024c9206 	subeq	r9, ip, #1610612736	; 0x60000000
    439c:	01010003 	tsteq	r1, r3
    43a0:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    43a4:	03080088 	movweq	r0, #32904	; 0x8088
    43a8:	75010782 	strvc	r0, [r1, #-1922]	; 0x782
    43ac:	767592bb 			; <UNDEFINED> instruction: 0x767592bb
    43b0:	f308835b 	vcge.u8	q4, q4, <illegal reg q5.5>
    43b4:	e508f308 	str	pc, [r8, #-776]	; 0x308
    43b8:	4b2fe608 	blmi	bfdbe0 <_Min_Stack_Size+0xbfd7e0>
    43bc:	04020091 	streq	r0, [r2], #-145	; 0x91
    43c0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    43c4:	04020068 	streq	r0, [r2], #-104	; 0x68
    43c8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    43cc:	303d5c92 	mlascc	sp, r2, ip, r5
    43d0:	08e50883 	stmiaeq	r5!, {r0, r1, r7, fp}^
    43d4:	08f308f3 	ldmeq	r3!, {r0, r1, r4, r5, r6, r7, fp}^
    43d8:	914b2fe6 	smlalttls	r2, fp, r6, pc	; <UNPREDICTABLE>
    43dc:	01040200 	mrseq	r0, R12_usr
    43e0:	68065806 	stmdavs	r6, {r1, r2, fp, ip, lr}
    43e4:	01040200 	mrseq	r0, R12_usr
    43e8:	92064a06 	andls	r4, r6, #24576	; 0x6000
    43ec:	0009024c 	andeq	r0, r9, ip, asr #4
    43f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    43f4:	008bdc02 	addeq	sp, fp, r2, lsl #24
    43f8:	07b70308 	ldreq	r0, [r7, r8, lsl #6]!
    43fc:	3e4d4b01 	vmlacc.f64	d20, d13, d1
    4400:	036abc3e 	cmneq	sl, #15872	; 0x3e00
    4404:	02005878 	andeq	r5, r0, #120, 16	; 0x780000
    4408:	3c060104 	stfccs	f0, [r6], {4}
    440c:	02003a06 	andeq	r3, r0, #24576	; 0x6000
    4410:	3c060104 	stfccs	f0, [r6], {4}
    4414:	4a0e0306 	bmi	385034 <_Min_Stack_Size+0x384c34>
    4418:	01000c02 	tsteq	r0, r2, lsl #24
    441c:	02050001 	andeq	r0, r5, #1
    4420:	08008c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, pc}
    4424:	0107d103 	tsteq	r7, r3, lsl #2
    4428:	3f4ca04b 	svccc	0x004ca04b
    442c:	85598559 	ldrbhi	r8, [r9, #-1369]	; 0x559
    4430:	774b774b 	strbvc	r7, [fp, -fp, asr #14]
    4434:	3f594d4c 	svccc	0x00594d4c
    4438:	4c4c4b4c 	mcrrmi	11, 4, r4, ip, cr12
    443c:	504b4e4b 	subpl	r4, fp, fp, asr #28
    4440:	4b4c3f59 	blmi	13141ac <_Min_Stack_Size+0x1313dac>
    4444:	4e4b4c4c 	cdpmi	12, 4, cr4, cr11, cr12, {2}
    4448:	4d4d414b 	stfmie	f4, [sp, #-300]	; 0xfffffed4
    444c:	3d5b3ebc 	ldclcc	14, cr3, [fp, #-752]	; 0xfffffd10
    4450:	4c843e3d 	stcmi	14, cr3, [r4], {61}	; 0x3d
    4454:	7103913d 	tstvc	r3, sp, lsr r1
    4458:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    445c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4460:	024a1303 	subeq	r1, sl, #201326592	; 0xc000000
    4464:	0101000c 	tsteq	r1, ip
    4468:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    446c:	0308008e 	movweq	r0, #32910	; 0x808e
    4470:	770108c1 	strvc	r0, [r1, -r1, asr #17]
    4474:	594b682f 	stmdbpl	fp, {r0, r1, r2, r3, r5, fp, sp, lr}^
    4478:	3d2fd976 	stccc	9, cr13, [pc, #-472]!	; 42a8 <_Min_Stack_Size+0x3ea8>
    447c:	2f2f2f2f 	svccs	0x002f2f2f
    4480:	2f4b2f2f 	svccs	0x004b2f2f
    4484:	00315b2f 	eorseq	r5, r1, pc, lsr #22
    4488:	06010402 	streq	r0, [r1], -r2, lsl #8
    448c:	596a0620 	stmdbpl	sl!, {r5, r9, sl}^
    4490:	01000702 	tsteq	r0, r2, lsl #14
    4494:	02050001 	andeq	r0, r5, #1
    4498:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
    449c:	0108ee03 	tsteq	r8, r3, lsl #28
    44a0:	302f5a95 	mlacc	pc, r5, sl, r5	; <UNPREDICTABLE>
    44a4:	3d083e22 	stccc	14, cr3, [r8, #-136]	; 0xffffff78
    44a8:	083e3f08 	ldmdaeq	lr!, {r3, r8, r9, sl, fp, ip, sp}
    44ac:	3e3e083d 	mrccc	8, 1, r0, cr14, cr13, {1}
    44b0:	003e8378 	eorseq	r8, lr, r8, ror r3
    44b4:	03010402 	movweq	r0, #5122	; 0x1402
    44b8:	19033c6a 	stmdbne	r3, {r1, r3, r5, r6, sl, fp, ip, sp}
    44bc:	0302834a 	movweq	r8, #9034	; 0x234a
    44c0:	00010100 	andeq	r0, r1, r0, lsl #2
    44c4:	90140205 	andsls	r0, r4, r5, lsl #4
    44c8:	9d030800 	stcls	8, cr0, [r3, #-0]
    44cc:	bb750109 	bllt	1d448f8 <_Min_Stack_Size+0x1d444f8>
    44d0:	757530bb 	ldrbvc	r3, [r5, #-187]!	; 0xbb
    44d4:	2f4c302f 	svccs	0x004c302f
    44d8:	4c3f3d40 	ldcmi	13, cr3, [pc], #-256	; 43e0 <_Min_Stack_Size+0x3fe0>
    44dc:	3f3d402f 	svccc	0x003d402f
    44e0:	2f2f2f68 	svccs	0x002f2f68
    44e4:	2f402f67 	svccs	0x00402f67
    44e8:	2f672f2f 	svccs	0x00672f2f
    44ec:	59833e31 	stmibpl	r3, {r0, r4, r5, r9, sl, fp, ip, sp}
    44f0:	5a595968 	bpl	165aa98 <_Min_Stack_Size+0x165a698>
    44f4:	58750359 	ldmdapl	r5!, {r0, r3, r4, r6, r8, r9}^
    44f8:	01040200 	mrseq	r0, R12_usr
    44fc:	03063c06 	movweq	r3, #27654	; 0x6c06
    4500:	0302660d 	movweq	r6, #9741	; 0x260d
    4504:	00010100 	andeq	r0, r1, r0, lsl #2
    4508:	917c0205 	cmnls	ip, r5, lsl #4
    450c:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    4510:	4b670109 	blmi	19c493c <_Min_Stack_Size+0x19c453c>
    4514:	22233e30 	eorcs	r3, r3, #48, 28	; 0x300
    4518:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
    451c:	99010402 	stmdbls	r1, {r1, sl}
    4520:	0302d76d 	movweq	sp, #10093	; 0x276d
    4524:	00010100 	andeq	r0, r1, r0, lsl #2
    4528:	91f40205 	mvnsls	r0, r5, lsl #4
    452c:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    4530:	bb760109 	bllt	1d8495c <_Min_Stack_Size+0x1d8455c>
    4534:	757530bb 	ldrbvc	r3, [r5, #-187]!	; 0xbb
    4538:	2f4c302f 	svccs	0x004c302f
    453c:	4c3f3d40 	ldcmi	13, cr3, [pc], #-256	; 4444 <_Min_Stack_Size+0x4044>
    4540:	3f3d402f 	svccc	0x003d402f
    4544:	2f2f2f68 	svccs	0x002f2f68
    4548:	2f402f67 	svccs	0x00402f67
    454c:	2f672f2f 	svccs	0x00672f2f
    4550:	59683e31 	stmdbpl	r8!, {r0, r4, r5, r9, sl, fp, ip, sp}^
    4554:	5a595968 	bpl	165aafc <_Min_Stack_Size+0x165a6fc>
    4558:	58740359 	ldmdapl	r4!, {r0, r3, r4, r6, r8, r9}^
    455c:	01040200 	mrseq	r0, R12_usr
    4560:	03063c06 	movweq	r3, #27654	; 0x6c06
    4564:	03026610 	movweq	r6, #9744	; 0x2610
    4568:	00010100 	andeq	r0, r1, r0, lsl #2
    456c:	93580205 	cmpls	r8, #1342177280	; 0x50000000
    4570:	cb030800 	blgt	c6578 <_Min_Stack_Size+0xc6178>
    4574:	4c67010a 	stfmie	f0, [r7], #-40	; 0xffffffd8
    4578:	3d22233e 	stccc	3, cr2, [r2, #-248]!	; 0xffffff08
    457c:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
    4580:	6d990104 	ldfvss	f0, [r9, #16]
    4584:	01000302 	tsteq	r0, r2, lsl #6
    4588:	02050001 	andeq	r0, r5, #1
    458c:	080093b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, pc}
    4590:	010ae503 	tsteq	sl, r3, lsl #10
    4594:	3e304b83 	vaddcc.f64	d4, d16, d3
    4598:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
    459c:	0075f33d 	rsbseq	pc, r5, sp, lsr r3	; <UNPREDICTABLE>
    45a0:	6f010402 	svcvs	0x00010402
    45a4:	02a03e6d 	adceq	r3, r0, #1744	; 0x6d0
    45a8:	01010003 	tsteq	r1, r3
    45ac:	50020500 	andpl	r0, r2, r0, lsl #10
    45b0:	03080094 	movweq	r0, #32916	; 0x8094
    45b4:	67010b83 	strvs	r0, [r1, -r3, lsl #23]
    45b8:	02910859 	addseq	r0, r1, #5832704	; 0x590000
    45bc:	01010003 	tsteq	r1, r3
    45c0:	a0020500 	andge	r0, r2, r0, lsl #10
    45c4:	03080094 	movweq	r0, #32916	; 0x8094
    45c8:	67010b8f 	strvs	r0, [r1, -pc, lsl #23]
    45cc:	00030267 	andeq	r0, r3, r7, ror #4
    45d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    45d4:	0094c002 	addseq	ip, r4, r2
    45d8:	0b9a0308 	bleq	fe685200 <_estack+0xde655200>
    45dc:	02676701 	rsbeq	r6, r7, #262144	; 0x40000
    45e0:	01010003 	tsteq	r1, r3
    45e4:	e0020500 	and	r0, r2, r0, lsl #10
    45e8:	03080094 	movweq	r0, #32916	; 0x8094
    45ec:	68010ba5 	stmdavs	r1, {r0, r2, r5, r7, r8, r9, fp}
    45f0:	59845908 	stmibpl	r4, {r3, r8, fp, ip, lr}
    45f4:	5a753e5a 	bpl	1d53f64 <_Min_Stack_Size+0x1d53b64>
    45f8:	75315a30 	ldrvc	r5, [r1, #-2608]!	; 0xa30
    45fc:	035a305a 	cmpeq	sl, #90	; 0x5a
    4600:	02002e6d 	andeq	r2, r0, #1744	; 0x6d0
    4604:	3c060104 	stfccs	f0, [r6], {4}
    4608:	58170306 	ldmdapl	r7, {r1, r2, r8, r9}
    460c:	7675233e 			; <UNDEFINED> instruction: 0x7675233e
    4610:	3d223e3d 	stccc	14, cr3, [r2, #-244]!	; 0xffffff0c
    4614:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
    4618:	02009f9f 	andeq	r9, r0, #636	; 0x27c
    461c:	76030104 	strvc	r0, [r3], -r4, lsl #2
    4620:	660d039e 			; <UNDEFINED> instruction: 0x660d039e
    4624:	029f9f9f 	addseq	r9, pc, #636	; 0x27c
    4628:	01010003 	tsteq	r1, r3
    462c:	80020500 	andhi	r0, r2, r0, lsl #10
    4630:	03080096 	movweq	r0, #32918	; 0x8096
    4634:	5a010be7 	bpl	475d8 <_Min_Stack_Size+0x471d8>
    4638:	006a3d69 	rsbeq	r3, sl, r9, ror #26
    463c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4640:	00760620 	rsbseq	r0, r6, r0, lsr #12
    4644:	06010402 	streq	r0, [r1], -r2, lsl #8
    4648:	3d760620 	ldclcc	6, cr0, [r6, #-128]!	; 0xffffff80
    464c:	01000702 	tsteq	r0, r2, lsl #14
    4650:	02050001 	andeq	r0, r5, #1
    4654:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
    4658:	010bff03 	tsteq	fp, r3, lsl #30
    465c:	6a3d695a 	bvs	f5ebcc <_Min_Stack_Size+0xf5e7cc>
    4660:	01040200 	mrseq	r0, R12_usr
    4664:	76062006 	strvc	r2, [r6], -r6
    4668:	01040200 	mrseq	r0, R12_usr
    466c:	76062006 	strvc	r2, [r6], -r6
    4670:	0007023d 	andeq	r0, r7, sp, lsr r2
    4674:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4678:	00973802 	addseq	r3, r7, r2, lsl #16
    467c:	0c960308 	ldceq	3, cr0, [r6], {8}
    4680:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
    4684:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4688:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    468c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4690:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4694:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4698:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    469c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46a0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46a4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46b0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46b4:	3f3d3d3d 	svccc	0x003d3d3d
    46b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46bc:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    46c0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46c4:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    46c8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    46cc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46d0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46d4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46d8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46dc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46e0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46e4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    46e8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    46ec:	01023d3e 	tsteq	r2, lr, lsr sp
    46f0:	00010100 	andeq	r0, r1, r0, lsl #2
    46f4:	99c80205 	stmibls	r8, {r0, r2, r9}^
    46f8:	93030800 	movwls	r0, #14336	; 0x3800
    46fc:	3d2f010d 	stfccs	f0, [pc, #-52]!	; 46d0 <_Min_Stack_Size+0x42d0>
    4700:	01000102 	tsteq	r0, r2, lsl #2
    4704:	02050001 	andeq	r0, r5, #1
    4708:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}
    470c:	010d9d03 	tsteq	sp, r3, lsl #26
    4710:	01023d30 	tsteq	r2, r0, lsr sp
    4714:	00010100 	andeq	r0, r1, r0, lsl #2
    4718:	99e00205 	stmibls	r0!, {r0, r2, r9}^
    471c:	aa030800 	bge	c6724 <_Min_Stack_Size+0xc6324>
    4720:	4d40010d 	stfmie	f0, [r0, #-52]	; 0xffffffcc
    4724:	2f2f2f2f 	svccs	0x002f2f2f
    4728:	5b3d5b2f 	blpl	f5b3ec <_Min_Stack_Size+0xf5afec>
    472c:	00070259 	andeq	r0, r7, r9, asr r2
    4730:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4734:	009a3402 	addseq	r3, sl, r2, lsl #8
    4738:	0dcf0308 	stcleq	3, cr0, [pc, #32]	; 4760 <_Min_Stack_Size+0x4360>
    473c:	02758401 	rsbseq	r8, r5, #16777216	; 0x1000000
    4740:	01010003 	tsteq	r1, r3
    4744:	58020500 	stmdapl	r2, {r8, sl}
    4748:	0308009a 	movweq	r0, #32922	; 0x809a
    474c:	41010dda 	ldrdmi	r0, [r1, -sl]
    4750:	2f2f5b4d 	svccs	0x002f5b4d
    4754:	5b2f2f2f 	blpl	bd0418 <_Min_Stack_Size+0xbd0018>
    4758:	5b3d5b3d 	blpl	f5b454 <_Min_Stack_Size+0xf5b054>
    475c:	405a5b5b 	subsmi	r5, sl, fp, asr fp
    4760:	2f3d2f76 	svccs	0x003d2f76
    4764:	2f432f2f 	svccs	0x00432f2f
    4768:	4c692f2f 	stclmi	15, cr2, [r9], #-188	; 0xffffff44
    476c:	01000802 	tsteq	r0, r2, lsl #16
    4770:	02050001 	andeq	r0, r5, #1
    4774:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
    4778:	010e9f03 	tsteq	lr, r3, lsl #30
    477c:	4a170340 	bmi	5c5484 <_Min_Stack_Size+0x5c5084>
    4780:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4784:	2f2f3f5a 	svccs	0x002f3f5a
    4788:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    478c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4790:	595b3f5a 	ldmdbpl	fp, {r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    4794:	5b3e5a59 	blpl	f9b100 <_Min_Stack_Size+0xf9ad00>
    4798:	5b305a59 	blpl	c1b104 <_Min_Stack_Size+0xc1ad04>
    479c:	595b3e5a 	ldmdbpl	fp, {r1, r3, r4, r6, r9, sl, fp, ip, sp}^
    47a0:	5a595959 	bpl	165ad0c <_Min_Stack_Size+0x165a90c>
    47a4:	10025a3f 	andne	r5, r2, pc, lsr sl
    47a8:	00010100 	andeq	r0, r1, r0, lsl #2
    47ac:	9ca40205 	sfmls	f0, 4, [r4], #20
    47b0:	83030800 	movwhi	r0, #14336	; 0x3800
    47b4:	0075010f 	rsbseq	r0, r5, pc, lsl #2
    47b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    47bc:	22ca064a 	sbccs	r0, sl, #77594624	; 0x4a00000
    47c0:	00030283 	andeq	r0, r3, r3, lsl #5
    47c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    47c8:	009cec02 	addseq	lr, ip, r2, lsl #24
    47cc:	0f920308 	svceq	0x00920308
    47d0:	002f4b01 	eoreq	r4, pc, r1, lsl #22
    47d4:	06020402 	streq	r0, [r2], -r2, lsl #8
    47d8:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    47dc:	3f063c01 	svccc	0x00063c01
    47e0:	01000502 	tsteq	r0, r2, lsl #10
    47e4:	00070c01 	andeq	r0, r7, r1, lsl #24
    47e8:	cb000200 	blgt	4ff0 <_Min_Stack_Size+0x4bf0>
    47ec:	02000001 	andeq	r0, r0, #1
    47f0:	0d0efb01 	vstreq	d15, [lr, #-4]
    47f4:	01010100 	mrseq	r0, (UNDEF: 17)
    47f8:	00000001 	andeq	r0, r0, r1
    47fc:	01000001 	tsteq	r0, r1
    4800:	2f636e69 	svccs	0x00636e69
    4804:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    4808:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    480c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4810:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4814:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4818:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    481c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4820:	2f007972 	svccs	0x00007972
    4824:	2f727375 	svccs	0x00727375
    4828:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    482c:	2f656475 	svccs	0x00656475
    4830:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4834:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4698 <_Min_Stack_Size+0x4298>
    4838:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    483c:	2f00656e 	svccs	0x0000656e
    4840:	2f727375 	svccs	0x00727375
    4844:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4848:	2f656475 	svccs	0x00656475
    484c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4850:	69006269 	stmdbvs	r0, {r0, r3, r5, r6, r9, sp, lr}
    4854:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    4858:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    485c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4860:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4864:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4868:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    486c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4870:	2f736569 	svccs	0x00736569
    4874:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    4878:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    487c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    4880:	2f54532f 	svccs	0x0054532f
    4884:	334d5453 	movtcc	r5, #54355	; 0xd453
    4888:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    488c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    4890:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4894:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4898:	4f432f63 	svcmi	0x00432f63
    489c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    48a0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    48a4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    48a8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    48ac:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    48b0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    48b4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    48b8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    48bc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    48c0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    48c4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    48c8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 48d0 <_Min_Stack_Size+0x44d0>
    48cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    48d0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    48d4:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    48d8:	4f432f63 	svcmi	0x00432f63
    48dc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    48e0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    48e4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    48e8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    48ec:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    48f0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    48f4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    48f8:	5349534d 	movtpl	r5, #37709	; 0x934d
    48fc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    4900:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4904:	74730000 	ldrbtvc	r0, [r3], #-0
    4908:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    490c:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    4910:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    4914:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4918:	695f7972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    491c:	632e656f 	teqvs	lr, #465567744	; 0x1bc00000
    4920:	00000100 	andeq	r0, r0, r0, lsl #2
    4924:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4928:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    492c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4930:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4934:	00000200 	andeq	r0, r0, r0, lsl #4
    4938:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    493c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4940:	00000300 	andeq	r0, r0, r0, lsl #6
    4944:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4948:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    494c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4950:	73000004 	movwvc	r0, #4
    4954:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4958:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    495c:	616d645f 	cmnvs	sp, pc, asr r4
    4960:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4964:	74730000 	ldrbtvc	r0, [r3], #-0
    4968:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    496c:	5f787834 	svcpl	0x00787834
    4970:	6f697067 	svcvs	0x00697067
    4974:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4978:	74730000 	ldrbtvc	r0, [r3], #-0
    497c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4980:	5f787834 	svcpl	0x00787834
    4984:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    4988:	00050068 	andeq	r0, r5, r8, rrx
    498c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4990:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4994:	5f693932 	svcpl	0x00693932
    4998:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    499c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    49a0:	6f695f79 	svcvs	0x00695f79
    49a4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    49a8:	63000001 	movwvs	r0, #1
    49ac:	5f65726f 	svcpl	0x0065726f
    49b0:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    49b4:	00060068 	andeq	r0, r6, r8, rrx
    49b8:	05000000 	streq	r0, [r0, #-0]
    49bc:	009d1402 	addseq	r1, sp, r2, lsl #8
    49c0:	00ff0308 	rscseq	r0, pc, r8, lsl #6
    49c4:	31313001 	teqcc	r1, r1
    49c8:	4b32325a 	blmi	c91338 <_Min_Stack_Size+0xc90f38>
    49cc:	02022131 	andeq	r2, r2, #1073741836	; 0x4000000c
    49d0:	00010100 	andeq	r0, r1, r0, lsl #2
    49d4:	9d440205 	sfmls	f0, 2, [r4, #-20]	; 0xffffffec
    49d8:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    49dc:	3f300101 	svccc	0x00300101
    49e0:	02213f4d 	eoreq	r3, r1, #308	; 0x134
    49e4:	01010002 	tsteq	r1, r2
    49e8:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    49ec:	0308009d 	movweq	r0, #32925	; 0x809d
    49f0:	410101b2 			; <UNDEFINED> instruction: 0x410101b2
    49f4:	4b4b4c92 	blmi	12d7c44 <_Min_Stack_Size+0x12d7844>
    49f8:	01040200 	mrseq	r0, R12_usr
    49fc:	02005806 	andeq	r5, r0, #393216	; 0x60000
    4a00:	00580204 	subseq	r0, r8, r4, lsl #4
    4a04:	4a030402 	bmi	c5a14 <_Min_Stack_Size+0xc5614>
    4a08:	03040200 	movweq	r0, #16896	; 0x4200
    4a0c:	02002106 	andeq	r2, r0, #-2147483647	; 0x80000001
    4a10:	58060104 	stmdapl	r6, {r2, r8}
    4a14:	02040200 	andeq	r0, r4, #0, 4
    4a18:	04020058 	streq	r0, [r2], #-88	; 0x58
    4a1c:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    4a20:	21060304 	tstcs	r6, r4, lsl #6
    4a24:	5b403d5a 	blpl	1013f94 <_Min_Stack_Size+0x1013b94>
    4a28:	4d4b695a 	stclmi	9, cr6, [fp, #-360]	; 0xfffffe98
    4a2c:	000a0221 	andeq	r0, sl, r1, lsr #4
    4a30:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a34:	009e2c02 	addseq	r2, lr, r2, lsl #24
    4a38:	01e10308 	mvneq	r0, r8, lsl #6
    4a3c:	5a315901 	bpl	c5ae48 <_Min_Stack_Size+0xc5aa48>
    4a40:	02223276 	eoreq	r3, r2, #1610612743	; 0x60000007
    4a44:	01010004 	tsteq	r1, r4
    4a48:	60020500 	andvs	r0, r2, r0, lsl #10
    4a4c:	0308009e 	movweq	r0, #32926	; 0x809e
    4a50:	5a0101fe 	bpl	45250 <_Min_Stack_Size+0x44e50>
    4a54:	0402215b 	streq	r2, [r2], #-347	; 0x15b
    4a58:	00010100 	andeq	r0, r1, r0, lsl #2
    4a5c:	9e800205 	cdpls	2, 8, cr0, cr0, cr5, {0}
    4a60:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    4a64:	85300102 	ldrhi	r0, [r0, #-258]!	; 0x102
    4a68:	22334e4c 	eorscs	r4, r3, #76, 28	; 0x4c0
    4a6c:	01000502 	tsteq	r0, r2, lsl #10
    4a70:	02050001 	andeq	r0, r5, #1
    4a74:	08009eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, pc}
    4a78:	0102a803 	tsteq	r2, r3, lsl #16
    4a7c:	4d3f4d30 	ldcmi	13, cr4, [pc, #-192]!	; 49c4 <_Min_Stack_Size+0x45c4>
    4a80:	00020221 	andeq	r0, r2, r1, lsr #4
    4a84:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a88:	009ed402 	addseq	sp, lr, r2, lsl #8
    4a8c:	02bc0308 	adcseq	r0, ip, #8, 6	; 0x20000000
    4a90:	59313d01 	ldmdbpl	r1!, {r0, r8, sl, fp, ip, sp}
    4a94:	0221853d 	eoreq	r8, r1, #255852544	; 0xf400000
    4a98:	01010004 	tsteq	r1, r4
    4a9c:	08020500 	stmdaeq	r2, {r8, sl}
    4aa0:	0308009f 	movweq	r0, #32927	; 0x809f
    4aa4:	750102d3 	strvc	r0, [r1, #-723]	; 0x2d3
    4aa8:	873f5a31 			; <UNDEFINED> instruction: 0x873f5a31
    4aac:	02215b4e 	eoreq	r5, r1, #79872	; 0x13800
    4ab0:	01010004 	tsteq	r1, r4
    4ab4:	58020500 	stmdapl	r2, {r8, sl}
    4ab8:	0308009f 	movweq	r0, #32927	; 0x809f
    4abc:	590102f2 	stmdbpl	r1, {r1, r4, r5, r6, r7, r9}
    4ac0:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    4ac4:	02215b4e 	eoreq	r5, r1, #79872	; 0x13800
    4ac8:	01010004 	tsteq	r1, r4
    4acc:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    4ad0:	0308009f 	movweq	r0, #32927	; 0x809f
    4ad4:	75010397 	strvc	r0, [r1, #-919]	; 0x397
    4ad8:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    4adc:	02215b77 	eoreq	r5, r1, #121856	; 0x1dc00
    4ae0:	01010004 	tsteq	r1, r4
    4ae4:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    4ae8:	0308009f 	movweq	r0, #32927	; 0x809f
    4aec:	300103b4 			; <UNDEFINED> instruction: 0x300103b4
    4af0:	4d3f4d4d 	ldcmi	13, cr4, [pc, #-308]!	; 49c4 <_Min_Stack_Size+0x45c4>
    4af4:	4d4d4d4d 	stclmi	13, cr4, [sp, #-308]	; 0xfffffecc
    4af8:	4d4e4d4d 	stclmi	13, cr4, [lr, #-308]	; 0xfffffecc
    4afc:	0221e74d 	eoreq	lr, r1, #20185088	; 0x1340000
    4b00:	01010005 	tsteq	r1, r5
    4b04:	80020500 	andhi	r0, r2, r0, lsl #10
    4b08:	030800a0 	movweq	r0, #32928	; 0x80a0
    4b0c:	750103ec 	strvc	r0, [r1, #-1004]	; 0x3ec
    4b10:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    4b14:	02215b78 	eoreq	r5, r1, #120, 22	; 0x1e000
    4b18:	01010004 	tsteq	r1, r4
    4b1c:	d0020500 	andle	r0, r2, r0, lsl #10
    4b20:	030800a0 	movweq	r0, #32928	; 0x80a0
    4b24:	7501048b 	strvc	r0, [r1, #-1163]	; 0x48b
    4b28:	6931312f 	ldmdbvs	r1!, {r0, r1, r2, r3, r5, r8, ip, sp}
    4b2c:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4b30:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b34:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b38:	7a480601 	bvc	1206344 <_Min_Stack_Size+0x1205f44>
    4b3c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4b40:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b44:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b48:	7a480601 	bvc	1206354 <_Min_Stack_Size+0x1205f54>
    4b4c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4b50:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b54:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b58:	00480601 	subeq	r0, r8, r1, lsl #12
    4b5c:	06020402 	streq	r0, [r2], -r2, lsl #8
    4b60:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4b64:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4b68:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b6c:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b70:	7a480601 	bvc	120637c <_Min_Stack_Size+0x1205f7c>
    4b74:	0200223d 	andeq	r2, r0, #-805306365	; 0xd0000003
    4b78:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4b7c:	01040200 	mrseq	r0, R12_usr
    4b80:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4b84:	15034d4d 	strne	r4, [r3, #-3405]	; 0xd4d
    4b88:	16022f4a 	strne	r2, [r2], -sl, asr #30
    4b8c:	00010100 	andeq	r0, r1, r0, lsl #2
    4b90:	a2640205 	rsbge	r0, r4, #1342177280	; 0x50000000
    4b94:	ef030800 	svc	0x00030800
    4b98:	4d590104 	ldfmie	f0, [r9, #-16]
    4b9c:	4b4d4d69 	blmi	1358148 <_Min_Stack_Size+0x1357d48>
    4ba0:	04020022 	streq	r0, [r2], #-34	; 0x22
    4ba4:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4ba8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4bac:	4b5b7a48 	blmi	16e34d4 <_Min_Stack_Size+0x16e30d4>
    4bb0:	04020022 	streq	r0, [r2], #-34	; 0x22
    4bb4:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4bb8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4bbc:	4b5b7a48 	blmi	16e34e4 <_Min_Stack_Size+0x16e30e4>
    4bc0:	04020022 	streq	r0, [r2], #-34	; 0x22
    4bc4:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4bc8:	06010402 	streq	r0, [r1], -r2, lsl #8
    4bcc:	04020048 	streq	r0, [r2], #-72	; 0x48
    4bd0:	06740602 	ldrbteq	r0, [r4], -r2, lsl #12
    4bd4:	224b4d7a 	subcs	r4, fp, #7808	; 0x1e80
    4bd8:	01040200 	mrseq	r0, R12_usr
    4bdc:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4be0:	48060104 	stmdami	r6, {r2, r8}
    4be4:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4be8:	01040200 	mrseq	r0, R12_usr
    4bec:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4bf0:	48060104 	stmdami	r6, {r2, r8}
    4bf4:	4b4d4d7a 	blmi	13581e4 <_Min_Stack_Size+0x1357de4>
    4bf8:	04020022 	streq	r0, [r2], #-34	; 0x22
    4bfc:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c00:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c04:	4d4d7a48 	vstrmi	s15, [sp, #-288]	; 0xfffffee0
    4c08:	02214d4d 	eoreq	r4, r1, #4928	; 0x1340
    4c0c:	01010016 	tsteq	r1, r6, lsl r0
    4c10:	38020500 	stmdacc	r2, {r8, sl}
    4c14:	030800a4 	movweq	r0, #32932	; 0x80a4
    4c18:	4b0105ce 	blmi	46358 <_Min_Stack_Size+0x45f58>
    4c1c:	4d694d2f 	stclmi	13, cr4, [r9, #-188]!	; 0xffffff44
    4c20:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4c24:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c28:	04020074 	streq	r0, [r2], #-116	; 0x74
    4c2c:	7a480601 	bvc	1206438 <_Min_Stack_Size+0x1206038>
    4c30:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4c34:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c38:	04020074 	streq	r0, [r2], #-116	; 0x74
    4c3c:	7a480601 	bvc	1206448 <_Min_Stack_Size+0x1206048>
    4c40:	00224b69 	eoreq	r4, r2, r9, ror #22
    4c44:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c48:	04020074 	streq	r0, [r2], #-116	; 0x74
    4c4c:	00480601 	subeq	r0, r8, r1, lsl #12
    4c50:	06020402 	streq	r0, [r2], -r2, lsl #8
    4c54:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4c58:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c5c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c60:	01040200 	mrseq	r0, R12_usr
    4c64:	5b7a4806 	blpl	1e96c84 <_Min_Stack_Size+0x1e96884>
    4c68:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c6c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c70:	01040200 	mrseq	r0, R12_usr
    4c74:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4c78:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4c7c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c80:	04020074 	streq	r0, [r2], #-116	; 0x74
    4c84:	7a480601 	bvc	1206490 <_Min_Stack_Size+0x1206090>
    4c88:	4d4d4d4d 	stclmi	13, cr4, [sp, #-308]	; 0xfffffecc
    4c8c:	83312f2f 	teqhi	r1, #47, 30	; 0xbc
    4c90:	01001702 	tsteq	r0, r2, lsl #14
    4c94:	02050001 	andeq	r0, r5, #1
    4c98:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
    4c9c:	0106b303 	tsteq	r6, r3, lsl #6
    4ca0:	6a5a5b40 	bvs	169b9a8 <_Min_Stack_Size+0x169b5a8>
    4ca4:	3e3e935c 	mrccc	3, 1, r9, cr14, cr12, {2}
    4ca8:	022f323e 	eoreq	r3, pc, #-536870909	; 0xe0000003
    4cac:	01010006 	tsteq	r1, r6
    4cb0:	94020500 	strls	r0, [r2], #-1280	; 0x500
    4cb4:	030800a6 	movweq	r0, #32934	; 0x80a6
    4cb8:	400106da 	ldrdmi	r0, [r1], -sl
    4cbc:	3e854d5c 	mcrcc	13, 4, r4, cr5, cr12, {2}
    4cc0:	2f404c3e 	svccs	0x00404c3e
    4cc4:	01000702 	tsteq	r0, r2, lsl #14
    4cc8:	02050001 	andeq	r0, r5, #1
    4ccc:	0800a6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, pc}
    4cd0:	0106fb03 	tsteq	r6, r3, lsl #22
    4cd4:	2f3d5b40 	svccs	0x003d5b40
    4cd8:	0004022f 	andeq	r0, r4, pc, lsr #4
    4cdc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ce0:	00a71002 	adceq	r1, r7, r2
    4ce4:	078d0308 	streq	r0, [sp, r8, lsl #6]
    4ce8:	5a594001 	bpl	1654cf4 <_Min_Stack_Size+0x16548f4>
    4cec:	5a5b5a5b 	bpl	16db660 <_Min_Stack_Size+0x16db260>
    4cf0:	2f2f3d5b 	svccs	0x002f3d5b
    4cf4:	3d5a2f2f 	ldclcc	15, cr2, [sl, #-188]	; 0xffffff44
    4cf8:	0008025a 	andeq	r0, r8, sl, asr r2
    4cfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4d00:	00a79c02 	adceq	r9, r7, r2, lsl #24
    4d04:	07b30308 	ldreq	r0, [r3, r8, lsl #6]!
    4d08:	2f774001 	svccs	0x00774001
    4d0c:	3d3d2f3d 	ldccc	15, cr2, [sp, #-244]!	; 0xffffff0c
    4d10:	024c5b31 	subeq	r5, ip, #50176	; 0xc400
    4d14:	01010008 	tsteq	r1, r8
    4d18:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    4d1c:	030800a7 	movweq	r0, #32935	; 0x80a7
    4d20:	690107cf 	stmdbvs	r1, {r0, r1, r2, r3, r6, r7, r8, r9, sl}
    4d24:	31313f5b 	teqcc	r1, fp, asr pc
    4d28:	31313f31 	teqcc	r1, r1, lsr pc
    4d2c:	31313131 	teqcc	r1, r1, lsr r1
    4d30:	313f3131 	teqcc	pc, r1, lsr r1	; <UNPREDICTABLE>
    4d34:	3f773e30 	svccc	0x00773e30
    4d38:	683e3031 	ldmdavs	lr!, {r0, r4, r5, ip, sp}
    4d3c:	01000a02 	tsteq	r0, r2, lsl #20
    4d40:	02050001 	andeq	r0, r5, #1
    4d44:	0800a894 	stmdaeq	r0, {r2, r4, r7, fp, sp, pc}
    4d48:	01089e03 	tsteq	r8, r3, lsl #28
    4d4c:	4b4d3175 	blmi	1351328 <_Min_Stack_Size+0x1350f28>
    4d50:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d54:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d58:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d5c:	4b5b7a48 	blmi	16e3684 <_Min_Stack_Size+0x16e3284>
    4d60:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d64:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d68:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d6c:	4b317a48 	blmi	c63694 <_Min_Stack_Size+0xc63294>
    4d70:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d74:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d78:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d7c:	4b5b7a48 	blmi	16e36a4 <_Min_Stack_Size+0x16e32a4>
    4d80:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d84:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d88:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d8c:	4b5b7a48 	blmi	16e36b4 <_Min_Stack_Size+0x16e32b4>
    4d90:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d94:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d98:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d9c:	04020048 	streq	r0, [r2], #-72	; 0x48
    4da0:	06740602 	ldrbteq	r0, [r4], -r2, lsl #12
    4da4:	4a16037a 	bmi	585b94 <_Min_Stack_Size+0x585794>
    4da8:	00100230 	andseq	r0, r0, r0, lsr r2
    4dac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4db0:	00a9f002 	adceq	pc, r9, r2
    4db4:	08f40308 	ldmeq	r4!, {r3, r8, r9}^
    4db8:	4d315901 	ldcmi	9, cr5, [r1, #-4]!
    4dbc:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4dc0:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4dc4:	01040200 	mrseq	r0, R12_usr
    4dc8:	4d794806 	ldclmi	8, cr4, [r9, #-24]!	; 0xffffffe8
    4dcc:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4dd0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4dd4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4dd8:	7a480601 	bvc	12065e4 <_Min_Stack_Size+0x12061e4>
    4ddc:	00224b31 	eoreq	r4, r2, r1, lsr fp
    4de0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4de4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4de8:	7a480601 	bvc	12065f4 <_Min_Stack_Size+0x12061f4>
    4dec:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4df0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4df4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4df8:	00480601 	subeq	r0, r8, r1, lsl #12
    4dfc:	06020402 	streq	r0, [r2], -r2, lsl #8
    4e00:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4e04:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4e08:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4e0c:	01040200 	mrseq	r0, R12_usr
    4e10:	5b7a4806 	blpl	1e96e30 <_Min_Stack_Size+0x1e96a30>
    4e14:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4e18:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4e1c:	01040200 	mrseq	r0, R12_usr
    4e20:	317a4806 	cmncc	sl, r6, lsl #16
    4e24:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4e28:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4e2c:	01040200 	mrseq	r0, R12_usr
    4e30:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4e34:	02224d5b 	eoreq	r4, r2, #5824	; 0x16c0
    4e38:	01010012 	tsteq	r1, r2, lsl r0
    4e3c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    4e40:	030800ab 	movweq	r0, #32939	; 0x80ab
    4e44:	4b0109d3 	blmi	47598 <_Min_Stack_Size+0x47198>
    4e48:	224b4d4d 	subcs	r4, fp, #4928	; 0x1340
    4e4c:	01040200 	mrseq	r0, R12_usr
    4e50:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4e54:	48060104 	stmdami	r6, {r2, r8}
    4e58:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4e5c:	01040200 	mrseq	r0, R12_usr
    4e60:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4e64:	48060104 	stmdami	r6, {r2, r8}
    4e68:	224b317a 	subcs	r3, fp, #-2147483618	; 0x8000001e
    4e6c:	01040200 	mrseq	r0, R12_usr
    4e70:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4e74:	48060104 	stmdami	r6, {r2, r8}
    4e78:	4b4d697a 	blmi	135f468 <_Min_Stack_Size+0x135f068>
    4e7c:	04020022 	streq	r0, [r2], #-34	; 0x22
    4e80:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4e84:	06010402 	streq	r0, [r1], -r2, lsl #8
    4e88:	4b5b7a48 	blmi	16e37b0 <_Min_Stack_Size+0x16e33b0>
    4e8c:	04020022 	streq	r0, [r2], #-34	; 0x22
    4e90:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4e94:	06010402 	streq	r0, [r1], -r2, lsl #8
    4e98:	5b4b7a48 	blpl	12e37c0 <_Min_Stack_Size+0x12e33c0>
    4e9c:	00224b31 	eoreq	r4, r2, r1, lsr fp
    4ea0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ea4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4ea8:	7a480601 	bvc	12066b4 <_Min_Stack_Size+0x12062b4>
    4eac:	4b5b5b4d 	blmi	16dbbe8 <_Min_Stack_Size+0x16db7e8>
    4eb0:	1002835b 	andne	r8, r2, fp, asr r3
    4eb4:	00010100 	andeq	r0, r1, r0, lsl #2
    4eb8:	ad980205 	lfmge	f0, 4, [r8, #20]
    4ebc:	b1030800 	tstlt	r3, r0, lsl #16
    4ec0:	4b3f010a 	blmi	fc52f0 <_Min_Stack_Size+0xfc4ef0>
    4ec4:	3d314c4b 	ldccc	12, cr4, [r1, #-300]!	; 0xfffffed4
    4ec8:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 4e14 <_Min_Stack_Size+0x4a14>
    4ecc:	5a4b313d 	bpl	12d13c8 <_Min_Stack_Size+0x12d0fc8>
    4ed0:	00090221 	andeq	r0, r9, r1, lsr #4
    4ed4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ed8:	00ae0402 	adceq	r0, lr, r2, lsl #8
    4edc:	0ad20308 	beq	ff485b04 <_estack+0xdf455b04>
    4ee0:	002f4b01 	eoreq	r4, pc, r1, lsl #22
    4ee4:	06020402 	streq	r0, [r2], -r2, lsl #8
    4ee8:	04020066 	streq	r0, [r2], #-102	; 0x66
    4eec:	3f063c01 	svccc	0x00063c01
    4ef0:	01000802 	tsteq	r0, r2, lsl #16
    4ef4:	0001a001 	andeq	sl, r1, r1
    4ef8:	2d000200 	sfmcs	f0, 4, [r0, #-0]
    4efc:	02000001 	andeq	r0, r0, #1
    4f00:	0d0efb01 	vstreq	d15, [lr, #-4]
    4f04:	01010100 	mrseq	r0, (UNDEF: 17)
    4f08:	00000001 	andeq	r0, r0, r1
    4f0c:	01000001 	tsteq	r0, r1
    4f10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4f18:	2f2e2e2f 	svccs	0x002e2e2f
    4f1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4f24:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4f28:	2f62696c 	svccs	0x0062696c
    4f2c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4f30:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    4f34:	622f0068 	eorvs	r0, pc, #104	; 0x68
    4f38:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    4f3c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4f40:	2f64646c 	svccs	0x0064646c
    4f44:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4f48:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    4f4c:	302e312e 	eorcc	r3, lr, lr, lsr #2
    4f50:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    4f54:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    4f58:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    4f5c:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    4f60:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    4f64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4f68:	2f62696c 	svccs	0x0062696c
    4f6c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4f70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4f74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4f78:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    4f7c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    4f80:	2f2e2e00 	svccs	0x002e2e00
    4f84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4f8c:	2f2e2e2f 	svccs	0x002e2e2f
    4f90:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f94:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    4f98:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4f9c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4fa0:	616d2f6d 	cmnvs	sp, sp, ror #30
    4fa4:	2e2f6874 	mcrcs	8, 1, r6, cr15, cr4, {3}
    4fa8:	6f632f2e 	svcvs	0x00632f2e
    4fac:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    4fb0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    4fb4:	2f646c69 	svccs	0x00646c69
    4fb8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4fbc:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    4fc0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4fc4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    4fc8:	2b302e31 	blcs	c10894 <_Min_Stack_Size+0xc10494>
    4fcc:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4fd0:	30343130 	eorscc	r3, r4, r0, lsr r1
    4fd4:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    4fd8:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    4fdc:	2f623332 	svccs	0x00623332
    4fe0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4fe4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4e48 <_Min_Stack_Size+0x4a48>
    4fe8:	2f636269 	svccs	0x00636269
    4fec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ff0:	00656475 	rsbeq	r6, r5, r5, ror r4
    4ff4:	615f7300 	cmpvs	pc, r0, lsl #6
    4ff8:	2e6e6174 	mcrcs	1, 3, r6, cr14, cr4, {3}
    4ffc:	00010063 	andeq	r0, r1, r3, rrx
    5000:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    5004:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5008:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    500c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5010:	00020068 	andeq	r0, r2, r8, rrx
    5014:	6c646600 	stclvs	6, cr6, [r4], #-0
    5018:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    501c:	00030068 	andeq	r0, r3, r8, rrx
    5020:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    5024:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5028:	00000004 	andeq	r0, r0, r4
    502c:	38020500 	stmdacc	r2, {r8, sl}
    5030:	030800ae 	movweq	r0, #32942	; 0x80ae
    5034:	34010185 	strcc	r0, [r1], #-389	; 0x185
    5038:	7a032f2d 	bvc	d0cf4 <_Min_Stack_Size+0xd08f4>
    503c:	2232203c 	eorscs	r2, r2, #60	; 0x3c
    5040:	04020023 	streq	r0, [r2], #-35	; 0x23
    5044:	02006701 	andeq	r6, r0, #262144	; 0x40000
    5048:	853b0104 	ldrhi	r0, [fp, #-260]!	; 0x104
    504c:	03d62103 	bicseq	r2, r6, #-1073741824	; 0xc0000000
    5050:	77755861 	ldrbvc	r5, [r5, -r1, ror #16]!
    5054:	832e1103 	teqhi	lr, #-1073741824	; 0xc0000000
    5058:	3a302f2d 	bcc	c10d14 <_Min_Stack_Size+0xc10914>
    505c:	132f0230 	teqne	pc, #48, 4
    5060:	28022f3b 	stmdacs	r2, {r0, r1, r3, r4, r5, r8, r9, sl, fp, sp}
    5064:	222f4913 	eorcs	r4, pc, #311296	; 0x4c000
    5068:	1f132202 	svcne	0x00132202
    506c:	5e033e2f 	cdppl	14, 0, cr3, cr3, cr15, {1}
    5070:	82220358 	eorhi	r0, r2, #88, 6	; 0x60000001
    5074:	03586303 	cmpeq	r8, #201326592	; 0xc000000
    5078:	6703d61d 	smladvs	r3, sp, r6, sp
    507c:	2f572f58 	svccs	0x00572f58
    5080:	02006721 	andeq	r6, r0, #8650752	; 0x840000
    5084:	11030104 	tstne	r3, r4, lsl #2
    5088:	7403c808 	strvc	ip, [r3], #-2056	; 0x808
    508c:	08671208 	stmdaeq	r7!, {r3, r9, ip}^
    5090:	c87a03f4 	ldmdagt	sl!, {r2, r4, r5, r6, r7, r8, r9}^
    5094:	01004c02 	tsteq	r0, r2, lsl #24
    5098:	00014501 	andeq	r4, r1, r1, lsl #10
    509c:	2d000200 	sfmcs	f0, 4, [r0, #-0]
    50a0:	02000001 	andeq	r0, r0, #1
    50a4:	0d0efb01 	vstreq	d15, [lr, #-4]
    50a8:	01010100 	mrseq	r0, (UNDEF: 17)
    50ac:	00000001 	andeq	r0, r0, r1
    50b0:	01000001 	tsteq	r0, r1
    50b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50bc:	2f2e2e2f 	svccs	0x002e2e2f
    50c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    50cc:	2f62696c 	svccs	0x0062696c
    50d0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    50d4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    50d8:	2e2e0068 	cdpcs	0, 2, cr0, cr14, cr8, {3}
    50dc:	2f2e2e2f 	svccs	0x002e2e2f
    50e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50e8:	2f2e2e2f 	svccs	0x002e2e2f
    50ec:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    50f0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    50f4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    50f8:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 4f78 <_Min_Stack_Size+0x4b78>
    50fc:	2f687461 	svccs	0x00687461
    5100:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    5104:	6f6d6d6f 	svcvs	0x006d6d6f
    5108:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    510c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5110:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5114:	2f64646c 	svccs	0x0064646c
    5118:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    511c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5120:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5124:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5128:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    512c:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5130:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5134:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5138:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    513c:	2f62696c 	svccs	0x0062696c
    5140:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5144:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5148:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    514c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5150:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    5154:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    5158:	2f646c69 	svccs	0x00646c69
    515c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5160:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5164:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5168:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    516c:	2b302e31 	blcs	c10a38 <_Min_Stack_Size+0xc10638>
    5170:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5174:	30343130 	eorscc	r3, r4, r0, lsr r1
    5178:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    517c:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5180:	2f623332 	svccs	0x00623332
    5184:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5188:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4fec <_Min_Stack_Size+0x4bec>
    518c:	2f636269 	svccs	0x00636269
    5190:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5194:	00656475 	rsbeq	r6, r5, r5, ror r4
    5198:	665f7300 	ldrbvs	r7, [pc], -r0, lsl #6
    519c:	2e736261 	cdpcs	2, 7, cr6, cr3, cr1, {3}
    51a0:	00010063 	andeq	r0, r1, r3, rrx
    51a4:	6c646600 	stclvs	6, cr6, [r4], #-0
    51a8:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    51ac:	00020068 	andeq	r0, r2, r8, rrx
    51b0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    51b4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    51b8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    51bc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    51c0:	00030068 	andeq	r0, r3, r8, rrx
    51c4:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    51c8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    51cc:	00000004 	andeq	r0, r0, r4
    51d0:	c0020500 	andgt	r0, r2, r0, lsl #10
    51d4:	030800b1 	movweq	r0, #32945	; 0x80b1
    51d8:	150100c1 	strne	r0, [r1, #-193]	; 0xc1
    51dc:	00010230 	andeq	r0, r1, r0, lsr r2
    51e0:	01620101 	cmneq	r2, r1, lsl #2
    51e4:	00020000 	andeq	r0, r2, r0
    51e8:	00000120 	andeq	r0, r0, r0, lsr #2
    51ec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    51f0:	0101000d 	tsteq	r1, sp
    51f4:	00000101 	andeq	r0, r0, r1, lsl #2
    51f8:	00000100 	andeq	r0, r0, r0, lsl #2
    51fc:	2f2e2e01 	svccs	0x002e2e01
    5200:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5204:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5208:	2f2e2e2f 	svccs	0x002e2e2f
    520c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5210:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5214:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5218:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    521c:	616d2f6d 	cmnvs	sp, sp, ror #30
    5220:	2f006874 	svccs	0x00006874
    5224:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5228:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    522c:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5230:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5234:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5238:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    523c:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5240:	31303274 	teqcc	r0, r4, ror r2
    5244:	31383034 	teqcc	r8, r4, lsr r0
    5248:	61312e38 	teqvs	r1, r8, lsr lr
    524c:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5250:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5254:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5258:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    525c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5260:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5264:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    5268:	2f2e2e2f 	svccs	0x002e2e2f
    526c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5270:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5274:	2f2e2e2f 	svccs	0x002e2e2f
    5278:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    527c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5280:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5284:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5104 <_Min_Stack_Size+0x4d04>
    5288:	2f687461 	svccs	0x00687461
    528c:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    5290:	6f6d6d6f 	svcvs	0x006d6d6f
    5294:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    5298:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    529c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    52a0:	2f64646c 	svccs	0x0064646c
    52a4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    52a8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    52ac:	302e312e 	eorcc	r3, lr, lr, lsr #2
    52b0:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    52b4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    52b8:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    52bc:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    52c0:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    52c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    52c8:	2f62696c 	svccs	0x0062696c
    52cc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    52d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    52d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    52d8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    52dc:	5f770000 	svcpl	0x00770000
    52e0:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    52e4:	0100632e 	tsteq	r0, lr, lsr #6
    52e8:	616d0000 	cmnvs	sp, r0
    52ec:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    52f0:	00000200 	andeq	r0, r0, r0, lsl #4
    52f4:	696c6466 	stmdbvs	ip!, {r1, r2, r5, r6, sl, sp, lr}^
    52f8:	682e6d62 	stmdavs	lr!, {r1, r5, r6, r8, sl, fp, sp, lr}
    52fc:	00000300 	andeq	r0, r0, r0, lsl #6
    5300:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    5304:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5308:	00000004 	andeq	r0, r0, r4
    530c:	c8020500 	stmdagt	r2, {r8, sl}
    5310:	030800b1 	movweq	r0, #32945	; 0x80b1
    5314:	350100dc 	strcc	r0, [r1, #-220]	; 0xdc
    5318:	204a7903 	subcs	r7, sl, r3, lsl #18
    531c:	2f3b2f34 	svccs	0x003b2f34
    5320:	02040200 	andeq	r0, r4, #0, 4
    5324:	03062006 	movweq	r2, #24582	; 0x6006
    5328:	03305811 	teqeq	r0, #1114112	; 0x110000
    532c:	31bd3c6e 			; <UNDEFINED> instruction: 0x31bd3c6e
    5330:	22222d2b 	eorcs	r2, r2, #2752	; 0xac0
    5334:	2249312a 	subcs	r3, r9, #-2147483638	; 0x8000000a
    5338:	222f3b2f 	eorcs	r3, pc, #48128	; 0xbc00
    533c:	0332304d 	teqeq	r2, #77	; 0x4d
    5340:	025b3c78 	subseq	r3, fp, #120, 24	; 0x7800
    5344:	01010005 	tsteq	r1, r5
    5348:	0000020a 	andeq	r0, r0, sl, lsl #4
    534c:	011f0002 	tsteq	pc, r2
    5350:	01020000 	mrseq	r0, (UNDEF: 2)
    5354:	000d0efb 	strdeq	r0, [sp], -fp
    5358:	01010101 	tsteq	r1, r1, lsl #2
    535c:	01000000 	mrseq	r0, (UNDEF: 0)
    5360:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5364:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5368:	2f2e2e2f 	svccs	0x002e2e2f
    536c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5370:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5374:	2f2e2e2f 	svccs	0x002e2e2f
    5378:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    537c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 51e0 <_Min_Stack_Size+0x4de0>
    5380:	2f6d6269 	svccs	0x006d6269
    5384:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5388:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    538c:	2f646c69 	svccs	0x00646c69
    5390:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5394:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5398:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    539c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    53a0:	2b302e31 	blcs	c10c6c <_Min_Stack_Size+0xc1086c>
    53a4:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    53a8:	30343130 	eorscc	r3, r4, r0, lsr r1
    53ac:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    53b0:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    53b4:	2f623332 	svccs	0x00623332
    53b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    53bc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5220 <_Min_Stack_Size+0x4e20>
    53c0:	2f636269 	svccs	0x00636269
    53c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    53c8:	00656475 	rsbeq	r6, r5, r5, ror r4
    53cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    53d4:	2f2e2e2f 	svccs	0x002e2e2f
    53d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    53e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    53e4:	2f62696c 	svccs	0x0062696c
    53e8:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    53ec:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    53f0:	2e2e2f68 	cdpcs	15, 2, cr2, cr14, cr8, {3}
    53f4:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5340 <_Min_Stack_Size+0x4f40>
    53f8:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    53fc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5400:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5404:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5408:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    540c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5410:	312e322d 	teqcc	lr, sp, lsr #4
    5414:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5418:	30327469 	eorscc	r7, r2, r9, ror #8
    541c:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5420:	312e3831 	teqcc	lr, r1, lsr r8
    5424:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5428:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    542c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5430:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5434:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5438:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    543c:	732f6564 	teqvc	pc, #100, 10	; 0x19000000
    5440:	00007379 	andeq	r7, r0, r9, ror r3
    5444:	6f705f77 	svcvs	0x00705f77
    5448:	00632e77 	rsbeq	r2, r3, r7, ror lr
    544c:	6d000001 	stcvs	0, cr0, [r0, #-4]
    5450:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5454:	00020068 	andeq	r0, r2, r8, rrx
    5458:	6c646600 	stclvs	6, cr6, [r4], #-0
    545c:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    5460:	00030068 	andeq	r0, r3, r8, rrx
    5464:	72726500 	rsbsvc	r6, r2, #0, 10
    5468:	682e6f6e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    546c:	00000400 	andeq	r0, r0, r0, lsl #8
    5470:	02050000 	andeq	r0, r5, #0
    5474:	0800b274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, pc}
    5478:	0100c803 	tsteq	r0, r3, lsl #16
    547c:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    5480:	03204a73 	teqeq	r0, #471040	; 0x73000
    5484:	3b2f4a0c 	blcc	bd7cbc <_Min_Stack_Size+0xbd78bc>
    5488:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    548c:	06200602 	strteq	r0, [r0], -r2, lsl #12
    5490:	5800ff03 	stmdapl	r0, {r0, r1, r8, r9, sl, fp, ip, sp, lr, pc}
    5494:	7f800330 	svcvc	0x00800330
    5498:	0903673c 	stmdbeq	r3, {r2, r3, r4, r5, r8, r9, sl, sp, lr}
    549c:	1c312a82 	ldcne	10, cr2, [r1], #-520	; 0xfffffdf8
    54a0:	262d3832 			; <UNDEFINED> instruction: 0x262d3832
    54a4:	242b2f47 	strtcs	r2, [fp], #-3911	; 0xf47
    54a8:	f2032629 	vmax.s8	d2, d3, d25
    54ac:	03322000 	teqeq	r2, #0
    54b0:	833c7f95 	teqhi	ip, #596	; 0x254
    54b4:	322a2f97 	eorcc	r2, sl, #604	; 0x25c
    54b8:	222d292f 	eorcs	r2, sp, #770048	; 0xbc000
    54bc:	30293021 	eorcc	r3, r9, r1, lsr #32
    54c0:	04020024 	streq	r0, [r2], #-36	; 0x24
    54c4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    54c8:	d8036975 	stmdale	r3, {r0, r2, r4, r5, r6, r8, fp, sp, lr}
    54cc:	42032e00 	andmi	r2, r3, #0, 28
    54d0:	74300358 	ldrtvc	r0, [r0], #-856	; 0x358
    54d4:	01040200 	mrseq	r0, R12_usr
    54d8:	dc068206 	sfmle	f0, 1, [r6], {6}
    54dc:	322a2d30 	eorcc	r2, sl, #48, 26	; 0xc00
    54e0:	24222d2a 	strtcs	r2, [r2], #-3370	; 0xd2a
    54e4:	3029301d 	eorcc	r3, r9, sp, lsl r0
    54e8:	03693024 	cmneq	r9, #36	; 0x24
    54ec:	004a7fad 	subeq	r7, sl, sp, lsr #31
    54f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    54f4:	32930674 	addscc	r0, r3, #116, 12	; 0x7400000
    54f8:	3f2d2d2b 	svccc	0x002d2d2b
    54fc:	312d302f 	teqcc	sp, pc, lsr #32
    5500:	032f1f2f 	teqeq	pc, #47, 30	; 0xbc
    5504:	5403201b 	strpl	r2, [r3], #-27
    5508:	581d0358 	ldmdapl	sp, {r3, r4, r6, r8, r9}
    550c:	01040200 	mrseq	r0, R12_usr
    5510:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    5514:	1f2b325b 	svcne	0x002b325b
    5518:	2a2f232d 	bcs	bce1d4 <_Min_Stack_Size+0xbcddd4>
    551c:	034f2f33 	movteq	r2, #65331	; 0xff33
    5520:	2b326609 	blcs	c9ed4c <_Min_Stack_Size+0xc9e94c>
    5524:	2f232d2d 	svccs	0x00232d2d
    5528:	6821332a 	stmdavs	r1!, {r1, r3, r5, r8, r9, ip, sp}
    552c:	03503048 	cmpeq	r0, #72	; 0x48
    5530:	51035816 	tstpl	r3, r6, lsl r8
    5534:	2f1f6758 	svccs	0x001f6758
    5538:	4c2e1403 	cfstrsmi	mvf1, [lr], #-12
    553c:	02003048 	andeq	r3, r0, #72	; 0x48
    5540:	00490104 	subeq	r0, r9, r4, lsl #2
    5544:	9f010402 	svcls	0x00010402
    5548:	01040200 	mrseq	r0, R12_usr
    554c:	040200df 	streq	r0, [r2], #-223	; 0xdf
    5550:	00089f01 	andeq	r9, r8, r1, lsl #30
    5554:	01980101 	orrseq	r0, r8, r1, lsl #2
    5558:	00020000 	andeq	r0, r2, r0
    555c:	0000012d 	andeq	r0, r0, sp, lsr #2
    5560:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5564:	0101000d 	tsteq	r1, sp
    5568:	00000101 	andeq	r0, r0, r1, lsl #2
    556c:	00000100 	andeq	r0, r0, r0, lsl #2
    5570:	2f2e2e01 	svccs	0x002e2e01
    5574:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5578:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    557c:	2f2e2e2f 	svccs	0x002e2e2f
    5580:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5584:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5588:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    558c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5590:	616d2f6d 	cmnvs	sp, sp, ror #30
    5594:	2f006874 	svccs	0x00006874
    5598:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    559c:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    55a0:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    55a4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55a8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    55ac:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    55b0:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    55b4:	31303274 	teqcc	r0, r4, ror r2
    55b8:	31383034 	teqcc	r8, r4, lsr r0
    55bc:	61312e38 	teqvs	r1, r8, lsr lr
    55c0:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    55c4:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    55c8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    55cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    55d0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    55d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    55d8:	616d2f65 	cmnvs	sp, r5, ror #30
    55dc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    55e0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    55e4:	2f2e2e2f 	svccs	0x002e2e2f
    55e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    55ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    55f0:	2f2e2e2f 	svccs	0x002e2e2f
    55f4:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    55f8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    55fc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5600:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5480 <_Min_Stack_Size+0x5080>
    5604:	2f687461 	svccs	0x00687461
    5608:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    560c:	6f6d6d6f 	svcvs	0x006d6d6f
    5610:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    5614:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5618:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    561c:	2f64646c 	svccs	0x0064646c
    5620:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5624:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5628:	302e312e 	eorcc	r3, lr, lr, lsr #2
    562c:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5630:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5634:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5638:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    563c:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5640:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5644:	2f62696c 	svccs	0x0062696c
    5648:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    564c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5650:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5654:	5f650000 	svcpl	0x00650000
    5658:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    565c:	0100632e 	tsteq	r0, lr, lsr #6
    5660:	645f0000 	ldrbvs	r0, [pc], #-0	; 5668 <_Min_Stack_Size+0x5268>
    5664:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    5668:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5670 <_Min_Stack_Size+0x5270>
    566c:	73657079 	cmnvc	r5, #121	; 0x79
    5670:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5674:	64660000 	strbtvs	r0, [r6], #-0
    5678:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    567c:	0300682e 	movweq	r6, #2094	; 0x82e
    5680:	616d0000 	cmnvs	sp, r0
    5684:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    5688:	00000400 	andeq	r0, r0, r0, lsl #8
    568c:	02050000 	andeq	r0, r5, #0
    5690:	0800b5a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, sp, pc}
    5694:	0100cc03 	tsteq	r0, r3, lsl #24
    5698:	372f2d33 			; <UNDEFINED> instruction: 0x372f2d33
    569c:	23223120 	teqcs	r2, #32, 2
    56a0:	9e1f0385 	cdpls	3, 1, cr0, cr15, cr5, {4}
    56a4:	67586203 	ldrbvs	r6, [r8, -r3, lsl #4]
    56a8:	c80a034b 	stmdagt	sl, {r0, r1, r3, r6, r8, r9}
    56ac:	2f3b67bb 	svccs	0x003b67bb
    56b0:	3b132f02 	blcc	4d12c0 <_Min_Stack_Size+0x4d0ec0>
    56b4:	1327022f 	teqne	r7, #-268435454	; 0xf0000002
    56b8:	332f574b 	teqcc	pc, #19660800	; 0x12c0000
    56bc:	2d2f4931 	stccs	9, cr4, [pc, #-196]!	; 5600 <_Min_Stack_Size+0x5200>
    56c0:	1e314767 	cdpne	7, 3, cr4, cr1, cr7, {3}
    56c4:	84081e22 	strhi	r1, [r8], #-3618	; 0xe22
    56c8:	2f1f1308 	svccs	0x001f1308
    56cc:	034bcad7 	movteq	ip, #47831	; 0xbad7
    56d0:	20035860 	andcs	r5, r3, r0, ror #16
    56d4:	74035808 	strvc	r5, [r3], #-2056	; 0x808
    56d8:	71038358 	tstvc	r3, r8, asr r3
    56dc:	3b4b9e08 	blcc	12ecf04 <_Min_Stack_Size+0x12ecb04>
    56e0:	132f022f 	teqne	pc, #-268435454	; 0xf0000002
    56e4:	27022f3b 	smladxcs	r2, fp, pc, r2	; <UNPREDICTABLE>
    56e8:	16036713 			; <UNDEFINED> instruction: 0x16036713
    56ec:	003d029e 	mlaseq	sp, lr, r2, r0
    56f0:	02df0101 	sbcseq	r0, pc, #1073741824	; 0x40000000
    56f4:	00020000 	andeq	r0, r2, r0
    56f8:	0000012c 	andeq	r0, r0, ip, lsr #2
    56fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5700:	0101000d 	tsteq	r1, sp
    5704:	00000101 	andeq	r0, r0, r1, lsl #2
    5708:	00000100 	andeq	r0, r0, r0, lsl #2
    570c:	2f2e2e01 	svccs	0x002e2e01
    5710:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5714:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5718:	2f2e2e2f 	svccs	0x002e2e2f
    571c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5720:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5724:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5728:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    572c:	616d2f6d 	cmnvs	sp, sp, ror #30
    5730:	2f006874 	svccs	0x00006874
    5734:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5738:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    573c:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5740:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5744:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5748:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    574c:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5750:	31303274 	teqcc	r0, r4, ror r2
    5754:	31383034 	teqcc	r8, r4, lsr r0
    5758:	61312e38 	teqvs	r1, r8, lsr lr
    575c:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5760:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5764:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5768:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    576c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5770:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5774:	616d2f65 	cmnvs	sp, r5, ror #30
    5778:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    577c:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    5780:	2f2e2e2f 	svccs	0x002e2e2f
    5784:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5788:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    578c:	2f2e2e2f 	svccs	0x002e2e2f
    5790:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5794:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5798:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    579c:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 561c <_Min_Stack_Size+0x521c>
    57a0:	2f687461 	svccs	0x00687461
    57a4:	632f2e2e 	teqvs	pc, #736	; 0x2e0
    57a8:	6f6d6d6f 	svcvs	0x006d6d6f
    57ac:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    57b0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    57b4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    57b8:	2f64646c 	svccs	0x0064646c
    57bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    57c0:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    57c4:	302e312e 	eorcc	r3, lr, lr, lsr #2
    57c8:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    57cc:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    57d0:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    57d4:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    57d8:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    57dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    57e0:	2f62696c 	svccs	0x0062696c
    57e4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    57e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    57ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    57f0:	5f650000 	svcpl	0x00650000
    57f4:	2e776f70 	mrccs	15, 3, r6, cr7, cr0, {3}
    57f8:	00010063 	andeq	r0, r1, r3, rrx
    57fc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    5800:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5804:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5808:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    580c:	00020068 	andeq	r0, r2, r8, rrx
    5810:	6c646600 	stclvs	6, cr6, [r4], #-0
    5814:	2e6d6269 	cdpcs	2, 6, cr6, cr13, cr9, {3}
    5818:	00030068 	andeq	r0, r3, r8, rrx
    581c:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
    5820:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5824:	00000004 	andeq	r0, r0, r4
    5828:	d0020500 	andle	r0, r2, r0, lsl #10
    582c:	030800b9 	movweq	r0, #32953	; 0x80b9
    5830:	030100ea 	movweq	r0, #4330	; 0x10ea
    5834:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    5838:	0325272e 	teqeq	r5, #12058624	; 0xb80000
    583c:	36202e74 			; <UNDEFINED> instruction: 0x36202e74
    5840:	272e7803 	strcs	r7, [lr, -r3, lsl #16]!
    5844:	7a033125 	bvc	d1ce0 <_Min_Stack_Size+0xd18e0>
    5848:	7a033420 	bvc	d28d0 <_Min_Stack_Size+0xd24d0>
    584c:	8b22263c 	blhi	88f144 <_Min_Stack_Size+0x88ed44>
    5850:	4a01c203 	bmi	76064 <_Min_Stack_Size+0x75c64>
    5854:	01040200 	mrseq	r0, R12_usr
    5858:	587ec103 	ldmdapl	lr!, {r0, r1, r8, lr, pc}^
    585c:	ac0b03c9 	stcge	3, cr0, [fp], {201}	; 0xc9
    5860:	2010032d 	andscs	r0, r0, sp, lsr #6
    5864:	67694421 	strbvs	r4, [r9, -r1, lsr #8]!
    5868:	004b766c 	subeq	r7, fp, ip, ror #12
    586c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5870:	12030674 	andne	r0, r3, #116, 12	; 0x7400000
    5874:	6767774a 	strbvs	r7, [r7, -sl, asr #14]!
    5878:	01040200 	mrseq	r0, R12_usr
    587c:	04020087 	streq	r0, [r2], #-135	; 0x87
    5880:	b5032901 	strlt	r2, [r3, #-2305]	; 0x901
    5884:	c203ac7f 	andgt	sl, r3, #32512	; 0x7f00
    5888:	c4035801 	strgt	r5, [r3], #-2049	; 0x801
    588c:	bc03587e 	stclt	8, cr5, [r3], {126}	; 0x7e
    5890:	c4034a01 	strgt	r4, [r3], #-2561	; 0xa01
    5894:	0a033c7e 	beq	d4a94 <_Min_Stack_Size+0xd4694>
    5898:	2f67672e 	svccs	0x0067672e
    589c:	79035959 	stmdbvc	r3, {r0, r3, r4, r6, r8, fp, ip, lr}
    58a0:	2e1203ac 	cdpcs	3, 1, cr0, cr2, cr12, {5}
    58a4:	13037584 	movwne	r7, #13700	; 0x3584
    58a8:	912f3d90 			; <UNDEFINED> instruction: 0x912f3d90
    58ac:	01040200 	mrseq	r0, R12_usr
    58b0:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    58b4:	0200d662 	andeq	sp, r0, #102760448	; 0x6200000
    58b8:	58060104 	stmdapl	r6, {r2, r8}
    58bc:	ac680306 	stclge	3, cr0, [r8], #-24	; 0xffffffe8
    58c0:	032e0e03 	teqeq	lr, #3, 28	; 0x30
    58c4:	3a4a00c0 	bcc	1285bcc <_Min_Stack_Size+0x12857cc>
    58c8:	2fc92130 	svccs	0x00c92130
    58cc:	1c324631 	ldcne	6, cr4, [r2], #-196	; 0xffffff3c
    58d0:	2f234723 	svccs	0x00234723
    58d4:	33ab593d 			; <UNDEFINED> instruction: 0x33ab593d
    58d8:	2d9f4d8d 	ldccs	13, cr4, [pc, #564]	; 5b14 <_Min_Stack_Size+0x5714>
    58dc:	1d87d72f 	stcne	7, cr13, [r7, #188]	; 0xbc
    58e0:	22695531 	rsbcs	r5, r9, #205520896	; 0xc400000
    58e4:	2f81302c 	svccs	0x0081302c
    58e8:	67f4bb2d 	ldrbvs	fp, [r4, sp, lsr #22]!
    58ec:	40022f2d 	andmi	r2, r2, sp, lsr #30
    58f0:	bb2f2d13 	bllt	bd0d44 <_Min_Stack_Size+0xbd0944>
    58f4:	49592f1f 	ldmdbmi	r9, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
    58f8:	673f672f 	ldrvs	r6, [pc, -pc, lsr #14]!
    58fc:	23552f1f 	cmpcs	r5, #31, 30	; 0x7c
    5900:	bc15082b 	ldclt	8, cr0, [r5], {43}	; 0x2b
    5904:	303a2267 	eorscc	r2, sl, r7, ror #4
    5908:	482f3b2f 	stmdami	pc!, {r0, r1, r2, r3, r5, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
    590c:	08ae2c22 	stmiaeq	lr!, {r1, r5, sl, fp, sp}
    5910:	2f221e4c 	svccs	0x00221e4c
    5914:	21f32f73 	mvnscs	r2, r3, ror pc
    5918:	40082f2d 	andmi	r2, r8, sp, lsr #30
    591c:	08834e67 	stmeq	r3, {r0, r1, r2, r5, r6, r9, sl, fp, lr}
    5920:	752f1fad 	strvc	r1, [pc, #-4013]!	; 497b <_Min_Stack_Size+0x457b>
    5924:	212f5668 	teqcs	pc, r8, ror #12
    5928:	0d03772f 	stceq	7, cr7, [r3, #-188]	; 0xffffff44
    592c:	67318208 	ldrvs	r8, [r1, -r8, lsl #4]!
    5930:	2d312c30 	ldccs	12, cr2, [r1, #-192]!	; 0xffffff40
    5934:	3b2f2d2f 	blcc	bd0df8 <_Min_Stack_Size+0xbd09f8>
    5938:	302f1e30 	eorcc	r1, pc, r0, lsr lr	; <UNPREDICTABLE>
    593c:	21bd3d2d 			; <UNDEFINED> instruction: 0x21bd3d2d
    5940:	1f2f2149 	svcne	0x002f2149
    5944:	67f3082f 	ldrbvs	r0, [r3, pc, lsr #16]!
    5948:	1f832f2d 	svcne	0x00832f2d
    594c:	2f3b592f 	svccs	0x003b592f
    5950:	02132e02 	andseq	r2, r3, #2, 28
    5954:	21bc1327 			; <UNDEFINED> instruction: 0x21bc1327
    5958:	302d322b 	eorcc	r3, sp, fp, lsr #4
    595c:	027eeb03 	rsbseq	lr, lr, #3072	; 0xc00
    5960:	033d015a 	teqeq	sp, #-2147483626	; 0x80000016
    5964:	032e0195 	teqeq	lr, #1073741861	; 0x40000025
    5968:	003c7eeb 	eorseq	r7, ip, fp, ror #29
    596c:	03010402 	movweq	r0, #5122	; 0x1402
    5970:	d2032e1e 	andle	r2, r3, #480	; 0x1e0
    5974:	85914a00 	ldrhi	r4, [r1, #2560]	; 0xa00
    5978:	01040200 	mrseq	r0, R12_usr
    597c:	0306c806 	movweq	ip, #26630	; 0x6806
    5980:	9903f26b 	stmdbls	r3, {r0, r1, r3, r5, r6, r9, ip, sp, lr, pc}
    5984:	2a03587f 	bcs	dbb88 <_Min_Stack_Size+0xdb788>
    5988:	84777590 	ldrbthi	r7, [r7], #-1424	; 0x590
    598c:	3b2f303a 	blcc	bd1a7c <_Min_Stack_Size+0xbd167c>
    5990:	2c22482f 	stccs	8, cr4, [r2], #-188	; 0xffffff44
    5994:	c9142802 	ldmdbgt	r4, {r1, fp, sp}
    5998:	2f2d2167 	svccs	0x002d2167
    599c:	01040200 	mrseq	r0, R12_usr
    59a0:	00c85d03 	sbceq	r5, r8, r3, lsl #26
    59a4:	03010402 	movweq	r0, #5122	; 0x1402
    59a8:	039e00e5 	orrseq	r0, lr, #229	; 0xe5
    59ac:	0381f20f 	orreq	pc, r1, #-268435456	; 0xf0000000
    59b0:	212e7eed 	teqcs	lr, sp, ror #29
    59b4:	4a760359 	bmi	1d86720 <_Min_Stack_Size+0x1d86320>
    59b8:	2f4a2c03 	svccs	0x004a2c03
    59bc:	4a540349 	bmi	15066e8 <_Min_Stack_Size+0x15062e8>
    59c0:	01040200 	mrseq	r0, R12_usr
    59c4:	4a01b103 	bmi	71dd8 <_Min_Stack_Size+0x719d8>
    59c8:	01040200 	mrseq	r0, R12_usr
    59cc:	667ed903 	ldrbtvs	sp, [lr], -r3, lsl #18
    59d0:	01002602 	tsteq	r0, r2, lsl #12
    59d4:	00017a01 	andeq	r7, r1, r1, lsl #20
    59d8:	e0000200 	and	r0, r0, r0, lsl #4
    59dc:	02000000 	andeq	r0, r0, #0
    59e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    59e4:	01010100 	mrseq	r0, (UNDEF: 17)
    59e8:	00000001 	andeq	r0, r0, r1
    59ec:	01000001 	tsteq	r0, r1
    59f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    59f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    59f8:	2f2e2e2f 	svccs	0x002e2e2f
    59fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a04:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a08:	2f62696c 	svccs	0x0062696c
    5a0c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5a10:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5a14:	622f0068 	eorvs	r0, pc, #104	; 0x68
    5a18:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5a1c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5a20:	2f64646c 	svccs	0x0064646c
    5a24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5a28:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5a2c:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5a30:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5a34:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5a38:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5a3c:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5a40:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5a44:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a48:	2f62696c 	svccs	0x0062696c
    5a4c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5a50:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5a54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5a58:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5a5c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    5a60:	2f2e2e00 	svccs	0x002e2e00
    5a64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a6c:	2f2e2e2f 	svccs	0x002e2e2f
    5a70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a74:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5a78:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5a7c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5a80:	616d2f6d 	cmnvs	sp, sp, ror #30
    5a84:	2e2f6874 	mcrcs	8, 1, r6, cr15, cr4, {3}
    5a88:	6f632f2e 	svcvs	0x00632f2e
    5a8c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5a90:	5f650000 	svcpl	0x00650000
    5a94:	74727173 	ldrbtvc	r7, [r2], #-371	; 0x173
    5a98:	0100632e 	tsteq	r0, lr, lsr #6
    5a9c:	645f0000 	ldrbvs	r0, [pc], #-0	; 5aa4 <_Min_Stack_Size+0x56a4>
    5aa0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    5aa4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5aac <_Min_Stack_Size+0x56ac>
    5aa8:	73657079 	cmnvc	r5, #121	; 0x79
    5aac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5ab0:	64660000 	strbtvs	r0, [r6], #-0
    5ab4:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5ab8:	0300682e 	movweq	r6, #2094	; 0x82e
    5abc:	00000000 	andeq	r0, r0, r0
    5ac0:	c5200205 	strgt	r0, [r0, #-517]!	; 0x205
    5ac4:	e3030800 	movw	r0, #14336	; 0x3800
    5ac8:	09030100 	stmdbeq	r3, {r8}
    5acc:	2e770301 	cdpcs	3, 7, cr0, cr7, cr1, {0}
    5ad0:	032e0903 	teqeq	lr, #49152	; 0xc000
    5ad4:	31349077 	teqcc	r4, r7, ror r0
    5ad8:	0a033533 	beq	d2fac <_Min_Stack_Size+0xd2bac>
    5adc:	301f302e 	andscc	r3, pc, lr, lsr #32
    5ae0:	362d312c 	strtcc	r3, [sp], -ip, lsr #2
    5ae4:	2124392c 	teqcs	r4, ip, lsr #18
    5ae8:	2131221f 	teqcs	r1, pc, lsl r2
    5aec:	223b2b25 	eorscs	r2, fp, #37888	; 0x9400
    5af0:	302d281b 	eorcc	r2, sp, fp, lsl r8
    5af4:	032e7703 	teqeq	lr, #786432	; 0xc0000
    5af8:	4b217413 	blmi	862b4c <_Min_Stack_Size+0x86274c>
    5afc:	75033021 	strvc	r3, [r3, #-33]	; 0x21
    5b00:	200d0320 	andcs	r0, sp, r0, lsr #6
    5b04:	74032f2c 	strvc	r2, [r3], #-3884	; 0xf2c
    5b08:	301e232e 	andscc	r2, lr, lr, lsr #6
    5b0c:	01040200 	mrseq	r0, R12_usr
    5b10:	4c062006 	stcmi	0, cr2, [r6], {6}
    5b14:	02002f49 	andeq	r2, r0, #292	; 0x124
    5b18:	20060104 	andcs	r0, r6, r4, lsl #2
    5b1c:	740c0306 	strvc	r0, [ip], #-774	; 0x306
    5b20:	304d5d32 	subcc	r5, sp, r2, lsr sp
    5b24:	3d3e4c2c 	ldccc	12, cr4, [lr, #-176]!	; 0xffffff50
    5b28:	2e7fb303 	cdpcs	3, 7, cr11, cr15, cr3, {0}
    5b2c:	211f364b 	tstcs	pc, fp, asr #12
    5b30:	0402001e 	streq	r0, [r2], #-30
    5b34:	02003201 	andeq	r3, r0, #268435456	; 0x10000000
    5b38:	3c060204 	sfmcc	f0, 4, [r6], {4}
    5b3c:	223b9206 	eorscs	r9, fp, #1610612736	; 0x60000000
    5b40:	032e6d03 	teqeq	lr, #3, 26	; 0xc0
    5b44:	039e00d3 	orrseq	r0, lr, #211	; 0xd3
    5b48:	032e7fbd 	teqeq	lr, #756	; 0x2f4
    5b4c:	0a024a77 	beq	98530 <_Min_Stack_Size+0x98130>
    5b50:	0c010100 	stfeqs	f0, [r1], {-0}
    5b54:	02000001 	andeq	r0, r0, #1
    5b58:	0000f500 	andeq	pc, r0, r0, lsl #10
    5b5c:	fb010200 	blx	46366 <_Min_Stack_Size+0x45f66>
    5b60:	01000d0e 	tsteq	r0, lr, lsl #26
    5b64:	00010101 	andeq	r0, r1, r1, lsl #2
    5b68:	00010000 	andeq	r0, r1, r0
    5b6c:	2e2e0100 	sufcse	f0, f6, f0
    5b70:	2f2e2e2f 	svccs	0x002e2e2f
    5b74:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b78:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b7c:	2f2e2e2f 	svccs	0x002e2e2f
    5b80:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5b84:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5b88:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5b8c:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5b90:	6f6d6d6f 	svcvs	0x006d6d6f
    5b94:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    5b98:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5b9c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5ba0:	2f64646c 	svccs	0x0064646c
    5ba4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ba8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5bac:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5bb0:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5bb4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5bb8:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5bbc:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5bc0:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5bc4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5bc8:	2f62696c 	svccs	0x0062696c
    5bcc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5bd0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5bd4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5bd8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5bdc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    5be0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    5be4:	2f646c69 	svccs	0x00646c69
    5be8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5bec:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5bf0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5bf4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5bf8:	2b302e31 	blcs	c114c4 <_Min_Stack_Size+0xc110c4>
    5bfc:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5c00:	30343130 	eorscc	r3, r4, r0, lsr r1
    5c04:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    5c08:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5c0c:	2f623332 	svccs	0x00623332
    5c10:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5c14:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5a78 <_Min_Stack_Size+0x5678>
    5c18:	2f636269 	svccs	0x00636269
    5c1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5c20:	00656475 	rsbeq	r6, r5, r5, ror r4
    5c24:	665f7300 	ldrbvs	r7, [pc], -r0, lsl #6
    5c28:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    5c2c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    5c30:	5f000001 	svcpl	0x00000001
    5c34:	61666564 	cmnvs	r6, r4, ror #10
    5c38:	5f746c75 	svcpl	0x00746c75
    5c3c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5c40:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5c44:	6d000002 	stcvs	0, cr0, [r0, #-8]
    5c48:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5c4c:	00030068 	andeq	r0, r3, r8, rrx
    5c50:	05000000 	streq	r0, [r0, #-0]
    5c54:	00c6a002 	sbceq	sl, r6, r2
    5c58:	011c0308 	tsteq	ip, r8, lsl #6
    5c5c:	02024b15 	andeq	r4, r2, #21504	; 0x5400
    5c60:	1e010100 	adfnes	f0, f1, f0
    5c64:	02000001 	andeq	r0, r0, #1
    5c68:	0000f900 	andeq	pc, r0, r0, lsl #18
    5c6c:	fb010200 	blx	46476 <_Min_Stack_Size+0x46076>
    5c70:	01000d0e 	tsteq	r0, lr, lsl #26
    5c74:	00010101 	andeq	r0, r1, r1, lsl #2
    5c78:	00010000 	andeq	r0, r1, r0
    5c7c:	2e2e0100 	sufcse	f0, f6, f0
    5c80:	2f2e2e2f 	svccs	0x002e2e2f
    5c84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5c88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c8c:	2f2e2e2f 	svccs	0x002e2e2f
    5c90:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5c94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5c98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5c9c:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5ca0:	6f6d6d6f 	svcvs	0x006d6d6f
    5ca4:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    5ca8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5cac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5cb0:	2f64646c 	svccs	0x0064646c
    5cb4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5cb8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5cbc:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5cc0:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5cc4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5cc8:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    5ccc:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5cd0:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5cd4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5cd8:	2f62696c 	svccs	0x0062696c
    5cdc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5ce0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5ce4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5ce8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5cec:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    5cf0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    5cf4:	2f646c69 	svccs	0x00646c69
    5cf8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5cfc:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5d00:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5d04:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5d08:	2b302e31 	blcs	c115d4 <_Min_Stack_Size+0xc111d4>
    5d0c:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5d10:	30343130 	eorscc	r3, r4, r0, lsr r1
    5d14:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    5d18:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5d1c:	2f623332 	svccs	0x00623332
    5d20:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5d24:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5b88 <_Min_Stack_Size+0x5788>
    5d28:	2f636269 	svccs	0x00636269
    5d2c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5d30:	00656475 	rsbeq	r6, r5, r5, ror r4
    5d34:	665f7300 	ldrbvs	r7, [pc], -r0, lsl #6
    5d38:	616c6370 	smcvs	50736	; 0xc630
    5d3c:	66697373 			; <UNDEFINED> instruction: 0x66697373
    5d40:	00632e79 	rsbeq	r2, r3, r9, ror lr
    5d44:	5f000001 	svcpl	0x00000001
    5d48:	61666564 	cmnvs	r6, r4, ror #10
    5d4c:	5f746c75 	svcpl	0x00746c75
    5d50:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5d54:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5d58:	6d000002 	stcvs	0, cr0, [r0, #-8]
    5d5c:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    5d60:	00030068 	andeq	r0, r3, r8, rrx
    5d64:	05000000 	streq	r0, [r0, #-0]
    5d68:	00c6ac02 	sbceq	sl, r6, r2, lsl #24
    5d6c:	010a0308 	tsteq	sl, r8, lsl #6
    5d70:	02003e17 	andeq	r3, r0, #368	; 0x170
    5d74:	932c0104 	teqls	ip, #4, 2
    5d78:	263f2fa0 	ldrtcs	r2, [pc], -r0, lsr #31
    5d7c:	3c78031b 	ldclcc	3, cr0, [r8], #-108	; 0xffffff94
    5d80:	01000602 	tsteq	r0, r2, lsl #12
    5d84:	00009d01 	andeq	r9, r0, r1, lsl #26
    5d88:	97000200 	strls	r0, [r0, -r0, lsl #4]
    5d8c:	02000000 	andeq	r0, r0, #0
    5d90:	0d0efb01 	vstreq	d15, [lr, #-4]
    5d94:	01010100 	mrseq	r0, (UNDEF: 17)
    5d98:	00000001 	andeq	r0, r0, r1
    5d9c:	01000001 	tsteq	r0, r1
    5da0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5da4:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5da8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5dac:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    5db0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5db4:	312e322d 	teqcc	lr, sp, lsr #4
    5db8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5dbc:	30327469 	eorscc	r7, r2, r9, ror #8
    5dc0:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5dc4:	312e3831 	teqcc	lr, r1, lsr r8
    5dc8:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5dcc:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    5dd0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5dd4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5dd8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5ddc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    5de0:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    5de4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5de8:	2f2e2e2f 	svccs	0x002e2e2f
    5dec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5df0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5df4:	2f2e2e2f 	svccs	0x002e2e2f
    5df8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5dfc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5c60 <_Min_Stack_Size+0x5860>
    5e00:	2f6d6269 	svccs	0x006d6269
    5e04:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5e08:	00006e6f 	andeq	r6, r0, pc, ror #28
    5e0c:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5e10:	0100682e 	tsteq	r0, lr, lsr #16
    5e14:	5f730000 	svcpl	0x00730000
    5e18:	5f62696c 	svcpl	0x0062696c
    5e1c:	2e726576 	mrccs	5, 3, r6, cr2, cr6, {3}
    5e20:	00020063 	andeq	r0, r2, r3, rrx
    5e24:	00ae0000 	adceq	r0, lr, r0
    5e28:	00020000 	andeq	r0, r2, r0
    5e2c:	00000097 	muleq	r0, r7, r0
    5e30:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e34:	0101000d 	tsteq	r1, sp
    5e38:	00000101 	andeq	r0, r0, r1, lsl #2
    5e3c:	00000100 	andeq	r0, r0, r0, lsl #2
    5e40:	2f2e2e01 	svccs	0x002e2e01
    5e44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5e48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e4c:	2f2e2e2f 	svccs	0x002e2e2f
    5e50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5e54:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5e58:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5e60:	6f632f6d 	svcvs	0x00632f6d
    5e64:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5e68:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    5e6c:	2f646c69 	svccs	0x00646c69
    5e70:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5e74:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    5e78:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5e7c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5e80:	2b302e31 	blcs	c1174c <_Min_Stack_Size+0xc1134c>
    5e84:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5e88:	30343130 	eorscc	r3, r4, r0, lsr r1
    5e8c:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    5e90:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    5e94:	2f623332 	svccs	0x00623332
    5e98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5e9c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5d00 <_Min_Stack_Size+0x5900>
    5ea0:	2f636269 	svccs	0x00636269
    5ea4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5ea8:	00656475 	rsbeq	r6, r5, r5, ror r4
    5eac:	6d5f7300 	ldclvs	3, cr7, [pc, #-0]	; 5eb4 <_Min_Stack_Size+0x5ab4>
    5eb0:	65687461 	strbvs	r7, [r8, #-1121]!	; 0x461
    5eb4:	632e7272 	teqvs	lr, #536870919	; 0x20000007
    5eb8:	00000100 	andeq	r0, r0, r0, lsl #2
    5ebc:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5ec0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5ec4:	00000000 	andeq	r0, r0, r0
    5ec8:	c6fc0205 	ldrbtgt	r0, [ip], r5, lsl #4
    5ecc:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    5ed0:	02160100 	andseq	r0, r6, #0, 2
    5ed4:	01010002 	tsteq	r1, r2
    5ed8:	000000ab 	andeq	r0, r0, fp, lsr #1
    5edc:	00930002 	addseq	r0, r3, r2
    5ee0:	01020000 	mrseq	r0, (UNDEF: 2)
    5ee4:	000d0efb 	strdeq	r0, [sp], -fp
    5ee8:	01010101 	tsteq	r1, r1, lsl #2
    5eec:	01000000 	mrseq	r0, (UNDEF: 0)
    5ef0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5ef4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ef8:	2f2e2e2f 	svccs	0x002e2e2f
    5efc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5f00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f04:	2f2e2e2f 	svccs	0x002e2e2f
    5f08:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5f0c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5d70 <_Min_Stack_Size+0x5970>
    5f10:	2f6d6269 	svccs	0x006d6269
    5f14:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5f18:	2f006e6f 	svccs	0x00006e6f
    5f1c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5f20:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5f24:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5f28:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5f2c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5f30:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5f34:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5f38:	31303274 	teqcc	r0, r4, ror r2
    5f3c:	31383034 	teqcc	r8, r4, lsr r0
    5f40:	61312e38 	teqvs	r1, r8, lsr lr
    5f44:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5f48:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    5f4c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5f50:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5f54:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5f58:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5f5c:	73000065 	movwvc	r0, #101	; 0x65
    5f60:	6e616e5f 	mcrvs	14, 3, r6, cr1, cr15, {2}
    5f64:	0100632e 	tsteq	r0, lr, lsr #6
    5f68:	616d0000 	cmnvs	sp, r0
    5f6c:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    5f70:	00000200 	andeq	r0, r0, r0, lsl #4
    5f74:	02050000 	andeq	r0, r5, #0
    5f78:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
    5f7c:	03012803 	movweq	r2, #6147	; 0x1803
    5f80:	05020109 	streq	r0, [r2, #-265]	; 0x109
    5f84:	6c010100 	stfvss	f0, [r1], {-0}
    5f88:	02000001 	andeq	r0, r0, #1
    5f8c:	00011400 	andeq	r1, r1, r0, lsl #8
    5f90:	fb010200 	blx	4679a <_Min_Stack_Size+0x4639a>
    5f94:	01000d0e 	tsteq	r0, lr, lsl #26
    5f98:	00010101 	andeq	r0, r1, r1, lsl #2
    5f9c:	00010000 	andeq	r0, r1, r0
    5fa0:	2e2e0100 	sufcse	f0, f6, f0
    5fa4:	2f2e2e2f 	svccs	0x002e2e2f
    5fa8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5fac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5fb0:	2f2e2e2f 	svccs	0x002e2e2f
    5fb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5fb8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5fbc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5fc0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5fc4:	616d2f6d 	cmnvs	sp, sp, ror #30
    5fc8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5fcc:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    5fd0:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    5fd4:	2f2e2e2f 	svccs	0x002e2e2f
    5fd8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5fdc:	2f006e6f 	svccs	0x00006e6f
    5fe0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5fe4:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5fe8:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5fec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5ff0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5ff4:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5ff8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5ffc:	31303274 	teqcc	r0, r4, ror r2
    6000:	31383034 	teqcc	r8, r4, lsr r0
    6004:	61312e38 	teqvs	r1, r8, lsr lr
    6008:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    600c:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    6010:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6014:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6018:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    601c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    6020:	616d2f65 	cmnvs	sp, r5, ror #30
    6024:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6028:	622f0065 	eorvs	r0, pc, #101	; 0x65
    602c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    6030:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6034:	2f64646c 	svccs	0x0064646c
    6038:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    603c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6040:	302e312e 	eorcc	r3, lr, lr, lsr #2
    6044:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    6048:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    604c:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    6050:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    6054:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    6058:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    605c:	2f62696c 	svccs	0x0062696c
    6060:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6064:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6068:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    606c:	5f730000 	svcpl	0x00730000
    6070:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    6074:	0100632e 	tsteq	r0, lr, lsr #6
    6078:	645f0000 	ldrbvs	r0, [pc], #-0	; 6080 <_Min_Stack_Size+0x5c80>
    607c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    6080:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6088 <_Min_Stack_Size+0x5c88>
    6084:	73657079 	cmnvc	r5, #121	; 0x79
    6088:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    608c:	64660000 	strbtvs	r0, [r6], #-0
    6090:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    6094:	0100682e 	tsteq	r0, lr, lsr #16
    6098:	616d0000 	cmnvs	sp, r0
    609c:	682e6874 	stmdavs	lr!, {r2, r4, r5, r6, fp, sp, lr}
    60a0:	00000300 	andeq	r0, r0, r0, lsl #6
    60a4:	02050000 	andeq	r0, r5, #0
    60a8:	0800c70c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr, pc}
    60ac:	0100d703 	tsteq	r0, r3, lsl #14
    60b0:	78034b35 	stmdavc	r3, {r0, r2, r4, r5, r8, r9, fp, lr}
    60b4:	3d332020 	ldccc	0, cr2, [r3, #-128]!	; 0xffffff80
    60b8:	0c032130 	stfeqs	f2, [r3], {48}	; 0x30
    60bc:	214b592e 	cmpcs	fp, lr, lsr #18
    60c0:	0e03735b 	mcreq	3, 0, r7, cr3, cr11, {2}
    60c4:	2d216566 	cfstr32cs	mvfx6, [r1, #-408]!	; 0xfffffe68
    60c8:	0367672f 	cmneq	r7, #12320768	; 0xbc0000
    60cc:	032f3c74 	teqeq	pc, #116, 24	; 0x7400
    60d0:	20033c6b 	andcs	r3, r3, fp, ror #24
    60d4:	3c78032e 	ldclcc	3, cr0, [r8], #-184	; 0xffffff48
    60d8:	03212f59 	teqeq	r1, #356	; 0x164
    60dc:	3e4bac65 	cdpcc	12, 4, cr10, cr11, cr5, {3}
    60e0:	2b222c30 	blcs	8911a8 <_Min_Stack_Size+0x890da8>
    60e4:	2f2d3021 	svccs	0x002d3021
    60e8:	004b6883 	subeq	r6, fp, r3, lsl #17
    60ec:	03010402 	movweq	r0, #5122	; 0x1402
    60f0:	0302200c 	movweq	r2, #8204	; 0x200c
    60f4:	4b010100 	blmi	464fc <_Min_Stack_Size+0x460fc>
    60f8:	02000001 	andeq	r0, r0, #1
    60fc:	00010100 	andeq	r0, r1, r0, lsl #2
    6100:	fb010200 	blx	4690a <_Min_Stack_Size+0x4650a>
    6104:	01000d0e 	tsteq	r0, lr, lsl #26
    6108:	00010101 	andeq	r0, r1, r1, lsl #2
    610c:	00010000 	andeq	r0, r1, r0
    6110:	2e2e0100 	sufcse	f0, f6, f0
    6114:	2f2e2e2f 	svccs	0x002e2e2f
    6118:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    611c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6120:	2f2e2e2f 	svccs	0x002e2e2f
    6124:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    6128:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    612c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6130:	632f6d62 	teqvs	pc, #6272	; 0x1880
    6134:	6f6d6d6f 	svcvs	0x006d6d6f
    6138:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    613c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    6140:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6144:	2f64646c 	svccs	0x0064646c
    6148:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    614c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6150:	302e312e 	eorcc	r3, lr, lr, lsr #2
    6154:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    6158:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    615c:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    6160:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    6164:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    6168:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    616c:	2f62696c 	svccs	0x0062696c
    6170:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6174:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6178:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    617c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    6180:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    6184:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    6188:	2f646c69 	svccs	0x00646c69
    618c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6190:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    6194:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6198:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    619c:	2b302e31 	blcs	c11a68 <_Min_Stack_Size+0xc11668>
    61a0:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    61a4:	30343130 	eorscc	r3, r4, r0, lsr r1
    61a8:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    61ac:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    61b0:	2f623332 	svccs	0x00623332
    61b4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    61b8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 601c <_Min_Stack_Size+0x5c1c>
    61bc:	2f636269 	svccs	0x00636269
    61c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    61c4:	00656475 	rsbeq	r6, r5, r5, ror r4
    61c8:	735f7300 	cmpvc	pc, #0, 6
    61cc:	626c6163 	rsbvs	r6, ip, #-1073741800	; 0xc0000018
    61d0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    61d4:	5f000001 	svcpl	0x00000001
    61d8:	61666564 	cmnvs	r6, r4, ror #10
    61dc:	5f746c75 	svcpl	0x00746c75
    61e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    61e4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    61e8:	66000002 	strvs	r0, [r0], -r2
    61ec:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    61f0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    61f4:	6d000001 	stcvs	0, cr0, [r0, #-4]
    61f8:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
    61fc:	00030068 	andeq	r0, r3, r8, rrx
    6200:	05000000 	streq	r0, [r0, #-0]
    6204:	00c83002 	sbceq	r3, r8, r2
    6208:	00d30308 	sbcseq	r0, r3, r8, lsl #6
    620c:	2e2b1501 	cfsh64cs	mvdx1, mvdx11, #1
    6210:	4b21223e 	blmi	84eb10 <_Min_Stack_Size+0x84e710>
    6214:	1f315569 	svcne	0x00315569
    6218:	0021253b 	eoreq	r2, r1, fp, lsr r5
    621c:	06010402 	streq	r0, [r1], -r2, lsl #8
    6220:	4bd4064a 	blmi	ff507b50 <_estack+0xdf4d7b50>
    6224:	032f4b21 	teqeq	pc, #33792	; 0x8400
    6228:	78039e09 	stmdavc	r3, {r0, r3, r9, sl, fp, ip, pc}
    622c:	2d3d3d2e 	ldccs	13, cr3, [sp, #-184]!	; 0xffffff48
    6230:	04020022 	streq	r0, [r2], #-34	; 0x22
    6234:	ba780301 	blt	1e06e40 <_Min_Stack_Size+0x1e06a40>
    6238:	49660b03 	stmdbmi	r6!, {r0, r1, r8, r9, fp}^
    623c:	2f1f2f21 	svccs	0x001f2f21
    6240:	0017026f 	andseq	r0, r7, pc, ror #4
    6244:	011b0101 	tsteq	fp, r1, lsl #2
    6248:	00020000 	andeq	r0, r2, r0
    624c:	00000103 	andeq	r0, r0, r3, lsl #2
    6250:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6254:	0101000d 	tsteq	r1, sp
    6258:	00000101 	andeq	r0, r0, r1, lsl #2
    625c:	00000100 	andeq	r0, r0, r0, lsl #2
    6260:	2f2e2e01 	svccs	0x002e2e01
    6264:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6268:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    626c:	2f2e2e2f 	svccs	0x002e2e2f
    6270:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6274:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    6278:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    627c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6280:	6f632f6d 	svcvs	0x00632f6d
    6284:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    6288:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xf00
    628c:	2f646c69 	svccs	0x00646c69
    6290:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6294:	6e2f6464 	cdpvs	4, 2, cr6, cr15, cr4, {3}
    6298:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    629c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    62a0:	2b302e31 	blcs	c11b6c <_Min_Stack_Size+0xc1176c>
    62a4:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    62a8:	30343130 	eorscc	r3, r4, r0, lsr r1
    62ac:	2e383138 	mrccs	1, 1, r3, cr8, cr8, {1}
    62b0:	33386131 	teqcc	r8, #1073741836	; 0x4000000c
    62b4:	2f623332 	svccs	0x00623332
    62b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    62bc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6120 <_Min_Stack_Size+0x5d20>
    62c0:	2f636269 	svccs	0x00636269
    62c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    62c8:	2f656475 	svccs	0x00656475
    62cc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    62d0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    62d4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    62d8:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    62dc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    62e0:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    62e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    62e8:	312e322d 	teqcc	lr, sp, lsr #4
    62ec:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    62f0:	30327469 	eorscc	r7, r2, r9, ror #8
    62f4:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    62f8:	312e3831 	teqcc	lr, r1, lsr r8
    62fc:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    6300:	6e2f6233 	mcrvs	2, 1, r6, cr15, cr3, {1}
    6304:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6308:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    630c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6310:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    6314:	00006564 	andeq	r6, r0, r4, ror #10
    6318:	6f635f73 	svcvs	0x00635f73
    631c:	69737970 	ldmdbvs	r3!, {r4, r5, r6, r8, fp, ip, sp, lr}^
    6320:	632e6e67 	teqvs	lr, #1648	; 0x670
    6324:	00000100 	andeq	r0, r0, r0, lsl #2
    6328:	696c6466 	stmdbvs	ip!, {r1, r2, r5, r6, sl, sp, lr}^
    632c:	682e6d62 	stmdavs	lr!, {r1, r5, r6, r8, sl, fp, sp, lr}
    6330:	00000100 	andeq	r0, r0, r0, lsl #2
    6334:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6338:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    633c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6340:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6344:	00000200 	andeq	r0, r0, r0, lsl #4
    6348:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    634c:	0300682e 	movweq	r6, #2094	; 0x82e
    6350:	00000000 	andeq	r0, r0, r0
    6354:	c9480205 	stmdbgt	r8, {r0, r2, r9}^
    6358:	c9030800 	stmdbgt	r3, {fp}
    635c:	68240100 	stmdavs	r4!, {r8}
    6360:	01000202 	tsteq	r0, r2, lsl #4
    6364:	00010201 	andeq	r0, r1, r1, lsl #4
    6368:	eb000200 	bl	6b70 <_Min_Stack_Size+0x6770>
    636c:	02000000 	andeq	r0, r0, #0
    6370:	0d0efb01 	vstreq	d15, [lr, #-4]
    6374:	01010100 	mrseq	r0, (UNDEF: 17)
    6378:	00000001 	andeq	r0, r0, r1
    637c:	01000001 	tsteq	r0, r1
    6380:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6384:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6388:	2f2e2e2f 	svccs	0x002e2e2f
    638c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6390:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6394:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6398:	2f62696c 	svccs	0x0062696c
    639c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    63a0:	7272652f 	rsbsvc	r6, r2, #197132288	; 0xbc00000
    63a4:	2f006f6e 	svccs	0x00006f6e
    63a8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    63ac:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    63b0:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    63b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    63b8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    63bc:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    63c0:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    63c4:	31303274 	teqcc	r0, r4, ror r2
    63c8:	31383034 	teqcc	r8, r4, lsr r0
    63cc:	61312e38 	teqvs	r1, r8, lsr lr
    63d0:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    63d4:	656e2f62 	strbvs	r2, [lr, #-3938]!	; 0xf62
    63d8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    63dc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    63e0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    63e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    63e8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    63ec:	752f0073 	strvc	r0, [pc, #-115]!	; 6381 <_Min_Stack_Size+0x5f81>
    63f0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 622c <_Min_Stack_Size+0x5e2c>
    63f4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    63f8:	612f6363 	teqvs	pc, r3, ror #6
    63fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6400:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6404:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6408:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    640c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6410:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    6414:	72650000 	rsbvc	r0, r5, #0
    6418:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    641c:	00010063 	andeq	r0, r1, r3, rrx
    6420:	636f6c00 	cmnvs	pc, #0, 24
    6424:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6428:	5f000002 	svcpl	0x00000002
    642c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    6430:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6434:	73000002 	movwvc	r0, #2
    6438:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    643c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6440:	72000003 	andvc	r0, r0, #3
    6444:	746e6565 	strbtvc	r6, [lr], #-1381	; 0x565
    6448:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    644c:	72650000 	rsbvc	r0, r5, #0
    6450:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    6454:	00020068 	andeq	r0, r2, r8, rrx
    6458:	05000000 	streq	r0, [r0, #-0]
    645c:	00c95c02 	sbceq	r5, r9, r2, lsl #24
    6460:	010b0308 	tsteq	fp, r8, lsl #6
    6464:	02024b13 	andeq	r4, r2, #19456	; 0x4c00
    6468:	e7010100 	str	r0, [r1, -r0, lsl #2]
    646c:	02000000 	andeq	r0, r0, #0
    6470:	0000e100 	andeq	lr, r0, r0, lsl #2
    6474:	fb010200 	blx	46c7e <_Min_Stack_Size+0x4687e>
    6478:	01000d0e 	tsteq	r0, lr, lsl #26
    647c:	00010101 	andeq	r0, r1, r1, lsl #2
    6480:	00010000 	andeq	r0, r1, r0
    6484:	622f0100 	eorvs	r0, pc, #0, 2
    6488:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    648c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6490:	2f64646c 	svccs	0x0064646c
    6494:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6498:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    649c:	302e312e 	eorcc	r3, lr, lr, lsr #2
    64a0:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    64a4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    64a8:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    64ac:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    64b0:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    64b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    64b8:	2f62696c 	svccs	0x0062696c
    64bc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    64c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    64c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    64c8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    64cc:	73752f00 	cmnvc	r5, #0, 30
    64d0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    64d4:	63672f62 	cmnvs	r7, #392	; 0x188
    64d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    64dc:	6f6e2d6d 	svcvs	0x006e2d6d
    64e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    64e4:	2f696261 	svccs	0x00696261
    64e8:	2f382e34 	svccs	0x00382e34
    64ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    64f0:	00656475 	rsbeq	r6, r5, r5, ror r4
    64f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    64f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    64fc:	2f2e2e2f 	svccs	0x002e2e2f
    6500:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6504:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6508:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    650c:	2f62696c 	svccs	0x0062696c
    6510:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6514:	6565722f 	strbvs	r7, [r5, #-559]!	; 0x22f
    6518:	0000746e 	andeq	r7, r0, lr, ror #8
    651c:	6b636f6c 	blvs	18e22d4 <_Min_Stack_Size+0x18e1ed4>
    6520:	0100682e 	tsteq	r0, lr, lsr #16
    6524:	745f0000 	ldrbvc	r0, [pc], #-0	; 652c <_Min_Stack_Size+0x612c>
    6528:	73657079 	cmnvc	r5, #121	; 0x79
    652c:	0100682e 	tsteq	r0, lr, lsr #16
    6530:	74730000 	ldrbtvc	r0, [r3], #-0
    6534:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6538:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    653c:	65720000 	ldrbvs	r0, [r2, #-0]!
    6540:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6544:	00010068 	andeq	r0, r1, r8, rrx
    6548:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    654c:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    6550:	00030063 	andeq	r0, r3, r3, rrx
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
       4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
       8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
       c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
      10:	2074726f 	rsbscs	r7, r4, pc, ror #4
      14:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
      18:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
      1c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
      20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      24:	34204320 	strtcc	r4, [r0], #-800	; 0x320
      28:	332e382e 	teqcc	lr, #3014656	; 0x2e0000
      2c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
      30:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
      34:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
      38:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xd78
      3c:	616d2d20 	cmnvs	sp, r0, lsr #26
      40:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
      44:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
      48:	6d2d6537 	cfstr32vs	mvfx6, [sp, #-220]!	; 0xffffff24
      4c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
      50:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
      54:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      58:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
      5c:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
      60:	7474696c 	ldrbtvc	r6, [r4], #-2412	; 0x96c
      64:	652d656c 	strvs	r6, [sp, #-1388]!	; 0x56c
      68:	6169646e 	cmnvs	r9, lr, ror #8
      6c:	6d2d206e 	stcvs	0, cr2, [sp, #-440]!	; 0xfffffe48
      70:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      74:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      78:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
      7c:	34767066 	ldrbtcc	r7, [r6], #-102	; 0x66
      80:	2d70732d 	ldclcs	3, cr7, [r0, #-180]!	; 0xffffff4c
      84:	20363164 	eorscs	r3, r6, r4, ror #2
      88:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
      8c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
      90:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
      94:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
      98:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
      9c:	4f2d2067 	svcmi	0x002d2067
      a0:	732d2030 	teqvc	sp, #48	; 0x30
      a4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
      a8:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
      ac:	73616666 	cmnvc	r1, #106954752	; 0x6600000
      b0:	616d2d74 	smcvs	53972	; 0xd2d4
      b4:	2d206874 	stccs	8, cr6, [r0, #-464]!	; 0xfffffe30
      b8:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
      bc:	6f697463 	svcvs	0x00697463
      c0:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xd6e
      c4:	6f697463 	svcvs	0x00697463
      c8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
      cc:	74616466 	strbtvc	r6, [r1], #-1126	; 0x466
      d0:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xd61
      d4:	6f697463 	svcvs	0x00697463
      d8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
      dc:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffff4c <_estack+0xdffcff4c>
      e0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
      e4:	2d206e6f 	stccs	14, cr6, [r0, #-444]!	; 0xfffffe44
      e8:	7261702d 	rsbvc	r7, r1, #45	; 0x2d
      ec:	6d206d61 	stcvs	13, cr6, [r0, #-388]!	; 0xfffffe7c
      f0:	692d7861 	pushvs	{r0, r5, r6, fp, ip, sp, lr}
      f4:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
      f8:	6e692d65 	cdpvs	13, 6, cr2, cr9, cr5, {3}
      fc:	2d736e73 	ldclcs	14, cr6, [r3, #-460]!	; 0xfffffe34
     100:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     104:	313d656c 	teqcc	sp, ip, ror #10
     108:	00303030 	eorseq	r3, r0, r0, lsr r0
     10c:	65736f54 	ldrbvs	r6, [r3, #-3924]!	; 0xf54
     110:	006f7672 	rsbeq	r7, pc, r2, ror r6	; <UNPREDICTABLE>
     114:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 60 <_Min_Heap_Size+0x60>
     118:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     11c:	2f686569 	svccs	0x00686569
     120:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     124:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     128:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     12c:	6f6c2067 	svcvs	0x006c2067
     130:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     134:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     138:	2064656e 	rsbcs	r6, r4, lr, ror #10
     13c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     140:	2f637273 	svccs	0x00637273
     144:	6e69616d 	powvsez	f6, f1, #5.0
     148:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     14c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     150:	2064656e 	rsbcs	r6, r4, lr, ror #10
     154:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     158:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     15c:	5449006e 	strbpl	r0, [r9], #-110	; 0x6e
     160:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     164:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     168:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
     16c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     170:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     174:	5f00656c 	svcpl	0x0000656c
     178:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     17c:	745f3233 	ldrbvc	r3, [pc], #-563	; 184 <_Min_Heap_Size+0x184>
     180:	6f6c6600 	svcvs	0x006c6600
     184:	73007461 	movwvc	r7, #1121	; 0x461
     188:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     18c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     190:	7a697300 	bvc	1a5cd98 <_Min_Stack_Size+0x1a5c998>
     194:	70797465 	rsbsvc	r7, r9, r5, ror #8
     198:	6e490065 	cdpvs	0, 4, cr0, cr9, cr5, {3}
     19c:	6c72656e 	cfldr64vs	mvdx6, [r2], #-440	; 0xfffffe48
     1a0:	52706f6f 	rsbspl	r6, r0, #444	; 0x1bc
     1a4:	006c6c6f 	rsbeq	r6, ip, pc, ror #24
     1a8:	7474754f 	ldrbtvc	r7, [r4], #-1359	; 0x54f
     1ac:	6f6c7265 	svcvs	0x006c7265
     1b0:	6159706f 	cmpvs	r9, pc, rrx
     1b4:	74410077 	strbvc	r0, [r1], #-119	; 0x77
     1b8:	75746974 	ldrbvc	r6, [r4, #-2420]!	; 0x974
     1bc:	6f436564 	svcvs	0x00436564
     1c0:	6f72746e 	svcvs	0x0072746e
     1c4:	7441006c 	strbvc	r0, [r1], #-108	; 0x6c
     1c8:	61446974 	hvcvs	18068	; 0x4694
     1cc:	73006174 	movwvc	r6, #372	; 0x174
     1d0:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
     1d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     1d8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xc6f
     1dc:	00632e72 	rsbeq	r2, r3, r2, ror lr
     1e0:	6c6c6f52 	stclvs	15, cr6, [ip], #-328	; 0xfffffeb8
     1e4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     1e8:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     1ec:	656e6e49 	strbvs	r6, [lr, #-3657]!	; 0xe49
     1f0:	6f6f6c72 	svcvs	0x006f6c72
     1f4:	77615970 			; <UNDEFINED> instruction: 0x77615970
     1f8:	65685400 	strbvs	r5, [r8, #-1024]!	; 0x400
     1fc:	50006174 	andpl	r6, r0, r4, ror r1
     200:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     204:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     208:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     20c:	656e6e49 	strbvs	r6, [lr, #-3657]!	; 0xe49
     210:	6f6f6c72 	svcvs	0x006f6c72
     214:	74695070 	strbtvc	r5, [r9], #-112	; 0x70
     218:	41006863 	tstmi	r0, r3, ror #16
     21c:	43697474 	cmnmi	r9, #116, 8	; 0x74000000
     220:	446d6f6f 	strbtmi	r6, [sp], #-3951	; 0xf6f
     224:	00617461 	rsbeq	r7, r1, r1, ror #8
     228:	43776159 	cmnmi	r7, #1073741846	; 0x40000016
     22c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     230:	4f006c6f 	svcmi	0x00006c6f
     234:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0x475
     238:	6f6f6c72 	svcvs	0x006f6c72
     23c:	74695070 	strbtvc	r5, [r9], #-112	; 0x70
     240:	52006863 	andpl	r6, r0, #6488064	; 0x630000
     244:	44657461 	strbtmi	r7, [r5], #-1121	; 0x461
     248:	00617461 	rsbeq	r7, r1, r1, ror #8
     24c:	7474754f 	ldrbtvc	r7, [r4], #-1359	; 0x54f
     250:	6f6c7265 	svcvs	0x006c7265
     254:	6f52706f 	svcvs	0x0052706f
     258:	4c006c6c 	stcmi	12, cr6, [r0], {108}	; 0x6c
     25c:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
     260:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
     264:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     268:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     26c:	5f5f0066 	svcpl	0x005f0066
     270:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     274:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     278:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     27c:	73736150 	cmnvc	r3, #80, 2
     280:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     284:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     288:	664f7475 			; <UNDEFINED> instruction: 0x664f7475
     28c:	72465f66 	subvc	r5, r6, #408	; 0x198
     290:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     294:	0079636e 	rsbseq	r6, r9, lr, ror #6
     298:	44776152 	ldrbtmi	r6, [r7], #-338	; 0x152
     29c:	00617461 	rsbeq	r7, r1, r1, ror #8
     2a0:	646e6142 	strbtvs	r6, [lr], #-322	; 0x142
     2a4:	6469575f 	strbtvs	r5, [r9], #-1887	; 0x75f
     2a8:	46006874 			; <UNDEFINED> instruction: 0x46006874
     2ac:	5f6c6c75 	svcpl	0x006c6c75
     2b0:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
     2b4:	72730065 	rsbsvc	r0, r3, #101	; 0x65
     2b8:	74612f63 	strbtvc	r2, [r1], #-3939	; 0xf63
     2bc:	75746974 	ldrbvc	r6, [r4, #-2420]!	; 0x974
     2c0:	632e6564 	teqvs	lr, #100, 10	; 0x19000000
     2c4:	6c754500 	cfldr64vs	mvdx4, [r5], #-0
     2c8:	6e617265 	cdpvs	2, 6, cr7, cr1, cr5, {3}
     2cc:	00656c67 	rsbeq	r6, r5, r7, ror #24
     2d0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     2d4:	6f4d5f72 	svcvs	0x004d5f72
     2d8:	45006564 	strmi	r6, [r0, #-1380]	; 0x564
     2dc:	6169646e 	cmnvs	r9, lr, ror #8
     2e0:	73656e6e 	cmnvc	r5, #1760	; 0x6e0
     2e4:	78410073 	stmdavc	r1, {r0, r1, r4, r5, r6}^
     2e8:	455f7365 	ldrbmi	r7, [pc, #-869]	; ffffff8b <_estack+0xdffcff8b>
     2ec:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     2f0:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
     2f4:	61746144 	cmnvs	r4, r4, asr #2
     2f8:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     2fc:	5f303244 	svcpl	0x00303244
     300:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     304:	6f727947 	svcvs	0x00727947
     308:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     30c:	5f303244 	svcpl	0x00303244
     310:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     314:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     318:	6f697461 	svcvs	0x00697461
     31c:	754f006e 	strbvc	r0, [pc, #-110]	; 2b6 <_Min_Heap_Size+0x2b6>
     320:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     324:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     328:	74615261 	strbtvc	r5, [r1], #-609	; 0x261
     32c:	334c0065 	movtcc	r0, #49253	; 0xc065
     330:	30324447 	eorscc	r4, r2, r7, asr #8
     334:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     338:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     33c:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     340:	42006572 	andmi	r6, r0, #478150656	; 0x1c800000
     344:	6b636f6c 	blvs	18dc0fc <_Min_Stack_Size+0x18dbcfc>
     348:	61746144 	cmnvs	r4, r4, asr #2
     34c:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
     350:	00657461 	rsbeq	r7, r5, r1, ror #8
     354:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
     358:	465f3032 			; <UNDEFINED> instruction: 0x465f3032
     35c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
     360:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
     364:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     368:	74006572 	strvc	r6, [r0], #-1394	; 0x572
     36c:	7562706d 	strbvc	r7, [r2, #-109]!	; 0x6d
     370:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     374:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     378:	00676572 	rsbeq	r6, r7, r2, ror r5
     37c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
     380:	465f3032 			; <UNDEFINED> instruction: 0x465f3032
     384:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
     388:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
     38c:	54676966 	strbtpl	r6, [r7], #-2406	; 0x966
     390:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     394:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     398:	50686769 	rsbpl	r6, r8, r9, ror #14
     39c:	46737361 	ldrbtmi	r7, [r3], -r1, ror #6
     3a0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
     3a4:	6f4d5f72 	svcvs	0x004d5f72
     3a8:	535f6564 	cmppl	pc, #100, 10	; 0x19000000
     3ac:	63656c65 	cmnvs	r5, #25856	; 0x6500
     3b0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     3b4:	72794700 	rsbsvc	r4, r9, #0, 14
     3b8:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
     3bc:	48410061 	stmdami	r1, {r0, r5, r6}^
     3c0:	504c3142 	subpl	r3, ip, r2, asr #2
     3c4:	00524e45 	subseq	r4, r2, r5, asr #28
     3c8:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     3cc:	00524746 	subseq	r4, r2, r6, asr #14
     3d0:	31425041 	cmpcc	r2, r1, asr #32
     3d4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     3d8:	42484100 	submi	r4, r8, #0, 2
     3dc:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     3e0:	42484100 	submi	r4, r8, #0, 2
     3e4:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     3e8:	44420052 	strbmi	r0, [r2], #-82	; 0x52
     3ec:	50005243 	andpl	r5, r0, r3, asr #4
     3f0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     3f4:	47464353 	smlsldmi	r4, r6, r3, r3
     3f8:	57500052 			; <UNDEFINED> instruction: 0x57500052
     3fc:	79545f52 	ldmdbvc	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     400:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     404:	6e690066 	cdpvs	0, 6, cr0, cr9, cr6, {3}
     408:	4f432f63 	svcmi	0x00432f63
     40c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     410:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     414:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     418:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     41c:	6174732f 	cmnvs	r4, pc, lsr #6
     420:	70757472 	rsbsvc	r7, r5, r2, ror r4
     424:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     428:	5f6d6574 	svcpl	0x006d6574
     42c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     430:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     434:	00632e78 	rsbeq	r2, r3, r8, ror lr
     438:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     43c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     440:	5300745f 	movwpl	r7, #1119	; 0x45f
     444:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     448:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
     44c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     450:	43007375 	movwmi	r7, #885	; 0x375
     454:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     458:	42484100 	submi	r4, r8, #0, 2
     45c:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
     460:	48410052 	stmdami	r1, {r1, r4, r6}^
     464:	504c3342 	subpl	r3, ip, r2, asr #6
     468:	00524e45 	subseq	r4, r2, r5, asr #28
     46c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     470:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     474:	43530033 	cmpmi	r3, #51	; 0x33
     478:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     47c:	41006570 	tstmi	r0, r0, ror r5
     480:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     484:	4400524e 	strmi	r5, [r0], #-590	; 0x24e
     488:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     48c:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
     490:	00525343 	subseq	r5, r2, r3, asr #6
     494:	4b54504f 	blmi	15145d8 <_Min_Stack_Size+0x15141d8>
     498:	00525945 	subseq	r5, r2, r5, asr #18
     49c:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     4a0:	43435200 	movtmi	r5, #12800	; 0x3200
     4a4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     4a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4ac:	42504100 	subsmi	r4, r0, #0, 2
     4b0:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     4b4:	46430052 			; <UNDEFINED> instruction: 0x46430052
     4b8:	4f005253 	svcmi	0x00005253
     4bc:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
     4c0:	6c700031 	ldclvs	0, cr0, [r0], #-196	; 0xffffff3c
     4c4:	756f736c 	strbvc	r7, [pc, #-876]!	; 160 <_Min_Heap_Size+0x160>
     4c8:	00656372 	rsbeq	r6, r5, r2, ror r3
     4cc:	33424841 	movtcc	r4, #10305	; 0x2841
     4d0:	00524e45 	subseq	r4, r2, r5, asr #28
     4d4:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     4d8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     4dc:	49410070 	stmdbmi	r1, {r4, r5, r6}^
     4e0:	00524352 	subseq	r4, r2, r2, asr r3
     4e4:	32425041 	subcc	r5, r2, #65	; 0x41
     4e8:	00524e45 	subseq	r4, r2, r5, asr #28
     4ec:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     4f0:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     4f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     4f8:	53007265 	movwpl	r7, #613	; 0x265
     4fc:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     500:	73795300 	cmnvc	r9, #0, 6
     504:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     508:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     50c:	6b636f6c 	blvs	18dc2c4 <_Min_Stack_Size+0x18dbec4>
     510:	61647055 	qdsubvs	r7, r5, r4
     514:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     518:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     51c:	73795300 	cmnvc	r9, #0, 6
     520:	496d6574 	stmdbmi	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     524:	0074696e 	rsbseq	r6, r4, lr, ror #18
     528:	31425041 	cmpcc	r2, r1, asr #32
     52c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     530:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     534:	6f63766c 	svcvs	0x0063766c
     538:	4f545600 	svcmi	0x00545600
     53c:	53490052 	movtpl	r0, #36946	; 0x9052
     540:	44005241 	strmi	r5, [r0], #-577	; 0x241
     544:	00525346 	subseq	r5, r2, r6, asr #6
     548:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     54c:	6f436d65 	svcvs	0x00436d65
     550:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     554:	006b636f 	rsbeq	r6, fp, pc, ror #6
     558:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     55c:	42484100 	submi	r4, r8, #0, 2
     560:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xc32
     564:	4d00524e 	sfmmi	f5, 4, [r0, #-312]	; 0xfffffec8
     568:	0052464d 	subseq	r4, r2, sp, asr #12
     56c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     570:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     574:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     578:	56524553 			; <UNDEFINED> instruction: 0x56524553
     57c:	00314445 	eorseq	r4, r1, r5, asr #8
     580:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     584:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     588:	65530032 	ldrbvs	r0, [r3, #-50]	; 0x32
     58c:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
     590:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     594:	4552006b 	ldrbmi	r0, [r2, #-107]	; 0x6b
     598:	56524553 			; <UNDEFINED> instruction: 0x56524553
     59c:	00344445 	eorseq	r4, r4, r5, asr #8
     5a0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     5a4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     5a8:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     5ac:	56524553 			; <UNDEFINED> instruction: 0x56524553
     5b0:	00364445 	eorseq	r4, r6, r5, asr #8
     5b4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     5b8:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     5bc:	4100745f 	tstmi	r0, pc, asr r4
     5c0:	45314248 	ldrmi	r4, [r1, #-584]!	; 0x248
     5c4:	4100524e 	tstmi	r0, lr, asr #4
     5c8:	00525346 	subseq	r5, r2, r6, asr #6
     5cc:	33424841 	movtcc	r4, #10305	; 0x2841
     5d0:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     5d4:	414c4600 	cmpmi	ip, r0, lsl #12
     5d8:	545f4853 	ldrbpl	r4, [pc], #-2131	; 5e0 <_Min_Stack_Size+0x1e0>
     5dc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     5e0:	50006665 	andpl	r6, r0, r5, ror #12
     5e4:	41534c4c 	cmpmi	r3, ip, asr #24
     5e8:	47464349 	strbmi	r4, [r6, -r9, asr #6]
     5ec:	50430052 	subpl	r0, r3, r2, asr r0
     5f0:	00524341 	subseq	r4, r2, r1, asr #6
     5f4:	32425041 	subcc	r5, r2, #65	; 0x41
     5f8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     5fc:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     600:	00524354 	subseq	r4, r2, r4, asr r3
     604:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     608:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     60c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     610:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     614:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     618:	564e0066 	strbpl	r0, [lr], -r6, rrx
     61c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     620:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     624:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     628:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     62c:	73795300 	cmnvc	r9, #0, 6
     630:	6b636954 	blvs	18dab88 <_Min_Stack_Size+0x18da788>
     634:	4b4c435f 	blmi	13113b8 <_Min_Stack_Size+0x1310fb8>
     638:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     63c:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
     640:	5f434956 	svcpl	0x00434956
     644:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     648:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     64c:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
     650:	5f434956 	svcpl	0x00434956
     654:	6f697250 	svcvs	0x00697250
     658:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     65c:	756f7247 	strbvc	r7, [pc, #-583]!	; 41d <_Min_Stack_Size+0x1d>
     660:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
     664:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     668:	0074696e 	rsbseq	r6, r4, lr, ror #18
     66c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     670:	49006572 	stmdbmi	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     674:	00524553 	subseq	r4, r2, r3, asr r5
     678:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     67c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     680:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
     684:	49440052 	stmdbmi	r4, {r1, r4, r6}^
     688:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     68c:	53520045 	cmppl	r2, #69	; 0x45
     690:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     694:	43003144 	movwmi	r3, #324	; 0x144
     698:	004c5254 	subeq	r5, ip, r4, asr r2
     69c:	4349564e 	movtmi	r5, #38478	; 0x964e
     6a0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     6a4:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     6a8:	6154726f 	cmpvs	r4, pc, ror #4
     6ac:	00656c62 	rsbeq	r6, r5, r2, ror #24
     6b0:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     6b4:	636e6900 	cmnvs	lr, #0, 18
     6b8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     6bc:	5f584554 	svcpl	0x00584554
     6c0:	5f46344d 	svcpl	0x0046344d
     6c4:	334d5453 	movtcc	r5, #54355	; 0xd453
     6c8:	2f344632 	svccs	0x00344632
     6cc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     6d0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     6d4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     6d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     6dc:	5f787834 	svcpl	0x00787834
     6e0:	50647453 	rsbpl	r7, r4, r3, asr r4
     6e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     6e8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     6ec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     6f0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     6f4:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
     6f8:	00632e63 	rsbeq	r2, r3, r3, ror #28
     6fc:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
     700:	43490042 	movtmi	r0, #36930	; 0x9042
     704:	74005245 	strvc	r5, [r0], #-581	; 0x245
     708:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
     70c:	564e0062 	strbpl	r0, [lr], -r2, rrx
     710:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     714:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     718:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
     71c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     720:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     724:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     728:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
     72c:	756f534b 	strbvc	r5, [pc, #-843]!	; 3e9 <_Min_Heap_Size+0x3e9>
     730:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
     734:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     738:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     73c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     740:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     744:	74006570 	strvc	r6, [r0], #-1392	; 0x570
     748:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
     74c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     750:	49007974 	stmdbmi	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     754:	00525053 	subseq	r5, r2, r3, asr r0
     758:	4349564e 	movtmi	r5, #38478	; 0x964e
     75c:	5152495f 	cmppl	r2, pc, asr r9
     760:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     764:	006c656e 	rsbeq	r6, ip, lr, ror #10
     768:	4349564e 	movtmi	r5, #38478	; 0x964e
     76c:	5152495f 	cmppl	r2, pc, asr r9
     770:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     774:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     778:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     77c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     780:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
     784:	5f434956 	svcpl	0x00434956
     788:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     78c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     790:	52495f43 	subpl	r5, r9, #268	; 0x10c
     794:	61684351 	cmnvs	r8, r1, asr r3
     798:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     79c:	65657250 	strbvs	r7, [r5, #-592]!	; 0x250
     7a0:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7a4:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     7a8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     7ac:	46007974 			; <UNDEFINED> instruction: 0x46007974
     7b0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     7b4:	616e6f69 	cmnvs	lr, r9, ror #30
     7b8:	6174536c 	cmnvs	r4, ip, ror #6
     7bc:	4e006574 	cfrshl64mi	mvdx0, mvdx4, r6
     7c0:	5f434956 	svcpl	0x00434956
     7c4:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     7c8:	00626154 	rsbeq	r6, r2, r4, asr r1
     7cc:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     7d0:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
     7d4:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     7d8:	646f4d72 	strbtvs	r4, [pc], #-3442	; 7e0 <_Min_Stack_Size+0x3e0>
     7dc:	4e450065 	cdpmi	0, 4, cr0, cr5, cr5, {3}
     7e0:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     7e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7e8:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     7ec:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     7f0:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     7f4:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     7f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     7fc:	50470067 	subpl	r0, r7, r7, rrx
     800:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 808 <_Min_Stack_Size+0x408>
     804:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     808:	70006665 	andvc	r6, r0, r5, ror #12
     80c:	6f706e69 	svcvs	0x00706e69
     810:	50470073 	subpl	r0, r7, r3, ror r0
     814:	505f4f49 	subspl	r4, pc, r9, asr #30
     818:	42006e69 	andmi	r6, r0, #1680	; 0x690
     81c:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     820:	47005445 	strmi	r5, [r0, -r5, asr #8]
     824:	5f4f4950 	svcpl	0x004f4950
     828:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     82c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     830:	61447475 	hvcvs	18245	; 0x4745
     834:	47006174 	smlsdxmi	r0, r4, r1, r6
     838:	4d4f4950 	stclmi	9, cr4, [pc, #-320]	; 700 <_Min_Stack_Size+0x300>
     83c:	5f65646f 	svcpl	0x0065646f
     840:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     844:	00666544 	rsbeq	r6, r6, r4, asr #10
     848:	4f495047 	svcmi	0x00495047
     84c:	0046415f 	subeq	r4, r6, pc, asr r1
     850:	706d6574 	rsbvc	r6, sp, r4, ror r5
     854:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     858:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
     85c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     860:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     864:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
     868:	006c6156 	rsbeq	r6, ip, r6, asr r1
     86c:	4f495047 	svcmi	0x00495047
     870:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     874:	4f5f6570 	svcmi	0x005f6570
     878:	69420044 	stmdbvs	r2, {r2, r6}^
     87c:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xf74
     880:	00544553 	subseq	r4, r4, r3, asr r5
     884:	4f495047 	svcmi	0x00495047
     888:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     88c:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     890:	50470074 	subpl	r0, r7, r4, ror r0
     894:	4f5f4f49 	svcmi	0x005f4f49
     898:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     89c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8a0:	6f4d5f4f 	svcvs	0x004d5f4f
     8a4:	415f6564 	cmpmi	pc, r4, ror #10
     8a8:	50470046 	subpl	r0, r7, r6, asr #32
     8ac:	535f4f49 	cmppl	pc, #292	; 0x124
     8b0:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     8b4:	47007374 	smlsdxmi	r0, r4, r3, r7
     8b8:	5f4f4950 	svcpl	0x004f4950
     8bc:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     8c0:	50470064 	subpl	r0, r7, r4, rrx
     8c4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     8c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     8cc:	4f495047 	svcmi	0x00495047
     8d0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 8d8 <_Min_Stack_Size+0x4d8>
     8d4:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     8d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8dc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     8e0:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     8e4:	00737469 	rsbseq	r7, r3, r9, ror #8
     8e8:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     8ec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     8f0:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     8f4:	545f6570 	ldrbpl	r6, [pc], #-1392	; 8fc <_Min_Stack_Size+0x4fc>
     8f8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     8fc:	4f006665 	svcmi	0x00006665
     900:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     904:	50470052 	subpl	r0, r7, r2, asr r0
     908:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 7ec <_Min_Stack_Size+0x3ec>
     90c:	5f65646f 	svcpl	0x0065646f
     910:	0054554f 	subseq	r5, r4, pc, asr #10
     914:	44505550 	ldrbmi	r5, [r0], #-1360	; 0x550
     918:	50470052 	subpl	r0, r7, r2, asr r0
     91c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 800 <_Min_Stack_Size+0x400>
     920:	5f65646f 	svcpl	0x0065646f
     924:	47004e49 	strmi	r4, [r0, -r9, asr #28]
     928:	5f4f4950 	svcpl	0x004f4950
     92c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     930:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
     934:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     938:	444f4d00 	strbmi	r4, [pc], #-3328	; 940 <_Min_Stack_Size+0x540>
     93c:	47005245 	strmi	r5, [r0, -r5, asr #4]
     940:	5f4f4950 	svcpl	0x004f4950
     944:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     948:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
     94c:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
     950:	74694261 	strbtvc	r4, [r9], #-609	; 0x261
     954:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     958:	544f5f4f 	strbpl	r5, [pc], #-3919	; 960 <_Min_Stack_Size+0x560>
     95c:	5f657079 	svcpl	0x00657079
     960:	62005050 	andvs	r5, r0, #80	; 0x50
     964:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0x469
     968:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     96c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     970:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     974:	47006450 	smlsdmi	r0, r0, r4, r6
     978:	5f4f4950 	svcpl	0x004f4950
     97c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     980:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     984:	50007463 	andpl	r7, r0, r3, ror #8
     988:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     98c:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     990:	5f4f4950 	svcpl	0x004f4950
     994:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     998:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     99c:	50470065 	subpl	r0, r7, r5, rrx
     9a0:	525f4f49 	subspl	r4, pc, #292	; 0x124
     9a4:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     9a8:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
     9ac:	61746144 	cmnvs	r4, r4, asr #2
     9b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9b4:	61465f4f 	cmpvs	r6, pc, asr #30
     9b8:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
     9bc:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     9c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9c4:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9c8:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     9cc:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     9d0:	00676966 	rsbeq	r6, r7, r6, ror #18
     9d4:	41746942 	cmnmi	r4, r2, asr #18
     9d8:	6f697463 	svcvs	0x00697463
     9dc:	7563006e 	strbvc	r0, [r3, #-110]!	; 0x6e
     9e0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     9e4:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     9e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9ec:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     9f0:	00657469 	rsbeq	r7, r5, r9, ror #8
     9f4:	4f495047 	svcmi	0x00495047
     9f8:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     9fc:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     a00:	47006465 	strmi	r6, [r0, -r5, ror #8]
     a04:	5f4f4950 	svcpl	0x004f4950
     a08:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
     a0c:	535f6d75 	cmppl	pc, #7488	; 0x1d40
     a10:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     a14:	50534f00 	subspl	r4, r3, r0, lsl #30
     a18:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
     a1c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a20:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0x34f
     a24:	545f6465 	ldrbpl	r6, [pc], #-1125	; a2c <_Min_Stack_Size+0x62c>
     a28:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     a2c:	47006665 	strmi	r6, [r0, -r5, ror #12]
     a30:	5f4f4950 	svcpl	0x004f4950
     a34:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     a38:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     a3c:	5047004e 	subpl	r0, r7, lr, asr #32
     a40:	505f4f49 	subspl	r4, pc, r9, asr #30
     a44:	5f645075 	svcpl	0x00645075
     a48:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xf4e
     a4c:	47004c4c 	strmi	r4, [r0, -ip, asr #24]
     a50:	5f4f4950 	svcpl	0x004f4950
     a54:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     a58:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     a5c:	74007374 	strvc	r7, [r0], #-884	; 0x374
     a60:	5f706d65 	svcpl	0x00706d65
     a64:	50470032 	subpl	r0, r7, r2, lsr r0
     a68:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     a6c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     a70:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     a74:	47006665 	strmi	r6, [r0, -r5, ror #12]
     a78:	5f4f4950 	svcpl	0x004f4950
     a7c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     a80:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     a84:	47006465 	strmi	r6, [r0, -r5, ror #8]
     a88:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     a8c:	5f645075 	svcpl	0x00645075
     a90:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     a94:	00666544 	rsbeq	r6, r6, r4, asr #10
     a98:	4f495047 	svcmi	0x00495047
     a9c:	5075505f 	rsbspl	r5, r5, pc, asr r0
     aa0:	50555f64 	subspl	r5, r5, r4, ror #30
     aa4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     aa8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     aac:	4346416e 	movtmi	r4, #24942	; 0x616e
     ab0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ab4:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
     ab8:	4f432f63 	svcmi	0x00432f63
     abc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     ac0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     ac4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     ac8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     acc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     ad0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     ad4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     ad8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     adc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     ae0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     ae4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ae8:	445f6870 	ldrbmi	r6, [pc], #-2160	; af0 <_Min_Stack_Size+0x6f0>
     aec:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     af0:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     af4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
     af8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     afc:	5f787834 	svcpl	0x00787834
     b00:	6f697067 	svcvs	0x00697067
     b04:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
     b08:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     b0c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b10:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     b14:	754f6461 	strbvc	r6, [pc, #-1121]	; 6bb <_Min_Stack_Size+0x2bb>
     b18:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     b1c:	61746144 	cmnvs	r4, r4, asr #2
     b20:	00746942 	rsbseq	r6, r4, r2, asr #18
     b24:	4f495047 	svcmi	0x00495047
     b28:	646f4d5f 	strbtvs	r4, [pc], #-3423	; b30 <_Min_Stack_Size+0x730>
     b2c:	43520065 	cmpmi	r2, #101	; 0x65
     b30:	43485f43 	movtmi	r5, #36675	; 0x8f43
     b34:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     b38:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     b3c:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     b40:	505f4343 	subspl	r4, pc, r3, asr #6
     b44:	41534c4c 	cmpmi	r3, ip, asr #24
     b48:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
     b4c:	43435200 	movtmi	r5, #12800	; 0x3200
     b50:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     b54:	44494153 	strbmi	r4, [r9], #-339	; 0x153
     b58:	00517669 	subseq	r7, r1, r9, ror #12
     b5c:	5f434352 	svcpl	0x00434352
     b60:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     b64:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     b68:	73005276 	movwvc	r5, #630	; 0x276
     b6c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     b70:	67657273 			; <UNDEFINED> instruction: 0x67657273
     b74:	53595300 	cmppl	r9, #0, 6
     b78:	5f4b4c43 	svcpl	0x004b4c43
     b7c:	71657246 	cmnvc	r5, r6, asr #4
     b80:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     b84:	43520079 	cmpmi	r2, #121	; 0x79
     b88:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     b8c:	6f53314f 	svcvs	0x0053314f
     b90:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     b94:	43435200 	movtmi	r5, #12800	; 0x3200
     b98:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     b9c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     ba0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ba4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     ba8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     bac:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
     bb0:	43435200 	movtmi	r5, #12800	; 0x3200
     bb4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     bb8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     bbc:	6c434941 	mcrrvs	9, 4, r4, r3, cr1
     bc0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     bc4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     bc8:	50006769 	andpl	r6, r0, r9, ror #14
     bcc:	00504c4c 	subseq	r4, r0, ip, asr #24
     bd0:	514c4c50 	cmppl	ip, r0, asr ip
     bd4:	43435200 	movtmi	r5, #12800	; 0x3200
     bd8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     bdc:	54497261 	strbpl	r7, [r9], #-609	; 0x261
     be0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     be4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     be8:	50007469 	andpl	r7, r0, r9, ror #8
     bec:	004d4c4c 	subeq	r4, sp, ip, asr #24
     bf0:	5f434352 	svcpl	0x00434352
     bf4:	31424841 	cmpcc	r2, r1, asr #16
     bf8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     bfc:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     c00:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     c04:	6b636f6c 	blvs	18dc9bc <_Min_Stack_Size+0x18dc5bc>
     c08:	43520073 	cmpmi	r2, #115	; 0x73
     c0c:	50415f43 	subpl	r5, r1, r3, asr #30
     c10:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     c14:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c18:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     c1c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     c20:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     c24:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c28:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     c2c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     c30:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     c34:	43435200 	movtmi	r5, #12800	; 0x3200
     c38:	0054495f 	subseq	r4, r4, pc, asr r9
     c3c:	4b4c4350 	blmi	1311984 <_Min_Stack_Size+0x1311584>
     c40:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     c44:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     c48:	0079636e 	rsbseq	r6, r9, lr, ror #6
     c4c:	5f434352 	svcpl	0x00434352
     c50:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     c54:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c58:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     c5c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     c60:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     c64:	505f4343 	subspl	r4, pc, r3, asr #6
     c68:	314b4c43 	cmpcc	fp, r3, asr #24
     c6c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c70:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     c74:	415f4343 	cmpmi	pc, r3, asr #6
     c78:	50334248 	eorspl	r4, r3, r8, asr #4
     c7c:	70697265 	rsbvc	r7, r9, r5, ror #4
     c80:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     c84:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c88:	43520064 	cmpmi	r2, #100	; 0x64
     c8c:	41535f43 	cmpmi	r3, r3, asr #30
     c90:	6f6c4249 	svcvs	0x006c4249
     c94:	43416b63 	movtmi	r6, #7011	; 0x1b63
     c98:	6f434b4c 	svcvs	0x00434b4c
     c9c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ca0:	43435200 	movtmi	r5, #12800	; 0x3200
     ca4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     ca8:	72655031 	rsbvc	r5, r5, #49	; 0x31
     cac:	52687069 	rsbpl	r7, r8, #105	; 0x69
     cb0:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     cb4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     cb8:	5f434352 	svcpl	0x00434352
     cbc:	4b4c4348 	blmi	13119e4 <_Min_Stack_Size+0x13115e4>
     cc0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     cc4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     cc8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     ccc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     cd0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     cd4:	00676966 	rsbeq	r6, r7, r6, ror #18
     cd8:	5f434352 	svcpl	0x00434352
     cdc:	4345534c 	movtmi	r5, #21324	; 0x534c
     ce0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ce4:	43520067 	cmpmi	r2, #103	; 0x67
     ce8:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     cec:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     cf0:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     cf4:	756b6361 	strbvc	r6, [fp, #-865]!	; 0x361
     cf8:	73655270 	cmnvc	r5, #112, 4
     cfc:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     d00:	72450064 	subvc	r0, r5, #100	; 0x64
     d04:	53726f72 	cmnpl	r2, #456	; 0x1c8
     d08:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     d0c:	43520073 	cmpmi	r2, #115	; 0x73
     d10:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     d14:	756f534c 	strbvc	r5, [pc, #-844]!	; 9d0 <_Min_Stack_Size+0x5d0>
     d18:	00656372 	rsbeq	r6, r5, r2, ror r3
     d1c:	5f434352 	svcpl	0x00434352
     d20:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     d24:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     d28:	756f534b 	strbvc	r5, [pc, #-843]!	; 9e5 <_Min_Stack_Size+0x5e5>
     d2c:	00656372 	rsbeq	r6, r5, r2, ror r3
     d30:	5f434352 	svcpl	0x00434352
     d34:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     d38:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     d3c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
     d40:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     d44:	43480070 	movtmi	r0, #32880	; 0x8070
     d48:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     d4c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
     d50:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     d54:	43435200 	movtmi	r5, #12800	; 0x3200
     d58:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     d5c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     d60:	00687069 	rsbeq	r7, r8, r9, rrx
     d64:	5f434352 	svcpl	0x00434352
     d68:	43435452 	movtmi	r5, #13394	; 0x3452
     d6c:	6f434b4c 	svcvs	0x00434b4c
     d70:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d74:	43435200 	movtmi	r5, #12800	; 0x3200
     d78:	4f434d5f 	svcmi	0x00434d5f
     d7c:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     d80:	00676966 	rsbeq	r6, r7, r6, ror #18
     d84:	5f434352 	svcpl	0x00434352
     d88:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     d8c:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     d90:	505f4343 	subspl	r4, pc, r3, asr #6
     d94:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     d98:	646d4353 	strbtvs	r4, [sp], #-851	; 0x353
     d9c:	65727000 	ldrbvs	r7, [r2, #-0]!
     da0:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
     da4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     da8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     dac:	756f534b 	strbvc	r5, [pc, #-843]!	; a69 <_Min_Stack_Size+0x669>
     db0:	00656372 	rsbeq	r6, r5, r2, ror r3
     db4:	5f434352 	svcpl	0x00434352
     db8:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     dbc:	6b636f6c 	blvs	18dcb74 <_Min_Stack_Size+0x18dc774>
     dc0:	4b4c4341 	blmi	1311acc <_Min_Stack_Size+0x13116cc>
     dc4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     dc8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     dcc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     dd0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
     dd4:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     dd8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     ddc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     de0:	43520065 	cmpmi	r2, #101	; 0x65
     de4:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xf43
     de8:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     dec:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     df0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     df4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     df8:	415f4343 	cmpmi	pc, r3, asr #6
     dfc:	50324248 	eorspl	r4, r2, r8, asr #4
     e00:	70697265 	rsbvc	r7, r9, r5, ror #4
     e04:	6f6c4368 	svcvs	0x006c4368
     e08:	504c6b63 	subpl	r6, ip, r3, ror #22
     e0c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     e10:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e14:	5f434352 	svcpl	0x00434352
     e18:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     e1c:	6f435332 	svcvs	0x00435332
     e20:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e24:	43435200 	movtmi	r5, #12800	; 0x3200
     e28:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     e2c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e30:	5f434352 	svcpl	0x00434352
     e34:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     e38:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     e3c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     e40:	415f4343 	cmpmi	pc, r3, asr #6
     e44:	50334248 	eorspl	r4, r3, r8, asr #4
     e48:	70697265 	rsbvc	r7, r9, r5, ror #4
     e4c:	43520068 	cmpmi	r2, #104	; 0x68
     e50:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     e54:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     e58:	43520076 	cmpmi	r2, #118	; 0x76
     e5c:	41535f43 	cmpmi	r3, r3, asr #30
     e60:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     e64:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     e68:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     e6c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     e70:	00676966 	rsbeq	r6, r7, r6, ror #18
     e74:	5f434352 	svcpl	0x00434352
     e78:	43435452 	movtmi	r5, #13394	; 0x3452
     e7c:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
     e80:	43520064 	cmpmi	r2, #100	; 0x64
     e84:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     e88:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     e8c:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     e90:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     e94:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     e98:	646d436d 	strbtvs	r4, [sp], #-877	; 0x36d
     e9c:	43435200 	movtmi	r5, #12800	; 0x3200
     ea0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     ea4:	44533249 	ldrbmi	r3, [r3], #-585	; 0x249
     ea8:	00517669 	subseq	r7, r1, r9, ror #12
     eac:	5f434352 	svcpl	0x00434352
     eb0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     eb4:	6f434941 	svcvs	0x00434941
     eb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ebc:	43435200 	movtmi	r5, #12800	; 0x3200
     ec0:	4f434d5f 	svcmi	0x00434d5f
     ec4:	76694431 			; <UNDEFINED> instruction: 0x76694431
     ec8:	43435200 	movtmi	r5, #12800	; 0x3200
     ecc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     ed0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     ed4:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ed8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     edc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ee0:	5f434352 	svcpl	0x00434352
     ee4:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     ee8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     eec:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     ef0:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ef4:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     ef8:	756f534b 	strbvc	r5, [pc, #-843]!	; bb5 <_Min_Stack_Size+0x7b5>
     efc:	00656372 	rsbeq	r6, r5, r2, ror r3
     f00:	5f434352 	svcpl	0x00434352
     f04:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     f08:	5367616c 	cmnpl	r7, #108, 2
     f0c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f10:	43520073 	cmpmi	r2, #115	; 0x73
     f14:	53485f43 	movtpl	r5, #36675	; 0x8f43
     f18:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     f1c:	00676966 	rsbeq	r6, r7, r6, ror #18
     f20:	5f434352 	svcpl	0x00434352
     f24:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     f28:	6b636f6c 	blvs	18dcce0 <_Min_Stack_Size+0x18dc8e0>
     f2c:	4b4c4342 	blmi	1311c3c <_Min_Stack_Size+0x131183c>
     f30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f34:	50006769 	andpl	r6, r0, r9, ror #14
     f38:	41534c4c 	cmpmi	r3, ip, asr #24
     f3c:	50004e49 	andpl	r4, r0, r9, asr #28
     f40:	41534c4c 	cmpmi	r3, ip, asr #24
     f44:	50005149 	andpl	r5, r0, r9, asr #2
     f48:	41534c4c 	cmpmi	r3, ip, asr #24
     f4c:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     f50:	545f4343 	ldrbpl	r4, [pc], #-835	; f58 <_Min_Stack_Size+0xb58>
     f54:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     f58:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0x4b
     f5c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     f60:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     f64:	505f4343 	subspl	r4, pc, r3, asr #6
     f68:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     f6c:	43520064 	cmpmi	r2, #100	; 0x64
     f70:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f74:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     f78:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f7c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f80:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
     f84:	43435200 	movtmi	r5, #12800	; 0x3200
     f88:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     f8c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     f90:	52687069 	rsbpl	r7, r8, #105	; 0x69
     f94:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     f98:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f9c:	5f434352 	svcpl	0x00434352
     fa0:	31425041 	cmpcc	r2, r1, asr #32
     fa4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     fa8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     fac:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     fb0:	646f4d50 	strbtvs	r4, [pc], #-3408	; fb8 <_Min_Stack_Size+0xbb8>
     fb4:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
     fb8:	43435200 	movtmi	r5, #12800	; 0x3200
     fbc:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     fc0:	6f43324b 	svcvs	0x0043324b
     fc4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     fc8:	43435200 	movtmi	r5, #12800	; 0x3200
     fcc:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     fd0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     fd4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     fd8:	43520065 	cmpmi	r2, #101	; 0x65
     fdc:	53485f43 	movtpl	r5, #36675	; 0x8f43
     fe0:	43500045 	cmpmi	r0, #69	; 0x45
     fe4:	5f314b4c 	svcpl	0x00314b4c
     fe8:	71657246 	cmnvc	r5, r6, asr #4
     fec:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     ff0:	50410079 	subpl	r0, r1, r9, ror r0
     ff4:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
     ff8:	73657250 	cmnvc	r5, #80, 4
     ffc:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    1000:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    1004:	415f4343 	cmpmi	pc, r3, asr #6
    1008:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    100c:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    1010:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    1014:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
    1018:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    101c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1020:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0x800
    1024:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1028:	50007375 	andpl	r7, r0, r5, ror r3
    102c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1030:	52004e53 	andpl	r4, r0, #1328	; 0x530
    1034:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1038:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    103c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1040:	71657246 	cmnvc	r5, r6, asr #4
    1044:	43435200 	movtmi	r5, #12800	; 0x3200
    1048:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    104c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1050:	43687069 	cmnmi	r8, #105	; 0x69
    1054:	6b636f6c 	blvs	18dce0c <_Min_Stack_Size+0x18dca0c>
    1058:	00646d43 	rsbeq	r6, r4, r3, asr #26
    105c:	5f434352 	svcpl	0x00434352
    1060:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1064:	50007469 	andpl	r7, r0, r9, ror #8
    1068:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    106c:	50005153 	andpl	r5, r0, r3, asr r1
    1070:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1074:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
    1078:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    107c:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1080:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1084:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    1088:	415f4343 	cmpmi	pc, r3, asr #6
    108c:	50334248 	eorspl	r4, r3, r8, asr #4
    1090:	70697265 	rsbvc	r7, r9, r5, ror #4
    1094:	6f6c4368 	svcvs	0x006c4368
    1098:	504c6b63 	subpl	r6, ip, r3, ror #22
    109c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    10a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    10a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    10a8:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
    10ac:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    10b0:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    10b4:	415f4343 	cmpmi	pc, r3, asr #6
    10b8:	50324250 	eorspl	r4, r2, r0, asr r2
    10bc:	70697265 	rsbvc	r7, r9, r5, ror #4
    10c0:	6e690068 	cdpvs	0, 6, cr0, cr9, cr8, {3}
    10c4:	4f432f63 	svcmi	0x00432f63
    10c8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    10cc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    10d0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    10d4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    10d8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    10dc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    10e0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    10e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    10e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    10ec:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    10f0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10f4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 10fc <_Min_Stack_Size+0xcfc>
    10f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    10fc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1100:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    1104:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1108:	5f787834 	svcpl	0x00787834
    110c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1110:	43520063 	cmpmi	r2, #99	; 0x63
    1114:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1118:	4b4c434d 	blmi	1311e54 <_Min_Stack_Size+0x1311a54>
    111c:	73657250 	cmnvc	r5, #80, 4
    1120:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1124:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1128:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    112c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1130:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1134:	00676966 	rsbeq	r6, r7, r6, ror #18
    1138:	5f434352 	svcpl	0x00434352
    113c:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    1140:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1144:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1148:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    114c:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    1150:	43520064 	cmpmi	r2, #100	; 0x64
    1154:	50415f43 	subpl	r5, r1, r3, asr #30
    1158:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    115c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1160:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1164:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    1168:	43435200 	movtmi	r5, #12800	; 0x3200
    116c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1170:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1174:	55530067 	ldrbpl	r0, [r3, #-103]	; 0x67
    1178:	53454343 	movtpl	r4, #21315	; 0x5343
    117c:	43520053 	cmpmi	r2, #83	; 0x53
    1180:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1184:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    1188:	00676966 	rsbeq	r6, r7, r6, ror #18
    118c:	5f434352 	svcpl	0x00434352
    1190:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1194:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    1198:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    119c:	43520066 	cmpmi	r2, #102	; 0x66
    11a0:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    11a4:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    11a8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    11ac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    11b0:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    11b4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    11b8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    11bc:	415f4343 	cmpmi	pc, r3, asr #6
    11c0:	50334248 	eorspl	r4, r3, r8, asr #4
    11c4:	70697265 	rsbvc	r7, r9, r5, ror #4
    11c8:	6f6c4368 	svcvs	0x006c4368
    11cc:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    11d0:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    11d4:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    11d8:	76696472 			; <UNDEFINED> instruction: 0x76696472
    11dc:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    11e0:	41535500 	cmpmi	r3, r0, lsl #10
    11e4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    11e8:	00414850 	subeq	r4, r1, r0, asr r8
    11ec:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    11f0:	41535500 	cmpmi	r3, r0, lsl #10
    11f4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    11f8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    11fc:	57726576 			; <UNDEFINED> instruction: 0x57726576
    1200:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1204:	646d4370 	strbtvs	r4, [sp], #-880	; 0x370
    1208:	41535500 	cmpmi	r3, r0, lsl #10
    120c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1210:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1214:	61637365 	cmnvs	r3, r5, ror #6
    1218:	0072656c 	rsbseq	r6, r2, ip, ror #10
    121c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1220:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1224:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1228:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    122c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1230:	61657242 	cmnvs	r5, r2, asr #4
    1234:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    1238:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    123c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1240:	53550068 	cmppl	r5, #104	; 0x68
    1244:	5f545241 	svcpl	0x00545241
    1248:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    124c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1250:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1254:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    1258:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    125c:	55007374 	strpl	r7, [r0, #-884]	; 0x374
    1260:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1264:	6f6c435f 	svcvs	0x006c435f
    1268:	6e496b63 	vmlsvs.f64	d22, d9, d19
    126c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1270:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1274:	53550066 	cmppl	r5, #102	; 0x66
    1278:	5f545241 	svcpl	0x00545241
    127c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1280:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1284:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    1288:	6144646e 	cmpvs	r4, lr, ror #8
    128c:	55006174 	strpl	r6, [r0, #-372]	; 0x174
    1290:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1294:	6b61575f 	blvs	1857018 <_Min_Stack_Size+0x1856c18>
    1298:	00705565 	rsbseq	r5, r0, r5, ror #10
    129c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    12a0:	6f575f54 	svcvs	0x00575f54
    12a4:	654c6472 	strbvs	r6, [ip, #-1138]	; 0x472
    12a8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    12ac:	41535500 	cmpmi	r3, r0, lsl #10
    12b0:	445f5452 	ldrbmi	r5, [pc], #-1106	; 12b8 <_Min_Stack_Size+0xeb8>
    12b4:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    12b8:	53550064 	cmppl	r5, #100	; 0x64
    12bc:	5f545241 	svcpl	0x00545241
    12c0:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    12c4:	00746942 	rsbseq	r6, r4, r2, asr #18
    12c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    12cc:	61425f54 	cmpvs	r2, r4, asr pc
    12d0:	61526475 	cmpvs	r2, r5, ror r4
    12d4:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
    12d8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    12dc:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    12e0:	646f4d41 	strbtvs	r4, [pc], #-3393	; 12e8 <_Min_Stack_Size+0xee8>
    12e4:	70610065 	rsbvc	r0, r1, r5, rrx
    12e8:	6f6c6362 	svcvs	0x006c6362
    12ec:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    12f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    12f4:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    12f8:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    12fc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1300:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1304:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1308:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    130c:	6175475f 	cmnvs	r5, pc, asr r7
    1310:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1314:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    1318:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    131c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1320:	61657242 	cmnvs	r5, r2, asr #4
    1324:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    1328:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    132c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1330:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    1334:	00676966 	rsbeq	r6, r7, r6, ror #18
    1338:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    133c:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    1340:	55004741 	strpl	r4, [r0, #-1857]	; 0x741
    1344:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1348:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    134c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1350:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1354:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1358:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    135c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1360:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1364:	53550074 	cmppl	r5, #116	; 0x74
    1368:	5f545241 	svcpl	0x00545241
    136c:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    1370:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    1374:	43414e64 	movtmi	r4, #7780	; 0x1e64
    1378:	646d434b 	strbtvs	r4, [sp], #-843	; 0x34b
    137c:	41535500 	cmpmi	r3, r0, lsl #10
    1380:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1384:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    1388:	53550079 	cmppl	r5, #121	; 0x79
    138c:	5f545241 	svcpl	0x00545241
    1390:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1394:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    1398:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    139c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    13a0:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    13a4:	61627874 	smcvs	10116	; 0x2784
    13a8:	55006573 	strpl	r6, [r0, #-1395]	; 0x573
    13ac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13b0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    13b4:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    13b8:	55006761 	strpl	r6, [r0, #-1889]	; 0x761
    13bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13c0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    13c4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    13c8:	00737365 	rsbseq	r7, r3, r5, ror #6
    13cc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13d0:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    13d4:	61754774 	cmnvs	r5, r4, ror r7
    13d8:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    13dc:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    13e0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13e4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    13e8:	65724264 	ldrbvs	r4, [r2, #-612]!	; 0x264
    13ec:	55006b61 	strpl	r6, [r0, #-2913]	; 0xb61
    13f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13f4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    13f8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    13fc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1400:	41535500 	cmpmi	r3, r0, lsl #10
    1404:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1408:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    140c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1410:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1414:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    1418:	71655241 	cmnvc	r5, r1, asr #4
    141c:	41535500 	cmpmi	r3, r0, lsl #10
    1420:	00785452 	rsbseq	r5, r8, r2, asr r4
    1424:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1428:	6e4f5f54 	mcrvs	15, 2, r5, cr15, cr4, {2}
    142c:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    1430:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1434:	6d43646f 	cfstrdvs	mvd6, [r3, #-444]	; 0xfffffe44
    1438:	53550064 	cmppl	r5, #100	; 0x64
    143c:	5f545241 	svcpl	0x00545241
    1440:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
    1444:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1448:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    144c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    1450:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    1454:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1458:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    145c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    1460:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    1464:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    1468:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    146c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1474 <_Min_Stack_Size+0x1074>
    1470:	53550065 	cmppl	r5, #101	; 0x65
    1474:	5f545241 	svcpl	0x00545241
    1478:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    147c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1480:	70746962 	rsbsvc	r6, r4, r2, ror #18
    1484:	5500736f 	strpl	r7, [r0, #-879]	; 0x36f
    1488:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    148c:	65764f5f 	ldrbvs	r4, [r6, #-3935]!	; 0xf5f
    1490:	6d615372 	stclvs	3, cr5, [r1, #-456]!	; 0xfffffe38
    1494:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
    1498:	6d433867 	stclvs	8, cr3, [r3, #-412]	; 0xfffffe64
    149c:	53550064 	cmppl	r5, #100	; 0x64
    14a0:	5f545241 	svcpl	0x00545241
    14a4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    14a8:	61745354 	cmnvs	r4, r4, asr r3
    14ac:	00737574 	rsbseq	r7, r3, r4, ror r5
    14b0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14b4:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    14b8:	646d434e 	strbtvs	r4, [sp], #-846	; 0x34e
    14bc:	41535500 	cmpmi	r3, r0, lsl #10
    14c0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    14c4:	43414472 	movtmi	r4, #5234	; 0x1472
    14c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14cc:	53550067 	cmppl	r5, #103	; 0x67
    14d0:	5f545241 	svcpl	0x00545241
    14d4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    14d8:	5355006b 	cmppl	r5, #107	; 0x6b
    14dc:	5f545241 	svcpl	0x00545241
    14e0:	41447249 	cmpmi	r4, r9, asr #4
    14e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14e8:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    14ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    14f0:	69646c61 	stmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    14f4:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
    14f8:	53550072 	cmppl	r5, #114	; 0x72
    14fc:	5f545241 	svcpl	0x00545241
    1500:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1504:	5367616c 	cmnpl	r7, #108, 2
    1508:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    150c:	53550073 	cmppl	r5, #115	; 0x73
    1510:	5f545241 	svcpl	0x00545241
    1514:	55005449 	strpl	r5, [r0, #-1097]	; 0x449
    1518:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    151c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1520:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1524:	00746375 	rsbseq	r6, r4, r5, ror r3
    1528:	5f434352 	svcpl	0x00434352
    152c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1530:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    1534:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1538:	41535500 	cmpmi	r3, r0, lsl #10
    153c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1540:	6b636f6c 	blvs	18dd2f8 <_Min_Stack_Size+0x18dcef8>
    1544:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1548:	41535500 	cmpmi	r3, r0, lsl #10
    154c:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1550:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1554:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1558:	00676966 	rsbeq	r6, r7, r6, ror #18
    155c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1560:	61485f54 	cmpvs	r8, r4, asr pc
    1564:	7544666c 	strbvc	r6, [r4, #-1644]	; 0x66c
    1568:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    156c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1570:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1574:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    1578:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    157c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1580:	41535500 	cmpmi	r3, r0, lsl #10
    1584:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    1588:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    158c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1590:	41535500 	cmpmi	r3, r0, lsl #10
    1594:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1598:	004c4f50 	subeq	r4, ip, r0, asr pc
    159c:	616d7469 	cmnvs	sp, r9, ror #8
    15a0:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    15a4:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    15a8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    15ac:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    15b0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    15b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    15b8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    15bc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    15c0:	2f736569 	svccs	0x00736569
    15c4:	334d5453 	movtcc	r5, #54355	; 0xd453
    15c8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    15cc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    15d0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    15d4:	5f687069 	svcpl	0x00687069
    15d8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    15dc:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    15e0:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    15e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15e8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15ec:	6173755f 	cmnvs	r3, pc, asr r5
    15f0:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    15f4:	41535500 	cmpmi	r3, r0, lsl #10
    15f8:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    15fc:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1600:	61446576 	hvcvs	18006	; 0x4656
    1604:	75006174 	strvc	r6, [r0, #-372]	; 0x174
    1608:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    160c:	00676572 	rsbeq	r6, r7, r2, ror r5
    1610:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1614:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1618:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    161c:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    1620:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1624:	436c6c65 	cmnmi	ip, #25856	; 0x6500
    1628:	5300646d 	movwpl	r6, #1133	; 0x46d
    162c:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1630:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    1634:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 146c <_Min_Stack_Size+0x106c>
    1638:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    163c:	6f697461 	svcvs	0x00697461
    1640:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1644:	6174536c 	cmnvs	r4, ip, ror #6
    1648:	00737574 	rsbseq	r7, r3, r4, ror r5
    164c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1650:	445f4746 	ldrbmi	r4, [pc], #-1862	; 1658 <_Min_Stack_Size+0x1258>
    1654:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1658:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
    165c:	47464353 	smlsldmi	r4, r6, r3, r3
    1660:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    1664:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    1668:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    166c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1670:	43504d43 	cmpmi	r0, #4288	; 0x10c0
    1674:	454d0052 	strbmi	r0, [sp, #-82]	; 0x52
    1678:	504d524d 	subpl	r5, sp, sp, asr #4
    167c:	53595300 	cmppl	r9, #0, 6
    1680:	5f474643 	svcpl	0x00474643
    1684:	5f485445 	svcpl	0x00485445
    1688:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    168c:	746e4961 	strbtvc	r4, [lr], #-2401	; 0x961
    1690:	61667265 	cmnvs	r6, r5, ror #4
    1694:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1698:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    169c:	00444556 	subeq	r4, r4, r6, asr r5
    16a0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    16a4:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1594 <_Min_Stack_Size+0x1194>
    16a8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    16ac:	61775379 	cmnvs	r7, r9, ror r3
    16b0:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
    16b4:	6e614267 	cdpvs	2, 6, cr4, cr1, cr7, {3}
    16b8:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    16bc:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    16c0:	636e6900 	cmnvs	lr, #0, 18
    16c4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    16c8:	5f584554 	svcpl	0x00584554
    16cc:	5f46344d 	svcpl	0x0046344d
    16d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    16d4:	2f344632 	svccs	0x00344632
    16d8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    16dc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    16e0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    16e4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    16e8:	5f787834 	svcpl	0x00787834
    16ec:	50647453 	rsbpl	r7, r4, r3, asr r4
    16f0:	70697265 	rsbvc	r7, r9, r5, ror #4
    16f4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    16f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    16fc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1700:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1704:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1708:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    170c:	66637379 			; <UNDEFINED> instruction: 0x66637379
    1710:	00632e67 	rsbeq	r2, r3, r7, ror #28
    1714:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1718:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    171c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1720:	00786563 	rsbseq	r6, r8, r3, ror #10
    1724:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1728:	455f4746 	ldrbmi	r4, [pc, #-1862]	; fea <_Min_Stack_Size+0xbea>
    172c:	4d5f4854 	ldclmi	8, cr4, [pc, #-336]	; 15e4 <_Min_Stack_Size+0x11e4>
    1730:	61696465 	cmnvs	r9, r5, ror #8
    1734:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1738:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    173c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1740:	00676966 	rsbeq	r6, r7, r6, ror #18
    1744:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1748:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1638 <_Min_Stack_Size+0x1238>
    174c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1750:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
    1754:	53007061 	movwpl	r7, #97	; 0x61
    1758:	46435359 			; <UNDEFINED> instruction: 0x46435359
    175c:	79545f47 	ldmdbvc	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1760:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1764:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    1768:	505f4954 	subspl	r4, pc, r4, asr r9	; <UNPREDICTABLE>
    176c:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    1770:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1774:	49504765 	ldmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, lr}^
    1778:	5300784f 	movwpl	r7, #2127	; 0x84f
    177c:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1780:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    1784:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1788:	616d6552 	cmnvs	sp, r2, asr r5
    178c:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1790:	00676966 	rsbeq	r6, r7, r6, ror #18
    1794:	5f433249 	svcpl	0x00433249
    1798:	61656c43 	cmnvs	r5, r3, asr #24
    179c:	50544972 	subspl	r4, r4, r2, ror r9
    17a0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    17a4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    17a8:	32490074 	subcc	r0, r9, #116	; 0x74
    17ac:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    17b0:	6172656e 	cmnvs	r2, lr, ror #10
    17b4:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    17b8:	00545241 	subseq	r5, r4, r1, asr #4
    17bc:	5f433249 	svcpl	0x00433249
    17c0:	50746547 	rsbspl	r6, r4, r7, asr #10
    17c4:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    17c8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    17cc:	74657274 	strbtvc	r7, [r5], #-628	; 0x274
    17d0:	6c436863 	mcrrvs	8, 6, r6, r3, cr3
    17d4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    17d8:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    17dc:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    17e0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    17e4:	00726574 	rsbseq	r6, r2, r4, ror r5
    17e8:	53495254 	movtpl	r5, #37460	; 0x9254
    17ec:	32490045 	subcc	r0, r9, #69	; 0x45
    17f0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    17f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17f8:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    17fc:	4e5f4332 	mrcmi	3, 2, r4, cr15, cr2, {1}
    1800:	504b4341 	subpl	r4, fp, r1, asr #6
    1804:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    1808:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    180c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1810:	32490067 	subcc	r0, r9, #103	; 0x67
    1814:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    1818:	6464416e 	strbtvs	r4, [r4], #-366	; 0x16e
    181c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1820:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1824:	00676966 	rsbeq	r6, r7, r6, ror #18
    1828:	5f433249 	svcpl	0x00433249
    182c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1830:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1834:	66007463 	strvs	r7, [r0], -r3, ror #8
    1838:	72716572 	rsbsvc	r6, r1, #478150656	; 0x1c800000
    183c:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xe61
    1840:	43324900 	teqmi	r2, #0, 18
    1844:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    1848:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    184c:	32490061 	subcc	r0, r9, #97	; 0x61
    1850:	61435f43 	cmpvs	r3, r3, asr #30
    1854:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    1858:	50657461 	rsbpl	r7, r5, r1, ror #8
    185c:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    1860:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    1864:	6b636f6c 	blvs	18dd61c <_Min_Stack_Size+0x18dd21c>
    1868:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    186c:	32490064 	subcc	r0, r9, #100	; 0x64
    1870:	6f4d5f43 	svcvs	0x004d5f43
    1874:	49006564 	stmdbmi	r0, {r2, r5, r6, r8, sl, sp, lr}
    1878:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    187c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1880:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1884:	414f0074 	hvcmi	61444	; 0xf004
    1888:	46003152 			; <UNDEFINED> instruction: 0x46003152
    188c:	0052544c 	subseq	r5, r2, ip, asr #8
    1890:	5f433249 	svcpl	0x00433249
    1894:	4c414d44 	mcrrmi	13, 4, r4, r1, cr4
    1898:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
    189c:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    18a0:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    18a4:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    18a8:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    18ac:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    18b0:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    18b4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    18b8:	00676966 	rsbeq	r6, r7, r6, ror #18
    18bc:	5f433249 	svcpl	0x00433249
    18c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    18c4:	00666544 	rsbeq	r6, r6, r4, asr #10
    18c8:	5f433249 	svcpl	0x00433249
    18cc:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    18d0:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    18d4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    18d8:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    18dc:	00676966 	rsbeq	r6, r7, r6, ror #18
    18e0:	5f433249 	svcpl	0x00433249
    18e4:	50434550 	subpl	r4, r3, r0, asr r5
    18e8:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    18ec:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    18f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    18f4:	6c660067 	stclvs	0, cr0, [r6], #-412	; 0xfffffe64
    18f8:	6f706761 	svcvs	0x00706761
    18fc:	32490073 	subcc	r0, r9, #115	; 0x73
    1900:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1904:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1908:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    190c:	6d435052 	stclvs	0, cr5, [r3, #-328]	; 0xfffffeb8
    1910:	32490064 	subcc	r0, r9, #100	; 0x64
    1914:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xf43
    1918:	79437974 	stmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    191c:	00656c63 	rsbeq	r6, r5, r3, ror #24
    1920:	72633269 	rsbvc	r3, r3, #-1879048186	; 0x90000006
    1924:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    1928:	545f4332 	ldrbpl	r4, [pc], #-818	; 1930 <_Min_Stack_Size+0x1530>
    192c:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    1930:	5074696d 	rsbspl	r6, r4, sp, ror #18
    1934:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    1938:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    193c:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    1940:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    1944:	32490074 	subcc	r0, r9, #116	; 0x74
    1948:	49007843 	stmdbmi	r0, {r0, r1, r6, fp, ip, sp, lr}
    194c:	445f4332 	ldrbmi	r4, [pc], #-818	; 1954 <_Min_Stack_Size+0x1554>
    1950:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1954:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1958:	43324900 	teqmi	r2, #0, 18
    195c:	43414e5f 	movtmi	r4, #7775	; 0x1e5f
    1960:	736f504b 	cmnvc	pc, #75	; 0x4b
    1964:	6f697469 	svcvs	0x00697469
    1968:	3249006e 	subcc	r0, r9, #110	; 0x6e
    196c:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1970:	73614c74 	cmnvc	r1, #116, 24	; 0x7400
    1974:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0x574
    1978:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    197c:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    1980:	0047414c 	subeq	r4, r7, ip, asr #2
    1984:	5f433249 	svcpl	0x00433249
    1988:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    198c:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1990:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1994:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1998:	61436c61 	cmpvs	r3, r1, ror #24
    199c:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    19a0:	32490064 	subcc	r0, r9, #100	; 0x64
    19a4:	68435f43 	stmdavs	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    19a8:	456b6365 	strbmi	r6, [fp, #-869]!	; 0x365
    19ac:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    19b0:	636e6900 	cmnvs	lr, #0, 18
    19b4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    19b8:	5f584554 	svcpl	0x00584554
    19bc:	5f46344d 	svcpl	0x0046344d
    19c0:	334d5453 	movtcc	r5, #54355	; 0xd453
    19c4:	2f344632 	svccs	0x00344632
    19c8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    19cc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    19d0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    19d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    19d8:	5f787834 	svcpl	0x00787834
    19dc:	50647453 	rsbpl	r7, r4, r3, asr r4
    19e0:	70697265 	rsbvc	r7, r9, r5, ror #4
    19e4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    19e8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    19ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    19f0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    19f4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    19f8:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    19fc:	632e6332 	teqvs	lr, #-939524096	; 0xc8000000
    1a00:	43324900 	teqmi	r2, #0, 18
    1a04:	414d445f 	cmpmi	sp, pc, asr r4
    1a08:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a0c:	5f433249 	svcpl	0x00433249
    1a10:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1a14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1a18:	00666544 	rsbeq	r6, r6, r4, asr #10
    1a1c:	5f433249 	svcpl	0x00433249
    1a20:	70005449 	andvc	r5, r0, r9, asr #8
    1a24:	316b6c63 	cmncc	fp, r3, ror #24
    1a28:	43324900 	teqmi	r2, #0, 18
    1a2c:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1a30:	53455200 	movtpl	r5, #20992	; 0x5200
    1a34:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1a38:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
    1a3c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1a40:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
    1a44:	53455200 	movtpl	r5, #20992	; 0x5200
    1a48:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1a4c:	49003944 	stmdbmi	r0, {r2, r6, r8, fp, ip, sp}
    1a50:	4f5f4332 	svcmi	0x005f4332
    1a54:	64416e77 	strbvs	r6, [r1], #-3703	; 0xe77
    1a58:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1a5c:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
    1a60:	635f6363 	cmpvs	pc, #-1946157055	; 0x8c000001
    1a64:	6b636f6c 	blvs	18dd81c <_Min_Stack_Size+0x18dd41c>
    1a68:	32490073 	subcc	r0, r9, #115	; 0x73
    1a6c:	63415f43 	movtvs	r5, #8003	; 0x1f43
    1a70:	3249006b 	subcc	r0, r9, #107	; 0x6b
    1a74:	56455f43 	strbpl	r5, [r5], -r3, asr #30
    1a78:	00544e45 	subseq	r4, r4, r5, asr #28
    1a7c:	5f433249 	svcpl	0x00433249
    1a80:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    1a84:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    1a88:	00617461 	rsbeq	r7, r1, r1, ror #8
    1a8c:	5f433249 	svcpl	0x00433249
    1a90:	61656c43 	cmnvs	r5, r3, asr #24
    1a94:	616c4672 	smcvs	50274	; 0xc462
    1a98:	32490067 	subcc	r0, r9, #103	; 0x67
    1a9c:	63415f43 	movtvs	r5, #8003	; 0x1f43
    1aa0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    1aa4:	6764656c 	strbvs	r6, [r4, -ip, ror #10]!
    1aa8:	64416465 	strbvs	r6, [r1], #-1125	; 0x465
    1aac:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1ab0:	32490073 	subcc	r0, r9, #115	; 0x73
    1ab4:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    1ab8:	65526461 	ldrbvs	r6, [r2, #-1121]	; 0x461
    1abc:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    1ac0:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1ac4:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    1ac8:	4d747361 	ldclmi	3, cr7, [r4, #-388]!	; 0xfffffe7c
    1acc:	4465646f 	strbtmi	r6, [r5], #-1135	; 0x46f
    1ad0:	43797475 	cmnmi	r9, #1962934272	; 0x75000000
    1ad4:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1ad8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1adc:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1ae0:	445f4332 	ldrbmi	r4, [pc], #-818	; 1ae8 <_Min_Stack_Size+0x16e8>
    1ae4:	416c6175 	smcmi	50709	; 0xc615
    1ae8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1aec:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    1af0:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
    1af4:	00316761 	eorseq	r6, r1, r1, ror #14
    1af8:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1afc:	6e650032 	mcrvs	0, 3, r0, cr5, cr2, {1}
    1b00:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1b04:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1b08:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1b0c:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1b10:	6f6e6b63 	svcvs	0x006e6b63
    1b14:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xc77
    1b18:	6f436567 	svcvs	0x00436567
    1b1c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b20:	43324900 	teqmi	r2, #0, 18
    1b24:	4345505f 	movtmi	r5, #20575	; 0x505f
    1b28:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1b2c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1b30:	43324900 	teqmi	r2, #0, 18
    1b34:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1b38:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1b3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1b40:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    1b44:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0x361
    1b48:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1b4c:	43324900 	teqmi	r2, #0, 18
    1b50:	666f535f 			; <UNDEFINED> instruction: 0x666f535f
    1b54:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
    1b58:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    1b5c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1b60:	32490064 	subcc	r0, r9, #100	; 0x64
    1b64:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    1b68:	6237646e 	eorsvs	r6, r7, #1845493760	; 0x6e000000
    1b6c:	64417469 	strbvs	r7, [r1], #-1129	; 0x469
    1b70:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1b74:	32690073 	rsbcc	r0, r9, #115	; 0x73
    1b78:	61627863 	cmnvs	r2, r3, ror #16
    1b7c:	4f006573 	svcmi	0x00006573
    1b80:	00325241 	eorseq	r5, r2, r1, asr #4
    1b84:	5f433249 	svcpl	0x00433249
    1b88:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1b8c:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    1b90:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    1b94:	32490072 	subcc	r0, r9, #114	; 0x72
    1b98:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1b9c:	6172656e 	cmnvs	r2, lr, ror #10
    1ba0:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    1ba4:	4900504f 	stmdbmi	r0, {r0, r1, r2, r3, r6, ip, lr}
    1ba8:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1bac:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1bb0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1bb4:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1bb8:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1bbc:	6f6c616e 	svcvs	0x006c616e
    1bc0:	6c694667 	stclvs	6, cr4, [r9], #-412	; 0xfffffe64
    1bc4:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    1bc8:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
    1bcc:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    1bd0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1bd4:	654d746e 	strbvs	r7, [sp, #-1134]	; 0x46e
    1bd8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1bdc:	414d4400 	cmpmi	sp, r0, lsl #8
    1be0:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1be4:	414d4400 	cmpmi	sp, r0, lsl #8
    1be8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1bec:	5f6d6165 	svcpl	0x006d6165
    1bf0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1bf4:	00666544 	rsbeq	r6, r6, r4, asr #10
    1bf8:	5f414d44 	svcpl	0x00414d44
    1bfc:	6f697250 	svcvs	0x00697250
    1c00:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c04:	414d4400 	cmpmi	sp, r0, lsl #8
    1c08:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1c0c:	4279726f 	rsbsmi	r7, r9, #-268435450	; 0xf0000006
    1c10:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    1c14:	414d4400 	cmpmi	sp, r0, lsl #8
    1c18:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1c1c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1c20:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c24:	5f414d44 	svcpl	0x00414d44
    1c28:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c2c:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1c30:	75426c61 	strbvc	r6, [r2, #-3169]	; 0xc61
    1c34:	00747372 	rsbseq	r7, r4, r2, ror r3
    1c38:	5f414d44 	svcpl	0x00414d44
    1c3c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1c40:	534f4649 	movtpl	r4, #63049	; 0xf649
    1c44:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1c48:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    1c4c:	79545f41 	ldmdbvc	r4, {r0, r6, r8, r9, sl, fp, ip, lr}^
    1c50:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1c54:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    1c58:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    1c5c:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    1c60:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1c64:	6f6d654d 	svcvs	0x006d654d
    1c68:	61547972 	cmpvs	r4, r2, ror r9
    1c6c:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    1c70:	414d4400 	cmpmi	sp, r0, lsl #8
    1c74:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1c78:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    1c7c:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    1c80:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1c84:	44007941 	strmi	r7, [r0], #-2369	; 0x941
    1c88:	5f79414d 	svcpl	0x0079414d
    1c8c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    1c90:	00786d61 	rsbseq	r6, r8, r1, ror #26
    1c94:	5f414d44 	svcpl	0x00414d44
    1c98:	00524944 	subseq	r4, r2, r4, asr #18
    1c9c:	5f414d44 	svcpl	0x00414d44
    1ca0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ca4:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1ca8:	61426c61 	cmpvs	r2, r1, ror #24
    1cac:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    1cb0:	44007264 	strmi	r7, [r0], #-612	; 0x264
    1cb4:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1b88 <_Min_Stack_Size+0x1788>
    1cb8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1cbc:	636e4979 	cmnvs	lr, #1982464	; 0x1e4000
    1cc0:	46494800 	strbmi	r4, [r9], -r0, lsl #16
    1cc4:	44005243 	strmi	r5, [r0], #-579	; 0x243
    1cc8:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1ccc:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1cd0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1cd4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xc6f
    1cd8:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1cdc:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ce0:	5f414d44 	svcpl	0x00414d44
    1ce4:	6f6d654d 	svcvs	0x006d654d
    1ce8:	61547972 	cmpvs	r4, r2, ror r9
    1cec:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    1cf0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1cf4:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    1cf8:	505f414d 	subspl	r4, pc, sp, asr #2
    1cfc:	70697265 	rsbvc	r7, r9, r5, ror #4
    1d00:	61726568 	cmnvs	r2, r8, ror #10
    1d04:	636e496c 	cmnvs	lr, #108, 18	; 0x1b0000
    1d08:	414d4400 	cmpmi	sp, r0, lsl #8
    1d0c:	756f445f 	strbvc	r4, [pc, #-1119]!	; 18b5 <_Min_Stack_Size+0x14b5>
    1d10:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1d14:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1d18:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1d20 <_Min_Stack_Size+0x1920>
    1d1c:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    1d20:	636e6900 	cmnvs	lr, #0, 18
    1d24:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1d28:	5f584554 	svcpl	0x00584554
    1d2c:	5f46344d 	svcpl	0x0046344d
    1d30:	334d5453 	movtcc	r5, #54355	; 0xd453
    1d34:	2f344632 	svccs	0x00344632
    1d38:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1d3c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1d40:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1d44:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1d48:	5f787834 	svcpl	0x00787834
    1d4c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1d50:	70697265 	rsbvc	r7, r9, r5, ror #4
    1d54:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1d58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1d5c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1d60:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1d64:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1d68:	645f7878 	ldrbvs	r7, [pc], #-2168	; 1d70 <_Min_Stack_Size+0x1970>
    1d6c:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    1d70:	414d4400 	cmpmi	sp, r0, lsl #8
    1d74:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1d78:	494c0074 	stmdbmi	ip, {r2, r4, r5, r6}^
    1d7c:	44005253 	strmi	r5, [r0], #-595	; 0x253
    1d80:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    1d84:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1d88:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1d8c:	414d4400 	cmpmi	sp, r0, lsl #8
    1d90:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1d94:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1d98:	61746144 	cmnvs	r4, r4, asr #2
    1d9c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1da0:	00726574 	rsbseq	r6, r2, r4, ror r5
    1da4:	5f414d44 	svcpl	0x00414d44
    1da8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1dac:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1db0:	61446c61 	cmpvs	r4, r1, ror #24
    1db4:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1db8:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    1dbc:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    1dc0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    1dc4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1dc8:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    1dcc:	445f414d 	ldrbmi	r4, [pc], #-333	; 1dd4 <_Min_Stack_Size+0x19d4>
    1dd0:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1dd4:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1dd8:	4d726566 	cfldr64mi	mvdx6, [r2, #-408]!	; 0xfffffe68
    1ddc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1de0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1de4:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1de8:	49465f41 	stmdbmi	r6, {r0, r6, r8, r9, sl, fp, ip, lr}^
    1dec:	68544f46 	ldmdavs	r4, {r1, r2, r6, r8, r9, sl, fp, lr}^
    1df0:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1df4:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    1df8:	5f414d44 	svcpl	0x00414d44
    1dfc:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1e00:	61745354 	cmnvs	r4, r4, asr r3
    1e04:	00737574 	rsbseq	r7, r3, r4, ror r5
    1e08:	52534948 	subspl	r4, r3, #72, 18	; 0x120000
    1e0c:	414d4400 	cmpmi	sp, r0, lsl #8
    1e10:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1e14:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1e18:	00746375 	rsbseq	r6, r4, r5, ror r3
    1e1c:	5f414d44 	svcpl	0x00414d44
    1e20:	636e6950 	cmnvs	lr, #80, 18	; 0x140000
    1e24:	4d00736f 	stcmi	3, cr7, [r0, #-444]	; 0xfffffe44
    1e28:	00524131 	subseq	r4, r2, r1, lsr r1
    1e2c:	5f414d44 	svcpl	0x00414d44
    1e30:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    1e34:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1e38:	414d4400 	cmpmi	sp, r0, lsl #8
    1e3c:	414c465f 	cmpmi	ip, pc, asr r6
    1e40:	4d440047 	stclmi	0, cr0, [r4, #-284]	; 0xfffffee4
    1e44:	6c435f41 	mcrrvs	15, 4, r5, r3, cr1
    1e48:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1e4c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1e50:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1e54:	00746942 	rsbseq	r6, r4, r2, asr #18
    1e58:	5f414d44 	svcpl	0x00414d44
    1e5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e60:	6e496870 	mcrvs	8, 2, r6, cr9, cr0, {3}
    1e64:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    1e68:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    1e6c:	43657a69 	cmnmi	r5, #430080	; 0x69000
    1e70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e74:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1e78:	65445f41 	strbvs	r5, [r4, #-3905]	; 0xf41
    1e7c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1e80:	414d4400 	cmpmi	sp, r0, lsl #8
    1e84:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1e88:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1e8c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1e90:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    1e94:	52434649 	subpl	r4, r3, #76546048	; 0x4900000
    1e98:	41304d00 	teqmi	r0, r0, lsl #26
    1e9c:	444e0052 	strbmi	r0, [lr], #-82	; 0x52
    1ea0:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
    1ea4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1ea8:	61423179 	hvcvs	8985	; 0x2319
    1eac:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    1eb0:	44007264 	strmi	r7, [r0], #-612	; 0x264
    1eb4:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1eb8:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 1d9c <_Min_Stack_Size+0x199c>
    1ebc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1ec0:	5f414d44 	svcpl	0x00414d44
    1ec4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1ec8:	7453646d 	ldrbvc	r6, [r3], #-1133	; 0x46d
    1ecc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1ed0:	414d4400 	cmpmi	sp, r0, lsl #8
    1ed4:	6168435f 	cmnvs	r8, pc, asr r3
    1ed8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1edc:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    1ee0:	4279726f 	rsbsmi	r7, r9, #-268435450	; 0xf0000006
    1ee4:	41657361 	cmnmi	r5, r1, ror #6
    1ee8:	00726464 	rsbseq	r6, r2, r4, ror #8
    1eec:	5f414d44 	svcpl	0x00414d44
    1ef0:	6f6d654d 	svcvs	0x006d654d
    1ef4:	42307972 	eorsmi	r7, r0, #1867776	; 0x1c8000
    1ef8:	41657361 	cmnmi	r5, r1, ror #6
    1efc:	00726464 	rsbseq	r6, r2, r4, ror #8
    1f00:	5f414d44 	svcpl	0x00414d44
    1f04:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1f08:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1f0c:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    1f10:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1de4 <_Min_Stack_Size+0x19e4>
    1f14:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1f18:	5f414d44 	svcpl	0x00414d44
    1f1c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1f20:	44727275 	ldrbtmi	r7, [r2], #-629	; 0x275
    1f24:	43617461 	cmnmi	r1, #1627389952	; 0x61000000
    1f28:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1f2c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1f30:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    1f34:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1f38:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f3c:	5f414d44 	svcpl	0x00414d44
    1f40:	44005449 	strmi	r5, [r0], #-1097	; 0x449
    1f44:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1e18 <_Min_Stack_Size+0x1a18>
    1f48:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1f4c:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
    1f50:	7a695361 	bvc	1a56cdc <_Min_Stack_Size+0x1a568dc>
    1f54:	58520065 	ldmdapl	r2, {r0, r2, r5, r6}^
    1f58:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    1f5c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    1f60:	5053006e 	subspl	r0, r3, lr, rrx
    1f64:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    1f68:	70007469 	andvc	r7, r0, r9, ror #8
    1f6c:	00726c6c 	rsbseq	r6, r2, ip, ror #24
    1f70:	5f533249 	svcpl	0x00533249
    1f74:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1f78:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1f7c:	43007463 	movwmi	r7, #1123	; 0x463
    1f80:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    1f84:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f88:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    1f8c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1f90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f94:	32490067 	subcc	r0, r9, #103	; 0x67
    1f98:	6e495f53 	mcrvs	15, 2, r5, cr9, cr3, {2}
    1f9c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1fa0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1fa4:	50530066 	subspl	r0, r3, r6, rrx
    1fa8:	32495f49 	subcc	r5, r9, #292	; 0x124
    1fac:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xf53
    1fb0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1fb4:	53324900 	teqpl	r2, #0, 18
    1fb8:	6174535f 	cmnvs	r4, pc, asr r3
    1fbc:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1fc0:	50530064 	subspl	r0, r3, r4, rrx
    1fc4:	69425f49 	stmdbvs	r2, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    1fc8:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0x944
    1fcc:	6f697463 	svcvs	0x00697463
    1fd0:	4c6c616e 	stfmie	f6, [ip], #-440	; 0xfffffe48
    1fd4:	43656e69 	cmnmi	r5, #1680	; 0x690
    1fd8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1fdc:	50530067 	subspl	r0, r3, r7, rrx
    1fe0:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    1fe4:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    1fe8:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1fec:	696d6f6e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1ff0:	63006c61 	movwvs	r6, #3169	; 0xc61
    1ff4:	65726372 	ldrbvs	r6, [r2, #-882]!	; 0x372
    1ff8:	50530067 	subspl	r0, r3, r7, rrx
    1ffc:	32495f49 	subcc	r5, r9, #292	; 0x124
    2000:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2004:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    2008:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    200c:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2010:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2014:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    2018:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    201c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2020:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    2024:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    2028:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    202c:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    2030:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    2034:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2038:	53006769 	movwpl	r6, #1897	; 0x769
    203c:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    2040:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2044:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2048:	50530074 	subspl	r0, r3, r4, ror r0
    204c:	32495f49 	subcc	r5, r9, #292	; 0x124
    2050:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xf53
    2054:	616c4674 	smcvs	50276	; 0xc464
    2058:	61745367 	cmnvs	r4, r7, ror #6
    205c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2060:	5f495053 	svcpl	0x00495053
    2064:	754f5353 	strbvc	r5, [pc, #-851]	; 1d19 <_Min_Stack_Size+0x1919>
    2068:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    206c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2070:	78533249 	ldmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    2074:	00747865 	rsbseq	r7, r4, r5, ror #16
    2078:	52435854 	subpl	r5, r3, #84, 16	; 0x540000
    207c:	53005243 	movwpl	r5, #579	; 0x243
    2080:	445f4950 	ldrbmi	r4, [pc], #-2384	; 2088 <_Min_Stack_Size+0x1c88>
    2084:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    2088:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    208c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2090:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    2094:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2098:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    209c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    20a0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    20a4:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    20a8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20ac:	6172545f 	cmnvs	r2, pc, asr r4
    20b0:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    20b4:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    20b8:	53324900 	teqpl	r2, #0, 18
    20bc:	4c434d5f 	mcrrmi	13, 5, r4, r3, cr15
    20c0:	74754f4b 	ldrbtvc	r4, [r5], #-3915	; 0xf4b
    20c4:	00747570 	rsbseq	r7, r4, r0, ror r5
    20c8:	5f495053 	svcpl	0x00495053
    20cc:	5f533249 	svcpl	0x00533249
    20d0:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    20d4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20d8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    20dc:	0054495f 	subseq	r4, r4, pc, asr r9
    20e0:	5f495053 	svcpl	0x00495053
    20e4:	61746144 	cmnvs	r4, r4, asr #2
    20e8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    20ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    20f0:	53006769 	movwpl	r6, #1897	; 0x769
    20f4:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    20f8:	6f504352 	svcvs	0x00504352
    20fc:	6f6e796c 	svcvs	0x006e796c
    2100:	6c61696d 	stclvs	9, cr6, [r1], #-436	; 0xfffffe4c
    2104:	53324900 	teqpl	r2, #0, 18
    2108:	4f50435f 	svcmi	0x0050435f
    210c:	5053004c 	subspl	r0, r3, ip, asr #32
    2110:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2114:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2118:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    211c:	50530066 	subspl	r0, r3, r6, rrx
    2120:	32495f49 	subcc	r5, r9, #292	; 0x124
    2124:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2128:	71655241 	cmnvc	r5, r1, asr #4
    212c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2130:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2134:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2138:	00746375 	rsbseq	r6, r4, r5, ror r3
    213c:	5f495053 	svcpl	0x00495053
    2140:	6f4d4954 	svcvs	0x004d4954
    2144:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2148:	32490064 	subcc	r0, r9, #100	; 0x64
    214c:	61445f53 	cmpvs	r4, r3, asr pc
    2150:	6f466174 	svcvs	0x00466174
    2154:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
    2158:	53324900 	teqpl	r2, #0, 18
    215c:	53005250 	movwpl	r5, #592	; 0x250
    2160:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    2164:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2168:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 20a8 <_Min_Stack_Size+0x1ca8>
    216c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2170:	5f495053 	svcpl	0x00495053
    2174:	5f533249 	svcpl	0x00533249
    2178:	61656c43 	cmnvs	r5, r3, asr #24
    217c:	50544972 	subspl	r4, r4, r2, ror r9
    2180:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2184:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2188:	32690074 	rsbcc	r0, r9, #116	; 0x74
    218c:	76696473 			; <UNDEFINED> instruction: 0x76696473
    2190:	53324900 	teqpl	r2, #0, 18
    2194:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0x15f
    2198:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    219c:	53007165 	movwpl	r7, #357	; 0x165
    21a0:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    21a4:	004c4f50 	subeq	r4, ip, r0, asr pc
    21a8:	5f533249 	svcpl	0x00533249
    21ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    21b0:	5f495053 	svcpl	0x00495053
    21b4:	73726946 	cmnvc	r2, #1146880	; 0x118000
    21b8:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    21bc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    21c0:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    21c4:	50530041 	subspl	r0, r3, r1, asr #32
    21c8:	53007849 	movwpl	r7, #2121	; 0x849
    21cc:	425f4950 	subsmi	r4, pc, #80, 18	; 0x140000
    21d0:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
    21d4:	50657461 	rsbpl	r7, r5, r1, ror #8
    21d8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    21dc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    21e0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    21e4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    21e8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    21ec:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    21f0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 21f8 <_Min_Stack_Size+0x1df8>
    21f4:	50530065 	subspl	r0, r3, r5, rrx
    21f8:	32495f49 	subcc	r5, r9, #292	; 0x124
    21fc:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    2200:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2204:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2208:	5f495053 	svcpl	0x00495053
    220c:	0053534e 	subseq	r5, r3, lr, asr #6
    2210:	5f495053 	svcpl	0x00495053
    2214:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    2218:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    221c:	43524365 	cmpmi	r2, #-1811939327	; 0x94000001
    2220:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2224:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2228:	00435243 	subeq	r5, r3, r3, asr #4
    222c:	5f533249 	svcpl	0x00533249
    2230:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2234:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2238:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    223c:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    2240:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2244:	5f533249 	svcpl	0x00533249
    2248:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    224c:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    2250:	6f437865 	svcvs	0x00437865
    2254:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2258:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    225c:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    2260:	7a695361 	bvc	1a56fec <_Min_Stack_Size+0x1a56bec>
    2264:	32690065 	rsbcc	r0, r9, #101	; 0x65
    2268:	64646f73 	strbtvs	r6, [r4], #-3955	; 0xf73
    226c:	63617000 	cmnvs	r1, #0
    2270:	6c74656b 	cfldr64vs	mvdx6, [r4], #-428	; 0xfffffe54
    2274:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    2278:	6e690068 	cdpvs	0, 6, cr0, cr9, cr8, {3}
    227c:	4f432f63 	svcmi	0x00432f63
    2280:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2284:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2288:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    228c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2290:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2294:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2298:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    229c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    22a0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    22a4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    22a8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    22ac:	445f6870 	ldrbmi	r6, [pc], #-2160	; 22b4 <_Min_Stack_Size+0x1eb4>
    22b0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    22b4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    22b8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    22bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    22c0:	5f787834 	svcpl	0x00787834
    22c4:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    22c8:	50530063 	subspl	r0, r3, r3, rrx
    22cc:	32495f49 	subcc	r5, r9, #292	; 0x124
    22d0:	65535f53 	ldrbvs	r5, [r3, #-3923]	; 0xf53
    22d4:	6144646e 	cmpvs	r4, lr, ror #8
    22d8:	53006174 	movwpl	r6, #372	; 0x174
    22dc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    22e0:	525f5332 	subspl	r5, pc, #-939524096	; 0xc8000000
    22e4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    22e8:	61446576 	hvcvs	18006	; 0x4656
    22ec:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
    22f0:	6c637332 	stclvs	3, cr7, [r3], #-200	; 0xffffff38
    22f4:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    22f8:	4c5f4954 	mrrcmi	9, 5, r4, pc, cr4	; <UNPREDICTABLE>
    22fc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2300:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2304:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 230c <_Min_Stack_Size+0x1f0c>
    2308:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
    230c:	4c5f4954 	mrrcmi	9, 5, r4, pc, cr4	; <UNPREDICTABLE>
    2310:	43656e69 	cmnmi	r5, #1680	; 0x690
    2314:	4500646d 	strmi	r6, [r0, #-1133]	; 0x46d
    2318:	5f495458 	svcpl	0x00495458
    231c:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2320:	00726567 	rsbseq	r6, r2, r7, ror #10
    2324:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2328:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2330 <_Min_Stack_Size+0x1f30>
    232c:	76455f65 	strbvc	r5, [r5], -r5, ror #30
    2330:	00746e65 	rsbseq	r6, r4, r5, ror #28
    2334:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2338:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    233c:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    2340:	49575365 	ldmdbmi	r7, {r0, r2, r5, r6, r8, r9, ip, lr}^
    2344:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2348:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    234c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2350:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2354:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2358:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    235c:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    2360:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2364:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2368:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    236c:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    2370:	4d5f4954 	ldclmi	9, cr4, [pc, #-336]	; 2228 <_Min_Stack_Size+0x1e28>
    2374:	5f65646f 	svcpl	0x0065646f
    2378:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    237c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    2380:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    2384:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
    2388:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    238c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2390:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2394:	646f4d49 	strbtvs	r4, [pc], #-3401	; 239c <_Min_Stack_Size+0x1f9c>
    2398:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    239c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    23a0:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    23a4:	545f4954 	ldrbpl	r4, [pc], #-2388	; 23ac <_Min_Stack_Size+0x1fac>
    23a8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    23ac:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    23b0:	00525354 	subseq	r5, r2, r4, asr r3
    23b4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    23b8:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    23bc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    23c0:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
    23c4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    23c8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    23cc:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    23d0:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    23d4:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
    23d8:	5f676e69 	svcpl	0x00676e69
    23dc:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
    23e0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    23e4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    23e8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    23ec:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    23f0:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
    23f4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    23f8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    23fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2400:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2404:	74535f49 	ldrbvc	r5, [r3], #-3913	; 0xf49
    2408:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    240c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2410:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2414:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    2418:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    241c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2420:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
    2424:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
    2428:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    242c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    2430:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2434:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    2438:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    243c:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2440:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    2444:	61465f72 	hvcvs	26098	; 0x65f2
    2448:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
    244c:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2450:	4f432f63 	svcmi	0x00432f63
    2454:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2458:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    245c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2460:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2464:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2468:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    246c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2470:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2474:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2478:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    247c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2480:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2488 <_Min_Stack_Size+0x2088>
    2484:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2488:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    248c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2490:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2494:	5f787834 	svcpl	0x00787834
    2498:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    249c:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    24a0:	00525354 	subseq	r5, r2, r4, asr r3
    24a4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    24a8:	67697254 			; <UNDEFINED> instruction: 0x67697254
    24ac:	5f726567 	svcpl	0x00726567
    24b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    24b4:	00666544 	rsbeq	r6, r6, r4, asr #10
    24b8:	45495753 	strbmi	r5, [r9, #-1875]	; 0x753
    24bc:	58450052 	stmdapl	r5, {r1, r4, r6}^
    24c0:	445f4954 	ldrbmi	r4, [pc], #-2388	; 24c8 <_Min_Stack_Size+0x20c8>
    24c4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    24c8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    24cc:	5f443241 	svcpl	0x00443241
    24d0:	74534742 	ldrbvc	r4, [r3], #-1858	; 0x742
    24d4:	00747261 	rsbseq	r7, r4, r1, ror #4
    24d8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    24dc:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    24e0:	5f434650 	svcpl	0x00434650
    24e4:	48504c41 	ldmdami	r0, {r0, r6, sl, fp, lr}^
    24e8:	41565f41 	cmpmi	r6, r1, asr #30
    24ec:	0045554c 	subeq	r5, r5, ip, asr #10
    24f0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    24f4:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    24f8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    24fc:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2500:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2504:	414d4400 	cmpmi	sp, r0, lsl #8
    2508:	4f5f4432 	svcmi	0x005f4432
    250c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2510:	756c4274 	strbvc	r4, [ip, #-628]!	; 0x274
    2514:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2518:	5f443241 	svcpl	0x00443241
    251c:	5f434746 	svcpl	0x00434746
    2520:	00444552 	subeq	r4, r4, r2, asr r5
    2524:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2528:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    252c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2530:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    2534:	5f443241 	svcpl	0x00443241
    2538:	61656c43 	cmnvs	r5, r3, asr #24
    253c:	616c4672 	smcvs	50274	; 0xc462
    2540:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2544:	5f443241 	svcpl	0x00443241
    2548:	465f5449 	ldrbmi	r5, [pc], -r9, asr #8
    254c:	0047414c 	subeq	r4, r7, ip, asr #2
    2550:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2554:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    2558:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    255c:	4d435f54 	stclmi	15, cr5, [r3, #-336]	; 0xfffffeb0
    2560:	43474600 	movtmi	r4, #30208	; 0x7600
    2564:	0054554c 	subseq	r5, r4, ip, asr #10
    2568:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    256c:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2570:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2574:	4d435f54 	stclmi	15, cr5, [r3, #-336]	; 0xfffffeb0
    2578:	414d4400 	cmpmi	sp, r0, lsl #8
    257c:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2580:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    2584:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2588:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    258c:	5f676600 	svcpl	0x00676600
    2590:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    2594:	6c617661 	stclvs	6, cr7, [r1], #-388	; 0xfffffe7c
    2598:	44006575 	strmi	r6, [r0], #-1397	; 0x575
    259c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    25a0:	61574c5f 	cmpvs	r7, pc, asr ip
    25a4:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    25a8:	436b7261 	cmnmi	fp, #268435462	; 0x10000006
    25ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    25b0:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    25b4:	5f443241 	svcpl	0x00443241
    25b8:	495f4742 	ldmdbmi	pc, {r1, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    25bc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    25c0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    25c4:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    25c8:	5f443241 	svcpl	0x00443241
    25cc:	414d4746 	cmpmi	sp, r6, asr #14
    25d0:	414d4400 	cmpmi	sp, r0, lsl #8
    25d4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    25d8:	44004f47 	strmi	r4, [r0], #-3911	; 0xf47
    25dc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    25e0:	5f47465f 	svcpl	0x0047465f
    25e4:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    25e8:	5a49535f 	bpl	125736c <_Min_Stack_Size+0x1256f6c>
    25ec:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    25f0:	5f443241 	svcpl	0x00443241
    25f4:	4d434742 	stclmi	7, cr4, [r3, #-264]	; 0xfffffef8
    25f8:	41005241 	tstmi	r0, r1, asr #4
    25fc:	5243544d 	subpl	r5, r3, #1291845632	; 0x4d000000
    2600:	414d4400 	cmpmi	sp, r0, lsl #8
    2604:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2608:	43465047 	movtmi	r5, #24647	; 0x6047
    260c:	504c415f 	subpl	r4, ip, pc, asr r1
    2610:	565f4148 	ldrbpl	r4, [pc], -r8, asr #2
    2614:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
    2618:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    261c:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2620:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    2624:	5f443241 	svcpl	0x00443241
    2628:	5f434742 	svcpl	0x00434742
    262c:	45455247 	strbmi	r5, [r5, #-583]	; 0x247
    2630:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
    2634:	5f443241 	svcpl	0x00443241
    2638:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0x950
    263c:	7265506c 	rsbvc	r5, r5, #108	; 0x6c
    2640:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2644:	414d4400 	cmpmi	sp, r0, lsl #8
    2648:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    264c:	425f4347 	subsmi	r4, pc, #469762049	; 0x1c000001
    2650:	0045554c 	subeq	r5, r5, ip, asr #10
    2654:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2658:	6f4d5f44 	svcvs	0x004d5f44
    265c:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    2660:	6f635f67 	svcvs	0x00635f67
    2664:	67726f6c 	ldrbvs	r6, [r2, -ip, ror #30]!
    2668:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    266c:	414d4400 	cmpmi	sp, r0, lsl #8
    2670:	445f4432 	ldrbmi	r4, [pc], #-1074	; 2678 <_Min_Stack_Size+0x2278>
    2674:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2678:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    267c:	5f443241 	svcpl	0x00443241
    2680:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2684:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2688:	42007463 	andmi	r7, r0, #1660944384	; 0x63000000
    268c:	554c4347 	strbpl	r4, [ip, #-839]	; 0x347
    2690:	4d440054 	stclmi	0, cr0, [r4, #-336]	; 0xfffffeb0
    2694:	5f443241 	svcpl	0x00443241
    2698:	6f434742 	svcvs	0x00434742
    269c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    26a0:	414d4400 	cmpmi	sp, r0, lsl #8
    26a4:	535f4432 	cmppl	pc, #838860800	; 0x32000000
    26a8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    26ac:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    26b0:	47460074 	smlsldxmi	r0, r6, r4, r0
    26b4:	524c4f43 	subpl	r4, ip, #268	; 0x10c
    26b8:	414d4400 	cmpmi	sp, r0, lsl #8
    26bc:	445f4432 	ldrbmi	r4, [pc], #-1074	; 26c4 <_Min_Stack_Size+0x22c4>
    26c0:	54646165 	strbtpl	r6, [r4], #-357	; 0x165
    26c4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    26c8:	414d4746 	cmpmi	sp, r6, asr #14
    26cc:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    26d0:	5f443241 	svcpl	0x00443241
    26d4:	46504742 	ldrbmi	r4, [r0], -r2, asr #14
    26d8:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    26dc:	5f414850 	svcpl	0x00414850
    26e0:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    26e4:	414d4400 	cmpmi	sp, r0, lsl #8
    26e8:	435f4432 	cmpmi	pc, #838860800	; 0x32000000
    26ec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    26f0:	414d4400 	cmpmi	sp, r0, lsl #8
    26f4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    26f8:	6e6f4347 	cdpvs	3, 6, cr4, cr15, cr7, {2}
    26fc:	00676966 	rsbeq	r6, r7, r6, ror #18
    2700:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    2704:	7374756c 	cmnvc	r4, #108, 10	; 0x1b000000
    2708:	00657a69 	rsbeq	r7, r5, r9, ror #20
    270c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2710:	754e5f44 	strbvc	r5, [lr, #-3908]	; 0xf44
    2714:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    2718:	694c664f 	stmdbvs	ip, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    271c:	6600656e 	strvs	r6, [r0], -lr, ror #10
    2720:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2724:	6f637475 	svcvs	0x00637475
    2728:	6d726f6c 	ldclvs	15, cr6, [r2, #-432]!	; 0xfffffe50
    272c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2730:	524f4746 	subpl	r4, pc, #18350080	; 0x1180000
    2734:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    2738:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    273c:	4d440061 	stclmi	0, cr0, [r4, #-388]	; 0xfffffe7c
    2740:	5f443241 	svcpl	0x00443241
    2744:	70737553 	rsbsvc	r7, r3, r3, asr r5
    2748:	00646e65 	rsbeq	r6, r4, r5, ror #28
    274c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2750:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2754:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    2758:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    275c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2760:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2764:	62415f44 	subvs	r5, r1, #68, 30	; 0x110
    2768:	5474726f 	ldrbtpl	r7, [r4], #-623	; 0x26f
    276c:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    2770:	00726566 	rsbseq	r6, r2, r6, ror #10
    2774:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2778:	54495f44 	strbpl	r5, [r9], #-3908	; 0xf44
    277c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2780:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    2784:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2788:	0054495f 	subseq	r4, r4, pc, asr r9
    278c:	615f6762 	cmpvs	pc, r2, ror #14
    2790:	6168706c 	cmnvs	r8, ip, rrx
    2794:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
    2798:	67660065 	strbvs	r0, [r6, -r5, rrx]!
    279c:	756c635f 	strbvc	r6, [ip, #-863]!	; 0x35f
    27a0:	7a697374 	bvc	1a5f578 <_Min_Stack_Size+0x1a5f178>
    27a4:	4d4f0065 	stclmi	0, cr0, [pc, #-404]	; 2618 <_Min_Stack_Size+0x2218>
    27a8:	44005241 	strmi	r5, [r0], #-577	; 0x241
    27ac:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    27b0:	6e694c5f 	mcrvs	12, 3, r4, cr9, cr15, {2}
    27b4:	74615765 	strbtvc	r5, [r1], #-1893	; 0x765
    27b8:	616d7265 	cmnvs	sp, r5, ror #4
    27bc:	6f436b72 	svcvs	0x00436b72
    27c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27c4:	5f676200 	svcpl	0x00676200
    27c8:	6f6c6f63 	svcvs	0x006c6f63
    27cc:	64657272 	strbtvs	r7, [r5], #-626	; 0x272
    27d0:	414d4400 	cmpmi	sp, r0, lsl #8
    27d4:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    27d8:	004d4347 	subeq	r4, sp, r7, asr #6
    27dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    27e0:	6e495f44 	cdpvs	15, 4, cr5, cr9, cr4, {2}
    27e4:	66007469 	strvs	r7, [r0], -r9, ror #8
    27e8:	6c615f67 	stclvs	15, cr5, [r1], #-412	; 0xfffffe64
    27ec:	5f616870 	svcpl	0x00616870
    27f0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    27f4:	414d4400 	cmpmi	sp, r0, lsl #8
    27f8:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    27fc:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2800:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2804:	4f006665 	svcmi	0x00006665
    2808:	524c4f43 	subpl	r4, ip, #268	; 0x10c
    280c:	43474200 	movtmi	r4, #29184	; 0x7200
    2810:	00524c4f 	subseq	r4, r2, pc, asr #24
    2814:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2818:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    281c:	4400414d 	strmi	r4, [r0], #-333	; 0x14d
    2820:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2824:	4347425f 	movtmi	r4, #29279	; 0x725f
    2828:	554c425f 	strbpl	r4, [ip, #-607]	; 0x25f
    282c:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    2830:	5f443241 	svcpl	0x00443241
    2834:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2838:	61725474 	cmnvs	r2, r4, ror r4
    283c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
    2840:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    2844:	5f443241 	svcpl	0x00443241
    2848:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    284c:	46504f00 	ldrbmi	r4, [r0], -r0, lsl #30
    2850:	00524343 	subseq	r4, r2, r3, asr #6
    2854:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2858:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    285c:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2860:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2864:	4200455a 	andmi	r4, r0, #377487360	; 0x16800000
    2868:	43465047 	movtmi	r5, #24647	; 0x6047
    286c:	69005243 	stmdbvs	r0, {r0, r1, r6, r9, ip, lr}
    2870:	432f636e 	teqmi	pc, #-1207959551	; 0xb8000001
    2874:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2878:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    287c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2880:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2884:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2888:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    288c:	2f736569 	svccs	0x00736569
    2890:	334d5453 	movtcc	r5, #54355	; 0xd453
    2894:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2898:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    289c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    28a0:	5f687069 	svcpl	0x00687069
    28a4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    28a8:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    28ac:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    28b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    28b4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    28b8:	616d645f 	cmnvs	sp, pc, asr r4
    28bc:	632e6432 	teqvs	lr, #838860800	; 0x32000000
    28c0:	414d4400 	cmpmi	sp, r0, lsl #8
    28c4:	445f4432 	ldrbmi	r4, [pc], #-1074	; 28cc <_Min_Stack_Size+0x24cc>
    28c8:	54646165 	strbtpl	r6, [r4], #-357	; 0x165
    28cc:	43656d69 	cmnmi	r5, #6720	; 0x1a40
    28d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    28d4:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    28d8:	5f443241 	svcpl	0x00443241
    28dc:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    28e0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    28e4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    28e8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    28ec:	5f443241 	svcpl	0x00443241
    28f0:	61656c43 	cmnvs	r5, r3, asr #24
    28f4:	50544972 	subspl	r4, r4, r2, ror r9
    28f8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    28fc:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2900:	47460074 	smlsldxmi	r0, r6, r4, r0
    2904:	43434650 	movtmi	r4, #13904	; 0x3650
    2908:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    290c:	5f443241 	svcpl	0x00443241
    2910:	5f434746 	svcpl	0x00434746
    2914:	45455247 	strbmi	r5, [r5, #-583]	; 0x247
    2918:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
    291c:	5f443241 	svcpl	0x00443241
    2920:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2924:	654d7475 	strbvs	r7, [sp, #-1141]	; 0x475
    2928:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    292c:	00646441 	rsbeq	r6, r4, r1, asr #8
    2930:	6c786970 	ldclvs	9, cr6, [r8], #-448	; 0xfffffe40
    2934:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2938:	7274756f 	rsbsvc	r7, r4, #465567744	; 0x1bc00000
    293c:	44006465 	strmi	r6, [r0], #-1125	; 0x465
    2940:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2944:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    2948:	52747570 	rsbspl	r7, r4, #112, 10	; 0x1c000000
    294c:	66006465 	strvs	r6, [r0], -r5, ror #8
    2950:	6f635f67 	svcvs	0x00635f67
    2954:	67726f6c 	ldrbvs	r6, [r2, -ip, ror #30]!
    2958:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    295c:	414d4400 	cmpmi	sp, r0, lsl #8
    2960:	4f5f4432 	svcmi	0x005f4432
    2964:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2968:	65724774 	ldrbvs	r4, [r2, #-1908]!	; 0x774
    296c:	44006e65 	strmi	r6, [r0], #-3685	; 0xe65
    2970:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2974:	4347465f 	movtmi	r4, #30303	; 0x765f
    2978:	4d44004d 	stclmi	0, cr0, [r4, #-308]	; 0xfffffecc
    297c:	5f443241 	svcpl	0x00443241
    2980:	495f4742 	ldmdbmi	pc, {r1, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    2984:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2988:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    298c:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
    2990:	52414d47 	subpl	r4, r1, #4544	; 0x11c0
    2994:	414d4400 	cmpmi	sp, r0, lsl #8
    2998:	545f4432 	ldrbpl	r4, [pc], #-1074	; 29a0 <_Min_Stack_Size+0x25a0>
    299c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    29a0:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    29a4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    29a8:	4f47425f 	svcmi	0x0047425f
    29ac:	414d4400 	cmpmi	sp, r0, lsl #8
    29b0:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    29b4:	43465047 	movtmi	r5, #24647	; 0x6047
    29b8:	504c415f 	subpl	r4, ip, pc, asr r1
    29bc:	4d5f4148 	ldfmie	f4, [pc, #-288]	; 28a4 <_Min_Stack_Size+0x24a4>
    29c0:	0045444f 	subeq	r4, r5, pc, asr #8
    29c4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    29c8:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    29cc:	616c4674 	smcvs	50276	; 0xc464
    29d0:	61745367 	cmnvs	r4, r7, ror #6
    29d4:	00737574 	rsbseq	r7, r3, r4, ror r5
    29d8:	524f4742 	subpl	r4, pc, #17301504	; 0x1080000
    29dc:	414d4400 	cmpmi	sp, r0, lsl #8
    29e0:	4f5f4432 	svcmi	0x005f4432
    29e4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    29e8:	66664f74 	uqsub16vs	r4, r6, r4
    29ec:	00746573 	rsbseq	r6, r4, r3, ror r5
    29f0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    29f4:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    29f8:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    29fc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2a00:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    2a04:	5f443241 	svcpl	0x00443241
    2a08:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2a0c:	6c417475 	cfstrdvs	mvd7, [r1], {117}	; 0x75
    2a10:	00616870 	rsbeq	r6, r1, r0, ror r8
    2a14:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2a18:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    2a1c:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xf43
    2a20:	67660044 	strbvs	r0, [r6, -r4, asr #32]!
    2a24:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 28b0 <_Min_Stack_Size+0x24b0>
    2a28:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
    2a2c:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    2a30:	5f443241 	svcpl	0x00443241
    2a34:	4d434746 	stclmi	7, cr4, [r3, #-280]	; 0xfffffee8
    2a38:	62005241 	andvs	r5, r0, #268435460	; 0x10000004
    2a3c:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2a40:	6f637475 	svcvs	0x00637475
    2a44:	6d726f6c 	ldclvs	15, cr6, [r2, #-432]!	; 0xfffffe50
    2a48:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2a4c:	615f6762 	cmpvs	pc, r2, ror #14
    2a50:	6168706c 	cmnvs	r8, ip, rrx
    2a54:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 2a5c <_Min_Stack_Size+0x265c>
    2a58:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    2a5c:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2a60:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2a64:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2a68:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2a6c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2a70:	42464300 	submi	r4, r6, #0, 6
    2a74:	00524e4c 	subseq	r4, r2, ip, asr #28
    2a78:	4344544c 	movtmi	r5, #17484	; 0x444c
    2a7c:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2908 <_Min_Stack_Size+0x2508>
    2a80:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2a84:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    2a88:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a8c:	48006769 	stmdami	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2a90:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    2a94:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2a98:	445f4344 	ldrbmi	r4, [pc], #-836	; 2aa0 <_Min_Stack_Size+0x26a0>
    2a9c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2aa0:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2aa4:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2aa8:	4954554c 	ldmdbmi	r4, {r2, r3, r6, r8, sl, ip, lr}^
    2aac:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2ab0:	52434342 	subpl	r4, r3, #134217729	; 0x8000001
    2ab4:	42464300 	submi	r4, r6, #0, 6
    2ab8:	6100524c 	tstvs	r0, ip, asr #4
    2abc:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2ac0:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2ac4:	63616465 	cmnvs	r1, #1694498816	; 0x65000000
    2ac8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2acc:	544c0057 	strbpl	r0, [ip], #-87	; 0x57
    2ad0:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2ad4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2ad8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2adc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ae0:	6f635f43 	svcvs	0x00635f43
    2ae4:	6b726f6c 	blvs	1c9e89c <_Min_Stack_Size+0x1c9e49c>
    2ae8:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    2aec:	6e495f67 	cdpvs	15, 4, cr5, cr9, cr7, {3}
    2af0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2af4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2af8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2afc:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    2b00:	61745342 	cmnvs	r4, r2, asr #6
    2b04:	64417472 	strbvs	r7, [r1], #-1138	; 0x472
    2b08:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2b0c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b10:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    2b14:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2b18:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 2950 <_Min_Stack_Size+0x2550>
    2b1c:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0x26f
    2b20:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    2b24:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    2b28:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2b2c:	536c6163 	cmnpl	ip, #-1073741800	; 0xc0000018
    2b30:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2b34:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b38:	63415f43 	movtvs	r5, #8003	; 0x1f43
    2b3c:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2b40:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2b44:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2b48:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    2b4c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2b50:	614c5f43 	cmpvs	ip, r3, asr #30
    2b54:	50726579 	rsbspl	r6, r2, r9, ror r5
    2b58:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    2b5c:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    2b60:	4c007461 	cfstrsmi	mvf7, [r0], {97}	; 0x61
    2b64:	5f434454 	svcpl	0x00434454
    2b68:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2b6c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2b70:	4344544c 	movtmi	r5, #17484	; 0x444c
    2b74:	50494c5f 	subpl	r4, r9, pc, asr ip
    2b78:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    2b7c:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    2b80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b84:	56570067 	ldrbpl	r0, [r7], -r7, rrx
    2b88:	00524350 	subseq	r4, r2, r0, asr r3
    2b8c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2b90:	5053485f 	subspl	r4, r3, pc, asr r8
    2b94:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2b98:	00797469 	rsbseq	r7, r9, r9, ror #8
    2b9c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ba0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2ba4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2ba8:	00746375 	rsbseq	r6, r4, r5, ror r3
    2bac:	4344544c 	movtmi	r5, #17484	; 0x444c
    2bb0:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2bb4:	6f72676b 	svcvs	0x0072676b
    2bb8:	47646e75 			; <UNDEFINED> instruction: 0x47646e75
    2bbc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2bc0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2bc4:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    2bc8:	415f4344 	cmpmi	pc, r4, asr #6
    2bcc:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2bd0:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2bd4:	42566465 	subsmi	r6, r6, #1694498816	; 0x65000000
    2bd8:	544c0050 	strbpl	r0, [ip], #-80	; 0x50
    2bdc:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2be0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2be4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2be8:	61636400 	cmnvs	r3, r0, lsl #8
    2bec:	6168706c 	cmnvs	r8, ip, rrx
    2bf0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2bf4:	63415f43 	movtvs	r5, #8003	; 0x1f43
    2bf8:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2bfc:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2c00:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2c04:	57657669 	strbpl	r7, [r5, -r9, ror #12]!
    2c08:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c0c:	614c5f43 	cmpvs	ip, r3, asr #30
    2c10:	53726579 	cmnpl	r2, #507510784	; 0x1e400000
    2c14:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2c18:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0x576
    2c1c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    2c20:	6174735f 	cmnvs	r4, pc, asr r3
    2c24:	68007472 	stmdavs	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
    2c28:	7a69726f 	bvc	1a5f5ec <_Min_Stack_Size+0x1a5f1ec>
    2c2c:	61746e6f 	cmnvs	r4, pc, ror #28
    2c30:	6e79736c 	cdpvs	3, 7, cr7, cr9, cr12, {3}
    2c34:	544c0063 	strbpl	r0, [ip], #-99	; 0x63
    2c38:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2c3c:	6400646d 	strvs	r6, [r0], #-1133	; 0x46d
    2c40:	64657263 	strbtvs	r7, [r5], #-611	; 0x263
    2c44:	63616200 	cmnvs	r1, #0, 4
    2c48:	6465726b 	strbtvs	r7, [r5], #-619	; 0x26b
    2c4c:	73767700 	cmnvc	r6, #0, 14
    2c50:	736f7070 	cmnvc	pc, #112	; 0x70
    2c54:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c58:	6f485f43 	svcvs	0x00485f43
    2c5c:	6f7a6972 	svcvs	0x007a6972
    2c60:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2c64:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    2c68:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c6c:	614c5f43 	cmpvs	ip, r3, asr #30
    2c70:	5f726579 	svcpl	0x00726579
    2c74:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2c78:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c7c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2c80:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2c84:	00787265 	rsbseq	r7, r8, r5, ror #4
    2c88:	52434143 	subpl	r4, r3, #-1073741808	; 0xc0000010
    2c8c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c90:	6c425f43 	mcrrvs	15, 4, r5, r2, cr3
    2c94:	61566575 	cmpvs	r6, r5, ror r5
    2c98:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2c9c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ca0:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2b2c <_Min_Stack_Size+0x272c>
    2ca4:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2ca8:	65724779 	ldrbvs	r4, [r2, #-1913]!	; 0x779
    2cac:	4c006e65 	stcmi	14, cr6, [r0], {101}	; 0x65
    2cb0:	5f434454 	svcpl	0x00434454
    2cb4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2cb8:	61745344 	cmnvs	r4, r4, asr #6
    2cbc:	00737574 	rsbseq	r7, r3, r4, ror r5
    2cc0:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2cc4:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2cc8:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2ccc:	00706f74 	rsbseq	r6, r0, r4, ror pc
    2cd0:	6b636162 	blvs	18db260 <_Min_Stack_Size+0x18dae60>
    2cd4:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2cd8:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    2cdc:	445f4344 	ldrbmi	r4, [pc], #-836	; 2ce4 <_Min_Stack_Size+0x28e4>
    2ce0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2ce4:	6f43746c 	svcvs	0x0043746c
    2ce8:	42726f6c 	rsbsmi	r6, r2, #108, 30	; 0x1b0
    2cec:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2cf0:	4344544c 	movtmi	r5, #17484	; 0x444c
    2cf4:	4246435f 	submi	r4, r6, #2080374785	; 0x7c000001
    2cf8:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2cfc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2d00:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    2d04:	5f434454 	svcpl	0x00434454
    2d08:	74726556 	ldrbtvc	r6, [r2], #-1366	; 0x556
    2d0c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    2d10:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    2d14:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2d18:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2d1c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2d20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2d24:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    2d28:	485f4344 	ldmdami	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2d2c:	7a69726f 	bvc	1a5f6f0 <_Min_Stack_Size+0x1a5f2f0>
    2d30:	61746e6f 	cmnvs	r4, pc, ror #28
    2d34:	6f74536c 	svcvs	0x0074536c
    2d38:	544c0070 	strbpl	r0, [ip], #-112	; 0x70
    2d3c:	535f4344 	cmppl	pc, #68, 6	; 0x10000001
    2d40:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2d44:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2d48:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2d4c:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    2d50:	616f6c65 	cmnvs	pc, r5, ror #24
    2d54:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2d58:	00676966 	rsbeq	r6, r7, r6, ror #18
    2d5c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d60:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2d64:	6f72676b 	svcvs	0x0072676b
    2d68:	42646e75 	rsbmi	r6, r4, #1872	; 0x750
    2d6c:	5665756c 	strbtpl	r7, [r5], -ip, ror #10
    2d70:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2d74:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2d78:	6c425f43 	mcrrvs	15, 4, r5, r2, cr3
    2d7c:	69576575 	ldmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    2d80:	00687464 	rsbeq	r7, r8, r4, ror #8
    2d84:	43504857 	cmpmi	r0, #5701632	; 0x570000
    2d88:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2d8c:	445f4344 	ldrbmi	r4, [pc], #-836	; 2d94 <_Min_Stack_Size+0x2994>
    2d90:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2d94:	6f43746c 	svcvs	0x0043746c
    2d98:	47726f6c 	ldrbmi	r6, [r2, -ip, ror #30]!
    2d9c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2da0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2da4:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2da8:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2dac:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2db0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2db4:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2db8:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    2dbc:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2dc0:	536c6163 	cmnpl	ip, #-1073741800	; 0xc0000018
    2dc4:	00706f74 	rsbseq	r6, r0, r4, ror pc
    2dc8:	4344544c 	movtmi	r5, #17484	; 0x444c
    2dcc:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2c58 <_Min_Stack_Size+0x2858>
    2dd0:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2dd4:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    2dd8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2ddc:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2de0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2de4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2de8:	6f485f43 	svcvs	0x00485f43
    2dec:	6f7a6972 	svcvs	0x007a6972
    2df0:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2df4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2df8:	6f740074 	svcvs	0x00740074
    2dfc:	776c6174 			; <UNDEFINED> instruction: 0x776c6174
    2e00:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    2e04:	554c4300 	strbpl	r4, [ip, #-768]	; 0x300
    2e08:	00525754 	subseq	r5, r2, r4, asr r7
    2e0c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e10:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2c9c <_Min_Stack_Size+0x289c>
    2e14:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    2e18:	64655279 	strbtvs	r5, [r5], #-633	; 0x279
    2e1c:	43575400 	cmpmi	r7, #0, 8
    2e20:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2e24:	545f4344 	ldrbpl	r4, [pc], #-836	; 2e2c <_Min_Stack_Size+0x2a2c>
    2e28:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    2e2c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    2e30:	52530068 	subspl	r0, r3, #104	; 0x68
    2e34:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    2e38:	5f434454 	svcpl	0x00434454
    2e3c:	43005449 	movwmi	r5, #1097	; 0x449
    2e40:	0052434b 	subseq	r4, r2, fp, asr #6
    2e44:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e48:	5043505f 	subpl	r5, r3, pc, asr r0
    2e4c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2e50:	00797469 	rsbseq	r7, r9, r9, ror #8
    2e54:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e58:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2e5c:	646d4354 	strbtvs	r4, [sp], #-852	; 0x354
    2e60:	43464200 	movtmi	r4, #25088	; 0x6200
    2e64:	63610052 	cmnvs	r1, #82	; 0x52
    2e68:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2e6c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2e70:	50424864 	subpl	r4, r2, r4, ror #16
    2e74:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e78:	6f505f43 	svcvs	0x00505f43
    2e7c:	6e495f73 	mcrvs	15, 2, r5, cr9, cr3, {3}
    2e80:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2e84:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2e88:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e8c:	6f505f43 	svcvs	0x00505f43
    2e90:	72745373 	rsbsvc	r5, r4, #-872415231	; 0xcc000001
    2e94:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2e98:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2e9c:	52435741 	subpl	r5, r3, #17039360	; 0x1040000
    2ea0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ea4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2ea8:	736f5074 	cmnvc	pc, #116	; 0x74
    2eac:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2eb0:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    2eb4:	5f434454 	svcpl	0x00434454
    2eb8:	57646552 			; <UNDEFINED> instruction: 0x57646552
    2ebc:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    2ec0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ec4:	6f435f43 	svcvs	0x00435f43
    2ec8:	6174736e 	cmnvs	r4, lr, ror #6
    2ecc:	6c41746e 	cfstrdvs	mvd7, [r1], {110}	; 0x6e
    2ed0:	00616870 	rsbeq	r6, r1, r0, ror r8
    2ed4:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ed8:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2edc:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2ee0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2ee4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2ee8:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    2eec:	505f4344 	subspl	r4, pc, r4, asr #6
    2ef0:	0058534f 	subseq	r5, r8, pc, asr #6
    2ef4:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ef8:	534f505f 	movtpl	r5, #61535	; 0xf05f
    2efc:	544c0059 	strbpl	r0, [ip], #-89	; 0x59
    2f00:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2f04:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2f08:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2f0c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2f10:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    2f14:	5f434454 	svcpl	0x00434454
    2f18:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2f1c:	5367616c 	cmnpl	r7, #108, 2
    2f20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2f24:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    2f28:	445f4344 	ldrbmi	r4, [pc], #-836	; 2f30 <_Min_Stack_Size+0x2b30>
    2f2c:	65687469 	strbvs	r7, [r8, #-1129]!	; 0x469
    2f30:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    2f34:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f38:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2f3c:	74535455 	ldrbvc	r5, [r3], #-1109	; 0x455
    2f40:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2f44:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2f48:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f4c:	614c5f43 	cmpvs	ip, r3, asr #30
    2f50:	41726579 	cmnmi	r2, r9, ror r5
    2f54:	6168706c 	cmnvs	r8, ip, rrx
    2f58:	42464300 	submi	r4, r6, #0, 6
    2f5c:	63005241 	movwvs	r5, #577	; 0x241
    2f60:	6174756c 	cmnvs	r4, ip, ror #10
    2f64:	4c006464 	cfstrsmi	mvf6, [r0], {100}	; 0x64
    2f68:	5f434454 	svcpl	0x00434454
    2f6c:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2f70:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
    2f74:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2f78:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2f7c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f80:	72475f43 	subvc	r5, r7, #268	; 0x10c
    2f84:	566e6565 	strbtpl	r6, [lr], -r5, ror #10
    2f88:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2f8c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f90:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2f94:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2f98:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2f9c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2fa0:	00746942 	rsbseq	r6, r4, r2, asr #18
    2fa4:	70626663 	rsbvc	r6, r2, r3, ror #12
    2fa8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2fac:	47525f43 	ldrbmi	r5, [r2, -r3, asr #30]
    2fb0:	72745342 	rsbsvc	r5, r4, #134217729	; 0x8000001
    2fb4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2fb8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2fbc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2fc0:	0044435f 	subeq	r4, r4, pc, asr r3
    2fc4:	4344544c 	movtmi	r5, #17484	; 0x444c
    2fc8:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    2fcc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2fd0:	6f6c6f43 	svcvs	0x006c6f43
    2fd4:	706c4172 	rsbvc	r4, ip, r2, ror r1
    2fd8:	4c006168 	stfmis	f6, [r0], {104}	; 0x68
    2fdc:	52435049 	subpl	r5, r3, #73	; 0x49
    2fe0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2fe4:	67657270 			; <UNDEFINED> instruction: 0x67657270
    2fe8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2fec:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    2ff0:	64415455 	strbvs	r5, [r1], #-1109	; 0x455
    2ff4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2ff8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ffc:	614c5f43 	cmpvs	ip, r3, asr #30
    3000:	41726579 	cmnmi	r2, r9, ror r5
    3004:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    3008:	4c007373 	stcmi	3, cr7, [r0], {115}	; 0x73
    300c:	5f434454 	svcpl	0x00434454
    3010:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3014:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3018:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    301c:	6e694c42 	cdpvs	12, 6, cr4, cr9, cr2, {2}
    3020:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
    3024:	00726562 	rsbseq	r6, r2, r2, ror #10
    3028:	52535043 	subspl	r5, r3, #67	; 0x43
    302c:	43504200 	cmpmi	r0, #0, 4
    3030:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    3034:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    3038:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    303c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    3040:	664f0068 	strbvs	r0, [pc], -r8, rrx
    3044:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    3048:	664f0058 			; <UNDEFINED> instruction: 0x664f0058
    304c:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    3050:	544c0059 	strbpl	r0, [ip], #-89	; 0x59
    3054:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    3058:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
    305c:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    3060:	64655264 	strbtvs	r5, [r5], #-612	; 0x264
    3064:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    3068:	6f680065 	svcvs	0x00680065
    306c:	6f7a6972 	svcvs	0x007a6972
    3070:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    3074:	6174735f 	cmnvs	r4, pc, asr r3
    3078:	4c007472 	cfstrsmi	mvf7, [r0], {114}	; 0x72
    307c:	5f434454 	svcpl	0x00434454
    3080:	75636341 	strbvc	r6, [r3, #-833]!	; 0x341
    3084:	616c756d 	cmnvs	ip, sp, ror #10
    3088:	48646574 	stmdami	r4!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    308c:	4c005042 	stcmi	0, cr5, [r0], {66}	; 0x42
    3090:	5f434454 	svcpl	0x00434454
    3094:	61746f54 	cmnvs	r4, r4, asr pc
    3098:	6965486c 	stmdbvs	r5!, {r2, r3, r5, r6, fp, lr}^
    309c:	77006867 	strvc	r6, [r0, -r7, ror #16]
    30a0:	70707368 	rsbsvc	r7, r0, r8, ror #6
    30a4:	4c00736f 	stcmi	3, cr7, [r0], {111}	; 0x6f
    30a8:	5f434454 	svcpl	0x00434454
    30ac:	6f6c6f43 	svcvs	0x006c6f43
    30b0:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    30b4:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    30b8:	43535300 	cmpmi	r3, #0, 6
    30bc:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    30c0:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    30c4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    30c8:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    30cc:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    30d0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    30d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    30d8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30dc:	45445f43 	strbmi	r5, [r4, #-3907]	; 0xf43
    30e0:	616c6f50 	cmnvs	ip, r0, asr pc
    30e4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    30e8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30ec:	69505f43 	ldmdbvs	r0, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    30f0:	466c6578 			; <UNDEFINED> instruction: 0x466c6578
    30f4:	616d726f 	cmnvs	sp, pc, ror #4
    30f8:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    30fc:	465f4344 	ldrbmi	r4, [pc], -r4, asr #6
    3100:	0047414c 	subeq	r4, r7, ip, asr #2
    3104:	4344544c 	movtmi	r5, #17484	; 0x444c
    3108:	736f505f 	cmnvc	pc, #95	; 0x5f
    310c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3110:	00666544 	rsbeq	r6, r6, r4, asr #10
    3114:	4344544c 	movtmi	r5, #17484	; 0x444c
    3118:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    311c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3120:	4344544c 	movtmi	r5, #17484	; 0x444c
    3124:	656c425f 	strbvs	r4, [ip, #-607]!	; 0x25f
    3128:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    312c:	63614667 	cmnvs	r1, #108003328	; 0x6700000
    3130:	5f726f74 	svcpl	0x00726f74
    3134:	544c0031 	strbpl	r0, [ip], #-49	; 0x31
    3138:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    313c:	646e656c 	strbtvs	r6, [lr], #-1388	; 0x56c
    3140:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    3144:	6f746361 	svcvs	0x00746361
    3148:	00325f72 	eorseq	r5, r2, r2, ror pc
    314c:	52434344 	subpl	r4, r3, #68, 6	; 0x10000001
    3150:	72657600 	rsbvc	r7, r5, #0, 12
    3154:	61636974 	smcvs	13972	; 0x3694
    3158:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    315c:	4c00706f 	stcmi	0, cr7, [r0], {111}	; 0x6f
    3160:	5f434454 	svcpl	0x00434454
    3164:	4350494c 	cmpmi	r0, #76, 18	; 0x130000
    3168:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    316c:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    3170:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    3174:	79544247 	ldmdbvc	r4, {r0, r1, r2, r6, r9, lr}^
    3178:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    317c:	44430066 	strbmi	r0, [r3], #-102	; 0x66
    3180:	4c005253 	sfmmi	f5, 4, [r0], {83}	; 0x53
    3184:	5f434454 	svcpl	0x00434454
    3188:	56646552 			; <UNDEFINED> instruction: 0x56646552
    318c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    3190:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3194:	614c5f43 	cmpvs	ip, r3, asr #30
    3198:	43726579 	cmnmi	r2, #507510784	; 0x1e400000
    319c:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    31a0:	5f434454 	svcpl	0x00434454
    31a4:	5f424752 	svcpl	0x00424752
    31a8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    31ac:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    31b0:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    31b4:	5f434454 	svcpl	0x00434454
    31b8:	6f505356 	svcvs	0x00505356
    31bc:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    31c0:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    31c4:	5f434454 	svcpl	0x00434454
    31c8:	50424643 	subpl	r4, r2, r3, asr #12
    31cc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    31d0:	67636400 	strbvs	r6, [r3, -r0, lsl #8]!
    31d4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    31d8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    31dc:	614c5f43 	cmpvs	ip, r3, asr #30
    31e0:	50726579 	rsbspl	r6, r2, r9, ror r5
    31e4:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    31e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    31ec:	4344544c 	movtmi	r5, #17484	; 0x444c
    31f0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    31f4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    31f8:	46500067 	ldrbmi	r0, [r0], -r7, rrx
    31fc:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    3200:	5f434454 	svcpl	0x00434454
    3204:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3208:	69574247 	ldmdbvs	r7, {r0, r1, r2, r6, r9, lr}^
    320c:	00687464 	rsbeq	r7, r8, r4, ror #8
    3210:	2f636e69 	svccs	0x00636e69
    3214:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3218:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 310c <_Min_Stack_Size+0x2d0c>
    321c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3220:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3224:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3114 <_Min_Stack_Size+0x2d14>
    3228:	61726269 	cmnvs	r2, r9, ror #4
    322c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3230:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3234:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3238:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    323c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3240:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3244:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3248:	2f726576 	svccs	0x00726576
    324c:	2f637273 	svccs	0x00637273
    3250:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3254:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3258:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    325c:	632e6364 	teqvs	lr, #100, 6	; 0x90000001
    3260:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3264:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3268:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    326c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3270:	4d500066 	ldclmi	0, cr0, [r0, #-408]	; 0xfffffe68
    3274:	00324d45 	eorseq	r4, r2, r5, asr #26
    3278:	5f434d46 	svcpl	0x00434d46
    327c:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    3280:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
    3284:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3288:	454d5000 	strbmi	r5, [sp, #-0]
    328c:	4600344d 	strmi	r3, [r0], -sp, asr #8
    3290:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    3294:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3298:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    329c:	43445300 	movtmi	r5, #17152	; 0x4300
    32a0:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    32a4:	61425f43 	cmpvs	r2, r3, asr #30
    32a8:	5f356b6e 	svcpl	0x00356b6e
    32ac:	79545f36 	ldmdbvc	r4, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    32b0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    32b4:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    32b8:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    32bc:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    32c0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    32c4:	5f434d46 	svcpl	0x00434d46
    32c8:	4c534143 	ldfmie	f4, [r3], {67}	; 0x43
    32cc:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    32d0:	65007963 	strvs	r7, [r0, #-2403]	; 0x963
    32d4:	61766363 	cmnvs	r6, r3, ror #6
    32d8:	4d46006c 	stclmi	0, cr0, [r6, #-432]	; 0xfffffe50
    32dc:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    32e0:	6552666c 	ldrbvs	r6, [r2, #-1644]	; 0x66c
    32e4:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    32e8:	6d695468 	cfstrdvs	mvd5, [r9, #-416]!	; 0xfffffe60
    32ec:	4d500065 	ldclmi	0, cr0, [r0, #-404]	; 0xfffffe6c
    32f0:	00334d45 	eorseq	r4, r3, r5, asr #26
    32f4:	5f434d46 	svcpl	0x00434d46
    32f8:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    32fc:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    3300:	6f506c61 	svcvs	0x00506c61
    3304:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    3308:	46007974 			; <UNDEFINED> instruction: 0x46007974
    330c:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 31e0 <_Min_Stack_Size+0x2de0>
    3310:	5265646f 	rsbpl	r6, r5, #1862270976	; 0x6f000000
    3314:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    3318:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0x574
    331c:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    3320:	6f697469 	svcvs	0x00697469
    3324:	4453006e 	ldrbmi	r0, [r3], #-110	; 0x6e
    3328:	00525452 	subseq	r5, r2, r2, asr r4
    332c:	5f434d46 	svcpl	0x00434d46
    3330:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    3334:	70536e6f 	subsvc	r6, r3, pc, ror #28
    3338:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    333c:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3340:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3344:	00746375 	rsbseq	r6, r4, r5, ror r3
    3348:	5f434d46 	svcpl	0x00434d46
    334c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    3350:	756f6e69 	strbvc	r6, [pc, #-3689]!	; 24ef <_Min_Stack_Size+0x20ef>
    3354:	6f6c4373 	svcvs	0x006c4373
    3358:	46006b63 	strmi	r6, [r0], -r3, ror #22
    335c:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3360:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3364:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3368:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    336c:	00666544 	rsbeq	r6, r6, r4, asr #10
    3370:	5f434d46 	svcpl	0x00434d46
    3374:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    3378:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
    337c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3380:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
    3384:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3388:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    338c:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    3390:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3394:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3398:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    339c:	61425f43 	cmpvs	r2, r3, asr #30
    33a0:	5f316b6e 	svcpl	0x00316b6e
    33a4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    33a8:	00666544 	rsbeq	r6, r6, r4, asr #10
    33ac:	52534453 	subspl	r4, r3, #1392508928	; 0x53000000
    33b0:	54445300 	strbpl	r5, [r4], #-768	; 0x300
    33b4:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    33b8:	4f4e5f43 	svcmi	0x004e5f43
    33bc:	41525352 	cmpmi	r2, r2, asr r3
    33c0:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    33c4:	70795474 	rsbsvc	r5, r9, r4, ror r4
    33c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    33cc:	434d4600 	movtmi	r4, #54784	; 0xd600
    33d0:	5a69485f 	bpl	1a55554 <_Min_Stack_Size+0x1a55154>
    33d4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    33d8:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    33dc:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    33e0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    33e4:	646f4d74 	strbtvs	r4, [pc], #-3444	; 33ec <_Min_Stack_Size+0x2fec>
    33e8:	61745365 	cmnvs	r4, r5, ror #6
    33ec:	00737574 	rsbseq	r7, r3, r4, ror r5
    33f0:	52434345 	subpl	r4, r3, #335544321	; 0x14000001
    33f4:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    33f8:	4f4e5f43 	svcmi	0x004e5f43
    33fc:	41525352 	cmpmi	r2, r2, asr r3
    3400:	7274534d 	rsbsvc	r5, r4, #872415233	; 0x34000001
    3404:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3408:	0074696e 	rsbseq	r6, r4, lr, ror #18
    340c:	5f434d46 	svcpl	0x00434d46
    3410:	41434350 	cmpmi	r3, r0, asr r3
    3414:	65444452 	strbvs	r4, [r4, #-1106]	; 0x452
    3418:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    341c:	43434500 	movtmi	r4, #13568	; 0x3500
    3420:	46003252 			; <UNDEFINED> instruction: 0x46003252
    3424:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3428:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    342c:	65444d41 	strbvs	r4, [r4, #-3393]	; 0xd41
    3430:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3434:	434d4600 	movtmi	r4, #54784	; 0xd600
    3438:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    343c:	43505f44 	cmpmi	r0, #68, 30	; 0x110
    3440:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3444:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3448:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    344c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3450:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3454:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3458:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    345c:	54657469 	strbtpl	r7, [r5], #-1129	; 0x469
    3460:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3464:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3468:	00746375 	rsbseq	r6, r4, r5, ror r3
    346c:	5f434d46 	svcpl	0x00434d46
    3470:	74697845 	strbtvc	r7, [r9], #-2117	; 0x845
    3474:	666c6553 			; <UNDEFINED> instruction: 0x666c6553
    3478:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    347c:	44687365 	strbtmi	r7, [r8], #-869	; 0x365
    3480:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3484:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3488:	74746170 	ldrbtvc	r6, [r4], #-368	; 0x170
    348c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3490:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3494:	6d434d41 	stclvs	13, cr4, [r3, #-260]	; 0xfffffefc
    3498:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    349c:	00676966 	rsbeq	r6, r7, r6, ror #18
    34a0:	5f434d46 	svcpl	0x00434d46
    34a4:	654d4453 	strbvs	r4, [sp, #-1107]	; 0x453
    34a8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    34ac:	61746144 	cmnvs	r4, r4, asr #2
    34b0:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    34b4:	4d460068 	stclmi	0, cr0, [r6, #-416]	; 0xfffffe60
    34b8:	43505f43 	cmpmi	r0, #268	; 0x10c
    34bc:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    34c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    34c4:	434d4600 	movtmi	r4, #54784	; 0xd600
    34c8:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0x15f
    34cc:	75626972 	strbvc	r6, [r2, #-2418]!	; 0x972
    34d0:	70536574 	subsvc	r6, r3, r4, ror r5
    34d4:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    34d8:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    34dc:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    34e0:	00746375 	rsbseq	r6, r4, r5, ror r3
    34e4:	5f434d46 	svcpl	0x00434d46
    34e8:	41524453 	cmpmi	r2, r3, asr r4
    34ec:	6972574d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, r9, sl, ip, lr}^
    34f0:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    34f4:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    34f8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    34fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3500:	46006769 	strmi	r6, [r0], -r9, ror #14
    3504:	445f434d 	ldrbmi	r4, [pc], #-845	; 350c <_Min_Stack_Size+0x310c>
    3508:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    350c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3510:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3514:	434d4600 	movtmi	r4, #54784	; 0xd600
    3518:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    351c:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    3520:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3524:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3528:	74007463 	strvc	r7, [r0], #-1123	; 0x463
    352c:	0072706d 	rsbseq	r7, r2, sp, rrx
    3530:	5f434d46 	svcpl	0x00434d46
    3534:	6f747541 	svcvs	0x00747541
    3538:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    353c:	4e687365 	cdpmi	3, 6, cr7, cr8, cr5, {3}
    3540:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3544:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3548:	61425f43 	cmpvs	r2, r3, asr #30
    354c:	5f326b6e 	svcpl	0x00326b6e
    3550:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3554:	00666544 	rsbeq	r6, r6, r4, asr #10
    3558:	5f434d46 	svcpl	0x00434d46
    355c:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
    3560:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3564:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3568:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    356c:	75425f43 	strbvc	r5, [r2, #-3907]	; 0xf43
    3570:	41747372 	cmnmi	r4, r2, ror r3
    3574:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    3578:	646f4d73 	strbtvs	r4, [pc], #-3443	; 3580 <_Min_Stack_Size+0x3180>
    357c:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3580:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    3584:	69506461 	ldmdbvs	r0, {r0, r5, r6, sl, sp, lr}^
    3588:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    358c:	0079616c 	rsbseq	r6, r9, ip, ror #2
    3590:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    3594:	53007263 	movwpl	r7, #611	; 0x263
    3598:	524d4344 	subpl	r4, sp, #68, 6	; 0x10000001
    359c:	434d4600 	movtmi	r4, #54784	; 0xd600
    35a0:	4443525f 	strbmi	r5, [r3], #-607	; 0x25f
    35a4:	616c6544 	cmnvs	ip, r4, asr #10
    35a8:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    35ac:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    35b0:	66655274 			; <UNDEFINED> instruction: 0x66655274
    35b4:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    35b8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    35bc:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    35c0:	61575f43 	cmpvs	r7, r3, asr #30
    35c4:	69537469 	ldmdbvs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
    35c8:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    35cc:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    35d0:	46006576 			; <UNDEFINED> instruction: 0x46006576
    35d4:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    35d8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    35dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    35e0:	434d4600 	movtmi	r4, #54784	; 0xd600
    35e4:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    35e8:	6f747541 	svcvs	0x00747541
    35ec:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    35f0:	5f687365 	svcpl	0x00687365
    35f4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    35f8:	46007265 	strmi	r7, [r0], -r5, ror #4
    35fc:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3600:	53444e41 	movtpl	r4, #20033	; 0x4e41
    3604:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3608:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    360c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3610:	41545f43 	cmpmi	r4, r3, asr #30
    3614:	74655352 	strbtvc	r5, [r5], #-850	; 0x352
    3618:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    361c:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3620:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    3624:	7943776f 	stmdbvc	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    3628:	44656c63 	strbtmi	r6, [r5], #-3171	; 0xc63
    362c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3630:	434d4600 	movtmi	r4, #54784	; 0xd600
    3634:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3638:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    363c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3640:	5f434d46 	svcpl	0x00434d46
    3644:	41524453 	cmpmi	r2, r3, asr r4
    3648:	4965444d 	stmdbmi	r5!, {r0, r2, r3, r6, sl, lr}^
    364c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3650:	5f434d46 	svcpl	0x00434d46
    3654:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    3658:	65704f65 	ldrbvs	r4, [r0, #-3941]!	; 0xf65
    365c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    3660:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    3664:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3668:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    366c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3670:	5f434d46 	svcpl	0x00434d46
    3674:	54737542 	ldrbtpl	r7, [r3], #-1346	; 0x542
    3678:	416e7275 	smcmi	59173	; 0xe725
    367c:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    3680:	72754464 	rsbsvc	r4, r5, #100, 8	; 0x64000000
    3684:	6f697461 	svcvs	0x00697461
    3688:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
    368c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3690:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    3694:	61426c61 	cmpvs	r2, r1, ror #24
    3698:	754e6b6e 	strbvc	r6, [lr, #-2926]	; 0xb6e
    369c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    36a0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    36a4:	6d656d70 	stclvs	13, cr6, [r5, #-448]!	; 0xfffffe40
    36a8:	434d4600 	movtmi	r4, #54784	; 0xd600
    36ac:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    36b0:	67695374 			; <UNDEFINED> instruction: 0x67695374
    36b4:	006c616e 	rsbeq	r6, ip, lr, ror #2
    36b8:	5f434d46 	svcpl	0x00434d46
    36bc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    36c0:	48737365 	ldmdami	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    36c4:	54646c6f 	strbtpl	r6, [r4], #-3183	; 0xc6f
    36c8:	00656d69 	rsbeq	r6, r5, r9, ror #26
    36cc:	5f434d46 	svcpl	0x00434d46
    36d0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    36d4:	50007265 	andpl	r7, r0, r5, ror #4
    36d8:	00325243 	eorseq	r5, r2, r3, asr #4
    36dc:	33524350 	cmpcc	r2, #80, 6	; 0x40000001
    36e0:	52435000 	subpl	r5, r3, #0
    36e4:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    36e8:	43505f43 	cmpmi	r0, #268	; 0x10c
    36ec:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    36f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    36f4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    36f8:	00666544 	rsbeq	r6, r6, r4, asr #10
    36fc:	5f434d46 	svcpl	0x00434d46
    3700:	65445052 	strbvs	r5, [r4, #-82]	; 0x52
    3704:	0079616c 	rsbseq	r6, r9, ip, ror #2
    3708:	5f434d46 	svcpl	0x00434d46
    370c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3710:	61745354 	cmnvs	r4, r4, asr r3
    3714:	00737574 	rsbseq	r7, r3, r4, ror r5
    3718:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    371c:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
    3720:	00327270 	eorseq	r7, r2, r0, ror r2
    3724:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    3728:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    372c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3730:	434d4152 	movtmi	r4, #53586	; 0xd152
    3734:	616d6d6f 	cmnvs	sp, pc, ror #26
    3738:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0x46e
    373c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3740:	54415000 	strbpl	r5, [r1], #-0
    3744:	50003254 	andpl	r3, r0, r4, asr r2
    3748:	33545441 	cmpcc	r4, #1090519040	; 0x41000000
    374c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3750:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 35dc <_Min_Stack_Size+0x31dc>
    3754:	426e6d75 	rsbmi	r6, lr, #7488	; 0x1d40
    3758:	4e737469 	cdpmi	4, 7, cr7, cr3, cr9, {3}
    375c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3760:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3764:	63415f43 	movtvs	r5, #8003	; 0x1f43
    3768:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    376c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3770:	434d4600 	movtmi	r4, #54784	; 0xd600
    3774:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3778:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    377c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3780:	434d4600 	movtmi	r4, #54784	; 0xd600
    3784:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3788:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    378c:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3790:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    3794:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3798:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    379c:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    37a0:	61425f43 	cmpvs	r2, r3, asr #30
    37a4:	5f336b6e 	svcpl	0x00336b6e
    37a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    37ac:	00666544 	rsbeq	r6, r6, r4, asr #10
    37b0:	5f434d46 	svcpl	0x00434d46
    37b4:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    37b8:	72754265 	rsbsvc	r4, r5, #1342177286	; 0x50000006
    37bc:	46007473 			; <UNDEFINED> instruction: 0x46007473
    37c0:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    37c4:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    37c8:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    37cc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    37d0:	46006665 	strmi	r6, [r0], -r5, ror #12
    37d4:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    37d8:	316b6e61 	cmncc	fp, r1, ror #28
    37dc:	79545f45 	ldmdbvc	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    37e0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    37e4:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    37e8:	43505f43 	cmpmi	r0, #268	; 0x10c
    37ec:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    37f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    37f4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    37f8:	46007469 	strmi	r7, [r0], -r9, ror #8
    37fc:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3800:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    3804:	5f434d46 	svcpl	0x00434d46
    3808:	70617257 	rsbvc	r7, r1, r7, asr r2
    380c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3810:	434d4600 	movtmi	r4, #54784	; 0xd600
    3814:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3818:	545f346b 	ldrbpl	r3, [pc], #-1131	; 3820 <_Min_Stack_Size+0x3420>
    381c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3820:	46006665 	strmi	r6, [r0], -r5, ror #12
    3824:	485f434d 	ldmdami	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3828:	53646c6f 	cmnpl	r4, #28416	; 0x6f00
    382c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3830:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3834:	434d4600 	movtmi	r4, #54784	; 0xd600
    3838:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    383c:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3840:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3844:	00746375 	rsbseq	r6, r4, r5, ror r3
    3848:	5f434d46 	svcpl	0x00434d46
    384c:	41434350 	cmpmi	r3, r0, asr r3
    3850:	6d434452 	cfstrdvs	mvd4, [r3, #-328]	; 0xfffffeb8
    3854:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    3858:	32727370 	rsbscc	r7, r2, #112, 6	; 0xc0000001
    385c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3860:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 36ec <_Min_Stack_Size+0x32ec>
    3864:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    3868:	67726154 			; <UNDEFINED> instruction: 0x67726154
    386c:	46007465 	strmi	r7, [r0], -r5, ror #8
    3870:	475f434d 	ldrbmi	r4, [pc, -sp, asr #6]
    3874:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    3878:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    387c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3880:	434d4600 	movtmi	r4, #54784	; 0xd600
    3884:	6464415f 	strbtvs	r4, [r4], #-351	; 0x15f
    3888:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    388c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3890:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3894:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3898:	6f525f43 	svcvs	0x00525f43
    389c:	74694277 	strbtvc	r4, [r9], #-631	; 0x277
    38a0:	6d754e73 	ldclvs	14, cr4, [r5, #-460]!	; 0xfffffe34
    38a4:	00726562 	rsbseq	r6, r2, r2, ror #10
    38a8:	54544150 	ldrbpl	r4, [r4], #-336	; 0x150
    38ac:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    38b0:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xf43
    38b4:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    38b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    38bc:	434d4600 	movtmi	r4, #54784	; 0xd600
    38c0:	6165525f 	cmnvs	r5, pc, asr r2
    38c4:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    38c8:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    38cc:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    38d0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    38d4:	42007463 	andmi	r7, r0, #1660944384	; 0x63000000
    38d8:	00525457 	subseq	r5, r2, r7, asr r4
    38dc:	5f434d46 	svcpl	0x00434d46
    38e0:	61656c43 	cmnvs	r5, r3, asr #24
    38e4:	50544972 	subspl	r4, r4, r2, ror r9
    38e8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    38ec:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    38f0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    38f4:	414e5f43 	cmpmi	lr, r3, asr #30
    38f8:	6544444e 	strbvs	r4, [r4, #-1102]	; 0x44e
    38fc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3900:	434d4600 	movtmi	r4, #54784	; 0xd600
    3904:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3908:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
    390c:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3910:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3914:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3918:	45444e41 	strbmi	r4, [r4, #-3649]	; 0xe41
    391c:	6d434343 	stclvs	3, cr4, [r3, #-268]	; 0xfffffef4
    3920:	4d460064 	stclmi	0, cr0, [r6, #-400]	; 0xfffffe70
    3924:	61445f43 	cmpvs	r4, r3, asr #30
    3928:	614c6174 	hvcvs	50708	; 0xc614
    392c:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    3930:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    3934:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3938:	434d4152 	movtmi	r4, #53586	; 0xd152
    393c:	616d6d6f 	cmnvs	sp, pc, ror #26
    3940:	7954646e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    3944:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3948:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    394c:	6f4c5f43 	svcvs	0x004c5f43
    3950:	6f546461 	svcvs	0x00546461
    3954:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3958:	65446576 	strbvs	r6, [r4, #-1398]	; 0x576
    395c:	0079616c 	rsbseq	r6, r9, ip, ror #2
    3960:	5f434d46 	svcpl	0x00434d46
    3964:	6c434453 	cfstrdvs	mvd4, [r3], {83}	; 0x53
    3968:	506b636f 	rsbpl	r6, fp, pc, ror #6
    396c:	6f697265 	svcvs	0x00697265
    3970:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    3974:	00727370 	rsbseq	r7, r2, r0, ror r3
    3978:	5f434d46 	svcpl	0x00434d46
    397c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    3980:	46004343 	strmi	r4, [r0], -r3, asr #6
    3984:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    3988:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    398c:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    3990:	434d4600 	movtmi	r4, #54784	; 0xd600
    3994:	4343455f 	movtmi	r4, #13663	; 0x355f
    3998:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    399c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    39a0:	434d4600 	movtmi	r4, #54784	; 0xd600
    39a4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    39a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    39ac:	4d460067 	stclmi	0, cr0, [r6, #-412]	; 0xfffffe64
    39b0:	43505f43 	cmpmi	r0, #268	; 0x10c
    39b4:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    39b8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    39bc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    39c0:	46007463 	strmi	r7, [r0], -r3, ror #8
    39c4:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    39c8:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    39cc:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    39d0:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    39d4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    39d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    39dc:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    39e0:	43455f43 	movtmi	r5, #24387	; 0x5f43
    39e4:	6e690043 	cdpvs	0, 6, cr0, cr9, cr3, {2}
    39e8:	4f432f63 	svcmi	0x00432f63
    39ec:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    39f0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    39f4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    39f8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    39fc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3a00:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3a04:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3a08:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3a0c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3a10:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3a14:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3a18:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3a20 <_Min_Stack_Size+0x3620>
    3a1c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3a20:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3a24:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3a28:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3a2c:	5f787834 	svcpl	0x00787834
    3a30:	2e636d66 	cdpcs	13, 6, cr6, cr3, cr6, {3}
    3a34:	4d460063 	stclmi	0, cr0, [r6, #-396]	; 0xfffffe74
    3a38:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xf43
    3a3c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3a40:	61746144 	cmnvs	r4, r4, asr #2
    3a44:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    3a48:	4d460068 	stclmi	0, cr0, [r6, #-416]	; 0xfffffe60
    3a4c:	6f435f43 	svcvs	0x00435f43
    3a50:	00746e75 	rsbseq	r6, r4, r5, ror lr
    3a54:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    3a58:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    3a5c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3a60:	534d4152 	movtpl	r4, #53586	; 0xd152
    3a64:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3a68:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    3a6c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3a70:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    3a74:	50657469 	rsbpl	r7, r5, r9, ror #8
    3a78:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xf72
    3a7c:	6f697463 	svcvs	0x00697463
    3a80:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
    3a84:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    3a88:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a8c:	7973415f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, r8, lr}^
    3a90:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
    3a94:	756f6e6f 	strbvc	r6, [pc, #-3695]!	; 2c2d <_Min_Stack_Size+0x282d>
    3a98:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    3a9c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3aa0:	6f435f43 	svcvs	0x00435f43
    3aa4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    3aa8:	646f4d64 	strbtvs	r4, [pc], #-3428	; 3ab0 <_Min_Stack_Size+0x36b0>
    3aac:	74690065 	strbtvc	r0, [r9], #-101	; 0x65
    3ab0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    3ab4:	4600656c 	strmi	r6, [r0], -ip, ror #10
    3ab8:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3abc:	6170534f 	cmnvs	r0, pc, asr #6
    3ac0:	69546563 	ldmdbvs	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    3ac4:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    3ac8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3acc:	46007463 	strmi	r7, [r0], -r3, ror #8
    3ad0:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3ad4:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3ad8:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3adc:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    3ae0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3ae4:	434d4600 	movtmi	r4, #54784	; 0xd600
    3ae8:	414c465f 	cmpmi	ip, pc, asr r6
    3aec:	4d460047 	stclmi	0, cr0, [r6, #-284]	; 0xfffffee4
    3af0:	414e5f43 	cmpmi	lr, r3, asr #30
    3af4:	6d43444e 	cfstrdvs	mvd4, [r3, #-312]	; 0xfffffec8
    3af8:	44530064 	ldrbmi	r0, [r3], #-100	; 0x64
    3afc:	5f4d4152 	svcpl	0x004d4152
    3b00:	6b6e6142 	blvs	1b9c010 <_Min_Stack_Size+0x1b9bc10>
    3b04:	434d4600 	movtmi	r4, #54784	; 0xd600
    3b08:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3b0c:	61656674 	smcvs	22116	; 0x5664
    3b10:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    3b14:	4f495000 	svcmi	0x00495000
    3b18:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    3b1c:	61445f43 	cmpvs	r4, r3, asr #30
    3b20:	64416174 	strbvs	r6, [r1], #-372	; 0x174
    3b24:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3b28:	78754d73 	ldmdavc	r5!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
    3b2c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3b30:	4b4c435f 	blmi	13148b4 <_Min_Stack_Size+0x13144b4>
    3b34:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    3b38:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    3b3c:	43544200 	cmpmi	r4, #0, 4
    3b40:	4e520052 	mrcmi	0, 2, r0, cr2, cr2, {2}
    3b44:	54495f47 	strbpl	r5, [r9], #-3911	; 0xf47
    3b48:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3b4c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    3b50:	435f474e 	cmpmi	pc, #20447232	; 0x1380000
    3b54:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3b58:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    3b5c:	4e520054 	mrcmi	0, 2, r0, cr2, cr4, {2}
    3b60:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    3b64:	6e615274 	mcrvs	2, 3, r5, cr1, cr4, {3}
    3b68:	4e6d6f64 	cdpmi	15, 6, cr6, cr13, cr4, {3}
    3b6c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3b70:	4e520072 	mrcmi	0, 2, r0, cr2, cr2, {3}
    3b74:	65445f47 	strbvs	r5, [r4, #-3911]	; 0xf47
    3b78:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3b7c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3b80:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3b84:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3b88:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3b8c:	414c465f 	cmpmi	ip, pc, asr r6
    3b90:	6e690047 	cdpvs	0, 6, cr0, cr9, cr7, {2}
    3b94:	4f432f63 	svcmi	0x00432f63
    3b98:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3b9c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3ba0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3ba4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3ba8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3bac:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3bb0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3bb4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3bb8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3bbc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3bc0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3bc4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3bcc <_Min_Stack_Size+0x37cc>
    3bc8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3bcc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3bd0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3bd4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3bd8:	5f787834 	svcpl	0x00787834
    3bdc:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    3be0:	4e520063 	cdpmi	0, 5, cr0, cr2, cr3, {3}
    3be4:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    3be8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3bec:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3bf0:	5f474e52 	svcpl	0x00474e52
    3bf4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3bf8:	61745354 	cmnvs	r4, r4, asr r3
    3bfc:	00737574 	rsbseq	r7, r3, r4, ror r5
    3c00:	5f474e52 	svcpl	0x00474e52
    3c04:	61656c43 	cmnvs	r5, r3, asr #24
    3c08:	50544972 	subspl	r4, r4, r2, ror r9
    3c0c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3c10:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3c14:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
    3c18:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    3c1c:	616c4674 	smcvs	50276	; 0xc464
    3c20:	61745367 	cmnvs	r4, r7, ror #6
    3c24:	00737574 	rsbseq	r7, r3, r4, ror r5
    3c28:	5f4d5453 	svcpl	0x004d5453
    3c2c:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3c30:	4942505f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    3c34:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3c38:	5f435452 	svcpl	0x00435452
    3c3c:	50554b57 	subspl	r4, r5, r7, asr fp
    3c40:	5152495f 	cmppl	r2, pc, asr r9
    3c44:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    3c48:	5f324954 	svcpl	0x00324954
    3c4c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c50:	414d4400 	cmpmi	sp, r0, lsl #8
    3c54:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    3c58:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3c5c:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    3c60:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3c64:	5f384d49 	svcpl	0x00384d49
    3c68:	545f5055 	ldrbpl	r5, [pc], #-85	; 3c70 <_Min_Stack_Size+0x3870>
    3c6c:	33314d49 	teqcc	r1, #4672	; 0x1240
    3c70:	5152495f 	cmppl	r2, pc, asr r9
    3c74:	4573006e 	ldrbmi	r0, [r3, #-110]!	; 0x6e
    3c78:	6f4c5f45 	svcvs	0x004c5f45
    3c7c:	76654c77 			; <UNDEFINED> instruction: 0x76654c77
    3c80:	495f6c65 	ldmdbmi	pc, {r0, r2, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3c84:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3c88:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    3c8c:	455f4e4f 	ldrbmi	r4, [pc, #-3663]	; 2e45 <_Min_Stack_Size+0x2a45>
    3c90:	5f495458 	svcpl	0x00495458
    3c94:	454e494c 	strbmi	r4, [lr, #-2380]	; 0x94c
    3c98:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    3c9c:	5f4e4f54 	svcpl	0x004e4f54
    3ca0:	5f4e4950 	svcpl	0x004e4950
    3ca4:	52554f53 	subspl	r4, r5, #332	; 0x14c
    3ca8:	44004543 	strmi	r4, [r0], #-1347	; 0x543
    3cac:	5f32414d 	svcpl	0x0032414d
    3cb0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3cb4:	5f316d61 	svcpl	0x00316d61
    3cb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3cbc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3cc0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    3cc4:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
    3cc8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    3ccc:	5152495f 	cmppl	r2, pc, asr r9
    3cd0:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    3cd4:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    3cd8:	4b4c435f 	blmi	1314a5c <_Min_Stack_Size+0x131465c>
    3cdc:	4d434400 	cfstrdmi	mvd4, [r3, #-0]
    3ce0:	52495f49 	subpl	r5, r9, #292	; 0x124
    3ce4:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3ce8:	5f324d49 	svcpl	0x00324d49
    3cec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3cf0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3cf4:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3cf8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    3cfc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3d00:	00657275 	rsbeq	r7, r5, r5, ror r2
    3d04:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    3d08:	3058525f 	subscc	r5, r8, pc, asr r2
    3d0c:	5152495f 	cmppl	r2, pc, asr r9
    3d10:	5355006e 	cmppl	r5, #110	; 0x6e
    3d14:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
    3d18:	5152495f 	cmppl	r2, pc, asr r9
    3d1c:	5053006e 	subspl	r0, r3, lr, rrx
    3d20:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3d24:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d28:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    3d2c:	4b52425f 	blmi	14946b0 <_Min_Stack_Size+0x14942b0>
    3d30:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    3d34:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    3d38:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d3c:	5f4d5453 	svcpl	0x004d5453
    3d40:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3d44:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    3d48:	44006e4f 	strmi	r6, [r0], #-3663	; 0xe4f
    3d4c:	5f32414d 	svcpl	0x0032414d
    3d50:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3d54:	5f356d61 	svcpl	0x00356d61
    3d58:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d5c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3d60:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
    3d64:	4f435f47 	svcmi	0x00435f47
    3d68:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3d6c:	5f31314d 	svcpl	0x0031314d
    3d70:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d74:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    3d78:	4f505f4f 	svcmi	0x00505f4f
    3d7c:	53005452 	movwpl	r5, #1106	; 0x452
    3d80:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    3d84:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    3d88:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d8c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3d90:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    3d94:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d98:	4f495047 	svcmi	0x00495047
    3d9c:	4b4c435f 	blmi	1314b20 <_Min_Stack_Size+0x1314720>
    3da0:	74754200 	ldrbtvc	r4, [r5], #-512	; 0x200
    3da4:	5f6e6f74 	svcpl	0x006e6f74
    3da8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3dac:	00666544 	rsbeq	r6, r6, r4, asr #10
    3db0:	31414d44 	cmpcc	r1, r4, asr #26
    3db4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3db8:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
    3dbc:	5152495f 	cmppl	r2, pc, asr r9
    3dc0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3dc4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    3dc8:	61657274 	smcvs	22308	; 0x5724
    3dcc:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3dd0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3dd4:	36495053 			; <UNDEFINED> instruction: 0x36495053
    3dd8:	5152495f 	cmppl	r2, pc, asr r9
    3ddc:	3249006e 	subcc	r0, r9, #110	; 0x6e
    3de0:	455f3143 	ldrbmi	r3, [pc, #-323]	; 3ca5 <_Min_Stack_Size+0x38a5>
    3de4:	52495f52 	subpl	r5, r9, #328	; 0x148
    3de8:	43006e51 	movwmi	r6, #3665	; 0xe51
    3dec:	5f324e41 	svcpl	0x00324e41
    3df0:	5f454353 	svcpl	0x00454353
    3df4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3df8:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    3dfc:	5f4e4f54 	svcpl	0x004e4f54
    3e00:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    3e04:	554f535f 	strbpl	r5, [pc, #-863]	; 3aad <_Min_Stack_Size+0x36ad>
    3e08:	00454352 	subeq	r4, r5, r2, asr r3
    3e0c:	354d4954 	strbcc	r4, [sp, #-2388]	; 0x954
    3e10:	5152495f 	cmppl	r2, pc, asr r9
    3e14:	7355006e 	cmpvc	r5, #110	; 0x6e
    3e18:	46656761 	strbtmi	r6, [r5], -r1, ror #14
    3e1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3e20:	5152495f 	cmppl	r2, pc, asr r9
    3e24:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    3e28:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3e2c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e30:	314e4143 	cmpcc	lr, r3, asr #2
    3e34:	3058525f 	subscc	r5, r8, pc, asr r2
    3e38:	5152495f 	cmppl	r2, pc, asr r9
    3e3c:	5053006e 	subspl	r0, r3, lr, rrx
    3e40:	495f3549 	ldmdbmi	pc, {r0, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    3e44:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e48:	31494153 	cmpcc	r9, r3, asr r1
    3e4c:	5152495f 	cmppl	r2, pc, asr r9
    3e50:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3e54:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3e58:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e5c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3e60:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3e64:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e68:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    3e6c:	52495f38 	subpl	r5, r9, #56, 30	; 0xe0
    3e70:	53006e51 	movwpl	r6, #3665	; 0xe51
    3e74:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3128 <_Min_Stack_Size+0x2d28>
    3e78:	5f4c4156 	svcpl	0x004c4156
    3e7c:	4f44454c 	svcmi	0x0044454c
    3e80:	49006666 	stmdbmi	r0, {r1, r2, r5, r6, r9, sl, sp, lr}
    3e84:	5f314332 	svcpl	0x00314332
    3e88:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    3e8c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e90:	66754270 			; <UNDEFINED> instruction: 0x66754270
    3e94:	00726566 	rsbseq	r6, r2, r6, ror #10
    3e98:	314d4954 	cmpcc	sp, r4, asr r9
    3e9c:	5f43435f 	svcpl	0x0043435f
    3ea0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3ea4:	53414800 	movtpl	r4, #6144	; 0x1800
    3ea8:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
    3eac:	52495f47 	subpl	r5, r9, #284	; 0x11c
    3eb0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    3eb4:	31495458 	cmpcc	r9, r8, asr r4
    3eb8:	5152495f 	cmppl	r2, pc, asr r9
    3ebc:	4143006e 	cmpmi	r3, lr, rrx
    3ec0:	545f314e 	ldrbpl	r3, [pc], #-334	; 3ec8 <_Min_Stack_Size+0x3ac8>
    3ec4:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    3ec8:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    3ecc:	5f31414d 	svcpl	0x0031414d
    3ed0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3ed4:	5f356d61 	svcpl	0x00356d61
    3ed8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3edc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3ee0:	52545f38 	subspl	r5, r4, #56, 30	; 0xe0
    3ee4:	4f435f47 	svcmi	0x00435f47
    3ee8:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3eec:	5f34314d 	svcpl	0x0034314d
    3ef0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3ef4:	414d4400 	cmpmi	sp, r0, lsl #8
    3ef8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    3efc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3f00:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    3f04:	4f006e51 	svcmi	0x00006e51
    3f08:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
    3f0c:	52495f53 	subpl	r5, r9, #332	; 0x14c
    3f10:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
    3f14:	614d6e6f 	cmpvs	sp, pc, ror #28
    3f18:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
    3f1c:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    3f20:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    3f24:	57006e51 	smlsdpl	r0, r1, lr, r6
    3f28:	5f474457 	svcpl	0x00474457
    3f2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3f30:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    3f34:	5f53485f 	svcpl	0x0053485f
    3f38:	50554b57 	subspl	r4, r5, r7, asr fp
    3f3c:	5152495f 	cmppl	r2, pc, asr r9
    3f40:	654d006e 	strbvs	r0, [sp, #-110]	; 0x6e
    3f44:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3f48:	616e614d 	cmnvs	lr, sp, asr #2
    3f4c:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0x567
    3f50:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3f54:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f58:	504d4154 	subpl	r4, sp, r4, asr r1
    3f5c:	4154535f 	cmpmi	r4, pc, asr r3
    3f60:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
    3f64:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f68:	314e4143 	cmpcc	lr, r3, asr #2
    3f6c:	4543535f 	strbmi	r5, [r3, #-863]	; 0x35f
    3f70:	5152495f 	cmppl	r2, pc, asr r9
    3f74:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3f78:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    3f7c:	61657274 	smcvs	22308	; 0x5724
    3f80:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    3f84:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f88:	5f4d5453 	svcpl	0x004d5453
    3f8c:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    3f90:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    3f94:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3f98:	43324900 	teqmi	r2, #0, 18
    3f9c:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
    3fa0:	5152495f 	cmppl	r2, pc, asr r9
    3fa4:	7542006e 	strbvc	r0, [r2, #-110]	; 0x6e
    3fa8:	75614673 	strbvc	r4, [r1, #-1651]!	; 0x673
    3fac:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3fb0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3fb4:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    3fb8:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3fbc:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3fc0:	5f314d49 	svcpl	0x00314d49
    3fc4:	5f4b5242 	svcpl	0x004b5242
    3fc8:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
    3fcc:	5152495f 	cmppl	r2, pc, asr r9
    3fd0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3fd4:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    3fd8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3fdc:	5f485445 	svcpl	0x00485445
    3fe0:	50554b57 	subspl	r4, r5, r7, asr fp
    3fe4:	5152495f 	cmppl	r2, pc, asr r9
    3fe8:	544f006e 	strbpl	r0, [pc], #-110	; 3ff0 <_Min_Stack_Size+0x3bf0>
    3fec:	53485f47 	movtpl	r5, #36679	; 0x8f47
    3ff0:	5152495f 	cmppl	r2, pc, asr r9
    3ff4:	5053006e 	subspl	r0, r3, lr, rrx
    3ff8:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3ffc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4000:	61435653 	cmpvs	r3, r3, asr r6
    4004:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4008:	006e5152 	rsbeq	r5, lr, r2, asr r1
    400c:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    4010:	4d5f4e4f 	ldclmi	14, cr4, [pc, #-316]	; 3edc <_Min_Stack_Size+0x3adc>
    4014:	5f45444f 	svcpl	0x0045444f
    4018:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    401c:	45457300 	strbmi	r7, [r5, #-768]	; 0x300
    4020:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
    4024:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    4028:	4d445f6c 	stclmi	15, cr5, [r4, #-432]	; 0xfffffe50
    402c:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    4030:	00676966 	rsbeq	r6, r7, r6, ror #18
    4034:	5f555046 	svcpl	0x00555046
    4038:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    403c:	52415500 	subpl	r5, r1, #0, 10
    4040:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    4044:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4048:	5f47544f 	svcpl	0x0047544f
    404c:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
    4050:	5f50554b 	svcpl	0x0050554b
    4054:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4058:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    405c:	5f4e4f54 	svcpl	0x004e4f54
    4060:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    4064:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    4068:	5845004f 	stmdapl	r5, {r0, r1, r2, r3, r6}^
    406c:	5f344954 	svcpl	0x00344954
    4070:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4074:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    4078:	41445f36 	cmpmi	r4, r6, lsr pc
    407c:	52495f43 	subpl	r5, r9, #268	; 0x10c
    4080:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4084:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4088:	5152495f 	cmppl	r2, pc, asr r9
    408c:	3249006e 	subcc	r0, r9, #110	; 0x6e
    4090:	455f3243 	ldrbmi	r3, [pc, #-579]	; 3e55 <_Min_Stack_Size+0x3a55>
    4094:	52495f56 	subpl	r5, r9, #344	; 0x158
    4098:	53006e51 	movwpl	r6, #3665	; 0xe51
    409c:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3350 <_Min_Stack_Size+0x2f50>
    40a0:	5f4c4156 	svcpl	0x004c4156
    40a4:	5444454c 	strbpl	r4, [r4], #-1356	; 0x54c
    40a8:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    40ac:	55420065 	strbpl	r0, [r2, #-101]	; 0x65
    40b0:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    40b4:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    40b8:	414d4400 	cmpmi	sp, r0, lsl #8
    40bc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    40c0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    40c4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    40c8:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
    40cc:	00334445 	eorseq	r4, r3, r5, asr #8
    40d0:	3444454c 	strbcc	r4, [r4], #-1356	; 0x54c
    40d4:	414d4400 	cmpmi	sp, r0, lsl #8
    40d8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    40dc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    40e0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    40e4:	43006e51 	movwmi	r6, #3665	; 0xe51
    40e8:	5f324e41 	svcpl	0x00324e41
    40ec:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
    40f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    40f4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    40f8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    40fc:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4100:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    4104:	42006572 	andmi	r6, r0, #478150656	; 0x1c800000
    4108:	6f747475 	svcvs	0x00747475
    410c:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    4110:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    4114:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
    4118:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    411c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    4120:	61657274 	smcvs	22308	; 0x5724
    4124:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    4128:	006e5152 	rsbeq	r5, lr, r2, asr r1
    412c:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
    4130:	6f4d6e6f 	svcvs	0x004d6e6f
    4134:	545f6564 	ldrbpl	r6, [pc], #-1380	; 413c <_Min_Stack_Size+0x3d3c>
    4138:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    413c:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    4140:	415f4354 	cmpmi	pc, r4, asr r3	; <UNPREDICTABLE>
    4144:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    4148:	5152495f 	cmppl	r2, pc, asr r9
    414c:	5053006e 	subspl	r0, r3, lr, rrx
    4150:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    4154:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4158:	5f434d46 	svcpl	0x00434d46
    415c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4160:	43324900 	teqmi	r2, #0, 18
    4164:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
    4168:	5152495f 	cmppl	r2, pc, asr r9
    416c:	5243006e 	subpl	r0, r3, #110	; 0x6e
    4170:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    4174:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4178:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    417c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    4180:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    4184:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    4188:	5f334d49 	svcpl	0x00334d49
    418c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4190:	41535500 	cmpmi	r3, r0, lsl #10
    4194:	5f315452 	svcpl	0x00315452
    4198:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    419c:	52415500 	subpl	r5, r1, #0, 10
    41a0:	495f3754 	ldmdbmi	pc, {r2, r4, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    41a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    41a8:	2f636e69 	svccs	0x00636e69
    41ac:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    41b0:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    41b4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    41b8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    41bc:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    41c0:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    41c4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    41c8:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    41cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    41d0:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    41d4:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    41d8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    41dc:	2e797265 	cdpcs	2, 7, cr7, cr9, cr5, {3}
    41e0:	50470063 	subpl	r0, r7, r3, rrx
    41e4:	505f4f49 	subspl	r4, pc, r9, asr #30
    41e8:	47004e49 	strmi	r4, [r0, -r9, asr #28]
    41ec:	5f4f4950 	svcpl	0x004f4950
    41f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    41f4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    41f8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    41fc:	41430065 	cmpmi	r3, r5, rrx
    4200:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
    4204:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    4208:	006e5152 	rsbeq	r5, lr, r2, asr r1
    420c:	5f434441 	svcpl	0x00434441
    4210:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4214:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    4218:	5f4e4f54 	svcpl	0x004e4f54
    421c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    4220:	44565000 	ldrbmi	r5, [r6], #-0
    4224:	5152495f 	cmppl	r2, pc, asr r9
    4228:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    422c:	5f304954 	svcpl	0x00304954
    4230:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4234:	414d4400 	cmpmi	sp, r0, lsl #8
    4238:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    423c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    4240:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    4244:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4248:	5f32414d 	svcpl	0x0032414d
    424c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    4250:	5f366d61 	svcpl	0x00366d61
    4254:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4258:	62654400 	rsbvs	r4, r5, #0, 8
    425c:	6f4d6775 	svcvs	0x004d6775
    4260:	6f74696e 	svcvs	0x0074696e
    4264:	52495f72 	subpl	r5, r9, #456	; 0x1c8
    4268:	42006e51 	andmi	r6, r0, #1296	; 0x510
    426c:	4f545455 	svcmi	0x00545455
    4270:	52495f4e 	subpl	r5, r9, #312	; 0x138
    4274:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    4278:	5f334332 	svcpl	0x00334332
    427c:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    4280:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4284:	5f485445 	svcpl	0x00485445
    4288:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    428c:	64654c00 	strbtvs	r4, [r5], #-3072	; 0xc00
    4290:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    4294:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    4298:	43435200 	movtmi	r5, #12800	; 0x3200
    429c:	5152495f 	cmppl	r2, pc, asr r9
    42a0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    42a4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    42a8:	61657274 	smcvs	22308	; 0x5724
    42ac:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    42b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    42b4:	314d4954 	cmpcc	sp, r4, asr r9
    42b8:	5f50555f 	svcpl	0x0050555f
    42bc:	314d4954 	cmpcc	sp, r4, asr r9
    42c0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    42c4:	73006e51 	movwvc	r6, #3665	; 0xe51
    42c8:	4c5f4545 	cfldr64mi	mvdx4, [pc], {69}	; 0x45
    42cc:	654c776f 	strbvs	r7, [ip, #-1903]	; 0x76f
    42d0:	5f6c6576 	svcpl	0x006c6576
    42d4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    42d8:	53007469 	movwpl	r7, #1129	; 0x469
    42dc:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3590 <_Min_Stack_Size+0x3190>
    42e0:	5f4c4156 	svcpl	0x004c4156
    42e4:	65474250 	strbvs	r4, [r7, #-592]	; 0x250
    42e8:	61745374 	cmnvs	r4, r4, ror r3
    42ec:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    42f0:	5f434454 	svcpl	0x00434454
    42f4:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    42f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    42fc:	5f47544f 	svcpl	0x0047544f
    4300:	455f5348 	ldrbmi	r5, [pc, #-840]	; 3fc0 <_Min_Stack_Size+0x3bc0>
    4304:	4f5f3150 	svcmi	0x005f3150
    4308:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    430c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4310:	314e4143 	cmpcc	lr, r3, asr #2
    4314:	3158525f 	cmpcc	r8, pc, asr r2
    4318:	5152495f 	cmppl	r2, pc, asr r9
    431c:	7542006e 	strbvc	r0, [r2, #-110]	; 0x6e
    4320:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4324:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 432c <_Min_Stack_Size+0x3f2c>
    4328:	45730065 	ldrbmi	r0, [r3, #-101]!	; 0x65
    432c:	414d4445 	cmpmi	sp, r5, asr #8
    4330:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4334:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4338:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    433c:	45006572 	strmi	r6, [r0, #-1394]	; 0x572
    4340:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
    4344:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    4348:	006e5152 	rsbeq	r5, lr, r2, asr r1
    434c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    4350:	5f43435f 	svcpl	0x0043435f
    4354:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4358:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
    435c:	52495f4f 	subpl	r5, r9, #316	; 0x13c
    4360:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    4364:	33495458 	movtcc	r5, #37976	; 0x9458
    4368:	5152495f 	cmppl	r2, pc, asr r9
    436c:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0x6e
    4370:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    4374:	5152495f 	cmppl	r2, pc, asr r9
    4378:	544f006e 	strbpl	r0, [pc], #-110	; 4380 <_Min_Stack_Size+0x3f80>
    437c:	53485f47 	movtpl	r5, #36679	; 0x8f47
    4380:	3150455f 	cmpcc	r0, pc, asr r5
    4384:	5f4e495f 	svcpl	0x004e495f
    4388:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    438c:	414d4400 	cmpmi	sp, r0, lsl #8
    4390:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    4394:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    4398:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    439c:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    43a0:	5f32414d 	svcpl	0x0032414d
    43a4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    43a8:	5f326d61 	svcpl	0x00326d61
    43ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    43b0:	52445300 	subpl	r5, r4, #0, 6
    43b4:	525f4d41 	subspl	r4, pc, #4160	; 0x1040
    43b8:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    43bc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    43c0:	44530072 	ldrbmi	r0, [r3], #-114	; 0x72
    43c4:	5f4d4152 	svcpl	0x004d4152
    43c8:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    43cc:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    43d0:	00726566 	rsbseq	r6, r2, r6, ror #10
    43d4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xe69
    43d8:	4d460078 	stclmi	0, cr0, [r6, #-480]	; 0xfffffe20
    43dc:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    43e0:	544d4152 	strbpl	r4, [sp], #-338	; 0x152
    43e4:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    43e8:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    43ec:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    43f0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    43f4:	64006572 	strvs	r6, [r0], #-1394	; 0x572
    43f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    43fc:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
    4400:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    4404:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    4408:	53007265 	movwpl	r7, #613	; 0x265
    440c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    4410:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    4414:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    4418:	00676966 	rsbeq	r6, r7, r6, ror #18
    441c:	41524453 	cmpmi	r2, r3, asr r4
    4420:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    4424:	65537469 	ldrbvs	r7, [r3, #-1129]	; 0x469
    4428:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    442c:	53006563 	movwpl	r6, #1379	; 0x563
    4430:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    4434:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4438:	77750074 			; <UNDEFINED> instruction: 0x77750074
    443c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4440:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    4444:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4448:	42777500 	rsbsmi	r7, r7, #0, 10
    444c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4450:	7a695372 	bvc	1a59220 <_Min_Stack_Size+0x1a58e20>
    4454:	77750065 	ldrbvc	r0, [r5, -r5, rrx]!
    4458:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    445c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4460:	00737365 	rsbseq	r7, r3, r5, ror #6
    4464:	756f436e 	strbvc	r4, [pc, #-878]!	; 40fe <_Min_Stack_Size+0x3cfe>
    4468:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    446c:	552f636e 	strpl	r6, [pc, #-878]!	; 4106 <_Min_Stack_Size+0x3d06>
    4470:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4474:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    4478:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    447c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4480:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    4484:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    4488:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    448c:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xf79
    4490:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4494:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    4498:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    449c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    44a0:	735f7972 	cmpvc	pc, #1867776	; 0x1c8000
    44a4:	6d617264 	sfmvs	f7, 2, [r1, #-400]!	; 0xfffffe70
    44a8:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    44ac:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    44b0:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    44b4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    44b8:	53646e61 	cmnpl	r4, #1552	; 0x610
    44bc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    44c0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    44c4:	434d4600 	movtmi	r4, #54784	; 0xd600
    44c8:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    44cc:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    44d0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    44d4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    44d8:	00657275 	rsbeq	r7, r5, r5, ror r2
    44dc:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    44e0:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    44e4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    44e8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    44ec:	334c0074 	movtcc	r0, #49268	; 0xc074
    44f0:	30324447 	eorscc	r4, r2, r7, asr #8
    44f4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    44f8:	74794264 	ldrbtvc	r4, [r9], #-612	; 0x264
    44fc:	614c0065 	cmpvs	ip, r5, rrx
    4500:	5f686374 	svcpl	0x00686374
    4504:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    4508:	00747365 	rsbseq	r7, r4, r5, ror #6
    450c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4510:	475f3032 	smmlarmi	pc, r2, r0, r3	; <UNPREDICTABLE>
    4514:	61447465 	cmpvs	r4, r5, ror #8
    4518:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    451c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4520:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4524:	5f303244 	svcpl	0x00303244
    4528:	6f626552 	svcvs	0x00626552
    452c:	6d43746f 	cfstrdvs	mvd7, [r3, #-444]	; 0xfffffe44
    4530:	74630064 	strbtvc	r0, [r3], #-100	; 0x64
    4534:	635f6c72 	cmpvs	pc, #29184	; 0x7200
    4538:	4e007266 	cdpmi	2, 0, cr7, cr0, cr6, {3}
    453c:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4540:	6f546574 	svcvs	0x00546574
    4544:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4548:	67694800 	strbvs	r4, [r9, -r0, lsl #16]!
    454c:	73615068 	cmnvc	r1, #104	; 0x68
    4550:	6c694673 	stclvs	6, cr4, [r9], #-460	; 0xfffffe34
    4554:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    4558:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    455c:	746e4900 	strbtvc	r4, [lr], #-2304	; 0x900
    4560:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    4564:	415f7470 	cmpmi	pc, r0, ror r4	; <UNPREDICTABLE>
    4568:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    456c:	67644565 	strbvs	r4, [r4, -r5, ror #10]!
    4570:	334c0065 	movtcc	r0, #49253	; 0xc065
    4574:	30324447 	eorscc	r4, r2, r7, asr #8
    4578:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    457c:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    4580:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4584:	334c0074 	movtcc	r0, #49268	; 0xc074
    4588:	30324447 	eorscc	r4, r2, r7, asr #8
    458c:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    4590:	746e4931 	strbtvc	r4, [lr], #-2353	; 0x931
    4594:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    4598:	6d437470 	cfstrdvs	mvd7, [r3, #-448]	; 0xfffffe40
    459c:	334c0064 	movtcc	r0, #49252	; 0xc064
    45a0:	30324447 	eorscc	r4, r2, r7, asr #8
    45a4:	6165525f 	cmnvs	r5, pc, asr r2
    45a8:	72570064 	subsvc	r0, r7, #100	; 0x64
    45ac:	41657469 	cmnmi	r5, r9, ror #8
    45b0:	00726464 	rsbseq	r6, r2, r4, ror #8
    45b4:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    45b8:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    45bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    45c0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    45c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    45c8:	79546769 	ldmdbvc	r4, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    45cc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    45d0:	334c0066 	movtcc	r0, #49254	; 0xc066
    45d4:	30324447 	eorscc	r4, r2, r7, asr #8
    45d8:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
    45dc:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    45e0:	6e495f6c 	cdpvs	15, 4, cr5, cr9, cr12, {3}
    45e4:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    45e8:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    45ec:	6f546574 	svcvs	0x00546574
    45f0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    45f4:	334c0065 	movtcc	r0, #49253	; 0xc065
    45f8:	30324447 	eorscc	r4, r2, r7, asr #8
    45fc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    4600:	0074756f 	rsbseq	r7, r4, pc, ror #10
    4604:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    4608:	74630031 	strbtvc	r0, [r3], #-49	; 0x31
    460c:	00336c72 	eorseq	r6, r3, r2, ror ip
    4610:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    4614:	334c0034 	movtcc	r0, #49204	; 0xc034
    4618:	30324447 	eorscc	r4, r2, r7, asr #8
    461c:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    4620:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    4624:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4628:	334c0067 	movtcc	r0, #49255	; 0xc067
    462c:	30324447 	eorscc	r4, r2, r7, asr #8
    4630:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    4634:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4638:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    463c:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
    4640:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    4644:	53676966 	cmnpl	r7, #1671168	; 0x198000
    4648:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    464c:	334c0074 	movtcc	r0, #49268	; 0xc074
    4650:	30324447 	eorscc	r4, r2, r7, asr #8
    4654:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    4658:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    465c:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    4660:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    4664:	49545f30 	ldmdbmi	r4, {r4, r5, r8, r9, sl, fp, ip, lr}^
    4668:	554f454d 	strbpl	r4, [pc, #-1357]	; 4123 <_Min_Stack_Size+0x3d23>
    466c:	73555f54 	cmpvc	r5, #84, 30	; 0x150
    4670:	61437265 	cmpvs	r3, r5, ror #4
    4674:	61626c6c 	cmnvs	r2, ip, ror #24
    4678:	53006b63 	movwpl	r6, #2915	; 0xb63
    467c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    4680:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    4684:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4688:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    468c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0x200
    4690:	334c0065 	movtcc	r0, #49253	; 0xc065
    4694:	30324447 	eorscc	r4, r2, r7, asr #8
    4698:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    469c:	6e490074 	mcrvs	0, 2, r0, cr9, cr4, {3}
    46a0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    46a4:	53747075 	cmnpl	r4, #117	; 0x75
    46a8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    46ac:	636e6900 	cmnvs	lr, #0, 18
    46b0:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    46b4:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    46b8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    46bc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    46c0:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    46c4:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    46c8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    46cc:	2f797265 	svccs	0x00797265
    46d0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    46d4:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    46d8:	645f6939 	ldrbvs	r6, [pc], #-2361	; 46e0 <_Min_Stack_Size+0x42e0>
    46dc:	6f637369 	svcvs	0x00637369
    46e0:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    46e4:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    46e8:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    46ec:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    46f0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    46f4:	5f747075 	svcpl	0x00747075
    46f8:	73657841 	cmnvc	r5, #4259840	; 0x410000
    46fc:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4700:	5f303244 	svcpl	0x00303244
    4704:	32544e49 	subscc	r4, r4, #1168	; 0x490
    4708:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    470c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4710:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    4714:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4718:	5f303244 	svcpl	0x00303244
    471c:	31544e49 	cmpcc	r4, r9, asr #28
    4720:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    4724:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4728:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    472c:	00676966 	rsbeq	r6, r7, r6, ror #18
    4730:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4734:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4738:	72756300 	rsbsvc	r6, r5, #0, 6
    473c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    4740:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    4744:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4748:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    474c:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0x554
    4750:	6f6c6f43 	svcvs	0x006c6f43
    4754:	434c0072 	movtmi	r0, #49266	; 0xc072
    4758:	6c435f44 	mcrrvs	15, 4, r5, r3, cr4
    475c:	4c726165 	ldfmie	f6, [r2], #-404	; 0xfffffe6c
    4760:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4764:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    4768:	49525f45 	ldmdbmi	r2, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    476c:	00544847 	subseq	r4, r4, r7, asr #16
    4770:	69665f58 	stmdbvs	r6!, {r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    4774:	00747372 	rsbseq	r7, r4, r2, ror r3
    4778:	5f44434c 	svcpl	0x0044434c
    477c:	61656c43 	cmnvs	r5, r3, asr #24
    4780:	434c0072 	movtmi	r0, #49266	; 0xc072
    4784:	72575f44 	subsvc	r5, r7, #68, 30	; 0x110
    4788:	43657469 	cmnmi	r5, #1761607680	; 0x69000000
    478c:	616d6d6f 	cmnvs	sp, pc, ror #26
    4790:	4100646e 	tstmi	r0, lr, ror #8
    4794:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    4798:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    479c:	5f46415f 	svcpl	0x0046415f
    47a0:	4f495047 	svcmi	0x00495047
    47a4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    47a8:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    47ac:	495f4443 	ldmdbmi	pc, {r0, r1, r6, sl, lr}^	; <UNPREDICTABLE>
    47b0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    47b4:	69665f59 	stmdbvs	r6!, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    47b8:	00747372 	rsbseq	r7, r4, r2, ror r3
    47bc:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    47c0:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    47c4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    47c8:	75696461 	strbvc	r6, [r9, #-1121]!	; 0x461
    47cc:	434c0073 	movtmi	r0, #49267	; 0xc073
    47d0:	614c5f44 	cmpvs	ip, r4, asr #30
    47d4:	49726579 	ldmdbmi	r2!, {r0, r3, r4, r5, r6, r8, sl, sp, lr}^
    47d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    47dc:	5f44434c 	svcpl	0x0044434c
    47e0:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    47e4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    47e8:	69577961 	ldmdbvs	r7, {r0, r5, r6, r8, fp, ip, sp, lr}^
    47ec:	776f646e 	strbvc	r6, [pc, -lr, ror #8]!
    47f0:	64615200 	strbtvs	r5, [r1], #-512	; 0x200
    47f4:	32737569 	rsbscc	r7, r3, #440401920	; 0x1a400000
    47f8:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    47fc:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    4800:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    4804:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    4808:	414d4900 	cmpmi	sp, r0, lsl #18
    480c:	4c5f4547 	cfldr64mi	mvdx4, [pc], {71}	; 0x47
    4810:	00544645 	subseq	r4, r4, r5, asr #12
    4814:	5f44434c 	svcpl	0x0044434c
    4818:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    481c:	4c696e55 	stclmi	14, cr6, [r9], #-340	; 0xfffffeac
    4820:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4824:	5f44434c 	svcpl	0x0044434c
    4828:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    482c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4830:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    4834:	5800676e 	stmdapl	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4838:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    483c:	00726574 	rsbseq	r6, r2, r4, ror r5
    4840:	5f44434c 	svcpl	0x0044434c
    4844:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    4848:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    484c:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4850:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    4854:	726f7372 	rsbvc	r7, pc, #-939524095	; 0xc8000001
    4858:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    485c:	00596c65 	subseq	r6, r9, r5, ror #24
    4860:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    4864:	434c0065 	movtmi	r0, #49253	; 0xc065
    4868:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    486c:	75467761 	strbvc	r7, [r6, #-1889]	; 0x761
    4870:	6c456c6c 	mcrrvs	12, 6, r6, r5, cr12
    4874:	7370696c 	cmnvc	r0, #108, 18	; 0x1b0000
    4878:	75430065 	strbvc	r0, [r3, #-101]	; 0x65
    487c:	43005872 	movwmi	r5, #2162	; 0x872
    4880:	00597275 	subseq	r7, r9, r5, ror r2
    4884:	736f7078 	cmnvc	pc, #120	; 0x78
    4888:	6c6f4300 	stclvs	3, cr4, [pc], #-0	; 4890 <_Min_Stack_Size+0x4490>
    488c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
    4890:	746e6f46 	strbtvc	r6, [lr], #-3910	; 0xf46
    4894:	31783231 	cmncc	r8, r1, lsr r2
    4898:	70590032 	subsvc	r0, r9, r2, lsr r0
    489c:	5f00736f 	svcpl	0x0000736f
    48a0:	6e6f4674 	mcrvs	6, 3, r4, cr15, cr4, {3}
    48a4:	434c0074 	movtmi	r0, #49268	; 0xc074
    48a8:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    48ac:	61725474 	cmnvs	r2, r4, ror r4
    48b0:	6170736e 	cmnvs	r0, lr, ror #6
    48b4:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    48b8:	72740079 	rsbsvc	r0, r4, #121	; 0x79
    48bc:	70736e61 	rsbsvc	r6, r3, r1, ror #28
    48c0:	6e657261 	cdpvs	2, 6, cr7, cr5, cr1, {3}
    48c4:	78007963 	stmdavc	r0, {r0, r1, r5, r6, r8, fp, ip, sp, lr}
    48c8:	32636e69 	rsbcc	r6, r3, #1680	; 0x690
    48cc:	6e6f4600 	cdpvs	6, 6, cr4, cr15, cr0, {0}
    48d0:	78363174 	ldmdavc	r6!, {r2, r4, r5, r6, r8, ip, sp}
    48d4:	4c003432 	cfstrsmi	mvf3, [r0], {50}	; 0x32
    48d8:	445f4443 	ldrbmi	r4, [pc], #-1091	; 48e0 <_Min_Stack_Size+0x44e0>
    48dc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    48e0:	74537961 	ldrbvc	r7, [r3], #-2401	; 0x961
    48e4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    48e8:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    48ec:	42475200 	submi	r5, r7, #0, 4
    48f0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    48f4:	434c0065 	movtmi	r0, #49253	; 0xc065
    48f8:	6f505f44 	svcvs	0x00505f44
    48fc:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4900:	4300656e 	movwmi	r6, #1390	; 0x56e
    4904:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    4908:	614c746e 	cmpvs	ip, lr, ror #8
    490c:	00726579 	rsbseq	r6, r2, r9, ror r5
    4910:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
    4914:	31783849 	cmncc	r8, r9, asr #16
    4918:	61545f32 	cmpvs	r4, r2, lsr pc
    491c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4920:	70727563 	rsbsvc	r7, r2, r3, ror #10
    4924:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    4928:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    492c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    4930:	6c655370 	stclvs	3, cr5, [r5], #-448	; 0xfffffe40
    4934:	00746365 	rsbseq	r6, r4, r5, ror #6
    4938:	5f646552 	svcpl	0x00646552
    493c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    4940:	6d420065 	stclvs	0, cr0, [r2, #-404]	; 0xfffffe6c
    4944:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    4948:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    494c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4950:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    4954:	6f6c6f43 	svcvs	0x006c6f43
    4958:	43007372 	movwmi	r7, #882	; 0x372
    495c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    4960:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
    4964:	42656d61 	rsbmi	r6, r5, #6208	; 0x1840
    4968:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    496c:	434c0072 	movtmi	r0, #49266	; 0xc072
    4970:	74435f44 	strbvc	r5, [r3], #-3908	; 0xf44
    4974:	694c6c72 	stmdbvs	ip, {r1, r4, r5, r6, sl, fp, sp, lr}^
    4978:	4373656e 	cmnmi	r3, #461373440	; 0x1b800000
    497c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4980:	6f460067 	svcvs	0x00460067
    4984:	7838746e 	ldmdavc	r8!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4988:	4c003231 	sfmmi	f3, 4, [r0], {49}	; 0x31
    498c:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    4990:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xf6c
    4994:	6c6f5064 	stclvs	0, cr5, [pc], #-400	; 480c <_Min_Stack_Size+0x440c>
    4998:	6e694c79 	mcrvs	12, 3, r4, cr9, cr9, {3}
    499c:	6c655265 	sfmvs	f5, 2, [r5], #-404	; 0xfffffe6c
    49a0:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    49a4:	50700065 	rsbspl	r0, r0, r5, rrx
    49a8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    49ac:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    49b0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    49b4:	6b636142 	blvs	18dcec4 <_Min_Stack_Size+0x18dcac4>
    49b8:	6f6c6f43 	svcvs	0x006c6f43
    49bc:	6c420072 	mcrrvs	0, 7, r0, r2, cr2
    49c0:	565f6575 			; <UNDEFINED> instruction: 0x565f6575
    49c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    49c8:	72744300 	rsbsvc	r4, r4, #0, 6
    49cc:	6e69506c 	cdpvs	0, 6, cr5, cr9, cr12, {3}
    49d0:	75430073 	strbvc	r0, [r3, #-115]	; 0x73
    49d4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    49d8:	63614274 	cmnvs	r1, #116, 4	; 0x40000007
    49dc:	6c6f436b 	stclvs	3, cr4, [pc], #-428	; 4838 <_Min_Stack_Size+0x4438>
    49e0:	6200726f 	andvs	r7, r0, #-268435450	; 0xf0000006
    49e4:	705f7469 	subsvc	r7, pc, r9, ror #8
    49e8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    49ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    49f0:	00646461 	rsbeq	r6, r4, r1, ror #8
    49f4:	64646158 	strbtvs	r6, [r4], #-344	; 0x158
    49f8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    49fc:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a00:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    4a04:	4d426574 	cfstr64mi	mvdx6, [r2, #-464]	; 0xfffffe30
    4a08:	434c0050 	movtmi	r0, #49232	; 0xc050
    4a0c:	65525f44 	ldrbvs	r5, [r2, #-3908]	; 0xf44
    4a10:	53410067 	movtpl	r0, #4199	; 0x1067
    4a14:	31494943 	cmpcc	r9, r3, asr #18
    4a18:	32317832 	eorscc	r7, r1, #3276800	; 0x320000
    4a1c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
    4a20:	4600656c 	strmi	r6, [r0], -ip, ror #10
    4a24:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
    4a28:	65724700 	ldrbvs	r4, [r2, #-1792]!	; 0x700
    4a2c:	565f6e65 	ldrbpl	r6, [pc], -r5, ror #28
    4a30:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4a34:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a38:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    4a3c:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    4a40:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    4a44:	434c0065 	movtmi	r0, #49253	; 0xc065
    4a48:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4a4c:	6c457761 	mcrrvs	7, 6, r7, r5, cr1
    4a50:	7370696c 	cmnvc	r0, #108, 18	; 0x1b0000
    4a54:	75500065 	ldrbvc	r0, [r0, #-101]	; 0x65
    4a58:	78695074 	stmdavc	r9!, {r2, r4, r5, r6, ip, lr}^
    4a5c:	4c006c65 	stcmi	12, cr6, [r0], {101}	; 0x65
    4a60:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4a68 <_Min_Stack_Size+0x4668>
    4a64:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4a68:	6e4f7961 	cdpvs	9, 4, cr7, cr15, cr1, {3}
    4a6c:	696f5000 	stmdbvs	pc!, {ip, lr}^	; <UNPREDICTABLE>
    4a70:	6f43746e 	svcvs	0x0043746e
    4a74:	00746e75 	rsbseq	r6, r4, r5, ror lr
    4a78:	63666572 	cmnvs	r6, #478150656	; 0x1c800000
    4a7c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    4a80:	434c006e 	movtmi	r0, #49262	; 0xc06e
    4a84:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4a88:	68437761 	stmdavs	r3, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    4a8c:	4c007261 	sfmmi	f7, 4, [r0], {97}	; 0x61
    4a90:	545f4443 	ldrbpl	r4, [pc], #-1091	; 4a98 <_Min_Stack_Size+0x4698>
    4a94:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
    4a98:	00656c67 	rsbeq	r6, r5, r7, ror #24
    4a9c:	636e6979 	cmnvs	lr, #1982464	; 0x1e4000
    4aa0:	69790031 	ldmdbvs	r9!, {r0, r4, r5}^
    4aa4:	0032636e 	eorseq	r6, r2, lr, ror #6
    4aa8:	5f44434c 	svcpl	0x0044434c
    4aac:	6c6c6946 	stclvs	9, cr6, [ip], #-280	; 0xfffffee8
    4ab0:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    4ab4:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4ab8:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4abc:	6e69575f 	mcrvs	7, 3, r5, cr9, cr15, {2}
    4ac0:	4d776f64 	ldclmi	15, cr6, [r7, #-400]!	; 0xfffffe70
    4ac4:	4465646f 	strbtmi	r6, [r5], #-1135	; 0x46f
    4ac8:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    4acc:	4c00656c 	cfstr32mi	mvfx6, [r0], {108}	; 0x6c
    4ad0:	505f4443 	subspl	r4, pc, r3, asr #8
    4ad4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    4ad8:	4c006e4f 	stcmi	14, cr6, [r0], {79}	; 0x4f
    4adc:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4ae4 <_Min_Stack_Size+0x46e4>
    4ae0:	52776172 	rsbspl	r6, r7, #-2147483620	; 0x8000001c
    4ae4:	00746365 	rsbseq	r6, r4, r5, ror #6
    4ae8:	5f44434c 	svcpl	0x0044434c
    4aec:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    4af0:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    4af4:	63726943 	cmnvs	r2, #1097728	; 0x10c000
    4af8:	4c00656c 	cfstr32mi	mvfx6, [r0], {108}	; 0x6c
    4afc:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    4b00:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xf6c
    4b04:	6c6f5064 	stclvs	0, cr5, [pc], #-400	; 497c <_Min_Stack_Size+0x457c>
    4b08:	6e694c79 	mcrvs	12, 3, r4, cr9, cr9, {3}
    4b0c:	434c0065 	movtmi	r0, #49253	; 0xc065
    4b10:	6f505f44 	svcvs	0x00505f44
    4b14:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4b18:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0x56e
    4b1c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4b20:	6c436576 	cfstr64vs	mvdx6, [r3], {118}	; 0x76
    4b24:	6465736f 	strbtvs	r7, [r5], #-879	; 0x36f
    4b28:	43534100 	cmpmi	r3, #0, 2
    4b2c:	36314949 	ldrtcc	r4, [r1], -r9, asr #18
    4b30:	5f343278 	svcpl	0x00343278
    4b34:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    4b38:	65680065 	strbvs	r0, [r8, #-101]!	; 0x65
    4b3c:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
    4b40:	6e697800 	cdpvs	8, 6, cr7, cr9, cr0, {0}
    4b44:	4c003163 	stfmis	f3, [r0], {99}	; 0x63
    4b48:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4b50 <_Min_Stack_Size+0x4750>
    4b4c:	43776172 	cmnmi	r7, #-2147483620	; 0x8000001c
    4b50:	6c637269 	sfmvs	f7, 2, [r3], #-420	; 0xfffffe5c
    4b54:	434c0065 	movtmi	r0, #49253	; 0xc065
    4b58:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4b5c:	694c7761 	stmdbvs	ip, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    4b60:	4c00656e 	cfstr32mi	mvfx6, [r0], {110}	; 0x6e
    4b64:	475f4443 	ldrbmi	r4, [pc, -r3, asr #8]
    4b68:	6f437465 	svcvs	0x00437465
    4b6c:	73726f6c 	cmnvc	r2, #108, 30	; 0x1b0
    4b70:	6f705800 	svcvs	0x00705800
    4b74:	434c0073 	movtmi	r0, #49267	; 0xc073
    4b78:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4b7c:	75467761 	strbvc	r7, [r6, #-1889]	; 0x761
    4b80:	65526c6c 	ldrbvs	r6, [r2, #-3180]	; 0xc6c
    4b84:	41007463 	tstmi	r0, r3, ror #8
    4b88:	49494353 	stmdbmi	r9, {r0, r1, r4, r6, r8, r9, lr}^
    4b8c:	5f387838 	svcpl	0x00387838
    4b90:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    4b94:	65640065 	strbvs	r0, [r4, #-101]!	; 0x65
    4b98:	7861746c 	stmdavc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
    4b9c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    4ba0:	00796174 	rsbseq	r6, r9, r4, ror r1
    4ba4:	5f44434c 	svcpl	0x0044434c
    4ba8:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    4bac:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4bb0:	616c6552 	cmnvs	ip, r2, asr r5
    4bb4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    4bb8:	636e6900 	cmnvs	lr, #0, 18
    4bbc:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    4bc0:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4bc4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4bc8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4bcc:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    4bd0:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    4bd4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4bd8:	2f797265 	svccs	0x00797265
    4bdc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4be0:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    4be4:	645f6939 	ldrbvs	r6, [pc], #-2361	; 4bec <_Min_Stack_Size+0x47ec>
    4be8:	6f637369 	svcvs	0x00637369
    4bec:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    4bf0:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
    4bf4:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    4bf8:	00316461 	eorseq	r6, r1, r1, ror #8
    4bfc:	32646172 	rsbcc	r6, r4, #-2147483620	; 0x8000001c
    4c00:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4c04:	6172445f 	cmnvs	r2, pc, asr r4
    4c08:	6e6f4d77 	mcrvs	13, 3, r4, cr15, cr7, {3}
    4c0c:	6369506f 	cmnvs	r9, #111	; 0x6f
    4c10:	434c0074 	movtmi	r0, #49268	; 0xc074
    4c14:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    4c18:	79614c74 	stmdbvc	r1!, {r2, r4, r5, r6, sl, fp, lr}^
    4c1c:	59007265 	stmdbpl	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    4c20:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    4c24:	00726574 	rsbseq	r6, r2, r4, ror r5
    4c28:	746e6f46 	strbtvc	r6, [lr], #-3910	; 0xf46
    4c2c:	00387838 	eorseq	r7, r8, r8, lsr r8
    4c30:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4c34:	4c00586c 	stcmi	8, cr5, [r0], {108}	; 0x6c
    4c38:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4c3c:	6f434950 	svcvs	0x00434950
    4c40:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4c44:	696f5000 	stmdbvs	pc!, {ip, lr}^	; <UNPREDICTABLE>
    4c48:	0073746e 	rsbseq	r7, r3, lr, ror #8
    4c4c:	5f44434c 	svcpl	0x0044434c
    4c50:	46746553 			; <UNDEFINED> instruction: 0x46746553
    4c54:	00746e6f 	rsbseq	r6, r4, pc, ror #28
    4c58:	5f44434c 	svcpl	0x0044434c
    4c5c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    4c60:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4c64:	69725773 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    4c68:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4c6c:	525f4443 	subspl	r4, pc, #1124073472	; 0x43000000
    4c70:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
    4c74:	6f6c6f43 	svcvs	0x006c6f43
    4c78:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4c7c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4c80:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    4c84:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
    4c88:	43747865 	cmnmi	r4, #6619136	; 0x650000
    4c8c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4c90:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4c94:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4c98:	4900736c 	stmdbmi	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    4c9c:	4547414d 	strbmi	r4, [r7, #-333]	; 0x14d
    4ca0:	504f545f 	subpl	r5, pc, pc, asr r4	; <UNPREDICTABLE>
    4ca4:	4f467300 	svcmi	0x00467300
    4ca8:	4c00544e 	cfstrsmi	mvf5, [r0], {78}	; 0x4e
    4cac:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4cb4 <_Min_Stack_Size+0x48b4>
    4cb0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4cb4:	664f7961 	strbvs	r7, [pc], -r1, ror #18
    4cb8:	434c0066 	movtmi	r0, #49254	; 0xc066
    4cbc:	65475f44 	strbvs	r5, [r7, #-3908]	; 0xf44
    4cc0:	6e6f4674 	mcrvs	6, 3, r4, cr15, cr4, {3}
    4cc4:	434c0074 	movtmi	r0, #49268	; 0xc074
    4cc8:	72575f44 	subsvc	r5, r7, #68, 30	; 0x110
    4ccc:	44657469 	strbtmi	r7, [r5], #-1129	; 0x469
    4cd0:	00617461 	rsbeq	r7, r1, r1, ror #8
    4cd4:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    4cd8:	4f425f45 	svcmi	0x00425f45
    4cdc:	4d4f5454 	cfstrdmi	mvd5, [pc, #-336]	; 4b94 <_Min_Stack_Size+0x4794>
    4ce0:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4ce4:	7275435f 	rsbsvc	r4, r5, #2080374785	; 0x7c000001
    4ce8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    4cec:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xf66
    4cf0:	4f490073 	svcmi	0x00490073
    4cf4:	50545f45 	subspl	r5, r4, r5, asr #30
    4cf8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4cfc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4d00:	50540065 	subspl	r0, r4, r5, rrx
    4d04:	6174535f 	cmnvs	r4, pc, asr r3
    4d08:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    4d0c:	475f454f 	ldrbmi	r4, [pc, -pc, asr #10]
    4d10:	6d435449 	cfstrdvs	mvd5, [r3, #-292]	; 0xfffffedc
    4d14:	4f490064 	svcmi	0x00490064
    4d18:	4f495f45 	svcmi	0x00495f45
    4d1c:	6f434641 	svcvs	0x00434641
    4d20:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4d24:	454f4900 	strbmi	r4, [pc, #-2304]	; 442c <_Min_Stack_Size+0x402c>
    4d28:	5f50545f 	svcpl	0x0050545f
    4d2c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4d30:	5400585f 	strpl	r5, [r0], #-2143	; 0x85f
    4d34:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xf50
    4d38:	00455441 	subeq	r5, r5, r1, asr #8
    4d3c:	5f454f49 	svcpl	0x00454f49
    4d40:	525f5054 	subspl	r5, pc, #84	; 0x54
    4d44:	5f646165 	svcpl	0x00646165
    4d48:	6552005a 	ldrbvs	r0, [r2, #-90]	; 0x5a
    4d4c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    4d50:	64417265 	strbvs	r7, [r1], #-613	; 0x265
    4d54:	49007264 	stmdbmi	r0, {r2, r5, r6, r9, ip, sp, lr}
    4d58:	445f4332 	ldrbmi	r4, [pc], #-818	; 4d60 <_Min_Stack_Size+0x4960>
    4d5c:	525f414d 	subspl	r4, pc, #1073741843	; 0x40000013
    4d60:	44646165 	strbtmi	r6, [r4], #-357	; 0x165
    4d64:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4d68:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    4d6c:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    4d70:	4f490072 	svcmi	0x00490072
    4d74:	6e465f45 	cdpvs	15, 4, cr5, cr6, cr5, {2}
    4d78:	6d437463 	cfstrdvs	mvd7, [r3, #-396]	; 0xfffffe74
    4d7c:	4f490064 	svcmi	0x00490064
    4d80:	75425f45 	strbvc	r5, [r2, #-3909]	; 0xf45
    4d84:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    4d88:	49005854 	stmdbmi	r0, {r2, r4, r6, fp, ip, lr}
    4d8c:	495f454f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    4d90:	65704f73 	ldrbvs	r4, [r0, #-3955]!	; 0xf73
    4d94:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    4d98:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    4d9c:	756f5400 	strbvc	r5, [pc, #-1024]!	; 49a4 <_Min_Stack_Size+0x45a4>
    4da0:	65446863 	strbvs	r6, [r4, #-2147]	; 0x863
    4da4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    4da8:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
    4dac:	435f454f 	cmpmi	pc, #331350016	; 0x13c00000
    4db0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4db4:	50544947 	subspl	r4, r4, r7, asr #18
    4db8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    4dbc:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4dc0:	495f454f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    4dc4:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    4dc8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4dcc:	4f490067 	svcmi	0x00490067
    4dd0:	65475f45 	strbvs	r5, [r7, #-3909]	; 0xf45
    4dd4:	54494774 	strbpl	r4, [r9], #-1908	; 0x774
    4dd8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4ddc:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4de0:	525f454f 	subspl	r4, pc, #331350016	; 0x13c00000
    4de4:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4de8:	65520044 	ldrbvs	r0, [r2, #-68]	; 0x44
    4dec:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    4df0:	61567265 	cmpvs	r6, r5, ror #4
    4df4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4df8:	5f433249 	svcpl	0x00433249
    4dfc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4e00:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4e04:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    4e08:	4f490065 	svcmi	0x00490065
    4e0c:	50475f45 	subpl	r5, r7, r5, asr #30
    4e10:	435f4f49 	cmpmi	pc, #292	; 0x124
    4e14:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4e18:	4f490067 	svcmi	0x00490067
    4e1c:	4b4f5f45 	blmi	13dcb38 <_Min_Stack_Size+0x13dc738>
    4e20:	454f4900 	strbmi	r4, [pc, #-2304]	; 4528 <_Min_Stack_Size+0x4128>
    4e24:	5f50545f 	svcpl	0x0050545f
    4e28:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4e2c:	4900595f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, fp, ip, lr}
    4e30:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4e38 <_Min_Stack_Size+0x4a38>
    4e34:	6f656d69 	svcvs	0x00656d69
    4e38:	73557475 	cmpvc	r5, #1962934272	; 0x75000000
    4e3c:	61437265 	cmpvs	r3, r5, ror #4
    4e40:	61626c6c 	cmnvs	r2, ip, ror #24
    4e44:	49006b63 	stmdbmi	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    4e48:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4e50 <_Min_Stack_Size+0x4a50>
    4e4c:	43544950 	cmpmi	r4, #80, 18	; 0x140000
    4e50:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4e54:	4f490067 	svcmi	0x00490067
    4e58:	65525f45 	ldrbvs	r5, [r2, #-3909]	; 0xf45
    4e5c:	00746573 	rsbseq	r6, r4, r3, ror r5
    4e60:	5f454f49 	svcpl	0x00454f49
    4e64:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
    4e68:	0054554f 	subseq	r5, r4, pc, asr #10
    4e6c:	5f433249 	svcpl	0x00433249
    4e70:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4e74:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4e78:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4e7c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4e80:	00726574 	rsbseq	r6, r2, r4, ror r5
    4e84:	5f433249 	svcpl	0x00433249
    4e88:	5f414d44 	svcpl	0x00414d44
    4e8c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4e90:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4e94:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4e98:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4e9c:	00726574 	rsbseq	r6, r2, r4, ror r5
    4ea0:	2f636e69 	svccs	0x00636e69
    4ea4:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    4ea8:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    4eac:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4eb0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4eb4:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4eb8:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    4ebc:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4ec0:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    4ec4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4ec8:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    4ecc:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ed0:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    4ed4:	5f797265 	svcpl	0x00797265
    4ed8:	2e656f69 	cdpcs	15, 6, cr6, cr5, cr9, {3}
    4edc:	4f490063 	svcmi	0x00490063
    4ee0:	69545f45 	ldmdbvs	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    4ee4:	754f656d 	strbvc	r6, [pc, #-1389]	; 497f <_Min_Stack_Size+0x457f>
    4ee8:	4f490074 	svcmi	0x00490074
    4eec:	4d445f45 	stclmi	15, cr5, [r4, #-276]	; 0xfffffeec
    4ef0:	72694441 	rsbvc	r4, r9, #1090519040	; 0x41000000
    4ef4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4ef8:	545f6e6f 	ldrbpl	r6, [pc], #-3695	; 4f00 <_Min_Stack_Size+0x4b00>
    4efc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4f00:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    4f04:	465f454f 	ldrbmi	r4, [pc], -pc, asr #10
    4f08:	554c4941 	strbpl	r4, [ip, #-2369]	; 0x941
    4f0c:	49004552 	stmdbmi	r0, {r1, r4, r6, r8, sl, lr}
    4f10:	445f454f 	ldrbmi	r4, [pc], #-1359	; 4f18 <_Min_Stack_Size+0x4b18>
    4f14:	525f414d 	subspl	r4, pc, #1073741843	; 0x40000013
    4f18:	4f490058 	svcmi	0x00490058
    4f1c:	49475f45 	stmdbmi	r7, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    4f20:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    4f24:	00676966 	rsbeq	r6, r7, r6, ror #18
    4f28:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    4f2c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    4f30:	78006669 	stmdavc	r0, {r0, r3, r5, r6, r9, sl, sp, lr}
    4f34:	66666944 	strbtvs	r6, [r6], -r4, asr #18
    4f38:	43324900 	teqmi	r2, #0, 18
    4f3c:	414d445f 	cmpmi	sp, pc, asr r4
    4f40:	6165525f 	cmnvs	r5, pc, asr r2
    4f44:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    4f48:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    4f4c:	00726566 	rsbseq	r6, r2, r6, ror #10
    4f50:	5f454f49 	svcpl	0x00454f49
    4f54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4f58:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    4f5c:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    4f60:	44646165 	strbtmi	r6, [r4], #-357	; 0x165
    4f64:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    4f68:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4f6c:	4f490072 	svcmi	0x00490072
    4f70:	4f4e5f45 	svcmi	0x004e5f45
    4f74:	504f5f54 	subpl	r5, pc, r4, asr pc	; <UNPREDICTABLE>
    4f78:	54415245 	strbpl	r5, [r1], #-581	; 0x245
    4f7c:	414e4f49 	cmpmi	lr, r9, asr #30
    4f80:	4f49004c 	svcmi	0x0049004c
    4f84:	50545f45 	subspl	r5, r4, r5, asr #30
    4f88:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    4f8c:	00676966 	rsbeq	r6, r7, r6, ror #18
    4f90:	5f454f49 	svcpl	0x00454f49
    4f94:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    4f98:	58527265 	ldmdapl	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4f9c:	454f4900 	strbmi	r4, [pc, #-2304]	; 46a4 <_Min_Stack_Size+0x42a4>
    4fa0:	414d445f 	cmpmi	sp, pc, asr r4
    4fa4:	0058545f 	subseq	r5, r8, pc, asr r4
    4fa8:	66694479 			; <UNDEFINED> instruction: 0x66694479
    4fac:	41500066 	cmpmi	r0, r6, rrx
    4fb0:	5f4d4152 	svcpl	0x004d4152
    4fb4:	4f525245 	svcmi	0x00525245
    4fb8:	4f490052 	svcmi	0x00490052
    4fbc:	4d445f45 	stclmi	15, cr5, [r4, #-276]	; 0xfffffeec
    4fc0:	6f435f41 	svcvs	0x00435f41
    4fc4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4fc8:	43324900 	teqmi	r2, #0, 18
    4fcc:	6165525f 	cmnvs	r5, pc, asr r2
    4fd0:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    4fd4:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4fd8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4fdc:	00726574 	rsbseq	r6, r2, r4, ror r5
    4fe0:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    4fe4:	495f6c61 	ldmdbmi	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4fe8:	65690054 	strbvs	r0, [r9, #-84]!	; 0x54
    4fec:	645f6565 	ldrbvs	r6, [pc], #-1381	; 4ff4 <_Min_Stack_Size+0x4bf4>
    4ff0:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    4ff4:	68735f65 	ldmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ff8:	5f657061 	svcpl	0x00657061
    4ffc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5000:	67756800 	ldrbvs	r6, [r5, -r0, lsl #16]!
    5004:	74610065 	strbtvc	r0, [r1], #-101	; 0x65
    5008:	66006e61 	strvs	r6, [r0], -r1, ror #28
    500c:	00736261 	rsbseq	r6, r3, r1, ror #4
    5010:	755f6867 	ldrbvc	r6, [pc, #-2151]	; 47b1 <_Min_Stack_Size+0x43b1>
    5014:	72617000 	rsbvc	r7, r1, #0
    5018:	47007374 	smlsdxmi	r0, r4, r3, r7
    501c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
    5020:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    5024:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
    5028:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    502c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    5030:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    5034:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    5038:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    503c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    5040:	6f6c666d 	svcvs	0x006c666d
    5044:	612d7461 	teqvs	sp, r1, ror #8
    5048:	733d6962 	teqvc	sp, #1605632	; 0x188000
    504c:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    5050:	6d2d2070 	stcvs	0, cr2, [sp, #-448]!	; 0xfffffe40
    5054:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
    5058:	34767066 	ldrbtcc	r7, [r6], #-102	; 0x66
    505c:	2d70732d 	ldclcs	3, cr7, [r0, #-180]!	; 0xffffff4c
    5060:	20363164 	eorscs	r3, r6, r4, ror #2
    5064:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    5068:	20626d75 	rsbcs	r6, r2, r5, ror sp
    506c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    5070:	613d6863 	teqvs	sp, r3, ror #16
    5074:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5078:	206d2d65 	rsbcs	r2, sp, r5, ror #26
    507c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    5080:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    5084:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5088:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    508c:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
    5090:	7570666d 	ldrbvc	r6, [r0, #-1645]!	; 0x66d
    5094:	7670663d 			; <UNDEFINED> instruction: 0x7670663d
    5098:	70732d34 	rsbsvc	r2, r3, r4, lsr sp
    509c:	3631642d 	ldrtcc	r6, [r1], -sp, lsr #8
    50a0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    50a4:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    50a8:	6f6e662d 	svcvs	0x006e662d
    50ac:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    50b0:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    50b4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    50b8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    50bc:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    50c0:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    50c4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    50c8:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xd20
    50cc:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    50d0:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    50d4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    50d8:	61746100 	cmnvs	r4, r0, lsl #2
    50dc:	0069686e 	rsbeq	r6, r9, lr, ror #16
    50e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50e8:	2f2e2e2f 	svccs	0x002e2e2f
    50ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50f4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    50f8:	2f62696c 	svccs	0x0062696c
    50fc:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5100:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5104:	5f732f68 	svcpl	0x00732f68
    5108:	6e617461 	cdpvs	4, 6, cr7, cr1, cr1, {3}
    510c:	6100632e 	tstvs	r0, lr, lsr #6
    5110:	6c6e6174 	stfvse	f6, [lr], #-464	; 0xfffffe30
    5114:	622f006f 	eorvs	r0, pc, #111	; 0x6f
    5118:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    511c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5120:	2f64646c 	svccs	0x0064646c
    5124:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5128:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    512c:	302e312e 	eorcc	r3, lr, lr, lsr #2
    5130:	7469672b 	strbtvc	r6, [r9], #-1835	; 0x72b
    5134:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    5138:	38313830 	ldmdacc	r1!, {r4, r5, fp, ip, sp}
    513c:	3861312e 	stmdacc	r1!, {r1, r2, r3, r5, r8, ip, sp}^
    5140:	62333233 	eorsvs	r3, r3, #805306371	; 0x30000003
    5144:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5148:	612f646c 	teqvs	pc, ip, ror #8
    514c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5150:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5154:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5158:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    515c:	2d653776 	stclcs	7, cr3, [r5, #-472]!	; 0xfffffe28
    5160:	6f732f6d 	svcvs	0x00732f6d
    5164:	70667466 	rsbvc	r7, r6, r6, ror #8
    5168:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    516c:	2f62696c 	svccs	0x0062696c
    5170:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5174:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    5178:	68730068 	ldmdavs	r3!, {r3, r5, r6}^
    517c:	6800755f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}
    5180:	00686769 	rsbeq	r6, r8, r9, ror #14
    5184:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5188:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    518c:	2f2e2e2f 	svccs	0x002e2e2f
    5190:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5194:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5198:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    519c:	2f62696c 	svccs	0x0062696c
    51a0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    51a4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    51a8:	5f732f68 	svcpl	0x00732f68
    51ac:	73626166 	cmnvc	r2, #-2147483623	; 0x80000019
    51b0:	5f00632e 	svcpl	0x0000632e
    51b4:	6370665f 	cmnvs	r0, #99614720	; 0x5f00000
    51b8:	7373616c 	cmnvc	r3, #108, 2
    51bc:	64796669 	ldrbtvs	r6, [r9], #-1641	; 0x669
    51c0:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    51c4:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    51c8:	6f785f6d 	svcvs	0x00785f6d
    51cc:	006e6570 	rsbeq	r6, lr, r0, ror r5
    51d0:	31677261 	cmncc	r7, r1, ror #4
    51d4:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
    51d8:	65720032 	ldrbvs	r0, [r2, #-50]!	; 0x32
    51dc:	6c617674 	stclvs	6, cr7, [r1], #-464	; 0xfffffe30
    51e0:	2f2e2e00 	svccs	0x002e2e00
    51e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    51e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    51ec:	2f2e2e2f 	svccs	0x002e2e2f
    51f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    51f4:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    51f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    51fc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5200:	616d2f6d 	cmnvs	sp, sp, ror #30
    5204:	772f6874 			; <UNDEFINED> instruction: 0x772f6874
    5208:	6973615f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    520c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5210:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5214:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5218:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    521c:	5f5f0065 	svcpl	0x005f0065
    5220:	65656569 	strbvs	r6, [r5, #-1385]!	; 0x569
    5224:	5f343537 	svcpl	0x00343537
    5228:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    522c:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    5230:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5234:	6f705f6d 	svcvs	0x00705f6d
    5238:	00786973 	rsbseq	r6, r8, r3, ror r9
    523c:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5240:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5244:	6976735f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    5248:	78650064 	stmdavc	r5!, {r2, r5, r6}^
    524c:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    5250:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    5254:	64665f5f 	strbtvs	r5, [r6], #-3935	; 0xf5f
    5258:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    525c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    5260:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    5264:	6d616e00 	stclvs	14, cr6, [r1, #-0]
    5268:	5f5f0065 	svcpl	0x005f0065
    526c:	696c6466 	stmdbvs	ip!, {r1, r2, r5, r6, sl, sp, lr}^
    5270:	65765f62 	ldrbvs	r5, [r6, #-3938]!	; 0xf62
    5274:	6f697372 	svcvs	0x00697372
    5278:	5f5f006e 	svcpl	0x005f006e
    527c:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    5280:	616d006f 	cmnvs	sp, pc, rrx
    5284:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    5288:	69720072 	ldmdbvs	r2!, {r1, r4, r5, r6}^
    528c:	5f00746e 	svcpl	0x0000746e
    5290:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    5294:	34353765 	ldrtcc	r3, [r5], #-1893	; 0x765
    5298:	776f705f 			; <UNDEFINED> instruction: 0x776f705f
    529c:	6e696600 	cdpvs	6, 6, cr6, cr9, cr0, {0}
    52a0:	00657469 	rsbeq	r7, r5, r9, ror #8
    52a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    52a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    52ac:	2f2e2e2f 	svccs	0x002e2e2f
    52b0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    52b4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    52b8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    52bc:	2f62696c 	svccs	0x0062696c
    52c0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    52c4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
    52c8:	5f772f68 	svcpl	0x00772f68
    52cc:	2e776f70 	mrccs	15, 3, r6, cr7, cr0, {3}
    52d0:	6c730063 	ldclvs	0, cr0, [r3], #-396	; 0xfffffe74
    52d4:	7000755f 	andvc	r7, r0, pc, asr r5
    52d8:	5f326f69 	svcpl	0x00326f69
    52dc:	5f006968 	svcpl	0x00006968
    52e0:	6565695f 	strbvs	r6, [r5, #-2399]!	; 0x95f
    52e4:	34353765 	ldrtcc	r3, [r5], #-1893	; 0x765
    52e8:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    52ec:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
    52f0:	6c5f326f 	lfmvs	f3, 2, [pc], {111}	; 0x6f
    52f4:	2e2e006f 	cdpcs	0, 2, cr0, cr14, cr15, {3}
    52f8:	2f2e2e2f 	svccs	0x002e2e2f
    52fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5300:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5304:	2f2e2e2f 	svccs	0x002e2e2f
    5308:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    530c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5310:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5314:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5194 <_Min_Stack_Size+0x4d94>
    5318:	2f687461 	svccs	0x00687461
    531c:	73615f65 	cmnvc	r1, #404	; 0x194
    5320:	632e6e69 	teqvs	lr, #1680	; 0x690
    5324:	6f697000 	svcvs	0x00697000
    5328:	69685f34 	stmdbvs	r8!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    532c:	5f706300 	svcpl	0x00706300
    5330:	70630068 	rsbvc	r0, r3, r8, rrx
    5334:	73006c5f 	movwvc	r6, #3167	; 0xc5f
    5338:	626c6163 	rsbvs	r6, ip, #-1073741800	; 0xc0000018
    533c:	7669006e 	strbtvc	r0, [r9], -lr, rrx
    5340:	00326e6c 	eorseq	r6, r2, ip, ror #28
    5344:	6f72657a 	svcvs	0x0072657a
    5348:	73697900 	cmnvc	r9, #0, 18
    534c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5350:	356f7774 	strbcc	r7, [pc, #-1908]!	; 4be4 <_Min_Stack_Size+0x47e4>
    5354:	77650033 			; <UNDEFINED> instruction: 0x77650033
    5358:	6c00755f 	cfstr32vs	mvfx7, [r0], {95}	; 0x5f
    535c:	685f3267 	ldmdavs	pc, {r0, r1, r2, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    5360:	32676c00 	rsbcc	r6, r7, #0, 24
    5364:	74006c5f 	strvc	r6, [r0], #-3167	; 0xc5f
    5368:	00796e69 	rsbseq	r6, r9, r9, ror #28
    536c:	685f7064 	ldmdavs	pc, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    5370:	5f706400 	svcpl	0x00706400
    5374:	2e2e006c 	cdpcs	0, 2, cr0, cr14, cr12, {3}
    5378:	2f2e2e2f 	svccs	0x002e2e2f
    537c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5380:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5384:	2f2e2e2f 	svccs	0x002e2e2f
    5388:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    538c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5390:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5394:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 5214 <_Min_Stack_Size+0x4e14>
    5398:	2f687461 	svccs	0x00687461
    539c:	6f705f65 	svcvs	0x00705f65
    53a0:	00632e77 	rsbeq	r2, r3, r7, ror lr
    53a4:	6e6c7669 	cdpvs	6, 6, cr7, cr12, cr9, {3}
    53a8:	00685f32 	rsbeq	r5, r8, r2, lsr pc
    53ac:	6e6c7669 	cdpvs	6, 6, cr7, cr12, cr9, {3}
    53b0:	006c5f32 	rsbeq	r5, ip, r2, lsr pc
    53b4:	755f7769 	ldrbvc	r7, [pc, #-1897]	; 4c53 <_Min_Stack_Size+0x4853>
    53b8:	2f2e2e00 	svccs	0x002e2e00
    53bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    53c4:	2f2e2e2f 	svccs	0x002e2e2f
    53c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53cc:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    53d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    53d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    53d8:	616d2f6d 	cmnvs	sp, sp, ror #30
    53dc:	652f6874 	strvs	r6, [pc, #-2164]!	; 4b70 <_Min_Stack_Size+0x4770>
    53e0:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    53e4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    53e8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    53ec:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    53f0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    53f4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    53f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    53fc:	312e322d 	teqcc	lr, sp, lsr #4
    5400:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5404:	30327469 	eorscc	r7, r2, r9, ror #8
    5408:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    540c:	312e3831 	teqcc	lr, r1, lsr r8
    5410:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    5414:	622f6233 	eorvs	r6, pc, #805306371	; 0x30000003
    5418:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    541c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5420:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5424:	61652d65 	cmnvs	r5, r5, ror #26
    5428:	612f6962 	teqvs	pc, r2, ror #18
    542c:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5430:	2f6d2d65 	svccs	0x006d2d65
    5434:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    5438:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    543c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5440:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5444:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5448:	6f6d6d6f 	svcvs	0x006d6d6f
    544c:	2e2e006e 	cdpcs	0, 2, cr0, cr14, cr14, {3}
    5450:	2f2e2e2f 	svccs	0x002e2e2f
    5454:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5458:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    545c:	2f2e2e2f 	svccs	0x002e2e2f
    5460:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5464:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5468:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    546c:	632f6d62 	teqvs	pc, #6272	; 0x1880
    5470:	6f6d6d6f 	svcvs	0x006d6d6f
    5474:	5f732f6e 	svcpl	0x00732f6e
    5478:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    547c:	632e6574 	teqvs	lr, #116, 10	; 0x1d000000
    5480:	2f2e2e00 	svccs	0x002e2e00
    5484:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5488:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    548c:	2f2e2e2f 	svccs	0x002e2e2f
    5490:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5494:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xf2e
    5498:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    549c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    54a0:	6f632f6d 	svcvs	0x00632f6d
    54a4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    54a8:	665f732f 	ldrbvs	r7, [pc], -pc, lsr #6
    54ac:	616c6370 	smcvs	50736	; 0xc630
    54b0:	66697373 			; <UNDEFINED> instruction: 0x66697373
    54b4:	00632e79 	rsbeq	r2, r3, r9, ror lr
    54b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    54bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    54c0:	2f2e2e2f 	svccs	0x002e2e2f
    54c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    54c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    54cc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    54d0:	2f62696c 	svccs	0x0062696c
    54d4:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    54d8:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5424 <_Min_Stack_Size+0x5024>
    54dc:	2f6e6f6d 	svccs	0x006e6f6d
    54e0:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    54e4:	65765f62 	ldrbvs	r5, [r6, #-3938]!	; 0xf62
    54e8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    54ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    54f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    54f4:	2f2e2e2f 	svccs	0x002e2e2f
    54f8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    54fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5500:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5504:	2f62696c 	svccs	0x0062696c
    5508:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    550c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 5458 <_Min_Stack_Size+0x5058>
    5510:	2f6e6f6d 	svccs	0x006e6f6d
    5514:	616d5f73 	smcvs	54771	; 0xd5f3
    5518:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    551c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    5520:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5524:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5528:	2f2e2e2f 	svccs	0x002e2e2f
    552c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5530:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5534:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5538:	2f62696c 	svccs	0x0062696c
    553c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5540:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 548c <_Min_Stack_Size+0x508c>
    5544:	2f6e6f6d 	svccs	0x006e6f6d
    5548:	616e5f73 	smcvs	58867	; 0xe5f3
    554c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5550:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5554:	622f646c 	eorvs	r6, pc, #108, 8	; 0x6c000000
    5558:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    555c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xf64
    5560:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5564:	312e322d 	teqcc	lr, sp, lsr #4
    5568:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    556c:	30327469 	eorscc	r7, r2, r9, ror #8
    5570:	38303431 	ldmdacc	r0!, {r0, r4, r5, sl, ip, sp}
    5574:	312e3831 	teqcc	lr, r1, lsr r8
    5578:	32333861 	eorscc	r3, r3, #6356992	; 0x610000
    557c:	622f6233 	eorvs	r6, pc, #805306371	; 0x30000003
    5580:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    5584:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5588:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    558c:	61652d65 	cmnvs	r5, r5, ror #26
    5590:	612f6962 	teqvs	pc, r2, ror #18
    5594:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5598:	2f6d2d65 	svccs	0x006d2d65
    559c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
    55a0:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    55a4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    55a8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    55ac:	6d2f6d62 	stcvs	13, cr6, [pc, #-392]!	; 542c <_Min_Stack_Size+0x502c>
    55b0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    55b4:	612f656e 	teqvs	pc, lr, ror #10
    55b8:	54006d72 	strpl	r6, [r0], #-3442	; 0xd72
    55bc:	32354f57 	eorscc	r4, r5, #348	; 0x15c
    55c0:	2f2e2e00 	svccs	0x002e2e00
    55c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    55c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    55cc:	2f2e2e2f 	svccs	0x002e2e2f
    55d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    55d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    55d8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55dc:	2f62696c 	svccs	0x0062696c
    55e0:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    55e4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    55e8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    55ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    55f0:	725f732f 	subsvc	r7, pc, #-1140850688	; 0xbc000000
    55f4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    55f8:	77740063 	ldrbvc	r0, [r4, -r3, rrx]!
    55fc:	0034356f 	eorseq	r3, r4, pc, ror #10
    5600:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5604:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5608:	2f2e2e2f 	svccs	0x002e2e2f
    560c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5610:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5614:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5618:	2f62696c 	svccs	0x0062696c
    561c:	6d62696c 	stclvs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5620:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; 556c <_Min_Stack_Size+0x516c>
    5624:	2f6e6f6d 	svccs	0x006e6f6d
    5628:	63735f73 	cmnvs	r3, #460	; 0x1cc
    562c:	6e626c61 	cdpvs	12, 6, cr6, cr2, cr1, {3}
    5630:	6300632e 	movwvs	r6, #814	; 0x32e
    5634:	7379706f 	cmnvc	r9, #111	; 0x6f
    5638:	006e6769 	rsbeq	r6, lr, r9, ror #14
    563c:	6d6f7774 	stclvs	7, cr7, [pc, #-464]!	; 5474 <_Min_Stack_Size+0x5074>
    5640:	2e003435 	cfmvdhrcs	mvd0, r3
    5644:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5648:	2f2e2e2f 	svccs	0x002e2e2f
    564c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5650:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5654:	2f2e2e2f 	svccs	0x002e2e2f
    5658:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    565c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 54c0 <_Min_Stack_Size+0x50c0>
    5660:	2f6d6269 	svccs	0x006d6269
    5664:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    5668:	732f6e6f 	teqvc	pc, #1776	; 0x6f0
    566c:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    5670:	67697379 			; <UNDEFINED> instruction: 0x67697379
    5674:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5678:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xf5f
    567c:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    5680:	5f007469 	svcpl	0x00007469
    5684:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    5688:	5f003273 	svcpl	0x00003273
    568c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0x26d
    5690:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xf6e
    5694:	00657461 	rsbeq	r7, r5, r1, ror #8
    5698:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xc5f
    569c:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xf61
    56a0:	6f5f0066 	svcvs	0x005f0066
    56a4:	745f6666 	ldrbvc	r6, [pc], #-1638	; 56ac <_Min_Stack_Size+0x52ac>
    56a8:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
    56ac:	5f006863 	svcpl	0x00006863
    56b0:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
    56b4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    56b8:	61765f5f 	cmnvs	r6, pc, asr pc
    56bc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    56c0:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    56c4:	2f006675 	svccs	0x00006675
    56c8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    56cc:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    56d0:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    56d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    56d8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    56dc:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    56e0:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    56e4:	31303274 	teqcc	r0, r4, ror r2
    56e8:	31383034 	teqcc	r8, r4, lsr r0
    56ec:	61312e38 	teqvs	r1, r8, lsr lr
    56f0:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    56f4:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xf62
    56f8:	2f646c69 	svccs	0x00646c69
    56fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5700:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    5704:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5708:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    570c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    5710:	732f6d2d 	teqvc	pc, #2880	; 0xb40
    5714:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    5718:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xf70
    571c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5720:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5724:	72652f63 	rsbvc	r2, r5, #396	; 0x18c
    5728:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
    572c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    5730:	5f746c75 	svcpl	0x00746c75
    5734:	6f5f006b 	svcvs	0x005f006b
    5738:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    573c:	5f5f0074 	svcpl	0x005f0074
    5740:	5f006673 	svcpl	0x00006673
    5744:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    5748:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    574c:	5f006675 	svcpl	0x00006675
    5750:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    5754:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    5758:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xf73
    575c:	00657461 	rsbeq	r7, r5, r1, ror #8
    5760:	616c665f 	cmnvs	ip, pc, asr r6
    5764:	5f007367 	svcpl	0x00007367
    5768:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
    576c:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
    5770:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    5774:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    5778:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    577c:	635f5f00 	cmpvs	pc, #0, 30
    5780:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    5784:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 578c <_Min_Stack_Size+0x538c>
    5788:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xf6d
    578c:	5f007961 	svcpl	0x00007961
    5790:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xc67
    5794:	626d5f00 	rsbvs	r5, sp, #0, 30
    5798:	6f747273 	svcvs	0x00747273
    579c:	5f736377 	svcpl	0x00736377
    57a0:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    57a4:	725f0065 	subsvc	r0, pc, #101	; 0x65
    57a8:	5f003834 	svcpl	0x00003834
    57ac:	6f647473 	svcvs	0x00647473
    57b0:	5f007475 	svcpl	0x00007475
    57b4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    57b8:	5f007469 	svcpl	0x00007469
    57bc:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
    57c0:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
    57c4:	635f0079 	cmpvs	pc, #121	; 0x79
    57c8:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0x476
    57cc:	6e5f006e 	cdpvs	0, 5, cr0, cr15, cr14, {3}
    57d0:	00667562 	rsbeq	r7, r6, r2, ror #10
    57d4:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    57d8:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xf4b
    57dc:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    57e0:	5f455649 	svcpl	0x00455649
    57e4:	6e5f0054 	mrcvs	0, 2, r0, cr15, cr4, {2}
    57e8:	73626f69 	cmnvc	r2, #420	; 0x1a4
    57ec:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
    57f0:	00454c49 	subeq	r4, r5, r9, asr #24
    57f4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    57f8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
    57fc:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    5800:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5808 <_Min_Stack_Size+0x5408>
    5804:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    5808:	735f006e 	cmpvc	pc, #110	; 0x6e
    580c:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
    5810:	00636e75 	rsbeq	r6, r3, r5, ror lr
    5814:	616d6e5f 	cmnvs	sp, pc, asr lr
    5818:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    581c:	72665f00 	rsbvc	r5, r6, #0, 30
    5820:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    5824:	5f007473 	svcpl	0x00007473
    5828:	00736e66 	rsbseq	r6, r3, r6, ror #28
    582c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    5830:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    5834:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 583c <_Min_Stack_Size+0x543c>
    5838:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xf6d
    583c:	5f007961 	svcpl	0x00007961
    5840:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
    5844:	5f007367 	svcpl	0x00007367
    5848:	73626f69 	cmnvc	r2, #420	; 0x1a4
    584c:	6f6c5f00 	svcvs	0x006c5f00
    5850:	5f006b63 	svcpl	0x00006b63
    5854:	746c756d 	strbtvc	r7, [ip], #-1389	; 0x56d
    5858:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5860 <_Min_Stack_Size+0x5460>
    585c:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    5860:	00747364 	rsbseq	r7, r4, r4, ror #6
    5864:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0x15f
    5868:	30746978 	rsbscc	r6, r4, r8, ror r9
    586c:	6c625f00 	stclvs	15, cr5, [r2], #-0
    5870:	7a69736b 	bvc	1a62624 <_Min_Stack_Size+0x1a62224>
    5874:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    5878:	7079746e 	rsbsvc	r7, r9, lr, ror #8
    587c:	5f007365 	svcpl	0x00007365
    5880:	736f7066 	cmnvc	pc, #102	; 0x66
    5884:	5f00745f 	svcpl	0x0000745f
    5888:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    588c:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    5890:	6b636f6c 	blvs	18e1648 <_Min_Stack_Size+0x18e1248>
    5894:	5f00745f 	svcpl	0x0000745f
    5898:	5f6d745f 	svcpl	0x006d745f
    589c:	00636573 	rsbeq	r6, r3, r3, ror r5
    58a0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    58a4:	756f685f 	strbvc	r6, [pc, #-2143]!	; 504d <_Min_Stack_Size+0x4c4d>
    58a8:	725f0072 	subsvc	r0, pc, #114	; 0x72
    58ac:	00646165 	rsbeq	r6, r4, r5, ror #2
    58b0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    58b4:	5f006674 	svcpl	0x00006674
    58b8:	00733570 	rsbseq	r3, r3, r0, ror r5
    58bc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0x35f
    58c0:	00727265 	rsbseq	r7, r2, r5, ror #4
    58c4:	63775f5f 	cmnvs	r7, #380	; 0x17c
    58c8:	2e006268 	cdpcs	2, 0, cr6, cr0, cr8, {3}
    58cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58d0:	2f2e2e2f 	svccs	0x002e2e2f
    58d4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    58d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58dc:	2f2e2e2f 	svccs	0x002e2e2f
    58e0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    58e4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5748 <_Min_Stack_Size+0x5348>
    58e8:	2f636269 	svccs	0x00636269
    58ec:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    58f0:	72652f6f 	rsbvc	r2, r5, #444	; 0x1bc
    58f4:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    58f8:	685f0063 	ldmdavs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
    58fc:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    5900:	5f006f6e 	svcpl	0x00006f6e
    5904:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
    5908:	5f006575 	svcpl	0x00006575
    590c:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; 4aa5 <_Min_Stack_Size+0x46a5>
    5910:	5f746978 	svcpl	0x00746978
    5914:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    5918:	626d5f00 	rsbvs	r5, sp, #0, 30
    591c:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
    5920:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xf63
    5924:	00657461 	rsbeq	r7, r5, r1, ror #8
    5928:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0x35f
    592c:	00667562 	rsbeq	r7, r6, r2, ror #10
    5930:	6f6f635f 	svcvs	0x006f635f
    5934:	0065696b 	rsbeq	r6, r5, fp, ror #18
    5938:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    593c:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    5940:	00656c69 	rsbeq	r6, r5, r9, ror #24
    5944:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    5948:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
    594c:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    5950:	5f006d61 	svcpl	0x00006d61
    5954:	73756e75 	cmnvc	r5, #1872	; 0x750
    5958:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    595c:	00646e61 	rsbeq	r6, r4, r1, ror #28
    5960:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    5964:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 596c <_Min_Stack_Size+0x556c>
    5968:	755f006d 	ldrbvc	r0, [pc, #-109]	; 5903 <_Min_Stack_Size+0x5503>
    596c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0x56e
    5970:	6d5f0064 	ldclvs	0, cr0, [pc, #-400]	; 57e8 <_Min_Stack_Size+0x53e8>
    5974:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    5978:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xf63
    597c:	00657461 	rsbeq	r7, r5, r1, ror #8
    5980:	746e6977 	strbtvc	r6, [lr], #-2423	; 0x977
    5984:	5f00745f 	svcpl	0x0000745f
    5988:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
    598c:	735f6e65 	cmpvc	pc, #1616	; 0x650
    5990:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    5994:	75635f00 	strbvc	r5, [r3, #-3840]!	; 0xf00
    5998:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    599c:	61635f74 	smcvs	13812	; 0x35f4
    59a0:	6f676574 	svcvs	0x00676574
    59a4:	5f007972 	svcpl	0x00007972
    59a8:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    59ac:	5f006178 	svcpl	0x00006178
    59b0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    59b4:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    59b8:	626d5f00 	rsbvs	r5, sp, #0, 30
    59bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    59c0:	00745f65 	rsbseq	r5, r4, r5, ror #30
    59c4:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
    59c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    59cc:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    59d0:	00736477 	rsbseq	r6, r3, r7, ror r4
    59d4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    59d8:	6165795f 	cmnvs	r5, pc, asr r9
    59dc:	735f0072 	cmpvc	pc, #114	; 0x72
    59e0:	6f747274 	svcvs	0x00747274
    59e4:	616c5f6b 	cmnvs	ip, fp, ror #30
    59e8:	5f007473 	svcpl	0x00007473
    59ec:	64656573 	strbtvs	r6, [r5], #-1395	; 0x573
    59f0:	61725f00 	cmnvs	r2, r0, lsl #30
    59f4:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
    59f8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5a00 <_Min_Stack_Size+0x5600>
    59fc:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xf6d
    5a00:	5f007961 	svcpl	0x00007961
    5a04:	6f4c555f 	svcvs	0x004c555f
    5a08:	5f00676e 	svcpl	0x0000676e
    5a0c:	6b656573 	blvs	195efe0 <_Min_Stack_Size+0x195ebe0>
    5a10:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xf00
    5a14:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    5a18:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5a20 <_Min_Stack_Size+0x5620>
    5a1c:	6f6d5f6d 	svcvs	0x006d5f6d
    5a20:	615f006e 	cmpvs	pc, lr, rrx
    5a24:	5f006464 	svcpl	0x00006464
    5a28:	00636e69 	rsbeq	r6, r3, r9, ror #28
    5a2c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0x95f
    5a30:	63775f00 	cmnvs	r7, #0, 30
    5a34:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    5a38:	6174735f 	cmnvs	r4, pc, asr r3
    5a3c:	5f006574 	svcpl	0x00006574
    5a40:	5f6f7364 	svcpl	0x006f7364
    5a44:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    5a48:	5f00656c 	svcpl	0x0000656c
    5a4c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    5a50:	61725f00 	cmnvs	r2, r0, lsl #30
    5a54:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
    5a58:	00747865 	rsbseq	r7, r4, r5, ror #16
    5a5c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0x35f
    5a60:	5f006e69 	svcpl	0x00006e69
    5a64:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5a68:	5f746e65 	svcpl	0x00746e65
    5a6c:	61636f6c 	cmnvs	r3, ip, ror #30
    5a70:	5f00656c 	svcpl	0x0000656c
    5a74:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5a78:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
    5a7c:	6f747263 	svcvs	0x00747263
    5a80:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    5a84:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    5a88:	62755f00 	rsbsvs	r5, r5, #0, 30
    5a8c:	5f006675 	svcpl	0x00006675
    5a90:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    5a94:	73615f00 	cmnvc	r1, #0, 30
    5a98:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    5a9c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    5aa0:	5f5f0066 	svcpl	0x005f0066
    5aa4:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    5aa8:	6e5f0045 	cdpvs	0, 5, cr0, cr15, cr5, {2}
    5aac:	69007765 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}
    5ab0:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    5ab4:	61645f65 	cmnvs	r4, r5, ror #30
    5ab8:	2f006174 	svccs	0x00006174
    5abc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5ac0:	75622f64 	strbvc	r2, [r2, #-3940]!	; 0xf64
    5ac4:	64646c69 	strbtvs	r6, [r4], #-3177	; 0xc69
    5ac8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5acc:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5ad0:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
    5ad4:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5ad8:	31303274 	teqcc	r0, r4, ror r2
    5adc:	31383034 	teqcc	r8, r4, lsr r0
    5ae0:	61312e38 	teqvs	r1, r8, lsr lr
    5ae4:	33323338 	teqcc	r2, #56, 6	; 0xe0000000
    5ae8:	75622f62 	strbvc	r2, [r2, #-3938]!	; 0xf62
    5aec:	2f646c69 	svccs	0x00646c69
    5af0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5af4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    5af8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5afc:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    5b00:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
    5b04:	732f6d2d 	teqvc	pc, #2880	; 0xb40
    5b08:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
    5b0c:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xf70
    5b10:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5b14:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5b18:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xf63
    5b1c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    5b20:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b28:	2f2e2e2f 	svccs	0x002e2e2f
    5b2c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b30:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b34:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5b38:	2f62696c 	svccs	0x0062696c
    5b3c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5b40:	6565722f 	strbvs	r7, [r5, #-559]!	; 0x22f
    5b44:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    5b48:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    5b4c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    5b50:	6f6c675f 	svcvs	0x006c675f
    5b54:	5f6c6162 	svcpl	0x006c6162
    5b58:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xd69
    5b5c:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    5b60:	Address 0x0000000000005b60 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
   c:	62753831 	rsbsvs	r3, r5, #3211264	; 0x310000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	32312b32 	eorscc	r2, r1, #51200	; 0xc800
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00332e38 	eorseq	r2, r3, r8, lsr lr
  20:	3a434347 	bcc	10d0d44 <_Min_Stack_Size+0x10d0944>
  24:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
  28:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
  2c:	75627537 	strbvc	r7, [r2, #-1335]!	; 0x537
  30:	3175746e 	cmncc	r5, lr, ror #8
  34:	2930312b 	ldmdbcs	r0!, {r0, r1, r3, r5, r8, ip, sp}
  38:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  3c:	Address 0x000000000000003c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
      1c:	00000040 	andeq	r0, r0, r0, asr #32
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      2c:	00000007 	andeq	r0, r0, r7
      30:	0000000c 	andeq	r0, r0, ip
      34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      38:	7c020001 	stcvc	0, cr0, [r2], {1}
      3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      40:	00000018 	andeq	r0, r0, r8, lsl r0
      44:	00000030 	andeq	r0, r0, r0, lsr r0
      48:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
      4c:	0000003a 	andeq	r0, r0, sl, lsr r0
      50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      54:	180e4101 	stmdane	lr, {r0, r8, lr}
      58:	00070d41 	andeq	r0, r7, r1, asr #26
      5c:	00000018 	andeq	r0, r0, r8, lsl r0
      60:	00000030 	andeq	r0, r0, r0, lsr r0
      64:	08000b84 	stmdaeq	r0, {r2, r7, r8, r9, fp}
      68:	0000003a 	andeq	r0, r0, sl, lsr r0
      6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      70:	180e4101 	stmdane	lr, {r0, r8, lr}
      74:	00070d41 	andeq	r0, r7, r1, asr #26
      78:	00000018 	andeq	r0, r0, r8, lsl r0
      7c:	00000030 	andeq	r0, r0, r0, lsr r0
      80:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
      84:	0000003a 	andeq	r0, r0, sl, lsr r0
      88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      8c:	180e4101 	stmdane	lr, {r0, r8, lr}
      90:	00070d41 	andeq	r0, r7, r1, asr #26
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000030 	andeq	r0, r0, r0, lsr r0
      9c:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
      a0:	00000096 	muleq	r0, r6, r0
      a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
      a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      ac:	300e4101 	andcc	r4, lr, r1, lsl #2
      b0:	00070d41 	andeq	r0, r7, r1, asr #26
      b4:	0000000c 	andeq	r0, r0, ip
      b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      bc:	7c020001 	stcvc	0, cr0, [r2], {1}
      c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      c4:	0000001c 	andeq	r0, r0, ip, lsl r0
      c8:	000000b4 	strheq	r0, [r0], -r4
      cc:	08000c94 	stmdaeq	r0, {r2, r4, r7, sl, fp}
      d0:	00000048 	andeq	r0, r0, r8, asr #32
      d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      d8:	41018e02 	tstmi	r1, r2, lsl #28
      dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      e0:	00000007 	andeq	r0, r0, r7
      e4:	0000001c 	andeq	r0, r0, ip, lsl r0
      e8:	000000b4 	strheq	r0, [r0], -r4
      ec:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
      f0:	00000120 	andeq	r0, r0, r0, lsr #2
      f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      f8:	41018e02 	tstmi	r1, r2, lsl #28
      fc:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     100:	00000007 	andeq	r0, r0, r7
     104:	00000024 	andeq	r0, r0, r4, lsr #32
     108:	000000b4 	strheq	r0, [r0], -r4
     10c:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
     110:	000003ec 	andeq	r0, r0, ip, ror #7
     114:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
     118:	86068507 	strhi	r8, [r6], -r7, lsl #10
     11c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     120:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     124:	600e4101 	andvs	r4, lr, r1, lsl #2
     128:	00070d41 	andeq	r0, r7, r1, asr #26
     12c:	0000000c 	andeq	r0, r0, ip
     130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     134:	7c020001 	stcvc	0, cr0, [r2], {1}
     138:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	0000012c 	andeq	r0, r0, ip, lsr #2
     144:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
     148:	00000068 	andeq	r0, r0, r8, rrx
     14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     150:	41018e02 	tstmi	r1, r2, lsl #28
     154:	0000070d 	andeq	r0, r0, sp, lsl #14
     158:	00000018 	andeq	r0, r0, r8, lsl r0
     15c:	0000012c 	andeq	r0, r0, ip, lsr #2
     160:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     164:	000000f8 	strdeq	r0, [r0], -r8
     168:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     16c:	200e4101 	andcs	r4, lr, r1, lsl #2
     170:	00070d41 	andeq	r0, r7, r1, asr #26
     174:	00000018 	andeq	r0, r0, r8, lsl r0
     178:	0000012c 	andeq	r0, r0, ip, lsr #2
     17c:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     180:	000000f4 	strdeq	r0, [r0], -r4
     184:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     188:	100e4101 	andne	r4, lr, r1, lsl #2
     18c:	00070d41 	andeq	r0, r7, r1, asr #26
     190:	0000000c 	andeq	r0, r0, ip
     194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     198:	7c020001 	stcvc	0, cr0, [r2], {1}
     19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1a0:	00000018 	andeq	r0, r0, r8, lsl r0
     1a4:	00000190 	muleq	r0, r0, r1
     1a8:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
     1ac:	00000024 	andeq	r0, r0, r4, lsr #32
     1b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1b4:	100e4101 	andne	r4, lr, r1, lsl #2
     1b8:	00070d41 	andeq	r0, r7, r1, asr #26
     1bc:	00000018 	andeq	r0, r0, r8, lsl r0
     1c0:	00000190 	muleq	r0, r0, r1
     1c4:	080014a8 	stmdaeq	r0, {r3, r5, r7, sl, ip}
     1c8:	000000bc 	strheq	r0, [r0], -ip
     1cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
     1d4:	00070d41 	andeq	r0, r7, r1, asr #26
     1d8:	00000018 	andeq	r0, r0, r8, lsl r0
     1dc:	00000190 	muleq	r0, r0, r1
     1e0:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
     1e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     1e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1ec:	100e4101 	andne	r4, lr, r1, lsl #2
     1f0:	00070d41 	andeq	r0, r7, r1, asr #26
     1f4:	00000018 	andeq	r0, r0, r8, lsl r0
     1f8:	00000190 	muleq	r0, r0, r1
     1fc:	08001590 	stmdaeq	r0, {r4, r7, r8, sl, ip}
     200:	00000040 	andeq	r0, r0, r0, asr #32
     204:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     208:	100e4101 	andne	r4, lr, r1, lsl #2
     20c:	00070d41 	andeq	r0, r7, r1, asr #26
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	00000190 	muleq	r0, r0, r1
     218:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
     21c:	00000038 	andeq	r0, r0, r8, lsr r0
     220:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     224:	100e4101 	andne	r4, lr, r1, lsl #2
     228:	00070d41 	andeq	r0, r7, r1, asr #26
     22c:	0000000c 	andeq	r0, r0, ip
     230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     234:	7c020001 	stcvc	0, cr0, [r2], {1}
     238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	0000022c 	andeq	r0, r0, ip, lsr #4
     244:	08001608 	stmdaeq	r0, {r3, r9, sl, ip}
     248:	00000164 	andeq	r0, r0, r4, ror #2
     24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     250:	41018e02 	tstmi	r1, r2, lsl #28
     254:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     258:	00000007 	andeq	r0, r0, r7
     25c:	00000018 	andeq	r0, r0, r8, lsl r0
     260:	0000022c 	andeq	r0, r0, ip, lsr #4
     264:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
     268:	0000011a 	andeq	r0, r0, sl, lsl r1
     26c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     270:	200e4101 	andcs	r4, lr, r1, lsl #2
     274:	00070d41 	andeq	r0, r7, r1, asr #26
     278:	00000018 	andeq	r0, r0, r8, lsl r0
     27c:	0000022c 	andeq	r0, r0, ip, lsr #4
     280:	08001888 	stmdaeq	r0, {r3, r7, fp, ip}
     284:	00000032 	andeq	r0, r0, r2, lsr r0
     288:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     28c:	100e4101 	andne	r4, lr, r1, lsl #2
     290:	00070d41 	andeq	r0, r7, r1, asr #26
     294:	00000018 	andeq	r0, r0, r8, lsl r0
     298:	0000022c 	andeq	r0, r0, ip, lsr #4
     29c:	080018bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip}
     2a0:	00000042 	andeq	r0, r0, r2, asr #32
     2a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2a8:	180e4101 	stmdane	lr, {r0, r8, lr}
     2ac:	00070d41 	andeq	r0, r7, r1, asr #26
     2b0:	00000018 	andeq	r0, r0, r8, lsl r0
     2b4:	0000022c 	andeq	r0, r0, ip, lsr #4
     2b8:	08001900 	stmdaeq	r0, {r8, fp, ip}
     2bc:	00000034 	andeq	r0, r0, r4, lsr r0
     2c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2c4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2c8:	00070d41 	andeq	r0, r7, r1, asr #26
     2cc:	00000018 	andeq	r0, r0, r8, lsl r0
     2d0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2d4:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
     2d8:	0000001a 	andeq	r0, r0, sl, lsl r0
     2dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2e0:	100e4101 	andne	r4, lr, r1, lsl #2
     2e4:	00070d41 	andeq	r0, r7, r1, asr #26
     2e8:	00000018 	andeq	r0, r0, r8, lsl r0
     2ec:	0000022c 	andeq	r0, r0, ip, lsr #4
     2f0:	08001950 	stmdaeq	r0, {r4, r6, r8, fp, ip}
     2f4:	00000034 	andeq	r0, r0, r4, lsr r0
     2f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2fc:	180e4101 	stmdane	lr, {r0, r8, lr}
     300:	00070d41 	andeq	r0, r7, r1, asr #26
     304:	00000018 	andeq	r0, r0, r8, lsl r0
     308:	0000022c 	andeq	r0, r0, ip, lsr #4
     30c:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
     310:	0000001a 	andeq	r0, r0, sl, lsl r0
     314:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     318:	100e4101 	andne	r4, lr, r1, lsl #2
     31c:	00070d41 	andeq	r0, r7, r1, asr #26
     320:	00000018 	andeq	r0, r0, r8, lsl r0
     324:	0000022c 	andeq	r0, r0, ip, lsr #4
     328:	080019a0 	stmdaeq	r0, {r5, r7, r8, fp, ip}
     32c:	0000001c 	andeq	r0, r0, ip, lsl r0
     330:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     334:	100e4101 	andne	r4, lr, r1, lsl #2
     338:	00070d41 	andeq	r0, r7, r1, asr #26
     33c:	00000018 	andeq	r0, r0, r8, lsl r0
     340:	0000022c 	andeq	r0, r0, ip, lsr #4
     344:	080019bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip}
     348:	0000001c 	andeq	r0, r0, ip, lsl r0
     34c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     350:	100e4101 	andne	r4, lr, r1, lsl #2
     354:	00070d41 	andeq	r0, r7, r1, asr #26
     358:	00000018 	andeq	r0, r0, r8, lsl r0
     35c:	0000022c 	andeq	r0, r0, ip, lsr #4
     360:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
     364:	0000002e 	andeq	r0, r0, lr, lsr #32
     368:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     36c:	100e4101 	andne	r4, lr, r1, lsl #2
     370:	00070d41 	andeq	r0, r7, r1, asr #26
     374:	00000018 	andeq	r0, r0, r8, lsl r0
     378:	0000022c 	andeq	r0, r0, ip, lsr #4
     37c:	08001a08 	stmdaeq	r0, {r3, r9, fp, ip}
     380:	0000001c 	andeq	r0, r0, ip, lsl r0
     384:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     388:	100e4101 	andne	r4, lr, r1, lsl #2
     38c:	00070d41 	andeq	r0, r7, r1, asr #26
     390:	00000018 	andeq	r0, r0, r8, lsl r0
     394:	0000022c 	andeq	r0, r0, ip, lsr #4
     398:	08001a24 	stmdaeq	r0, {r2, r5, r9, fp, ip}
     39c:	00000022 	andeq	r0, r0, r2, lsr #32
     3a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3a4:	100e4101 	andne	r4, lr, r1, lsl #2
     3a8:	00070d41 	andeq	r0, r7, r1, asr #26
     3ac:	00000018 	andeq	r0, r0, r8, lsl r0
     3b0:	0000022c 	andeq	r0, r0, ip, lsr #4
     3b4:	08001a48 	stmdaeq	r0, {r3, r6, r9, fp, ip}
     3b8:	0000008c 	andeq	r0, r0, ip, lsl #1
     3bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3c0:	180e4101 	stmdane	lr, {r0, r8, lr}
     3c4:	00070d41 	andeq	r0, r7, r1, asr #26
     3c8:	0000000c 	andeq	r0, r0, ip
     3cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3d0:	7c020001 	stcvc	0, cr0, [r2], {1}
     3d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3d8:	00000014 	andeq	r0, r0, r4, lsl r0
     3dc:	000003c8 	andeq	r0, r0, r8, asr #7
     3e0:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
     3e4:	00000070 	andeq	r0, r0, r0, ror r0
     3e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     3f0:	00000018 	andeq	r0, r0, r8, lsl r0
     3f4:	000003c8 	andeq	r0, r0, r8, asr #7
     3f8:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
     3fc:	00000024 	andeq	r0, r0, r4, lsr #32
     400:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     404:	100e4101 	andne	r4, lr, r1, lsl #2
     408:	00070d41 	andeq	r0, r7, r1, asr #26
     40c:	0000001c 	andeq	r0, r0, ip, lsl r0
     410:	000003c8 	andeq	r0, r0, r8, asr #7
     414:	08001b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip}
     418:	00000050 	andeq	r0, r0, r0, asr r0
     41c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     420:	41018e02 	tstmi	r1, r2, lsl #28
     424:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     428:	00000007 	andeq	r0, r0, r7
     42c:	00000018 	andeq	r0, r0, r8, lsl r0
     430:	000003c8 	andeq	r0, r0, r8, asr #7
     434:	08001bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip}
     438:	0000003c 	andeq	r0, r0, ip, lsr r0
     43c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     440:	180e4101 	stmdane	lr, {r0, r8, lr}
     444:	00070d41 	andeq	r0, r7, r1, asr #26
     448:	00000018 	andeq	r0, r0, r8, lsl r0
     44c:	000003c8 	andeq	r0, r0, r8, asr #7
     450:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
     454:	00000020 	andeq	r0, r0, r0, lsr #32
     458:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     45c:	100e4101 	andne	r4, lr, r1, lsl #2
     460:	00070d41 	andeq	r0, r7, r1, asr #26
     464:	00000018 	andeq	r0, r0, r8, lsl r0
     468:	000003c8 	andeq	r0, r0, r8, asr #7
     46c:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
     470:	00000040 	andeq	r0, r0, r0, asr #32
     474:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     478:	100e4101 	andne	r4, lr, r1, lsl #2
     47c:	00070d41 	andeq	r0, r7, r1, asr #26
     480:	00000018 	andeq	r0, r0, r8, lsl r0
     484:	000003c8 	andeq	r0, r0, r8, asr #7
     488:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
     48c:	00000020 	andeq	r0, r0, r0, lsr #32
     490:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     494:	100e4101 	andne	r4, lr, r1, lsl #2
     498:	00070d41 	andeq	r0, r7, r1, asr #26
     49c:	00000018 	andeq	r0, r0, r8, lsl r0
     4a0:	000003c8 	andeq	r0, r0, r8, asr #7
     4a4:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
     4a8:	0000003c 	andeq	r0, r0, ip, lsr r0
     4ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4b0:	180e4101 	stmdane	lr, {r0, r8, lr}
     4b4:	00070d41 	andeq	r0, r7, r1, asr #26
     4b8:	00000018 	andeq	r0, r0, r8, lsl r0
     4bc:	000003c8 	andeq	r0, r0, r8, asr #7
     4c0:	08001cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip}
     4c4:	00000020 	andeq	r0, r0, r0, lsr #32
     4c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4cc:	100e4101 	andne	r4, lr, r1, lsl #2
     4d0:	00070d41 	andeq	r0, r7, r1, asr #26
     4d4:	00000018 	andeq	r0, r0, r8, lsl r0
     4d8:	000003c8 	andeq	r0, r0, r8, asr #7
     4dc:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
     4e0:	00000030 	andeq	r0, r0, r0, lsr r0
     4e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     4ec:	00070d41 	andeq	r0, r7, r1, asr #26
     4f0:	00000018 	andeq	r0, r0, r8, lsl r0
     4f4:	000003c8 	andeq	r0, r0, r8, asr #7
     4f8:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     4fc:	00000020 	andeq	r0, r0, r0, lsr #32
     500:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     504:	100e4101 	andne	r4, lr, r1, lsl #2
     508:	00070d41 	andeq	r0, r7, r1, asr #26
     50c:	00000018 	andeq	r0, r0, r8, lsl r0
     510:	000003c8 	andeq	r0, r0, r8, asr #7
     514:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     518:	00000030 	andeq	r0, r0, r0, lsr r0
     51c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     520:	180e4101 	stmdane	lr, {r0, r8, lr}
     524:	00070d41 	andeq	r0, r7, r1, asr #26
     528:	00000018 	andeq	r0, r0, r8, lsl r0
     52c:	000003c8 	andeq	r0, r0, r8, asr #7
     530:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
     534:	00000020 	andeq	r0, r0, r0, lsr #32
     538:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     53c:	100e4101 	andne	r4, lr, r1, lsl #2
     540:	00070d41 	andeq	r0, r7, r1, asr #26
     544:	00000018 	andeq	r0, r0, r8, lsl r0
     548:	000003c8 	andeq	r0, r0, r8, asr #7
     54c:	08001d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip}
     550:	00000020 	andeq	r0, r0, r0, lsr #32
     554:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     558:	100e4101 	andne	r4, lr, r1, lsl #2
     55c:	00070d41 	andeq	r0, r7, r1, asr #26
     560:	00000018 	andeq	r0, r0, r8, lsl r0
     564:	000003c8 	andeq	r0, r0, r8, asr #7
     568:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
     56c:	0000003c 	andeq	r0, r0, ip, lsr r0
     570:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     574:	180e4101 	stmdane	lr, {r0, r8, lr}
     578:	00070d41 	andeq	r0, r7, r1, asr #26
     57c:	00000018 	andeq	r0, r0, r8, lsl r0
     580:	000003c8 	andeq	r0, r0, r8, asr #7
     584:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
     588:	0000003c 	andeq	r0, r0, ip, lsr r0
     58c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     590:	180e4101 	stmdane	lr, {r0, r8, lr}
     594:	00070d41 	andeq	r0, r7, r1, asr #26
     598:	00000018 	andeq	r0, r0, r8, lsl r0
     59c:	000003c8 	andeq	r0, r0, r8, asr #7
     5a0:	08001e08 	stmdaeq	r0, {r3, r9, sl, fp, ip}
     5a4:	00000038 	andeq	r0, r0, r8, lsr r0
     5a8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
     5b0:	00070d41 	andeq	r0, r7, r1, asr #26
     5b4:	00000014 	andeq	r0, r0, r4, lsl r0
     5b8:	000003c8 	andeq	r0, r0, r8, asr #7
     5bc:	08001e40 	stmdaeq	r0, {r6, r9, sl, fp, ip}
     5c0:	00000020 	andeq	r0, r0, r0, lsr #32
     5c4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     5cc:	00000018 	andeq	r0, r0, r8, lsl r0
     5d0:	000003c8 	andeq	r0, r0, r8, asr #7
     5d4:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     5d8:	00000038 	andeq	r0, r0, r8, lsr r0
     5dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5e0:	180e4101 	stmdane	lr, {r0, r8, lr}
     5e4:	00070d41 	andeq	r0, r7, r1, asr #26
     5e8:	00000018 	andeq	r0, r0, r8, lsl r0
     5ec:	000003c8 	andeq	r0, r0, r8, asr #7
     5f0:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
     5f4:	00000038 	andeq	r0, r0, r8, lsr r0
     5f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5fc:	180e4101 	stmdane	lr, {r0, r8, lr}
     600:	00070d41 	andeq	r0, r7, r1, asr #26
     604:	00000018 	andeq	r0, r0, r8, lsl r0
     608:	000003c8 	andeq	r0, r0, r8, asr #7
     60c:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
     610:	00000038 	andeq	r0, r0, r8, lsr r0
     614:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     618:	180e4101 	stmdane	lr, {r0, r8, lr}
     61c:	00070d41 	andeq	r0, r7, r1, asr #26
     620:	00000018 	andeq	r0, r0, r8, lsl r0
     624:	000003c8 	andeq	r0, r0, r8, asr #7
     628:	08001f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip}
     62c:	00000154 	andeq	r0, r0, r4, asr r1
     630:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     634:	280e4101 	stmdacs	lr, {r0, r8, lr}
     638:	00070d41 	andeq	r0, r7, r1, asr #26
     63c:	00000018 	andeq	r0, r0, r8, lsl r0
     640:	000003c8 	andeq	r0, r0, r8, asr #7
     644:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
     648:	0000005c 	andeq	r0, r0, ip, asr r0
     64c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     650:	180e4101 	stmdane	lr, {r0, r8, lr}
     654:	00070d41 	andeq	r0, r7, r1, asr #26
     658:	00000018 	andeq	r0, r0, r8, lsl r0
     65c:	000003c8 	andeq	r0, r0, r8, asr #7
     660:	080020b8 	stmdaeq	r0, {r3, r4, r5, r7, sp}
     664:	00000020 	andeq	r0, r0, r0, lsr #32
     668:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     66c:	100e4101 	andne	r4, lr, r1, lsl #2
     670:	00070d41 	andeq	r0, r7, r1, asr #26
     674:	00000018 	andeq	r0, r0, r8, lsl r0
     678:	000003c8 	andeq	r0, r0, r8, asr #7
     67c:	080020d8 	stmdaeq	r0, {r3, r4, r6, r7, sp}
     680:	00000020 	andeq	r0, r0, r0, lsr #32
     684:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     688:	100e4101 	andne	r4, lr, r1, lsl #2
     68c:	00070d41 	andeq	r0, r7, r1, asr #26
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	000003c8 	andeq	r0, r0, r8, asr #7
     698:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
     69c:	0000001c 	andeq	r0, r0, ip, lsl r0
     6a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6a4:	100e4101 	andne	r4, lr, r1, lsl #2
     6a8:	00070d41 	andeq	r0, r7, r1, asr #26
     6ac:	00000018 	andeq	r0, r0, r8, lsl r0
     6b0:	000003c8 	andeq	r0, r0, r8, asr #7
     6b4:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
     6b8:	0000003c 	andeq	r0, r0, ip, lsr r0
     6bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6c0:	180e4101 	stmdane	lr, {r0, r8, lr}
     6c4:	00070d41 	andeq	r0, r7, r1, asr #26
     6c8:	00000018 	andeq	r0, r0, r8, lsl r0
     6cc:	000003c8 	andeq	r0, r0, r8, asr #7
     6d0:	08002150 	stmdaeq	r0, {r4, r6, r8, sp}
     6d4:	00000040 	andeq	r0, r0, r0, asr #32
     6d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6dc:	180e4101 	stmdane	lr, {r0, r8, lr}
     6e0:	00070d41 	andeq	r0, r7, r1, asr #26
     6e4:	00000018 	andeq	r0, r0, r8, lsl r0
     6e8:	000003c8 	andeq	r0, r0, r8, asr #7
     6ec:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     6f0:	0000003c 	andeq	r0, r0, ip, lsr r0
     6f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6f8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6fc:	00070d41 	andeq	r0, r7, r1, asr #26
     700:	00000018 	andeq	r0, r0, r8, lsl r0
     704:	000003c8 	andeq	r0, r0, r8, asr #7
     708:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
     70c:	0000003c 	andeq	r0, r0, ip, lsr r0
     710:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     714:	180e4101 	stmdane	lr, {r0, r8, lr}
     718:	00070d41 	andeq	r0, r7, r1, asr #26
     71c:	00000018 	andeq	r0, r0, r8, lsl r0
     720:	000003c8 	andeq	r0, r0, r8, asr #7
     724:	08002208 	stmdaeq	r0, {r3, r9, sp}
     728:	0000003c 	andeq	r0, r0, ip, lsr r0
     72c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     730:	180e4101 	stmdane	lr, {r0, r8, lr}
     734:	00070d41 	andeq	r0, r7, r1, asr #26
     738:	00000018 	andeq	r0, r0, r8, lsl r0
     73c:	000003c8 	andeq	r0, r0, r8, asr #7
     740:	08002244 	stmdaeq	r0, {r2, r6, r9, sp}
     744:	0000001c 	andeq	r0, r0, ip, lsl r0
     748:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     74c:	100e4101 	andne	r4, lr, r1, lsl #2
     750:	00070d41 	andeq	r0, r7, r1, asr #26
     754:	00000018 	andeq	r0, r0, r8, lsl r0
     758:	000003c8 	andeq	r0, r0, r8, asr #7
     75c:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
     760:	0000003c 	andeq	r0, r0, ip, lsr r0
     764:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     768:	100e4101 	andne	r4, lr, r1, lsl #2
     76c:	00070d41 	andeq	r0, r7, r1, asr #26
     770:	00000018 	andeq	r0, r0, r8, lsl r0
     774:	000003c8 	andeq	r0, r0, r8, asr #7
     778:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
     77c:	0000003c 	andeq	r0, r0, ip, lsr r0
     780:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     784:	100e4101 	andne	r4, lr, r1, lsl #2
     788:	00070d41 	andeq	r0, r7, r1, asr #26
     78c:	00000018 	andeq	r0, r0, r8, lsl r0
     790:	000003c8 	andeq	r0, r0, r8, asr #7
     794:	080022d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp}
     798:	0000003c 	andeq	r0, r0, ip, lsr r0
     79c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7a0:	100e4101 	andne	r4, lr, r1, lsl #2
     7a4:	00070d41 	andeq	r0, r7, r1, asr #26
     7a8:	00000018 	andeq	r0, r0, r8, lsl r0
     7ac:	000003c8 	andeq	r0, r0, r8, asr #7
     7b0:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
     7b4:	0000003c 	andeq	r0, r0, ip, lsr r0
     7b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7bc:	100e4101 	andne	r4, lr, r1, lsl #2
     7c0:	00070d41 	andeq	r0, r7, r1, asr #26
     7c4:	00000018 	andeq	r0, r0, r8, lsl r0
     7c8:	000003c8 	andeq	r0, r0, r8, asr #7
     7cc:	08002350 	stmdaeq	r0, {r4, r6, r8, r9, sp}
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7d8:	100e4101 	andne	r4, lr, r1, lsl #2
     7dc:	00070d41 	andeq	r0, r7, r1, asr #26
     7e0:	00000018 	andeq	r0, r0, r8, lsl r0
     7e4:	000003c8 	andeq	r0, r0, r8, asr #7
     7e8:	0800238c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp}
     7ec:	0000003c 	andeq	r0, r0, ip, lsr r0
     7f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7f4:	100e4101 	andne	r4, lr, r1, lsl #2
     7f8:	00070d41 	andeq	r0, r7, r1, asr #26
     7fc:	00000018 	andeq	r0, r0, r8, lsl r0
     800:	000003c8 	andeq	r0, r0, r8, asr #7
     804:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     808:	0000003c 	andeq	r0, r0, ip, lsr r0
     80c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     810:	100e4101 	andne	r4, lr, r1, lsl #2
     814:	00070d41 	andeq	r0, r7, r1, asr #26
     818:	00000018 	andeq	r0, r0, r8, lsl r0
     81c:	000003c8 	andeq	r0, r0, r8, asr #7
     820:	08002404 	stmdaeq	r0, {r2, sl, sp}
     824:	0000003c 	andeq	r0, r0, ip, lsr r0
     828:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     82c:	100e4101 	andne	r4, lr, r1, lsl #2
     830:	00070d41 	andeq	r0, r7, r1, asr #26
     834:	00000018 	andeq	r0, r0, r8, lsl r0
     838:	000003c8 	andeq	r0, r0, r8, asr #7
     83c:	08002440 	stmdaeq	r0, {r6, sl, sp}
     840:	0000003c 	andeq	r0, r0, ip, lsr r0
     844:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     848:	100e4101 	andne	r4, lr, r1, lsl #2
     84c:	00070d41 	andeq	r0, r7, r1, asr #26
     850:	00000018 	andeq	r0, r0, r8, lsl r0
     854:	000003c8 	andeq	r0, r0, r8, asr #7
     858:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     85c:	0000003c 	andeq	r0, r0, ip, lsr r0
     860:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     864:	100e4101 	andne	r4, lr, r1, lsl #2
     868:	00070d41 	andeq	r0, r7, r1, asr #26
     86c:	00000018 	andeq	r0, r0, r8, lsl r0
     870:	000003c8 	andeq	r0, r0, r8, asr #7
     874:	080024b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, sp}
     878:	0000003c 	andeq	r0, r0, ip, lsr r0
     87c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     880:	100e4101 	andne	r4, lr, r1, lsl #2
     884:	00070d41 	andeq	r0, r7, r1, asr #26
     888:	00000018 	andeq	r0, r0, r8, lsl r0
     88c:	000003c8 	andeq	r0, r0, r8, asr #7
     890:	080024f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp}
     894:	0000003c 	andeq	r0, r0, ip, lsr r0
     898:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     89c:	100e4101 	andne	r4, lr, r1, lsl #2
     8a0:	00070d41 	andeq	r0, r7, r1, asr #26
     8a4:	00000018 	andeq	r0, r0, r8, lsl r0
     8a8:	000003c8 	andeq	r0, r0, r8, asr #7
     8ac:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
     8b0:	0000003c 	andeq	r0, r0, ip, lsr r0
     8b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8b8:	100e4101 	andne	r4, lr, r1, lsl #2
     8bc:	00070d41 	andeq	r0, r7, r1, asr #26
     8c0:	00000018 	andeq	r0, r0, r8, lsl r0
     8c4:	000003c8 	andeq	r0, r0, r8, asr #7
     8c8:	0800256c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp}
     8cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     8d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8d4:	100e4101 	andne	r4, lr, r1, lsl #2
     8d8:	00070d41 	andeq	r0, r7, r1, asr #26
     8dc:	00000018 	andeq	r0, r0, r8, lsl r0
     8e0:	000003c8 	andeq	r0, r0, r8, asr #7
     8e4:	080025a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, sp}
     8e8:	0000003c 	andeq	r0, r0, ip, lsr r0
     8ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8f0:	100e4101 	andne	r4, lr, r1, lsl #2
     8f4:	00070d41 	andeq	r0, r7, r1, asr #26
     8f8:	00000018 	andeq	r0, r0, r8, lsl r0
     8fc:	000003c8 	andeq	r0, r0, r8, asr #7
     900:	080025e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp}
     904:	00000048 	andeq	r0, r0, r8, asr #32
     908:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     90c:	100e4101 	andne	r4, lr, r1, lsl #2
     910:	00070d41 	andeq	r0, r7, r1, asr #26
     914:	00000018 	andeq	r0, r0, r8, lsl r0
     918:	000003c8 	andeq	r0, r0, r8, asr #7
     91c:	0800262c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp}
     920:	00000074 	andeq	r0, r0, r4, ror r0
     924:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     928:	200e4101 	andcs	r4, lr, r1, lsl #2
     92c:	00070d41 	andeq	r0, r7, r1, asr #26
     930:	00000014 	andeq	r0, r0, r4, lsl r0
     934:	000003c8 	andeq	r0, r0, r8, asr #7
     938:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
     93c:	0000001c 	andeq	r0, r0, ip, lsl r0
     940:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     944:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     948:	00000018 	andeq	r0, r0, r8, lsl r0
     94c:	000003c8 	andeq	r0, r0, r8, asr #7
     950:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
     954:	00000038 	andeq	r0, r0, r8, lsr r0
     958:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     95c:	180e4101 	stmdane	lr, {r0, r8, lr}
     960:	00070d41 	andeq	r0, r7, r1, asr #26
     964:	00000018 	andeq	r0, r0, r8, lsl r0
     968:	000003c8 	andeq	r0, r0, r8, asr #7
     96c:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
     970:	00000020 	andeq	r0, r0, r0, lsr #32
     974:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     978:	100e4101 	andne	r4, lr, r1, lsl #2
     97c:	00070d41 	andeq	r0, r7, r1, asr #26
     980:	0000000c 	andeq	r0, r0, ip
     984:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     988:	7c020001 	stcvc	0, cr0, [r2], {1}
     98c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     990:	0000001c 	andeq	r0, r0, ip, lsl r0
     994:	00000980 	andeq	r0, r0, r0, lsl #19
     998:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
     99c:	00000114 	andeq	r0, r0, r4, lsl r1
     9a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9a4:	41018e02 	tstmi	r1, r2, lsl #28
     9a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     9ac:	00000007 	andeq	r0, r0, r7
     9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b4:	00000980 	andeq	r0, r0, r0, lsl #19
     9b8:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
     9bc:	00000174 	andeq	r0, r0, r4, ror r1
     9c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9c4:	41018e02 	tstmi	r1, r2, lsl #28
     9c8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     9cc:	00000007 	andeq	r0, r0, r7
     9d0:	00000018 	andeq	r0, r0, r8, lsl r0
     9d4:	00000980 	andeq	r0, r0, r0, lsl #19
     9d8:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
     9dc:	00000038 	andeq	r0, r0, r8, lsr r0
     9e0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9e4:	100e4101 	andne	r4, lr, r1, lsl #2
     9e8:	00070d41 	andeq	r0, r7, r1, asr #26
     9ec:	00000018 	andeq	r0, r0, r8, lsl r0
     9f0:	00000980 	andeq	r0, r0, r0, lsl #19
     9f4:	080029d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp}
     9f8:	00000052 	andeq	r0, r0, r2, asr r0
     9fc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a00:	180e4101 	stmdane	lr, {r0, r8, lr}
     a04:	00070d41 	andeq	r0, r7, r1, asr #26
     a08:	00000018 	andeq	r0, r0, r8, lsl r0
     a0c:	00000980 	andeq	r0, r0, r0, lsl #19
     a10:	08002a28 	stmdaeq	r0, {r3, r5, r9, fp, sp}
     a14:	0000002a 	andeq	r0, r0, sl, lsr #32
     a18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a1c:	100e4101 	andne	r4, lr, r1, lsl #2
     a20:	00070d41 	andeq	r0, r7, r1, asr #26
     a24:	00000018 	andeq	r0, r0, r8, lsl r0
     a28:	00000980 	andeq	r0, r0, r0, lsl #19
     a2c:	08002a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp}
     a30:	0000003e 	andeq	r0, r0, lr, lsr r0
     a34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a38:	100e4101 	andne	r4, lr, r1, lsl #2
     a3c:	00070d41 	andeq	r0, r7, r1, asr #26
     a40:	00000018 	andeq	r0, r0, r8, lsl r0
     a44:	00000980 	andeq	r0, r0, r0, lsl #19
     a48:	08002a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp}
     a4c:	00000038 	andeq	r0, r0, r8, lsr r0
     a50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a54:	100e4101 	andne	r4, lr, r1, lsl #2
     a58:	00070d41 	andeq	r0, r7, r1, asr #26
     a5c:	00000018 	andeq	r0, r0, r8, lsl r0
     a60:	00000980 	andeq	r0, r0, r0, lsl #19
     a64:	08002acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp}
     a68:	00000042 	andeq	r0, r0, r2, asr #32
     a6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a70:	100e4101 	andne	r4, lr, r1, lsl #2
     a74:	00070d41 	andeq	r0, r7, r1, asr #26
     a78:	00000018 	andeq	r0, r0, r8, lsl r0
     a7c:	00000980 	andeq	r0, r0, r0, lsl #19
     a80:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
     a84:	0000003e 	andeq	r0, r0, lr, lsr r0
     a88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a8c:	100e4101 	andne	r4, lr, r1, lsl #2
     a90:	00070d41 	andeq	r0, r7, r1, asr #26
     a94:	00000018 	andeq	r0, r0, r8, lsl r0
     a98:	00000980 	andeq	r0, r0, r0, lsl #19
     a9c:	08002b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp}
     aa0:	00000022 	andeq	r0, r0, r2, lsr #32
     aa4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     aa8:	100e4101 	andne	r4, lr, r1, lsl #2
     aac:	00070d41 	andeq	r0, r7, r1, asr #26
     ab0:	00000018 	andeq	r0, r0, r8, lsl r0
     ab4:	00000980 	andeq	r0, r0, r0, lsl #19
     ab8:	08002b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, sp}
     abc:	00000020 	andeq	r0, r0, r0, lsr #32
     ac0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ac4:	100e4101 	andne	r4, lr, r1, lsl #2
     ac8:	00070d41 	andeq	r0, r7, r1, asr #26
     acc:	00000018 	andeq	r0, r0, r8, lsl r0
     ad0:	00000980 	andeq	r0, r0, r0, lsl #19
     ad4:	08002b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp}
     ad8:	00000038 	andeq	r0, r0, r8, lsr r0
     adc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ae0:	100e4101 	andne	r4, lr, r1, lsl #2
     ae4:	00070d41 	andeq	r0, r7, r1, asr #26
     ae8:	00000018 	andeq	r0, r0, r8, lsl r0
     aec:	00000980 	andeq	r0, r0, r0, lsl #19
     af0:	08002bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp}
     af4:	0000003e 	andeq	r0, r0, lr, lsr r0
     af8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     afc:	100e4101 	andne	r4, lr, r1, lsl #2
     b00:	00070d41 	andeq	r0, r7, r1, asr #26
     b04:	00000018 	andeq	r0, r0, r8, lsl r0
     b08:	00000980 	andeq	r0, r0, r0, lsl #19
     b0c:	08002c0c 	stmdaeq	r0, {r2, r3, sl, fp, sp}
     b10:	00000036 	andeq	r0, r0, r6, lsr r0
     b14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b18:	100e4101 	andne	r4, lr, r1, lsl #2
     b1c:	00070d41 	andeq	r0, r7, r1, asr #26
     b20:	00000018 	andeq	r0, r0, r8, lsl r0
     b24:	00000980 	andeq	r0, r0, r0, lsl #19
     b28:	08002c44 	stmdaeq	r0, {r2, r6, sl, fp, sp}
     b2c:	00000036 	andeq	r0, r0, r6, lsr r0
     b30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b34:	100e4101 	andne	r4, lr, r1, lsl #2
     b38:	00070d41 	andeq	r0, r7, r1, asr #26
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
     b40:	00000980 	andeq	r0, r0, r0, lsl #19
     b44:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
     b48:	0000003e 	andeq	r0, r0, lr, lsr r0
     b4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b50:	100e4101 	andne	r4, lr, r1, lsl #2
     b54:	00070d41 	andeq	r0, r7, r1, asr #26
     b58:	00000018 	andeq	r0, r0, r8, lsl r0
     b5c:	00000980 	andeq	r0, r0, r0, lsl #19
     b60:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
     b64:	00000022 	andeq	r0, r0, r2, lsr #32
     b68:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b6c:	100e4101 	andne	r4, lr, r1, lsl #2
     b70:	00070d41 	andeq	r0, r7, r1, asr #26
     b74:	00000018 	andeq	r0, r0, r8, lsl r0
     b78:	00000980 	andeq	r0, r0, r0, lsl #19
     b7c:	08002ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, sp}
     b80:	0000003e 	andeq	r0, r0, lr, lsr r0
     b84:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b88:	100e4101 	andne	r4, lr, r1, lsl #2
     b8c:	00070d41 	andeq	r0, r7, r1, asr #26
     b90:	00000018 	andeq	r0, r0, r8, lsl r0
     b94:	00000980 	andeq	r0, r0, r0, lsl #19
     b98:	08002d20 	stmdaeq	r0, {r5, r8, sl, fp, sp}
     b9c:	0000003a 	andeq	r0, r0, sl, lsr r0
     ba0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ba4:	100e4101 	andne	r4, lr, r1, lsl #2
     ba8:	00070d41 	andeq	r0, r7, r1, asr #26
     bac:	00000018 	andeq	r0, r0, r8, lsl r0
     bb0:	00000980 	andeq	r0, r0, r0, lsl #19
     bb4:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
     bb8:	0000003e 	andeq	r0, r0, lr, lsr r0
     bbc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bc0:	100e4101 	andne	r4, lr, r1, lsl #2
     bc4:	00070d41 	andeq	r0, r7, r1, asr #26
     bc8:	00000018 	andeq	r0, r0, r8, lsl r0
     bcc:	00000980 	andeq	r0, r0, r0, lsl #19
     bd0:	08002d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp}
     bd4:	0000003e 	andeq	r0, r0, lr, lsr r0
     bd8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bdc:	100e4101 	andne	r4, lr, r1, lsl #2
     be0:	00070d41 	andeq	r0, r7, r1, asr #26
     be4:	00000018 	andeq	r0, r0, r8, lsl r0
     be8:	00000980 	andeq	r0, r0, r0, lsl #19
     bec:	08002ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, sp}
     bf0:	00000036 	andeq	r0, r0, r6, lsr r0
     bf4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bf8:	100e4101 	andne	r4, lr, r1, lsl #2
     bfc:	00070d41 	andeq	r0, r7, r1, asr #26
     c00:	00000018 	andeq	r0, r0, r8, lsl r0
     c04:	00000980 	andeq	r0, r0, r0, lsl #19
     c08:	08002e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, sp}
     c0c:	0000003e 	andeq	r0, r0, lr, lsr r0
     c10:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c14:	100e4101 	andne	r4, lr, r1, lsl #2
     c18:	00070d41 	andeq	r0, r7, r1, asr #26
     c1c:	00000018 	andeq	r0, r0, r8, lsl r0
     c20:	00000980 	andeq	r0, r0, r0, lsl #19
     c24:	08002e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, sp}
     c28:	00000046 	andeq	r0, r0, r6, asr #32
     c2c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c30:	100e4101 	andne	r4, lr, r1, lsl #2
     c34:	00070d41 	andeq	r0, r7, r1, asr #26
     c38:	00000018 	andeq	r0, r0, r8, lsl r0
     c3c:	00000980 	andeq	r0, r0, r0, lsl #19
     c40:	08002e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp}
     c44:	0000008e 	andeq	r0, r0, lr, lsl #1
     c48:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c4c:	200e4101 	andcs	r4, lr, r1, lsl #2
     c50:	00070d41 	andeq	r0, r7, r1, asr #26
     c54:	00000018 	andeq	r0, r0, r8, lsl r0
     c58:	00000980 	andeq	r0, r0, r0, lsl #19
     c5c:	08002f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, sp}
     c60:	00000038 	andeq	r0, r0, r8, lsr r0
     c64:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c68:	180e4101 	stmdane	lr, {r0, r8, lr}
     c6c:	00070d41 	andeq	r0, r7, r1, asr #26
     c70:	00000018 	andeq	r0, r0, r8, lsl r0
     c74:	00000980 	andeq	r0, r0, r0, lsl #19
     c78:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
     c7c:	00000020 	andeq	r0, r0, r0, lsr #32
     c80:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c84:	100e4101 	andne	r4, lr, r1, lsl #2
     c88:	00070d41 	andeq	r0, r7, r1, asr #26
     c8c:	00000018 	andeq	r0, r0, r8, lsl r0
     c90:	00000980 	andeq	r0, r0, r0, lsl #19
     c94:	08002f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, sp}
     c98:	000000ae 	andeq	r0, r0, lr, lsr #1
     c9c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ca0:	200e4101 	andcs	r4, lr, r1, lsl #2
     ca4:	00070d41 	andeq	r0, r7, r1, asr #26
     ca8:	00000018 	andeq	r0, r0, r8, lsl r0
     cac:	00000980 	andeq	r0, r0, r0, lsl #19
     cb0:	08003034 	stmdaeq	r0, {r2, r4, r5, ip, sp}
     cb4:	00000038 	andeq	r0, r0, r8, lsr r0
     cb8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     cbc:	180e4101 	stmdane	lr, {r0, r8, lr}
     cc0:	00070d41 	andeq	r0, r7, r1, asr #26
     cc4:	0000000c 	andeq	r0, r0, ip
     cc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ccc:	7c020001 	stcvc	0, cr0, [r2], {1}
     cd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cd4:	00000018 	andeq	r0, r0, r8, lsl r0
     cd8:	00000cc4 	andeq	r0, r0, r4, asr #25
     cdc:	0800306c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp}
     ce0:	0000001a 	andeq	r0, r0, sl, lsl r0
     ce4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ce8:	41018e02 	tstmi	r1, r2, lsl #28
     cec:	0000070d 	andeq	r0, r0, sp, lsl #14
     cf0:	00000018 	andeq	r0, r0, r8, lsl r0
     cf4:	00000cc4 	andeq	r0, r0, r4, asr #25
     cf8:	08003088 	stmdaeq	r0, {r3, r7, ip, sp}
     cfc:	00000020 	andeq	r0, r0, r0, lsr #32
     d00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d04:	100e4101 	andne	r4, lr, r1, lsl #2
     d08:	00070d41 	andeq	r0, r7, r1, asr #26
     d0c:	00000018 	andeq	r0, r0, r8, lsl r0
     d10:	00000cc4 	andeq	r0, r0, r4, asr #25
     d14:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
     d18:	00000020 	andeq	r0, r0, r0, lsr #32
     d1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d20:	100e4101 	andne	r4, lr, r1, lsl #2
     d24:	00070d41 	andeq	r0, r7, r1, asr #26
     d28:	0000001c 	andeq	r0, r0, ip, lsl r0
     d2c:	00000cc4 	andeq	r0, r0, r4, asr #25
     d30:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
     d34:	0000007c 	andeq	r0, r0, ip, ror r0
     d38:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d3c:	41018702 	tstmi	r1, r2, lsl #14
     d40:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d44:	00000007 	andeq	r0, r0, r7
     d48:	00000018 	andeq	r0, r0, r8, lsl r0
     d4c:	00000cc4 	andeq	r0, r0, r4, asr #25
     d50:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
     d54:	0000001c 	andeq	r0, r0, ip, lsl r0
     d58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d5c:	100e4101 	andne	r4, lr, r1, lsl #2
     d60:	00070d41 	andeq	r0, r7, r1, asr #26
     d64:	00000018 	andeq	r0, r0, r8, lsl r0
     d68:	00000cc4 	andeq	r0, r0, r4, asr #25
     d6c:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
     d70:	00000020 	andeq	r0, r0, r0, lsr #32
     d74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d78:	100e4101 	andne	r4, lr, r1, lsl #2
     d7c:	00070d41 	andeq	r0, r7, r1, asr #26
     d80:	00000018 	andeq	r0, r0, r8, lsl r0
     d84:	00000cc4 	andeq	r0, r0, r4, asr #25
     d88:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     d8c:	00000034 	andeq	r0, r0, r4, lsr r0
     d90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d94:	100e4101 	andne	r4, lr, r1, lsl #2
     d98:	00070d41 	andeq	r0, r7, r1, asr #26
     d9c:	0000000c 	andeq	r0, r0, ip
     da0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     da4:	7c020001 	stcvc	0, cr0, [r2], {1}
     da8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dac:	0000001c 	andeq	r0, r0, ip, lsl r0
     db0:	00000d9c 	muleq	r0, ip, sp
     db4:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
     db8:	00000074 	andeq	r0, r0, r4, ror r0
     dbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     dc0:	41018e02 	tstmi	r1, r2, lsl #28
     dc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     dc8:	00000007 	andeq	r0, r0, r7
     dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd0:	00000d9c 	muleq	r0, ip, sp
     dd4:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
     dd8:	00000184 	andeq	r0, r0, r4, lsl #3
     ddc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     de0:	41018e02 	tstmi	r1, r2, lsl #28
     de4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     de8:	00000007 	andeq	r0, r0, r7
     dec:	00000018 	andeq	r0, r0, r8, lsl r0
     df0:	00000d9c 	muleq	r0, ip, sp
     df4:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     df8:	0000003c 	andeq	r0, r0, ip, lsr r0
     dfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e00:	100e4101 	andne	r4, lr, r1, lsl #2
     e04:	00070d41 	andeq	r0, r7, r1, asr #26
     e08:	00000018 	andeq	r0, r0, r8, lsl r0
     e0c:	00000d9c 	muleq	r0, ip, sp
     e10:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
     e14:	0000003e 	andeq	r0, r0, lr, lsr r0
     e18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e1c:	100e4101 	andne	r4, lr, r1, lsl #2
     e20:	00070d41 	andeq	r0, r7, r1, asr #26
     e24:	00000018 	andeq	r0, r0, r8, lsl r0
     e28:	00000d9c 	muleq	r0, ip, sp
     e2c:	08003428 	stmdaeq	r0, {r3, r5, sl, ip, sp}
     e30:	0000003e 	andeq	r0, r0, lr, lsr r0
     e34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e38:	100e4101 	andne	r4, lr, r1, lsl #2
     e3c:	00070d41 	andeq	r0, r7, r1, asr #26
     e40:	00000018 	andeq	r0, r0, r8, lsl r0
     e44:	00000d9c 	muleq	r0, ip, sp
     e48:	08003468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp}
     e4c:	0000003e 	andeq	r0, r0, lr, lsr r0
     e50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e54:	180e4101 	stmdane	lr, {r0, r8, lr}
     e58:	00070d41 	andeq	r0, r7, r1, asr #26
     e5c:	00000018 	andeq	r0, r0, r8, lsl r0
     e60:	00000d9c 	muleq	r0, ip, sp
     e64:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     e68:	0000003e 	andeq	r0, r0, lr, lsr r0
     e6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e70:	100e4101 	andne	r4, lr, r1, lsl #2
     e74:	00070d41 	andeq	r0, r7, r1, asr #26
     e78:	00000018 	andeq	r0, r0, r8, lsl r0
     e7c:	00000d9c 	muleq	r0, ip, sp
     e80:	080034e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp}
     e84:	0000003e 	andeq	r0, r0, lr, lsr r0
     e88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e8c:	100e4101 	andne	r4, lr, r1, lsl #2
     e90:	00070d41 	andeq	r0, r7, r1, asr #26
     e94:	00000018 	andeq	r0, r0, r8, lsl r0
     e98:	00000d9c 	muleq	r0, ip, sp
     e9c:	08003528 	stmdaeq	r0, {r3, r5, r8, sl, ip, sp}
     ea0:	0000003a 	andeq	r0, r0, sl, lsr r0
     ea4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ea8:	100e4101 	andne	r4, lr, r1, lsl #2
     eac:	00070d41 	andeq	r0, r7, r1, asr #26
     eb0:	00000018 	andeq	r0, r0, r8, lsl r0
     eb4:	00000d9c 	muleq	r0, ip, sp
     eb8:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
     ebc:	0000003e 	andeq	r0, r0, lr, lsr r0
     ec0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ec4:	100e4101 	andne	r4, lr, r1, lsl #2
     ec8:	00070d41 	andeq	r0, r7, r1, asr #26
     ecc:	00000018 	andeq	r0, r0, r8, lsl r0
     ed0:	00000d9c 	muleq	r0, ip, sp
     ed4:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
     ed8:	00000040 	andeq	r0, r0, r0, asr #32
     edc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ee0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ee4:	00070d41 	andeq	r0, r7, r1, asr #26
     ee8:	00000018 	andeq	r0, r0, r8, lsl r0
     eec:	00000d9c 	muleq	r0, ip, sp
     ef0:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     ef4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ef8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     efc:	100e4101 	andne	r4, lr, r1, lsl #2
     f00:	00070d41 	andeq	r0, r7, r1, asr #26
     f04:	00000018 	andeq	r0, r0, r8, lsl r0
     f08:	00000d9c 	muleq	r0, ip, sp
     f0c:	08003624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp}
     f10:	0000003e 	andeq	r0, r0, lr, lsr r0
     f14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f18:	100e4101 	andne	r4, lr, r1, lsl #2
     f1c:	00070d41 	andeq	r0, r7, r1, asr #26
     f20:	00000018 	andeq	r0, r0, r8, lsl r0
     f24:	00000d9c 	muleq	r0, ip, sp
     f28:	08003664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip, sp}
     f2c:	00000042 	andeq	r0, r0, r2, asr #32
     f30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f34:	100e4101 	andne	r4, lr, r1, lsl #2
     f38:	00070d41 	andeq	r0, r7, r1, asr #26
     f3c:	00000018 	andeq	r0, r0, r8, lsl r0
     f40:	00000d9c 	muleq	r0, ip, sp
     f44:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
     f48:	0000003e 	andeq	r0, r0, lr, lsr r0
     f4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f50:	100e4101 	andne	r4, lr, r1, lsl #2
     f54:	00070d41 	andeq	r0, r7, r1, asr #26
     f58:	00000018 	andeq	r0, r0, r8, lsl r0
     f5c:	00000d9c 	muleq	r0, ip, sp
     f60:	080036e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp}
     f64:	00000040 	andeq	r0, r0, r0, asr #32
     f68:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f6c:	100e4101 	andne	r4, lr, r1, lsl #2
     f70:	00070d41 	andeq	r0, r7, r1, asr #26
     f74:	00000018 	andeq	r0, r0, r8, lsl r0
     f78:	00000d9c 	muleq	r0, ip, sp
     f7c:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     f80:	00000040 	andeq	r0, r0, r0, asr #32
     f84:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f88:	100e4101 	andne	r4, lr, r1, lsl #2
     f8c:	00070d41 	andeq	r0, r7, r1, asr #26
     f90:	00000018 	andeq	r0, r0, r8, lsl r0
     f94:	00000d9c 	muleq	r0, ip, sp
     f98:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
     f9c:	00000040 	andeq	r0, r0, r0, asr #32
     fa0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fa4:	100e4101 	andne	r4, lr, r1, lsl #2
     fa8:	00070d41 	andeq	r0, r7, r1, asr #26
     fac:	00000018 	andeq	r0, r0, r8, lsl r0
     fb0:	00000d9c 	muleq	r0, ip, sp
     fb4:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     fb8:	0000003e 	andeq	r0, r0, lr, lsr r0
     fbc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fc0:	100e4101 	andne	r4, lr, r1, lsl #2
     fc4:	00070d41 	andeq	r0, r7, r1, asr #26
     fc8:	00000018 	andeq	r0, r0, r8, lsl r0
     fcc:	00000d9c 	muleq	r0, ip, sp
     fd0:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
     fd4:	0000001e 	andeq	r0, r0, lr, lsl r0
     fd8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fdc:	100e4101 	andne	r4, lr, r1, lsl #2
     fe0:	00070d41 	andeq	r0, r7, r1, asr #26
     fe4:	00000018 	andeq	r0, r0, r8, lsl r0
     fe8:	00000d9c 	muleq	r0, ip, sp
     fec:	08003808 	stmdaeq	r0, {r3, fp, ip, sp}
     ff0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ff8:	100e4101 	andne	r4, lr, r1, lsl #2
     ffc:	00070d41 	andeq	r0, r7, r1, asr #26
    1000:	00000018 	andeq	r0, r0, r8, lsl r0
    1004:	00000d9c 	muleq	r0, ip, sp
    1008:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
    100c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1010:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1014:	100e4101 	andne	r4, lr, r1, lsl #2
    1018:	00070d41 	andeq	r0, r7, r1, asr #26
    101c:	00000018 	andeq	r0, r0, r8, lsl r0
    1020:	00000d9c 	muleq	r0, ip, sp
    1024:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    1028:	00000040 	andeq	r0, r0, r0, asr #32
    102c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1030:	100e4101 	andne	r4, lr, r1, lsl #2
    1034:	00070d41 	andeq	r0, r7, r1, asr #26
    1038:	00000018 	andeq	r0, r0, r8, lsl r0
    103c:	00000d9c 	muleq	r0, ip, sp
    1040:	080038a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, sp}
    1044:	0000003e 	andeq	r0, r0, lr, lsr r0
    1048:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    104c:	100e4101 	andne	r4, lr, r1, lsl #2
    1050:	00070d41 	andeq	r0, r7, r1, asr #26
    1054:	00000018 	andeq	r0, r0, r8, lsl r0
    1058:	00000d9c 	muleq	r0, ip, sp
    105c:	080038e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp}
    1060:	00000020 	andeq	r0, r0, r0, lsr #32
    1064:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1068:	100e4101 	andne	r4, lr, r1, lsl #2
    106c:	00070d41 	andeq	r0, r7, r1, asr #26
    1070:	00000018 	andeq	r0, r0, r8, lsl r0
    1074:	00000d9c 	muleq	r0, ip, sp
    1078:	08003904 	stmdaeq	r0, {r2, r8, fp, ip, sp}
    107c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1080:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1084:	100e4101 	andne	r4, lr, r1, lsl #2
    1088:	00070d41 	andeq	r0, r7, r1, asr #26
    108c:	00000018 	andeq	r0, r0, r8, lsl r0
    1090:	00000d9c 	muleq	r0, ip, sp
    1094:	08003944 	stmdaeq	r0, {r2, r6, r8, fp, ip, sp}
    1098:	0000003e 	andeq	r0, r0, lr, lsr r0
    109c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10a0:	100e4101 	andne	r4, lr, r1, lsl #2
    10a4:	00070d41 	andeq	r0, r7, r1, asr #26
    10a8:	00000018 	andeq	r0, r0, r8, lsl r0
    10ac:	00000d9c 	muleq	r0, ip, sp
    10b0:	08003984 	stmdaeq	r0, {r2, r7, r8, fp, ip, sp}
    10b4:	0000002e 	andeq	r0, r0, lr, lsr #32
    10b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10bc:	180e4101 	stmdane	lr, {r0, r8, lr}
    10c0:	00070d41 	andeq	r0, r7, r1, asr #26
    10c4:	00000018 	andeq	r0, r0, r8, lsl r0
    10c8:	00000d9c 	muleq	r0, ip, sp
    10cc:	080039b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, sp}
    10d0:	00000046 	andeq	r0, r0, r6, asr #32
    10d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10d8:	100e4101 	andne	r4, lr, r1, lsl #2
    10dc:	00070d41 	andeq	r0, r7, r1, asr #26
    10e0:	00000018 	andeq	r0, r0, r8, lsl r0
    10e4:	00000d9c 	muleq	r0, ip, sp
    10e8:	080039fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
    10ec:	00000060 	andeq	r0, r0, r0, rrx
    10f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10f4:	200e4101 	andcs	r4, lr, r1, lsl #2
    10f8:	00070d41 	andeq	r0, r7, r1, asr #26
    10fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1100:	00000d9c 	muleq	r0, ip, sp
    1104:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
    1108:	00000044 	andeq	r0, r0, r4, asr #32
    110c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1110:	200e4101 	andcs	r4, lr, r1, lsl #2
    1114:	00070d41 	andeq	r0, r7, r1, asr #26
    1118:	00000018 	andeq	r0, r0, r8, lsl r0
    111c:	00000d9c 	muleq	r0, ip, sp
    1120:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
    1124:	00000066 	andeq	r0, r0, r6, rrx
    1128:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    112c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1130:	00070d41 	andeq	r0, r7, r1, asr #26
    1134:	00000018 	andeq	r0, r0, r8, lsl r0
    1138:	00000d9c 	muleq	r0, ip, sp
    113c:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
    1140:	0000002c 	andeq	r0, r0, ip, lsr #32
    1144:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1148:	180e4101 	stmdane	lr, {r0, r8, lr}
    114c:	00070d41 	andeq	r0, r7, r1, asr #26
    1150:	00000018 	andeq	r0, r0, r8, lsl r0
    1154:	00000d9c 	muleq	r0, ip, sp
    1158:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
    115c:	0000005a 	andeq	r0, r0, sl, asr r0
    1160:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1164:	180e4101 	stmdane	lr, {r0, r8, lr}
    1168:	00070d41 	andeq	r0, r7, r1, asr #26
    116c:	00000018 	andeq	r0, r0, r8, lsl r0
    1170:	00000d9c 	muleq	r0, ip, sp
    1174:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
    1178:	0000002c 	andeq	r0, r0, ip, lsr #32
    117c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1180:	180e4101 	stmdane	lr, {r0, r8, lr}
    1184:	00070d41 	andeq	r0, r7, r1, asr #26
    1188:	0000000c 	andeq	r0, r0, ip
    118c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1190:	7c020001 	stcvc	0, cr0, [r2], {1}
    1194:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1198:	00000018 	andeq	r0, r0, r8, lsl r0
    119c:	00001188 	andeq	r1, r0, r8, lsl #3
    11a0:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
    11a4:	000001a4 	andeq	r0, r0, r4, lsr #3
    11a8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11ac:	100e4101 	andne	r4, lr, r1, lsl #2
    11b0:	00070d41 	andeq	r0, r7, r1, asr #26
    11b4:	00000018 	andeq	r0, r0, r8, lsl r0
    11b8:	00001188 	andeq	r1, r0, r8, lsl #3
    11bc:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
    11c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    11c4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11c8:	180e4101 	stmdane	lr, {r0, r8, lr}
    11cc:	00070d41 	andeq	r0, r7, r1, asr #26
    11d0:	00000018 	andeq	r0, r0, r8, lsl r0
    11d4:	00001188 	andeq	r1, r0, r8, lsl #3
    11d8:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
    11dc:	0000006c 	andeq	r0, r0, ip, rrx
    11e0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11e4:	100e4101 	andne	r4, lr, r1, lsl #2
    11e8:	00070d41 	andeq	r0, r7, r1, asr #26
    11ec:	00000018 	andeq	r0, r0, r8, lsl r0
    11f0:	00001188 	andeq	r1, r0, r8, lsl #3
    11f4:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
    11f8:	00000036 	andeq	r0, r0, r6, lsr r0
    11fc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1200:	100e4101 	andne	r4, lr, r1, lsl #2
    1204:	00070d41 	andeq	r0, r7, r1, asr #26
    1208:	00000018 	andeq	r0, r0, r8, lsl r0
    120c:	00001188 	andeq	r1, r0, r8, lsl #3
    1210:	08003eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp}
    1214:	00000034 	andeq	r0, r0, r4, lsr r0
    1218:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    121c:	100e4101 	andne	r4, lr, r1, lsl #2
    1220:	00070d41 	andeq	r0, r7, r1, asr #26
    1224:	00000018 	andeq	r0, r0, r8, lsl r0
    1228:	00001188 	andeq	r1, r0, r8, lsl #3
    122c:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
    1230:	00000034 	andeq	r0, r0, r4, lsr r0
    1234:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1238:	100e4101 	andne	r4, lr, r1, lsl #2
    123c:	00070d41 	andeq	r0, r7, r1, asr #26
    1240:	00000018 	andeq	r0, r0, r8, lsl r0
    1244:	00001188 	andeq	r1, r0, r8, lsl #3
    1248:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
    124c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1250:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1254:	100e4101 	andne	r4, lr, r1, lsl #2
    1258:	00070d41 	andeq	r0, r7, r1, asr #26
    125c:	00000018 	andeq	r0, r0, r8, lsl r0
    1260:	00001188 	andeq	r1, r0, r8, lsl #3
    1264:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
    1268:	0000001a 	andeq	r0, r0, sl, lsl r0
    126c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1270:	100e4101 	andne	r4, lr, r1, lsl #2
    1274:	00070d41 	andeq	r0, r7, r1, asr #26
    1278:	00000018 	andeq	r0, r0, r8, lsl r0
    127c:	00001188 	andeq	r1, r0, r8, lsl #3
    1280:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    1284:	0000003c 	andeq	r0, r0, ip, lsr r0
    1288:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    128c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1290:	00070d41 	andeq	r0, r7, r1, asr #26
    1294:	00000018 	andeq	r0, r0, r8, lsl r0
    1298:	00001188 	andeq	r1, r0, r8, lsl #3
    129c:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
    12a0:	00000036 	andeq	r0, r0, r6, lsr r0
    12a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12a8:	100e4101 	andne	r4, lr, r1, lsl #2
    12ac:	00070d41 	andeq	r0, r7, r1, asr #26
    12b0:	00000018 	andeq	r0, r0, r8, lsl r0
    12b4:	00001188 	andeq	r1, r0, r8, lsl #3
    12b8:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
    12bc:	0000002a 	andeq	r0, r0, sl, lsr #32
    12c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12c4:	180e4101 	stmdane	lr, {r0, r8, lr}
    12c8:	00070d41 	andeq	r0, r7, r1, asr #26
    12cc:	00000018 	andeq	r0, r0, r8, lsl r0
    12d0:	00001188 	andeq	r1, r0, r8, lsl #3
    12d4:	08003ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    12d8:	00000030 	andeq	r0, r0, r0, lsr r0
    12dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    12e4:	00070d41 	andeq	r0, r7, r1, asr #26
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ec:	00001188 	andeq	r1, r0, r8, lsl #3
    12f0:	08004020 	stmdaeq	r0, {r5, lr}
    12f4:	00000030 	andeq	r0, r0, r0, lsr r0
    12f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1300:	00070d41 	andeq	r0, r7, r1, asr #26
    1304:	00000018 	andeq	r0, r0, r8, lsl r0
    1308:	00001188 	andeq	r1, r0, r8, lsl #3
    130c:	08004050 	stmdaeq	r0, {r4, r6, lr}
    1310:	00000024 	andeq	r0, r0, r4, lsr #32
    1314:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1318:	180e4101 	stmdane	lr, {r0, r8, lr}
    131c:	00070d41 	andeq	r0, r7, r1, asr #26
    1320:	00000018 	andeq	r0, r0, r8, lsl r0
    1324:	00001188 	andeq	r1, r0, r8, lsl #3
    1328:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    132c:	00000078 	andeq	r0, r0, r8, ror r0
    1330:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1334:	200e4101 	andcs	r4, lr, r1, lsl #2
    1338:	00070d41 	andeq	r0, r7, r1, asr #26
    133c:	00000018 	andeq	r0, r0, r8, lsl r0
    1340:	00001188 	andeq	r1, r0, r8, lsl #3
    1344:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
    1348:	0000005c 	andeq	r0, r0, ip, asr r0
    134c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1350:	180e4101 	stmdane	lr, {r0, r8, lr}
    1354:	00070d41 	andeq	r0, r7, r1, asr #26
    1358:	00000018 	andeq	r0, r0, r8, lsl r0
    135c:	00001188 	andeq	r1, r0, r8, lsl #3
    1360:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
    1364:	00000072 	andeq	r0, r0, r2, ror r0
    1368:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    136c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1370:	00070d41 	andeq	r0, r7, r1, asr #26
    1374:	00000018 	andeq	r0, r0, r8, lsl r0
    1378:	00001188 	andeq	r1, r0, r8, lsl #3
    137c:	080041bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, lr}
    1380:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1384:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1388:	200e4101 	andcs	r4, lr, r1, lsl #2
    138c:	00070d41 	andeq	r0, r7, r1, asr #26
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
    1394:	00001188 	andeq	r1, r0, r8, lsl #3
    1398:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
    139c:	0000005c 	andeq	r0, r0, ip, asr r0
    13a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13a4:	180e4101 	stmdane	lr, {r0, r8, lr}
    13a8:	00070d41 	andeq	r0, r7, r1, asr #26
    13ac:	0000000c 	andeq	r0, r0, ip
    13b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13b4:	7c020001 	stcvc	0, cr0, [r2], {1}
    13b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    13c0:	000013ac 	andeq	r1, r0, ip, lsr #7
    13c4:	080042c8 	stmdaeq	r0, {r3, r6, r7, r9, lr}
    13c8:	000000d8 	ldrdeq	r0, [r0], -r8
    13cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13d0:	41018e02 	tstmi	r1, r2, lsl #28
    13d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    13d8:	00000007 	andeq	r0, r0, r7
    13dc:	00000018 	andeq	r0, r0, r8, lsl r0
    13e0:	000013ac 	andeq	r1, r0, ip, lsr #7
    13e4:	080043a0 	stmdaeq	r0, {r5, r7, r8, r9, lr}
    13e8:	00000086 	andeq	r0, r0, r6, lsl #1
    13ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13f0:	180e4101 	stmdane	lr, {r0, r8, lr}
    13f4:	00070d41 	andeq	r0, r7, r1, asr #26
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
    13fc:	000013ac 	andeq	r1, r0, ip, lsr #7
    1400:	08004428 	stmdaeq	r0, {r3, r5, sl, lr}
    1404:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1408:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    140c:	300e4101 	andcc	r4, lr, r1, lsl #2
    1410:	00070d41 	andeq	r0, r7, r1, asr #26
    1414:	00000018 	andeq	r0, r0, r8, lsl r0
    1418:	000013ac 	andeq	r1, r0, ip, lsr #7
    141c:	080045d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, lr}
    1420:	00000048 	andeq	r0, r0, r8, asr #32
    1424:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1428:	100e4101 	andne	r4, lr, r1, lsl #2
    142c:	00070d41 	andeq	r0, r7, r1, asr #26
    1430:	00000018 	andeq	r0, r0, r8, lsl r0
    1434:	000013ac 	andeq	r1, r0, ip, lsr #7
    1438:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    143c:	00000036 	andeq	r0, r0, r6, lsr r0
    1440:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1444:	100e4101 	andne	r4, lr, r1, lsl #2
    1448:	00070d41 	andeq	r0, r7, r1, asr #26
    144c:	00000018 	andeq	r0, r0, r8, lsl r0
    1450:	000013ac 	andeq	r1, r0, ip, lsr #7
    1454:	08004658 	stmdaeq	r0, {r3, r4, r6, r9, sl, lr}
    1458:	0000003e 	andeq	r0, r0, lr, lsr r0
    145c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1460:	100e4101 	andne	r4, lr, r1, lsl #2
    1464:	00070d41 	andeq	r0, r7, r1, asr #26
    1468:	00000018 	andeq	r0, r0, r8, lsl r0
    146c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1470:	08004698 	stmdaeq	r0, {r3, r4, r7, r9, sl, lr}
    1474:	0000003e 	andeq	r0, r0, lr, lsr r0
    1478:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    147c:	100e4101 	andne	r4, lr, r1, lsl #2
    1480:	00070d41 	andeq	r0, r7, r1, asr #26
    1484:	00000018 	andeq	r0, r0, r8, lsl r0
    1488:	000013ac 	andeq	r1, r0, ip, lsr #7
    148c:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
    1490:	00000036 	andeq	r0, r0, r6, lsr r0
    1494:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1498:	100e4101 	andne	r4, lr, r1, lsl #2
    149c:	00070d41 	andeq	r0, r7, r1, asr #26
    14a0:	00000018 	andeq	r0, r0, r8, lsl r0
    14a4:	000013ac 	andeq	r1, r0, ip, lsr #7
    14a8:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
    14ac:	00000040 	andeq	r0, r0, r0, asr #32
    14b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14b4:	100e4101 	andne	r4, lr, r1, lsl #2
    14b8:	00070d41 	andeq	r0, r7, r1, asr #26
    14bc:	00000018 	andeq	r0, r0, r8, lsl r0
    14c0:	000013ac 	andeq	r1, r0, ip, lsr #7
    14c4:	08004750 	stmdaeq	r0, {r4, r6, r8, r9, sl, lr}
    14c8:	00000042 	andeq	r0, r0, r2, asr #32
    14cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14d0:	100e4101 	andne	r4, lr, r1, lsl #2
    14d4:	00070d41 	andeq	r0, r7, r1, asr #26
    14d8:	00000018 	andeq	r0, r0, r8, lsl r0
    14dc:	000013ac 	andeq	r1, r0, ip, lsr #7
    14e0:	08004794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, lr}
    14e4:	0000003e 	andeq	r0, r0, lr, lsr r0
    14e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14ec:	100e4101 	andne	r4, lr, r1, lsl #2
    14f0:	00070d41 	andeq	r0, r7, r1, asr #26
    14f4:	00000018 	andeq	r0, r0, r8, lsl r0
    14f8:	000013ac 	andeq	r1, r0, ip, lsr #7
    14fc:	080047d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, lr}
    1500:	0000003e 	andeq	r0, r0, lr, lsr r0
    1504:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1508:	100e4101 	andne	r4, lr, r1, lsl #2
    150c:	00070d41 	andeq	r0, r7, r1, asr #26
    1510:	00000018 	andeq	r0, r0, r8, lsl r0
    1514:	000013ac 	andeq	r1, r0, ip, lsr #7
    1518:	08004814 	stmdaeq	r0, {r2, r4, fp, lr}
    151c:	0000009a 	muleq	r0, sl, r0
    1520:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1524:	180e4101 	stmdane	lr, {r0, r8, lr}
    1528:	00070d41 	andeq	r0, r7, r1, asr #26
    152c:	00000018 	andeq	r0, r0, r8, lsl r0
    1530:	000013ac 	andeq	r1, r0, ip, lsr #7
    1534:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    1538:	0000001a 	andeq	r0, r0, sl, lsl r0
    153c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1540:	100e4101 	andne	r4, lr, r1, lsl #2
    1544:	00070d41 	andeq	r0, r7, r1, asr #26
    1548:	00000018 	andeq	r0, r0, r8, lsl r0
    154c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1550:	080048cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr}
    1554:	0000001c 	andeq	r0, r0, ip, lsl r0
    1558:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    155c:	100e4101 	andne	r4, lr, r1, lsl #2
    1560:	00070d41 	andeq	r0, r7, r1, asr #26
    1564:	00000018 	andeq	r0, r0, r8, lsl r0
    1568:	000013ac 	andeq	r1, r0, ip, lsr #7
    156c:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
    1570:	0000003e 	andeq	r0, r0, lr, lsr r0
    1574:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1578:	100e4101 	andne	r4, lr, r1, lsl #2
    157c:	00070d41 	andeq	r0, r7, r1, asr #26
    1580:	00000018 	andeq	r0, r0, r8, lsl r0
    1584:	000013ac 	andeq	r1, r0, ip, lsr #7
    1588:	08004928 	stmdaeq	r0, {r3, r5, r8, fp, lr}
    158c:	00000022 	andeq	r0, r0, r2, lsr #32
    1590:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1594:	100e4101 	andne	r4, lr, r1, lsl #2
    1598:	00070d41 	andeq	r0, r7, r1, asr #26
    159c:	00000018 	andeq	r0, r0, r8, lsl r0
    15a0:	000013ac 	andeq	r1, r0, ip, lsr #7
    15a4:	0800494c 	stmdaeq	r0, {r2, r3, r6, r8, fp, lr}
    15a8:	00000032 	andeq	r0, r0, r2, lsr r0
    15ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15b0:	180e4101 	stmdane	lr, {r0, r8, lr}
    15b4:	00070d41 	andeq	r0, r7, r1, asr #26
    15b8:	00000018 	andeq	r0, r0, r8, lsl r0
    15bc:	000013ac 	andeq	r1, r0, ip, lsr #7
    15c0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    15c4:	0000001a 	andeq	r0, r0, sl, lsl r0
    15c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15cc:	100e4101 	andne	r4, lr, r1, lsl #2
    15d0:	00070d41 	andeq	r0, r7, r1, asr #26
    15d4:	00000018 	andeq	r0, r0, r8, lsl r0
    15d8:	000013ac 	andeq	r1, r0, ip, lsr #7
    15dc:	0800499c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, lr}
    15e0:	00000046 	andeq	r0, r0, r6, asr #32
    15e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15e8:	100e4101 	andne	r4, lr, r1, lsl #2
    15ec:	00070d41 	andeq	r0, r7, r1, asr #26
    15f0:	00000018 	andeq	r0, r0, r8, lsl r0
    15f4:	000013ac 	andeq	r1, r0, ip, lsr #7
    15f8:	080049e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, lr}
    15fc:	00000060 	andeq	r0, r0, r0, rrx
    1600:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1604:	180e4101 	stmdane	lr, {r0, r8, lr}
    1608:	00070d41 	andeq	r0, r7, r1, asr #26
    160c:	00000018 	andeq	r0, r0, r8, lsl r0
    1610:	000013ac 	andeq	r1, r0, ip, lsr #7
    1614:	08004a44 	stmdaeq	r0, {r2, r6, r9, fp, lr}
    1618:	00000038 	andeq	r0, r0, r8, lsr r0
    161c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1620:	180e4101 	stmdane	lr, {r0, r8, lr}
    1624:	00070d41 	andeq	r0, r7, r1, asr #26
    1628:	00000018 	andeq	r0, r0, r8, lsl r0
    162c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1630:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
    1634:	00000020 	andeq	r0, r0, r0, lsr #32
    1638:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    163c:	100e4101 	andne	r4, lr, r1, lsl #2
    1640:	00070d41 	andeq	r0, r7, r1, asr #26
    1644:	00000018 	andeq	r0, r0, r8, lsl r0
    1648:	000013ac 	andeq	r1, r0, ip, lsr #7
    164c:	08004a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, lr}
    1650:	00000076 	andeq	r0, r0, r6, ror r0
    1654:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1658:	180e4101 	stmdane	lr, {r0, r8, lr}
    165c:	00070d41 	andeq	r0, r7, r1, asr #26
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
    1664:	000013ac 	andeq	r1, r0, ip, lsr #7
    1668:	08004b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, lr}
    166c:	00000032 	andeq	r0, r0, r2, lsr r0
    1670:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1674:	180e4101 	stmdane	lr, {r0, r8, lr}
    1678:	00070d41 	andeq	r0, r7, r1, asr #26
    167c:	0000000c 	andeq	r0, r0, ip
    1680:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1684:	7c020001 	stcvc	0, cr0, [r2], {1}
    1688:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    168c:	00000014 	andeq	r0, r0, r4, lsl r0
    1690:	0000167c 	andeq	r1, r0, ip, ror r6
    1694:	08004b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, lr}
    1698:	00000034 	andeq	r0, r0, r4, lsr r0
    169c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    16a4:	00000018 	andeq	r0, r0, r8, lsl r0
    16a8:	0000167c 	andeq	r1, r0, ip, ror r6
    16ac:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
    16b0:	000000dc 	ldrdeq	r0, [r0], -ip
    16b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16b8:	180e4101 	stmdane	lr, {r0, r8, lr}
    16bc:	00070d41 	andeq	r0, r7, r1, asr #26
    16c0:	00000018 	andeq	r0, r0, r8, lsl r0
    16c4:	0000167c 	andeq	r1, r0, ip, ror r6
    16c8:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    16cc:	0000002a 	andeq	r0, r0, sl, lsr #32
    16d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16d4:	100e4101 	andne	r4, lr, r1, lsl #2
    16d8:	00070d41 	andeq	r0, r7, r1, asr #26
    16dc:	00000018 	andeq	r0, r0, r8, lsl r0
    16e0:	0000167c 	andeq	r1, r0, ip, ror r6
    16e4:	08004c84 	stmdaeq	r0, {r2, r7, sl, fp, lr}
    16e8:	00000024 	andeq	r0, r0, r4, lsr #32
    16ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16f0:	100e4101 	andne	r4, lr, r1, lsl #2
    16f4:	00070d41 	andeq	r0, r7, r1, asr #26
    16f8:	00000018 	andeq	r0, r0, r8, lsl r0
    16fc:	0000167c 	andeq	r1, r0, ip, ror r6
    1700:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
    1704:	00000034 	andeq	r0, r0, r4, lsr r0
    1708:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    170c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1710:	00070d41 	andeq	r0, r7, r1, asr #26
    1714:	00000018 	andeq	r0, r0, r8, lsl r0
    1718:	0000167c 	andeq	r1, r0, ip, ror r6
    171c:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    1720:	0000001c 	andeq	r0, r0, ip, lsl r0
    1724:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1728:	100e4101 	andne	r4, lr, r1, lsl #2
    172c:	00070d41 	andeq	r0, r7, r1, asr #26
    1730:	00000018 	andeq	r0, r0, r8, lsl r0
    1734:	0000167c 	andeq	r1, r0, ip, ror r6
    1738:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
    173c:	00000034 	andeq	r0, r0, r4, lsr r0
    1740:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1744:	180e4101 	stmdane	lr, {r0, r8, lr}
    1748:	00070d41 	andeq	r0, r7, r1, asr #26
    174c:	00000018 	andeq	r0, r0, r8, lsl r0
    1750:	0000167c 	andeq	r1, r0, ip, ror r6
    1754:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    1758:	0000001c 	andeq	r0, r0, ip, lsl r0
    175c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1760:	100e4101 	andne	r4, lr, r1, lsl #2
    1764:	00070d41 	andeq	r0, r7, r1, asr #26
    1768:	0000000c 	andeq	r0, r0, ip
    176c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1770:	7c020001 	stcvc	0, cr0, [r2], {1}
    1774:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1778:	00000018 	andeq	r0, r0, r8, lsl r0
    177c:	00001768 	andeq	r1, r0, r8, ror #14
    1780:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
    1784:	0000001a 	andeq	r0, r0, sl, lsl r0
    1788:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    178c:	41018e02 	tstmi	r1, r2, lsl #28
    1790:	0000070d 	andeq	r0, r0, sp, lsl #14
    1794:	00000018 	andeq	r0, r0, r8, lsl r0
    1798:	00001768 	andeq	r1, r0, r8, ror #14
    179c:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
    17a0:	0000015c 	andeq	r0, r0, ip, asr r1
    17a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17a8:	200e4101 	andcs	r4, lr, r1, lsl #2
    17ac:	00070d41 	andeq	r0, r7, r1, asr #26
    17b0:	00000018 	andeq	r0, r0, r8, lsl r0
    17b4:	00001768 	andeq	r1, r0, r8, ror #14
    17b8:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    17bc:	0000004e 	andeq	r0, r0, lr, asr #32
    17c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17c4:	100e4101 	andne	r4, lr, r1, lsl #2
    17c8:	00070d41 	andeq	r0, r7, r1, asr #26
    17cc:	00000014 	andeq	r0, r0, r4, lsl r0
    17d0:	00001768 	andeq	r1, r0, r8, ror #14
    17d4:	08004f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, lr}
    17d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    17dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    17e4:	00000014 	andeq	r0, r0, r4, lsl r0
    17e8:	00001768 	andeq	r1, r0, r8, ror #14
    17ec:	08004f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, lr}
    17f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    17fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1800:	00001768 	andeq	r1, r0, r8, ror #14
    1804:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    1808:	00000038 	andeq	r0, r0, r8, lsr r0
    180c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1810:	100e4101 	andne	r4, lr, r1, lsl #2
    1814:	00070d41 	andeq	r0, r7, r1, asr #26
    1818:	00000018 	andeq	r0, r0, r8, lsl r0
    181c:	00001768 	andeq	r1, r0, r8, ror #14
    1820:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
    1824:	000000dc 	ldrdeq	r0, [r0], -ip
    1828:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    182c:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1830:	00070d41 	andeq	r0, r7, r1, asr #26
    1834:	00000018 	andeq	r0, r0, r8, lsl r0
    1838:	00001768 	andeq	r1, r0, r8, ror #14
    183c:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
    1840:	00000054 	andeq	r0, r0, r4, asr r0
    1844:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1848:	100e4101 	andne	r4, lr, r1, lsl #2
    184c:	00070d41 	andeq	r0, r7, r1, asr #26
    1850:	00000018 	andeq	r0, r0, r8, lsl r0
    1854:	00001768 	andeq	r1, r0, r8, ror #14
    1858:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    185c:	000000dc 	ldrdeq	r0, [r0], -ip
    1860:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1864:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1868:	00070d41 	andeq	r0, r7, r1, asr #26
    186c:	00000018 	andeq	r0, r0, r8, lsl r0
    1870:	00001768 	andeq	r1, r0, r8, ror #14
    1874:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
    1878:	00000054 	andeq	r0, r0, r4, asr r0
    187c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1880:	100e4101 	andne	r4, lr, r1, lsl #2
    1884:	00070d41 	andeq	r0, r7, r1, asr #26
    1888:	00000018 	andeq	r0, r0, r8, lsl r0
    188c:	00001768 	andeq	r1, r0, r8, ror #14
    1890:	080051e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, lr}
    1894:	00000038 	andeq	r0, r0, r8, lsr r0
    1898:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    189c:	100e4101 	andne	r4, lr, r1, lsl #2
    18a0:	00070d41 	andeq	r0, r7, r1, asr #26
    18a4:	00000018 	andeq	r0, r0, r8, lsl r0
    18a8:	00001768 	andeq	r1, r0, r8, ror #14
    18ac:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
    18b0:	00000038 	andeq	r0, r0, r8, lsr r0
    18b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18b8:	100e4101 	andne	r4, lr, r1, lsl #2
    18bc:	00070d41 	andeq	r0, r7, r1, asr #26
    18c0:	00000018 	andeq	r0, r0, r8, lsl r0
    18c4:	00001768 	andeq	r1, r0, r8, ror #14
    18c8:	08005250 	stmdaeq	r0, {r4, r6, r9, ip, lr}
    18cc:	00000054 	andeq	r0, r0, r4, asr r0
    18d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18d4:	180e4101 	stmdane	lr, {r0, r8, lr}
    18d8:	00070d41 	andeq	r0, r7, r1, asr #26
    18dc:	00000018 	andeq	r0, r0, r8, lsl r0
    18e0:	00001768 	andeq	r1, r0, r8, ror #14
    18e4:	080052a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, lr}
    18e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    18ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18f0:	100e4101 	andne	r4, lr, r1, lsl #2
    18f4:	00070d41 	andeq	r0, r7, r1, asr #26
    18f8:	00000018 	andeq	r0, r0, r8, lsl r0
    18fc:	00001768 	andeq	r1, r0, r8, ror #14
    1900:	080052c0 	stmdaeq	r0, {r6, r7, r9, ip, lr}
    1904:	0000003c 	andeq	r0, r0, ip, lsr r0
    1908:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    190c:	100e4101 	andne	r4, lr, r1, lsl #2
    1910:	00070d41 	andeq	r0, r7, r1, asr #26
    1914:	00000018 	andeq	r0, r0, r8, lsl r0
    1918:	00001768 	andeq	r1, r0, r8, ror #14
    191c:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
    1920:	00000034 	andeq	r0, r0, r4, lsr r0
    1924:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1928:	180e4101 	stmdane	lr, {r0, r8, lr}
    192c:	00070d41 	andeq	r0, r7, r1, asr #26
    1930:	00000018 	andeq	r0, r0, r8, lsl r0
    1934:	00001768 	andeq	r1, r0, r8, ror #14
    1938:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
    193c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1940:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1944:	100e4101 	andne	r4, lr, r1, lsl #2
    1948:	00070d41 	andeq	r0, r7, r1, asr #26
    194c:	00000018 	andeq	r0, r0, r8, lsl r0
    1950:	00001768 	andeq	r1, r0, r8, ror #14
    1954:	0800534c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, lr}
    1958:	00000058 	andeq	r0, r0, r8, asr r0
    195c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1960:	180e4101 	stmdane	lr, {r0, r8, lr}
    1964:	00070d41 	andeq	r0, r7, r1, asr #26
    1968:	00000018 	andeq	r0, r0, r8, lsl r0
    196c:	00001768 	andeq	r1, r0, r8, ror #14
    1970:	080053a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, lr}
    1974:	00000024 	andeq	r0, r0, r4, lsr #32
    1978:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    197c:	100e4101 	andne	r4, lr, r1, lsl #2
    1980:	00070d41 	andeq	r0, r7, r1, asr #26
    1984:	0000000c 	andeq	r0, r0, ip
    1988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    198c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1990:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1994:	00000018 	andeq	r0, r0, r8, lsl r0
    1998:	00001984 	andeq	r1, r0, r4, lsl #19
    199c:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    19a0:	0000001a 	andeq	r0, r0, sl, lsl r0
    19a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    19a8:	41018e02 	tstmi	r1, r2, lsl #28
    19ac:	0000070d 	andeq	r0, r0, sp, lsl #14
    19b0:	00000018 	andeq	r0, r0, r8, lsl r0
    19b4:	00001984 	andeq	r1, r0, r4, lsl #19
    19b8:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
    19bc:	0000012c 	andeq	r0, r0, ip, lsr #2
    19c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
    19c8:	00070d41 	andeq	r0, r7, r1, asr #26
    19cc:	00000018 	andeq	r0, r0, r8, lsl r0
    19d0:	00001984 	andeq	r1, r0, r4, lsl #19
    19d4:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
    19d8:	0000006c 	andeq	r0, r0, ip, rrx
    19dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19e0:	100e4101 	andne	r4, lr, r1, lsl #2
    19e4:	00070d41 	andeq	r0, r7, r1, asr #26
    19e8:	00000018 	andeq	r0, r0, r8, lsl r0
    19ec:	00001984 	andeq	r1, r0, r4, lsl #19
    19f0:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
    19f4:	00000038 	andeq	r0, r0, r8, lsr r0
    19f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19fc:	100e4101 	andne	r4, lr, r1, lsl #2
    1a00:	00070d41 	andeq	r0, r7, r1, asr #26
    1a04:	00000018 	andeq	r0, r0, r8, lsl r0
    1a08:	00001984 	andeq	r1, r0, r4, lsl #19
    1a0c:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
    1a10:	00000038 	andeq	r0, r0, r8, lsr r0
    1a14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a18:	100e4101 	andne	r4, lr, r1, lsl #2
    1a1c:	00070d41 	andeq	r0, r7, r1, asr #26
    1a20:	00000018 	andeq	r0, r0, r8, lsl r0
    1a24:	00001984 	andeq	r1, r0, r4, lsl #19
    1a28:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
    1a2c:	00000058 	andeq	r0, r0, r8, asr r0
    1a30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a34:	200e4101 	andcs	r4, lr, r1, lsl #2
    1a38:	00070d41 	andeq	r0, r7, r1, asr #26
    1a3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a40:	00001984 	andeq	r1, r0, r4, lsl #19
    1a44:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
    1a48:	00000024 	andeq	r0, r0, r4, lsr #32
    1a4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a50:	100e4101 	andne	r4, lr, r1, lsl #2
    1a54:	00070d41 	andeq	r0, r7, r1, asr #26
    1a58:	00000018 	andeq	r0, r0, r8, lsl r0
    1a5c:	00001984 	andeq	r1, r0, r4, lsl #19
    1a60:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
    1a64:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a68:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a6c:	100e4101 	andne	r4, lr, r1, lsl #2
    1a70:	00070d41 	andeq	r0, r7, r1, asr #26
    1a74:	00000018 	andeq	r0, r0, r8, lsl r0
    1a78:	00001984 	andeq	r1, r0, r4, lsl #19
    1a7c:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    1a80:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a84:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a88:	100e4101 	andne	r4, lr, r1, lsl #2
    1a8c:	00070d41 	andeq	r0, r7, r1, asr #26
    1a90:	00000018 	andeq	r0, r0, r8, lsl r0
    1a94:	00001984 	andeq	r1, r0, r4, lsl #19
    1a98:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
    1a9c:	00000132 	andeq	r0, r0, r2, lsr r1
    1aa0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1aa4:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1aa8:	00070d41 	andeq	r0, r7, r1, asr #26
    1aac:	00000018 	andeq	r0, r0, r8, lsl r0
    1ab0:	00001984 	andeq	r1, r0, r4, lsl #19
    1ab4:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    1ab8:	00000074 	andeq	r0, r0, r4, ror r0
    1abc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ac0:	100e4101 	andne	r4, lr, r1, lsl #2
    1ac4:	00070d41 	andeq	r0, r7, r1, asr #26
    1ac8:	00000018 	andeq	r0, r0, r8, lsl r0
    1acc:	00001984 	andeq	r1, r0, r4, lsl #19
    1ad0:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
    1ad4:	00000036 	andeq	r0, r0, r6, lsr r0
    1ad8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1adc:	100e4101 	andne	r4, lr, r1, lsl #2
    1ae0:	00070d41 	andeq	r0, r7, r1, asr #26
    1ae4:	00000018 	andeq	r0, r0, r8, lsl r0
    1ae8:	00001984 	andeq	r1, r0, r4, lsl #19
    1aec:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
    1af0:	00000040 	andeq	r0, r0, r0, asr #32
    1af4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1af8:	180e4101 	stmdane	lr, {r0, r8, lr}
    1afc:	00070d41 	andeq	r0, r7, r1, asr #26
    1b00:	00000018 	andeq	r0, r0, r8, lsl r0
    1b04:	00001984 	andeq	r1, r0, r4, lsl #19
    1b08:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
    1b0c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1b10:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b14:	100e4101 	andne	r4, lr, r1, lsl #2
    1b18:	00070d41 	andeq	r0, r7, r1, asr #26
    1b1c:	00000018 	andeq	r0, r0, r8, lsl r0
    1b20:	00001984 	andeq	r1, r0, r4, lsl #19
    1b24:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
    1b28:	00000030 	andeq	r0, r0, r0, lsr r0
    1b2c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b30:	180e4101 	stmdane	lr, {r0, r8, lr}
    1b34:	00070d41 	andeq	r0, r7, r1, asr #26
    1b38:	00000018 	andeq	r0, r0, r8, lsl r0
    1b3c:	00001984 	andeq	r1, r0, r4, lsl #19
    1b40:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
    1b44:	0000007c 	andeq	r0, r0, ip, ror r0
    1b48:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b4c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1b50:	00070d41 	andeq	r0, r7, r1, asr #26
    1b54:	00000018 	andeq	r0, r0, r8, lsl r0
    1b58:	00001984 	andeq	r1, r0, r4, lsl #19
    1b5c:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    1b60:	00000024 	andeq	r0, r0, r4, lsr #32
    1b64:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b68:	100e4101 	andne	r4, lr, r1, lsl #2
    1b6c:	00070d41 	andeq	r0, r7, r1, asr #26
    1b70:	00000018 	andeq	r0, r0, r8, lsl r0
    1b74:	00001984 	andeq	r1, r0, r4, lsl #19
    1b78:	080059b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, lr}
    1b7c:	00000040 	andeq	r0, r0, r0, asr #32
    1b80:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b84:	100e4101 	andne	r4, lr, r1, lsl #2
    1b88:	00070d41 	andeq	r0, r7, r1, asr #26
    1b8c:	00000018 	andeq	r0, r0, r8, lsl r0
    1b90:	00001984 	andeq	r1, r0, r4, lsl #19
    1b94:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
    1b98:	0000004c 	andeq	r0, r0, ip, asr #32
    1b9c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ba0:	200e4101 	andcs	r4, lr, r1, lsl #2
    1ba4:	00070d41 	andeq	r0, r7, r1, asr #26
    1ba8:	00000018 	andeq	r0, r0, r8, lsl r0
    1bac:	00001984 	andeq	r1, r0, r4, lsl #19
    1bb0:	08005a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, lr}
    1bb4:	0000002a 	andeq	r0, r0, sl, lsr #32
    1bb8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bbc:	100e4101 	andne	r4, lr, r1, lsl #2
    1bc0:	00070d41 	andeq	r0, r7, r1, asr #26
    1bc4:	00000018 	andeq	r0, r0, r8, lsl r0
    1bc8:	00001984 	andeq	r1, r0, r4, lsl #19
    1bcc:	08005a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, lr}
    1bd0:	000000dc 	ldrdeq	r0, [r0], -ip
    1bd4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bd8:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1bdc:	00070d41 	andeq	r0, r7, r1, asr #26
    1be0:	00000018 	andeq	r0, r0, r8, lsl r0
    1be4:	00001984 	andeq	r1, r0, r4, lsl #19
    1be8:	08005b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, lr}
    1bec:	0000001c 	andeq	r0, r0, ip, lsl r0
    1bf0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bf4:	100e4101 	andne	r4, lr, r1, lsl #2
    1bf8:	00070d41 	andeq	r0, r7, r1, asr #26
    1bfc:	00000018 	andeq	r0, r0, r8, lsl r0
    1c00:	00001984 	andeq	r1, r0, r4, lsl #19
    1c04:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
    1c08:	0000001a 	andeq	r0, r0, sl, lsl r0
    1c0c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c10:	100e4101 	andne	r4, lr, r1, lsl #2
    1c14:	00070d41 	andeq	r0, r7, r1, asr #26
    1c18:	00000018 	andeq	r0, r0, r8, lsl r0
    1c1c:	00001984 	andeq	r1, r0, r4, lsl #19
    1c20:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    1c24:	000000ca 	andeq	r0, r0, sl, asr #1
    1c28:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c2c:	300e4101 	andcc	r4, lr, r1, lsl #2
    1c30:	00070d41 	andeq	r0, r7, r1, asr #26
    1c34:	00000018 	andeq	r0, r0, r8, lsl r0
    1c38:	00001984 	andeq	r1, r0, r4, lsl #19
    1c3c:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
    1c40:	000000c0 	andeq	r0, r0, r0, asr #1
    1c44:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c48:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c4c:	00070d41 	andeq	r0, r7, r1, asr #26
    1c50:	00000018 	andeq	r0, r0, r8, lsl r0
    1c54:	00001984 	andeq	r1, r0, r4, lsl #19
    1c58:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
    1c5c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1c60:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c64:	100e4101 	andne	r4, lr, r1, lsl #2
    1c68:	00070d41 	andeq	r0, r7, r1, asr #26
    1c6c:	00000018 	andeq	r0, r0, r8, lsl r0
    1c70:	00001984 	andeq	r1, r0, r4, lsl #19
    1c74:	08005d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, lr}
    1c78:	00000034 	andeq	r0, r0, r4, lsr r0
    1c7c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c80:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c84:	00070d41 	andeq	r0, r7, r1, asr #26
    1c88:	00000018 	andeq	r0, r0, r8, lsl r0
    1c8c:	00001984 	andeq	r1, r0, r4, lsl #19
    1c90:	08005d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, lr}
    1c94:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c98:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c9c:	100e4101 	andne	r4, lr, r1, lsl #2
    1ca0:	00070d41 	andeq	r0, r7, r1, asr #26
    1ca4:	00000018 	andeq	r0, r0, r8, lsl r0
    1ca8:	00001984 	andeq	r1, r0, r4, lsl #19
    1cac:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
    1cb0:	00000050 	andeq	r0, r0, r0, asr r0
    1cb4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cb8:	180e4101 	stmdane	lr, {r0, r8, lr}
    1cbc:	00070d41 	andeq	r0, r7, r1, asr #26
    1cc0:	00000018 	andeq	r0, r0, r8, lsl r0
    1cc4:	00001984 	andeq	r1, r0, r4, lsl #19
    1cc8:	08005de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
    1ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1cd0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cd4:	100e4101 	andne	r4, lr, r1, lsl #2
    1cd8:	00070d41 	andeq	r0, r7, r1, asr #26
    1cdc:	0000000c 	andeq	r0, r0, ip
    1ce0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ce4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ce8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1cec:	00000018 	andeq	r0, r0, r8, lsl r0
    1cf0:	00001cdc 	ldrdeq	r1, [r0], -ip
    1cf4:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
    1cf8:	00000058 	andeq	r0, r0, r8, asr r0
    1cfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d00:	100e4101 	andne	r4, lr, r1, lsl #2
    1d04:	00070d41 	andeq	r0, r7, r1, asr #26
    1d08:	00000018 	andeq	r0, r0, r8, lsl r0
    1d0c:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d10:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    1d14:	00000194 	muleq	r0, r4, r1
    1d18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d1c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d20:	00070d41 	andeq	r0, r7, r1, asr #26
    1d24:	00000018 	andeq	r0, r0, r8, lsl r0
    1d28:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d2c:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1d30:	000000da 	ldrdeq	r0, [r0], -sl
    1d34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d38:	100e4101 	andne	r4, lr, r1, lsl #2
    1d3c:	00070d41 	andeq	r0, r7, r1, asr #26
    1d40:	00000018 	andeq	r0, r0, r8, lsl r0
    1d44:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d48:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1d4c:	00000054 	andeq	r0, r0, r4, asr r0
    1d50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d54:	100e4101 	andne	r4, lr, r1, lsl #2
    1d58:	00070d41 	andeq	r0, r7, r1, asr #26
    1d5c:	00000018 	andeq	r0, r0, r8, lsl r0
    1d60:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d64:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
    1d68:	0000005c 	andeq	r0, r0, ip, asr r0
    1d6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d70:	100e4101 	andne	r4, lr, r1, lsl #2
    1d74:	00070d41 	andeq	r0, r7, r1, asr #26
    1d78:	00000018 	andeq	r0, r0, r8, lsl r0
    1d7c:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d80:	08006178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, lr}
    1d84:	000000cc 	andeq	r0, r0, ip, asr #1
    1d88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d8c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1d90:	00070d41 	andeq	r0, r7, r1, asr #26
    1d94:	00000018 	andeq	r0, r0, r8, lsl r0
    1d98:	00001cdc 	ldrdeq	r1, [r0], -ip
    1d9c:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
    1da0:	0000007c 	andeq	r0, r0, ip, ror r0
    1da4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1da8:	100e4101 	andne	r4, lr, r1, lsl #2
    1dac:	00070d41 	andeq	r0, r7, r1, asr #26
    1db0:	00000018 	andeq	r0, r0, r8, lsl r0
    1db4:	00001cdc 	ldrdeq	r1, [r0], -ip
    1db8:	080062c0 	stmdaeq	r0, {r6, r7, r9, sp, lr}
    1dbc:	0000006c 	andeq	r0, r0, ip, rrx
    1dc0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dc4:	100e4101 	andne	r4, lr, r1, lsl #2
    1dc8:	00070d41 	andeq	r0, r7, r1, asr #26
    1dcc:	00000018 	andeq	r0, r0, r8, lsl r0
    1dd0:	00001cdc 	ldrdeq	r1, [r0], -ip
    1dd4:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
    1dd8:	0000006c 	andeq	r0, r0, ip, rrx
    1ddc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1de0:	100e4101 	andne	r4, lr, r1, lsl #2
    1de4:	00070d41 	andeq	r0, r7, r1, asr #26
    1de8:	00000018 	andeq	r0, r0, r8, lsl r0
    1dec:	00001cdc 	ldrdeq	r1, [r0], -ip
    1df0:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
    1df4:	00000038 	andeq	r0, r0, r8, lsr r0
    1df8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dfc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1e00:	00070d41 	andeq	r0, r7, r1, asr #26
    1e04:	00000014 	andeq	r0, r0, r4, lsl r0
    1e08:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e0c:	080063d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp, lr}
    1e10:	00000034 	andeq	r0, r0, r4, lsr r0
    1e14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e18:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1e1c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e20:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e24:	08006404 	stmdaeq	r0, {r2, sl, sp, lr}
    1e28:	000000ac 	andeq	r0, r0, ip, lsr #1
    1e2c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e30:	100e4101 	andne	r4, lr, r1, lsl #2
    1e34:	00070d41 	andeq	r0, r7, r1, asr #26
    1e38:	00000018 	andeq	r0, r0, r8, lsl r0
    1e3c:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e40:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
    1e44:	00000084 	andeq	r0, r0, r4, lsl #1
    1e48:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e4c:	100e4101 	andne	r4, lr, r1, lsl #2
    1e50:	00070d41 	andeq	r0, r7, r1, asr #26
    1e54:	00000018 	andeq	r0, r0, r8, lsl r0
    1e58:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e5c:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
    1e60:	0000003c 	andeq	r0, r0, ip, lsr r0
    1e64:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e68:	100e4101 	andne	r4, lr, r1, lsl #2
    1e6c:	00070d41 	andeq	r0, r7, r1, asr #26
    1e70:	00000018 	andeq	r0, r0, r8, lsl r0
    1e74:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e78:	08006570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp, lr}
    1e7c:	00000044 	andeq	r0, r0, r4, asr #32
    1e80:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e84:	100e4101 	andne	r4, lr, r1, lsl #2
    1e88:	00070d41 	andeq	r0, r7, r1, asr #26
    1e8c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e90:	00001cdc 	ldrdeq	r1, [r0], -ip
    1e94:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
    1e98:	0000015c 	andeq	r0, r0, ip, asr r1
    1e9c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ea0:	200e4101 	andcs	r4, lr, r1, lsl #2
    1ea4:	00070d41 	andeq	r0, r7, r1, asr #26
    1ea8:	00000018 	andeq	r0, r0, r8, lsl r0
    1eac:	00001cdc 	ldrdeq	r1, [r0], -ip
    1eb0:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
    1eb4:	00000088 	andeq	r0, r0, r8, lsl #1
    1eb8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ebc:	100e4101 	andne	r4, lr, r1, lsl #2
    1ec0:	00070d41 	andeq	r0, r7, r1, asr #26
    1ec4:	00000018 	andeq	r0, r0, r8, lsl r0
    1ec8:	00001cdc 	ldrdeq	r1, [r0], -ip
    1ecc:	08006798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, sp, lr}
    1ed0:	00000040 	andeq	r0, r0, r0, asr #32
    1ed4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ed8:	180e4101 	stmdane	lr, {r0, r8, lr}
    1edc:	00070d41 	andeq	r0, r7, r1, asr #26
    1ee0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ee4:	00001cdc 	ldrdeq	r1, [r0], -ip
    1ee8:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
    1eec:	0000003c 	andeq	r0, r0, ip, lsr r0
    1ef0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ef4:	180e4101 	stmdane	lr, {r0, r8, lr}
    1ef8:	00070d41 	andeq	r0, r7, r1, asr #26
    1efc:	00000018 	andeq	r0, r0, r8, lsl r0
    1f00:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f04:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
    1f08:	00000024 	andeq	r0, r0, r4, lsr #32
    1f0c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f10:	100e4101 	andne	r4, lr, r1, lsl #2
    1f14:	00070d41 	andeq	r0, r7, r1, asr #26
    1f18:	00000018 	andeq	r0, r0, r8, lsl r0
    1f1c:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f20:	08006838 	stmdaeq	r0, {r3, r4, r5, fp, sp, lr}
    1f24:	00000024 	andeq	r0, r0, r4, lsr #32
    1f28:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f2c:	100e4101 	andne	r4, lr, r1, lsl #2
    1f30:	00070d41 	andeq	r0, r7, r1, asr #26
    1f34:	00000018 	andeq	r0, r0, r8, lsl r0
    1f38:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f3c:	0800685c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp, lr}
    1f40:	0000004c 	andeq	r0, r0, ip, asr #32
    1f44:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f48:	100e4101 	andne	r4, lr, r1, lsl #2
    1f4c:	00070d41 	andeq	r0, r7, r1, asr #26
    1f50:	00000018 	andeq	r0, r0, r8, lsl r0
    1f54:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f58:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    1f5c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f60:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f64:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f68:	00070d41 	andeq	r0, r7, r1, asr #26
    1f6c:	00000018 	andeq	r0, r0, r8, lsl r0
    1f70:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f74:	08006978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp, lr}
    1f78:	0000007c 	andeq	r0, r0, ip, ror r0
    1f7c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f80:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f84:	00070d41 	andeq	r0, r7, r1, asr #26
    1f88:	00000018 	andeq	r0, r0, r8, lsl r0
    1f8c:	00001cdc 	ldrdeq	r1, [r0], -ip
    1f90:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
    1f94:	00000078 	andeq	r0, r0, r8, ror r0
    1f98:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f9c:	100e4101 	andne	r4, lr, r1, lsl #2
    1fa0:	00070d41 	andeq	r0, r7, r1, asr #26
    1fa4:	00000018 	andeq	r0, r0, r8, lsl r0
    1fa8:	00001cdc 	ldrdeq	r1, [r0], -ip
    1fac:	08006a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp, lr}
    1fb0:	000000b4 	strheq	r0, [r0], -r4
    1fb4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fb8:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1fbc:	00070d41 	andeq	r0, r7, r1, asr #26
    1fc0:	00000018 	andeq	r0, r0, r8, lsl r0
    1fc4:	00001cdc 	ldrdeq	r1, [r0], -ip
    1fc8:	08006b20 	stmdaeq	r0, {r5, r8, r9, fp, sp, lr}
    1fcc:	0000007c 	andeq	r0, r0, ip, ror r0
    1fd0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fd4:	100e4101 	andne	r4, lr, r1, lsl #2
    1fd8:	00070d41 	andeq	r0, r7, r1, asr #26
    1fdc:	0000000c 	andeq	r0, r0, ip
    1fe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1fe4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1fe8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1fec:	00000018 	andeq	r0, r0, r8, lsl r0
    1ff0:	00001fdc 	ldrdeq	r1, [r0], -ip
    1ff4:	08006b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
    1ff8:	00000016 	andeq	r0, r0, r6, lsl r0
    1ffc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2000:	41018e02 	tstmi	r1, r2, lsl #28
    2004:	0000070d 	andeq	r0, r0, sp, lsl #14
    2008:	00000018 	andeq	r0, r0, r8, lsl r0
    200c:	00001fdc 	ldrdeq	r1, [r0], -ip
    2010:	08006bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp, lr}
    2014:	00000038 	andeq	r0, r0, r8, lsr r0
    2018:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    201c:	100e4101 	andne	r4, lr, r1, lsl #2
    2020:	00070d41 	andeq	r0, r7, r1, asr #26
    2024:	00000014 	andeq	r0, r0, r4, lsl r0
    2028:	00001fdc 	ldrdeq	r1, [r0], -ip
    202c:	08006bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
    2030:	00000018 	andeq	r0, r0, r8, lsl r0
    2034:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2038:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    203c:	00000018 	andeq	r0, r0, r8, lsl r0
    2040:	00001fdc 	ldrdeq	r1, [r0], -ip
    2044:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
    2048:	00000038 	andeq	r0, r0, r8, lsr r0
    204c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2050:	100e4101 	andne	r4, lr, r1, lsl #2
    2054:	00070d41 	andeq	r0, r7, r1, asr #26
    2058:	00000018 	andeq	r0, r0, r8, lsl r0
    205c:	00001fdc 	ldrdeq	r1, [r0], -ip
    2060:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
    2064:	00000038 	andeq	r0, r0, r8, lsr r0
    2068:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    206c:	180e4101 	stmdane	lr, {r0, r8, lr}
    2070:	00070d41 	andeq	r0, r7, r1, asr #26
    2074:	00000018 	andeq	r0, r0, r8, lsl r0
    2078:	00001fdc 	ldrdeq	r1, [r0], -ip
    207c:	08006c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp, lr}
    2080:	00000024 	andeq	r0, r0, r4, lsr #32
    2084:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2088:	100e4101 	andne	r4, lr, r1, lsl #2
    208c:	00070d41 	andeq	r0, r7, r1, asr #26
    2090:	00000018 	andeq	r0, r0, r8, lsl r0
    2094:	00001fdc 	ldrdeq	r1, [r0], -ip
    2098:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
    209c:	00000038 	andeq	r0, r0, r8, lsr r0
    20a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20a4:	180e4101 	stmdane	lr, {r0, r8, lr}
    20a8:	00070d41 	andeq	r0, r7, r1, asr #26
    20ac:	00000018 	andeq	r0, r0, r8, lsl r0
    20b0:	00001fdc 	ldrdeq	r1, [r0], -ip
    20b4:	08006cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp, lr}
    20b8:	00000024 	andeq	r0, r0, r4, lsr #32
    20bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20c0:	100e4101 	andne	r4, lr, r1, lsl #2
    20c4:	00070d41 	andeq	r0, r7, r1, asr #26
    20c8:	0000000c 	andeq	r0, r0, ip
    20cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    20d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    20d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    20d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    20dc:	000020c8 	andeq	r2, r0, r8, asr #1
    20e0:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    20e4:	0000005c 	andeq	r0, r0, ip, asr r0
    20e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    20ec:	41018e02 	tstmi	r1, r2, lsl #28
    20f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    20f4:	00000007 	andeq	r0, r0, r7
    20f8:	00000018 	andeq	r0, r0, r8, lsl r0
    20fc:	000020c8 	andeq	r2, r0, r8, asr #1
    2100:	08006d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, sp, lr}
    2104:	00000030 	andeq	r0, r0, r0, lsr r0
    2108:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    210c:	100e4101 	andne	r4, lr, r1, lsl #2
    2110:	00070d41 	andeq	r0, r7, r1, asr #26
    2114:	00000018 	andeq	r0, r0, r8, lsl r0
    2118:	000020c8 	andeq	r2, r0, r8, asr #1
    211c:	08006d80 	stmdaeq	r0, {r7, r8, sl, fp, sp, lr}
    2120:	00000030 	andeq	r0, r0, r0, lsr r0
    2124:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2128:	100e4101 	andne	r4, lr, r1, lsl #2
    212c:	00070d41 	andeq	r0, r7, r1, asr #26
    2130:	00000018 	andeq	r0, r0, r8, lsl r0
    2134:	000020c8 	andeq	r2, r0, r8, asr #1
    2138:	08006db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp, lr}
    213c:	0000003c 	andeq	r0, r0, ip, lsr r0
    2140:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2144:	100e4101 	andne	r4, lr, r1, lsl #2
    2148:	00070d41 	andeq	r0, r7, r1, asr #26
    214c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2150:	000020c8 	andeq	r2, r0, r8, asr #1
    2154:	08006dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
    2158:	00000094 	muleq	r0, r4, r0
    215c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2160:	41018e02 	tstmi	r1, r2, lsl #28
    2164:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    2168:	00000007 	andeq	r0, r0, r7
    216c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2170:	000020c8 	andeq	r2, r0, r8, asr #1
    2174:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
    2178:	0000002c 	andeq	r0, r0, ip, lsr #32
    217c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2180:	41018e02 	tstmi	r1, r2, lsl #28
    2184:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2188:	00000007 	andeq	r0, r0, r7
    218c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2190:	000020c8 	andeq	r2, r0, r8, asr #1
    2194:	08006eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, lr}
    2198:	000000b8 	strheq	r0, [r0], -r8
    219c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21a0:	41018e02 	tstmi	r1, r2, lsl #28
    21a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    21a8:	00000007 	andeq	r0, r0, r7
    21ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    21b0:	000020c8 	andeq	r2, r0, r8, asr #1
    21b4:	08006f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
    21b8:	00000198 	muleq	r0, r8, r1
    21bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21c0:	41018e02 	tstmi	r1, r2, lsl #28
    21c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    21c8:	00000007 	andeq	r0, r0, r7
    21cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    21d0:	000020c8 	andeq	r2, r0, r8, asr #1
    21d4:	080070fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp, lr}
    21d8:	0000005c 	andeq	r0, r0, ip, asr r0
    21dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21e0:	41018e02 	tstmi	r1, r2, lsl #28
    21e4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    21e8:	00000007 	andeq	r0, r0, r7
    21ec:	0000000c 	andeq	r0, r0, ip
    21f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    21f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    21f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    21fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    2200:	000021ec 	andeq	r2, r0, ip, ror #3
    2204:	08007158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, lr}
    2208:	00000074 	andeq	r0, r0, r4, ror r0
    220c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2210:	41018e02 	tstmi	r1, r2, lsl #28
    2214:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2218:	00000007 	andeq	r0, r0, r7
    221c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2220:	000021ec 	andeq	r2, r0, ip, ror #3
    2224:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
    2228:	00000214 	andeq	r0, r0, r4, lsl r2
    222c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2230:	41018e02 	tstmi	r1, r2, lsl #28
    2234:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2238:	00000007 	andeq	r0, r0, r7
    223c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2240:	000021ec 	andeq	r2, r0, ip, ror #3
    2244:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}
    2248:	000000ec 	andeq	r0, r0, ip, ror #1
    224c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2250:	41018e02 	tstmi	r1, r2, lsl #28
    2254:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2258:	00000007 	andeq	r0, r0, r7
    225c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2260:	000021ec 	andeq	r2, r0, ip, ror #3
    2264:	080074cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp, lr}
    2268:	00000054 	andeq	r0, r0, r4, asr r0
    226c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2270:	41018e02 	tstmi	r1, r2, lsl #28
    2274:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2278:	00000007 	andeq	r0, r0, r7
    227c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2280:	000021ec 	andeq	r2, r0, ip, ror #3
    2284:	08007520 	stmdaeq	r0, {r5, r8, sl, ip, sp, lr}
    2288:	0000004a 	andeq	r0, r0, sl, asr #32
    228c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2290:	41018e02 	tstmi	r1, r2, lsl #28
    2294:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2298:	00000007 	andeq	r0, r0, r7
    229c:	00000018 	andeq	r0, r0, r8, lsl r0
    22a0:	000021ec 	andeq	r2, r0, ip, ror #3
    22a4:	0800756c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp, lr}
    22a8:	00000034 	andeq	r0, r0, r4, lsr r0
    22ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    22b0:	180e4101 	stmdane	lr, {r0, r8, lr}
    22b4:	00070d41 	andeq	r0, r7, r1, asr #26
    22b8:	0000000c 	andeq	r0, r0, ip
    22bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    22c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    22c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    22c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    22cc:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    22d0:	080075a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp, lr}
    22d4:	00000076 	andeq	r0, r0, r6, ror r0
    22d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22dc:	41018e02 	tstmi	r1, r2, lsl #28
    22e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22e4:	00000007 	andeq	r0, r0, r7
    22e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    22ec:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    22f0:	08007618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp, lr}
    22f4:	0000002e 	andeq	r0, r0, lr, lsr #32
    22f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22fc:	41018e02 	tstmi	r1, r2, lsl #28
    2300:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2304:	00000007 	andeq	r0, r0, r7
    2308:	0000001c 	andeq	r0, r0, ip, lsl r0
    230c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2310:	08007648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp, lr}
    2314:	00000082 	andeq	r0, r0, r2, lsl #1
    2318:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    231c:	41018e02 	tstmi	r1, r2, lsl #28
    2320:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2324:	00000007 	andeq	r0, r0, r7
    2328:	0000001c 	andeq	r0, r0, ip, lsl r0
    232c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2330:	080076cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, sp, lr}
    2334:	00000040 	andeq	r0, r0, r0, asr #32
    2338:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    233c:	41018e02 	tstmi	r1, r2, lsl #28
    2340:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2344:	00000007 	andeq	r0, r0, r7
    2348:	0000001c 	andeq	r0, r0, ip, lsl r0
    234c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2350:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
    2354:	00000040 	andeq	r0, r0, r0, asr #32
    2358:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    235c:	41018e02 	tstmi	r1, r2, lsl #28
    2360:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2364:	00000007 	andeq	r0, r0, r7
    2368:	0000001c 	andeq	r0, r0, ip, lsl r0
    236c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2370:	0800774c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp, lr}
    2374:	00000048 	andeq	r0, r0, r8, asr #32
    2378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    237c:	41018e02 	tstmi	r1, r2, lsl #28
    2380:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2384:	00000007 	andeq	r0, r0, r7
    2388:	0000001c 	andeq	r0, r0, ip, lsl r0
    238c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2390:	08007794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, lr}
    2394:	00000040 	andeq	r0, r0, r0, asr #32
    2398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    239c:	41018e02 	tstmi	r1, r2, lsl #28
    23a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    23a4:	00000007 	andeq	r0, r0, r7
    23a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    23ac:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    23b0:	080077d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
    23b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    23b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    23bc:	41018e02 	tstmi	r1, r2, lsl #28
    23c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    23c4:	00000007 	andeq	r0, r0, r7
    23c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    23cc:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    23d0:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    23d4:	00000060 	andeq	r0, r0, r0, rrx
    23d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    23dc:	41018e02 	tstmi	r1, r2, lsl #28
    23e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    23e4:	00000007 	andeq	r0, r0, r7
    23e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    23ec:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    23f0:	08007850 	stmdaeq	r0, {r4, r6, fp, ip, sp, lr}
    23f4:	0000006c 	andeq	r0, r0, ip, rrx
    23f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    23fc:	41018e02 	tstmi	r1, r2, lsl #28
    2400:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2404:	00000007 	andeq	r0, r0, r7
    2408:	0000001c 	andeq	r0, r0, ip, lsl r0
    240c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2410:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
    2414:	00000138 	andeq	r0, r0, r8, lsr r1
    2418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    241c:	41018e02 	tstmi	r1, r2, lsl #28
    2420:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    2424:	00000007 	andeq	r0, r0, r7
    2428:	0000001c 	andeq	r0, r0, ip, lsl r0
    242c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2430:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    2434:	00000090 	muleq	r0, r0, r0
    2438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    243c:	41018e02 	tstmi	r1, r2, lsl #28
    2440:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2444:	00000007 	andeq	r0, r0, r7
    2448:	00000014 	andeq	r0, r0, r4, lsl r0
    244c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    2450:	08007a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp, lr}
    2454:	00000006 	andeq	r0, r0, r6
    2458:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    245c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    2460:	0000000c 	andeq	r0, r0, ip
    2464:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2468:	7c020001 	stcvc	0, cr0, [r2], {1}
    246c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2470:	0000001c 	andeq	r0, r0, ip, lsl r0
    2474:	00002460 	andeq	r2, r0, r0, ror #8
    2478:	08007a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp, lr}
    247c:	00000224 	andeq	r0, r0, r4, lsr #4
    2480:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2484:	41018e02 	tstmi	r1, r2, lsl #28
    2488:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    248c:	00000007 	andeq	r0, r0, r7
    2490:	0000001c 	andeq	r0, r0, ip, lsl r0
    2494:	00002460 	andeq	r2, r0, r0, ror #8
    2498:	08007cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp, lr}
    249c:	000000b2 	strheq	r0, [r0], -r2
    24a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    24a4:	41018e02 	tstmi	r1, r2, lsl #28
    24a8:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    24ac:	00000007 	andeq	r0, r0, r7
    24b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    24b4:	00002460 	andeq	r2, r0, r0, ror #8
    24b8:	08007d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, sp, lr}
    24bc:	000000b4 	strheq	r0, [r0], -r4
    24c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    24c4:	41018e02 	tstmi	r1, r2, lsl #28
    24c8:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    24cc:	00000007 	andeq	r0, r0, r7
    24d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    24d4:	00002460 	andeq	r2, r0, r0, ror #8
    24d8:	08007e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp, lr}
    24dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    24e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    24e4:	41018e02 	tstmi	r1, r2, lsl #28
    24e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    24ec:	00000007 	andeq	r0, r0, r7
    24f0:	00000018 	andeq	r0, r0, r8, lsl r0
    24f4:	00002460 	andeq	r2, r0, r0, ror #8
    24f8:	08007e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp, lr}
    24fc:	00000040 	andeq	r0, r0, r0, asr #32
    2500:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2504:	100e4101 	andne	r4, lr, r1, lsl #2
    2508:	00070d41 	andeq	r0, r7, r1, asr #26
    250c:	00000018 	andeq	r0, r0, r8, lsl r0
    2510:	00002460 	andeq	r2, r0, r0, ror #8
    2514:	08007e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp, lr}
    2518:	0000002c 	andeq	r0, r0, ip, lsr #32
    251c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2520:	100e4101 	andne	r4, lr, r1, lsl #2
    2524:	00070d41 	andeq	r0, r7, r1, asr #26
    2528:	00000018 	andeq	r0, r0, r8, lsl r0
    252c:	00002460 	andeq	r2, r0, r0, ror #8
    2530:	08007eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp, lr}
    2534:	0000002c 	andeq	r0, r0, ip, lsr #32
    2538:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    253c:	100e4101 	andne	r4, lr, r1, lsl #2
    2540:	00070d41 	andeq	r0, r7, r1, asr #26
    2544:	00000018 	andeq	r0, r0, r8, lsl r0
    2548:	00002460 	andeq	r2, r0, r0, ror #8
    254c:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    2550:	00000020 	andeq	r0, r0, r0, lsr #32
    2554:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2558:	100e4101 	andne	r4, lr, r1, lsl #2
    255c:	00070d41 	andeq	r0, r7, r1, asr #26
    2560:	00000018 	andeq	r0, r0, r8, lsl r0
    2564:	00002460 	andeq	r2, r0, r0, ror #8
    2568:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    256c:	00000020 	andeq	r0, r0, r0, lsr #32
    2570:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2574:	100e4101 	andne	r4, lr, r1, lsl #2
    2578:	00070d41 	andeq	r0, r7, r1, asr #26
    257c:	00000018 	andeq	r0, r0, r8, lsl r0
    2580:	00002460 	andeq	r2, r0, r0, ror #8
    2584:	08007f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
    2588:	0000001c 	andeq	r0, r0, ip, lsl r0
    258c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2590:	100e4101 	andne	r4, lr, r1, lsl #2
    2594:	00070d41 	andeq	r0, r7, r1, asr #26
    2598:	0000001c 	andeq	r0, r0, ip, lsl r0
    259c:	00002460 	andeq	r2, r0, r0, ror #8
    25a0:	08007f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
    25a4:	00000040 	andeq	r0, r0, r0, asr #32
    25a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25ac:	41018e02 	tstmi	r1, r2, lsl #28
    25b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    25b4:	00000007 	andeq	r0, r0, r7
    25b8:	00000014 	andeq	r0, r0, r4, lsl r0
    25bc:	00002460 	andeq	r2, r0, r0, ror #8
    25c0:	08007f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
    25c4:	00000018 	andeq	r0, r0, r8, lsl r0
    25c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    25cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    25d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    25d4:	00002460 	andeq	r2, r0, r0, ror #8
    25d8:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
    25dc:	00000050 	andeq	r0, r0, r0, asr r0
    25e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25e4:	41018e02 	tstmi	r1, r2, lsl #28
    25e8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    25ec:	00000007 	andeq	r0, r0, r7
    25f0:	00000018 	andeq	r0, r0, r8, lsl r0
    25f4:	00002460 	andeq	r2, r0, r0, ror #8
    25f8:	08007fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    25fc:	00000040 	andeq	r0, r0, r0, asr #32
    2600:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2604:	180e4101 	stmdane	lr, {r0, r8, lr}
    2608:	00070d41 	andeq	r0, r7, r1, asr #26
    260c:	00000018 	andeq	r0, r0, r8, lsl r0
    2610:	00002460 	andeq	r2, r0, r0, ror #8
    2614:	08008020 	stmdaeq	r0, {r5, pc}
    2618:	00000038 	andeq	r0, r0, r8, lsr r0
    261c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2620:	100e4101 	andne	r4, lr, r1, lsl #2
    2624:	00070d41 	andeq	r0, r7, r1, asr #26
    2628:	0000001c 	andeq	r0, r0, ip, lsl r0
    262c:	00002460 	andeq	r2, r0, r0, ror #8
    2630:	08008058 	stmdaeq	r0, {r3, r4, r6, pc}
    2634:	00000068 	andeq	r0, r0, r8, rrx
    2638:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    263c:	41018e02 	tstmi	r1, r2, lsl #28
    2640:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2644:	00000007 	andeq	r0, r0, r7
    2648:	0000001c 	andeq	r0, r0, ip, lsl r0
    264c:	00002460 	andeq	r2, r0, r0, ror #8
    2650:	080080c0 	stmdaeq	r0, {r6, r7, pc}
    2654:	00000048 	andeq	r0, r0, r8, asr #32
    2658:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    265c:	41018e02 	tstmi	r1, r2, lsl #28
    2660:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2664:	00000007 	andeq	r0, r0, r7
    2668:	00000018 	andeq	r0, r0, r8, lsl r0
    266c:	00002460 	andeq	r2, r0, r0, ror #8
    2670:	08008108 	stmdaeq	r0, {r3, r8, pc}
    2674:	00000120 	andeq	r0, r0, r0, lsr #2
    2678:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    267c:	200e4101 	andcs	r4, lr, r1, lsl #2
    2680:	00070d41 	andeq	r0, r7, r1, asr #26
    2684:	0000001c 	andeq	r0, r0, ip, lsl r0
    2688:	00002460 	andeq	r2, r0, r0, ror #8
    268c:	08008228 	stmdaeq	r0, {r3, r5, r9, pc}
    2690:	00000048 	andeq	r0, r0, r8, asr #32
    2694:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2698:	41018e02 	tstmi	r1, r2, lsl #28
    269c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    26a0:	00000007 	andeq	r0, r0, r7
    26a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    26a8:	00002460 	andeq	r2, r0, r0, ror #8
    26ac:	08008270 	stmdaeq	r0, {r4, r5, r6, r9, pc}
    26b0:	00000078 	andeq	r0, r0, r8, ror r0
    26b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26b8:	41018e02 	tstmi	r1, r2, lsl #28
    26bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    26c0:	00000007 	andeq	r0, r0, r7
    26c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    26c8:	00002460 	andeq	r2, r0, r0, ror #8
    26cc:	080082e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, pc}
    26d0:	0000007c 	andeq	r0, r0, ip, ror r0
    26d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26d8:	41018e02 	tstmi	r1, r2, lsl #28
    26dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    26e0:	00000007 	andeq	r0, r0, r7
    26e4:	00000018 	andeq	r0, r0, r8, lsl r0
    26e8:	00002460 	andeq	r2, r0, r0, ror #8
    26ec:	08008364 	stmdaeq	r0, {r2, r5, r6, r8, r9, pc}
    26f0:	00000014 	andeq	r0, r0, r4, lsl r0
    26f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26f8:	41018e02 	tstmi	r1, r2, lsl #28
    26fc:	0000070d 	andeq	r0, r0, sp, lsl #14
    2700:	0000001c 	andeq	r0, r0, ip, lsl r0
    2704:	00002460 	andeq	r2, r0, r0, ror #8
    2708:	08008378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, pc}
    270c:	000000c8 	andeq	r0, r0, r8, asr #1
    2710:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2714:	41018e02 	tstmi	r1, r2, lsl #28
    2718:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    271c:	00000007 	andeq	r0, r0, r7
    2720:	0000001c 	andeq	r0, r0, ip, lsl r0
    2724:	00002460 	andeq	r2, r0, r0, ror #8
    2728:	08008440 	stmdaeq	r0, {r6, sl, pc}
    272c:	00000068 	andeq	r0, r0, r8, rrx
    2730:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2734:	41018e02 	tstmi	r1, r2, lsl #28
    2738:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    273c:	00000007 	andeq	r0, r0, r7
    2740:	00000018 	andeq	r0, r0, r8, lsl r0
    2744:	00002460 	andeq	r2, r0, r0, ror #8
    2748:	080084a8 	stmdaeq	r0, {r3, r5, r7, sl, pc}
    274c:	00000128 	andeq	r0, r0, r8, lsr #2
    2750:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2754:	200e4101 	andcs	r4, lr, r1, lsl #2
    2758:	00070d41 	andeq	r0, r7, r1, asr #26
    275c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2760:	00002460 	andeq	r2, r0, r0, ror #8
    2764:	080085d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, pc}
    2768:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    276c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2770:	41018e02 	tstmi	r1, r2, lsl #28
    2774:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
    2778:	00000007 	andeq	r0, r0, r7
    277c:	00000018 	andeq	r0, r0, r8, lsl r0
    2780:	00002460 	andeq	r2, r0, r0, ror #8
    2784:	0800888c 	stmdaeq	r0, {r2, r3, r7, fp, pc}
    2788:	00000350 	andeq	r0, r0, r0, asr r3
    278c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2790:	380e4101 	stmdacc	lr, {r0, r8, lr}
    2794:	00070d41 	andeq	r0, r7, r1, asr #26
    2798:	00000018 	andeq	r0, r0, r8, lsl r0
    279c:	00002460 	andeq	r2, r0, r0, ror #8
    27a0:	08008bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, pc}
    27a4:	0000007c 	andeq	r0, r0, ip, ror r0
    27a8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    27ac:	180e4101 	stmdane	lr, {r0, r8, lr}
    27b0:	00070d41 	andeq	r0, r7, r1, asr #26
    27b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    27b8:	00002460 	andeq	r2, r0, r0, ror #8
    27bc:	08008c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, pc}
    27c0:	000001dc 	ldrdeq	r0, [r0], -ip
    27c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27c8:	41018e02 	tstmi	r1, r2, lsl #28
    27cc:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    27d0:	00000007 	andeq	r0, r0, r7
    27d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    27d8:	00002460 	andeq	r2, r0, r0, ror #8
    27dc:	08008e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, pc}
    27e0:	000000c0 	andeq	r0, r0, r0, asr #1
    27e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27e8:	41018e02 	tstmi	r1, r2, lsl #28
    27ec:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    27f0:	00000007 	andeq	r0, r0, r7
    27f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    27f8:	00002460 	andeq	r2, r0, r0, ror #8
    27fc:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
    2800:	00000120 	andeq	r0, r0, r0, lsr #2
    2804:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2808:	41018e02 	tstmi	r1, r2, lsl #28
    280c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2810:	00000007 	andeq	r0, r0, r7
    2814:	0000001c 	andeq	r0, r0, ip, lsl r0
    2818:	00002460 	andeq	r2, r0, r0, ror #8
    281c:	08009014 	stmdaeq	r0, {r2, r4, ip, pc}
    2820:	00000166 	andeq	r0, r0, r6, ror #2
    2824:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2828:	41018e02 	tstmi	r1, r2, lsl #28
    282c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    2830:	00000007 	andeq	r0, r0, r7
    2834:	0000001c 	andeq	r0, r0, ip, lsl r0
    2838:	00002460 	andeq	r2, r0, r0, ror #8
    283c:	0800917c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, pc}
    2840:	00000076 	andeq	r0, r0, r6, ror r0
    2844:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2848:	41018e02 	tstmi	r1, r2, lsl #28
    284c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2850:	00000007 	andeq	r0, r0, r7
    2854:	0000001c 	andeq	r0, r0, ip, lsl r0
    2858:	00002460 	andeq	r2, r0, r0, ror #8
    285c:	080091f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, pc}
    2860:	00000162 	andeq	r0, r0, r2, ror #2
    2864:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2868:	41018e02 	tstmi	r1, r2, lsl #28
    286c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    2870:	00000007 	andeq	r0, r0, r7
    2874:	0000001c 	andeq	r0, r0, ip, lsl r0
    2878:	00002460 	andeq	r2, r0, r0, ror #8
    287c:	08009358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, pc}
    2880:	00000056 	andeq	r0, r0, r6, asr r0
    2884:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2888:	41018e02 	tstmi	r1, r2, lsl #28
    288c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2890:	00000007 	andeq	r0, r0, r7
    2894:	0000001c 	andeq	r0, r0, ip, lsl r0
    2898:	00002460 	andeq	r2, r0, r0, ror #8
    289c:	080093b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, pc}
    28a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    28a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    28a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    28ac:	200e4101 	andcs	r4, lr, r1, lsl #2
    28b0:	00070d41 	andeq	r0, r7, r1, asr #26
    28b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28b8:	00002460 	andeq	r2, r0, r0, ror #8
    28bc:	08009450 	stmdaeq	r0, {r4, r6, sl, ip, pc}
    28c0:	00000050 	andeq	r0, r0, r0, asr r0
    28c4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    28c8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    28cc:	180e4101 	stmdane	lr, {r0, r8, lr}
    28d0:	00070d41 	andeq	r0, r7, r1, asr #26
    28d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28d8:	00002460 	andeq	r2, r0, r0, ror #8
    28dc:	080094a0 	stmdaeq	r0, {r5, r7, sl, ip, pc}
    28e0:	0000001e 	andeq	r0, r0, lr, lsl r0
    28e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    28e8:	41018e02 	tstmi	r1, r2, lsl #28
    28ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    28f0:	00000007 	andeq	r0, r0, r7
    28f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28f8:	00002460 	andeq	r2, r0, r0, ror #8
    28fc:	080094c0 	stmdaeq	r0, {r6, r7, sl, ip, pc}
    2900:	0000001e 	andeq	r0, r0, lr, lsl r0
    2904:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2908:	41018e02 	tstmi	r1, r2, lsl #28
    290c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2910:	00000007 	andeq	r0, r0, r7
    2914:	00000020 	andeq	r0, r0, r0, lsr #32
    2918:	00002460 	andeq	r2, r0, r0, ror #8
    291c:	080094e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, pc}
    2920:	000001a0 	andeq	r0, r0, r0, lsr #3
    2924:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    2928:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    292c:	41018e02 	tstmi	r1, r2, lsl #28
    2930:	0c41400e 	mcrreq	0, 0, r4, r1, cr14
    2934:	00003807 	andeq	r3, r0, r7, lsl #16
    2938:	0000001c 	andeq	r0, r0, ip, lsl r0
    293c:	00002460 	andeq	r2, r0, r0, ror #8
    2940:	08009680 	stmdaeq	r0, {r7, r9, sl, ip, pc}
    2944:	0000005c 	andeq	r0, r0, ip, asr r0
    2948:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    294c:	41018e02 	tstmi	r1, r2, lsl #28
    2950:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2954:	00000007 	andeq	r0, r0, r7
    2958:	0000001c 	andeq	r0, r0, ip, lsl r0
    295c:	00002460 	andeq	r2, r0, r0, ror #8
    2960:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
    2964:	0000005c 	andeq	r0, r0, ip, asr r0
    2968:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    296c:	41018e02 	tstmi	r1, r2, lsl #28
    2970:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2974:	00000007 	andeq	r0, r0, r7
    2978:	00000018 	andeq	r0, r0, r8, lsl r0
    297c:	00002460 	andeq	r2, r0, r0, ror #8
    2980:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
    2984:	0000028e 	andeq	r0, r0, lr, lsl #5
    2988:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    298c:	41018e02 	tstmi	r1, r2, lsl #28
    2990:	0000070d 	andeq	r0, r0, sp, lsl #14
    2994:	00000018 	andeq	r0, r0, r8, lsl r0
    2998:	00002460 	andeq	r2, r0, r0, ror #8
    299c:	080099c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, pc}
    29a0:	0000000c 	andeq	r0, r0, ip
    29a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29a8:	41018e02 	tstmi	r1, r2, lsl #28
    29ac:	0000070d 	andeq	r0, r0, sp, lsl #14
    29b0:	00000018 	andeq	r0, r0, r8, lsl r0
    29b4:	00002460 	andeq	r2, r0, r0, ror #8
    29b8:	080099d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, pc}
    29bc:	0000000c 	andeq	r0, r0, ip
    29c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29c4:	41018e02 	tstmi	r1, r2, lsl #28
    29c8:	0000070d 	andeq	r0, r0, sp, lsl #14
    29cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    29d0:	00002460 	andeq	r2, r0, r0, ror #8
    29d4:	080099e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, pc}
    29d8:	00000054 	andeq	r0, r0, r4, asr r0
    29dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29e0:	41018e02 	tstmi	r1, r2, lsl #28
    29e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    29e8:	00000007 	andeq	r0, r0, r7
    29ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    29f0:	00002460 	andeq	r2, r0, r0, ror #8
    29f4:	08009a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, pc}
    29f8:	00000024 	andeq	r0, r0, r4, lsr #32
    29fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a00:	41018e02 	tstmi	r1, r2, lsl #28
    2a04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2a08:	00000007 	andeq	r0, r0, r7
    2a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a10:	00002460 	andeq	r2, r0, r0, ror #8
    2a14:	08009a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, pc}
    2a18:	000000d4 	ldrdeq	r0, [r0], -r4
    2a1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a20:	41018e02 	tstmi	r1, r2, lsl #28
    2a24:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    2a28:	00000007 	andeq	r0, r0, r7
    2a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a30:	00002460 	andeq	r2, r0, r0, ror #8
    2a34:	08009b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, pc}
    2a38:	00000178 	andeq	r0, r0, r8, ror r1
    2a3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a40:	41018e02 	tstmi	r1, r2, lsl #28
    2a44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2a48:	00000007 	andeq	r0, r0, r7
    2a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a50:	00002460 	andeq	r2, r0, r0, ror #8
    2a54:	08009ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, pc}
    2a58:	00000048 	andeq	r0, r0, r8, asr #32
    2a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a60:	41018e02 	tstmi	r1, r2, lsl #28
    2a64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2a68:	00000007 	andeq	r0, r0, r7
    2a6c:	00000018 	andeq	r0, r0, r8, lsl r0
    2a70:	00002460 	andeq	r2, r0, r0, ror #8
    2a74:	08009cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, pc}
    2a78:	00000028 	andeq	r0, r0, r8, lsr #32
    2a7c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2a80:	180e4101 	stmdane	lr, {r0, r8, lr}
    2a84:	00070d41 	andeq	r0, r7, r1, asr #26
    2a88:	0000000c 	andeq	r0, r0, ip
    2a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a90:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a98:	00000018 	andeq	r0, r0, r8, lsl r0
    2a9c:	00002a88 	andeq	r2, r0, r8, lsl #21
    2aa0:	08009d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, ip, pc}
    2aa4:	00000030 	andeq	r0, r0, r0, lsr r0
    2aa8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2aac:	41018e02 	tstmi	r1, r2, lsl #28
    2ab0:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ab4:	00000018 	andeq	r0, r0, r8, lsl r0
    2ab8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2abc:	08009d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, pc}
    2ac0:	0000001e 	andeq	r0, r0, lr, lsl r0
    2ac4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2ac8:	41018e02 	tstmi	r1, r2, lsl #28
    2acc:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ad0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ad4:	00002a88 	andeq	r2, r0, r8, lsl #21
    2ad8:	08009d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, pc}
    2adc:	000000c8 	andeq	r0, r0, r8, asr #1
    2ae0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2ae4:	41018e02 	tstmi	r1, r2, lsl #28
    2ae8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2aec:	00000007 	andeq	r0, r0, r7
    2af0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2af4:	00002a88 	andeq	r2, r0, r8, lsl #21
    2af8:	08009e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, pc}
    2afc:	00000034 	andeq	r0, r0, r4, lsr r0
    2b00:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b04:	41018e02 	tstmi	r1, r2, lsl #28
    2b08:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b0c:	00000007 	andeq	r0, r0, r7
    2b10:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b14:	00002a88 	andeq	r2, r0, r8, lsl #21
    2b18:	08009e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, pc}
    2b1c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2b20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b24:	41018e02 	tstmi	r1, r2, lsl #28
    2b28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2b2c:	00000007 	andeq	r0, r0, r7
    2b30:	00000018 	andeq	r0, r0, r8, lsl r0
    2b34:	00002a88 	andeq	r2, r0, r8, lsl #21
    2b38:	08009e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, pc}
    2b3c:	00000034 	andeq	r0, r0, r4, lsr r0
    2b40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b44:	41018e02 	tstmi	r1, r2, lsl #28
    2b48:	0000070d 	andeq	r0, r0, sp, lsl #14
    2b4c:	00000018 	andeq	r0, r0, r8, lsl r0
    2b50:	00002a88 	andeq	r2, r0, r8, lsl #21
    2b54:	08009eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, pc}
    2b58:	00000020 	andeq	r0, r0, r0, lsr #32
    2b5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b60:	41018e02 	tstmi	r1, r2, lsl #28
    2b64:	0000070d 	andeq	r0, r0, sp, lsl #14
    2b68:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b6c:	00002a88 	andeq	r2, r0, r8, lsl #21
    2b70:	08009ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, pc}
    2b74:	00000034 	andeq	r0, r0, r4, lsr r0
    2b78:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b7c:	41018e02 	tstmi	r1, r2, lsl #28
    2b80:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2b84:	00000007 	andeq	r0, r0, r7
    2b88:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b8c:	00002a88 	andeq	r2, r0, r8, lsl #21
    2b90:	08009f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, pc}
    2b94:	0000004e 	andeq	r0, r0, lr, asr #32
    2b98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b9c:	41018e02 	tstmi	r1, r2, lsl #28
    2ba0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2ba4:	00000007 	andeq	r0, r0, r7
    2ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
    2bac:	00002a88 	andeq	r2, r0, r8, lsl #21
    2bb0:	08009f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip, pc}
    2bb4:	00000044 	andeq	r0, r0, r4, asr #32
    2bb8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bbc:	41018e02 	tstmi	r1, r2, lsl #28
    2bc0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bc4:	00000007 	andeq	r0, r0, r7
    2bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
    2bcc:	00002a88 	andeq	r2, r0, r8, lsl #21
    2bd0:	08009f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
    2bd4:	0000004e 	andeq	r0, r0, lr, asr #32
    2bd8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bdc:	41018e02 	tstmi	r1, r2, lsl #28
    2be0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2be4:	00000007 	andeq	r0, r0, r7
    2be8:	00000018 	andeq	r0, r0, r8, lsl r0
    2bec:	00002a88 	andeq	r2, r0, r8, lsl #21
    2bf0:	08009fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2bf4:	00000094 	muleq	r0, r4, r0
    2bf8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bfc:	41018e02 	tstmi	r1, r2, lsl #28
    2c00:	0000070d 	andeq	r0, r0, sp, lsl #14
    2c04:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c08:	00002a88 	andeq	r2, r0, r8, lsl #21
    2c0c:	0800a080 	stmdaeq	r0, {r7, sp, pc}
    2c10:	0000004e 	andeq	r0, r0, lr, asr #32
    2c14:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c18:	41018e02 	tstmi	r1, r2, lsl #28
    2c1c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c20:	00000007 	andeq	r0, r0, r7
    2c24:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c28:	00002a88 	andeq	r2, r0, r8, lsl #21
    2c2c:	0800a0d0 	stmdaeq	r0, {r4, r6, r7, sp, pc}
    2c30:	00000194 	muleq	r0, r4, r1
    2c34:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c38:	41018e02 	tstmi	r1, r2, lsl #28
    2c3c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c40:	00000007 	andeq	r0, r0, r7
    2c44:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c48:	00002a88 	andeq	r2, r0, r8, lsl #21
    2c4c:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
    2c50:	000001d4 	ldrdeq	r0, [r0], -r4
    2c54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c58:	41018e02 	tstmi	r1, r2, lsl #28
    2c5c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c60:	00000007 	andeq	r0, r0, r7
    2c64:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c68:	00002a88 	andeq	r2, r0, r8, lsl #21
    2c6c:	0800a438 	stmdaeq	r0, {r3, r4, r5, sl, sp, pc}
    2c70:	000001f4 	strdeq	r0, [r0], -r4
    2c74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c78:	41018e02 	tstmi	r1, r2, lsl #28
    2c7c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c80:	00000007 	andeq	r0, r0, r7
    2c84:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c88:	00002a88 	andeq	r2, r0, r8, lsl #21
    2c8c:	0800a62c 	stmdaeq	r0, {r2, r3, r5, r9, sl, sp, pc}
    2c90:	00000068 	andeq	r0, r0, r8, rrx
    2c94:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c98:	41018e02 	tstmi	r1, r2, lsl #28
    2c9c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2ca0:	00000007 	andeq	r0, r0, r7
    2ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ca8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2cac:	0800a694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, pc}
    2cb0:	00000054 	andeq	r0, r0, r4, asr r0
    2cb4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cb8:	41018e02 	tstmi	r1, r2, lsl #28
    2cbc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2cc0:	00000007 	andeq	r0, r0, r7
    2cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2cc8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2ccc:	0800a6e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp, pc}
    2cd0:	00000026 	andeq	r0, r0, r6, lsr #32
    2cd4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cd8:	41018e02 	tstmi	r1, r2, lsl #28
    2cdc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2ce0:	00000007 	andeq	r0, r0, r7
    2ce4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ce8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2cec:	0800a710 	stmdaeq	r0, {r4, r8, r9, sl, sp, pc}
    2cf0:	0000008c 	andeq	r0, r0, ip, lsl #1
    2cf4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cf8:	41018e02 	tstmi	r1, r2, lsl #28
    2cfc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2d00:	00000007 	andeq	r0, r0, r7
    2d04:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d08:	00002a88 	andeq	r2, r0, r8, lsl #21
    2d0c:	0800a79c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp, pc}
    2d10:	00000054 	andeq	r0, r0, r4, asr r0
    2d14:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d18:	41018e02 	tstmi	r1, r2, lsl #28
    2d1c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d20:	00000007 	andeq	r0, r0, r7
    2d24:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d28:	00002a88 	andeq	r2, r0, r8, lsl #21
    2d2c:	0800a7f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, pc}
    2d30:	000000a4 	andeq	r0, r0, r4, lsr #1
    2d34:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d38:	41018e02 	tstmi	r1, r2, lsl #28
    2d3c:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2d40:	00000007 	andeq	r0, r0, r7
    2d44:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d48:	00002a88 	andeq	r2, r0, r8, lsl #21
    2d4c:	0800a894 	stmdaeq	r0, {r2, r4, r7, fp, sp, pc}
    2d50:	0000015c 	andeq	r0, r0, ip, asr r1
    2d54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d58:	41018e02 	tstmi	r1, r2, lsl #28
    2d5c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d60:	00000007 	andeq	r0, r0, r7
    2d64:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d68:	00002a88 	andeq	r2, r0, r8, lsl #21
    2d6c:	0800a9f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, sp, pc}
    2d70:	000001dc 	ldrdeq	r0, [r0], -ip
    2d74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d78:	41018e02 	tstmi	r1, r2, lsl #28
    2d7c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d80:	00000007 	andeq	r0, r0, r7
    2d84:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d88:	00002a88 	andeq	r2, r0, r8, lsl #21
    2d8c:	0800abcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, sp, pc}
    2d90:	000001cc 	andeq	r0, r0, ip, asr #3
    2d94:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d98:	41018e02 	tstmi	r1, r2, lsl #28
    2d9c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2da0:	00000007 	andeq	r0, r0, r7
    2da4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2da8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2dac:	0800ad98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, pc}
    2db0:	0000006c 	andeq	r0, r0, ip, rrx
    2db4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2db8:	41018e02 	tstmi	r1, r2, lsl #28
    2dbc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2dc0:	00000007 	andeq	r0, r0, r7
    2dc4:	00000018 	andeq	r0, r0, r8, lsl r0
    2dc8:	00002a88 	andeq	r2, r0, r8, lsl #21
    2dcc:	0800ae04 	stmdaeq	r0, {r2, r9, sl, fp, sp, pc}
    2dd0:	00000034 	andeq	r0, r0, r4, lsr r0
    2dd4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2dd8:	180e4101 	stmdane	lr, {r0, r8, lr}
    2ddc:	00070d41 	andeq	r0, r7, r1, asr #26
    2de0:	0000000c 	andeq	r0, r0, ip
    2de4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2de8:	7c020001 	stcvc	0, cr0, [r2], {1}
    2dec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2df0:	00000024 	andeq	r0, r0, r4, lsr #32
    2df4:	00002de0 	andeq	r2, r0, r0, ror #27
    2df8:	0800ae38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, pc}
    2dfc:	00000388 	andeq	r0, r0, r8, lsl #7
    2e00:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2e04:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2e08:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2e0c:	8a048905 	bhi	125228 <_Min_Stack_Size+0x124e28>
    2e10:	8e028b03 	vmlahi.f64	d8, d2, d3
    2e14:	300e4801 	andcc	r4, lr, r1, lsl #16
    2e18:	0000000c 	andeq	r0, r0, ip
    2e1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e20:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2e28:	0000000c 	andeq	r0, r0, ip
    2e2c:	00002e18 	andeq	r2, r0, r8, lsl lr
    2e30:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
    2e34:	00000006 	andeq	r0, r0, r6
    2e38:	0000000c 	andeq	r0, r0, ip
    2e3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e40:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2e48:	00000020 	andeq	r0, r0, r0, lsr #32
    2e4c:	00002e38 	andeq	r2, r0, r8, lsr lr
    2e50:	0800b1c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp, pc}
    2e54:	000000aa 	andeq	r0, r0, sl, lsr #1
    2e58:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
    2e5c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    2e60:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    2e64:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
    2e68:	0000400e 	andeq	r4, r0, lr
    2e6c:	0000000c 	andeq	r0, r0, ip
    2e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2e74:	7c020001 	stcvc	0, cr0, [r2], {1}
    2e78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2e7c:	00000024 	andeq	r0, r0, r4, lsr #32
    2e80:	00002e6c 	andeq	r2, r0, ip, ror #28
    2e84:	0800b274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, pc}
    2e88:	00000332 	andeq	r0, r0, r2, lsr r3
    2e8c:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2e90:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2e94:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2e98:	8a048905 	bhi	1252b4 <_Min_Stack_Size+0x124eb4>
    2e9c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2ea0:	500e4501 	andpl	r4, lr, r1, lsl #10
    2ea4:	0000000c 	andeq	r0, r0, ip
    2ea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2eac:	7c020001 	stcvc	0, cr0, [r2], {1}
    2eb0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2eb4:	00000024 	andeq	r0, r0, r4, lsr #32
    2eb8:	00002ea4 	andeq	r2, r0, r4, lsr #29
    2ebc:	0800b5a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, sp, pc}
    2ec0:	00000428 	andeq	r0, r0, r8, lsr #8
    2ec4:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2ec8:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2ecc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2ed0:	8a048905 	bhi	1252ec <_Min_Stack_Size+0x124eec>
    2ed4:	8e028b03 	vmlahi.f64	d8, d2, d3
    2ed8:	400e4801 	andmi	r4, lr, r1, lsl #16
    2edc:	0000000c 	andeq	r0, r0, ip
    2ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2ee4:	7c020001 	stcvc	0, cr0, [r2], {1}
    2ee8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2eec:	00000024 	andeq	r0, r0, r4, lsr #32
    2ef0:	00002edc 	ldrdeq	r2, [r0], -ip
    2ef4:	0800b9d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp, pc}
    2ef8:	00000b50 	andeq	r0, r0, r0, asr fp
    2efc:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    2f00:	86088509 	strhi	r8, [r8], -r9, lsl #10
    2f04:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    2f08:	8a048905 	bhi	125324 <_Min_Stack_Size+0x124f24>
    2f0c:	8e028b03 	vmlahi.f64	d8, d2, d3
    2f10:	700e4701 	andvc	r4, lr, r1, lsl #14
    2f14:	0000000c 	andeq	r0, r0, ip
    2f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f1c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f24:	00000020 	andeq	r0, r0, r0, lsr #32
    2f28:	00002f14 	andeq	r2, r0, r4, lsl pc
    2f2c:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
    2f30:	0000017e 	andeq	r0, r0, lr, ror r1
    2f34:	83200e44 	teqhi	r0, #68, 28	; 0x440
    2f38:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    2f3c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    2f40:	89038804 	stmdbhi	r3, {r2, fp, pc}
    2f44:	00018e02 	andeq	r8, r1, r2, lsl #28
    2f48:	0000000c 	andeq	r0, r0, ip
    2f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f50:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f58:	0000000c 	andeq	r0, r0, ip
    2f5c:	00002f48 	andeq	r2, r0, r8, asr #30
    2f60:	0800c6a0 	stmdaeq	r0, {r5, r7, r9, sl, lr, pc}
    2f64:	0000000c 	andeq	r0, r0, ip
    2f68:	0000000c 	andeq	r0, r0, ip
    2f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f70:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f78:	0000000c 	andeq	r0, r0, ip
    2f7c:	00002f68 	andeq	r2, r0, r8, ror #30
    2f80:	0800c6ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr, pc}
    2f84:	00000050 	andeq	r0, r0, r0, asr r0
    2f88:	0000000c 	andeq	r0, r0, ip
    2f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f90:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f98:	0000000c 	andeq	r0, r0, ip
    2f9c:	00002f88 	andeq	r2, r0, r8, lsl #31
    2fa0:	0800c6fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, lr, pc}
    2fa4:	00000004 	andeq	r0, r0, r4
    2fa8:	0000000c 	andeq	r0, r0, ip
    2fac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2fb0:	7c020001 	stcvc	0, cr0, [r2], {1}
    2fb4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2fb8:	0000000c 	andeq	r0, r0, ip
    2fbc:	00002fa8 	andeq	r2, r0, r8, lsr #31
    2fc0:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
    2fc4:	0000000a 	andeq	r0, r0, sl
    2fc8:	0000000c 	andeq	r0, r0, ip
    2fcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2fd0:	7c020001 	stcvc	0, cr0, [r2], {1}
    2fd4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2fd8:	00000020 	andeq	r0, r0, r0, lsr #32
    2fdc:	00002fc8 	andeq	r2, r0, r8, asr #31
    2fe0:	0800c70c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr, pc}
    2fe4:	00000120 	andeq	r0, r0, r0, lsr #2
    2fe8:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    2fec:	86068507 	strhi	r8, [r6], -r7, lsl #10
    2ff0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    2ff4:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    2ff8:	280e4601 	stmdacs	lr, {r0, r9, sl, lr}
    2ffc:	0000000c 	andeq	r0, r0, ip
    3000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3004:	7c020001 	stcvc	0, cr0, [r2], {1}
    3008:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    300c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3010:	00002ffc 	strdeq	r2, [r0], -ip
    3014:	0800c830 	stmdaeq	r0, {r4, r5, fp, lr, pc}
    3018:	00000118 	andeq	r0, r0, r8, lsl r1
    301c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xe44
    3020:	86058506 	strhi	r8, [r5], -r6, lsl #10
    3024:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    3028:	00018e02 	andeq	r8, r1, r2, lsl #28
    302c:	0000000c 	andeq	r0, r0, ip
    3030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3034:	7c020001 	stcvc	0, cr0, [r2], {1}
    3038:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    303c:	00000014 	andeq	r0, r0, r4, lsl r0
    3040:	0000302c 	andeq	r3, r0, ip, lsr #32
    3044:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
    3048:	00000012 	andeq	r0, r0, r2, lsl r0
    304c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    3050:	00018502 	andeq	r8, r1, r2, lsl #10
    3054:	0000000c 	andeq	r0, r0, ip
    3058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    305c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3060:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3064:	0000000c 	andeq	r0, r0, ip
    3068:	00003054 	andeq	r3, r0, r4, asr r0
    306c:	0800c95c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, lr, pc}
    3070:	0000000c 	andeq	r0, r0, ip

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800ae38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, pc}
       4:	0800ae94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, sp, pc}
       8:	93500006 	cmpls	r0, #6
       c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      10:	0800ae94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, sp, pc}
      14:	0800ae9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp, pc}
      18:	03f30006 	mvnseq	r0, #6
      1c:	9f2500f5 	svcls	0x002500f5
      20:	0800ae9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, sp, pc}
      24:	0800aeb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, sp, pc}
      28:	93500006 	cmpls	r0, #6
      2c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      30:	0800aeb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, sp, pc}
      34:	0800aebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
      38:	03f30006 	mvnseq	r0, #6
      3c:	9f2500f5 	svcls	0x002500f5
      40:	0800aebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
      44:	0800aff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
      48:	935b0006 	cmpls	fp, #6
      4c:	04935a04 	ldreq	r5, [r3], #2564	; 0xa04
      50:	0800b002 	stmdaeq	r0, {r1, ip, sp, pc}
      54:	0800b004 	stmdaeq	r0, {r2, ip, sp, pc}
      58:	93500006 	cmpls	r0, #6
      5c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      60:	0800b004 	stmdaeq	r0, {r2, ip, sp, pc}
      64:	0800b012 	stmdaeq	r0, {r1, r4, ip, sp, pc}
      68:	03f30006 	mvnseq	r0, #6
      6c:	9f2500f5 	svcls	0x002500f5
      70:	0800b01c 	stmdaeq	r0, {r2, r3, r4, ip, sp, pc}
      74:	0800b025 	stmdaeq	r0, {r0, r2, r5, ip, sp, pc}
      78:	93500006 	cmpls	r0, #6
      7c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      80:	0800b025 	stmdaeq	r0, {r0, r2, r5, ip, sp, pc}
      84:	0800b042 	stmdaeq	r0, {r1, r6, ip, sp, pc}
      88:	03f30006 	mvnseq	r0, #6
      8c:	9f2500f5 	svcls	0x002500f5
      90:	0800b042 	stmdaeq	r0, {r1, r6, ip, sp, pc}
      94:	0800b045 	stmdaeq	r0, {r0, r2, r6, ip, sp, pc}
      98:	93500006 	cmpls	r0, #6
      9c:	04935104 	ldreq	r5, [r3], #260	; 0x104
      a0:	0800b045 	stmdaeq	r0, {r0, r2, r6, ip, sp, pc}
      a4:	0800b054 	stmdaeq	r0, {r2, r4, r6, ip, sp, pc}
      a8:	03f30006 	mvnseq	r0, #6
      ac:	9f2500f5 	svcls	0x002500f5
      b0:	0800b054 	stmdaeq	r0, {r2, r4, r6, ip, sp, pc}
      b4:	0800b09c 	stmdaeq	r0, {r2, r3, r4, r7, ip, sp, pc}
      b8:	93540006 	cmpls	r4, #6
      bc:	04935504 	ldreq	r5, [r3], #1284	; 0x504
      c0:	0800b09c 	stmdaeq	r0, {r2, r3, r4, r7, ip, sp, pc}
      c4:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
      c8:	93500006 	cmpls	r0, #6
      cc:	04935104 	ldreq	r5, [r3], #260	; 0x104
      d0:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
      d4:	0800b0bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp, pc}
      d8:	935b0006 	cmpls	fp, #6
      dc:	04935a04 	ldreq	r5, [r3], #2564	; 0xa04
      e0:	0800b0c0 	stmdaeq	r0, {r6, r7, ip, sp, pc}
      e4:	0800b10c 	stmdaeq	r0, {r2, r3, r8, ip, sp, pc}
      e8:	93540006 	cmpls	r4, #6
      ec:	04935504 	ldreq	r5, [r3], #1284	; 0x504
      f0:	0800b10c 	stmdaeq	r0, {r2, r3, r8, ip, sp, pc}
      f4:	0800b10e 	stmdaeq	r0, {r1, r2, r3, r8, ip, sp, pc}
      f8:	93500006 	cmpls	r0, #6
      fc:	04935104 	ldreq	r5, [r3], #260	; 0x104
     100:	0800b10e 	stmdaeq	r0, {r1, r2, r3, r8, ip, sp, pc}
     104:	0800b126 	stmdaeq	r0, {r1, r2, r5, r8, ip, sp, pc}
     108:	93540006 	cmpls	r4, #6
     10c:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     110:	0800b126 	stmdaeq	r0, {r1, r2, r5, r8, ip, sp, pc}
     114:	0800b128 	stmdaeq	r0, {r3, r5, r8, ip, sp, pc}
     118:	93500006 	cmpls	r0, #6
     11c:	04935104 	ldreq	r5, [r3], #260	; 0x104
     120:	0800b128 	stmdaeq	r0, {r3, r5, r8, ip, sp, pc}
     124:	0800b15c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp, pc}
     128:	93540006 	cmpls	r4, #6
     12c:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     130:	0800b15c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp, pc}
     134:	0800b1c0 	stmdaeq	r0, {r6, r7, r8, ip, sp, pc}
     138:	93500006 	cmpls	r0, #6
     13c:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
     148:	0800aee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp, pc}
     14c:	0800afb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, pc}
     150:	93540006 	cmpls	r4, #6
     154:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     158:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
     15c:	0800b0c0 	stmdaeq	r0, {r6, r7, ip, sp, pc}
     160:	93540006 	cmpls	r4, #6
     164:	04935504 	ldreq	r5, [r3], #1284	; 0x504
	...
     170:	0800af4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, sp, pc}
     174:	0800b002 	stmdaeq	r0, {r1, ip, sp, pc}
     178:	93580006 	cmpls	r8, #6
     17c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     180:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
     184:	0800b0c0 	stmdaeq	r0, {r6, r7, ip, sp, pc}
     188:	93580006 	cmpls	r8, #6
     18c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
	...
     198:	0800afa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, sp, pc}
     19c:	0800afb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, r9, sl, fp, sp, pc}
     1a0:	93520006 	cmpls	r2, #6
     1a4:	04935304 	ldreq	r5, [r3], #772	; 0x304
     1a8:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
     1ac:	0800b0a5 	stmdaeq	r0, {r0, r2, r5, r7, ip, sp, pc}
     1b0:	93520006 	cmpls	r2, #6
     1b4:	04935304 	ldreq	r5, [r3], #772	; 0x304
	...
     1c0:	0800aed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp, pc}
     1c4:	0800af48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, sp, pc}
     1c8:	93580006 	cmpls	r8, #6
     1cc:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     1d0:	0800aff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
     1d4:	0800affc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
     1d8:	93500006 	cmpls	r0, #6
     1dc:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
     1e8:	0800ae52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, sp, pc}
     1ec:	0800aebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
     1f0:	bc580001 	mrrclt	0, 0, r0, r8, cr1
     1f4:	020800ae 	andeq	r0, r8, #174	; 0xae
     1f8:	090800b0 	stmdbeq	r8, {r4, r5, r7}
     1fc:	0c007700 	stceq	7, cr7, [r0], {-0}
     200:	7fffffff 	svcvc	0x00ffffff
     204:	b0029f1a 	andlt	r9, r2, sl, lsl pc
     208:	b0120800 	andslt	r0, r2, r0, lsl #16
     20c:	00010800 	andeq	r0, r1, r0, lsl #16
     210:	00b01258 	adcseq	r1, r0, r8, asr r2
     214:	00b01c08 	adcseq	r1, r0, r8, lsl #24
     218:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     21c:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     220:	9f1a7fff 	svcls	0x001a7fff
     224:	0800b01c 	stmdaeq	r0, {r2, r3, r4, ip, sp, pc}
     228:	0800b07a 	stmdaeq	r0, {r1, r3, r4, r5, r6, ip, sp, pc}
     22c:	7a580001 	bvc	1600238 <_Min_Stack_Size+0x15ffe38>
     230:	c00800b0 	strhgt	r0, [r8], -r0	; <UNPREDICTABLE>
     234:	090800b0 	stmdbeq	r8, {r4, r5, r7}
     238:	0c007700 	stceq	7, cr7, [r0], {-0}
     23c:	7fffffff 	svcvc	0x00ffffff
     240:	b0c09f1a 	sbclt	r9, r0, sl, lsl pc
     244:	b0dc0800 	sbcslt	r0, ip, r0, lsl #16
     248:	00010800 	andeq	r0, r1, r0, lsl #16
     24c:	00b0dc58 	adcseq	sp, r0, r8, asr ip
     250:	00b10e08 	adcseq	r0, r1, r8, lsl #28
     254:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     258:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     25c:	9f1a7fff 	svcls	0x001a7fff
     260:	0800b10e 	stmdaeq	r0, {r1, r2, r3, r8, ip, sp, pc}
     264:	0800b138 	stmdaeq	r0, {r3, r4, r5, r8, ip, sp, pc}
     268:	38580001 	ldmdacc	r8, {r0}^
     26c:	c00800b1 	strhgt	r0, [r8], -r1
     270:	090800b1 	stmdbeq	r8, {r0, r4, r5, r7}
     274:	0c007700 	stceq	7, cr7, [r0], {-0}
     278:	7fffffff 	svcvc	0x00ffffff
     27c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     280:	00000000 	andeq	r0, r0, r0
     284:	aebc0000 	cdpge	0, 11, cr0, cr12, cr0, {0}
     288:	aecb0800 	cdpge	8, 12, cr0, cr11, cr0, {0}
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00af9e5c 	adceq	r9, pc, ip, asr lr	; <UNPREDICTABLE>
     294:	00afb308 	adceq	fp, pc, r8, lsl #6
     298:	5c000108 	stfpls	f0, [r0], {8}
     29c:	0800b062 	stmdaeq	r0, {r1, r5, r6, ip, sp, pc}
     2a0:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
     2a4:	9f300002 	svcls	0x00300002
     2a8:	0800b09e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp, pc}
     2ac:	0800b0a5 	stmdaeq	r0, {r0, r2, r5, r7, ip, sp, pc}
     2b0:	cc5c0001 	mrrcgt	0, 0, r0, ip, cr1
     2b4:	0e0800b0 	mcreq	0, 0, r0, cr8, cr0, {5}
     2b8:	020800b1 	andeq	r0, r8, #177	; 0xb1
     2bc:	0e9f3200 	cdpeq	2, 9, cr3, cr15, cr0, {0}
     2c0:	280800b1 	stmdacs	r8, {r0, r4, r5, r7}
     2c4:	020800b1 	andeq	r0, r8, #177	; 0xb1
     2c8:	289f3300 	ldmcs	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
     2cc:	c00800b1 	strhgt	r0, [r8], -r1
     2d0:	020800b1 	andeq	r0, r8, #177	; 0xb1
     2d4:	009f3100 	addseq	r3, pc, r0, lsl #2
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	52000000 	andpl	r0, r0, #0
     2e0:	c00800ae 	andgt	r0, r8, lr, lsr #1
     2e4:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     2e8:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     2ec:	00049357 	andeq	r9, r4, r7, asr r3
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	c4000000 	strgt	r0, [r0], #-0
     2f8:	c40800b1 	strgt	r0, [r8], #-177	; 0xb1
     2fc:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     300:	04935000 	ldreq	r5, [r3], #0
     304:	00049351 	andeq	r9, r4, r1, asr r3
     308:	00000000 	andeq	r0, r0, r0
     30c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     310:	dd0800b1 	stcle	0, cr0, [r8, #-708]	; 0xfffffd3c
     314:	060800b1 			; <UNDEFINED> instruction: 0x060800b1
     318:	04935000 	ldreq	r5, [r3], #0
     31c:	dd049351 	stcle	3, cr9, [r4, #-324]	; 0xfffffebc
     320:	720800b1 	andvc	r0, r8, #177	; 0xb1
     324:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     328:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     32c:	009f2500 	addseq	r2, pc, r0, lsl #10
     330:	00000000 	andeq	r0, r0, r0
     334:	74000000 	strvc	r0, [r0], #-0
     338:	8d0800b2 	stchi	0, cr0, [r8, #-712]	; 0xfffffd38
     33c:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     340:	04935000 	ldreq	r5, [r3], #0
     344:	8d049351 	stchi	3, cr9, [r4, #-324]	; 0xfffffebc
     348:	a60800b2 			; <UNDEFINED> instruction: 0xa60800b2
     34c:	060800b5 			; <UNDEFINED> instruction: 0x060800b5
     350:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     354:	009f2500 	addseq	r2, pc, r0, lsl #10
     358:	00000000 	andeq	r0, r0, r0
     35c:	74000000 	strvc	r0, [r0], #-0
     360:	8d0800b2 	stchi	0, cr0, [r8, #-712]	; 0xfffffd38
     364:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     368:	04935200 	ldreq	r5, [r3], #512	; 0x200
     36c:	8d049353 	stchi	3, cr9, [r4, #-332]	; 0xfffffeb4
     370:	fe0800b2 	mcr2	0, 0, r0, cr8, cr2, {5}
     374:	060800b2 			; <UNDEFINED> instruction: 0x060800b2
     378:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     37c:	089f2502 	ldmeq	pc, {r1, r8, sl, sp}	; <UNPREDICTABLE>
     380:	740800b3 	strvc	r0, [r8], #-179	; 0xb3
     384:	060800b3 			; <UNDEFINED> instruction: 0x060800b3
     388:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     38c:	7e9f2502 	cdpvc	5, 9, cr2, cr15, cr2, {0}
     390:	e80800b3 	stmda	r8, {r0, r1, r4, r5, r7}
     394:	060800b3 			; <UNDEFINED> instruction: 0x060800b3
     398:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     39c:	fc9f2502 	ldc2	5, cr2, [pc], {2}
     3a0:	f00800b3 			; <UNDEFINED> instruction: 0xf00800b3
     3a4:	060800b4 			; <UNDEFINED> instruction: 0x060800b4
     3a8:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
     3ac:	f09f2502 			; <UNDEFINED> instruction: 0xf09f2502
     3b0:	f80800b4 			; <UNDEFINED> instruction: 0xf80800b4
     3b4:	100800b4 	strhne	r0, [r8], -r4
     3b8:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     3bc:	000825f4 	strdeq	r2, [r8], -r4
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	1e3fe000 	cdpne	0, 3, cr14, cr15, cr0, {0}
     3c8:	00b50c9f 	umlalseq	r0, r5, pc, ip	; <UNPREDICTABLE>
     3cc:	00b53608 	adcseq	r3, r5, r8, lsl #12
     3d0:	f3000608 	vmax.u8	d0, d0, d8
     3d4:	2502f503 	strcs	pc, [r2, #-1283]	; 0x503
     3d8:	00b5369f 	umlalseq	r3, r5, pc, r6	; <UNPREDICTABLE>
     3dc:	00b55008 	adcseq	r5, r5, r8
     3e0:	f5001008 			; <UNDEFINED> instruction: 0xf5001008
     3e4:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     3e8:	00000008 	andeq	r0, r0, r8
     3ec:	e0000000 	and	r0, r0, r0
     3f0:	709f1e3f 	addsvc	r1, pc, pc, lsr lr	; <UNPREDICTABLE>
     3f4:	820800b5 	andhi	r0, r8, #181	; 0xb5
     3f8:	100800b5 	strhne	r0, [r8], -r5
     3fc:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     400:	000825f4 	strdeq	r2, [r8], -r4
     404:	00000000 	andeq	r0, r0, r0
     408:	1e3fe000 	cdpne	0, 3, cr14, cr15, cr0, {0}
     40c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     410:	00000000 	andeq	r0, r0, r0
     414:	00b29800 	adcseq	r9, r2, r0, lsl #16
     418:	00b2e408 	adcseq	lr, r2, r8, lsl #8
     41c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     420:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     424:	00b30804 	adcseq	r0, r3, r4, lsl #16
     428:	00b36408 	adcseq	r6, r3, r8, lsl #8
     42c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     430:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     434:	00b37e04 	adcseq	r7, r3, r4, lsl #28
     438:	00b3e808 	adcseq	lr, r3, r8, lsl #16
     43c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     440:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     444:	00b3fc04 	adcseq	pc, r3, r4, lsl #24
     448:	00b44e08 	adcseq	r4, r4, r8, lsl #28
     44c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     450:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     454:	00b46204 	adcseq	r6, r4, r4, lsl #4
     458:	00b48c08 	adcseq	r8, r4, r8, lsl #24
     45c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     460:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     464:	00b4b804 	adcseq	fp, r4, r4, lsl #16
     468:	00b4e008 	adcseq	lr, r4, r8
     46c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     470:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     474:	00b52204 	adcseq	r2, r5, r4, lsl #4
     478:	00b52608 	adcseq	r2, r5, r8, lsl #12
     47c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     480:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     484:	00000004 	andeq	r0, r0, r4
     488:	00000000 	andeq	r0, r0, r0
     48c:	00b5a800 	adcseq	sl, r5, r0, lsl #16
     490:	00b5db08 	adcseq	sp, r5, r8, lsl #22
     494:	50000608 	andpl	r0, r0, r8, lsl #12
     498:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     49c:	00b5db04 	adcseq	sp, r5, r4, lsl #22
     4a0:	00b5f208 	adcseq	pc, r5, r8, lsl #4
     4a4:	f3000608 	vmax.u8	d0, d0, d8
     4a8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4ac:	00b5f29f 	umlalseq	pc, r5, pc, r2	; <UNPREDICTABLE>
     4b0:	00b60f08 	adcseq	r0, r6, r8, lsl #30
     4b4:	50000608 	andpl	r0, r0, r8, lsl #12
     4b8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4bc:	00b60f04 	adcseq	r0, r6, r4, lsl #30
     4c0:	00b7f208 	adcseq	pc, r7, r8, lsl #4
     4c4:	f3000608 	vmax.u8	d0, d0, d8
     4c8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4cc:	00b7f29f 	umlalseq	pc, r7, pc, r2	; <UNPREDICTABLE>
     4d0:	00b7fb08 	adcseq	pc, r7, r8, lsl #22
     4d4:	50000608 	andpl	r0, r0, r8, lsl #12
     4d8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4dc:	00b7fb04 	adcseq	pc, r7, r4, lsl #22
     4e0:	00b86e08 	adcseq	r6, r8, r8, lsl #28
     4e4:	f3000608 	vmax.u8	d0, d0, d8
     4e8:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     4ec:	00b86e9f 	umlalseq	r6, r8, pc, lr	; <UNPREDICTABLE>
     4f0:	00b87508 	adcseq	r7, r8, r8, lsl #10
     4f4:	50000608 	andpl	r0, r0, r8, lsl #12
     4f8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     4fc:	00b87504 	adcseq	r7, r8, r4, lsl #10
     500:	00b9d008 	adcseq	sp, r9, r8
     504:	f3000608 	vmax.u8	d0, d0, d8
     508:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
     50c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     510:	00000000 	andeq	r0, r0, r0
     514:	00b64e00 	adcseq	r4, r6, r0, lsl #28
     518:	00b76a08 	adcseq	r6, r7, r8, lsl #20
     51c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     520:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     524:	00b7e004 	adcseq	lr, r7, r4
     528:	00b7e808 	adcseq	lr, r7, r8, lsl #16
     52c:	5a000608 	bpl	1d54 <_Min_Stack_Size+0x1954>
     530:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
     534:	00b82804 	adcseq	r2, r8, r4, lsl #16
     538:	00b86c08 	adcseq	r6, r8, r8, lsl #24
     53c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     540:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     544:	00b86c04 	adcseq	r6, r8, r4, lsl #24
     548:	00b86e08 	adcseq	r6, r8, r8, lsl #28
     54c:	50000608 	andpl	r0, r0, r8, lsl #12
     550:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     554:	00b88004 	adcseq	r8, r8, r4
     558:	00b96008 	adcseq	r6, r9, r8
     55c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     560:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     564:	00000004 	andeq	r0, r0, r4
     568:	00000000 	andeq	r0, r0, r0
     56c:	00b62e00 	adcseq	r2, r6, r0, lsl #28
     570:	00b63708 	adcseq	r3, r6, r8, lsl #14
     574:	f4001008 	vst4.8	{d1-d4}, [r0], r8
     578:	00000825 	andeq	r0, r0, r5, lsr #16
     57c:	00000000 	andeq	r0, r0, r0
     580:	02f53ff0 	rscseq	r3, r5, #240, 30	; 0x3c0
     584:	1e9f1c25 	cdpne	12, 9, cr1, cr15, cr5, {1}
     588:	290800b7 	stmdbcs	r8, {r0, r1, r2, r4, r5, r7}
     58c:	060800b7 			; <UNDEFINED> instruction: 0x060800b7
     590:	04935000 	ldreq	r5, [r3], #0
     594:	29049351 	stmdbcs	r4, {r0, r4, r6, r8, r9, ip, pc}
     598:	de0800b7 	mcrle	0, 0, r0, cr8, cr7, {5}
     59c:	060800b7 			; <UNDEFINED> instruction: 0x060800b7
     5a0:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
     5a4:	2804935b 	stmdacs	r4, {r0, r1, r3, r4, r6, r8, r9, ip, pc}
     5a8:	6e0800b8 	mcrvs	0, 0, r0, cr8, cr8, {5}
     5ac:	0c0800b8 	stceq	0, cr0, [r8], {184}	; 0xb8
     5b0:	f6489100 			; <UNDEFINED> instruction: 0xf6489100
     5b4:	50912508 	addspl	r2, r1, r8, lsl #10
     5b8:	1b2508f6 	blne	942998 <_Min_Stack_Size+0x942598>
     5bc:	00b8809f 	umlalseq	r8, r8, pc, r0	; <UNPREDICTABLE>
     5c0:	00b96008 	adcseq	r6, r9, r8
     5c4:	f500ac08 			; <UNDEFINED> instruction: 0xf500ac08
     5c8:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     5cc:	fdf70908 	ldc2l	9, cr0, [r7, #32]!
     5d0:	023de10d 	eorseq	lr, sp, #1073741827	; 0x40000003
     5d4:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     5d8:	01b28808 			; <UNDEFINED> instruction: 0x01b28808
     5dc:	49efe075 	stmibmi	pc!, {r0, r2, r4, r5, r6, sp, lr, pc}^	; <UNPREDICTABLE>
     5e0:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     5e4:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     5e8:	688f3b08 	stmvs	pc, {r3, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
     5ec:	a48228b5 	strge	r2, [r2], #2229	; 0x8b5
     5f0:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     5f4:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     5f8:	88445508 	stmdahi	r4, {r3, r8, sl, ip, lr}^
     5fc:	c9c1550e 	stmibgt	r1, {r1, r2, r3, r8, sl, ip, lr}^
     600:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     604:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     608:	eb6f7d08 	bl	1bdfa30 <_Min_Stack_Size+0x1bdf630>
     60c:	d4d61203 	ldrble	r1, [r6], #515	; 0x203
     610:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     614:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     618:	55555508 	ldrbpl	r5, [r5, #-1288]	; 0x508
     61c:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
     620:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     624:	04f51e25 	ldrbteq	r1, [r5], #3621	; 0xe25
     628:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
     62c:	b12e9282 	smlawblt	lr, r2, r2, r9
     630:	3fb3b8c5 	svccc	0x00b3b8c5
     634:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     638:	1b8d0159 	blne	fe340ba4 <_estack+0xde310ba4>
     63c:	3fe6066c 	svccc	0x00e6066c
     640:	2504f51c 	strcs	pc, [r4, #-1308]	; 0x51c
     644:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     648:	9c598ac8 	mrrcls	10, 12, r8, r9, cr8
     64c:	40002ae5 	andmi	r2, r0, r5, ror #21
     650:	2504f522 	strcs	pc, [r4, #-1314]	; 0x522
     654:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     658:	1c8a2d4b 	stcne	13, cr2, [sl], {75}	; 0x4b
     65c:	40033a27 	andmi	r3, r3, r7, lsr #20
     660:	2504f51c 	strcs	pc, [r4, #-1308]	; 0x51c
     664:	0825f41e 	stmdaeq	r5!, {r1, r2, r3, r4, sl, ip, sp, lr, pc}
     668:	00000000 	andeq	r0, r0, r0
     66c:	3ff00000 	svccc	0x00f00000	; IMB
     670:	009f1b22 	addseq	r1, pc, r2, lsr #22
     674:	00000000 	andeq	r0, r0, r0
     678:	b6000000 	strlt	r0, [r0], -r0
     67c:	b80800b6 	stmdalt	r8, {r1, r2, r4, r5, r7}
     680:	060800b6 			; <UNDEFINED> instruction: 0x060800b6
     684:	04935000 	ldreq	r5, [r3], #0
     688:	b8049351 	stmdalt	r4, {r0, r4, r6, r8, r9, ip, pc}
     68c:	500800b6 	strhpl	r0, [r8], -r6
     690:	020800b7 	andeq	r0, r8, #183	; 0xb7
     694:	50489100 	subpl	r9, r8, r0, lsl #2
     698:	6a0800b7 	bvs	20097c <_Min_Stack_Size+0x20057c>
     69c:	3c0800b7 	stccc	0, cr0, [r8], {183}	; 0xb7
     6a0:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     6a4:	070825f4 			; <UNDEFINED> instruction: 0x070825f4
     6a8:	2633145c 			; <UNDEFINED> instruction: 0x2633145c
     6ac:	f53c91a6 			; <UNDEFINED> instruction: 0xf53c91a6
     6b0:	0af52504 	beq	ffd49ac8 <_estack+0xdfd19ac8>
     6b4:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
     6b8:	007d1c1e 	rsbseq	r1, sp, lr, lsl ip
     6bc:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
     6c0:	1b22250a 	blne	889af0 <_Min_Stack_Size+0x8896f0>
     6c4:	f52504f5 			; <UNDEFINED> instruction: 0xf52504f5
     6c8:	0af5250a 	beq	ffd49af8 <_estack+0xdfd19af8>
     6cc:	7d1c1e25 	ldcvc	14, cr1, [ip, #-148]	; 0xffffff6c
     6d0:	2508f600 	strcs	pc, [r8, #-1536]	; 0x600
     6d4:	22250af5 	eorcs	r0, r5, #1003520	; 0xf5000
     6d8:	1c1c221b 	lfmne	f2, 4, [ip], {27}
     6dc:	00b8289f 	umlalseq	r2, r8, pc, r8	; <UNPREDICTABLE>
     6e0:	00b86e08 	adcseq	r6, r8, r8, lsl #28
     6e4:	91000208 	tstls	r0, r8, lsl #4
     6e8:	00b88048 	adcseq	r8, r8, r8, asr #32
     6ec:	00b96008 	adcseq	r6, r9, r8
     6f0:	f5006008 			; <UNDEFINED> instruction: 0xf5006008
     6f4:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     6f8:	fdf70908 	ldc2l	9, cr0, [r7, #32]!
     6fc:	023de10d 	eorseq	lr, sp, #1073741827	; 0x40000003
     700:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     704:	01b28808 			; <UNDEFINED> instruction: 0x01b28808
     708:	49efe075 	stmibmi	pc!, {r0, r2, r4, r5, r6, sp, lr, pc}^	; <UNPREDICTABLE>
     70c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     710:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     714:	688f3b08 	stmvs	pc, {r3, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
     718:	a48228b5 	strge	r2, [r2], #2229	; 0x8b5
     71c:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     720:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     724:	88445508 	stmdahi	r4, {r3, r8, sl, ip, lr}^
     728:	c9c1550e 	stmibgt	r1, {r1, r2, r3, r8, sl, ip, lr}^
     72c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     730:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     734:	eb6f7d08 	bl	1bdfb5c <_Min_Stack_Size+0x1bdf75c>
     738:	d4d61203 	ldrble	r1, [r6], #515	; 0x203
     73c:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     740:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     744:	55555508 	ldrbpl	r5, [r5, #-1288]	; 0x508
     748:	c5555555 	ldrbgt	r5, [r5, #-1365]	; 0x555
     74c:	04f5223f 	ldrbteq	r2, [r5], #575	; 0x23f
     750:	009f1e25 	addseq	r1, pc, r5, lsr #28
     754:	00000000 	andeq	r0, r0, r0
     758:	04000000 	streq	r0, [r0], #-0
     75c:	060800b7 			; <UNDEFINED> instruction: 0x060800b7
     760:	060800b7 			; <UNDEFINED> instruction: 0x060800b7
     764:	04935000 	ldreq	r5, [r3], #0
     768:	06049351 			; <UNDEFINED> instruction: 0x06049351
     76c:	500800b7 	strhpl	r0, [r8], -r7
     770:	020800b7 	andeq	r0, r8, #183	; 0xb7
     774:	50509100 	subspl	r9, r0, r0, lsl #2
     778:	de0800b7 	mcrle	0, 0, r0, cr8, cr7, {5}
     77c:	140800b7 	strne	r0, [r8], #-183	; 0xb7
     780:	0825f400 	stmdaeq	r5!, {sl, ip, sp, lr, pc}
     784:	54442d18 	strbpl	r2, [r4], #-3352	; 0xd18
     788:	3fe921fb 	svccc	0x00e921fb
     78c:	f5250af5 			; <UNDEFINED> instruction: 0xf5250af5
     790:	1c22250a 	cfstr32ne	mvfx2, [r2], #-40	; 0xffffffd8
     794:	00b8289f 	umlalseq	r2, r8, pc, r8	; <UNPREDICTABLE>
     798:	00b86e08 	adcseq	r6, r8, r8, lsl #28
     79c:	91000208 	tstls	r0, r8, lsl #4
     7a0:	00b88050 	adcseq	r8, r8, r0, asr r0
     7a4:	00b96008 	adcseq	r6, r9, r8
     7a8:	f5004c08 			; <UNDEFINED> instruction: 0xf5004c08
     7ac:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     7b0:	2e928208 	cdpcs	2, 9, cr8, cr2, cr8, {0}
     7b4:	b3b8c5b1 			; <UNDEFINED> instruction: 0xb3b8c5b1
     7b8:	25f41e3f 	ldrbcs	r1, [r4, #3647]!	; 0xe3f
     7bc:	8d015908 	stchi	9, cr5, [r1, #-32]	; 0xffffffe0
     7c0:	e6066c1b 			; <UNDEFINED> instruction: 0xe6066c1b
     7c4:	04f51c3f 	ldrbteq	r1, [r5], #3135	; 0xc3f
     7c8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7cc:	598ac808 	stmibpl	sl, {r3, fp, lr, pc}
     7d0:	002ae59c 	mlaeq	sl, ip, r5, lr
     7d4:	04f52240 	ldrbteq	r2, [r5], #576	; 0x240
     7d8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7dc:	8a2d4b08 	bhi	b53404 <_Min_Stack_Size+0xb53004>
     7e0:	033a271c 	teqeq	sl, #28, 14	; 0x700000
     7e4:	04f51c40 	ldrbteq	r1, [r5], #3136	; 0xc40
     7e8:	25f41e25 	ldrbcs	r1, [r4, #3621]!	; 0xe25
     7ec:	00000008 	andeq	r0, r0, r8
     7f0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     7f4:	009f223f 	addseq	r2, pc, pc, lsr r2	; <UNPREDICTABLE>
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	4a000000 	bmi	804 <_Min_Stack_Size+0x404>
     800:	6a0800b7 	bvs	200ae4 <_Min_Stack_Size+0x2006e4>
     804:	160800b7 			; <UNDEFINED> instruction: 0x160800b7
     808:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
     80c:	f5250af5 			; <UNDEFINED> instruction: 0xf5250af5
     810:	1c1e250a 	cfldr32ne	mvfx2, [lr], {10}
     814:	08f6007d 	ldmeq	r6!, {r0, r2, r3, r4, r5, r6}^
     818:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
     81c:	009f1b22 	addseq	r1, pc, r2, lsr #22
     820:	00000000 	andeq	r0, r0, r0
     824:	4a000000 	bmi	82c <_Min_Stack_Size+0x42c>
     828:	e00800b7 	strh	r0, [r8], -r7
     82c:	0c0800b7 	stceq	0, cr0, [r8], {183}	; 0xb7
     830:	f6489100 			; <UNDEFINED> instruction: 0xf6489100
     834:	50912508 	addspl	r2, r1, r8, lsl #10
     838:	1b2508f6 	blne	942c18 <_Min_Stack_Size+0x942818>
     83c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     840:	00000000 	andeq	r0, r0, r0
     844:	00b71a00 	adcseq	r1, r7, r0, lsl #20
     848:	00b72908 	adcseq	r2, r7, r8, lsl #18
     84c:	50000608 	andpl	r0, r0, r8, lsl #12
     850:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     854:	00b72904 	adcseq	r2, r7, r4, lsl #18
     858:	00b74a08 	adcseq	r4, r7, r8, lsl #20
     85c:	5a000608 	bpl	2084 <_Min_Stack_Size+0x1c84>
     860:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
     864:	00b74a04 	adcseq	r4, r7, r4, lsl #20
     868:	00b7ee08 	adcseq	lr, r7, r8, lsl #28
     86c:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
     870:	00b7ee00 	adcseq	lr, r7, r0, lsl #28
     874:	00b7f208 	adcseq	pc, r7, r8, lsl #4
     878:	91000208 	tstls	r0, r8, lsl #4
     87c:	00b82840 	adcseq	r2, r8, r0, asr #16
     880:	00b83008 	adcseq	r3, r8, r8
     884:	50000608 	andpl	r0, r0, r8, lsl #12
     888:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     88c:	00b83004 	adcseq	r3, r8, r4
     890:	00b86e08 	adcseq	r6, r8, r8, lsl #28
     894:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
	...
     8a0:	00b5c200 	adcseq	ip, r5, r0, lsl #4
     8a4:	00b8e608 	adcseq	lr, r8, r8, lsl #12
     8a8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
     8b4:	0800b5c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp, pc}
     8b8:	0800b5c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, sp, pc}
     8bc:	c8580001 	ldmdagt	r8, {r0}^
     8c0:	cc0800b5 	stcgt	0, cr0, [r8], {181}	; 0xb5
     8c4:	070800b5 			; <UNDEFINED> instruction: 0x070800b5
     8c8:	80807800 	addhi	r7, r0, r0, lsl #16
     8cc:	9f048080 	svcls	0x00048080
     8d0:	0800b5cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp, pc}
     8d4:	0800b5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, sp, pc}
     8d8:	80780007 	rsbshi	r0, r8, r7
     8dc:	03ffc080 	mvnseq	ip, #128	; 0x80
     8e0:	00b5d09f 	umlalseq	sp, r5, pc, r0	; <UNPREDICTABLE>
     8e4:	00b5db08 	adcseq	sp, r5, r8, lsl #22
     8e8:	71000908 	tstvc	r0, r8, lsl #18
     8ec:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     8f0:	9f1a7fff 	svcls	0x001a7fff
     8f4:	0800b5db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, sl, ip, sp, pc}
     8f8:	0800b5f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, ip, sp, pc}
     8fc:	00770009 	rsbseq	r0, r7, r9
     900:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
     904:	f29f1a7f 			; <UNDEFINED> instruction: 0xf29f1a7f
     908:	300800b5 	strhcc	r0, [r8], -r5
     90c:	010800b7 	strheq	r0, [r8, -r7]
     910:	b7305800 	ldrlt	r5, [r0, -r0, lsl #16]!
     914:	b7f20800 	ldrblt	r0, [r2, r0, lsl #16]!
     918:	00090800 	andeq	r0, r9, r0, lsl #16
     91c:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
     920:	1a7fffff 	bne	2000924 <_Min_Stack_Size+0x2000524>
     924:	00b7f29f 	umlalseq	pc, r7, pc, r2	; <UNPREDICTABLE>
     928:	00b7fb08 	adcseq	pc, r7, r8, lsl #22
     92c:	71000908 	tstvc	r0, r8, lsl #18
     930:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     934:	9f1a7fff 	svcls	0x001a7fff
     938:	0800b7fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
     93c:	0800b828 	stmdaeq	r0, {r3, r5, fp, ip, sp, pc}
     940:	00770009 	rsbseq	r0, r7, r9
     944:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
     948:	289f1a7f 	ldmcs	pc, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip}	; <UNPREDICTABLE>
     94c:	600800b8 	strhvs	r0, [r8], -r8
     950:	010800b9 	strheq	r0, [r8, -r9]
     954:	00005800 	andeq	r5, r0, r0, lsl #16
     958:	00000000 	andeq	r0, r0, r0
     95c:	b5c20000 	strblt	r0, [r2]
     960:	b8e60800 	stmialt	r6!, {fp}^
     964:	00060800 	andeq	r0, r6, r0, lsl #16
     968:	57049356 	smlsdpl	r4, r6, r3, r9
     96c:	00000493 	muleq	r0, r3, r4
     970:	00000000 	andeq	r0, r0, r0
     974:	b7240000 	strlt	r0, [r4, -r0]!
     978:	b7a60800 	strlt	r0, [r6, r0, lsl #16]!
     97c:	00060800 	andeq	r0, r6, r0, lsl #16
     980:	5b04935a 	blpl	1256f0 <_Min_Stack_Size+0x1252f0>
     984:	00000493 	muleq	r0, r3, r4
     988:	00000000 	andeq	r0, r0, r0
     98c:	b9d00000 	ldmiblt	r0, {}^	; <UNPREDICTABLE>
     990:	b9e00800 	stmiblt	r0!, {fp}^
     994:	00060800 	andeq	r0, r6, r0, lsl #16
     998:	51049350 	tstpl	r4, r0, asr r3
     99c:	b9e00493 	stmiblt	r0!, {r0, r1, r4, r7, sl}^
     9a0:	c5200800 	strgt	r0, [r0, #-2048]!	; 0x800
     9a4:	00060800 	andeq	r0, r6, r0, lsl #16
     9a8:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
     9ac:	00009f25 	andeq	r9, r0, r5, lsr #30
     9b0:	00000000 	andeq	r0, r0, r0
     9b4:	b9d00000 	ldmiblt	r0, {}^	; <UNPREDICTABLE>
     9b8:	b9f40800 	ldmiblt	r4!, {fp}^
     9bc:	00060800 	andeq	r0, r6, r0, lsl #16
     9c0:	53049352 	movwpl	r9, #17234	; 0x4352
     9c4:	b9f40493 	ldmiblt	r4!, {r0, r1, r4, r7, sl}^
     9c8:	bb040800 	bllt	1029d0 <_Min_Stack_Size+0x1025d0>
     9cc:	00060800 	andeq	r0, r6, r0, lsl #16
     9d0:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
     9d4:	bb049f25 	bllt	128670 <_Min_Stack_Size+0x128270>
     9d8:	bb180800 	bllt	6029e0 <_Min_Stack_Size+0x6025e0>
     9dc:	00060800 	andeq	r0, r6, r0, lsl #16
     9e0:	53049352 	movwpl	r9, #17234	; 0x4352
     9e4:	bb180493 	bllt	601c38 <_Min_Stack_Size+0x601838>
     9e8:	c5200800 	strgt	r0, [r0, #-2048]!	; 0x800
     9ec:	00060800 	andeq	r0, r6, r0, lsl #16
     9f0:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
     9f4:	00009f25 	andeq	r9, r0, r5, lsr #30
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	bba40000 	bllt	fe900a04 <_estack+0xde8d0a04>
     a00:	bbc40800 	bllt	ff102a08 <_estack+0xdf0d2a08>
     a04:	00060800 	andeq	r0, r6, r0, lsl #16
     a08:	51049350 	tstpl	r4, r0, asr r3
     a0c:	c0020493 	mulgt	r2, r3, r4
     a10:	c0680800 	rsbgt	r0, r8, r0, lsl #16
     a14:	00060800 	andeq	r0, r6, r0, lsl #16
     a18:	5b04935a 	blpl	125788 <_Min_Stack_Size+0x125388>
     a1c:	c1160493 			; <UNDEFINED> instruction: 0xc1160493
     a20:	c20c0800 	andgt	r0, ip, #0, 16
     a24:	00060800 	andeq	r0, r6, r0, lsl #16
     a28:	57049356 	smlsdpl	r4, r6, r3, r9
     a2c:	c20c0493 	andgt	r0, ip, #-1828716544	; 0x93000000
     a30:	c21b0800 	andsgt	r0, fp, #0, 16
     a34:	00060800 	andeq	r0, r6, r0, lsl #16
     a38:	53049352 	movwpl	r9, #17234	; 0x4352
     a3c:	c2e40493 	rscgt	r0, r4, #-1828716544	; 0x93000000
     a40:	c33c0800 	teqgt	ip, #0, 16
     a44:	00060800 	andeq	r0, r6, r0, lsl #16
     a48:	5b04935a 	blpl	1257b8 <_Min_Stack_Size+0x1253b8>
     a4c:	c4480493 	strbgt	r0, [r8], #-1171	; 0x493
     a50:	c44c0800 	strbgt	r0, [ip], #-2048	; 0x800
     a54:	00060800 	andeq	r0, r6, r0, lsl #16
     a58:	51049350 	tstpl	r4, r0, asr r3
     a5c:	c44c0493 	strbgt	r0, [ip], #-1171	; 0x493
     a60:	c4540800 	ldrbgt	r0, [r4], #-2048	; 0x800
     a64:	00060800 	andeq	r0, r6, r0, lsl #16
     a68:	53049350 	movwpl	r9, #17232	; 0x4350
     a6c:	c4540493 	ldrbgt	r0, [r4], #-1171	; 0x493
     a70:	c4570800 	ldrbgt	r0, [r7], #-2048	; 0x800
     a74:	00060800 	andeq	r0, r6, r0, lsl #16
     a78:	53049352 	movwpl	r9, #17234	; 0x4352
     a7c:	c4580493 	ldrbgt	r0, [r8], #-1171	; 0x493
     a80:	c45c0800 	ldrbgt	r0, [ip], #-2048	; 0x800
     a84:	00060800 	andeq	r0, r6, r0, lsl #16
     a88:	51049350 	tstpl	r4, r0, asr r3
     a8c:	c45c0493 	ldrbgt	r0, [ip], #-1171	; 0x493
     a90:	c4780800 	ldrbtgt	r0, [r8], #-2048	; 0x800
     a94:	00060800 	andeq	r0, r6, r0, lsl #16
     a98:	5b04935a 	blpl	125808 <_Min_Stack_Size+0x125408>
     a9c:	c47c0493 	ldrbtgt	r0, [ip], #-1171	; 0x493
     aa0:	c48e0800 	strgt	r0, [lr], #2048	; 0x800
     aa4:	00060800 	andeq	r0, r6, r0, lsl #16
     aa8:	5b04935a 	blpl	125818 <_Min_Stack_Size+0x125418>
     aac:	c4c80493 	strbgt	r0, [r8], #1171	; 0x493
     ab0:	c4ca0800 	strbgt	r0, [sl], #2048	; 0x800
     ab4:	00060800 	andeq	r0, r6, r0, lsl #16
     ab8:	53049352 	movwpl	r9, #17234	; 0x4352
     abc:	c4d20493 	ldrbgt	r0, [r2], #1171	; 0x493
     ac0:	c4d40800 	ldrbgt	r0, [r4], #2048	; 0x800
     ac4:	00060800 	andeq	r0, r6, r0, lsl #16
     ac8:	53049352 	movwpl	r9, #17234	; 0x4352
     acc:	00000493 	muleq	r0, r3, r4
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	ba960000 	blt	fe580adc <_estack+0xde550adc>
     ad8:	bae00800 	blt	ff802ae0 <_estack+0xdf7d2ae0>
     adc:	00060800 	andeq	r0, r6, r0, lsl #16
     ae0:	51049350 	tstpl	r4, r0, asr r3
     ae4:	bba40493 	bllt	fe901d38 <_estack+0xde8d1d38>
     ae8:	bbaa0800 	bllt	fea82af0 <_estack+0xdea52af0>
     aec:	00060800 	andeq	r0, r6, r0, lsl #16
     af0:	51049350 	tstpl	r4, r0, asr r3
     af4:	bbd60493 	bllt	ff581d48 <_estack+0xdf551d48>
     af8:	bbd80800 	bllt	ff602b00 <_estack+0xdf5d2b00>
     afc:	00060800 	andeq	r0, r6, r0, lsl #16
     b00:	51049350 	tstpl	r4, r0, asr r3
     b04:	bc0c0493 	cfstrslt	mvf0, [ip], {147}	; 0x93
     b08:	bc270800 	stclt	8, cr0, [r7], #-0
     b0c:	00060800 	andeq	r0, r6, r0, lsl #16
     b10:	51049350 	tstpl	r4, r0, asr r3
     b14:	bc280493 	cfstrslt	mvf0, [r8], #-588	; 0xfffffdb4
     b18:	bc320800 	ldclt	8, cr0, [r2], #-0
     b1c:	00060800 	andeq	r0, r6, r0, lsl #16
     b20:	51049350 	tstpl	r4, r0, asr r3
     b24:	bc9c0493 	cfldrslt	mvf0, [ip], {147}	; 0x93
     b28:	bca40800 	stclt	8, cr0, [r4]
     b2c:	00060800 	andeq	r0, r6, r0, lsl #16
     b30:	53049352 	movwpl	r9, #17234	; 0x4352
     b34:	c35c0493 	cmpgt	ip, #-1828716544	; 0x93000000
     b38:	c3870800 	orrgt	r0, r7, #0, 16
     b3c:	00060800 	andeq	r0, r6, r0, lsl #16
     b40:	51049350 	tstpl	r4, r0, asr r3
     b44:	c4480493 	strbgt	r0, [r8], #-1171	; 0x493
     b48:	c44c0800 	strbgt	r0, [ip], #-2048	; 0x800
     b4c:	00060800 	andeq	r0, r6, r0, lsl #16
     b50:	51049350 	tstpl	r4, r0, asr r3
     b54:	c44c0493 	strbgt	r0, [ip], #-1171	; 0x493
     b58:	c4540800 	ldrbgt	r0, [r4], #-2048	; 0x800
     b5c:	00060800 	andeq	r0, r6, r0, lsl #16
     b60:	53049350 	movwpl	r9, #17232	; 0x4350
     b64:	c4540493 	ldrbgt	r0, [r4], #-1171	; 0x493
     b68:	c4570800 	ldrbgt	r0, [r7], #-2048	; 0x800
     b6c:	00060800 	andeq	r0, r6, r0, lsl #16
     b70:	53049352 	movwpl	r9, #17234	; 0x4352
     b74:	00000493 	muleq	r0, r3, r4
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	bebe0000 	cdplt	0, 11, cr0, cr14, cr0, {0}
     b80:	bec00800 	cdplt	8, 12, cr0, cr0, cr0, {0}
     b84:	00060800 	andeq	r0, r6, r0, lsl #16
     b88:	51049350 	tstpl	r4, r0, asr r3
     b8c:	bec00493 	mcrlt	4, 6, r0, cr0, cr3, {4}
     b90:	bf780800 	svclt	0x00780800
     b94:	00030800 	andeq	r0, r3, r0, lsl #16
     b98:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	10000000 	andne	r0, r0, r0
     ba4:	780800bf 	stmdavc	r8, {r0, r1, r2, r3, r4, r5, r7}
     ba8:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     bac:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     bb0:	00049359 	andeq	r9, r4, r9, asr r3
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     bbc:	b00800be 	strhlt	r0, [r8], -lr
     bc0:	080800be 	stmdaeq	r8, {r1, r2, r3, r4, r5, r7}
     bc4:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     bc8:	222506f5 	eorcs	r0, r5, #256901120	; 0xf500000
     bcc:	00beb09f 	umlalseq	fp, lr, pc, r0	; <UNPREDICTABLE>
     bd0:	00beb308 	adcseq	fp, lr, r8, lsl #6
     bd4:	50000608 	andpl	r0, r0, r8, lsl #12
     bd8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     bdc:	00bfe804 	adcseq	lr, pc, r4, lsl #16
     be0:	00c09808 	sbceq	r9, r0, r8, lsl #16
     be4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     be8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     bec:	00c09a04 	sbceq	r9, r0, r4, lsl #20
     bf0:	00c0e808 	sbceq	lr, r0, r8, lsl #16
     bf4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     bf8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     bfc:	00c2e404 	sbceq	lr, r2, r4, lsl #8
     c00:	00c34008 	sbceq	r4, r3, r8
     c04:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     c08:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     c0c:	00c45c04 	sbceq	r5, r4, r4, lsl #24
     c10:	00c49008 	sbceq	r9, r4, r8
     c14:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     c18:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     c1c:	00000004 	andeq	r0, r0, r4
     c20:	00000000 	andeq	r0, r0, r0
     c24:	00beb000 	adcseq	fp, lr, r0
     c28:	00beb308 	adcseq	fp, lr, r8, lsl #6
     c2c:	f5000c08 			; <UNDEFINED> instruction: 0xf5000c08
     c30:	00f52506 	rscseq	r2, r5, r6, lsl #10
     c34:	2508f525 	strcs	pc, [r8, #-1317]	; 0x525
     c38:	da9f1c1c 	ble	fe7c7cb0 <_estack+0xde797cb0>
     c3c:	de0800bf 	mcrle	0, 0, r0, cr8, cr15, {5}
     c40:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     c44:	04935000 	ldreq	r5, [r3], #0
     c48:	de049351 	mcrle	3, 0, r9, cr4, cr1, {2}
     c4c:	c80800bf 	stmdagt	r8, {r0, r1, r2, r3, r4, r5, r7}
     c50:	030800c2 	movweq	r0, #32962	; 0x80c2
     c54:	7fa09100 	svcvc	0x00a09100
     c58:	0800c2e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr, pc}
     c5c:	0800c340 	stmdaeq	r0, {r6, r8, r9, lr, pc}
     c60:	a0910003 	addsge	r0, r1, r3
     c64:	00c45c7f 	sbceq	r5, r4, pc, ror ip
     c68:	00c49008 	sbceq	r9, r4, r8
     c6c:	91000308 	tstls	r0, r8, lsl #6
     c70:	c4c87fa0 	strbgt	r7, [r8], #4000	; 0xfa0
     c74:	c4d40800 	ldrbgt	r0, [r4], #2048	; 0x800
     c78:	00030800 	andeq	r0, r3, r0, lsl #16
     c7c:	007fa091 			; <UNDEFINED> instruction: 0x007fa091
     c80:	00000000 	andeq	r0, r0, r0
     c84:	8c000000 	stchi	0, cr0, [r0], {-0}
     c88:	9c0800bf 	stcls	0, cr0, [r8], {191}	; 0xbf
     c8c:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     c90:	04935b00 	ldreq	r5, [r3], #2816	; 0xb00
     c94:	9c04935c 	stcls	3, cr9, [r4], {92}	; 0x5c
     c98:	280800bf 	stmdacs	r8, {r0, r1, r2, r3, r4, r5, r7}
     c9c:	060800c0 	streq	r0, [r8], -r0, asr #1
     ca0:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     ca4:	28049359 	stmdacs	r4, {r0, r3, r4, r6, r8, r9, ip, pc}
     ca8:	ae0800c0 	cdpge	0, 0, cr0, cr8, cr0, {6}
     cac:	030800c1 	movweq	r0, #32961	; 0x80c1
     cb0:	7f989100 	svcvc	0x00989100
     cb4:	0800c2e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr, pc}
     cb8:	0800c2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, lr, pc}
     cbc:	93580006 	cmpls	r8, #6
     cc0:	04935904 	ldreq	r5, [r3], #2308	; 0x904
     cc4:	0800c2f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, lr, pc}
     cc8:	0800c340 	stmdaeq	r0, {r6, r8, r9, lr, pc}
     ccc:	98910003 	ldmls	r1, {r0, r1}
     cd0:	00c45c7f 	sbceq	r5, r4, pc, ror ip
     cd4:	00c49008 	sbceq	r9, r4, r8
     cd8:	91000308 	tstls	r0, r8, lsl #6
     cdc:	00007f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	bf320000 	svclt	0x00320000
     ce8:	bf350800 	svclt	0x00350800
     cec:	00130800 	andseq	r0, r3, r0, lsl #16
     cf0:	f67fb091 			; <UNDEFINED> instruction: 0xf67fb091
     cf4:	08f52508 	ldmeq	r5!, {r3, r8, sl, sp}^
     cf8:	4ef52225 	cdpmi	2, 15, cr2, cr5, cr5, {1}
     cfc:	04f52225 	ldrbteq	r2, [r5], #549	; 0x225
     d00:	359f2225 	ldrcc	r2, [pc, #549]	; f2d <_Min_Stack_Size+0xb2d>
     d04:	500800bf 	strhpl	r0, [r8], -pc	; <UNPREDICTABLE>
     d08:	160800bf 			; <UNDEFINED> instruction: 0x160800bf
     d0c:	7fb09100 	svcvc	0x00b09100
     d10:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
     d14:	91222508 	teqls	r2, r8, lsl #10
     d18:	08f67fa8 	ldmeq	r6!, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
     d1c:	04f52225 	ldrbteq	r2, [r5], #549	; 0x225
     d20:	509f2225 	addspl	r2, pc, r5, lsr #4
     d24:	530800bf 	movwpl	r0, #32959	; 0x80bf
     d28:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     d2c:	04935000 	ldreq	r5, [r3], #0
     d30:	78049351 	stmdavc	r4, {r0, r4, r6, r8, r9, ip, pc}
     d34:	5c0800bf 	stcpl	0, cr0, [r8], {191}	; 0xbf
     d38:	060800c0 	streq	r0, [r8], -r0, asr #1
     d3c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d40:	9c049357 	stcls	3, cr9, [r4], {87}	; 0x57
     d44:	ca0800c1 	bgt	201050 <_Min_Stack_Size+0x200c50>
     d48:	060800c1 	streq	r0, [r8], -r1, asr #1
     d4c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     d50:	e4049355 	str	r9, [r4], #-853	; 0x355
     d54:	3a0800c2 	bcc	201064 <_Min_Stack_Size+0x200c64>
     d58:	060800c3 	streq	r0, [r8], -r3, asr #1
     d5c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d60:	40049357 	andmi	r9, r4, r7, asr r3
     d64:	4a0800c3 	bmi	201078 <_Min_Stack_Size+0x200c78>
     d68:	060800c3 	streq	r0, [r8], -r3, asr #1
     d6c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     d70:	18049357 	stmdane	r4, {r0, r1, r2, r4, r6, r8, r9, ip, pc}
     d74:	2e0800c4 	cdpcs	0, 0, cr0, cr8, cr4, {6}
     d78:	080800c4 	stmdaeq	r8, {r2, r6, r7}
     d7c:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
     d80:	222504f5 	eorcs	r0, r5, #-184549376	; 0xf5000000
     d84:	00c42e9f 	smulleq	r2, r4, pc, lr	; <UNPREDICTABLE>
     d88:	00c43108 	sbceq	r3, r4, r8, lsl #2
     d8c:	50000608 	andpl	r0, r0, r8, lsl #12
     d90:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     d94:	00c45c04 	sbceq	r5, r4, r4, lsl #24
     d98:	00c47608 	sbceq	r7, r4, r8, lsl #12
     d9c:	56000608 	strpl	r0, [r0], -r8, lsl #12
     da0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     da4:	00c47c04 	sbceq	r7, r4, r4, lsl #24
     da8:	00c49008 	sbceq	r9, r4, r8
     dac:	56000608 	strpl	r0, [r0], -r8, lsl #12
     db0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
     db4:	00000004 	andeq	r0, r0, r4
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	00bf7400 	adcseq	r7, pc, r0, lsl #8
     dc0:	00bf7808 	adcseq	r7, pc, r8, lsl #16
     dc4:	50000608 	andpl	r0, r0, r8, lsl #12
     dc8:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     dcc:	00bf7804 	adcseq	r7, pc, r4, lsl #16
     dd0:	00c2c808 	sbceq	ip, r2, r8, lsl #16
     dd4:	91000308 	tstls	r0, r8, lsl #6
     dd8:	c2e47fa8 	rscgt	r7, r4, #168, 30	; 0x2a0
     ddc:	c34a0800 	movtgt	r0, #43008	; 0xa800
     de0:	00030800 	andeq	r0, r3, r0, lsl #16
     de4:	467fa891 			; <UNDEFINED> instruction: 0x467fa891
     de8:	480800c4 	stmdami	r8, {r2, r6, r7}
     dec:	060800c4 	streq	r0, [r8], -r4, asr #1
     df0:	04935000 	ldreq	r5, [r3], #0
     df4:	5c049351 	stcpl	3, cr9, [r4], {81}	; 0x51
     df8:	900800c4 	andls	r0, r8, r4, asr #1
     dfc:	030800c4 	movweq	r0, #32964	; 0x80c4
     e00:	7fa89100 	svcvc	0x00a89100
     e04:	0800c4c8 	stmdaeq	r0, {r3, r6, r7, sl, lr, pc}
     e08:	0800c4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr, pc}
     e0c:	a8910003 	ldmge	r1, {r0, r1}
     e10:	0000007f 	andeq	r0, r0, pc, ror r0
     e14:	00000000 	andeq	r0, r0, r0
     e18:	00bdf600 	adcseq	pc, sp, r0, lsl #12
     e1c:	00be1408 	adcseq	r1, lr, r8, lsl #8
     e20:	54000608 	strpl	r0, [r0], #-1544	; 0x608
     e24:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
     e28:	00be1404 	adcseq	r1, lr, r4, lsl #8
     e2c:	00be1808 	adcseq	r1, lr, r8, lsl #16
     e30:	50000608 	andpl	r0, r0, r8, lsl #12
     e34:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
     e38:	00be1804 	adcseq	r1, lr, r4, lsl #16
     e3c:	00bebe08 	adcseq	fp, lr, r8, lsl #28
     e40:	91000308 	tstls	r0, r8, lsl #6
     e44:	c19c7fb0 			; <UNDEFINED> instruction: 0xc19c7fb0
     e48:	c1ca0800 	bicgt	r0, sl, r0, lsl #16
     e4c:	00240800 	eoreq	r0, r4, r0, lsl #16
     e50:	f52506f5 			; <UNDEFINED> instruction: 0xf52506f5
     e54:	f51e2504 			; <UNDEFINED> instruction: 0xf51e2504
     e58:	25f42504 	ldrbcs	r2, [r4, #1284]!	; 0x504
     e5c:	00000008 	andeq	r0, r0, r8
     e60:	00000000 	andeq	r0, r0, r0
     e64:	f51b1c40 			; <UNDEFINED> instruction: 0xf51b1c40
     e68:	08f52506 	ldmeq	r5!, {r1, r2, r8, sl, sp}^
     e6c:	08f51e25 	ldmeq	r5!, {r0, r2, r5, r9, sl, fp, ip}^
     e70:	9f1c2225 	svcls	0x001c2225
	...
     e7c:	0800bce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp, pc}
     e80:	0800bd04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp, pc}
     e84:	93500006 	cmpls	r0, #6
     e88:	04935104 	ldreq	r5, [r3], #260	; 0x104
     e8c:	0800bd04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp, pc}
     e90:	0800bd0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp, ip, sp, pc}
     e94:	4e900008 	cdpmi	0, 9, cr0, cr0, cr8, {0}
     e98:	4f900493 	svcmi	0x00900493
     e9c:	bd0d0493 	cfstrslt	mvf0, [sp, #-588]	; 0xfffffdb4
     ea0:	becc0800 	cdplt	8, 12, cr0, cr12, cr0, {0}
     ea4:	00030800 	andeq	r0, r3, r0, lsl #16
     ea8:	787fa891 	ldmdavc	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
     eac:	8c0800bf 	stchi	0, cr0, [r8], {191}	; 0xbf
     eb0:	0a0800bf 	beq	2011b4 <_Min_Stack_Size+0x200db4>
     eb4:	00089e00 	andeq	r9, r8, r0, lsl #28
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	8c3ff000 	ldchi	0, cr15, [pc], #-0	; ec4 <_Min_Stack_Size+0xac4>
     ec0:	c80800bf 	stmdagt	r8, {r0, r1, r2, r3, r4, r5, r7}
     ec4:	030800c2 	movweq	r0, #32962	; 0x80c2
     ec8:	7fb89100 	svcvc	0x00b89100
     ecc:	0800c2e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr, pc}
     ed0:	0800c340 	stmdaeq	r0, {r6, r8, r9, lr, pc}
     ed4:	b8910003 	ldmlt	r1, {r0, r1}
     ed8:	00c3407f 	sbceq	r4, r3, pc, ror r0
     edc:	00c34a08 	sbceq	r4, r3, r8, lsl #20
     ee0:	9e000a08 	vmlals.f32	s0, s0, s16
     ee4:	00000008 	andeq	r0, r0, r8
     ee8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     eec:	00c45c3f 	sbceq	r5, r4, pc, lsr ip
     ef0:	00c49008 	sbceq	r9, r4, r8
     ef4:	91000308 	tstls	r0, r8, lsl #6
     ef8:	c4c87fb8 	strbgt	r7, [r8], #4024	; 0xfb8
     efc:	c4d40800 	ldrbgt	r0, [r4], #2048	; 0x800
     f00:	00030800 	andeq	r0, r3, r0, lsl #16
     f04:	007fb891 			; <UNDEFINED> instruction: 0x007fb891
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	26000000 	strcs	r0, [r0], -r0
     f10:	780800bf 	stmdavc	r8, {r0, r1, r2, r3, r4, r5, r7}
     f14:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     f18:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f1c:	5c049355 	stcpl	3, cr9, [r4], {85}	; 0x55
     f20:	840800c0 	strhi	r0, [r8], #-192	; 0xc0
     f24:	0a0800c0 	beq	20122c <_Min_Stack_Size+0x200e2c>
     f28:	00089e00 	andeq	r9, r8, r0, lsl #28
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	84000000 	strhi	r0, [r0], #-0
     f34:	950800c0 	strls	r0, [r8, #-192]	; 0xc0
     f38:	060800c0 	streq	r0, [r8], -r0, asr #1
     f3c:	04935200 	ldreq	r5, [r3], #512	; 0x200
     f40:	b6049353 			; <UNDEFINED> instruction: 0xb6049353
     f44:	140800c0 	strne	r0, [r8], #-192	; 0xc0
     f48:	060800c1 	streq	r0, [r8], -r1, asr #1
     f4c:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     f50:	40049357 	andmi	r9, r4, r7, asr r3
     f54:	9a0800c1 	bls	201260 <_Min_Stack_Size+0x200e60>
     f58:	060800c1 	streq	r0, [r8], -r1, asr #1
     f5c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f60:	92049355 	andls	r9, r4, #1409286145	; 0x54000001
     f64:	160800c3 	strne	r0, [r8], -r3, asr #1
     f68:	060800c4 	streq	r0, [r8], -r4, asr #1
     f6c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
     f70:	00049355 	andeq	r9, r4, r5, asr r3
     f74:	00000000 	andeq	r0, r0, r0
     f78:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     f7c:	200800bc 	strhcs	r0, [r8], -ip
     f80:	060800bd 			; <UNDEFINED> instruction: 0x060800bd
     f84:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     f88:	4e049357 	mcrmi	3, 0, r9, cr4, cr7, {2}
     f8c:	0c0800be 	stceq	0, cr0, [r8], {190}	; 0xbe
     f90:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     f94:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     f98:	c0049359 	andgt	r9, r4, r9, asr r3
     f9c:	2a0800c0 	bcs	2012a4 <_Min_Stack_Size+0x200ea4>
     fa0:	060800c1 	streq	r0, [r8], -r1, asr #1
     fa4:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     fa8:	a0049359 	andge	r9, r4, r9, asr r3
     fac:	480800c3 	stmdami	r8, {r0, r1, r6, r7}
     fb0:	060800c4 	streq	r0, [r8], -r4, asr #1
     fb4:	04935800 	ldreq	r5, [r3], #2048	; 0x800
     fb8:	00049359 	andeq	r9, r4, r9, asr r3
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	d4000000 	strle	r0, [r0], #-0
     fc4:	da0800bc 	ble	2012bc <_Min_Stack_Size+0x200ebc>
     fc8:	060800bc 			; <UNDEFINED> instruction: 0x060800bc
     fcc:	04935000 	ldreq	r5, [r3], #0
     fd0:	da049351 	ble	125d1c <_Min_Stack_Size+0x12591c>
     fd4:	df0800bc 	svcle	0x000800bc
     fd8:	060800bc 			; <UNDEFINED> instruction: 0x060800bc
     fdc:	04935200 	ldreq	r5, [r3], #512	; 0x200
     fe0:	df049353 	svcle	0x00049353
     fe4:	980800bc 	stmdals	r8, {r2, r3, r4, r5, r7}
     fe8:	020800be 	andeq	r0, r8, #190	; 0xbe
     fec:	98489100 	stmdals	r8, {r8, ip, pc}^
     ff0:	4e0800be 	mcrmi	0, 0, r0, cr8, cr14, {5}
     ff4:	060800bf 			; <UNDEFINED> instruction: 0x060800bf
     ff8:	04935600 	ldreq	r5, [r3], #1536	; 0x600
     ffc:	02049357 	andeq	r9, r4, #1543503873	; 0x5c000001
    1000:	3e0800c1 	cdpcc	0, 0, cr0, cr8, cr1, {6}
    1004:	060800c1 	streq	r0, [r8], -r1, asr #1
    1008:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    100c:	18049355 	stmdane	r4, {r0, r2, r4, r6, r8, r9, ip, pc}
    1010:	480800c4 	stmdami	r8, {r2, r6, r7}
    1014:	060800c4 	streq	r0, [r8], -r4, asr #1
    1018:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    101c:	00049355 	andeq	r9, r4, r5, asr r3
    1020:	00000000 	andeq	r0, r0, r0
    1024:	2c000000 	stccs	0, cr0, [r0], {-0}
    1028:	c80800c1 	stmdagt	r8, {r0, r6, r7}
    102c:	060800c2 	streq	r0, [r8], -r2, asr #1
    1030:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    1034:	92049359 	andls	r9, r4, #1677721601	; 0x64000001
    1038:	160800c3 	strne	r0, [r8], -r3, asr #1
    103c:	340800c4 	strcc	r0, [r8], #-196	; 0xc4
    1040:	2504f500 	strcs	pc, [r4, #-1280]	; 0x500
    1044:	1e2504f5 	mcrne	4, 1, r0, cr5, cr5, {7}
    1048:	000825f4 	strdeq	r2, [r8], -r4
    104c:	00000000 	andeq	r0, r0, r0
    1050:	f43fe000 			; <UNDEFINED> instruction: 0xf43fe000
    1054:	55550825 	ldrbpl	r0, [r5, #-2085]	; 0x825
    1058:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0x555
    105c:	04f53fd5 	ldrbteq	r3, [r5], #4053	; 0xfd5
    1060:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1064:	00000000 	andeq	r0, r0, r0
    1068:	3fd00000 	svccc	0x00d00000
    106c:	04f51c1e 	ldrbteq	r1, [r5], #3102	; 0xc1e
    1070:	1e1c1e25 	cdpne	14, 1, cr1, cr12, cr5, {1}
    1074:	00c4c89f 	smulleq	ip, r4, pc, r8	; <UNPREDICTABLE>
    1078:	00c4d408 	sbceq	sp, r4, r8, lsl #8
    107c:	58000608 	stmdapl	r0, {r3, r9, sl}
    1080:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    1084:	00000004 	andeq	r0, r0, r4
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00c04800 	sbceq	r4, r0, r0, lsl #16
    1090:	00c0aa08 	sbceq	sl, r0, r8, lsl #20
    1094:	58000108 	stmdapl	r0, {r3, r8}
    1098:	0800c47c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, lr, pc}
    109c:	0800c490 	stmdaeq	r0, {r4, r7, sl, lr, pc}
    10a0:	00770009 	rsbseq	r0, r7, r9
    10a4:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    10a8:	009f1a7f 	addseq	r1, pc, pc, ror sl	; <UNPREDICTABLE>
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	5a000000 	bpl	10b8 <_Min_Stack_Size+0xcb8>
    10b4:	660800bb 			; <UNDEFINED> instruction: 0x660800bb
    10b8:	010800bb 	strheq	r0, [r8, -fp]
    10bc:	bb665000 	bllt	19950c4 <_Min_Stack_Size+0x1994cc4>
    10c0:	bb740800 	bllt	1d030c8 <_Min_Stack_Size+0x1d02cc8>
    10c4:	000c0800 	andeq	r0, ip, r0, lsl #16
    10c8:	330a0074 	movwcc	r0, #41076	; 0xa074
    10cc:	44007804 	strmi	r7, [r0], #-2052	; 0x804
    10d0:	9f251c26 	svcls	0x00251c26
    10d4:	0800bc54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, sp, pc}
    10d8:	0800bc6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip, sp, pc}
    10dc:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    10e0:	fa0800bc 	blx	2013d8 <_Min_Stack_Size+0x200fd8>
    10e4:	0b0800bc 	bleq	2013dc <_Min_Stack_Size+0x200fdc>
    10e8:	7f989100 	svcvc	0x00989100
    10ec:	24f00906 	ldrbtcs	r0, [r0], #2310	; 0x906
    10f0:	9f25f009 	svcls	0x0025f009
    10f4:	0800c004 	stmdaeq	r0, {r2, lr, pc}
    10f8:	0800c05c 	stmdaeq	r0, {r2, r3, r4, r6, lr, pc}
    10fc:	0c570001 	mrrceq	0, 0, r0, r7, cr1
    1100:	c80800c2 	stmdagt	r8, {r1, r6, r7}
    1104:	010800c2 	smlabteq	r8, r2, r0, r0
    1108:	c2e45b00 	rscgt	r5, r4, #0, 22
    110c:	c33a0800 	teqgt	sl, #0, 16
    1110:	00010800 	andeq	r0, r1, r0, lsl #16
    1114:	00c45c57 	sbceq	r5, r4, r7, asr ip
    1118:	00c47608 	sbceq	r7, r4, r8, lsl #12
    111c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1120:	0800c47c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, lr, pc}
    1124:	0800c490 	stmdaeq	r0, {r4, r7, sl, lr, pc}
    1128:	9c570001 	mrrcls	0, 0, r0, r7, cr1
    112c:	ac0800c4 	stcge	0, cr0, [r8], {196}	; 0xc4
    1130:	010800c4 	smlabteq	r8, r4, r0, r0
    1134:	c4c85000 	strbgt	r5, [r8], #0
    1138:	c4d40800 	ldrbgt	r0, [r4], #2048	; 0x800
    113c:	00010800 	andeq	r0, r1, r0, lsl #16
    1140:	00c4d45b 	sbceq	sp, r4, fp, asr r4
    1144:	00c4d808 	sbceq	sp, r4, r8, lsl #16
    1148:	50000108 	andpl	r0, r0, r8, lsl #2
    114c:	0800c4d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr, pc}
    1150:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
    1154:	0078000c 	rsbseq	r0, r8, ip
    1158:	7804130a 	stmdavc	r4, {r1, r3, r8, r9, ip}
    115c:	1c264400 	cfstrsne	mvf4, [r6], #-0
    1160:	00009f26 	andeq	r9, r0, r6, lsr #30
    1164:	00000000 	andeq	r0, r0, r0
    1168:	bb460000 	bllt	1181170 <_Min_Stack_Size+0x1180d70>
    116c:	bb540800 	bllt	1503174 <_Min_Stack_Size+0x1502d74>
    1170:	00040800 	andeq	r0, r4, r0, lsl #16
    1174:	9f788172 	svcls	0x00788172
    1178:	0800bb54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip, sp, pc}
    117c:	0800bb74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}
    1180:	00780009 	rsbseq	r0, r8, r9
    1184:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1188:	689f1c03 	ldmvs	pc, {r0, r1, sl, fp, ip}	; <UNPREDICTABLE>
    118c:	820800bc 	andhi	r0, r8, #188	; 0xbc
    1190:	020800bc 	andeq	r0, r8, #188	; 0xbc
    1194:	829f3000 	addshi	r3, pc, #0
    1198:	8a0800bc 	bhi	201490 <_Min_Stack_Size+0x201090>
    119c:	010800bc 	strheq	r0, [r8, -ip]
    11a0:	c0485a00 	subgt	r5, r8, r0, lsl #20
    11a4:	c04c0800 	subgt	r0, ip, r0, lsl #16
    11a8:	00090800 	andeq	r0, r9, r0, lsl #16
    11ac:	26440078 			; <UNDEFINED> instruction: 0x26440078
    11b0:	1c03ff0a 	stcne	15, cr15, [r3], {10}
    11b4:	00c04c9f 	smulleq	r4, r0, pc, ip	; <UNPREDICTABLE>
    11b8:	00c05008 	sbceq	r5, r0, r8
    11bc:	73000408 	movwvc	r0, #1032	; 0x408
    11c0:	509f7881 	addspl	r7, pc, r1, lsl #17
    11c4:	5c0800c0 	stcpl	0, cr0, [r8], {192}	; 0xc0
    11c8:	030800c0 	movweq	r0, #32960	; 0x80c0
    11cc:	9f7f7300 	svcls	0x007f7300
    11d0:	0800c05c 	stmdaeq	r0, {r2, r3, r4, r6, lr, pc}
    11d4:	0800c064 	stmdaeq	r0, {r2, r5, r6, lr, pc}
    11d8:	81760004 	cmnhi	r6, r4
    11dc:	c0649f78 	rsbgt	r9, r4, r8, ror pc
    11e0:	c0950800 	addsgt	r0, r5, r0, lsl #16
    11e4:	00010800 	andeq	r0, r1, r0, lsl #16
    11e8:	00c0955e 	sbceq	r9, r0, lr, asr r5
    11ec:	00c0aa08 	sbceq	sl, r0, r8, lsl #20
    11f0:	40001a08 	andmi	r1, r0, r8, lsl #20
    11f4:	00782440 	rsbseq	r2, r8, r0, asr #8
    11f8:	fe0a2644 	cdp2	6, 0, cr2, cr10, cr4, {2}
    11fc:	77261c03 	strvc	r1, [r6, -r3, lsl #24]!
    1200:	e5092200 	str	r2, [r9, #-512]	; 0x200
    1204:	25f90924 	ldrbcs	r0, [r9, #2340]!	; 0x924
    1208:	1c03ff0a 	stcne	15, cr15, [r3], {10}
    120c:	00c47c9f 	smulleq	r7, r4, pc, ip	; <UNPREDICTABLE>
    1210:	00c49008 	sbceq	r9, r4, r8
    1214:	77000f08 	strvc	r0, [r0, -r8, lsl #30]
    1218:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    121c:	441a7fff 	ldrmi	r7, [sl], #-4095	; 0xfff
    1220:	03ff0a26 	mvnseq	r0, #155648	; 0x26000
    1224:	c4909f1c 	ldrgt	r9, [r0], #3868	; 0xf1c
    1228:	c4960800 	ldrgt	r0, [r6], #2048	; 0x800
    122c:	00040800 	andeq	r0, r4, r0, lsl #16
    1230:	9f788172 	svcls	0x00788172
    1234:	0800c496 	stmdaeq	r0, {r1, r2, r4, r7, sl, lr, pc}
    1238:	0800c4ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr, pc}
    123c:	00780009 	rsbseq	r0, r8, r9
    1240:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1244:	c09f1c03 	addsgt	r1, pc, r3, lsl #24
    1248:	c20800c4 	andgt	r0, r8, #196	; 0xc4
    124c:	040800c4 	streq	r0, [r8], #-196	; 0xc4
    1250:	78817200 	stmvc	r1, {r9, ip, sp, lr}
    1254:	00c4c29f 	smulleq	ip, r4, pc, r2	; <UNPREDICTABLE>
    1258:	00c4c808 	sbceq	ip, r4, r8, lsl #16
    125c:	78000908 	stmdavc	r0, {r3, r8, fp}
    1260:	0a264400 	beq	992268 <_Min_Stack_Size+0x991e68>
    1264:	9f1c03ff 	svcls	0x001c03ff
    1268:	0800c4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr, pc}
    126c:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
    1270:	00780009 	rsbseq	r0, r8, r9
    1274:	ff0a2644 			; <UNDEFINED> instruction: 0xff0a2644
    1278:	009f1c03 	addseq	r1, pc, r3, lsl #24
    127c:	00000000 	andeq	r0, r0, r0
    1280:	56000000 	strpl	r0, [r0], -r0
    1284:	5c0800ba 	stcpl	0, cr0, [r8], {186}	; 0xba
    1288:	020800ba 	andeq	r0, r8, #186	; 0xba
    128c:	5c9f3000 	ldcpl	0, cr3, [pc], {0}
    1290:	880800ba 	stmdahi	r8, {r1, r3, r4, r5, r7}
    1294:	030800ba 	movweq	r0, #32954	; 0x80ba
    1298:	7fa09100 	svcvc	0x00a09100
    129c:	0800bb2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, sp, pc}
    12a0:	0800bb74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}
    12a4:	9f300002 	svcls	0x00300002
    12a8:	0800bb74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}
    12ac:	0800bb9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
    12b0:	a0910003 	addsge	r0, r1, r3
    12b4:	00bbe07f 	adcseq	lr, fp, pc, ror r0
    12b8:	00bc0008 	adcseq	r0, ip, r8
    12bc:	91000308 	tstls	r0, r8, lsl #6
    12c0:	bc007fa0 	stclt	15, cr7, [r0], {160}	; 0xa0
    12c4:	bc040800 	stclt	8, cr0, [r4], {-0}
    12c8:	00020800 	andeq	r0, r2, r0, lsl #16
    12cc:	bc049f30 	stclt	15, cr9, [r4], {48}	; 0x30
    12d0:	bc0c0800 	stclt	8, cr0, [ip], {-0}
    12d4:	00010800 	andeq	r0, r1, r0, lsl #16
    12d8:	00c2c852 	sbceq	ip, r2, r2, asr r8
    12dc:	00c2d808 	sbceq	sp, r2, r8, lsl #16
    12e0:	91000308 	tstls	r0, r8, lsl #6
    12e4:	c2d87fa0 	sbcsgt	r7, r8, #160, 30	; 0x280
    12e8:	c2dc0800 	sbcsgt	r0, ip, #0, 16
    12ec:	00030800 	andeq	r0, r3, r0, lsl #16
    12f0:	4a7fa07d 	bmi	1fe94ec <_Min_Stack_Size+0x1fe90ec>
    12f4:	5c0800c3 	stcpl	0, cr0, [r8], {195}	; 0xc3
    12f8:	030800c3 	movweq	r0, #32963	; 0x80c3
    12fc:	7fa09100 	svcvc	0x00a09100
    1300:	0800c490 	stmdaeq	r0, {r4, r7, sl, lr, pc}
    1304:	0800c4ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr, pc}
    1308:	9f300002 	svcls	0x00300002
    130c:	0800c4c0 	stmdaeq	r0, {r6, r7, sl, lr, pc}
    1310:	0800c4c8 	stmdaeq	r0, {r3, r6, r7, sl, lr, pc}
    1314:	9f300002 	svcls	0x00300002
    1318:	0800c4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr, pc}
    131c:	0800c4de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, lr, pc}
    1320:	9f300002 	svcls	0x00300002
    1324:	0800c4de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, lr, pc}
    1328:	0800c520 	stmdaeq	r0, {r5, r8, sl, lr, pc}
    132c:	00500001 	subseq	r0, r0, r1
    1330:	00000000 	andeq	r0, r0, r0
    1334:	0c000000 	stceq	0, cr0, [r0], {-0}
    1338:	280800bc 	stmdacs	r8, {r2, r3, r4, r5, r7}
    133c:	020800bc 	andeq	r0, r8, #188	; 0xbc
    1340:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    1344:	320800bc 	andcc	r0, r8, #188	; 0xbc
    1348:	030800bc 	movweq	r0, #32956	; 0x80bc
    134c:	9fcb0900 	svcls	0x00cb0900
    1350:	0800bc32 	stmdaeq	r0, {r1, r4, r5, sl, fp, ip, sp, pc}
    1354:	0800bc52 	stmdaeq	r0, {r1, r4, r6, sl, fp, ip, sp, pc}
    1358:	54550001 	ldrbpl	r0, [r5], #-1
    135c:	720800bc 	andvc	r0, r8, #188	; 0xbc
    1360:	010800bc 	strheq	r0, [r8, -ip]
    1364:	bc725600 	ldcllt	6, cr5, [r2], #-0
    1368:	bf780800 	svclt	0x00780800
    136c:	00020800 	andeq	r0, r2, r0, lsl #16
    1370:	c0485491 	umaalgt	r5, r8, r1, r4
    1374:	c0580800 	subsgt	r0, r8, r0, lsl #16
    1378:	00020800 	andeq	r0, r2, r0, lsl #16
    137c:	c0589f30 	subsgt	r9, r8, r0, lsr pc
    1380:	c0880800 	addgt	r0, r8, r0, lsl #16
    1384:	00010800 	andeq	r0, r1, r0, lsl #16
    1388:	00c08851 	sbceq	r8, r0, r1, asr r8
    138c:	00c22008 	sbceq	r2, r2, r8
    1390:	5a000108 	bpl	17b8 <_Min_Stack_Size+0x13b8>
    1394:	0800c47c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, lr, pc}
    1398:	0800c490 	stmdaeq	r0, {r4, r7, sl, lr, pc}
    139c:	9f300002 	svcls	0x00300002
    13a0:	0800c4c8 	stmdaeq	r0, {r3, r6, r7, sl, lr, pc}
    13a4:	0800c4d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr, pc}
    13a8:	005a0001 	subseq	r0, sl, r1
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    13b4:	100800b9 	strhne	r0, [r8], -r9
    13b8:	010800ba 	strheq	r0, [r8, -sl]
    13bc:	ba265700 	blt	996fc4 <_Min_Stack_Size+0x996bc4>
    13c0:	bb000800 	bllt	33c8 <_Min_Stack_Size+0x2fc8>
    13c4:	00010800 	andeq	r0, r1, r0, lsl #16
    13c8:	00bb0457 	adcseq	r0, fp, r7, asr r4
    13cc:	00bb0a08 	adcseq	r0, fp, r8, lsl #20
    13d0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    13d4:	0800bb2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, sp, pc}
    13d8:	0800bb80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp, pc}
    13dc:	a4570001 	ldrbge	r0, [r7], #-1
    13e0:	d20800bb 	andle	r0, r8, #187	; 0xbb
    13e4:	010800bb 	strheq	r0, [r8, -fp]
    13e8:	bbd65700 	bllt	ff596ff0 <_estack+0xdf566ff0>
    13ec:	bbe60800 	bllt	ff9833f4 <_estack+0xdf9533f4>
    13f0:	00010800 	andeq	r0, r1, r0, lsl #16
    13f4:	00bc0057 	adcseq	r0, ip, r7, asr r0
    13f8:	00bc4608 	adcseq	r4, ip, r8, lsl #12
    13fc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1400:	0800c2c8 	stmdaeq	r0, {r3, r6, r7, r9, lr, pc}
    1404:	0800c2d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, lr, pc}
    1408:	dc570001 	mrrcle	0, 0, r0, r7, cr1
    140c:	e40800c2 	str	r0, [r8], #-194	; 0xc2
    1410:	010800c2 	smlabteq	r8, r2, r0, r0
    1414:	c35c5700 	cmpgt	ip, #0, 14
    1418:	c3bc0800 			; <UNDEFINED> instruction: 0xc3bc0800
    141c:	00010800 	andeq	r0, r1, r0, lsl #16
    1420:	00c44857 	sbceq	r4, r4, r7, asr r8
    1424:	00c45c08 	sbceq	r5, r4, r8, lsl #24
    1428:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    142c:	0800c490 	stmdaeq	r0, {r4, r7, sl, lr, pc}
    1430:	0800c4b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, lr, pc}
    1434:	c0570001 	subsgt	r0, r7, r1
    1438:	c80800c4 	stmdagt	r8, {r2, r6, r7}
    143c:	010800c4 	smlabteq	r8, r4, r0, r0
    1440:	c4d45700 	ldrbgt	r5, [r4], #1792	; 0x700
    1444:	c5200800 	strgt	r0, [r0, #-2048]!	; 0x800
    1448:	00010800 	andeq	r0, r1, r0, lsl #16
    144c:	00000057 	andeq	r0, r0, r7, asr r0
    1450:	00000000 	andeq	r0, r0, r0
    1454:	00b9ee00 	adcseq	lr, r9, r0, lsl #28
    1458:	00ba1c08 	adcseq	r1, sl, r8, lsl #24
    145c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1460:	0800ba26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, sp, pc}
    1464:	0800bb26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp, ip, sp, pc}
    1468:	2a550001 	bcs	1541474 <_Min_Stack_Size+0x1541074>
    146c:	360800bb 			; <UNDEFINED> instruction: 0x360800bb
    1470:	010800bc 	strheq	r0, [r8, -ip]
    1474:	c2c85500 	sbcgt	r5, r8, #0, 10
    1478:	c2d80800 	sbcsgt	r0, r8, #0, 16
    147c:	00010800 	andeq	r0, r1, r0, lsl #16
    1480:	00c2dc55 	sbceq	sp, r2, r5, asr ip
    1484:	00c2e408 	sbceq	lr, r2, r8, lsl #8
    1488:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    148c:	0800c34a 	stmdaeq	r0, {r1, r3, r6, r8, r9, lr, pc}
    1490:	0800c390 	stmdaeq	r0, {r4, r7, r8, r9, lr, pc}
    1494:	48550001 	ldmdami	r5, {r0}^
    1498:	5c0800c4 	stcpl	0, cr0, [r8], {196}	; 0xc4
    149c:	010800c4 	smlabteq	r8, r4, r0, r0
    14a0:	c4905500 	ldrgt	r5, [r0], #1280	; 0x500
    14a4:	c4c80800 	strbgt	r0, [r8], #2048	; 0x800
    14a8:	00010800 	andeq	r0, r1, r0, lsl #16
    14ac:	00c4d455 	sbceq	sp, r4, r5, asr r4
    14b0:	00c52008 	sbceq	r2, r5, r8
    14b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    14c0:	0800b9ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, pc}
    14c4:	0800ba10 	stmdaeq	r0, {r4, r9, fp, ip, sp, pc}
    14c8:	00770009 	rsbseq	r0, r7, r9
    14cc:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    14d0:	269f1a7f 			; <UNDEFINED> instruction: 0x269f1a7f
    14d4:	000800ba 	strheq	r0, [r8], -sl
    14d8:	090800bb 	stmdbeq	r8, {r0, r1, r3, r4, r5, r7}
    14dc:	0c007700 	stceq	7, cr7, [r0], {-0}
    14e0:	7fffffff 	svcvc	0x00ffffff
    14e4:	bb049f1a 	bllt	129154 <_Min_Stack_Size+0x128d54>
    14e8:	bb0a0800 	bllt	2834f0 <_Min_Stack_Size+0x2830f0>
    14ec:	00090800 	andeq	r0, r9, r0, lsl #16
    14f0:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    14f4:	1a7fffff 	bne	20014f8 <_Min_Stack_Size+0x20010f8>
    14f8:	00bb2a9f 	umlalseq	r2, fp, pc, sl	; <UNPREDICTABLE>
    14fc:	00bb8008 	adcseq	r8, fp, r8
    1500:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    1504:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    1508:	9f1a7fff 	svcls	0x001a7fff
    150c:	0800bba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, sp, pc}
    1510:	0800bbd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp, ip, sp, pc}
    1514:	00770009 	rsbseq	r0, r7, r9
    1518:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    151c:	d69f1a7f 			; <UNDEFINED> instruction: 0xd69f1a7f
    1520:	e60800bb 			; <UNDEFINED> instruction: 0xe60800bb
    1524:	090800bb 	stmdbeq	r8, {r0, r1, r3, r4, r5, r7}
    1528:	0c007700 	stceq	7, cr7, [r0], {-0}
    152c:	7fffffff 	svcvc	0x00ffffff
    1530:	bc009f1a 	stclt	15, cr9, [r0], {26}
    1534:	bc2e0800 	stclt	8, cr0, [lr], #-0
    1538:	00090800 	andeq	r0, r9, r0, lsl #16
    153c:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    1540:	1a7fffff 	bne	2001544 <_Min_Stack_Size+0x2001144>
    1544:	00bc329f 	umlalseq	r3, ip, pc, r2	; <UNPREDICTABLE>
    1548:	00bc5808 	adcseq	r5, ip, r8, lsl #16
    154c:	91000308 	tstls	r0, r8, lsl #6
    1550:	bc587f98 	mrrclt	15, 9, r7, r8, cr8
    1554:	bd080800 	stclt	8, cr0, [r8, #-0]
    1558:	00010800 	andeq	r0, r1, r0, lsl #16
    155c:	00c2c854 	sbceq	ip, r2, r4, asr r8
    1560:	00c2d808 	sbceq	sp, r2, r8, lsl #16
    1564:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    1568:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    156c:	9f1a7fff 	svcls	0x001a7fff
    1570:	0800c2dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, lr, pc}
    1574:	0800c2e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr, pc}
    1578:	00770009 	rsbseq	r0, r7, r9
    157c:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    1580:	5c9f1a7f 	vldmiapl	pc, {s2-s128}
    1584:	bc0800c3 	stclt	0, cr0, [r8], {195}	; 0xc3
    1588:	090800c3 	stmdbeq	r8, {r0, r1, r6, r7}
    158c:	0c007700 	stceq	7, cr7, [r0], {-0}
    1590:	7fffffff 	svcvc	0x00ffffff
    1594:	c4489f1a 	strbgt	r9, [r8], #-3866	; 0xf1a
    1598:	c45c0800 	ldrbgt	r0, [ip], #-2048	; 0x800
    159c:	00090800 	andeq	r0, r9, r0, lsl #16
    15a0:	ff0c0077 			; <UNDEFINED> instruction: 0xff0c0077
    15a4:	1a7fffff 	bne	20015a8 <_Min_Stack_Size+0x20011a8>
    15a8:	00c4909f 	smulleq	r9, r4, pc, r0	; <UNPREDICTABLE>
    15ac:	00c4b208 	sbceq	fp, r4, r8, lsl #4
    15b0:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    15b4:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    15b8:	9f1a7fff 	svcls	0x001a7fff
    15bc:	0800c4c0 	stmdaeq	r0, {r6, r7, sl, lr, pc}
    15c0:	0800c4c8 	stmdaeq	r0, {r3, r6, r7, sl, lr, pc}
    15c4:	00770009 	rsbseq	r0, r7, r9
    15c8:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    15cc:	d49f1a7f 	ldrle	r1, [pc], #2687	; 15d4 <_Min_Stack_Size+0x11d4>
    15d0:	200800c4 	andcs	r0, r8, r4, asr #1
    15d4:	090800c5 	stmdbeq	r8, {r0, r2, r6, r7}
    15d8:	0c007700 	stceq	7, cr7, [r0], {-0}
    15dc:	7fffffff 	svcvc	0x00ffffff
    15e0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	b9ee0000 	stmiblt	lr!, {}^	; <UNPREDICTABLE>
    15ec:	ba1c0800 	blt	7035f4 <_Min_Stack_Size+0x7031f4>
    15f0:	00010800 	andeq	r0, r1, r0, lsl #16
    15f4:	00ba2658 	adcseq	r2, sl, r8, asr r6
    15f8:	00bb2608 	adcseq	r2, fp, r8, lsl #12
    15fc:	58000108 	stmdapl	r0, {r3, r8}
    1600:	0800bb2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, sp, pc}
    1604:	0800bd00 	stmdaeq	r0, {r8, sl, fp, ip, sp, pc}
    1608:	c8580001 	ldmdagt	r8, {r0}^
    160c:	d80800c2 	stmdale	r8, {r1, r6, r7}
    1610:	010800c2 	smlabteq	r8, r2, r0, r0
    1614:	c2d85800 	sbcsgt	r5, r8, #0, 16
    1618:	c2db0800 	sbcsgt	r0, fp, #0, 16
    161c:	00090800 	andeq	r0, r9, r0, lsl #16
    1620:	ff0c007c 			; <UNDEFINED> instruction: 0xff0c007c
    1624:	1a7fffff 	bne	2001628 <_Min_Stack_Size+0x2001228>
    1628:	00c2dc9f 	smulleq	sp, r2, pc, ip	; <UNPREDICTABLE>
    162c:	00c2e408 	sbceq	lr, r2, r8, lsl #8
    1630:	58000108 	stmdapl	r0, {r3, r8}
    1634:	0800c34a 	stmdaeq	r0, {r1, r3, r6, r8, r9, lr, pc}
    1638:	0800c39e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, lr, pc}
    163c:	48580001 	ldmdami	r8, {r0}^
    1640:	5c0800c4 	stcpl	0, cr0, [r8], {196}	; 0xc4
    1644:	010800c4 	smlabteq	r8, r4, r0, r0
    1648:	c4905800 	ldrgt	r5, [r0], #2048	; 0x800
    164c:	c4c80800 	strbgt	r0, [r8], #2048	; 0x800
    1650:	00010800 	andeq	r0, r1, r0, lsl #16
    1654:	00c4d458 	sbceq	sp, r4, r8, asr r4
    1658:	00c52008 	sbceq	r2, r5, r8
    165c:	58000108 	stmdapl	r0, {r3, r8}
	...
    1668:	0800b9ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, pc}
    166c:	0800ba10 	stmdaeq	r0, {r4, r9, fp, ip, sp, pc}
    1670:	26560001 	ldrbcs	r0, [r6], -r1
    1674:	000800ba 	strheq	r0, [r8], -sl
    1678:	010800bb 	strheq	r0, [r8, -fp]
    167c:	bb045600 	bllt	116e84 <_Min_Stack_Size+0x116a84>
    1680:	bb0a0800 	bllt	283688 <_Min_Stack_Size+0x283288>
    1684:	00010800 	andeq	r0, r1, r0, lsl #16
    1688:	00bb2a56 	adcseq	r2, fp, r6, asr sl
    168c:	00bb8008 	adcseq	r8, fp, r8
    1690:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1694:	0800bba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, sp, pc}
    1698:	0800bbd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp, ip, sp, pc}
    169c:	d6560001 	ldrble	r0, [r6], -r1
    16a0:	e60800bb 			; <UNDEFINED> instruction: 0xe60800bb
    16a4:	010800bb 	strheq	r0, [r8, -fp]
    16a8:	bc005600 	stclt	6, cr5, [r0], {-0}
    16ac:	bc460800 	mcrrlt	8, 0, r0, r6, cr0
    16b0:	00010800 	andeq	r0, r1, r0, lsl #16
    16b4:	00c2c856 	sbceq	ip, r2, r6, asr r8
    16b8:	00c2d808 	sbceq	sp, r2, r8, lsl #16
    16bc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    16c0:	0800c2dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, lr, pc}
    16c4:	0800c2e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr, pc}
    16c8:	5c560001 	mrrcpl	0, 0, r0, r6, cr1
    16cc:	bc0800c3 	stclt	0, cr0, [r8], {195}	; 0xc3
    16d0:	010800c3 	smlabteq	r8, r3, r0, r0
    16d4:	c4485600 	strbgt	r5, [r8], #-1536	; 0x600
    16d8:	c45c0800 	ldrbgt	r0, [ip], #-2048	; 0x800
    16dc:	00010800 	andeq	r0, r1, r0, lsl #16
    16e0:	00c49056 	sbceq	r9, r4, r6, asr r0
    16e4:	00c4b208 	sbceq	fp, r4, r8, lsl #4
    16e8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    16ec:	0800c4c0 	stmdaeq	r0, {r6, r7, sl, lr, pc}
    16f0:	0800c4c8 	stmdaeq	r0, {r3, r6, r7, sl, lr, pc}
    16f4:	d4560001 	ldrble	r0, [r6], #-1
    16f8:	200800c4 	andcs	r0, r8, r4, asr #1
    16fc:	010800c5 	smlabteq	r8, r5, r0, r0
    1700:	00005600 	andeq	r5, r0, r0, lsl #12
    1704:	00000000 	andeq	r0, r0, r0
    1708:	b9ee0000 	stmiblt	lr!, {}^	; <UNPREDICTABLE>
    170c:	ba1c0800 	blt	703714 <_Min_Stack_Size+0x703314>
    1710:	00010800 	andeq	r0, r1, r0, lsl #16
    1714:	00ba2654 	adcseq	r2, sl, r4, asr r6
    1718:	00bb2608 	adcseq	r2, fp, r8, lsl #12
    171c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1720:	0800bb2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, sp, pc}
    1724:	0800bc36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, ip, sp, pc}
    1728:	c8540001 	ldmdagt	r4, {r0}^
    172c:	d80800c2 	stmdale	r8, {r1, r6, r7}
    1730:	010800c2 	smlabteq	r8, r2, r0, r0
    1734:	c2dc5400 	sbcsgt	r5, ip, #0, 8
    1738:	c2e40800 	rscgt	r0, r4, #0, 16
    173c:	00010800 	andeq	r0, r1, r0, lsl #16
    1740:	00c34a54 	sbceq	r4, r3, r4, asr sl
    1744:	00c39008 	sbceq	r9, r3, r8
    1748:	54000108 	strpl	r0, [r0], #-264	; 0x108
    174c:	0800c448 	stmdaeq	r0, {r3, r6, sl, lr, pc}
    1750:	0800c45c 	stmdaeq	r0, {r2, r3, r4, r6, sl, lr, pc}
    1754:	90540001 	subsls	r0, r4, r1
    1758:	c80800c4 	stmdagt	r8, {r2, r6, r7}
    175c:	010800c4 	smlabteq	r8, r4, r0, r0
    1760:	c4d45400 	ldrbgt	r5, [r4], #1024	; 0x400
    1764:	c5200800 	strgt	r0, [r0, #-2048]!	; 0x800
    1768:	00010800 	andeq	r0, r1, r0, lsl #16
    176c:	00000054 	andeq	r0, r0, r4, asr r0
    1770:	00000000 	andeq	r0, r0, r0
    1774:	00b9ee00 	adcseq	lr, r9, r0, lsl #28
    1778:	00ba0208 	adcseq	r0, sl, r8, lsl #4
    177c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1780:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1784:	00ba1404 	adcseq	r1, sl, r4, lsl #8
    1788:	00ba2608 	adcseq	r2, sl, r8, lsl #12
    178c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1790:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1794:	00ba2604 	adcseq	r2, sl, r4, lsl #12
    1798:	00ba5608 	adcseq	r5, sl, r8, lsl #12
    179c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17a0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17a4:	00ba5604 	adcseq	r5, sl, r4, lsl #12
    17a8:	00ba9e08 	adcseq	r9, sl, r8, lsl #28
    17ac:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17b0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17b4:	00ba9e04 	adcseq	r9, sl, r4, lsl #28
    17b8:	00bb0a08 	adcseq	r0, fp, r8, lsl #20
    17bc:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17c0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17c4:	00bb2a04 	adcseq	r2, fp, r4, lsl #20
    17c8:	00bba408 	adcseq	sl, fp, r8, lsl #8
    17cc:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17d0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17d4:	00bba404 	adcseq	sl, fp, r4, lsl #8
    17d8:	00bbe008 	adcseq	lr, fp, r8
    17dc:	56000608 	strpl	r0, [r0], -r8, lsl #12
    17e0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17e4:	00bbe004 	adcseq	lr, fp, r4
    17e8:	00bcb808 	adcseq	fp, ip, r8, lsl #16
    17ec:	59000608 	stmdbpl	r0, {r3, r9, sl}
    17f0:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    17f4:	00c2c804 	sbceq	ip, r2, r4, lsl #16
    17f8:	00c2d808 	sbceq	sp, r2, r8, lsl #16
    17fc:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1800:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1804:	00c2dc04 	sbceq	sp, r2, r4, lsl #24
    1808:	00c2e408 	sbceq	lr, r2, r8, lsl #8
    180c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1810:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1814:	00c34a04 	sbceq	r4, r3, r4, lsl #20
    1818:	00c35c08 	sbceq	r5, r3, r8, lsl #24
    181c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1820:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1824:	00c35c04 	sbceq	r5, r3, r4, lsl #24
    1828:	00c3bc08 	sbceq	fp, r3, r8, lsl #24
    182c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1830:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1834:	00c44804 	sbceq	r4, r4, r4, lsl #16
    1838:	00c45c08 	sbceq	r5, r4, r8, lsl #24
    183c:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1840:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1844:	00c49004 	sbceq	r9, r4, r4
    1848:	00c4c808 	sbceq	ip, r4, r8, lsl #16
    184c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1850:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1854:	00c4d404 	sbceq	sp, r4, r4, lsl #8
    1858:	00c52008 	sbceq	r2, r5, r8
    185c:	59000608 	stmdbpl	r0, {r3, r9, sl}
    1860:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1864:	00000004 	andeq	r0, r0, r4
    1868:	00000000 	andeq	r0, r0, r0
    186c:	00b9e000 	adcseq	lr, r9, r0
    1870:	00ba0208 	adcseq	r0, sl, r8, lsl #4
    1874:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1878:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    187c:	00ba0204 	adcseq	r0, sl, r4, lsl #4
    1880:	00ba4608 	adcseq	r4, sl, r8, lsl #12
    1884:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1888:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    188c:	00ba7004 	adcseq	r7, sl, r4
    1890:	00bb2608 	adcseq	r2, fp, r8, lsl #12
    1894:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1898:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    189c:	00bb9204 	adcseq	r9, fp, r4, lsl #4
    18a0:	00bc0008 	adcseq	r0, ip, r8
    18a4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18a8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18ac:	00bc0c04 	adcseq	r0, ip, r4, lsl #24
    18b0:	00bc1608 	adcseq	r1, ip, r8, lsl #12
    18b4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18b8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18bc:	00c2c804 	sbceq	ip, r2, r4, lsl #16
    18c0:	00c2d808 	sbceq	sp, r2, r8, lsl #16
    18c4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18c8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18cc:	00c2dc04 	sbceq	sp, r2, r4, lsl #24
    18d0:	00c2e408 	sbceq	lr, r2, r8, lsl #8
    18d4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18d8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18dc:	00c34a04 	sbceq	r4, r3, r4, lsl #20
    18e0:	00c39008 	sbceq	r9, r3, r8
    18e4:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    18e8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18ec:	00c39004 	sbceq	r9, r3, r4
    18f0:	00c39208 	sbceq	r9, r3, r8, lsl #4
    18f4:	5b000608 	blpl	311c <_Min_Stack_Size+0x2d1c>
    18f8:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    18fc:	00c44804 	sbceq	r4, r4, r4, lsl #16
    1900:	00c45c08 	sbceq	r5, r4, r8, lsl #24
    1904:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1908:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    190c:	00c4ac04 	sbceq	sl, r4, r4, lsl #24
    1910:	00c4c008 	sbceq	ip, r4, r8
    1914:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1918:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    191c:	00000004 	andeq	r0, r0, r4
    1920:	00000000 	andeq	r0, r0, r0
    1924:	00bd6e00 	adcseq	r6, sp, r0, lsl #28
    1928:	00bdf408 	adcseq	pc, sp, r8, lsl #8
    192c:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    1930:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    1934:	00be2a04 	adcseq	r2, lr, r4, lsl #20
    1938:	00be2d08 	adcseq	r2, lr, r8, lsl #26
    193c:	50000608 	andpl	r0, r0, r8, lsl #12
    1940:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1944:	00be2d04 	adcseq	r2, lr, r4, lsl #26
    1948:	00bf7808 	adcseq	r7, pc, r8, lsl #16
    194c:	91000208 	tstls	r0, r8, lsl #4
    1950:	00000040 	andeq	r0, r0, r0, asr #32
    1954:	00000000 	andeq	r0, r0, r0
    1958:	00bce400 	adcseq	lr, ip, r0, lsl #8
    195c:	00bd0208 	adcseq	r0, sp, r8, lsl #4
    1960:	50000608 	andpl	r0, r0, r8, lsl #12
    1964:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1968:	00bd0204 	adcseq	r0, sp, r4, lsl #4
    196c:	00be4c08 	adcseq	r4, lr, r8, lsl #24
    1970:	58000608 	stmdapl	r0, {r3, r9, sl}
    1974:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    1978:	00be4c04 	adcseq	r4, lr, r4, lsl #24
    197c:	00bf7808 	adcseq	r7, pc, r8, lsl #16
    1980:	91000308 	tstls	r0, r8, lsl #6
    1984:	00007f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    1988:	00000000 	andeq	r0, r0, r0
    198c:	bd5a0000 	ldcllt	0, cr0, [sl, #-0]
    1990:	be5c0800 	cdplt	8, 5, cr0, cr12, cr0, {0}
    1994:	00060800 	andeq	r0, r6, r0, lsl #16
    1998:	57049356 	smlsdpl	r4, r6, r3, r9
    199c:	00000493 	muleq	r0, r3, r4
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	bd020000 	stclt	0, cr0, [r2, #-0]
    19a8:	bd0d0800 	stclt	8, cr0, [sp, #-0]
    19ac:	00060800 	andeq	r0, r6, r0, lsl #16
    19b0:	53049352 	movwpl	r9, #17234	; 0x4352
    19b4:	be2a0493 	mcrlt	4, 1, r0, cr10, cr3, {4}
    19b8:	be2d0800 	cdplt	8, 2, cr0, cr13, cr0, {0}
    19bc:	00170800 	andseq	r0, r7, r0, lsl #16
    19c0:	f42500f5 	vld4.<illegal width 64>	{d0-d3}, [r5 :256], r5
    19c4:	00000825 	andeq	r0, r0, r5, lsr #16
    19c8:	00000000 	andeq	r0, r0, r0
    19cc:	91224008 	teqls	r2, r8
    19d0:	08f67fb0 	ldmeq	r6!, {r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
    19d4:	2d9f2225 	lfmcs	f2, 4, [pc, #148]	; 1a70 <_Min_Stack_Size+0x1670>
    19d8:	3a0800be 	bcc	201cd8 <_Min_Stack_Size+0x2018d8>
    19dc:	190800be 	stmdbne	r8, {r1, r2, r3, r4, r5, r7}
    19e0:	f6409100 			; <UNDEFINED> instruction: 0xf6409100
    19e4:	25f42508 	ldrbcs	r2, [r4, #1288]!	; 0x508
    19e8:	00000008 	andeq	r0, r0, r8
    19ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    19f0:	b0912240 	addslt	r2, r1, r0, asr #4
    19f4:	2508f67f 	strcs	pc, [r8, #-1663]	; 0x67f
    19f8:	be3a9f22 	cdplt	15, 3, cr9, cr10, cr2, {1}
    19fc:	be420800 	cdplt	8, 4, cr0, cr2, cr0, {0}
    1a00:	00060800 	andeq	r0, r6, r0, lsl #16
    1a04:	51049350 	tstpl	r4, r0, asr r3
    1a08:	00000493 	muleq	r0, r3, r4
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	be3a0000 	cdplt	0, 3, cr0, cr10, cr0, {0}
    1a14:	be420800 	cdplt	8, 4, cr0, cr2, cr0, {0}
    1a18:	001d0800 	andseq	r0, sp, r0, lsl #16
    1a1c:	f67fb091 			; <UNDEFINED> instruction: 0xf67fb091
    1a20:	00f52508 	rscseq	r2, r5, r8, lsl #10
    1a24:	0825f425 	stmdaeq	r5!, {r0, r2, r5, sl, ip, sp, lr, pc}
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	40080000 	andmi	r0, r8, r0
    1a30:	f640911c 			; <UNDEFINED> instruction: 0xf640911c
    1a34:	1c1c2508 	cfldr32ne	mvfx2, [ip], {8}
    1a38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	00bc9800 	adcseq	r9, ip, r0, lsl #16
    1a44:	00bca408 	adcseq	sl, ip, r8, lsl #8
    1a48:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1a4c:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1a50:	00000004 	andeq	r0, r0, r4
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	00bd0200 	adcseq	r0, sp, r0, lsl #4
    1a5c:	00bd0d08 	adcseq	r0, sp, r8, lsl #26
    1a60:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1a64:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1a68:	00000004 	andeq	r0, r0, r4
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	00be3800 	adcseq	r3, lr, r0, lsl #16
    1a74:	00be4208 	adcseq	r4, lr, r8, lsl #4
    1a78:	50000608 	andpl	r0, r0, r8, lsl #12
    1a7c:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1a80:	00000004 	andeq	r0, r0, r4
    1a84:	00000000 	andeq	r0, r0, r0
    1a88:	00bea600 	adcseq	sl, lr, r0, lsl #12
    1a8c:	00beb308 	adcseq	fp, lr, r8, lsl #6
    1a90:	50000608 	andpl	r0, r0, r8, lsl #12
    1a94:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1a98:	00000004 	andeq	r0, r0, r4
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	00bf4800 	adcseq	r4, pc, r0, lsl #16
    1aa4:	00bf5308 	adcseq	r5, pc, r8, lsl #6
    1aa8:	50000608 	andpl	r0, r0, r8, lsl #12
    1aac:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1ab0:	00000004 	andeq	r0, r0, r4
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	00c00400 	sbceq	r0, r0, r0, lsl #8
    1abc:	00c05c08 	sbceq	r5, r0, r8, lsl #24
    1ac0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ac4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ac8:	00c0aa04 	sbceq	sl, r0, r4, lsl #20
    1acc:	00c0ac08 	sbceq	sl, r0, r8, lsl #24
    1ad0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ad4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ad8:	00c2e404 	sbceq	lr, r2, r4, lsl #8
    1adc:	00c30208 	sbceq	r0, r3, r8, lsl #4
    1ae0:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1ae4:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1ae8:	00c30204 	sbceq	r0, r3, r4, lsl #4
    1aec:	00c30d08 	sbceq	r0, r3, r8, lsl #26
    1af0:	50000608 	andpl	r0, r0, r8, lsl #12
    1af4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1af8:	00c30d04 	sbceq	r0, r3, r4, lsl #26
    1afc:	00c33a08 	sbceq	r3, r3, r8, lsl #20
    1b00:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b04:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b08:	00c45c04 	sbceq	r5, r4, r4, lsl #24
    1b0c:	00c47608 	sbceq	r7, r4, r8, lsl #12
    1b10:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b14:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b18:	00c47c04 	sbceq	r7, r4, r4, lsl #24
    1b1c:	00c49008 	sbceq	r9, r4, r8
    1b20:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b24:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b28:	00000004 	andeq	r0, r0, r4
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	00c08400 	sbceq	r8, r0, r0, lsl #8
    1b34:	00c09508 	sbceq	r9, r0, r8, lsl #10
    1b38:	52000608 	andpl	r0, r0, #8, 12	; 0x800000
    1b3c:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    1b40:	00000004 	andeq	r0, r0, r4
    1b44:	00000000 	andeq	r0, r0, r0
    1b48:	00c0b600 	sbceq	fp, r0, r0, lsl #12
    1b4c:	00c11408 	sbceq	r1, r1, r8, lsl #8
    1b50:	56000608 	strpl	r0, [r0], -r8, lsl #12
    1b54:	93570493 	cmpls	r7, #-1828716544	; 0x93000000
    1b58:	00000004 	andeq	r0, r0, r4
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	00c42600 	sbceq	r2, r4, r0, lsl #12
    1b64:	00c43108 	sbceq	r3, r4, r8, lsl #2
    1b68:	50000608 	andpl	r0, r0, r8, lsl #12
    1b6c:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1b70:	00000004 	andeq	r0, r0, r4
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	00c52000 	sbceq	r2, r5, r0
    1b7c:	00c54e08 	sbceq	r4, r5, r8, lsl #28
    1b80:	50000608 	andpl	r0, r0, r8, lsl #12
    1b84:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1b88:	00c54e04 	sbceq	r4, r5, r4, lsl #28
    1b8c:	00c63008 	sbceq	r3, r6, r8
    1b90:	f3000608 	vmax.u8	d0, d0, d8
    1b94:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1b98:	00c6309f 	smulleq	r3, r6, pc, r0	; <UNPREDICTABLE>
    1b9c:	00c64c08 	sbceq	r4, r6, r8, lsl #24
    1ba0:	50000608 	andpl	r0, r0, r8, lsl #12
    1ba4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1ba8:	00c64c04 	sbceq	r4, r6, r4, lsl #24
    1bac:	00c66a08 	sbceq	r6, r6, r8, lsl #20
    1bb0:	f3000608 	vmax.u8	d0, d0, d8
    1bb4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bb8:	00c66a9f 	smulleq	r6, r6, pc, sl	; <UNPREDICTABLE>
    1bbc:	00c67108 	sbceq	r7, r6, r8, lsl #2
    1bc0:	50000608 	andpl	r0, r0, r8, lsl #12
    1bc4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1bc8:	00c67104 	sbceq	r7, r6, r4, lsl #2
    1bcc:	00c67e08 	sbceq	r7, r6, r8, lsl #28
    1bd0:	f3000608 	vmax.u8	d0, d0, d8
    1bd4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bd8:	00c67e9f 	smulleq	r7, r6, pc, lr	; <UNPREDICTABLE>
    1bdc:	00c68608 	sbceq	r8, r6, r8, lsl #12
    1be0:	50000608 	andpl	r0, r0, r8, lsl #12
    1be4:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1be8:	00c68604 	sbceq	r8, r6, r4, lsl #12
    1bec:	00c68a08 	sbceq	r8, r6, r8, lsl #20
    1bf0:	f3000608 	vmax.u8	d0, d0, d8
    1bf4:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1bf8:	00c68a9f 	smulleq	r8, r6, pc, sl	; <UNPREDICTABLE>
    1bfc:	00c69108 	sbceq	r9, r6, r8, lsl #2
    1c00:	50000608 	andpl	r0, r0, r8, lsl #12
    1c04:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1c08:	00c69104 	sbceq	r9, r6, r4, lsl #2
    1c0c:	00c69e08 	sbceq	r9, r6, r8, lsl #28
    1c10:	f3000608 	vmax.u8	d0, d0, d8
    1c14:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1c18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	00c5fe00 	sbceq	pc, r5, r0, lsl #28
    1c24:	00c60e08 	sbceq	r0, r6, r8, lsl #28
    1c28:	9e000a08 	vmlals.f32	s0, s0, s16
    1c2c:	00000008 	andeq	r0, r0, r8
    1c30:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    1c34:	0000003f 	andeq	r0, r0, pc, lsr r0
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	00c57600 	sbceq	r7, r5, r0, lsl #12
    1c40:	00c57e08 	sbceq	r7, r5, r8, lsl #28
    1c44:	40000408 	andmi	r0, r0, r8, lsl #8
    1c48:	7e9f2441 	cdpvc	4, 9, cr2, cr15, cr1, {2}
    1c4c:	a80800c5 	stmdage	r8, {r0, r2, r6, r7}
    1c50:	010800c5 	smlabteq	r8, r5, r0, r0
    1c54:	c5aa5100 	strgt	r5, [sl, #256]!	; 0x100
    1c58:	c5c40800 	strbgt	r0, [r4, #2048]	; 0x800
    1c5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c60:	00c5cc51 	sbceq	ip, r5, r1, asr ip
    1c64:	00c62a08 	sbceq	r2, r6, r8, lsl #20
    1c68:	51000108 	tstpl	r0, r8, lsl #2
	...
    1c74:	0800c5aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, lr, pc}
    1c78:	0800c5be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr, pc}
    1c7c:	d4550001 	ldrble	r0, [r5], #-1
    1c80:	fa0800c5 	blx	201f9c <_Min_Stack_Size+0x201b9c>
    1c84:	010800c5 	smlabteq	r8, r5, r0, r0
    1c88:	00005500 	andeq	r5, r0, r0, lsl #10
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	c5760000 	ldrbgt	r0, [r6, #-0]!
    1c94:	c5aa0800 	strgt	r0, [sl, #2048]!	; 0x800
    1c98:	00020800 	andeq	r0, r2, r0, lsl #16
    1c9c:	c5aa9f30 	strgt	r9, [sl, #3888]!	; 0xf30
    1ca0:	c6300800 	ldrtgt	r0, [r0], -r0, lsl #16
    1ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca8:	00000058 	andeq	r0, r0, r8, asr r0
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	00c54e00 	sbceq	r4, r5, r0, lsl #28
    1cb4:	00c56408 	sbceq	r6, r5, r8, lsl #8
    1cb8:	52000108 	andpl	r0, r0, #8, 2
    1cbc:	0800c568 	stmdaeq	r0, {r3, r5, r6, r8, sl, lr, pc}
    1cc0:	0800c596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, lr, pc}
    1cc4:	9a520001 	bls	1481cd0 <_Min_Stack_Size+0x14818d0>
    1cc8:	200800c5 	andcs	r0, r8, r5, asr #1
    1ccc:	010800c6 	smlabteq	r8, r6, r0, r0
    1cd0:	c6205200 	strtgt	r5, [r0], -r0, lsl #4
    1cd4:	c6300800 	ldrtgt	r0, [r0], -r0, lsl #16
    1cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cdc:	00c63c56 	sbceq	r3, r6, r6, asr ip
    1ce0:	00c64608 	sbceq	r4, r6, r8, lsl #12
    1ce4:	52000108 	andpl	r0, r0, #8, 2
    1ce8:	0800c668 	stmdaeq	r0, {r3, r5, r6, r9, sl, lr, pc}
    1cec:	0800c66a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, lr, pc}
    1cf0:	00520001 	subseq	r0, r2, r1
    1cf4:	00000000 	andeq	r0, r0, r0
    1cf8:	76000000 	strvc	r0, [r0], -r0
    1cfc:	aa0800c5 	bge	202018 <_Min_Stack_Size+0x201c18>
    1d00:	020800c5 	andeq	r0, r8, #197	; 0xc5
    1d04:	aa9f3000 	bge	fe7cdd0c <_estack+0xde79dd0c>
    1d08:	0c0800c5 	stceq	0, cr0, [r8], {197}	; 0xc5
    1d0c:	010800c6 	smlabteq	r8, r6, r0, r0
    1d10:	c60c5400 	strgt	r5, [ip], -r0, lsl #8
    1d14:	c60e0800 	strgt	r0, [lr], -r0, lsl #16
    1d18:	00060800 	andeq	r0, r6, r0, lsl #16
    1d1c:	00740073 	rsbseq	r0, r4, r3, ror r0
    1d20:	c60e9f22 	strgt	r9, [lr], -r2, lsr #30
    1d24:	c6100800 	ldrgt	r0, [r0], -r0, lsl #16
    1d28:	00010800 	andeq	r0, r1, r0, lsl #16
    1d2c:	00000054 	andeq	r0, r0, r4, asr r0
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	00c54e00 	sbceq	r4, r5, r0, lsl #28
    1d38:	00c55808 	sbceq	r5, r5, r8, lsl #16
    1d3c:	53000108 	movwpl	r0, #264	; 0x108
    1d40:	0800c560 	stmdaeq	r0, {r5, r6, r8, sl, lr, pc}
    1d44:	0800c572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, lr, pc}
    1d48:	74530001 	ldrbvc	r0, [r3], #-1
    1d4c:	8c0800c5 	stchi	0, cr0, [r8], {197}	; 0xc5
    1d50:	010800c5 	smlabteq	r8, r5, r0, r0
    1d54:	c58e5300 	strgt	r5, [lr, #768]	; 0x300
    1d58:	c5fc0800 	ldrbgt	r0, [ip, #2048]!	; 0x800
    1d5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1d60:	00c62053 	sbceq	r2, r6, r3, asr r0
    1d64:	00c62608 	sbceq	r2, r6, r8, lsl #12
    1d68:	53000108 	movwpl	r0, #264	; 0x108
    1d6c:	0800c626 	stmdaeq	r0, {r1, r2, r5, r9, sl, lr, pc}
    1d70:	0800c630 	stmdaeq	r0, {r4, r5, r9, sl, lr, pc}
    1d74:	00770008 	rsbseq	r0, r7, r8
    1d78:	00732444 	rsbseq	r2, r3, r4, asr #8
    1d7c:	c63a9f22 	ldrtgt	r9, [sl], -r2, lsr #30
    1d80:	c6400800 	strbgt	r0, [r0], -r0, lsl #16
    1d84:	00020800 	andeq	r0, r2, r0, lsl #16
    1d88:	c6409f30 			; <UNDEFINED> instruction: 0xc6409f30
    1d8c:	c6640800 	strbtgt	r0, [r4], -r0, lsl #16
    1d90:	00010800 	andeq	r0, r1, r0, lsl #16
    1d94:	00c66653 	sbceq	r6, r6, r3, asr r6
    1d98:	00c66a08 	sbceq	r6, r6, r8, lsl #20
    1d9c:	53000108 	movwpl	r0, #264	; 0x108
    1da0:	0800c682 	stmdaeq	r0, {r1, r7, r9, sl, lr, pc}
    1da4:	0800c68a 	stmdaeq	r0, {r1, r3, r7, r9, sl, lr, pc}
    1da8:	00530001 	subseq	r0, r3, r1
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	76000000 	strvc	r0, [r0], -r0
    1db4:	7e0800c5 	cdpvc	0, 0, cr0, cr8, cr5, {6}
    1db8:	020800c5 	andeq	r0, r8, #197	; 0xc5
    1dbc:	809f3000 	addshi	r3, pc, r0
    1dc0:	9e0800c5 	cdpls	0, 0, cr0, cr8, cr5, {6}
    1dc4:	060800c5 	streq	r0, [r8], -r5, asr #1
    1dc8:	71007500 	tstvc	r0, r0, lsl #10
    1dcc:	ac9f2200 	lfmge	f2, 4, [pc], {0}
    1dd0:	bc0800c5 	stclt	0, cr0, [r8], {197}	; 0xc5
    1dd4:	010800c5 	smlabteq	r8, r5, r0, r0
    1dd8:	00005900 	andeq	r5, r0, r0, lsl #18
    1ddc:	00000000 	andeq	r0, r0, r0
    1de0:	c5760000 	ldrbgt	r0, [r6, #-0]!
    1de4:	c57e0800 	ldrbgt	r0, [lr, #-2048]!	; 0x800
    1de8:	00020800 	andeq	r0, r2, r0, lsl #16
    1dec:	c57e9f30 	ldrbgt	r9, [lr, #-3888]!	; 0xf30
    1df0:	c6060800 	strgt	r0, [r6], -r0, lsl #16
    1df4:	00010800 	andeq	r0, r1, r0, lsl #16
    1df8:	00c6105c 	sbceq	r1, r6, ip, asr r0
    1dfc:	00c63008 	sbceq	r3, r6, r8
    1e00:	5c000108 	stfpls	f0, [r0], {8}
	...
    1e0c:	0800c54e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, lr, pc}
    1e10:	0800c630 	stmdaeq	r0, {r4, r5, r9, sl, lr, pc}
    1e14:	3a570001 	bcc	15c1e20 <_Min_Stack_Size+0x15c1a20>
    1e18:	3c0800c6 	stccc	0, cr0, [r8], {198}	; 0xc6
    1e1c:	020800c6 	andeq	r0, r8, #198	; 0xc6
    1e20:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    1e24:	460800c6 	strmi	r0, [r8], -r6, asr #1
    1e28:	010800c6 	smlabteq	r8, r6, r0, r0
    1e2c:	c6665700 	strbtgt	r5, [r6], -r0, lsl #14
    1e30:	c66a0800 	strbtgt	r0, [sl], -r0, lsl #16
    1e34:	00010800 	andeq	r0, r1, r0, lsl #16
    1e38:	00000057 	andeq	r0, r0, r7, asr r0
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	00c58000 	sbceq	r8, r5, r0
    1e44:	00c5aa08 	sbceq	sl, r5, r8, lsl #20
    1e48:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1e4c:	0800c5ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, lr, pc}
    1e50:	0800c5bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, lr, pc}
    1e54:	00590001 	subseq	r0, r9, r1
    1e58:	00000000 	andeq	r0, r0, r0
    1e5c:	46000000 	strmi	r0, [r0], -r0
    1e60:	4c0800c6 	stcmi	0, cr0, [r8], {198}	; 0xc6
    1e64:	020800c6 	andeq	r0, r8, #198	; 0xc6
    1e68:	4c9f3000 	ldcmi	0, cr3, [pc], {0}
    1e6c:	5e0800c6 	cdppl	0, 0, cr0, cr8, cr6, {6}
    1e70:	010800c6 	smlabteq	r8, r6, r0, r0
    1e74:	c6825100 	strgt	r5, [r2], r0, lsl #2
    1e78:	c68a0800 	strgt	r0, [sl], r0, lsl #16
    1e7c:	00020800 	andeq	r0, r2, r0, lsl #16
    1e80:	00009f30 	andeq	r9, r0, r0, lsr pc
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	c5420000 	strbgt	r0, [r2, #-0]
    1e8c:	c5540800 	ldrbgt	r0, [r4, #-2048]	; 0x800
    1e90:	00060800 	andeq	r0, r6, r0, lsl #16
    1e94:	51049350 	tstpl	r4, r0, asr r3
    1e98:	c6300493 			; <UNDEFINED> instruction: 0xc6300493
    1e9c:	c64a0800 	strbgt	r0, [sl], -r0, lsl #16
    1ea0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ea4:	51049350 	tstpl	r4, r0, asr r3
    1ea8:	c66a0493 			; <UNDEFINED> instruction: 0xc66a0493
    1eac:	c6710800 	ldrbtgt	r0, [r1], -r0, lsl #16
    1eb0:	00060800 	andeq	r0, r6, r0, lsl #16
    1eb4:	51049350 	tstpl	r4, r0, asr r3
    1eb8:	c67e0493 			; <UNDEFINED> instruction: 0xc67e0493
    1ebc:	c67e0800 	ldrbtgt	r0, [lr], -r0, lsl #16
    1ec0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ec4:	51049350 	tstpl	r4, r0, asr r3
    1ec8:	c68a0493 	pkhbtgt	r0, sl, r3, lsl #9
    1ecc:	c6910800 	ldrgt	r0, [r1], r0, lsl #16
    1ed0:	00060800 	andeq	r0, r6, r0, lsl #16
    1ed4:	51049350 	tstpl	r4, r0, asr r3
    1ed8:	00000493 	muleq	r0, r3, r4
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	c6a00000 	strtgt	r0, [r0], r0
    1ee4:	c6a80800 	strtgt	r0, [r8], r0, lsl #16
    1ee8:	00060800 	andeq	r0, r6, r0, lsl #16
    1eec:	51049350 	tstpl	r4, r0, asr r3
    1ef0:	c6a80493 	ssatgt	r0, #9, r3, lsl #9
    1ef4:	c6ac0800 	strtgt	r0, [ip], r0, lsl #16
    1ef8:	00060800 	andeq	r0, r6, r0, lsl #16
    1efc:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    1f00:	00009f25 	andeq	r9, r0, r5, lsr #30
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	c6a00000 	strtgt	r0, [r0], r0
    1f0c:	c6a40800 	strtgt	r0, [r4], r0, lsl #16
    1f10:	00010800 	andeq	r0, r1, r0, lsl #16
    1f14:	00000051 	andeq	r0, r0, r1, asr r0
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	00c6ac00 	sbceq	sl, r6, r0, lsl #24
    1f20:	00c6b408 	sbceq	fp, r6, r8, lsl #8
    1f24:	50000608 	andpl	r0, r0, r8, lsl #12
    1f28:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1f2c:	00c6b404 	sbceq	fp, r6, r4, lsl #8
    1f30:	00c6b608 	sbceq	fp, r6, r8, lsl #12
    1f34:	f3000608 	vmax.u8	d0, d0, d8
    1f38:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1f3c:	00c6b69f 	smulleq	fp, r6, pc, r6	; <UNPREDICTABLE>
    1f40:	00c6d408 	sbceq	sp, r6, r8, lsl #8
    1f44:	50000608 	andpl	r0, r0, r8, lsl #12
    1f48:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    1f4c:	00c6d404 	sbceq	sp, r6, r4, lsl #8
    1f50:	00c6fc08 	sbceq	pc, r6, r8, lsl #24
    1f54:	f3000608 	vmax.u8	d0, d0, d8
    1f58:	2500f503 	strcs	pc, [r0, #-1283]	; 0x503
    1f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	00c6ac00 	sbceq	sl, r6, r0, lsl #24
    1f68:	00c6b408 	sbceq	fp, r6, r8, lsl #8
    1f6c:	51000108 	tstpl	r0, r8, lsl #2
    1f70:	0800c6b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, lr, pc}
    1f74:	0800c6d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, lr, pc}
    1f78:	00510001 	subseq	r0, r1, r1
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	ac000000 	stcge	0, cr0, [r0], {-0}
    1f84:	b40800c6 	strlt	r0, [r8], #-198	; 0xc6
    1f88:	010800c6 	smlabteq	r8, r6, r0, r0
    1f8c:	c6b65000 	ldrtgt	r5, [r6], r0
    1f90:	c6d40800 	ldrbgt	r0, [r4], r0, lsl #16
    1f94:	00010800 	andeq	r0, r1, r0, lsl #16
    1f98:	00000050 	andeq	r0, r0, r0, asr r0
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	00c6fc00 	sbceq	pc, r6, r0, lsl #24
    1fa4:	00c6fe08 	sbceq	pc, r6, r8, lsl #28
    1fa8:	50000108 	andpl	r0, r0, r8, lsl #2
    1fac:	0800c6fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, lr, pc}
    1fb0:	0800c700 	stmdaeq	r0, {r8, r9, sl, lr, pc}
    1fb4:	01f30004 	mvnseq	r0, r4
    1fb8:	00009f50 	andeq	r9, r0, r0, asr pc
    1fbc:	00000000 	andeq	r0, r0, r0
    1fc0:	c7000000 	strgt	r0, [r0, -r0]
    1fc4:	c7040800 	strgt	r0, [r4, -r0, lsl #16]
    1fc8:	00010800 	andeq	r0, r1, r0, lsl #16
    1fcc:	00c70450 	sbceq	r0, r7, r0, asr r4
    1fd0:	00c70a08 	sbceq	r0, r7, r8, lsl #20
    1fd4:	f3000408 	vshl.u8	d0, d8, d0
    1fd8:	009f5001 	addseq	r5, pc, r1
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1fe4:	3e0800c7 	cdpcc	0, 0, cr0, cr8, cr7, {6}
    1fe8:	060800c7 	streq	r0, [r8], -r7, asr #1
    1fec:	04935000 	ldreq	r5, [r3], #0
    1ff0:	3e049351 	mcrcc	3, 0, r9, cr4, cr1, {2}
    1ff4:	7e0800c7 	cdpvc	0, 0, cr0, cr8, cr7, {6}
    1ff8:	060800c7 	streq	r0, [r8], -r7, asr #1
    1ffc:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2000:	9c9f2500 	cfldr32ls	mvfx2, [pc], {0}
    2004:	a60800c7 	strge	r0, [r8], -r7, asr #1
    2008:	060800c7 	streq	r0, [r8], -r7, asr #1
    200c:	04935000 	ldreq	r5, [r3], #0
    2010:	a6049351 			; <UNDEFINED> instruction: 0xa6049351
    2014:	aa0800c7 	bge	202338 <_Min_Stack_Size+0x201f38>
    2018:	060800c7 	streq	r0, [r8], -r7, asr #1
    201c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2020:	b09f2500 	addslt	r2, pc, r0, lsl #10
    2024:	e60800c7 	str	r0, [r8], -r7, asr #1
    2028:	060800c7 	streq	r0, [r8], -r7, asr #1
    202c:	04935000 	ldreq	r5, [r3], #0
    2030:	e6049351 			; <UNDEFINED> instruction: 0xe6049351
    2034:	040800c7 	streq	r0, [r8], #-199	; 0xc7
    2038:	060800c8 	streq	r0, [r8], -r8, asr #1
    203c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2040:	049f2500 	ldreq	r2, [pc], #1280	; 2048 <_Min_Stack_Size+0x1c48>
    2044:	0b0800c8 	bleq	20236c <_Min_Stack_Size+0x201f6c>
    2048:	060800c8 	streq	r0, [r8], -r8, asr #1
    204c:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2050:	26049353 			; <UNDEFINED> instruction: 0x26049353
    2054:	290800c8 	stmdbcs	r8, {r3, r6, r7}
    2058:	060800c8 	streq	r0, [r8], -r8, asr #1
    205c:	04935000 	ldreq	r5, [r3], #0
    2060:	29049351 	stmdbcs	r4, {r0, r4, r6, r8, r9, ip, pc}
    2064:	2c0800c8 	stccs	0, cr0, [r8], {200}	; 0xc8
    2068:	060800c8 	streq	r0, [r8], -r8, asr #1
    206c:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2070:	009f2500 	addseq	r2, pc, r0, lsl #10
    2074:	00000000 	andeq	r0, r0, r0
    2078:	24000000 	strcs	r0, [r0], #-0
    207c:	680800c7 	stmdavs	r8, {r0, r1, r2, r6, r7}
    2080:	010800c7 	smlabteq	r8, r7, r0, r0
    2084:	c7685500 	strbgt	r5, [r8, -r0, lsl #10]!
    2088:	c79c0800 	ldrgt	r0, [ip, r0, lsl #16]
    208c:	00010800 	andeq	r0, r1, r0, lsl #16
    2090:	00c79c59 	sbceq	r9, r7, r9, asr ip
    2094:	00c7aa08 	sbceq	sl, r7, r8, lsl #20
    2098:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    209c:	0800c7b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, lr, pc}
    20a0:	0800c7e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, lr, pc}
    20a4:	26550001 	ldrbcs	r0, [r5], -r1
    20a8:	2c0800c8 	stccs	0, cr0, [r8], {200}	; 0xc8
    20ac:	010800c8 	smlabteq	r8, r8, r0, r0
    20b0:	00005500 	andeq	r5, r0, r0, lsl #10
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	c72a0000 	strgt	r0, [sl, -r0]!
    20bc:	c7740800 	ldrbgt	r0, [r4, -r0, lsl #16]!
    20c0:	00010800 	andeq	r0, r1, r0, lsl #16
    20c4:	00c77458 	sbceq	r7, r7, r8, asr r4
    20c8:	00c79c08 	sbceq	r9, r7, r8, lsl #24
    20cc:	75000508 	strvc	r0, [r0, #-1288]	; 0x508
    20d0:	9f254f00 	svcls	0x00254f00
    20d4:	0800c79c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, lr, pc}
    20d8:	0800c82c 	stmdaeq	r0, {r2, r3, r5, fp, lr, pc}
    20dc:	00580001 	subseq	r0, r8, r1
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	3a000000 	bcc	20ec <_Min_Stack_Size+0x1cec>
    20e8:	560800c7 	strpl	r0, [r8], -r7, asr #1
    20ec:	010800c7 	smlabteq	r8, r7, r0, r0
    20f0:	c7ba5100 	ldrgt	r5, [sl, r0, lsl #2]!
    20f4:	c7cc0800 	strbgt	r0, [ip, r0, lsl #16]
    20f8:	00010800 	andeq	r0, r1, r0, lsl #16
    20fc:	00c7cc51 	sbceq	ip, r7, r1, asr ip
    2100:	00c7d008 	sbceq	sp, r7, r8
    2104:	09000808 	stmdbeq	r0, {r3, fp}
    2108:	250077ff 	strcs	r7, [r0, #-2047]	; 0x7ff
    210c:	d09f2531 	addsle	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
    2110:	d60800c7 	strle	r0, [r8], -r7, asr #1
    2114:	080800c7 	stmdaeq	r8, {r0, r1, r2, r6, r7}
    2118:	76ff0900 	ldrbtvc	r0, [pc], r0, lsl #18
    211c:	2531256c 	ldrcs	r2, [r1, #-1388]!	; 0x56c
    2120:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2124:	00000000 	andeq	r0, r0, r0
    2128:	00c76800 	sbceq	r6, r7, r0, lsl #16
    212c:	00c78508 	sbceq	r8, r7, r8, lsl #10
    2130:	5c000108 	stfpls	f0, [r0], {8}
    2134:	0800c7d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, lr, pc}
    2138:	0800c7d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, lr, pc}
    213c:	e45c0001 	ldrb	r0, [ip], #-1
    2140:	ec0800c7 	stc	0, cr0, [r8], {199}	; 0xc7
    2144:	010800c7 	smlabteq	r8, r7, r0, r0
    2148:	c7ec5100 	strbgt	r5, [ip, r0, lsl #2]!
    214c:	c8000800 	stmdagt	r0, {fp}
    2150:	000c0800 	andeq	r0, ip, r0, lsl #16
    2154:	f0090073 			; <UNDEFINED> instruction: 0xf0090073
    2158:	25f00924 	ldrbcs	r0, [r0, #2340]!	; 0x924
    215c:	9f210072 	svcls	0x00210072
    2160:	0800c800 	stmdaeq	r0, {fp, lr, pc}
    2164:	0800c80b 	stmdaeq	r0, {r0, r1, r3, fp, lr, pc}
    2168:	0075000c 	rsbseq	r0, r5, ip
    216c:	0924f009 	stmdbeq	r4!, {r0, r3, ip, sp, lr, pc}
    2170:	007225f0 	ldrshteq	r2, [r2], #-80	; 0xffffffb0
    2174:	00009f21 	andeq	r9, r0, r1, lsr #30
    2178:	00000000 	andeq	r0, r0, r0
    217c:	c81c0000 	ldmdagt	ip, {}	; <UNPREDICTABLE>
    2180:	c8240800 	stmdagt	r4!, {fp}
    2184:	00060800 	andeq	r0, r6, r0, lsl #16
    2188:	51049350 	tstpl	r4, r0, asr r3
    218c:	00000493 	muleq	r0, r3, r4
    2190:	00000000 	andeq	r0, r0, r0
    2194:	c7240000 	strgt	r0, [r4, -r0]!
    2198:	c7340800 	ldrgt	r0, [r4, -r0, lsl #16]!
    219c:	00060800 	andeq	r0, r6, r0, lsl #16
    21a0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21a4:	c73e0493 			; <UNDEFINED> instruction: 0xc73e0493
    21a8:	c7520800 	ldrbgt	r0, [r2, -r0, lsl #16]
    21ac:	00060800 	andeq	r0, r6, r0, lsl #16
    21b0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21b4:	c7560493 			; <UNDEFINED> instruction: 0xc7560493
    21b8:	c7680800 	strbgt	r0, [r8, -r0, lsl #16]!
    21bc:	00060800 	andeq	r0, r6, r0, lsl #16
    21c0:	55049352 	strpl	r9, [r4, #-850]	; 0x352
    21c4:	c7680493 			; <UNDEFINED> instruction: 0xc7680493
    21c8:	c79c0800 	ldrgt	r0, [ip, r0, lsl #16]
    21cc:	00060800 	andeq	r0, r6, r0, lsl #16
    21d0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21d4:	c79c0493 			; <UNDEFINED> instruction: 0xc79c0493
    21d8:	c7a80800 	strgt	r0, [r8, r0, lsl #16]!
    21dc:	00060800 	andeq	r0, r6, r0, lsl #16
    21e0:	51049350 	tstpl	r4, r0, asr r3
    21e4:	c7a80493 			; <UNDEFINED> instruction: 0xc7a80493
    21e8:	c7b00800 	ldrgt	r0, [r0, r0, lsl #16]!
    21ec:	00060800 	andeq	r0, r6, r0, lsl #16
    21f0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    21f4:	c7b00493 			; <UNDEFINED> instruction: 0xc7b00493
    21f8:	c7b80800 	ldrgt	r0, [r8, r0, lsl #16]!
    21fc:	00060800 	andeq	r0, r6, r0, lsl #16
    2200:	51049350 	tstpl	r4, r0, asr r3
    2204:	c7d60493 	bfigt	r0, r3, #9, #14
    2208:	c7da0800 	ldrbgt	r0, [sl, r0, lsl #16]
    220c:	00060800 	andeq	r0, r6, r0, lsl #16
    2210:	51049350 	tstpl	r4, r0, asr r3
    2214:	c7de0493 	bfigt	r0, r3, #9, #22
    2218:	c7e60800 	strbgt	r0, [r6, r0, lsl #16]!
    221c:	00060800 	andeq	r0, r6, r0, lsl #16
    2220:	53049350 	movwpl	r9, #17232	; 0x4350
    2224:	c7e60493 			; <UNDEFINED> instruction: 0xc7e60493
    2228:	c7f40800 	ldrbgt	r0, [r4, r0, lsl #16]!
    222c:	00060800 	andeq	r0, r6, r0, lsl #16
    2230:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    2234:	c8260493 	stmdagt	r6!, {r0, r1, r4, r7, sl}
    2238:	c8290800 	stmdagt	r9!, {fp}
    223c:	00060800 	andeq	r0, r6, r0, lsl #16
    2240:	51049350 	tstpl	r4, r0, asr r3
    2244:	c8290493 	stmdagt	r9!, {r0, r1, r4, r7, sl}
    2248:	c82c0800 	stmdagt	ip!, {fp}
    224c:	00060800 	andeq	r0, r6, r0, lsl #16
    2250:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    2254:	00000493 	muleq	r0, r3, r4
    2258:	00000000 	andeq	r0, r0, r0
    225c:	c77e0000 	ldrbgt	r0, [lr, -r0]!
    2260:	c7850800 	strgt	r0, [r5, r0, lsl #16]
    2264:	00060800 	andeq	r0, r6, r0, lsl #16
    2268:	5704935c 	smlsdpl	r4, ip, r3, r9
    226c:	00000493 	muleq	r0, r3, r4
    2270:	00000000 	andeq	r0, r0, r0
    2274:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2278:	c80b0800 	stmdagt	fp, {fp}
    227c:	00060800 	andeq	r0, r6, r0, lsl #16
    2280:	53049352 	movwpl	r9, #17234	; 0x4352
    2284:	00000493 	muleq	r0, r3, r4
    2288:	00000000 	andeq	r0, r0, r0
    228c:	c8300000 	ldmdagt	r0!, {}	; <UNPREDICTABLE>
    2290:	c8550800 	ldmdagt	r5, {fp}^
    2294:	00060800 	andeq	r0, r6, r0, lsl #16
    2298:	51049350 	tstpl	r4, r0, asr r3
    229c:	c8550493 	ldmdagt	r5, {r0, r1, r4, r7, sl}^
    22a0:	c8640800 	stmdagt	r4!, {fp}^
    22a4:	00060800 	andeq	r0, r6, r0, lsl #16
    22a8:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    22ac:	c8649f25 	stmdagt	r4!, {r0, r2, r5, r8, r9, sl, fp, ip, pc}^
    22b0:	c8ba0800 	ldmgt	sl!, {fp}
    22b4:	00060800 	andeq	r0, r6, r0, lsl #16
    22b8:	57049356 	smlsdpl	r4, r6, r3, r9
    22bc:	c8be0493 	ldmgt	lr!, {r0, r1, r4, r7, sl}
    22c0:	c8c20800 	stmiagt	r2, {fp}^
    22c4:	00060800 	andeq	r0, r6, r0, lsl #16
    22c8:	51049350 	tstpl	r4, r0, asr r3
    22cc:	c8c20493 	stmiagt	r2, {r0, r1, r4, r7, sl}^
    22d0:	c9320800 	ldmdbgt	r2!, {fp}
    22d4:	00060800 	andeq	r0, r6, r0, lsl #16
    22d8:	57049356 	smlsdpl	r4, r6, r3, r9
    22dc:	00000493 	muleq	r0, r3, r4
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	c8300000 	ldmdagt	r0!, {}	; <UNPREDICTABLE>
    22e8:	c8400800 	stmdagt	r0, {fp}^
    22ec:	00010800 	andeq	r0, r1, r0, lsl #16
    22f0:	00c84052 	sbceq	r4, r8, r2, asr r0
    22f4:	00c93208 	sbceq	r3, r9, r8, lsl #4
    22f8:	58000108 	stmdapl	r0, {r3, r8}
    22fc:	0800c932 	stmdaeq	r0, {r1, r4, r5, r8, fp, lr, pc}
    2300:	0800c948 	stmdaeq	r0, {r3, r6, r8, fp, lr, pc}
    2304:	01f30004 	mvnseq	r0, r4
    2308:	00009f52 	andeq	r9, r0, r2, asr pc
    230c:	00000000 	andeq	r0, r0, r0
    2310:	c8400000 	stmdagt	r0, {}^	; <UNPREDICTABLE>
    2314:	c8460800 	stmdagt	r6, {fp}^
    2318:	00010800 	andeq	r0, r1, r0, lsl #16
    231c:	00c84653 	sbceq	r4, r8, r3, asr r6
    2320:	00c85508 	sbceq	r5, r8, r8, lsl #10
    2324:	71000908 	tstvc	r0, r8, lsl #18
    2328:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    232c:	9f25f909 	svcls	0x0025f909
    2330:	0800c855 	stmdaeq	r0, {r0, r2, r4, r6, fp, lr, pc}
    2334:	0800c864 	stmdaeq	r0, {r2, r5, r6, fp, lr, pc}
    2338:	00770009 	rsbseq	r0, r7, r9
    233c:	0924e509 	stmdbeq	r4!, {r0, r3, r8, sl, sp, lr, pc}
    2340:	6e9f25f9 	mrcvs	5, 4, r2, cr15, cr9, {7}
    2344:	7c0800c8 	stcvc	0, cr0, [r8], {200}	; 0xc8
    2348:	010800c8 	smlabteq	r8, r8, r0, r0
    234c:	c8945300 	ldmgt	r4, {r8, r9, ip, lr}
    2350:	c8be0800 	ldmgt	lr!, {fp}
    2354:	00010800 	andeq	r0, r1, r0, lsl #16
    2358:	00c8be53 	sbceq	fp, r8, r3, asr lr
    235c:	00c8c208 	sbceq	ip, r8, r8, lsl #4
    2360:	71000908 	tstvc	r0, r8, lsl #18
    2364:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    2368:	9f25f909 	svcls	0x0025f909
    236c:	0800c8c2 	stmdaeq	r0, {r1, r6, r7, fp, lr, pc}
    2370:	0800c8cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr, pc}
    2374:	ec530001 	mrrc	0, 0, r0, r3, cr1
    2378:	f00800c8 			; <UNDEFINED> instruction: 0xf00800c8
    237c:	010800c8 	smlabteq	r8, r8, r0, r0
    2380:	c8f05300 	ldmgt	r0!, {r8, r9, ip, lr}^
    2384:	c8f30800 	ldmgt	r3!, {fp}^
    2388:	00090800 	andeq	r0, r9, r0, lsl #16
    238c:	e5090071 	str	r0, [r9, #-113]	; 0x71
    2390:	25f90924 	ldrbcs	r0, [r9, #2340]!	; 0x924
    2394:	00c8f39f 	smulleq	pc, r8, pc, r3	; <UNPREDICTABLE>
    2398:	00c8f808 	sbceq	pc, r8, r8, lsl #16
    239c:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    23a0:	24e50900 	strbtcs	r0, [r5], #2304	; 0x900
    23a4:	9f25f909 	svcls	0x0025f909
    23a8:	0800c8f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, lr, pc}
    23ac:	0800c902 	stmdaeq	r0, {r1, r8, fp, lr, pc}
    23b0:	36730003 	ldrbtcc	r0, [r3], -r3
    23b4:	00c9029f 	smulleq	r0, r9, pc, r2	; <UNPREDICTABLE>
    23b8:	00c90808 	sbceq	r0, r9, r8, lsl #16
    23bc:	53000108 	movwpl	r0, #264	; 0x108
	...
    23c8:	0800c840 	stmdaeq	r0, {r6, fp, lr, pc}
    23cc:	0800c862 	stmdaeq	r0, {r1, r5, r6, fp, lr, pc}
    23d0:	6e570001 	cdpvs	0, 5, cr0, cr7, cr1, {0}
    23d4:	740800c8 	strvc	r0, [r8], #-200	; 0xc8
    23d8:	010800c8 	smlabteq	r8, r8, r0, r0
    23dc:	c8745100 	ldmdagt	r4!, {r8, ip, lr}^
    23e0:	c87a0800 	ldmdagt	sl!, {fp}^
    23e4:	00010800 	andeq	r0, r1, r0, lsl #16
    23e8:	00c87a52 	sbceq	r7, r8, r2, asr sl
    23ec:	00c89c08 	sbceq	r9, r8, r8, lsl #24
    23f0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    23f4:	0800c89c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr, pc}
    23f8:	0800c8a2 	stmdaeq	r0, {r1, r5, r7, fp, lr, pc}
    23fc:	a2510001 	subsge	r0, r1, #1
    2400:	ae0800c8 	cdpge	0, 0, cr0, cr8, cr8, {6}
    2404:	010800c8 	smlabteq	r8, r8, r0, r0
    2408:	c8ae5200 	stmiagt	lr!, {r9, ip, lr}
    240c:	c8b60800 	ldmgt	r6!, {fp}
    2410:	00010800 	andeq	r0, r1, r0, lsl #16
    2414:	00c8be57 	sbceq	fp, r8, r7, asr lr
    2418:	00c8c208 	sbceq	ip, r8, r8, lsl #4
    241c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2420:	0800c8c2 	stmdaeq	r0, {r1, r6, r7, fp, lr, pc}
    2424:	0800c8d0 	stmdaeq	r0, {r4, r6, r7, fp, lr, pc}
    2428:	d0520001 	subsle	r0, r2, r1
    242c:	d40800c8 	strle	r0, [r8], #-200	; 0xc8
    2430:	010800c8 	smlabteq	r8, r8, r0, r0
    2434:	c8d45700 	ldmgt	r4, {r8, r9, sl, ip, lr}^
    2438:	c8dd0800 	ldmgt	sp, {fp}^
    243c:	00010800 	andeq	r0, r1, r0, lsl #16
    2440:	00c8dd53 	sbceq	sp, r8, r3, asr sp
    2444:	00c8de08 	sbceq	sp, r8, r8, lsl #28
    2448:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    244c:	0800c8ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr, pc}
    2450:	0800c8f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, lr, pc}
    2454:	f8570001 			; <UNDEFINED> instruction: 0xf8570001
    2458:	fc0800c8 	stc2	0, cr0, [r8], {200}	; 0xc8
    245c:	010800c8 	smlabteq	r8, r8, r0, r0
    2460:	c8fc5200 	ldmgt	ip!, {r9, ip, lr}^
    2464:	c9060800 	stmdbgt	r6, {fp}
    2468:	00010800 	andeq	r0, r1, r0, lsl #16
    246c:	00c91a57 	sbceq	r1, r9, r7, asr sl
    2470:	00c92308 	sbceq	r2, r9, r8, lsl #6
    2474:	53000108 	movwpl	r0, #264	; 0x108
    2478:	0800c923 	stmdaeq	r0, {r0, r1, r5, r8, fp, lr, pc}
    247c:	0800c932 	stmdaeq	r0, {r1, r4, r5, r8, fp, lr, pc}
    2480:	00570001 	subseq	r0, r7, r1
    2484:	00000000 	andeq	r0, r0, r0
    2488:	40000000 	andmi	r0, r0, r0
    248c:	620800c8 	andvs	r0, r8, #200	; 0xc8
    2490:	010800c8 	smlabteq	r8, r8, r0, r0
    2494:	c8945600 	ldmgt	r4, {r9, sl, ip, lr}
    2498:	c8a60800 	stmiagt	r6!, {fp}
    249c:	00010800 	andeq	r0, r1, r0, lsl #16
    24a0:	00c8be56 	sbceq	fp, r8, r6, asr lr
    24a4:	00c8c208 	sbceq	ip, r8, r8, lsl #4
    24a8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    24ac:	0800c8ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr, pc}
    24b0:	0800c8f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, lr, pc}
    24b4:	00560001 	subseq	r0, r6, r1
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    24c0:	550800c8 	strpl	r0, [r8, #-200]	; 0xc8
    24c4:	060800c8 	streq	r0, [r8], -r8, asr #1
    24c8:	04935000 	ldreq	r5, [r3], #0
    24cc:	be049351 	mcrlt	3, 0, r9, cr4, cr1, {2}
    24d0:	be0800c8 	cdplt	0, 0, cr0, cr8, cr8, {6}
    24d4:	060800c8 	streq	r0, [r8], -r8, asr #1
    24d8:	04935000 	ldreq	r5, [r3], #0
    24dc:	00049351 	andeq	r9, r4, r1, asr r3
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	ba000000 	blt	24ec <_Min_Stack_Size+0x20ec>
    24e8:	be0800c8 	cdplt	0, 0, cr0, cr8, cr8, {6}
    24ec:	060800c8 	streq	r0, [r8], -r8, asr #1
    24f0:	04935600 	ldreq	r5, [r3], #1536	; 0x600
    24f4:	00049357 	andeq	r9, r4, r7, asr r3
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	06000000 	streq	r0, [r0], -r0
    2500:	1a0800c9 	bne	20282c <_Min_Stack_Size+0x20242c>
    2504:	060800c9 	streq	r0, [r8], -r9, asr #1
    2508:	04935600 	ldreq	r5, [r3], #1536	; 0x600
    250c:	00049357 	andeq	r9, r4, r7, asr r3
    2510:	00000000 	andeq	r0, r0, r0
    2514:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2518:	520800c9 	andpl	r0, r8, #201	; 0xc9
    251c:	060800c9 	streq	r0, [r8], -r9, asr #1
    2520:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2524:	52049353 	andpl	r9, r4, #1275068417	; 0x4c000001
    2528:	5a0800c9 	bpl	202854 <_Min_Stack_Size+0x202454>
    252c:	060800c9 	streq	r0, [r8], -r9, asr #1
    2530:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    2534:	009f2502 	addseq	r2, pc, r2, lsl #10
    2538:	00000000 	andeq	r0, r0, r0
    253c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2540:	4e0800c9 	cdpmi	0, 0, cr0, cr8, cr9, {6}
    2544:	010800c9 	smlabteq	r8, r9, r0, r0
    2548:	00005300 	andeq	r5, r0, r0, lsl #6
    254c:	00000000 	andeq	r0, r0, r0
    2550:	c9560000 	ldmdbgt	r6, {}^	; <UNPREDICTABLE>
    2554:	c9580800 	ldmdbgt	r8, {fp}^
    2558:	00060800 	andeq	r0, r6, r0, lsl #16
    255c:	51049350 	tstpl	r4, r0, asr r3
    2560:	00000493 	muleq	r0, r3, r4
    2564:	00000000 	andeq	r0, r0, r0
	...
